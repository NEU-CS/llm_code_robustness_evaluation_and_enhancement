[
    {
        "task_id": 11,
        "python_prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "test": "\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n\nassert remove_Occ(\"hellolloll\",\"l\") == \"helollol\"\nassert remove_Occ(\"\",\"l\") == \"\"\n",
        "code_str": "def remove_Occ(s,ch): \n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    for i in range(len(s) - 1,-1,-1):  \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n    return s ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_Occ(s,ch):\n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n            #begin to write code\n",
        "code_str_generate": "def remove_Occ(s,ch):\n\n    '''\n    progame language:python\n    description:Write a python function to remove first and last occurrence of a given character from the string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(len(s)): \n        if (s[i] == ch): \n            s = s[0 : i] + s[i + 1:] \n            break\n            #begin to write code\n"
    },
    {
        "task_id": 12,
        "python_prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "test": "\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\n",
        "code_str": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n",
        "code_str_generate": "def sort_matrix(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n"
    },
    {
        "task_id": 13,
        "python_prompt": "Write a function to count the most common words in a dictionary.",
        "test": "\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n\n",
        "code_str": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  top_four = word_counts.most_common(4)\n  return (top_four)\n",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter\ndef count_common(words):\n  word_counts = Counter(words)\n  #begin to write code\n",
        "code_str_generate": "from collections import Counter\ndef count_common(words):\n\n  '''\n  progame language:python\n  description:Write a function to count the most common words in a dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  word_counts = Counter(words)\n  #begin to write code\n"
    },
    {
        "task_id": 14,
        "python_prompt": "Write a python function to find the volume of a triangular prism.",
        "test": "\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n\n",
        "code_str": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Volume(l,b,h) :\n    #begin to write code\n",
        "code_str_generate": "def find_Volume(l,b,h) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the volume of a triangular prism.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 15,
        "python_prompt": "Write a function to split a string at lowercase letters.",
        "test": "\nassert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n\n",
        "code_str": "import re\ndef split_lowerstring(text):\n return (re.findall('[a-z][^a-z]*', text))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef split_lowerstring(text):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef split_lowerstring(text):\n\n    '''\n    progame language:python\n    description:Write a function to split a string at lowercase letters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 16,
        "python_prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "test": "\nassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')\n\nassert text_lowercase_underscore(\"aab-cbbbc\")==('Not matched!')\n",
        "code_str": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_lowercase_underscore(text):\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_lowercase_underscore(text):\n\n        '''\n        progame language:python\n        description:Write a function to find sequences of lowercase letters joined with an underscore.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = '^[a-z]+_[a-z]+$'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 17,
        "python_prompt": "Write a function to find the perimeter of a square.",
        "test": "\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n\n",
        "code_str": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter",
        "is_deleted": 1,
        "code_str_deleted": "def square_perimeter(a):\n  perimeter=4*a\n  #begin to write code\n",
        "code_str_generate": "def square_perimeter(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a square.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=4*a\n  #begin to write code\n"
    },
    {
        "task_id": 18,
        "python_prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "test": "\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' \n\n",
        "code_str": "NO_OF_CHARS = 256\ndef str_to_list(string): \n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \ndef remove_dirty_chars(string, second_string): \n\tcount = get_char_count_array(second_string) \n\tip_ind = 0\n\tres_ind = 0\n\ttemp = '' \n\tstr_list = str_to_list(string) \n\twhile ip_ind != len(str_list): \n\t\ttemp = str_list[ip_ind] \n\t\tif count[ord(temp)] == 0: \n\t\t\tstr_list[res_ind] = str_list[ip_ind] \n\t\t\tres_ind += 1\n\t\tip_ind+=1\n\treturn lst_to_string(str_list[0:res_ind]) ",
        "is_deleted": 1,
        "code_str_deleted": "def str_to_list(string):\nNO_OF_CHARS = 256\n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \n\t#begin to write code\n",
        "code_str_generate": "def str_to_list(string):\n\n    '''\n    progame language:python\n    description:Write a function to remove characters from the first string which are present in the second string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nNO_OF_CHARS = 256\n\ttemp = [] \n\tfor x in string: \n\t\ttemp.append(x) \n\treturn temp \ndef lst_to_string(List): \n\treturn ''.join(List) \ndef get_char_count_array(string): \n\tcount = [0] * NO_OF_CHARS \n\tfor i in string: \n\t\tcount[ord(i)] += 1\n\treturn count \n\t#begin to write code\n"
    },
    {
        "task_id": 19,
        "python_prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "test": "\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n\n",
        "code_str": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ",
        "is_deleted": 1,
        "code_str_deleted": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    #begin to write code\n",
        "code_str_generate": "def test_duplicate(arraynums):\n\n    '''\n    progame language:python\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nums_set = set(arraynums)    \n    #begin to write code\n"
    },
    {
        "task_id": 20,
        "python_prompt": "Write a function to check if the given number is woodball or not.",
        "test": "\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n\nassert is_woodall(32212254719) == True\nassert is_woodall(32212254718) == False\nassert is_woodall(159) == True\n",
        "code_str": "def is_woodall(x): \n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\twhile (x % 2 == 0): \n\t\tx = x/2\n\t\tp = p + 1\n\t\tif (p == x): \n\t\t\treturn True\n\treturn False",
        "is_deleted": 1,
        "code_str_deleted": "def is_woodall(x):\n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\t#begin to write code\n",
        "code_str_generate": "def is_woodall(x):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if the given number is woodball or not.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (x % 2 == 0): \n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx = x + 1 \n\tp = 0\n\t#begin to write code\n"
    },
    {
        "task_id": 21,
        "python_prompt": "Write a function to find m number of multiples of n.",
        "test": "\nassert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]\n\n",
        "code_str": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)",
        "is_deleted": 1,
        "code_str_deleted": "def multiples_of_num(m,n):\n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    #begin to write code\n",
        "code_str_generate": "def multiples_of_num(m,n):\n\n    '''\n    progame language:python\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    #begin to write code\n"
    },
    {
        "task_id": 22,
        "python_prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "test": "\nassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1\n\n",
        "code_str": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate",
        "is_deleted": 1,
        "code_str_deleted": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n        #begin to write code\n",
        "code_str_generate": "def find_first_duplicate(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n        #begin to write code\n"
    },
    {
        "task_id": 23,
        "python_prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "test": "\nassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n\nassert maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) == -2\n",
        "code_str": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ",
        "is_deleted": 1,
        "code_str_deleted": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        #begin to write code\n",
        "code_str_generate": "def maximum_Sum(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        #begin to write code\n"
    },
    {
        "task_id": 24,
        "python_prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "test": "\nassert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109\n\n",
        "code_str": "def binary_to_decimal(binary): \n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i) \n        binary = binary//10\n        i += 1\n    return (decimal)",
        "is_deleted": 1,
        "code_str_deleted": "def binary_to_decimal(binary):\n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        #begin to write code\n",
        "code_str_generate": "def binary_to_decimal(binary):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given binary number to its decimal equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    binary1 = binary \n    decimal, i, n = 0, 0, 0\n    while(binary != 0): \n        dec = binary % 10\n        #begin to write code\n"
    },
    {
        "task_id": 25,
        "python_prompt": "Write a python function to find the product of non-repeated elements in a given array.",
        "test": "\nassert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120\n\nassert find_Product([1,1,4,5,6,5,7,1,1,3,4],11) == 2520\n",
        "code_str": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Product(arr,n):\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n",
        "code_str_generate": "def find_Product(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n"
    },
    {
        "task_id": 26,
        "python_prompt": "Write a function to check if the given tuple list has all k elements.",
        "test": "\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False\n\nassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 6, 4), (4, )], 4) == False\n",
        "code_str": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n      if ele != K:\n        res = False\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def check_k_elements(test_list, K):\n  res = True\n  for tup in test_list:\n    for ele in tup:\n    #begin to write code\n",
        "code_str_generate": "def check_k_elements(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to check if the given tuple list has all k elements.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  for tup in test_list:\n    for ele in tup:\n    #begin to write code\n"
    },
    {
        "task_id": 27,
        "python_prompt": "Write a python function to remove all digits from a list of strings.",
        "test": "\nassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\n\n",
        "code_str": "import re  \ndef remove(list): \n    pattern = '[0-9]'\n    list = [re.sub(pattern, '', i) for i in list] \n    return list",
        "is_deleted": 1,
        "code_str_deleted": "import re  \ndef remove(list):\n    pattern = '[0-9]'\n    #begin to write code\n",
        "code_str_generate": "import re  \ndef remove(list):\n\n    '''\n    progame language:python\n    description:Write a python function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    pattern = '[0-9]'\n    #begin to write code\n"
    },
    {
        "task_id": 28,
        "python_prompt": "Write a python function to find binomial co-efficient.",
        "test": "\nassert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3\n\nassert binomial_Coeff(14,6) == 3003\n",
        "code_str": "def binomial_Coeff(n,k): \n    if k > n : \n       return 0\n    if k==0 or k ==n : \n        return 1 \n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
        "is_deleted": 1,
        "code_str_deleted": "def binomial_Coeff(n,k):\n    if k > n : \n       return 0\n       #begin to write code\n",
        "code_str_generate": "def binomial_Coeff(n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find binomial co-efficient.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if k > n : \n       return 0\n       #begin to write code\n"
    },
    {
        "task_id": 29,
        "python_prompt": "Write a python function to find the element occurring odd number of times.",
        "test": "\nassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5\n\n",
        "code_str": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1",
        "is_deleted": 1,
        "code_str_deleted": "def get_Odd_Occurrence(arr,arr_size):\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n",
        "code_str_generate": "def get_Odd_Occurrence(arr,arr_size):\n\n    '''\n    progame language:python\n    description:Write a python function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n"
    },
    {
        "task_id": 30,
        "python_prompt": "Write a python function to count all the substrings starting and ending with same characters.",
        "test": "\nassert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2\n\n",
        "code_str": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n): \n        for j in range(1,n-i+1):  \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Equality(s):\n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    #begin to write code\n",
        "code_str_generate": "def check_Equality(s):\n\n    '''\n    progame language:python\n    description:Write a python function to count all the substrings starting and ending with same characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    #begin to write code\n"
    },
    {
        "task_id": 31,
        "python_prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "test": "\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]\n\n",
        "code_str": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def func(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            #begin to write code\n",
        "code_str_generate": "def func(nums, k):\n\n    '''\n    progame language:python\n    description:Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            #begin to write code\n"
    },
    {
        "task_id": 32,
        "python_prompt": "Write a python function to find the largest prime factor of a given number.",
        "test": "\nassert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2\n\n",
        "code_str": "import math \ndef max_Prime_Factors (n): \n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while n % i == 0: \n            maxPrime = i \n            n = n / i \n    if n > 2: \n        maxPrime = n  \n    return int(maxPrime)",
        "is_deleted": 1,
        "code_str_deleted": "import math \ndef max_Prime_Factors (n):\n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n    #begin to write code\n",
        "code_str_generate": "import math \ndef max_Prime_Factors (n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest prime factor of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxPrime = -1 \n    while n%2 == 0: \n        maxPrime = 2\n        n >>= 1    \n    for i in range(3,int(math.sqrt(n))+1,2): \n    #begin to write code\n"
    },
    {
        "task_id": 33,
        "python_prompt": "Write a python function to convert a decimal number to binary number.",
        "test": "\nassert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100\n\n",
        "code_str": "def decimal_To_Binary(N): \n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        c = pow(10,cnt)  \n        B_Number += rem*c  \n        N //= 2 \n        cnt += 1\n    return B_Number  ",
        "is_deleted": 1,
        "code_str_deleted": "def decimal_To_Binary(N):\n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        #begin to write code\n",
        "code_str_generate": "def decimal_To_Binary(N):\n\n    '''\n    progame language:python\n    description:Write a python function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    B_Number = 0\n    cnt = 0\n    while (N != 0): \n        rem = N % 2\n        #begin to write code\n"
    },
    {
        "task_id": 34,
        "python_prompt": "Write a python function to find the missing number in a sorted array.",
        "test": "\nassert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4\n\n",
        "code_str": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_missing(ar,N):\n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n        #begin to write code\n",
        "code_str_generate": "def find_missing(ar,N):\n\n    '''\n    progame language:python\n    description:Write a python function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n        #begin to write code\n"
    },
    {
        "task_id": 35,
        "python_prompt": "Write a function to find the n-th rectangular number.",
        "test": "\nassert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42\n\n",
        "code_str": "def find_rect_num(n):\n  return n*(n + 1) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_rect_num(n):\n    #begin to write code\n",
        "code_str_generate": "def find_rect_num(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the n-th rectangular number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 36,
        "python_prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "test": "\nassert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3\n\n",
        "code_str": "def find_Nth_Digit(p,q,N) :  \n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        res = p // q;  \n        p %= q;  \n    return res;  ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Nth_Digit(p,q,N) :\n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        #begin to write code\n",
        "code_str_generate": "def find_Nth_Digit(p,q,N) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the nth digit in the proper fraction of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while (N > 0) : \n        N -= 1;  \n        p *= 10;  \n        #begin to write code\n"
    },
    {
        "task_id": 37,
        "python_prompt": "Write a function to sort a given mixed list of integers and strings.",
        "test": "\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\n",
        "code_str": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part",
        "is_deleted": 1,
        "code_str_deleted": "def sort_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    #begin to write code\n",
        "code_str_generate": "def sort_mixed_list(mixed_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given mixed list of integers and strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    #begin to write code\n"
    },
    {
        "task_id": 38,
        "python_prompt": "Write a function to find the division of first even and odd number of a given list.",
        "test": "\nassert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10\n\n",
        "code_str": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)",
        "is_deleted": 1,
        "code_str_deleted": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    #begin to write code\n",
        "code_str_generate": "def div_even_odd(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    first_even = next((el for el in list1 if el%2==0),-1)\n    #begin to write code\n"
    },
    {
        "task_id": 39,
        "python_prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "test": "\nassert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')\n\n",
        "code_str": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    while len(heap) >= 2:\n        nct1, char1 = heapq.heappop(heap)\n        nct2, char2 = heapq.heappop(heap)\n        ans.extend([char1, char2])\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
        "is_deleted": 1,
        "code_str_deleted": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    #begin to write code\n",
        "code_str_generate": "import heapq\nfrom collections import Counter\ndef rearange_string(S):\n\n    '''\n    progame language:python\n    description:Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = Counter(S)\n    heap = [(-value, key) for key, value in ctr.items()]\n    heapq.heapify(heap)\n    if (-heap[0][0]) * 2 > len(S) + 1: \n        return \"\"\n    ans = []\n    #begin to write code\n"
    },
    {
        "task_id": 40,
        "python_prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "test": "\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})\n\n",
        "code_str": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n",
        "code_str_generate": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n\n  '''\n  progame language:python\n  description:Write a function to find frequency of the elements in a given list of lists using collections module.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n"
    },
    {
        "task_id": 41,
        "python_prompt": "Write a function to filter even numbers using lambda function.",
        "test": "\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]\n\n",
        "code_str": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums",
        "is_deleted": 1,
        "code_str_deleted": "def filter_evennumbers(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n #begin to write code\n",
        "code_str_generate": "def filter_evennumbers(nums):\n\n '''\n progame language:python\n description:Write a function to filter even numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n #begin to write code\n"
    },
    {
        "task_id": 42,
        "python_prompt": "Write a python function to find the sum of repeated elements in a given array.",
        "test": "\nassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2\n\nassert find_Sum([1,1,2,3,4,5,6,3,5],9) == 18\n",
        "code_str": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])",
        "is_deleted": 1,
        "code_str_deleted": "def find_Sum(arr,n):\n    #begin to write code\n",
        "code_str_generate": "def find_Sum(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 43,
        "python_prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "test": "\nassert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'\n\nassert text_match(\"aab-cbbbc\") == 'Not matched!'\n",
        "code_str": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n    return ('Found a match!')\n  else:\n    return ('Not matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match(text):\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n  #begin to write code\n",
        "code_str_generate": "import re\ndef text_match(text):\n\n  '''\n  progame language:python\n  description:Write a function to find sequences of lowercase letters joined with an underscore using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  patterns = '^[a-z]+_[a-z]+$'\n  if re.search(patterns,  text):\n  #begin to write code\n"
    },
    {
        "task_id": 44,
        "python_prompt": "Write a function that matches a word at the beginning of a string.",
        "test": "\nassert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')\n\nassert text_match_string(\"foo\")==('Found a match!')\n",
        "code_str": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match_string(text):\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_match_string(text):\n\n        '''\n        progame language:python\n        description:Write a function that matches a word at the beginning of a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = '^\\w+'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 45,
        "python_prompt": "Write a function to find the gcd of the given array elements.",
        "test": "\nassert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 \n\n",
        "code_str": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd",
        "is_deleted": 1,
        "code_str_deleted": "def find_gcd(x, y):\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n",
        "code_str_generate": "def find_gcd(x, y):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the gcd of the given array elements.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n"
    },
    {
        "task_id": 46,
        "python_prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
        "test": "\nassert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True\n\n",
        "code_str": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;",
        "is_deleted": 1,
        "code_str_deleted": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n    #begin to write code\n",
        "code_str_generate": "def test_distinct(data):\n\n  '''\n  progame language:python\n  description:Write a python function to determine whether all the numbers are different from each other are not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if len(data) == len(set(data)):\n    return True\n    #begin to write code\n"
    },
    {
        "task_id": 47,
        "python_prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "test": "\nassert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2\n\nassert compute_Last_Digit(3,7) == 0\nassert compute_Last_Digit(20,23) == 6\nassert compute_Last_Digit(1021,1024) == 4\n",
        "code_str": "def compute_Last_Digit(A,B): \n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n        return 0\n    else:   \n        for i in range(A + 1,B + 1): \n            variable = (variable * (i % 10)) % 10\n        return variable % 10",
        "is_deleted": 1,
        "code_str_deleted": "def compute_Last_Digit(A,B):\n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n    #begin to write code\n",
        "code_str_generate": "def compute_Last_Digit(A,B):\n\n    '''\n    progame language:python\n    description:Write a python function to find the last digit when factorial of a divides factorial of b.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    variable = 1\n    if (A == B): \n        return 1\n    elif ((B - A) >= 5):  \n    #begin to write code\n"
    },
    {
        "task_id": 48,
        "python_prompt": "Write a python function to set all odd bits of a given number.",
        "test": "\nassert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31\n\n",
        "code_str": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)",
        "is_deleted": 1,
        "code_str_deleted": "def odd_bit_set_number(n):\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n        #begin to write code\n",
        "code_str_generate": "def odd_bit_set_number(n):\n\n    '''\n    progame language:python\n    description:Write a python function to set all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0;res = 0;temp = n\n    while temp > 0:\n        if count % 2 == 0:\n        #begin to write code\n"
    },
    {
        "task_id": 49,
        "python_prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "test": "\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]\n\n",
        "code_str": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ",
        "is_deleted": 1,
        "code_str_deleted": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    #begin to write code\n",
        "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [i[N] for i in nums]\n    #begin to write code\n"
    },
    {
        "task_id": 50,
        "python_prompt": "Write a function to find the list with minimum length using lambda function.",
        "test": "\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])\n\n",
        "code_str": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    min_list = min(input_list, key = lambda i: len(i))\n    return(min_length, min_list)",
        "is_deleted": 1,
        "code_str_deleted": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list )  \n    #begin to write code\n",
        "code_str_generate": "def min_length_list(input_list):\n\n    '''\n    progame language:python\n    description:Write a function to find the list with minimum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_length = min(len(x) for x in input_list )  \n    #begin to write code\n"
    },
    {
        "task_id": 51,
        "python_prompt": "Write a function to print check if the triangle is equilateral or not.",
        "test": "\nassert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True\n\n",
        "code_str": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n\t   #begin to write code\n",
        "code_str_generate": "def check_equilateral(x,y,z):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is equilateral or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if x == y == z:\n\t   return True\n\t   #begin to write code\n"
    },
    {
        "task_id": 52,
        "python_prompt": "Write a function to caluclate area of a parallelogram.",
        "test": "\nassert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72\n\n",
        "code_str": "def parallelogram_area(b,h):\n  area=b*h\n  return area",
        "is_deleted": 1,
        "code_str_deleted": "def parallelogram_area(b,h):\n  area=b*h\n  #begin to write code\n",
        "code_str_generate": "def parallelogram_area(b,h):\n\n  '''\n  progame language:python\n  description:Write a function to caluclate area of a parallelogram.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=b*h\n  #begin to write code\n"
    },
    {
        "task_id": 53,
        "python_prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "test": "\nassert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"\n\n",
        "code_str": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n",
        "code_str_generate": "def check_Equality(str):\n\n  '''\n  progame language:python\n  description:Write a python function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n"
    },
    {
        "task_id": 54,
        "python_prompt": "Write a function to sort the given array by using counting sort.",
        "test": "\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n\n",
        "code_str": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n        buckets[i] += 1\n    i = 0\n    for j in range(max_value + 1):\n         for a in range(buckets[j]):\n             my_list[i] = j\n             i += 1\n    return my_list",
        "is_deleted": 1,
        "code_str_deleted": "def counting_sort(my_list):\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n    #begin to write code\n",
        "code_str_generate": "def counting_sort(my_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_value = 0\n    for i in range(len(my_list)):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n    buckets = [0] * (max_value + 1)\n    for i in my_list:\n    #begin to write code\n"
    },
    {
        "task_id": 55,
        "python_prompt": "Write a function to find t-nth term of geometric series.",
        "test": "\nassert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486\n\n",
        "code_str": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  #begin to write code\n",
        "code_str_generate": "import math\ndef tn_gp(a,n,r):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of geometric series.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  tn = a * (math.pow(r, n - 1))\n  #begin to write code\n"
    },
    {
        "task_id": 56,
        "python_prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "test": "\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n\n",
        "code_str": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ",
        "is_deleted": 1,
        "code_str_deleted": "def rev(num):\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        #begin to write code\n",
        "code_str_generate": "def rev(num):\n\n    '''\n    progame language:python\n    description:Write a python function to check if a given number is one less than twice its reverse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        #begin to write code\n"
    },
    {
        "task_id": 57,
        "python_prompt": "Write a python function to find the largest number that can be formed with the given digits.",
        "test": "\nassert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321\n\n",
        "code_str": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n        num = num * 10 + arr[i] \n    return num ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Max_Num(arr,n) :\n    arr.sort(reverse = True) \n    num = arr[0] \n    #begin to write code\n",
        "code_str_generate": "def find_Max_Num(arr,n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest number that can be formed with the given digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr.sort(reverse = True) \n    num = arr[0] \n    #begin to write code\n"
    },
    {
        "task_id": 58,
        "python_prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "test": "\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\n\n",
        "code_str": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ",
        "is_deleted": 1,
        "code_str_deleted": "def opposite_Signs(x,y):\n    #begin to write code\n",
        "code_str_generate": "def opposite_Signs(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 59,
        "python_prompt": "Write a function to find the nth octagonal number.",
        "test": "\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n\n",
        "code_str": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n ",
        "is_deleted": 1,
        "code_str_deleted": "def is_octagonal(n):\n    #begin to write code\n",
        "code_str_generate": "def is_octagonal(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth octagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 60,
        "python_prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "test": "\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1\n\n",
        "code_str": "def max_len_sub( arr, n): \n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \n\t\t\t\tmls[i] = mls[j] + 1\n\tfor i in range(n): \n\t\tif (max < mls[i]): \n\t\t\tmax = mls[i] \n\treturn max",
        "is_deleted": 1,
        "code_str_deleted": "def max_len_sub( arr, n):\n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t#begin to write code\n",
        "code_str_generate": "def max_len_sub( arr, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tmls=[] \n\tmax = 0\n\tfor i in range(n): \n\t\tmls.append(1) \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t#begin to write code\n"
    },
    {
        "task_id": 61,
        "python_prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "test": "\nassert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12\n\n",
        "code_str": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - (i + 1)]\n        mp[sum - (i + 1)] += 1\n    return count",
        "is_deleted": 1,
        "code_str_deleted": "from collections import defaultdict\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n    #begin to write code\n",
        "code_str_generate": "from collections import defaultdict\n\n    '''\n    progame language:python\n    description:Write a python function to count number of substrings with the sum of digits equal to their length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef count_Substrings(s,n):\n    count,sum = 0,0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n    #begin to write code\n"
    },
    {
        "task_id": 62,
        "python_prompt": "Write a python function to find smallest number in a list.",
        "test": "\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n\n",
        "code_str": "def smallest_num(xs):\n  return min(xs)\n",
        "is_deleted": 1,
        "code_str_deleted": "def smallest_num(xs):\n    #begin to write code\n",
        "code_str_generate": "def smallest_num(xs):\n\n    '''\n    progame language:python\n    description:Write a python function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 63,
        "python_prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "test": "\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n\n",
        "code_str": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  #begin to write code\n",
        "code_str_generate": "def max_difference(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  temp = [abs(b - a) for a, b in test_list]\n  #begin to write code\n"
    },
    {
        "task_id": 64,
        "python_prompt": "Write a function to sort a list of tuples using lambda.",
        "test": "\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n\n",
        "code_str": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks",
        "is_deleted": 1,
        "code_str_deleted": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n",
        "code_str_generate": "def subject_marks(subjectmarks):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n"
    },
    {
        "task_id": 65,
        "python_prompt": "Write a function of recursion list sum.",
        "test": "\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n\n",
        "code_str": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total",
        "is_deleted": 1,
        "code_str_deleted": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t#begin to write code\n",
        "code_str_generate": "def recursive_list_sum(data_list):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function of recursion list sum.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t#begin to write code\n"
    },
    {
        "task_id": 66,
        "python_prompt": "Write a python function to count positive numbers in a list.",
        "test": "\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n\n",
        "code_str": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n    if num >= 0: \n      pos_count += 1\n  return pos_count ",
        "is_deleted": 1,
        "code_str_deleted": "def pos_count(list):\n  pos_count= 0\n  for num in list: \n  #begin to write code\n",
        "code_str_generate": "def pos_count(list):\n\n  '''\n  progame language:python\n  description:Write a python function to count positive numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  pos_count= 0\n  for num in list: \n  #begin to write code\n"
    },
    {
        "task_id": 67,
        "python_prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "test": "\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n\n",
        "code_str": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] ",
        "is_deleted": 1,
        "code_str_deleted": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n",
        "code_str_generate": "def bell_number(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the number of ways to partition a set of bell numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n"
    },
    {
        "task_id": 68,
        "python_prompt": "Write a python function to check whether the given array is monotonic or not.",
        "test": "\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n\n",
        "code_str": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
        "is_deleted": 1,
        "code_str_deleted": "def is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n",
        "code_str_generate": "def is_Monotonic(A):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n"
    },
    {
        "task_id": 69,
        "python_prompt": "Write a function to check whether a list contains the given sublist or not.",
        "test": "\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n\n",
        "code_str": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set",
        "is_deleted": 1,
        "code_str_deleted": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t#begin to write code\n",
        "code_str_generate": "def is_sublist(l, s):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check whether a list contains the given sublist or not.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t#begin to write code\n"
    },
    {
        "task_id": 70,
        "python_prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "test": "\nassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n\n",
        "code_str": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n  return flag\ndef get_equal(Input, k):\n  if find_equal_tuple(Input, k) == 1:\n    return (\"All tuples have same length\")\n  else:\n    return (\"All tuples do not have same length\")",
        "is_deleted": 1,
        "code_str_deleted": "def find_equal_tuple(Input, k):\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n      #begin to write code\n",
        "code_str_generate": "def find_equal_tuple(Input, k):\n\n  '''\n  progame language:python\n  description:Write a function to find whether all the given tuples have equal length or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  flag = 1\n  for tuple in Input:\n    if len(tuple) != k:\n      flag = 0\n      break\n      #begin to write code\n"
    },
    {
        "task_id": 71,
        "python_prompt": "Write a function to sort a list of elements using comb sort.",
        "test": "\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n\n",
        "code_str": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        i = 0\n        while gaps + i < len(nums):\n            if nums[i] > nums[i+gaps]:\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\n                swapped = True\n            i += 1\n    return nums",
        "is_deleted": 1,
        "code_str_deleted": "def comb_sort(nums):\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        #begin to write code\n",
        "code_str_generate": "def comb_sort(nums):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    shrink_fact = 1.3\n    gaps = len(nums)\n    swapped = True\n    i = 0\n    while gaps > 1 or swapped:\n        gaps = int(float(gaps) / shrink_fact)\n        swapped = False\n        #begin to write code\n"
    },
    {
        "task_id": 72,
        "python_prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "test": "\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n\n",
        "code_str": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def dif_Square(n):\n    if (n % 4 != 2): \n    #begin to write code\n",
        "code_str_generate": "def dif_Square(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 4 != 2): \n    #begin to write code\n"
    },
    {
        "task_id": 73,
        "python_prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "test": "\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n\n",
        "code_str": "import re\ndef multiple_split(text):\n  return (re.split('; |, |\\*|\\n',text))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef multiple_split(text):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef multiple_split(text):\n\n    '''\n    progame language:python\n    description:Write a function to split the given string with multiple delimiters by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 74,
        "python_prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "test": "\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False \n\n",
        "code_str": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n\n        keys = sdict[patterns[i]]\n        keys.append(colors[i])\n        sdict[patterns[i]] = keys\n\n    if len(pset) != len(sset):\n        return False   \n\n    for values in sdict.values():\n\n        for i in range(len(values) - 1):\n            if values[i] != values[i+1]:\n                return False\n\n    return True",
        "is_deleted": 1,
        "code_str_deleted": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n            #begin to write code\n",
        "code_str_generate": "def is_samepatterns(colors, patterns):\n\n    '''\n    progame language:python\n    description:Write a function to check whether it follows the sequence given in the patterns array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(colors) != len(patterns):\n        return False    \n    sdict = {}\n    pset = set()\n    sset = set()    \n    for i in range(len(patterns)):\n        pset.add(patterns[i])\n        sset.add(colors[i])\n        if patterns[i] not in sdict.keys():\n            sdict[patterns[i]] = []\n            #begin to write code\n"
    },
    {
        "task_id": 75,
        "python_prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "test": "\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'\n\n",
        "code_str": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  #begin to write code\n",
        "code_str_generate": "def find_tuples(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  #begin to write code\n"
    },
    {
        "task_id": 76,
        "python_prompt": "Write a python function to count the number of squares in a rectangle.",
        "test": "\nassert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1\n\n",
        "code_str": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        m = n\n        n = temp\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
        "is_deleted": 1,
        "code_str_deleted": "def count_Squares(m,n):\n    if(n < m):\n        temp = m\n        #begin to write code\n",
        "code_str_generate": "def count_Squares(m,n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if(n < m):\n        temp = m\n        #begin to write code\n"
    },
    {
        "task_id": 77,
        "python_prompt": "Write a python function to find the difference between sum of even and odd digits.",
        "test": "\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n\n",
        "code_str": "def is_Diff(n): \n    return (n % 11 == 0) ",
        "is_deleted": 1,
        "code_str_deleted": "def is_Diff(n):\n    #begin to write code\n",
        "code_str_generate": "def is_Diff(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the difference between sum of even and odd digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 78,
        "python_prompt": "Write a python function to find number of integers with odd number of set bits.",
        "test": "\nassert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8\n\n",
        "code_str": "def count_With_Odd_SetBits(n): \n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    ans = n / 2\n    if (count % 2 != 0): \n        ans += 1\n    return ans ",
        "is_deleted": 1,
        "code_str_deleted": "def count_With_Odd_SetBits(n):\n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    #begin to write code\n",
        "code_str_generate": "def count_With_Odd_SetBits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find number of integers with odd number of set bits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 2 != 0): \n        return (n + 1) / 2\n    count = bin(n).count('1') \n    #begin to write code\n"
    },
    {
        "task_id": 79,
        "python_prompt": "Write a python function to check whether the length of the word is odd or not.",
        "test": "\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n\n",
        "code_str": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False",
        "is_deleted": 1,
        "code_str_deleted": "def word_len(s):\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n",
        "code_str_generate": "def word_len(s):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n"
    },
    {
        "task_id": 80,
        "python_prompt": "Write a function to find the nth tetrahedral number.",
        "test": "\nassert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0\n\n",
        "code_str": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6",
        "is_deleted": 1,
        "code_str_deleted": "def tetrahedral_number(n):\n    #begin to write code\n",
        "code_str_generate": "def tetrahedral_number(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth tetrahedral number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 81,
        "python_prompt": "Write a function to zip the two given tuples.",
        "test": "\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n\n",
        "code_str": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n    res.append((j, test_tup2[i % len(test_tup2)])) \n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def zip_tuples(test_tup1, test_tup2):\n  res = []\n  for i, j in enumerate(test_tup1):\n  #begin to write code\n",
        "code_str_generate": "def zip_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to zip the two given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  for i, j in enumerate(test_tup1):\n  #begin to write code\n"
    },
    {
        "task_id": 82,
        "python_prompt": "Write a function to find the volume of a sphere.",
        "test": "\nassert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113\n\n",
        "code_str": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  return volume",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef volume_sphere(r):\n  volume=(4/3)*math.pi*r*r*r\n  #begin to write code\n",
        "code_str_generate": "import math\ndef volume_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=(4/3)*math.pi*r*r*r\n  #begin to write code\n"
    },
    {
        "task_id": 83,
        "python_prompt": "Write a python function to find the character made by adding all the characters of the given string.",
        "test": "\nassert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"\n\n",
        "code_str": "def get_Char(strr):  \n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n        return ord('z') \n    else: \n        summ = summ % 26\n        return chr(ord('a') + summ - 1)",
        "is_deleted": 1,
        "code_str_deleted": "def get_Char(strr):\n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n    #begin to write code\n",
        "code_str_generate": "def get_Char(strr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the character made by adding all the characters of the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    summ = 0\n    for i in range(len(strr)): \n        summ += (ord(strr[i]) - ord('a') + 1)  \n    if (summ % 26 == 0): \n    #begin to write code\n"
    },
    {
        "task_id": 84,
        "python_prompt": "Write a function to find the n-th number in newman conway sequence.",
        "test": "\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n\n",
        "code_str": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\telse: \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
        "is_deleted": 1,
        "code_str_deleted": "def sequence(n):\n\tif n == 1 or n == 2: \n\t\treturn 1\n\t\t#begin to write code\n",
        "code_str_generate": "def sequence(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the n-th number in newman conway sequence.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif n == 1 or n == 2: \n\t\treturn 1\n\t\t#begin to write code\n"
    },
    {
        "task_id": 85,
        "python_prompt": "Write a function to find the surface area of a sphere.",
        "test": "\nassert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669\n\n",
        "code_str": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  #begin to write code\n",
        "code_str_generate": "import math\ndef surfacearea_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  surfacearea=4*math.pi*r*r\n  #begin to write code\n"
    },
    {
        "task_id": 86,
        "python_prompt": "Write a function to find nth centered hexagonal number.",
        "test": "\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n\n",
        "code_str": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1",
        "is_deleted": 1,
        "code_str_deleted": "def centered_hexagonal_number(n):\n    #begin to write code\n",
        "code_str_generate": "def centered_hexagonal_number(n):\n\n    '''\n    progame language:python\n    description:Write a function to find nth centered hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 87,
        "python_prompt": "Write a function to merge three dictionaries into a single expression.",
        "test": "\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n\n",
        "code_str": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict",
        "is_deleted": 1,
        "code_str_deleted": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    #begin to write code\n",
        "code_str_generate": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n    '''\n    progame language:python\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    #begin to write code\n"
    },
    {
        "task_id": 88,
        "python_prompt": "Write a function to get the frequency of the elements in a list.",
        "test": "\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) \n\n",
        "code_str": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count",
        "is_deleted": 1,
        "code_str_deleted": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  #begin to write code\n",
        "code_str_generate": "import collections\ndef freq_count(list1):\n\n  '''\n  progame language:python\n  description:Write a function to get the frequency of the elements in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  freq_count= collections.Counter(list1)\n  #begin to write code\n"
    },
    {
        "task_id": 89,
        "python_prompt": "Write a function to find the closest smaller number than n.",
        "test": "\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n\n",
        "code_str": "def closest_num(N):\n  return (N - 1)",
        "is_deleted": 1,
        "code_str_deleted": "def closest_num(N):\n    #begin to write code\n",
        "code_str_generate": "def closest_num(N):\n\n    '''\n    progame language:python\n    description:Write a function to find the closest smaller number than n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 90,
        "python_prompt": "Write a python function to find the length of the longest word.",
        "test": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n\n",
        "code_str": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max",
        "is_deleted": 1,
        "code_str_deleted": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n    #begin to write code\n",
        "code_str_generate": "def len_log(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max=len(list1[0])\n    for i in list1:\n    #begin to write code\n"
    },
    {
        "task_id": 91,
        "python_prompt": "Write a function to check if a substring is present in a given list of string values.",
        "test": "\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n\n",
        "code_str": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False",
        "is_deleted": 1,
        "code_str_deleted": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n   #begin to write code\n",
        "code_str_generate": "def find_substring(str1, sub_str):\n\n   '''\n   progame language:python\n   description:Write a function to check if a substring is present in a given list of string values.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   if any(sub_str in s for s in str1):\n   #begin to write code\n"
    },
    {
        "task_id": 92,
        "python_prompt": "Write a function to check whether the given number is undulating or not.",
        "test": "\nassert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True\n\n",
        "code_str": "def is_undulating(n): \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True",
        "is_deleted": 1,
        "code_str_deleted": "def is_undulating(n):\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t#begin to write code\n",
        "code_str_generate": "def is_undulating(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check whether the given number is undulating or not.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t#begin to write code\n"
    },
    {
        "task_id": 93,
        "python_prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "test": "\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n\n",
        "code_str": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)",
        "is_deleted": 1,
        "code_str_deleted": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\t\t#begin to write code\n",
        "code_str_generate": "def power(a,b):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the value of 'a' to the power 'b'.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\t\t#begin to write code\n"
    },
    {
        "task_id": 94,
        "python_prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "test": "\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\n",
        "code_str": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n",
        "code_str_generate": "from operator import itemgetter \ndef index_minimum(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n"
    },
    {
        "task_id": 95,
        "python_prompt": "Write a python function to find the minimum length of sublist.",
        "test": "\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n\n",
        "code_str": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ",
        "is_deleted": 1,
        "code_str_deleted": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n",
        "code_str_generate": "def Find_Min_Length(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n"
    },
    {
        "task_id": 96,
        "python_prompt": "Write a python function to find the number of divisors of a given integer.",
        "test": "\nassert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3\n\n",
        "code_str": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x",
        "is_deleted": 1,
        "code_str_deleted": "def divisor(n):\n  for i in range(n):\n  #begin to write code\n",
        "code_str_generate": "def divisor(n):\n\n  '''\n  progame language:python\n  description:Write a python function to find the number of divisors of a given integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n  #begin to write code\n"
    },
    {
        "task_id": 97,
        "python_prompt": "Write a function to find frequency count of list of lists.",
        "test": "\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n\n",
        "code_str": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n",
        "is_deleted": 1,
        "code_str_deleted": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n",
        "code_str_generate": "def frequency_lists(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n"
    },
    {
        "task_id": 98,
        "python_prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "test": "\nassert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0\n\n",
        "code_str": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ",
        "is_deleted": 1,
        "code_str_deleted": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n    #begin to write code\n",
        "code_str_generate": "def multiply_num(numbers):\n\n    '''\n    progame language:python\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    total = 1\n    for x in numbers:\n    #begin to write code\n"
    },
    {
        "task_id": 99,
        "python_prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "test": "\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' \n\n",
        "code_str": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ",
        "is_deleted": 1,
        "code_str_deleted": "def decimal_to_binary(n):\n    #begin to write code\n",
        "code_str_generate": "def decimal_to_binary(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 100,
        "python_prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "test": "\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n\n",
        "code_str": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i",
        "is_deleted": 1,
        "code_str_deleted": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n    #begin to write code\n",
        "code_str_generate": "import sys\ndef next_smallest_palindrome(num):\n\n    '''\n    progame language:python\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n    #begin to write code\n"
    },
    {
        "task_id": 101,
        "python_prompt": "Write a function to find the kth element in the given array.",
        "test": "\nassert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36\n\n",
        "code_str": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] == arr[j+1], arr[j]\n  return arr[k-1]",
        "is_deleted": 1,
        "code_str_deleted": "def kth_element(arr, n, k):\n  for i in range(n):\n    for j in range(0, n-i-1):\n    #begin to write code\n",
        "code_str_generate": "def kth_element(arr, n, k):\n\n  '''\n  progame language:python\n  description:Write a function to find the kth element in the given array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n    for j in range(0, n-i-1):\n    #begin to write code\n"
    },
    {
        "task_id": 102,
        "python_prompt": "Write a function to convert snake case string to camel case string.",
        "test": "\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n\n",
        "code_str": "def snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "is_deleted": 1,
        "code_str_deleted": "def snake_to_camel(word):\n        import re\n        #begin to write code\n",
        "code_str_generate": "def snake_to_camel(word):\n\n        '''\n        progame language:python\n        description:Write a function to convert snake case string to camel case string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        import re\n        #begin to write code\n"
    },
    {
        "task_id": 103,
        "python_prompt": "Write a function to find eulerian number a(n, m).",
        "test": "\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n\n",
        "code_str": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
        "is_deleted": 1,
        "code_str_deleted": "def eulerian_num(n, m):\n\tif (m >= n or n == 0): \n\t\treturn 0 \n\t\t#begin to write code\n",
        "code_str_generate": "def eulerian_num(n, m):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find eulerian number a(n, m).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (m >= n or n == 0): \n\t\treturn 0 \n\t\t#begin to write code\n"
    },
    {
        "task_id": 104,
        "python_prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "test": "\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n\n",
        "code_str": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n",
        "is_deleted": 1,
        "code_str_deleted": "def sort_sublists(input_list):\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    #begin to write code\n",
        "code_str_generate": "def sort_sublists(input_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    #begin to write code\n"
    },
    {
        "task_id": 105,
        "python_prompt": "Write a python function to count true booleans in the given list.",
        "test": "\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n\n",
        "code_str": "def count(lst):   \n    return sum(lst) ",
        "is_deleted": 1,
        "code_str_deleted": "def count(lst):\n    #begin to write code\n",
        "code_str_generate": "def count(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 106,
        "python_prompt": "Write a function to add the given list to the given tuples.",
        "test": "\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\n",
        "code_str": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n",
        "code_str_generate": "def add_lists(test_list, test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to add the given list to the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n"
    },
    {
        "task_id": 107,
        "python_prompt": "Write a python function to count hexadecimal numbers for a given range.",
        "test": "\nassert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1\n\n",
        "code_str": "def count_Hexadecimal(L,R) :  \n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n            k = i;  \n            while (k != 0) :  \n                if (k % 16 >= 10) : \n                    count += 1;  \n                k = k // 16;  \n    return count;  ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Hexadecimal(L,R) :\n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n        #begin to write code\n",
        "code_str_generate": "def count_Hexadecimal(L,R) :\n\n    '''\n    progame language:python\n    description:Write a python function to count hexadecimal numbers for a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0;  \n    for i in range(L,R + 1) : \n        if (i >= 10 and i <= 15) : \n            count += 1;  \n        elif (i > 15) : \n        #begin to write code\n"
    },
    {
        "task_id": 108,
        "python_prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "test": "\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\n",
        "code_str": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)",
        "is_deleted": 1,
        "code_str_deleted": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  #begin to write code\n",
        "code_str_generate": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n\n  '''\n  progame language:python\n  description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num1=sorted(num1)\n  num2=sorted(num2)\n  #begin to write code\n"
    },
    {
        "task_id": 109,
        "python_prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
        "test": "\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n\n",
        "code_str": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count ",
        "is_deleted": 1,
        "code_str_deleted": "def odd_Equivalent(s,n):\n    count=0\n    for i in range(0,n): \n    #begin to write code\n",
        "code_str_generate": "def odd_Equivalent(s,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the count of rotations of a binary string with odd value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count=0\n    for i in range(0,n): \n    #begin to write code\n"
    },
    {
        "task_id": 110,
        "python_prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "test": "\nassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n\n",
        "code_str": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      strt_val = sub[1]\n    if strt_val < stop_val:\n      res.append((strt_val, stop_val))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def extract_missing(test_list, strt_val, stop_val):\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      #begin to write code\n",
        "code_str_generate": "def extract_missing(test_list, strt_val, stop_val):\n\n  '''\n  progame language:python\n  description:Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  for sub in test_list:\n    if sub[0] > strt_val:\n      res.append((strt_val, sub[0]))\n      #begin to write code\n"
    },
    {
        "task_id": 111,
        "python_prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "test": "\nassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]\n\n",
        "code_str": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    #begin to write code\n",
        "code_str_generate": "def common_in_nested_lists(nestedlist):\n\n    '''\n    progame language:python\n    description:Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = list(set.intersection(*map(set, nestedlist)))\n    #begin to write code\n"
    },
    {
        "task_id": 112,
        "python_prompt": "Write a python function to find the perimeter of a cylinder.",
        "test": "\nassert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8\n\n",
        "code_str": "def perimeter(diameter,height) : \n    return 2*(diameter+height)  ",
        "is_deleted": 1,
        "code_str_deleted": "def perimeter(diameter,height) :\n    #begin to write code\n",
        "code_str_generate": "def perimeter(diameter,height) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 113,
        "python_prompt": "Write a function to check if a string represents an integer or not.",
        "test": "\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n\n",
        "code_str": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n     #begin to write code\n",
        "code_str_generate": "def check_integer(text):\n\n '''\n progame language:python\n description:Write a function to check if a string represents an integer or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n     #begin to write code\n"
    },
    {
        "task_id": 114,
        "python_prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "test": "\nassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n\n",
        "code_str": "from collections import Counter \ndef assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter \ndef assign_freq(test_list):\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  #begin to write code\n",
        "code_str_generate": "from collections import Counter \ndef assign_freq(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to assign frequency to each tuple in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [(*key, val) for key, val in Counter(test_list).items()]\n  #begin to write code\n"
    },
    {
        "task_id": 115,
        "python_prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "test": "\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True\n\n",
        "code_str": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit",
        "is_deleted": 1,
        "code_str_deleted": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n #begin to write code\n",
        "code_str_generate": "def empty_dit(list1):\n\n '''\n progame language:python\n description:Write a function to check whether all dictionaries in a list are empty or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n empty_dit=all(not d for d in list1)\n #begin to write code\n"
    },
    {
        "task_id": 116,
        "python_prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "test": "\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n\n",
        "code_str": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def tuple_to_int(nums):\n    result = int(''.join(map(str,nums)))\n    #begin to write code\n",
        "code_str_generate": "def tuple_to_int(nums):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = int(''.join(map(str,nums)))\n    #begin to write code\n"
    },
    {
        "task_id": 117,
        "python_prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "test": "\nassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n\n",
        "code_str": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n        temp.append(ele)\n      else:\n        temp.append(float(ele))\n    res.append((temp[0],temp[1])) \n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def list_to_float(test_list):\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n      #begin to write code\n",
        "code_str_generate": "def list_to_float(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to convert all possible convertible elements in the list to float.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  for tup in test_list:\n    temp = []\n    for ele in tup:\n      if ele.isalpha():\n      #begin to write code\n"
    },
    {
        "task_id": 118,
        "python_prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "test": "\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n\n",
        "code_str": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst",
        "is_deleted": 1,
        "code_str_deleted": "def string_to_list(string):\n    lst = list(string.split(\" \")) \n    #begin to write code\n",
        "code_str_generate": "def string_to_list(string):\n\n    '''\n    progame language:python\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    lst = list(string.split(\" \")) \n    #begin to write code\n"
    },
    {
        "task_id": 119,
        "python_prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "test": "\nassert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1\n\n",
        "code_str": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)",
        "is_deleted": 1,
        "code_str_deleted": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n",
        "code_str_generate": "def search(arr,n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n"
    },
    {
        "task_id": 120,
        "python_prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "test": "\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484\n\n",
        "code_str": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    return result_max",
        "is_deleted": 1,
        "code_str_deleted": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n",
        "code_str_generate": "def max_product_tuple(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n"
    },
    {
        "task_id": 121,
        "python_prompt": "Write a function to find the triplet with sum of the given array",
        "test": "\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True\n\n",
        "code_str": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)",
        "is_deleted": 1,
        "code_str_deleted": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n",
        "code_str_generate": "def check_triplet(A, n, sum, count):\n\n    '''\n    progame language:python\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n"
    },
    {
        "task_id": 122,
        "python_prompt": "Write a function to find n\u2019th smart number.",
        "test": "\nassert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664\n\n",
        "code_str": "MAX = 3000 \ndef smartNumber(n): \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\twhile (j < MAX): \n\t\t\t\tprimes[j] -= 1 \n\t\t\t\tif ( (primes[j] + 3) == 0): \n\t\t\t\t\tresult.append(j) \n\t\t\t\tj = j + i \n\tresult.sort() \n\treturn result[n - 1] ",
        "is_deleted": 1,
        "code_str_deleted": "def smartNumber(n):\nMAX = 3000 \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\t#begin to write code\n",
        "code_str_generate": "def smartNumber(n):\n\n    '''\n    progame language:python\n    description:Write a function to find n\u2019th smart number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nMAX = 3000 \n\tprimes = [0] * MAX \n\tresult = [] \n\tfor i in range(2, MAX): \n\t\tif (primes[i] == 0): \n\t\t\tprimes[i] = 1 \n\t\t\tj = i * 2 \n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 123,
        "python_prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "test": "\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n\n",
        "code_str": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n            continue\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)",
        "is_deleted": 1,
        "code_str_deleted": "def amicable_numbers_sum(limit):\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n        #begin to write code\n",
        "code_str_generate": "def amicable_numbers_sum(limit):\n\n    '''\n    progame language:python\n    description:Write a function to sum all amicable numbers from 1 to a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if not isinstance(limit, int):\n        return \"Input is not an integer!\"\n    if limit < 1:\n        return \"Input must be bigger than 0!\"\n    amicables = set()\n    for num in range(2, limit+1):\n        if num in amicables:\n        #begin to write code\n"
    },
    {
        "task_id": 124,
        "python_prompt": "Write a function to get the angle of a complex number.",
        "test": "\nassert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966\n\n",
        "code_str": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  angle=cmath.phase(a+b)\n  return angle",
        "is_deleted": 1,
        "code_str_deleted": "import cmath\ndef angle_complex(a,b):\n  cn=complex(a,b)\n  #begin to write code\n",
        "code_str_generate": "import cmath\ndef angle_complex(a,b):\n\n  '''\n  progame language:python\n  description:Write a function to get the angle of a complex number.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  cn=complex(a,b)\n  #begin to write code\n"
    },
    {
        "task_id": 125,
        "python_prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "test": "\nassert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 \n\n",
        "code_str": "def find_length(string, n): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum if max_sum else 0",
        "is_deleted": 1,
        "code_str_deleted": "def find_length(string, n):\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\t#begin to write code\n",
        "code_str_generate": "def find_length(string, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor i in range(n): \n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \n\t\t#begin to write code\n"
    },
    {
        "task_id": 126,
        "python_prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "test": "\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n\n",
        "code_str": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "def sum(a,b):\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n",
        "code_str_generate": "def sum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n"
    },
    {
        "task_id": 127,
        "python_prompt": "Write a function to multiply two integers without using the * operator in python.",
        "test": "\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n\n",
        "code_str": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)",
        "is_deleted": 1,
        "code_str_deleted": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n        #begin to write code\n",
        "code_str_generate": "def multiply_int(x, y):\n\n    '''\n    progame language:python\n    description:Write a function to multiply two integers without using the * operator in python.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n        #begin to write code\n"
    },
    {
        "task_id": 128,
        "python_prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "test": "\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n\n",
        "code_str": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t",
        "is_deleted": 1,
        "code_str_deleted": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n",
        "code_str_generate": "def long_words(n, str):\n\n    '''\n    progame language:python\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n"
    },
    {
        "task_id": 129,
        "python_prompt": "Write a function to calculate magic square.",
        "test": "\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\n",
        "code_str": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n    sum_list.append(result1)      \n    result2 = 0\n    for i in range(iSize-1,-1,-1):\n        result2 +=my_matrix[i][i]\n    sum_list.append(result2)\n    if len(set(sum_list))>1:\n        return False\n    return True",
        "is_deleted": 1,
        "code_str_deleted": "def magic_square_test(my_matrix):\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n        #begin to write code\n",
        "code_str_generate": "def magic_square_test(my_matrix):\n\n    '''\n    progame language:python\n    description:Write a function to calculate magic square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    iSize = len(my_matrix[0])\n    sum_list = []\n    sum_list.extend([sum (lines) for lines in my_matrix])   \n    for col in range(iSize):\n        sum_list.append(sum(row[col] for row in my_matrix))\n    result1 = 0\n    for i in range(0,iSize):\n        result1 +=my_matrix[i][i]\n        #begin to write code\n"
    },
    {
        "task_id": 130,
        "python_prompt": "Write a function to find the item with maximum frequency in a given list.",
        "test": "\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)\n\n",
        "code_str": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1]) \n    return result",
        "is_deleted": 1,
        "code_str_deleted": "from collections import defaultdict\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n    #begin to write code\n",
        "code_str_generate": "from collections import defaultdict\n\n    '''\n    progame language:python\n    description:Write a function to find the item with maximum frequency in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n    #begin to write code\n"
    },
    {
        "task_id": 131,
        "python_prompt": "Write a python function to reverse only the vowels of a given string.",
        "test": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n\n",
        "code_str": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tresult_string += vowels[-1]\n\t\t\tvowels = vowels[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string",
        "is_deleted": 1,
        "code_str_deleted": "def reverse_vowels(str1):\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t#begin to write code\n",
        "code_str_generate": "def reverse_vowels(str1):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a python function to reverse only the vowels of a given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tvowels = \"\"\n\tfor char in str1:\n\t\tif char in \"aeiouAEIOU\":\n\t\t\tvowels += char\n\tresult_string = \"\"\n\tfor char in str1:\n\t#begin to write code\n"
    },
    {
        "task_id": 132,
        "python_prompt": "Write a function to convert tuple to a string.",
        "test": "\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n\n",
        "code_str": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str",
        "is_deleted": 1,
        "code_str_deleted": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  #begin to write code\n",
        "code_str_generate": "def tup_string(tup1):\n\n  '''\n  progame language:python\n  description:Write a function to convert tuple to a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  str =  ''.join(tup1)\n  #begin to write code\n"
    },
    {
        "task_id": 133,
        "python_prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "test": "\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n\n",
        "code_str": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)",
        "is_deleted": 1,
        "code_str_deleted": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  #begin to write code\n",
        "code_str_generate": "def sum_negativenum(nums):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  #begin to write code\n"
    },
    {
        "task_id": 134,
        "python_prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "test": "\nassert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"\n\n",
        "code_str": "def check_last (arr,n,p): \n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n        if _sum % 2 == 0: \n            return \"ODD\"\n        else: \n            return \"EVEN\"\n    return \"EVEN\"\n      ",
        "is_deleted": 1,
        "code_str_deleted": "def check_last (arr,n,p):\n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n    #begin to write code\n",
        "code_str_generate": "def check_last (arr,n,p):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    _sum = 0\n    for i in range(n): \n        _sum = _sum + arr[i] \n    if p == 1: \n    #begin to write code\n"
    },
    {
        "task_id": 135,
        "python_prompt": "Write a function to find the nth hexagonal number.",
        "test": "\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n\n",
        "code_str": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ",
        "is_deleted": 1,
        "code_str_deleted": "def hexagonal_num(n):\n    #begin to write code\n",
        "code_str_generate": "def hexagonal_num(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 136,
        "python_prompt": "Write a function to calculate electricity bill.",
        "test": "\nassert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5\n\n",
        "code_str": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\n    surcharge = 45\n else:\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\n    surcharge = 75\n total = amount + surcharge\n return total",
        "is_deleted": 1,
        "code_str_deleted": "def cal_electbill(units):\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n #begin to write code\n",
        "code_str_generate": "def cal_electbill(units):\n\n '''\n progame language:python\n description:Write a function to calculate electricity bill.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if(units < 50):\n    amount = units * 2.60\n    surcharge = 25\n elif(units <= 100):\n    amount = 130 + ((units - 50) * 3.25)\n    surcharge = 35\n elif(units <= 200):\n #begin to write code\n"
    },
    {
        "task_id": 137,
        "python_prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "test": "\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00\n\n",
        "code_str": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "is_deleted": 1,
        "code_str_deleted": "from array import array\ndef zero_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n        #begin to write code\n",
        "code_str_generate": "from array import array\ndef zero_count(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the ration of zeroes in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x == 0:\n        #begin to write code\n"
    },
    {
        "task_id": 138,
        "python_prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "test": "\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n\n",
        "code_str": "def is_Sum_Of_Powers_Of_Two(n): \n    if (n % 2 == 1): \n        return False\n    else: \n        return True",
        "is_deleted": 1,
        "code_str_deleted": "def is_Sum_Of_Powers_Of_Two(n):\n    if (n % 2 == 1): \n        return False\n        #begin to write code\n",
        "code_str_generate": "def is_Sum_Of_Powers_Of_Two(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 2 == 1): \n        return False\n        #begin to write code\n"
    },
    {
        "task_id": 139,
        "python_prompt": "Write a function to find the circumference of a circle.",
        "test": "\nassert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132\n\n",
        "code_str": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter",
        "is_deleted": 1,
        "code_str_deleted": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  #begin to write code\n",
        "code_str_generate": "def circle_circumference(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the circumference of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=2*3.1415*r\n  #begin to write code\n"
    },
    {
        "task_id": 140,
        "python_prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "test": "\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n\n",
        "code_str": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n    #begin to write code\n",
        "code_str_generate": "def extract_singly(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract elements that occur singly in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n    #begin to write code\n"
    },
    {
        "task_id": 141,
        "python_prompt": "Write a function to sort a list of elements using pancake sort.",
        "test": "\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\n",
        "code_str": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums",
        "is_deleted": 1,
        "code_str_deleted": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        #begin to write code\n",
        "code_str_generate": "def pancake_sort(nums):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of elements using pancake sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        #begin to write code\n"
    },
    {
        "task_id": 142,
        "python_prompt": "Write a function to count the same pair in three given lists.",
        "test": "\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n\n",
        "code_str": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n",
        "code_str_generate": "def count_samepair(list1,list2,list3):\n\n    '''\n    progame language:python\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n"
    },
    {
        "task_id": 143,
        "python_prompt": "Write a function to find number of lists present in the given tuple.",
        "test": "\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n\n",
        "code_str": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_lists(Input):\n\tif isinstance(Input, list): \n\t\treturn 1\n\t\t#begin to write code\n",
        "code_str_generate": "def find_lists(Input):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find number of lists present in the given tuple.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif isinstance(Input, list): \n\t\treturn 1\n\t\t#begin to write code\n"
    },
    {
        "task_id": 144,
        "python_prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "test": "\nassert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188\n\n",
        "code_str": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "def sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n",
        "code_str_generate": "def sum_Pairs(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n"
    },
    {
        "task_id": 145,
        "python_prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "test": "\nassert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2\n\n",
        "code_str": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ",
        "is_deleted": 1,
        "code_str_deleted": "def max_Abs_Diff(arr,n):\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n",
        "code_str_generate": "def max_Abs_Diff(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n"
    },
    {
        "task_id": 146,
        "python_prompt": "Write a function to find the ascii value of total characters in a string.",
        "test": "\nassert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76\n\n",
        "code_str": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n   return ord(str1[i])",
        "is_deleted": 1,
        "code_str_deleted": "def ascii_value_string(str1):\n  for i in range(len(str1)):\n  #begin to write code\n",
        "code_str_generate": "def ascii_value_string(str1):\n\n  '''\n  progame language:python\n  description:Write a function to find the ascii value of total characters in a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(len(str1)):\n  #begin to write code\n"
    },
    {
        "task_id": 147,
        "python_prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "test": "\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\n\n",
        "code_str": "def max_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]",
        "is_deleted": 1,
        "code_str_deleted": "def max_path_sum(tri, m, n):\n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t#begin to write code\n",
        "code_str_generate": "def max_path_sum(tri, m, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum total path sum in the given triangle.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 148,
        "python_prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "test": "\nassert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19\n\n",
        "code_str": "def sum_digits_single(x) : \n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    ans = 0\n    while (ans * 10 + 9 <= x) : \n        ans = ans * 10 + 9  \n    return ans   \ndef sum_digits_twoparts(N) : \n    A = closest(N)  \n    return sum_digits_single(A) + sum_digits_single(N - A) ",
        "is_deleted": 1,
        "code_str_deleted": "def sum_digits_single(x) :\n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    #begin to write code\n",
        "code_str_generate": "def sum_digits_single(x) :\n\n    '''\n    progame language:python\n    description:Write a function to divide a number into two parts such that the sum of digits is maximum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ans = 0\n    while x : \n        ans += x % 10\n        x //= 10  \n    return ans \ndef closest(x) : \n    #begin to write code\n"
    },
    {
        "task_id": 149,
        "python_prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "test": "\nassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7\n\n",
        "code_str": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result",
        "is_deleted": 1,
        "code_str_deleted": "def longest_subseq_with_diff_one(arr, n):\n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\t\t\t\t#begin to write code\n",
        "code_str_generate": "def longest_subseq_with_diff_one(arr, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\t\t\t\t#begin to write code\n"
    },
    {
        "task_id": 150,
        "python_prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "test": "\nassert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False\n\n",
        "code_str": "def does_Contain_B(a,b,c): \n    if (a == b): \n        return True\n    if ((b - a) * c > 0 and (b - a) % c == 0): \n        return True\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def does_Contain_B(a,b,c):\n    if (a == b): \n        return True\n        #begin to write code\n",
        "code_str_generate": "def does_Contain_B(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to find whether the given number is present in the infinite sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (a == b): \n        return True\n        #begin to write code\n"
    },
    {
        "task_id": 151,
        "python_prompt": "Write a python function to check whether the given number is co-prime or not.",
        "test": "\nassert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False\n\n",
        "code_str": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1",
        "is_deleted": 1,
        "code_str_deleted": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n",
        "code_str_generate": "def gcd(p,q):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number is co-prime or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n"
    },
    {
        "task_id": 152,
        "python_prompt": "Write a function to sort the given array by using merge sort.",
        "test": "\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n\n",
        "code_str": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n",
        "is_deleted": 1,
        "code_str_deleted": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n",
        "code_str_generate": "def merge(a,b):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using merge sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n"
    },
    {
        "task_id": 153,
        "python_prompt": "Write a function to find the vertex of a parabola.",
        "test": "\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)\n\n",
        "code_str": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex",
        "is_deleted": 1,
        "code_str_deleted": "def parabola_vertex(a, b, c):\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n",
        "code_str_generate": "def parabola_vertex(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the vertex of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n"
    },
    {
        "task_id": 154,
        "python_prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "test": "\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]\n\n",
        "code_str": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    #begin to write code\n",
        "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [i[N] for i in nums]\n    #begin to write code\n"
    },
    {
        "task_id": 155,
        "python_prompt": "Write a python function to toggle all even bits of a given number.",
        "test": "\nassert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20\n\n",
        "code_str": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ",
        "is_deleted": 1,
        "code_str_deleted": "def even_bit_toggle_number(n) :\n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n        #begin to write code\n",
        "code_str_generate": "def even_bit_toggle_number(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to toggle all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; count = 0; temp = n \n    while (temp > 0) :     \n        if (count % 2 == 1) : \n        #begin to write code\n"
    },
    {
        "task_id": 156,
        "python_prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "test": "\nassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))\n\n",
        "code_str": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def tuple_int_str(tuple_str):\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    #begin to write code\n",
        "code_str_generate": "def tuple_int_str(tuple_str):\n\n    '''\n    progame language:python\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\n    #begin to write code\n"
    },
    {
        "task_id": 157,
        "python_prompt": "Write a function to reflect the run-length encoding from a list.",
        "test": "\nassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n\n",
        "code_str": "from itertools import groupby\ndef encode_list(list1):\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
        "is_deleted": 1,
        "code_str_deleted": "from itertools import groupby\ndef encode_list(list1):\n    #begin to write code\n",
        "code_str_generate": "from itertools import groupby\ndef encode_list(list1):\n\n    '''\n    progame language:python\n    description:Write a function to reflect the run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 158,
        "python_prompt": "Write a python function to find k number of operations required to make all elements equal.",
        "test": "\nassert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24\n\n",
        "code_str": "def min_Ops(arr,n,k): \n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n            return -1 \n        else: \n            res += (max1 - arr[i]) / k \n    return int(res) ",
        "is_deleted": 1,
        "code_str_deleted": "def min_Ops(arr,n,k):\n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n        #begin to write code\n",
        "code_str_generate": "def min_Ops(arr,n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max1 = max(arr) \n    res = 0\n    for i in range(0,n):  \n        if ((max1 - arr[i]) % k != 0): \n        #begin to write code\n"
    },
    {
        "task_id": 159,
        "python_prompt": "Write a function to print the season for the given month and day.",
        "test": "\nassert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')\n\n",
        "code_str": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season",
        "is_deleted": 1,
        "code_str_deleted": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n\t #begin to write code\n",
        "code_str_generate": "def month_season(month,days):\n\n '''\n progame language:python\n description:Write a function to print the season for the given month and day.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n\t #begin to write code\n"
    },
    {
        "task_id": 160,
        "python_prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "test": "\nassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n\n",
        "code_str": "def solution (a, b, n): \n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\tint((n - (i * a)) / b)) \n\t\t\treturn 0\n\t\ti = i + 1\n\treturn (\"No solution\") ",
        "is_deleted": 1,
        "code_str_deleted": "def solution (a, b, n):\n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\t#begin to write code\n",
        "code_str_generate": "def solution (a, b, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find x and y that satisfies ax + by = n.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ti = 0\n\twhile i * a <= n: \n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (\"x = \",i ,\", y = \", \n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 161,
        "python_prompt": "Write a function to remove all elements from a given list present in another list.",
        "test": "\nassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n\n",
        "code_str": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def remove_elements(list1, list2):\n    result = [x for x in list1 if x not in list2]\n    #begin to write code\n",
        "code_str_generate": "def remove_elements(list1, list2):\n\n    '''\n    progame language:python\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x for x in list1 if x not in list2]\n    #begin to write code\n"
    },
    {
        "task_id": 162,
        "python_prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "test": "\nassert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25\n\n",
        "code_str": "def sum_series(n):\n  if n < 1:\n    return 0\n  else:\n    return n + sum_series(n - 2)",
        "is_deleted": 1,
        "code_str_deleted": "def sum_series(n):\n  if n < 1:\n    return 0\n    #begin to write code\n",
        "code_str_generate": "def sum_series(n):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if n < 1:\n    return 0\n    #begin to write code\n"
    },
    {
        "task_id": 163,
        "python_prompt": "Write a function to calculate the area of a regular polygon.",
        "test": "\nassert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214\n\n",
        "code_str": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area",
        "is_deleted": 1,
        "code_str_deleted": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  #begin to write code\n",
        "code_str_generate": "from math import tan, pi\ndef area_polygon(s,l):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the area of a regular polygon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  #begin to write code\n"
    },
    {
        "task_id": 164,
        "python_prompt": "Write a python function to check whether the sum of divisors are same or not.",
        "test": "\nassert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True\n\n",
        "code_str": "import math \ndef divSum(n): \n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n            sum = (sum + i +math.floor(n / i)); \n        i += 1; \n    return sum; \ndef areEquivalent(num1,num2): \n    return divSum(num1) == divSum(num2); ",
        "is_deleted": 1,
        "code_str_deleted": "import math \ndef divSum(n):\n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n        #begin to write code\n",
        "code_str_generate": "import math \ndef divSum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the sum of divisors are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 1; \n    i = 2; \n    while(i * i <= n): \n        if (n % i == 0): \n        #begin to write code\n"
    },
    {
        "task_id": 165,
        "python_prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "test": "\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n\n",
        "code_str": "def count_char_position(str1): \n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n            (i == ord(str1[i]) - ord('a'))): \n            count_chars += 1\n    return count_chars ",
        "is_deleted": 1,
        "code_str_deleted": "def count_char_position(str1):\n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n        #begin to write code\n",
        "code_str_generate": "def count_char_position(str1):\n\n    '''\n    progame language:python\n    description:Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count_chars = 0\n    for i in range(len(str1)):\n        if ((i == ord(str1[i]) - ord('A')) or \n        #begin to write code\n"
    },
    {
        "task_id": 166,
        "python_prompt": "Write a python function to count the pairs with xor as an even number.",
        "test": "\nassert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1\n\n",
        "code_str": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ",
        "is_deleted": 1,
        "code_str_deleted": "def find_even_Pair(A,N):\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n        #begin to write code\n",
        "code_str_generate": "def find_even_Pair(A,N):\n\n    '''\n    progame language:python\n    description:Write a python function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n        #begin to write code\n"
    },
    {
        "task_id": 167,
        "python_prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "test": "\nassert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32\n\n",
        "code_str": "def next_Power_Of_2(n): \n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n    while( n != 0): \n        n >>= 1\n        count += 1\n    return 1 << count; ",
        "is_deleted": 1,
        "code_str_deleted": "def next_Power_Of_2(n):\n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n        #begin to write code\n",
        "code_str_generate": "def next_Power_Of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0; \n    if (n and not(n & (n - 1))): \n        return n   \n        #begin to write code\n"
    },
    {
        "task_id": 168,
        "python_prompt": "Write a python function to find the frequency of a number in a given array.",
        "test": "\nassert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2\n\n",
        "code_str": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ",
        "is_deleted": 1,
        "code_str_deleted": "def frequency(a,x):\n    count = 0  \n    for i in a: \n    #begin to write code\n",
        "code_str_generate": "def frequency(a,x):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0  \n    for i in a: \n    #begin to write code\n"
    },
    {
        "task_id": 169,
        "python_prompt": "Write a function to calculate the nth pell number.",
        "test": "\nassert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408\n\n",
        "code_str": "def get_pell(n): \n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\tfor i in range(3, n+1): \n\t\tc = 2 * b + a \n\t\ta = b \n\t\tb = c \n\treturn b ",
        "is_deleted": 1,
        "code_str_deleted": "def get_pell(n):\n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\t#begin to write code\n",
        "code_str_generate": "def get_pell(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the nth pell number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (n <= 2): \n\t\treturn n \n\ta = 1\n\tb = 2\n\t#begin to write code\n"
    },
    {
        "task_id": 170,
        "python_prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "test": "\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38\n\n",
        "code_str": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ",
        "is_deleted": 1,
        "code_str_deleted": "def sum_range_list(list1, m, n):\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n",
        "code_str_generate": "def sum_range_list(list1, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n"
    },
    {
        "task_id": 171,
        "python_prompt": "Write a function to find the perimeter of a pentagon.",
        "test": "\nassert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75\n\n",
        "code_str": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  #begin to write code\n",
        "code_str_generate": "import math\ndef perimeter_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=(5*a)\n  #begin to write code\n"
    },
    {
        "task_id": 172,
        "python_prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "test": "\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\n\n",
        "code_str": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\n      count = count + 1\n  return count",
        "is_deleted": 1,
        "code_str_deleted": "def count_occurance(s):\n  count=0\n  for i in range(len(s)):\n  #begin to write code\n",
        "code_str_generate": "def count_occurance(s):\n\n  '''\n  progame language:python\n  description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  count=0\n  for i in range(len(s)):\n  #begin to write code\n"
    },
    {
        "task_id": 173,
        "python_prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "test": "\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')\n\n",
        "code_str": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef remove_splchar(text):\n pattern = re.compile('[\\W_]+')\n #begin to write code\n",
        "code_str_generate": "import re\ndef remove_splchar(text):\n\n '''\n progame language:python\n description:Write a function to remove everything except alphanumeric characters from a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n pattern = re.compile('[\\W_]+')\n #begin to write code\n"
    },
    {
        "task_id": 174,
        "python_prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "test": "\nassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n\n",
        "code_str": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n         result.setdefault(k, []).append(v)\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n    #begin to write code\n",
        "code_str_generate": "def group_keyvalue(l):\n\n    '''\n    progame language:python\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = {}\n    for k, v in l:\n    #begin to write code\n"
    },
    {
        "task_id": 175,
        "python_prompt": "Write a function to verify validity of a string of parentheses.",
        "test": "\nassert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True\n\n",
        "code_str": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n                stack.append(parenthese)\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\n                return False\n        return len(stack) == 0",
        "is_deleted": 1,
        "code_str_deleted": "def is_valid_parenthese( str1):\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n            #begin to write code\n",
        "code_str_generate": "def is_valid_parenthese( str1):\n\n        '''\n        progame language:python\n        description:Write a function to verify validity of a string of parentheses.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for parenthese in str1:\n            if parenthese in pchar:\n            #begin to write code\n"
    },
    {
        "task_id": 176,
        "python_prompt": "Write a function to find the perimeter of a triangle.",
        "test": "\nassert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105\n\n",
        "code_str": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter",
        "is_deleted": 1,
        "code_str_deleted": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  #begin to write code\n",
        "code_str_generate": "def perimeter_triangle(a,b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=a+b+c\n  #begin to write code\n"
    },
    {
        "task_id": 177,
        "python_prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "test": "\nassert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)\n\n",
        "code_str": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ",
        "is_deleted": 1,
        "code_str_deleted": "def answer(L,R):\n    if (2 * L <= R): \n        return (L ,2*L)\n        #begin to write code\n",
        "code_str_generate": "def answer(L,R):\n\n    '''\n    progame language:python\n    description:Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2 * L <= R): \n        return (L ,2*L)\n        #begin to write code\n"
    },
    {
        "task_id": 178,
        "python_prompt": "Write a function to search some literals strings in a string.",
        "test": "\nassert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')\n\n",
        "code_str": "import re\ndef string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n       return ('Matched!')\n     else:\n       return ('Not Matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef string_literals(patterns,text):\n  for pattern in patterns:\n     if re.search(pattern,  text):\n     #begin to write code\n",
        "code_str_generate": "import re\ndef string_literals(patterns,text):\n\n  '''\n  progame language:python\n  description:Write a function to search some literals strings in a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for pattern in patterns:\n     if re.search(pattern,  text):\n     #begin to write code\n"
    },
    {
        "task_id": 179,
        "python_prompt": "Write a function to find if the given number is a keith number or not.",
        "test": "\nassert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True\n\n",
        "code_str": "def is_num_keith(x): \n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\tnext_term = 0 \n\ti = n \n\twhile (next_term < x): \n\t\tnext_term = 0 \n\t\tfor j in range(1,n+1): \n\t\t\tnext_term += terms[i - j] \n\t\tterms.append(next_term) \n\t\ti+=1 \n\treturn (next_term == x) ",
        "is_deleted": 1,
        "code_str_deleted": "def is_num_keith(x):\n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\t#begin to write code\n",
        "code_str_generate": "def is_num_keith(x):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find if the given number is a keith number or not.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tterms = [] \n\ttemp = x \n\tn = 0 \n\twhile (temp > 0): \n\t\tterms.append(temp % 10) \n\t\ttemp = int(temp / 10) \n\t\tn+=1 \n\tterms.reverse() \n\t#begin to write code\n"
    },
    {
        "task_id": 180,
        "python_prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "test": "\nassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595\n\n",
        "code_str": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n return dist",
        "is_deleted": 1,
        "code_str_deleted": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n #begin to write code\n",
        "code_str_generate": "from math import radians, sin, cos, acos\ndef distance_lat_long(slat,slon,elat,elon):\n\n '''\n progame language:python\n description:Write a function to calculate distance between two points using latitude and longitude.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\n #begin to write code\n"
    },
    {
        "task_id": 181,
        "python_prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "test": "\nassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'\n\n",
        "code_str": "def common_prefix_util(str1, str2): \n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\tresult += str1[i] \n\t\ti += 1\n\t\tj += 1\n\treturn (result) \ndef common_prefix (arr, n): \n\tprefix = arr[0] \n\tfor i in range (1, n): \n\t\tprefix = common_prefix_util(prefix, arr[i]) \n\treturn (prefix) ",
        "is_deleted": 1,
        "code_str_deleted": "def common_prefix_util(str1, str2):\n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\t\t#begin to write code\n",
        "code_str_generate": "def common_prefix_util(str1, str2):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest common prefix in the given set of strings.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tresult = \"\"; \n\tn1 = len(str1) \n\tn2 = len(str2) \n\ti = 0\n\tj = 0\n\twhile i <= n1 - 1 and j <= n2 - 1: \n\t\tif (str1[i] != str2[j]): \n\t\t\tbreak\n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 182,
        "python_prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "test": "\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n\n",
        "code_str": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  numerical_characters = re.findall(r\"[0-9]\", string) \n  special_characters = re.findall(r\"[, .!?]\", string) \n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef find_character(string):\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  #begin to write code\n",
        "code_str_generate": "import re\ndef find_character(string):\n\n  '''\n  progame language:python\n  description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \n  lowercase_characters = re.findall(r\"[a-z]\", string) \n  #begin to write code\n"
    },
    {
        "task_id": 183,
        "python_prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "test": "\nassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3\n\n",
        "code_str": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count",
        "is_deleted": 1,
        "code_str_deleted": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n",
        "code_str_generate": "def count_pairs(arr, n, k):\n\n  '''\n  progame language:python\n  description:Write a function to count all the distinct pairs having a difference of k in any array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n"
    },
    {
        "task_id": 184,
        "python_prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "test": "\nassert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False\n\n",
        "code_str": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n return greater_specificnum",
        "is_deleted": 1,
        "code_str_deleted": "def greater_specificnum(list,num):\n greater_specificnum=all(x >= num for x in list)\n #begin to write code\n",
        "code_str_generate": "def greater_specificnum(list,num):\n\n '''\n progame language:python\n description:Write a function to find all the values in a list that are greater than a specified number.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n greater_specificnum=all(x >= num for x in list)\n #begin to write code\n"
    },
    {
        "task_id": 185,
        "python_prompt": "Write a function to find the focus of a parabola.",
        "test": "\nassert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)\n\n",
        "code_str": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus",
        "is_deleted": 1,
        "code_str_deleted": "def parabola_focus(a, b, c):\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  #begin to write code\n",
        "code_str_generate": "def parabola_focus(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the focus of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  #begin to write code\n"
    },
    {
        "task_id": 186,
        "python_prompt": "Write a function to search some literals strings in a string by using regex.",
        "test": "\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\n\n",
        "code_str": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n        return ('Matched!')\n    else:\n        return ('Not Matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef check_literals(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern,  text):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef check_literals(text, patterns):\n\n  '''\n  progame language:python\n  description:Write a function to search some literals strings in a string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for pattern in patterns:\n    if re.search(pattern,  text):\n    #begin to write code\n"
    },
    {
        "task_id": 187,
        "python_prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "test": "\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2\n\n",
        "code_str": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
        "is_deleted": 1,
        "code_str_deleted": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n",
        "code_str_generate": "def longest_common_subsequence(X, Y, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n"
    },
    {
        "task_id": 188,
        "python_prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "test": "\nassert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True\n\n",
        "code_str": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n                if ((i*i*j*j) == n):\n                    return True;\n    return False;",
        "is_deleted": 1,
        "code_str_deleted": "def prod_Square(n):\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n            #begin to write code\n",
        "code_str_generate": "def prod_Square(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(2,(n) + 1):\n        if (i*i < (n+1)):\n            for j in range(2,n + 1):\n            #begin to write code\n"
    },
    {
        "task_id": 189,
        "python_prompt": "Write a python function to find the first missing positive number.",
        "test": "\nassert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3\n\n",
        "code_str": "def first_Missing_Positive(arr,n): \n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n        if arr[i] <= 0 or arr[i] > n:\n            arr[i] = 1\n    for i in range(n):\n        arr[(arr[i] - 1) % n] += n\n    for i in range(n):\n        if arr[i] <= n:\n            return(i + 1)\n    return(n + 1)",
        "is_deleted": 1,
        "code_str_deleted": "def first_Missing_Positive(arr,n):\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n    #begin to write code\n",
        "code_str_generate": "def first_Missing_Positive(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first missing positive number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ptr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            ptr = 1\n            break\n    if ptr == 0:\n        return(1)\n    for i in range(n):\n    #begin to write code\n"
    },
    {
        "task_id": 190,
        "python_prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "test": "\nassert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1\n\n",
        "code_str": "def count_Intgral_Points(x1,y1,x2,y2): \n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Intgral_Points(x1,y1,x2,y2):\n    #begin to write code\n",
        "code_str_generate": "def count_Intgral_Points(x1,y1,x2,y2):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of integral co-ordinates that lie inside a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 191,
        "python_prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "test": "\nassert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True\n\n",
        "code_str": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n",
        "code_str_generate": "def check_monthnumber(monthname3):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 30 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n"
    },
    {
        "task_id": 192,
        "python_prompt": "Write a python function to check whether a string has atleast one letter and one number.",
        "test": "\nassert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False\n\n",
        "code_str": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ",
        "is_deleted": 1,
        "code_str_deleted": "def check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n",
        "code_str_generate": "def check_String(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n"
    },
    {
        "task_id": 193,
        "python_prompt": "Write a function to remove the duplicates from the given tuple.",
        "test": "\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)\n\n",
        "code_str": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  #begin to write code\n",
        "code_str_generate": "def remove_tuple(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove the duplicates from the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(set(test_tup))\n  #begin to write code\n"
    },
    {
        "task_id": 194,
        "python_prompt": "Write a python function to convert octal number to decimal number.",
        "test": "\nassert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32\n\n",
        "code_str": "def octal_To_Decimal(n):  \n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n        last_digit = temp % 10; \n        temp = int(temp / 10); \n        dec_value += last_digit*base; \n        base = base * 8; \n    return dec_value; ",
        "is_deleted": 1,
        "code_str_deleted": "def octal_To_Decimal(n):\n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n    #begin to write code\n",
        "code_str_generate": "def octal_To_Decimal(n):\n\n    '''\n    progame language:python\n    description:Write a python function to convert octal number to decimal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    num = n; \n    dec_value = 0; \n    base = 1; \n    temp = num; \n    while (temp): \n    #begin to write code\n"
    },
    {
        "task_id": 195,
        "python_prompt": "Write a python function to find the first position of an element in a sorted array.",
        "test": "\nassert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0\n\n",
        "code_str": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res",
        "is_deleted": 1,
        "code_str_deleted": "def first(arr,x,n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n",
        "code_str_generate": "def first(arr,x,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n"
    },
    {
        "task_id": 196,
        "python_prompt": "Write a function to remove all the tuples with length k.",
        "test": "\nassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]\n\n",
        "code_str": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n",
        "code_str_generate": "def remove_tuples(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n"
    },
    {
        "task_id": 197,
        "python_prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "test": "\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)\n\n",
        "code_str": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n",
        "is_deleted": 1,
        "code_str_deleted": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def find_exponentio(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the exponentiation of the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 198,
        "python_prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "test": "\nassert round(largest_triangle(4,2),10) == round(10.392304845413264,10)\nassert round(largest_triangle(5,7),10) == round(4.639421805988064,10)\nassert round(largest_triangle(9,1),10) == round(105.2220865598093,10)\n\n",
        "code_str": "import math\ndef largest_triangle(a,b): \n    if (a < 0 or b < 0): \n        return -1 \n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \n    return area ",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef largest_triangle(a,b):\n    if (a < 0 or b < 0): \n        return -1 \n        #begin to write code\n",
        "code_str_generate": "import math\ndef largest_triangle(a,b):\n\n    '''\n    progame language:python\n    description:Write a function to find the largest triangle that can be inscribed in an ellipse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (a < 0 or b < 0): \n        return -1 \n        #begin to write code\n"
    },
    {
        "task_id": 199,
        "python_prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
        "test": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n\n",
        "code_str": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ",
        "is_deleted": 1,
        "code_str_deleted": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n",
        "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n"
    },
    {
        "task_id": 200,
        "python_prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "test": "\nassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]\n\n",
        "code_str": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result",
        "is_deleted": 1,
        "code_str_deleted": "def position_max(list1):\n    max_val = max(list1)\n    #begin to write code\n",
        "code_str_generate": "def position_max(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = max(list1)\n    #begin to write code\n"
    },
    {
        "task_id": 201,
        "python_prompt": "Write a python function to check whether the elements in a list are same or not.",
        "test": "\nassert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False\n\n",
        "code_str": "def chkList(lst): \n    return len(set(lst)) == 1",
        "is_deleted": 1,
        "code_str_deleted": "def chkList(lst):\n    #begin to write code\n",
        "code_str_generate": "def chkList(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 202,
        "python_prompt": "Write a function to remove even characters in a string.",
        "test": "\nassert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")\n\n",
        "code_str": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "is_deleted": 1,
        "code_str_deleted": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n #begin to write code\n",
        "code_str_generate": "def remove_even(str1):\n\n '''\n progame language:python\n description:Write a function to remove even characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = ''\n for i in range(1, len(str1) + 1):\n #begin to write code\n"
    },
    {
        "task_id": 203,
        "python_prompt": "Write a python function to find the hamming distance between given two integers.",
        "test": "\nassert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2\n\n",
        "code_str": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ",
        "is_deleted": 1,
        "code_str_deleted": "def hamming_Distance(n1,n2) :\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n",
        "code_str_generate": "def hamming_Distance(n1,n2) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n"
    },
    {
        "task_id": 204,
        "python_prompt": "Write a python function to count the occurrence of a given character in a string.",
        "test": "\nassert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4\n\n",
        "code_str": "def count(s,c) : \n    res = 0 \n    for i in range(len(s)) : \n        if (s[i] == c): \n            res = res + 1\n    return res ",
        "is_deleted": 1,
        "code_str_deleted": "def count(s,c) :\n    res = 0 \n    for i in range(len(s)) : \n    #begin to write code\n",
        "code_str_generate": "def count(s,c) :\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0 \n    for i in range(len(s)) : \n    #begin to write code\n"
    },
    {
        "task_id": 205,
        "python_prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "test": "\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n\n",
        "code_str": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  #begin to write code\n",
        "code_str_generate": "def inversion_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the inversions of tuple elements in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  #begin to write code\n"
    },
    {
        "task_id": 206,
        "python_prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "test": "\nassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n\n",
        "code_str": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n",
        "code_str_generate": "def concatenate_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to perform the adjacent element concatenation in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n"
    },
    {
        "task_id": 207,
        "python_prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "test": "\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1\n\n",
        "code_str": "def find_longest_repeating_subseq(str): \n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t\tif (str[i-1] == str[j-1] and i != j): \n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \n\t\t\telse: \n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \n\treturn dp[n][n]",
        "is_deleted": 1,
        "code_str_deleted": "def find_longest_repeating_subseq(str):\n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t#begin to write code\n",
        "code_str_generate": "def find_longest_repeating_subseq(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(str) \n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \n\tfor i in range(1, n+1): \n\t\tfor j in range(1, n+1): \n\t\t#begin to write code\n"
    },
    {
        "task_id": 208,
        "python_prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "test": "\nassert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False\n\n",
        "code_str": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n",
        "code_str_generate": "import re\ndef is_decimal(num):\n\n  '''\n  progame language:python\n  description:Write a function to check the given decimal with a precision of 2 by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n"
    },
    {
        "task_id": 209,
        "python_prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "test": "\nassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]\n\n",
        "code_str": "import heapq as hq\ndef heap_replace(heap,a):\n  hq.heapify(heap)\n  hq.heapreplace(heap, a)\n  return heap",
        "is_deleted": 1,
        "code_str_deleted": "import heapq as hq\ndef heap_replace(heap,a):\n  hq.heapify(heap)\n  #begin to write code\n",
        "code_str_generate": "import heapq as hq\ndef heap_replace(heap,a):\n\n  '''\n  progame language:python\n  description:Write a function to delete the smallest element from the given heap and then insert a new item.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  hq.heapify(heap)\n  #begin to write code\n"
    },
    {
        "task_id": 210,
        "python_prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "test": "\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\n\n",
        "code_str": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n",
        "code_str_generate": "import re\ndef is_allowed_specific_char(string):\n\n    '''\n    progame language:python\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n"
    },
    {
        "task_id": 211,
        "python_prompt": "Write a python function to count numbers whose oth and nth bits are set.",
        "test": "\nassert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1\n\n",
        "code_str": "def count_Num(n): \n    if (n == 1): \n        return 1\n    count = pow(2,n - 2) \n    return count ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Num(n):\n    if (n == 1): \n        return 1\n        #begin to write code\n",
        "code_str_generate": "def count_Num(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count numbers whose oth and nth bits are set.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n == 1): \n        return 1\n        #begin to write code\n"
    },
    {
        "task_id": 212,
        "python_prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
        "test": "\nassert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275\n\n",
        "code_str": "import math  \ndef fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "import math  \ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1) : \n    #begin to write code\n",
        "code_str_generate": "import math  \ndef fourth_Power_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n+1) : \n    #begin to write code\n"
    },
    {
        "task_id": 213,
        "python_prompt": "Write a function to perform the concatenation of two string tuples.",
        "test": "\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n\n",
        "code_str": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def concatenate_strings(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the concatenation of two string tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 214,
        "python_prompt": "Write a function to convert radians to degrees.",
        "test": "\nassert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878\n\n",
        "code_str": "import math\ndef degree_radian(radian):\n degree = radian*(180/math.pi)\n return degree",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef degree_radian(radian):\n degree = radian*(180/math.pi)\n #begin to write code\n",
        "code_str_generate": "import math\ndef degree_radian(radian):\n\n '''\n progame language:python\n description:Write a function to convert radians to degrees.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n degree = radian*(180/math.pi)\n #begin to write code\n"
    },
    {
        "task_id": 215,
        "python_prompt": "Write a function to decode a run-length encoded given list.",
        "test": "\nassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n\n",
        "code_str": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n        else:\n            return [(g, [0])]\n    return [x for g in alist for x, R in aux(g) for i in R]",
        "is_deleted": 1,
        "code_str_deleted": "def decode_list(alist):\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n            #begin to write code\n",
        "code_str_generate": "def decode_list(alist):\n\n    '''\n    progame language:python\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    def aux(g):\n        if isinstance(g, list):\n            return [(g[1], range(g[0]))]\n            #begin to write code\n"
    },
    {
        "task_id": 216,
        "python_prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "test": "\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n\n",
        "code_str": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n            exist = False\n    return exist ",
        "is_deleted": 1,
        "code_str_deleted": "def check_subset_list(list1, list2):\n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n    #begin to write code\n",
        "code_str_generate": "def check_subset_list(list1, list2):\n\n    '''\n    progame language:python\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n    #begin to write code\n"
    },
    {
        "task_id": 217,
        "python_prompt": "Write a python function to find the first repeated character in a given string.",
        "test": "\nassert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'\n\n",
        "code_str": "def first_Repeated_Char(str): \n    h = {}\n    for ch in str:\n        if ch in h: \n            return ch;\n        else: \n            h[ch] = 0\n    return '\\0'",
        "is_deleted": 1,
        "code_str_deleted": "def first_Repeated_Char(str):\n    h = {}\n    for ch in str:\n        if ch in h: \n        #begin to write code\n",
        "code_str_generate": "def first_Repeated_Char(str):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    h = {}\n    for ch in str:\n        if ch in h: \n        #begin to write code\n"
    },
    {
        "task_id": 218,
        "python_prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
        "test": "\nassert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3\n\n",
        "code_str": "import math   \ndef min_Operations(A,B):  \n    if (A > B): \n        swap(A,B)  \n    B = B // math.gcd(A,B);  \n    return B - 1",
        "is_deleted": 1,
        "code_str_deleted": "import math   \ndef min_Operations(A,B):\n    if (A > B): \n        swap(A,B)  \n        #begin to write code\n",
        "code_str_generate": "import math   \ndef min_Operations(A,B):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum operations required to make two numbers equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (A > B): \n        swap(A,B)  \n        #begin to write code\n"
    },
    {
        "task_id": 219,
        "python_prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "test": "\nassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\n\n",
        "code_str": "\ndef extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n    if idx < K or idx >= len(temp) - K:\n      res.append(val)\n  res = tuple(res)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def extract_min_max(test_tup, K):\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n  #begin to write code\n",
        "code_str_generate": "def extract_min_max(test_tup, K):\n\n  '''\n  progame language:python\n  description:Write a function to extract maximum and minimum k elements in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  test_tup = list(test_tup)\n  temp = sorted(test_tup)\n  for idx, val in enumerate(temp):\n  #begin to write code\n"
    },
    {
        "task_id": 220,
        "python_prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "test": "\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')\n\n",
        "code_str": "import re\ndef replace_max_specialchar(text,n):\n return (re.sub(\"[ ,.]\", \":\", text, n))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef replace_max_specialchar(text,n):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef replace_max_specialchar(text,n):\n\n    '''\n    progame language:python\n    description:Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 221,
        "python_prompt": "Write a python function to find the first even number in a given list of numbers.",
        "test": "\nassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6\n\n",
        "code_str": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even",
        "is_deleted": 1,
        "code_str_deleted": "def first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    #begin to write code\n",
        "code_str_generate": "def first_even(nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    first_even = next((el for el in nums if el%2==0),-1)\n    #begin to write code\n"
    },
    {
        "task_id": 222,
        "python_prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "test": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n\n",
        "code_str": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n",
        "code_str_generate": "def check_type(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to check if all the elements in tuple have same data type or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n"
    },
    {
        "task_id": 223,
        "python_prompt": "Write a function to check for majority element in the given sorted array.",
        "test": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n\n",
        "code_str": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1",
        "is_deleted": 1,
        "code_str_deleted": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n",
        "code_str_generate": "def is_majority(arr, n, x):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check for majority element in the given sorted array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n"
    },
    {
        "task_id": 224,
        "python_prompt": "Write a python function to count set bits of a given number.",
        "test": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n\n",
        "code_str": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n    #begin to write code\n",
        "code_str_generate": "def count_Set_Bits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    while (n): \n    #begin to write code\n"
    },
    {
        "task_id": 225,
        "python_prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
        "test": "\nassert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2\n\n",
        "code_str": "def find_Min(arr,low,high): \n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high]; ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Min(arr,low,high):\n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n            #begin to write code\n",
        "code_str_generate": "def find_Min(arr,low,high):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum element in a sorted and rotated array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while (low < high): \n        mid = low + (high - low) // 2;   \n        if (arr[mid] == arr[high]): \n            high -= 1; \n            #begin to write code\n"
    },
    {
        "task_id": 226,
        "python_prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "test": "\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\n\n",
        "code_str": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result",
        "is_deleted": 1,
        "code_str_deleted": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n",
        "code_str_generate": "def odd_values_string(str):\n\n  '''\n  progame language:python\n  description:Write a python function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n"
    },
    {
        "task_id": 227,
        "python_prompt": "Write a function to find minimum of three numbers.",
        "test": "\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n\n",
        "code_str": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ",
        "is_deleted": 1,
        "code_str_deleted": "def min_of_three(a,b,c):\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n",
        "code_str_generate": "def min_of_three(a,b,c):\n\n      '''\n      progame language:python\n      description:Write a function to find minimum of three numbers.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n"
    },
    {
        "task_id": 228,
        "python_prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "test": "\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False\n\n",
        "code_str": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    if (new_num == 0): \n        return True\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    #begin to write code\n",
        "code_str_generate": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether all the bits are unset in the given range or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    #begin to write code\n"
    },
    {
        "task_id": 229,
        "python_prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "test": "\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\n",
        "code_str": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr",
        "is_deleted": 1,
        "code_str_deleted": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n",
        "code_str_generate": "def re_arrange_array(arr, n):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n"
    },
    {
        "task_id": 230,
        "python_prompt": "Write a function to replace blank spaces with any character in a string.",
        "test": "\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n\n",
        "code_str": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2",
        "is_deleted": 1,
        "code_str_deleted": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n #begin to write code\n",
        "code_str_generate": "def replace_blank(str1,char):\n\n '''\n progame language:python\n description:Write a function to replace blank spaces with any character in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(' ', char)\n #begin to write code\n"
    },
    {
        "task_id": 231,
        "python_prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "test": "\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28\n\n",
        "code_str": "def max_sum(tri, n): \n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\tfor j in range(1, i): \n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \n\treturn (max(tri[n-1]))",
        "is_deleted": 1,
        "code_str_deleted": "def max_sum(tri, n):\n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\t#begin to write code\n",
        "code_str_generate": "def max_sum(tri, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum in the given right triangle of numbers.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif n > 1: \n\t\ttri[1][1] = tri[1][1]+tri[0][0] \n\t\ttri[1][0] = tri[1][0]+tri[0][0] \n\tfor i in range(2, n): \n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \n\t\t#begin to write code\n"
    },
    {
        "task_id": 232,
        "python_prompt": "Write a function to get the n largest items from a dataset.",
        "test": "\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]\n\n",
        "code_str": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest",
        "is_deleted": 1,
        "code_str_deleted": "import heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n #begin to write code\n",
        "code_str_generate": "import heapq\ndef larg_nnum(list1,n):\n\n '''\n progame language:python\n description:Write a function to get the n largest items from a dataset.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n largest=heapq.nlargest(n,list1)\n #begin to write code\n"
    },
    {
        "task_id": 233,
        "python_prompt": "Write a function to find the lateral surface area of a cylinder.",
        "test": "\nassert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002\n\n",
        "code_str": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface",
        "is_deleted": 1,
        "code_str_deleted": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n",
        "code_str_generate": "def lateralsuface_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n"
    },
    {
        "task_id": 234,
        "python_prompt": "Write a function to find the volume of a cube.",
        "test": "\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n\n",
        "code_str": "def volume_cube(l):\n  volume = l * l * l\n  return volume",
        "is_deleted": 1,
        "code_str_deleted": "def volume_cube(l):\n  volume = l * l * l\n  #begin to write code\n",
        "code_str_generate": "def volume_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume = l * l * l\n  #begin to write code\n"
    },
    {
        "task_id": 235,
        "python_prompt": "Write a python function to set all even bits of a given number.",
        "test": "\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n\n",
        "code_str": "def even_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res) ",
        "is_deleted": 1,
        "code_str_deleted": "def even_bit_set_number(n):\n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n        #begin to write code\n",
        "code_str_generate": "def even_bit_set_number(n):\n\n    '''\n    progame language:python\n    description:Write a python function to set all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n        #begin to write code\n"
    },
    {
        "task_id": 236,
        "python_prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "test": "\nassert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1\n\n",
        "code_str": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\n        Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\n        return Tri_up + Tri_down;",
        "is_deleted": 1,
        "code_str_deleted": "def No_of_Triangle(N,K):\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        #begin to write code\n",
        "code_str_generate": "def No_of_Triangle(N,K):\n\n    '''\n    progame language:python\n    description:Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (N < K):\n        return -1;\n    else:\n        Tri_up = 0;\n        #begin to write code\n"
    },
    {
        "task_id": 237,
        "python_prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "test": "\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n\n",
        "code_str": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n",
        "code_str_generate": "from collections import Counter \ndef check_occurences(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n"
    },
    {
        "task_id": 238,
        "python_prompt": "Write a python function to count number of non-empty substrings of a given string.",
        "test": "\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n\n",
        "code_str": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ",
        "is_deleted": 1,
        "code_str_deleted": "def number_of_substrings(str):\n\tstr_len = len(str); \n\t#begin to write code\n",
        "code_str_generate": "def number_of_substrings(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a python function to count number of non-empty substrings of a given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tstr_len = len(str); \n\t#begin to write code\n"
    },
    {
        "task_id": 239,
        "python_prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "test": "\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n\n",
        "code_str": "def get_total_number_of_sequences(m,n): \n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t\tT[i][j]=0\n\t\t\telif j==1: \n\t\t\t\tT[i][j]=i \n\t\t\telse: \n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \n\treturn T[m][n]",
        "is_deleted": 1,
        "code_str_deleted": "def get_total_number_of_sequences(m,n):\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t#begin to write code\n",
        "code_str_generate": "def get_total_number_of_sequences(m,n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \n\tfor i in range(m+1): \n\t\tfor j in range(n+1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j]=0\n\t\t\telif i<j: \n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 240,
        "python_prompt": "Write a function to replace the last element of the list with another list.",
        "test": "\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n\n",
        "code_str": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n",
        "is_deleted": 1,
        "code_str_deleted": "def replace_list(list1,list2):\n list1[-1:] = list2\n #begin to write code\n",
        "code_str_generate": "def replace_list(list1,list2):\n\n '''\n progame language:python\n description:Write a function to replace the last element of the list with another list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list1[-1:] = list2\n #begin to write code\n"
    },
    {
        "task_id": 241,
        "python_prompt": "Write a function to generate a 3d array having each element as '*'.",
        "test": "\nassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]\n\n",
        "code_str": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d",
        "is_deleted": 1,
        "code_str_deleted": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n #begin to write code\n",
        "code_str_generate": "def array_3d(m,n,o):\n\n '''\n progame language:python\n description:Write a function to generate a 3d array having each element as '*'.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n #begin to write code\n"
    },
    {
        "task_id": 242,
        "python_prompt": "Write a function to count total characters in a string.",
        "test": "\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n\n",
        "code_str": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total",
        "is_deleted": 1,
        "code_str_deleted": "def count_charac(str1):\n total = 0\n for i in str1:\n #begin to write code\n",
        "code_str_generate": "def count_charac(str1):\n\n '''\n progame language:python\n description:Write a function to count total characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n total = 0\n for i in str1:\n #begin to write code\n"
    },
    {
        "task_id": 243,
        "python_prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "test": "\nassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n\n",
        "code_str": "def sort_on_occurence(lst): \n\tdct = {} \n\tfor i, j in lst: \n\t\tdct.setdefault(i, []).append(j) \n\treturn ([(i, *dict.fromkeys(j), len(j)) \n\t\t\t\tfor i, j in dct.items()]) ",
        "is_deleted": 1,
        "code_str_deleted": "def sort_on_occurence(lst):\n\tdct = {} \n\tfor i, j in lst: \n\t#begin to write code\n",
        "code_str_generate": "def sort_on_occurence(lst):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to sort the given list based on the occurrence of first element of tuples.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdct = {} \n\tfor i, j in lst: \n\t#begin to write code\n"
    },
    {
        "task_id": 244,
        "python_prompt": "Write a python function to find the next perfect square greater than a given number.",
        "test": "\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n\n",
        "code_str": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ",
        "is_deleted": 1,
        "code_str_deleted": "import math  \ndef next_Perfect_Square(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    #begin to write code\n",
        "code_str_generate": "import math  \ndef next_Perfect_Square(N):\n\n    '''\n    progame language:python\n    description:Write a python function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nextN = math.floor(math.sqrt(N)) + 1\n    #begin to write code\n"
    },
    {
        "task_id": 245,
        "python_prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "test": "\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n\n",
        "code_str": "def max_sum(arr, n): \n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum",
        "is_deleted": 1,
        "code_str_deleted": "def max_sum(arr, n):\n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t#begin to write code\n",
        "code_str_generate": "def max_sum(arr, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tMSIBS = arr[:] \n\tfor i in range(n): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, n + 1): \n\t#begin to write code\n"
    },
    {
        "task_id": 246,
        "python_prompt": "Write a function for computing square roots using the babylonian method.",
        "test": "\nassert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0\n\n",
        "code_str": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    while(g != g2):\n        n = number/ g;\n        g2 = g;\n        g = (g + n)/2;\n    return g;",
        "is_deleted": 1,
        "code_str_deleted": "def babylonian_squareroot(number):\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    #begin to write code\n",
        "code_str_generate": "def babylonian_squareroot(number):\n\n    '''\n    progame language:python\n    description:Write a function for computing square roots using the babylonian method.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if(number == 0):\n        return 0;\n    g = number/2.0;\n    g2 = g + 1;\n    #begin to write code\n"
    },
    {
        "task_id": 247,
        "python_prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "test": "\nassert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 \n\n",
        "code_str": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]",
        "is_deleted": 1,
        "code_str_deleted": "def lps(str):\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n",
        "code_str_generate": "def lps(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest palindromic subsequence in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 248,
        "python_prompt": "Write a function to calculate the harmonic sum of n-1.",
        "test": "\nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682\n\n",
        "code_str": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ",
        "is_deleted": 1,
        "code_str_deleted": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n    #begin to write code\n",
        "code_str_generate": "def harmonic_sum(n):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the harmonic sum of n-1.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if n < 2:\n    return 1\n    #begin to write code\n"
    },
    {
        "task_id": 249,
        "python_prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "test": "\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]\n\n",
        "code_str": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result",
        "is_deleted": 1,
        "code_str_deleted": "def intersection_array(array_nums1,array_nums2):\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n #begin to write code\n",
        "code_str_generate": "def intersection_array(array_nums1,array_nums2):\n\n '''\n progame language:python\n description:Write a function to find the intersection of two arrays using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n #begin to write code\n"
    },
    {
        "task_id": 250,
        "python_prompt": "Write a python function to count the occcurences of an element in a tuple.",
        "test": "\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n\n",
        "code_str": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (ele == x): \n            count = count + 1\n    return count ",
        "is_deleted": 1,
        "code_str_deleted": "def count_X(tup, x):\n    count = 0\n    for ele in tup: \n    #begin to write code\n",
        "code_str_generate": "def count_X(tup, x):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    for ele in tup: \n    #begin to write code\n"
    },
    {
        "task_id": 251,
        "python_prompt": "Write a function to insert an element before each element of a list.",
        "test": "\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] \n\n",
        "code_str": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n return list",
        "is_deleted": 1,
        "code_str_deleted": "def insert_element(list,element):\n list = [v for elt in list for v in (element, elt)]\n #begin to write code\n",
        "code_str_generate": "def insert_element(list,element):\n\n '''\n progame language:python\n description:Write a function to insert an element before each element of a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list = [v for elt in list for v in (element, elt)]\n #begin to write code\n"
    },
    {
        "task_id": 252,
        "python_prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "test": "\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n\n",
        "code_str": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n  return (num) ",
        "is_deleted": 1,
        "code_str_deleted": "import cmath  \ndef convert(numbers):\n  num = cmath.polar(numbers)  \n  #begin to write code\n",
        "code_str_generate": "import cmath  \ndef convert(numbers):\n\n  '''\n  progame language:python\n  description:Write a python function to convert complex numbers to polar coordinates.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num = cmath.polar(numbers)  \n  #begin to write code\n"
    },
    {
        "task_id": 253,
        "python_prompt": "Write a python function to count integers from a given list.",
        "test": "\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n\n",
        "code_str": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr",
        "is_deleted": 1,
        "code_str_deleted": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n    #begin to write code\n",
        "code_str_generate": "def count_integer(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for i in list1:\n    #begin to write code\n"
    },
    {
        "task_id": 254,
        "python_prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "test": "\nassert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']\n",
        "code_str": "import re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n return list",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n #begin to write code\n",
        "code_str_generate": "import re\ndef words_ae(text):\n\n '''\n progame language:python\n description:Write a function to find all words starting with 'a' or 'e' in a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list = re.findall(r\"[ae]\\w+\", text)\n #begin to write code\n"
    },
    {
        "task_id": 255,
        "python_prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "test": "\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n\n",
        "code_str": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n",
        "is_deleted": 1,
        "code_str_deleted": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    #begin to write code\n",
        "code_str_generate": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 256,
        "python_prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "test": "\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n\n",
        "code_str": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr",
        "is_deleted": 1,
        "code_str_deleted": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n        #begin to write code\n",
        "code_str_generate": "def count_Primes_nums(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n        #begin to write code\n"
    },
    {
        "task_id": 257,
        "python_prompt": "Write a function to swap two numbers.",
        "test": "\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n\n",
        "code_str": "def swap_numbers(a,b):\n temp = a\n a = b\n b = temp\n return (a,b)",
        "is_deleted": 1,
        "code_str_deleted": "def swap_numbers(a,b):\n temp = a\n a = b\n #begin to write code\n",
        "code_str_generate": "def swap_numbers(a,b):\n\n '''\n progame language:python\n description:Write a function to swap two numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n temp = a\n a = b\n #begin to write code\n"
    },
    {
        "task_id": 258,
        "python_prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "test": "\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2\n\n",
        "code_str": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd",
        "is_deleted": 1,
        "code_str_deleted": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   #begin to write code\n",
        "code_str_generate": "def count_odd(array_nums):\n\n   '''\n   progame language:python\n   description:Write a function to find number of odd elements in the given list using lambda function.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   #begin to write code\n"
    },
    {
        "task_id": 259,
        "python_prompt": "Write a function to maximize the given two tuples.",
        "test": "\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n\n",
        "code_str": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def maximize_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n  #begin to write code\n",
        "code_str_generate": "def maximize_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to maximize the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 260,
        "python_prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "test": "\nassert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n\n",
        "code_str": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
        "is_deleted": 1,
        "code_str_deleted": "def newman_prime(n):\n\tif n == 0 or n == 1: \n\t#begin to write code\n",
        "code_str_generate": "def newman_prime(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif n == 0 or n == 1: \n\t#begin to write code\n"
    },
    {
        "task_id": 261,
        "python_prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "test": "\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n\n",
        "code_str": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def division_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 262,
        "python_prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "test": "\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\n",
        "code_str": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]",
        "is_deleted": 1,
        "code_str_deleted": "def split_two_parts(list1, L):\n    #begin to write code\n",
        "code_str_generate": "def split_two_parts(list1, L):\n\n    '''\n    progame language:python\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 263,
        "python_prompt": "Write a function to merge two dictionaries.",
        "test": "\nassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}\n\n",
        "code_str": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d",
        "is_deleted": 1,
        "code_str_deleted": "def merge_dict(d1,d2):\n d = d1.copy()\n #begin to write code\n",
        "code_str_generate": "def merge_dict(d1,d2):\n\n '''\n progame language:python\n description:Write a function to merge two dictionaries.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n d = d1.copy()\n #begin to write code\n"
    },
    {
        "task_id": 264,
        "python_prompt": "Write a function to calculate a dog's age in dog's years.",
        "test": "\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n\n",
        "code_str": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age",
        "is_deleted": 1,
        "code_str_deleted": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n #begin to write code\n",
        "code_str_generate": "def dog_age(h_age):\n\n '''\n progame language:python\n description:Write a function to calculate a dog's age in dog's years.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n #begin to write code\n"
    },
    {
        "task_id": 265,
        "python_prompt": "Write a function to split a list for every nth element.",
        "test": "\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] \n\n",
        "code_str": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]",
        "is_deleted": 1,
        "code_str_deleted": "def list_split(S, step):\n    #begin to write code\n",
        "code_str_generate": "def list_split(S, step):\n\n    '''\n    progame language:python\n    description:Write a function to split a list for every nth element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 266,
        "python_prompt": "Write a function to find the lateral surface area of a cube.",
        "test": "\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n\n",
        "code_str": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA",
        "is_deleted": 1,
        "code_str_deleted": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  #begin to write code\n",
        "code_str_generate": "def lateralsurface_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 4 * (l * l)\n  #begin to write code\n"
    },
    {
        "task_id": 267,
        "python_prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "test": "\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n\n",
        "code_str": "def square_Sum(n):  \n    return int(n*(4*n*n-1)/3) ",
        "is_deleted": 1,
        "code_str_deleted": "def square_Sum(n):\n    #begin to write code\n",
        "code_str_generate": "def square_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 268,
        "python_prompt": "Write a function to find the n'th star number.",
        "test": "\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n\n",
        "code_str": "def find_star_num(n): \n\treturn (6 * n * (n - 1) + 1) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_star_num(n):\n    #begin to write code\n",
        "code_str_generate": "def find_star_num(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the n'th star number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 269,
        "python_prompt": "Write a function to find the ascii value of a character.",
        "test": "\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n\n",
        "code_str": "def ascii_value(k):\n  ch=k\n  return ord(ch)",
        "is_deleted": 1,
        "code_str_deleted": "def ascii_value(k):\n  ch=k\n  #begin to write code\n",
        "code_str_generate": "def ascii_value(k):\n\n  '''\n  progame language:python\n  description:Write a function to find the ascii value of a character.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ch=k\n  #begin to write code\n"
    },
    {
        "task_id": 270,
        "python_prompt": "Write a python function to find the sum of even numbers at even positions.",
        "test": "\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12\n\n",
        "code_str": "def sum_even_and_even_index(arr,n):  \n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "def sum_even_and_even_index(arr,n):\n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n    #begin to write code\n",
        "code_str_generate": "def sum_even_and_even_index(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0\n    sum = 0\n    for i in range(0,n,2): \n    #begin to write code\n"
    },
    {
        "task_id": 271,
        "python_prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "test": "\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n\n",
        "code_str": "def even_Power_Sum(n): \n    sum = 0; \n    for i in range(1,n+1): \n        j = 2*i; \n        sum = sum + (j*j*j*j*j); \n    return sum; ",
        "is_deleted": 1,
        "code_str_deleted": "def even_Power_Sum(n):\n    sum = 0; \n    for i in range(1,n+1): \n    #begin to write code\n",
        "code_str_generate": "def even_Power_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of fifth power of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0; \n    for i in range(1,n+1): \n    #begin to write code\n"
    },
    {
        "task_id": 272,
        "python_prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "test": "\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\n",
        "code_str": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def rear_extract(test_list):\n  res = [lis[-1] for lis in test_list]\n  #begin to write code\n",
        "code_str_generate": "def rear_extract(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to perfom the rear element extraction from list of tuples records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [lis[-1] for lis in test_list]\n  #begin to write code\n"
    },
    {
        "task_id": 273,
        "python_prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "test": "\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\n",
        "code_str": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def substract_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 274,
        "python_prompt": "Write a python function to find sum of even index binomial coefficients.",
        "test": "\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n\n",
        "code_str": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ",
        "is_deleted": 1,
        "code_str_deleted": "import math  \ndef even_binomial_Coeff_Sum( n):\n    #begin to write code\n",
        "code_str_generate": "import math  \ndef even_binomial_Coeff_Sum( n):\n\n    '''\n    progame language:python\n    description:Write a python function to find sum of even index binomial coefficients.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 275,
        "python_prompt": "Write a python function to find the position of the last removed element from the given array.",
        "test": "\nassert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4\n\n",
        "code_str": "import math as mt \ndef get_Position(a,n,m): \n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n        if (maxx < a[i]): \n            maxx = a[i] \n            result = i \n    return result + 1",
        "is_deleted": 1,
        "code_str_deleted": "import math as mt \ndef get_Position(a,n,m):\n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n",
        "code_str_generate": "import math as mt \ndef get_Position(a,n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find the position of the last removed element from the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(n): \n        a[i] = (a[i] // m + (a[i] % m != 0))  \n    result,maxx = -1,-1\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n"
    },
    {
        "task_id": 276,
        "python_prompt": "Write a function to find the volume of a cylinder.",
        "test": "\nassert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004\n\n",
        "code_str": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume",
        "is_deleted": 1,
        "code_str_deleted": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  #begin to write code\n",
        "code_str_generate": "def volume_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=3.1415*r*r*h\n  #begin to write code\n"
    },
    {
        "task_id": 277,
        "python_prompt": "Write a function to filter a dictionary based on values.",
        "test": "\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n\n",
        "code_str": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result",
        "is_deleted": 1,
        "code_str_deleted": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n",
        "code_str_generate": "def dict_filter(dict,n):\n\n '''\n progame language:python\n description:Write a function to filter a dictionary based on values.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n"
    },
    {
        "task_id": 278,
        "python_prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "test": "\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n\n",
        "code_str": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return (count) ",
        "is_deleted": 1,
        "code_str_deleted": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n    #begin to write code\n",
        "code_str_generate": "def count_first_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the element count that occurs before the record in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n    #begin to write code\n"
    },
    {
        "task_id": 279,
        "python_prompt": "Write a function to find the nth decagonal number.",
        "test": "\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n\n",
        "code_str": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n ",
        "is_deleted": 1,
        "code_str_deleted": "def is_num_decagonal(n):\n    #begin to write code\n",
        "code_str_generate": "def is_num_decagonal(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth decagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 280,
        "python_prompt": "Write a function to search an element in the given array by using sequential search.",
        "test": "\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\n",
        "code_str": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos",
        "is_deleted": 1,
        "code_str_deleted": "def sequential_search(dlist, item):\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n        #begin to write code\n",
        "code_str_generate": "def sequential_search(dlist, item):\n\n    '''\n    progame language:python\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n        #begin to write code\n"
    },
    {
        "task_id": 281,
        "python_prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "test": "\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n\n",
        "code_str": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True",
        "is_deleted": 1,
        "code_str_deleted": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n    #begin to write code\n",
        "code_str_generate": "def all_unique(test_list):\n\n    '''\n    progame language:python\n    description:Write a python function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(test_list) > len(set(test_list)):\n    #begin to write code\n"
    },
    {
        "task_id": 282,
        "python_prompt": "Write a function to substaract two lists using map and lambda function.",
        "test": "\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n\n",
        "code_str": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)",
        "is_deleted": 1,
        "code_str_deleted": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n",
        "code_str_generate": "def sub_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to substaract two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n"
    },
    {
        "task_id": 283,
        "python_prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "test": "\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n\n",
        "code_str": "def validate(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > i): \n                return False\n            temp //= 10; \n    return True",
        "is_deleted": 1,
        "code_str_deleted": "def validate(n):\n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n            #begin to write code\n",
        "code_str_generate": "def validate(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n            #begin to write code\n"
    },
    {
        "task_id": 284,
        "python_prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "test": "\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n\n",
        "code_str": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element",
        "is_deleted": 1,
        "code_str_deleted": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  #begin to write code\n",
        "code_str_generate": "def check_element(list,element):\n\n  '''\n  progame language:python\n  description:Write a function to check whether all items of a list are equal to a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  check_element=all(v== element for v in list)\n  #begin to write code\n"
    },
    {
        "task_id": 285,
        "python_prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "test": "\nassert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')\n\n",
        "code_str": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match_two_three(text):\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_match_two_three(text):\n\n        '''\n        progame language:python\n        description:Write a function that matches a string that has an a followed by two to three 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = 'ab{2,3}'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 286,
        "python_prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "test": "\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n\n",
        "code_str": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far",
        "is_deleted": 1,
        "code_str_deleted": "def max_sub_array_sum_repeated(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\t#begin to write code\n",
        "code_str_generate": "def max_sub_array_sum_repeated(a, n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\t#begin to write code\n"
    },
    {
        "task_id": 287,
        "python_prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
        "test": "\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n\n",
        "code_str": "def square_Sum(n):  \n    return int(2*n*(n+1)*(2*n+1)/3)",
        "is_deleted": 1,
        "code_str_deleted": "def square_Sum(n):\n    #begin to write code\n",
        "code_str_generate": "def square_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of squares of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 288,
        "python_prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "test": "\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1\n\n",
        "code_str": "def modular_inverse(arr, N, P):\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t\tif ((arr[i] * arr[i]) % P == 1):\n\t\t\tcurrent_element = current_element + 1\n\treturn current_element",
        "is_deleted": 1,
        "code_str_deleted": "def modular_inverse(arr, N, P):\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t#begin to write code\n",
        "code_str_generate": "def modular_inverse(arr, N, P):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tcurrent_element = 0\n\tfor i in range(0, N):\n\t#begin to write code\n"
    },
    {
        "task_id": 289,
        "python_prompt": "Write a python function to calculate the number of odd days in a given year.",
        "test": "\nassert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2\n\n",
        "code_str": "def odd_Days(N): \n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        leap -= hund1 \n    if (hund4): \n        ordd -= hund4 \n        leap += hund4 \n    days = ordd + leap * 2\n    odd = days % 7\n    return odd ",
        "is_deleted": 1,
        "code_str_deleted": "def odd_Days(N):\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        #begin to write code\n",
        "code_str_generate": "def odd_Days(N):\n\n    '''\n    progame language:python\n    description:Write a python function to calculate the number of odd days in a given year.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    hund1 = N // 100\n    hund4 = N // 400\n    leap = N >> 2\n    ordd = N - leap \n    if (hund1): \n        ordd += hund1 \n        #begin to write code\n"
    },
    {
        "task_id": 290,
        "python_prompt": "Write a function to find the list of lists with maximum length.",
        "test": "\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n\n",
        "code_str": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    max_list = max((x) for x in   list1)\n    return(max_length, max_list)",
        "is_deleted": 1,
        "code_str_deleted": "def max_length(list1):\n    max_length = max(len(x) for x in  list1 )  \n    #begin to write code\n",
        "code_str_generate": "def max_length(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_length = max(len(x) for x in  list1 )  \n    #begin to write code\n"
    },
    {
        "task_id": 291,
        "python_prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "test": "\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228\n\n",
        "code_str": "def count_no_of_ways(n, k): \n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\tdp[2] = k * k\t \n\tfor i in range(3,n+1): \n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \n\treturn dp[n]",
        "is_deleted": 1,
        "code_str_deleted": "def count_no_of_ways(n, k):\n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\t#begin to write code\n",
        "code_str_generate": "def count_no_of_ways(n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdp = [0] * (n + 1) \n\ttotal = k \n\tmod = 1000000007\n\tdp[1] = k \n\t#begin to write code\n"
    },
    {
        "task_id": 292,
        "python_prompt": "Write a python function to find quotient of two numbers.",
        "test": "\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n\n",
        "code_str": "def find(n,m):  \n    q = n//m \n    return (q)",
        "is_deleted": 1,
        "code_str_deleted": "def find(n,m):\n    q = n//m \n    #begin to write code\n",
        "code_str_generate": "def find(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    q = n//m \n    #begin to write code\n"
    },
    {
        "task_id": 293,
        "python_prompt": "Write a function to find the third side of a right angled triangle.",
        "test": "\nassert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685\n\n",
        "code_str": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n",
        "code_str_generate": "import math\ndef otherside_rightangle(w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the third side of a right angled triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n"
    },
    {
        "task_id": 294,
        "python_prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "test": "\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n\n",
        "code_str": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)",
        "is_deleted": 1,
        "code_str_deleted": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n",
        "code_str_generate": "def max_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n"
    },
    {
        "task_id": 295,
        "python_prompt": "Write a function to return the sum of all divisors of a number.",
        "test": "\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\n\n",
        "code_str": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)",
        "is_deleted": 1,
        "code_str_deleted": "def sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n    #begin to write code\n",
        "code_str_generate": "def sum_div(number):\n\n    '''\n    progame language:python\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    divisors = [1]\n    for i in range(2, number):\n    #begin to write code\n"
    },
    {
        "task_id": 296,
        "python_prompt": "Write a python function to count inversions in an array.",
        "test": "\nassert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3\n\n",
        "code_str": "def get_Inv_Count(arr,n): \n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ",
        "is_deleted": 1,
        "code_str_deleted": "def get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n        #begin to write code\n",
        "code_str_generate": "def get_Inv_Count(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n        #begin to write code\n"
    },
    {
        "task_id": 297,
        "python_prompt": "Write a function to flatten a given nested list structure.",
        "test": "\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\n",
        "code_str": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        if c_num: stack.append(c_num)\n        if isinstance(next, list):\n            if next: stack.append(list(next))\n        else: result_list.append(next)\n    result_list.reverse()\n    return result_list ",
        "is_deleted": 1,
        "code_str_deleted": "def flatten_list(list1):\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        #begin to write code\n",
        "code_str_generate": "def flatten_list(list1):\n\n    '''\n    progame language:python\n    description:Write a function to flatten a given nested list structure.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result_list = []\n    if not list1: return result_list\n    stack = [list(list1)]\n    while stack:\n        c_num = stack.pop()\n        next = c_num.pop()\n        #begin to write code\n"
    },
    {
        "task_id": 298,
        "python_prompt": "Write a function to find the nested list elements which are present in another list.",
        "test": "\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n\n",
        "code_str": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n",
        "code_str_generate": "def intersection_nested_lists(l1, l2):\n\n    '''\n    progame language:python\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n"
    },
    {
        "task_id": 299,
        "python_prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "test": "\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n\n",
        "code_str": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])",
        "is_deleted": 1,
        "code_str_deleted": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n    #begin to write code\n",
        "code_str_generate": "from collections import defaultdict\n\n    '''\n    progame language:python\n    description:Write a function to calculate the maximum aggregate from the list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n    #begin to write code\n"
    },
    {
        "task_id": 300,
        "python_prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "test": "\nassert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0\n\n",
        "code_str": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res ",
        "is_deleted": 1,
        "code_str_deleted": "def count_binary_seq(n):\n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t#begin to write code\n",
        "code_str_generate": "def count_binary_seq(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t#begin to write code\n"
    },
    {
        "task_id": 301,
        "python_prompt": "Write a function to find the depth of a dictionary.",
        "test": "\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n\n",
        "code_str": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "is_deleted": 1,
        "code_str_deleted": "def dict_depth(d):\n    if isinstance(d, dict):\n    #begin to write code\n",
        "code_str_generate": "def dict_depth(d):\n\n    '''\n    progame language:python\n    description:Write a function to find the depth of a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if isinstance(d, dict):\n    #begin to write code\n"
    },
    {
        "task_id": 302,
        "python_prompt": "Write a python function to find the most significant bit number which is also a set bit.",
        "test": "\nassert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16\n\n",
        "code_str": "def set_Bit_Number(n): \n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    while (n > 0): \n        n = int(n / 2); \n        msb += 1; \n    return (1 << msb)",
        "is_deleted": 1,
        "code_str_deleted": "def set_Bit_Number(n):\n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    #begin to write code\n",
        "code_str_generate": "def set_Bit_Number(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the most significant bit number which is also a set bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n == 0): \n        return 0; \n    msb = 0; \n    n = int(n / 2); \n    #begin to write code\n"
    },
    {
        "task_id": 303,
        "python_prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
        "test": "\nassert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True\n\n",
        "code_str": "import sys \ndef solve(a,n):   \n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n            return False  \n        mx = max(mx,a[j - 1])    \n    return True",
        "is_deleted": 1,
        "code_str_deleted": "import sys \ndef solve(a,n):\n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n        #begin to write code\n",
        "code_str_generate": "import sys \ndef solve(a,n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the count of inversion of two types are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mx = -sys.maxsize - 1\n    for j in range(1,n):  \n        if (mx > a[j]):  \n        #begin to write code\n"
    },
    {
        "task_id": 304,
        "python_prompt": "Write a python function to find element at a given index after number of rotations.",
        "test": "\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n\n",
        "code_str": "def find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Element(arr,ranges,rotations,index) :\n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n        #begin to write code\n",
        "code_str_generate": "def find_Element(arr,ranges,rotations,index) :\n\n    '''\n    progame language:python\n    description:Write a python function to find element at a given index after number of rotations.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n        #begin to write code\n"
    },
    {
        "task_id": 305,
        "python_prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "test": "\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n\n",
        "code_str": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef start_withp(words):\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        #begin to write code\n",
        "code_str_generate": "import re\ndef start_withp(words):\n\n '''\n progame language:python\n description:Write a function to match two words from a list of words starting with letter 'p'.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        #begin to write code\n"
    },
    {
        "task_id": 306,
        "python_prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "test": "\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\n",
        "code_str": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]",
        "is_deleted": 1,
        "code_str_deleted": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t#begin to write code\n",
        "code_str_generate": "def max_sum_increasing_subseq(a, n, index, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdp = [[0 for i in range(n)] \n\t\t\tfor i in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t#begin to write code\n"
    },
    {
        "task_id": 307,
        "python_prompt": "Write a function to get a colon of a tuple.",
        "test": "\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n\n",
        "code_str": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon",
        "is_deleted": 1,
        "code_str_deleted": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  #begin to write code\n",
        "code_str_generate": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n\n  '''\n  progame language:python\n  description:Write a function to get a colon of a tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  tuplex_colon = deepcopy(tuplex)\n  #begin to write code\n"
    },
    {
        "task_id": 308,
        "python_prompt": "Write a function to find the specified number of largest products from two given lists.",
        "test": "\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n\n",
        "code_str": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    #begin to write code\n",
        "code_str_generate": "def large_product(nums1, nums2, N):\n\n    '''\n    progame language:python\n    description:Write a function to find the specified number of largest products from two given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    #begin to write code\n"
    },
    {
        "task_id": 309,
        "python_prompt": "Write a python function to find the maximum of two numbers.",
        "test": "\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n\n",
        "code_str": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ",
        "is_deleted": 1,
        "code_str_deleted": "def maximum(a,b):\n    if a >= b: \n        return a \n        #begin to write code\n",
        "code_str_generate": "def maximum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if a >= b: \n        return a \n        #begin to write code\n"
    },
    {
        "task_id": 310,
        "python_prompt": "Write a function to convert a given string to a tuple.",
        "test": "\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n\n",
        "code_str": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n",
        "code_str_generate": "def string_to_tuple(str1):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n"
    },
    {
        "task_id": 311,
        "python_prompt": "Write a python function to set the left most unset bit.",
        "test": "\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n\n",
        "code_str": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1; temp>>=1\n    return (n | (1 << (pos))) ",
        "is_deleted": 1,
        "code_str_deleted": "def set_left_most_unset_bit(n):\n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n    #begin to write code\n",
        "code_str_generate": "def set_left_most_unset_bit(n):\n\n    '''\n    progame language:python\n    description:Write a python function to set the left most unset bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n    #begin to write code\n"
    },
    {
        "task_id": 312,
        "python_prompt": "Write a function to find the volume of a cone.",
        "test": "\nassert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521\n\n",
        "code_str": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  return volume",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef volume_cone(r,h):\n  volume = (1.0/3) * math.pi * r * r * h\n  #begin to write code\n",
        "code_str_generate": "import math\ndef volume_cone(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cone.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume = (1.0/3) * math.pi * r * r * h\n  #begin to write code\n"
    },
    {
        "task_id": 313,
        "python_prompt": "Write a python function to print positive numbers in a list.",
        "test": "\nassert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1\n\n",
        "code_str": "def pos_nos(list1):\n  for num in list1: \n    if num >= 0: \n       return num ",
        "is_deleted": 1,
        "code_str_deleted": "def pos_nos(list1):\n  for num in list1: \n  #begin to write code\n",
        "code_str_generate": "def pos_nos(list1):\n\n  '''\n  progame language:python\n  description:Write a python function to print positive numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for num in list1: \n  #begin to write code\n"
    },
    {
        "task_id": 314,
        "python_prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "test": "\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n\n",
        "code_str": "def max_sum_rectangular_grid(grid, n) : \n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t\texcl_new = max(excl, incl) \n\t\tincl = excl + max(grid[0][i], grid[1][i]) \n\t\texcl = excl_new \n\treturn max(excl, incl)",
        "is_deleted": 1,
        "code_str_deleted": "def max_sum_rectangular_grid(grid, n) :\n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t#begin to write code\n",
        "code_str_generate": "def max_sum_rectangular_grid(grid, n) :\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tincl = max(grid[0][0], grid[1][0]) \n\texcl = 0\n\tfor i in range(1, n) : \n\t#begin to write code\n"
    },
    {
        "task_id": 315,
        "python_prompt": "Write a python function to find the first maximum length of even word.",
        "test": "\nassert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"\n\n",
        "code_str": "def find_Max_Len_Even(str): \n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n            currlen = 0 \n        else : \n            currlen += 1\n        i += 1\n    if (currlen % 2 == 0): \n        if (maxlen < currlen): \n            maxlen = currlen \n            st = i - currlen \n    if (st == -1): \n        return \"-1\" \n    return str[st: st + maxlen] ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Max_Len_Even(str):\n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n                    #begin to write code\n",
        "code_str_generate": "def find_Max_Len_Even(str):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first maximum length of even word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    n = len(str) \n    i = 0\n    currlen = 0\n    maxlen = 0\n    st = -1\n    while (i < n): \n        if (str[i] == ' '): \n            if (currlen % 2 == 0): \n                if (maxlen < currlen): \n                    maxlen = currlen \n                    st = i - currlen \n                    #begin to write code\n"
    },
    {
        "task_id": 316,
        "python_prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "test": "\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n\n",
        "code_str": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result ",
        "is_deleted": 1,
        "code_str_deleted": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            #begin to write code\n",
        "code_str_generate": "def find_last_occurrence(A, x):\n\n    '''\n    progame language:python\n    description:Write a function to find the index of the last occurrence of a given number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            #begin to write code\n"
    },
    {
        "task_id": 317,
        "python_prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "test": "\nassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']\n\n",
        "code_str": "from itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: \n                return [len(el), el[0]]\n            else: \n                return el[0]\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
        "is_deleted": 1,
        "code_str_deleted": "from itertools import groupby\ndef modified_encode(alist):\n        def ctr_ele(el):\n            if len(el)>1: \n                return [len(el), el[0]]\n                #begin to write code\n",
        "code_str_generate": "from itertools import groupby\ndef modified_encode(alist):\n\n        '''\n        progame language:python\n        description:Write a function to reflect the modified run-length encoding from a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        def ctr_ele(el):\n            if len(el)>1: \n                return [len(el), el[0]]\n                #begin to write code\n"
    },
    {
        "task_id": 318,
        "python_prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "test": "\nassert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0\n\n",
        "code_str": "def max_volume (s): \n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        for j in range(s): \n            k = s - i - j \n            maxvalue = max(maxvalue, i * j * k)         \n    return maxvalue ",
        "is_deleted": 1,
        "code_str_deleted": "def max_volume (s):\n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        #begin to write code\n",
        "code_str_generate": "def max_volume (s):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxvalue = 0\n    i = 1\n    for i in range(s - 1): \n        j = 1\n        #begin to write code\n"
    },
    {
        "task_id": 319,
        "python_prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "test": "\nassert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']\n\n",
        "code_str": "import re\ndef find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef find_long_word(text):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef find_long_word(text):\n\n    '''\n    progame language:python\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 320,
        "python_prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "test": "\nassert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270\n\n",
        "code_str": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n        sumofsquares += num * num\n        squareofsum += num\n    squareofsum = squareofsum ** 2\n    return squareofsum - sumofsquares",
        "is_deleted": 1,
        "code_str_deleted": "def sum_difference(n):\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n    #begin to write code\n",
        "code_str_generate": "def sum_difference(n):\n\n    '''\n    progame language:python\n    description:Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sumofsquares = 0\n    squareofsum = 0\n    for num in range(1, n+1):\n    #begin to write code\n"
    },
    {
        "task_id": 321,
        "python_prompt": "Write a function to find the demlo number for the given number.",
        "test": "\nassert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'\n\n",
        "code_str": "def find_demlo(s): \n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t\tres = res + str(i) \n\tfor i in range(l-1,0,-1): \n\t\tres = res + str(i) \n\treturn res \t",
        "is_deleted": 1,
        "code_str_deleted": "def find_demlo(s):\n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t#begin to write code\n",
        "code_str_generate": "def find_demlo(s):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the demlo number for the given number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tl = len(s) \n\tres = \"\" \n\tfor i in range(1,l+1): \n\t#begin to write code\n"
    },
    {
        "task_id": 322,
        "python_prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "test": "\nassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]\n\n",
        "code_str": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result",
        "is_deleted": 1,
        "code_str_deleted": "def position_min(list1):\n    min_val = min(list1)\n    #begin to write code\n",
        "code_str_generate": "def position_min(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_val = min(list1)\n    #begin to write code\n"
    },
    {
        "task_id": 323,
        "python_prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "test": "\nassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n\n",
        "code_str": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index-out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = - 1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\n\t\t\t\tout_of_place = index\n\treturn arr",
        "is_deleted": 1,
        "code_str_deleted": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t#begin to write code\n",
        "code_str_generate": "def right_rotate(arr, n, out_of_place, cur):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to re-arrange the given array in alternating positive and negative items.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\ndef re_arrange(arr, n):\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 324,
        "python_prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "test": "\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)\n\n",
        "code_str": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return ((sum1),(sum2)) ",
        "is_deleted": 1,
        "code_str_deleted": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n    #begin to write code\n",
        "code_str_generate": "def sum_of_alternates(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to extract the sum of alternate chains of tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n    #begin to write code\n"
    },
    {
        "task_id": 325,
        "python_prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "test": "\nassert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1\n\n",
        "code_str": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        if temp > n:\n            break\n        else:\n            res = min(res,1 + get_Min_Squares(n  - temp)) \n    return res;",
        "is_deleted": 1,
        "code_str_deleted": "def get_Min_Squares(n):\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        #begin to write code\n",
        "code_str_generate": "def get_Min_Squares(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum number of squares whose sum is equal to a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if n <= 3:\n        return n;\n    res = n \n    for x in range(1,n + 1):\n        temp = x * x;\n        #begin to write code\n"
    },
    {
        "task_id": 326,
        "python_prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "test": "\nassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'\n\n",
        "code_str": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "from collections import defaultdict \ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n",
        "code_str_generate": "from collections import defaultdict \n\n    '''\n    progame language:python\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n"
    },
    {
        "task_id": 327,
        "python_prompt": "Write a function to print check if the triangle is isosceles or not.",
        "test": "\nassert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False\n\n",
        "code_str": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n\t   #begin to write code\n",
        "code_str_generate": "def check_isosceles(x,y,z):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is isosceles or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if x==y or y==z or z==x:\n\t   return True\n\t   #begin to write code\n"
    },
    {
        "task_id": 328,
        "python_prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "test": "\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n\n",
        "code_str": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  return result",
        "is_deleted": 1,
        "code_str_deleted": "def rotate_left(list1,m,n):\n  result =  list1[m:]+list1[:n]\n  #begin to write code\n",
        "code_str_generate": "def rotate_left(list1,m,n):\n\n  '''\n  progame language:python\n  description:Write a function to rotate a given list by specified number of items to the left direction.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result =  list1[m:]+list1[:n]\n  #begin to write code\n"
    },
    {
        "task_id": 329,
        "python_prompt": "Write a python function to count negative numbers in a list.",
        "test": "\nassert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2\n\n",
        "code_str": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ",
        "is_deleted": 1,
        "code_str_deleted": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n  #begin to write code\n",
        "code_str_generate": "def neg_count(list):\n\n  '''\n  progame language:python\n  description:Write a python function to count negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  neg_count= 0\n  for num in list: \n  #begin to write code\n"
    },
    {
        "task_id": 330,
        "python_prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "test": "\nassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']\n\n",
        "code_str": "import re\ndef find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef find_char(text):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef find_char(text):\n\n    '''\n    progame language:python\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 331,
        "python_prompt": "Write a python function to count unset bits of a given number.",
        "test": "\nassert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1\n\n",
        "code_str": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ",
        "is_deleted": 1,
        "code_str_deleted": "def count_unset_bits(n):\n    count = 0\n    x = 1\n    while(x < n + 1): \n    #begin to write code\n",
        "code_str_generate": "def count_unset_bits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    x = 1\n    while(x < n + 1): \n    #begin to write code\n"
    },
    {
        "task_id": 332,
        "python_prompt": "Write a function to count character frequency of a given string.",
        "test": "\nassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n\n",
        "code_str": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict",
        "is_deleted": 1,
        "code_str_deleted": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n",
        "code_str_generate": "def char_frequency(str1):\n\n    '''\n    progame language:python\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n"
    },
    {
        "task_id": 333,
        "python_prompt": "Write a python function to sort a list according to the second element in sublist.",
        "test": "\nassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n\n",
        "code_str": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ",
        "is_deleted": 1,
        "code_str_deleted": "def Sort(sub_li):\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n",
        "code_str_generate": "def Sort(sub_li):\n\n    '''\n    progame language:python\n    description:Write a python function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n"
    },
    {
        "task_id": 334,
        "python_prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "test": "\nassert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True\n\n",
        "code_str": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n    else: \n        return True        ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Validity(a,b,c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n        #begin to write code\n",
        "code_str_generate": "def check_Validity(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n        #begin to write code\n"
    },
    {
        "task_id": 335,
        "python_prompt": "Write a function to find the sum of arithmetic progression.",
        "test": "\nassert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34\n\n",
        "code_str": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total",
        "is_deleted": 1,
        "code_str_deleted": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  #begin to write code\n",
        "code_str_generate": "def ap_sum(a,n,d):\n\n  '''\n  progame language:python\n  description:Write a function to find the sum of arithmetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  #begin to write code\n"
    },
    {
        "task_id": 336,
        "python_prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "test": "\nassert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False\n\n",
        "code_str": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n",
        "code_str_generate": "def check_monthnum(monthname1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 28 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n"
    },
    {
        "task_id": 337,
        "python_prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "test": "\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')\n\n",
        "code_str": "import re\ndef text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return 'Not matched!'",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match_word(text):\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_match_word(text):\n\n        '''\n        progame language:python\n        description:Write a function that matches a word at the end of a string, with optional punctuation.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = '\\w+\\S*$'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 338,
        "python_prompt": "Write a python function to count the number of substrings with same first and last characters.",
        "test": "\nassert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3\n\n",
        "code_str": "def check_Equality(s): \n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    for i in range(n):\n        for j in range(1,n-i+1): \n            if (check_Equality(s[i:i+j])): \n                result+=1; \n    return result; ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Equality(s):\n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    #begin to write code\n",
        "code_str_generate": "def check_Equality(s):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of substrings with same first and last characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (ord(s[0]) == ord(s[len(s) - 1])); \ndef count_Substring_With_Equal_Ends(s): \n    result = 0; \n    n = len(s); \n    #begin to write code\n"
    },
    {
        "task_id": 339,
        "python_prompt": "Write a python function to find the maximum occuring divisor in an interval.",
        "test": "\nassert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2\n\n",
        "code_str": "def find_Divisor(x,y):  \n    if (x==y): \n        return y \n    return 2",
        "is_deleted": 1,
        "code_str_deleted": "def find_Divisor(x,y):\n    if (x==y): \n    #begin to write code\n",
        "code_str_generate": "def find_Divisor(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum occuring divisor in an interval.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (x==y): \n    #begin to write code\n"
    },
    {
        "task_id": 340,
        "python_prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "test": "\nassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6\n\n",
        "code_str": "def sum_three_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
        "is_deleted": 1,
        "code_str_deleted": "def sum_three_smallest_nums(lst):\n    #begin to write code\n",
        "code_str_generate": "def sum_three_smallest_nums(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 341,
        "python_prompt": "Write a function to convert the given set into ordered tuples.",
        "test": "\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n\n",
        "code_str": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)",
        "is_deleted": 1,
        "code_str_deleted": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  #begin to write code\n",
        "code_str_generate": "def set_to_tuple(s):\n\n  '''\n  progame language:python\n  description:Write a function to convert the given set into ordered tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  t = tuple(sorted(s))\n  #begin to write code\n"
    },
    {
        "task_id": 342,
        "python_prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "test": "\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n\n",
        "code_str": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        high = max(high, list[i][0])\n    while True:\n        top = heappop(pq)\n        low = top.value\n        i = top.list_num\n        j = top.index\n        if high - low < p[1] - p[0]:\n            p = (low, high)\n        if j == len(list[i]) - 1:\n            return p\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\n        high = max(high, list[i][j + 1])",
        "is_deleted": 1,
        "code_str_deleted": "from heapq import heappop, heappush\ndef __init__(self, value, list_num, index):\nclass Node:\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        #begin to write code\n",
        "code_str_generate": "from heapq import heappop, heappush\ndef __init__(self, value, list_num, index):\n\n    '''\n    progame language:python\n    description:Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nclass Node:\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\ndef find_minimum_range(list):\n    high = float('-inf')\n    p = (0, float('inf'))\n    pq = []\n    for i in range(len(list)):\n        heappush(pq, Node(list[i][0], i, 0))\n        #begin to write code\n"
    },
    {
        "task_id": 343,
        "python_prompt": "Write a function to calculate the number of digits and letters in a string.",
        "test": "\nassert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)\n\n",
        "code_str": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n    elif c.isalpha():\n        l=l+1\n    else:\n        pass\n return (l,d)",
        "is_deleted": 1,
        "code_str_deleted": "def dig_let(s):\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n        #begin to write code\n",
        "code_str_generate": "def dig_let(s):\n\n '''\n progame language:python\n description:Write a function to calculate the number of digits and letters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n d=l=0\n for c in s:\n    if c.isdigit():\n        d=d+1\n        #begin to write code\n"
    },
    {
        "task_id": 344,
        "python_prompt": "Write a python function to find number of elements with odd factors in a given range.",
        "test": "\nassert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1\n\n",
        "code_str": "def count_Odd_Squares(n,m): \n    return int(m**0.5) - int((n-1)**0.5) ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Odd_Squares(n,m):\n    #begin to write code\n",
        "code_str_generate": "def count_Odd_Squares(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find number of elements with odd factors in a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 345,
        "python_prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "test": "\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]\n\n",
        "code_str": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n",
        "code_str_generate": "def diff_consecutivenums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n"
    },
    {
        "task_id": 346,
        "python_prompt": "Write a function to find entringer number e(n, k).",
        "test": "\nassert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1\n\n",
        "code_str": "def zigzag(n, k): \n\tif (n == 0 and k == 0): \n\t\treturn 1\n\tif (k == 0): \n\t\treturn 0\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
        "is_deleted": 1,
        "code_str_deleted": "def zigzag(n, k):\n\tif (n == 0 and k == 0): \n\t\treturn 1\n\t\t#begin to write code\n",
        "code_str_generate": "def zigzag(n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find entringer number e(n, k).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (n == 0 and k == 0): \n\t\treturn 1\n\t\t#begin to write code\n"
    },
    {
        "task_id": 347,
        "python_prompt": "Write a python function to count the number of squares in a rectangle.",
        "test": "\nassert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5\n\n",
        "code_str": "def count_Squares(m,n): \n    if (n < m): \n        temp = m \n        m = n \n        n = temp \n    return n * (n + 1) * (3 * m - n + 1) // 6",
        "is_deleted": 1,
        "code_str_deleted": "def count_Squares(m,n):\n    if (n < m): \n        temp = m \n        #begin to write code\n",
        "code_str_generate": "def count_Squares(m,n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n < m): \n        temp = m \n        #begin to write code\n"
    },
    {
        "task_id": 348,
        "python_prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "test": "\nassert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14\n\n",
        "code_str": "def bin_coff(n, r): \n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\treturn val \ndef find_ways(M): \n\tn = M // 2\n\ta = bin_coff(2 * n, n) \n\tb = a // (n + 1) \n\treturn (b) ",
        "is_deleted": 1,
        "code_str_deleted": "def bin_coff(n, r):\n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\t\t#begin to write code\n",
        "code_str_generate": "def bin_coff(n, r):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tval = 1\n\tif (r > (n - r)): \n\t\tr = (n - r) \n\tfor i in range(0, r): \n\t\tval *= (n - i) \n\t\tval //= (i + 1) \n\t\t#begin to write code\n"
    },
    {
        "task_id": 349,
        "python_prompt": "Write a python function to check whether the given string is a binary string or not.",
        "test": "\nassert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"\n\n",
        "code_str": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n        return (\"Yes\") \n    else : \n        return (\"No\") ",
        "is_deleted": 1,
        "code_str_deleted": "def check(string) :\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n    #begin to write code\n",
        "code_str_generate": "def check(string) :\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given string is a binary string or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    p = set(string) \n    s = {'0', '1'} \n    if s == p or p == {'0'} or p == {'1'}: \n    #begin to write code\n"
    },
    {
        "task_id": 350,
        "python_prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "test": "\nassert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2\n\n",
        "code_str": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ",
        "is_deleted": 1,
        "code_str_deleted": "def minimum_Length(s) :\n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n",
        "code_str_generate": "def minimum_Length(s) :\n\n    '''\n    progame language:python\n    description:Write a python function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n"
    },
    {
        "task_id": 351,
        "python_prompt": "Write a python function to find the first element occurring k times in a given array.",
        "test": "\nassert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2\n\n",
        "code_str": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1",
        "is_deleted": 1,
        "code_str_deleted": "def first_Element(arr,n,k):\n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n            #begin to write code\n",
        "code_str_generate": "def first_Element(arr,n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n            #begin to write code\n"
    },
    {
        "task_id": 352,
        "python_prompt": "Write a python function to check whether all the characters in a given string are unique.",
        "test": "\nassert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False\n\n",
        "code_str": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;",
        "is_deleted": 1,
        "code_str_deleted": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n        #begin to write code\n",
        "code_str_generate": "def unique_Characters(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether all the characters in a given string are unique.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n        #begin to write code\n"
    },
    {
        "task_id": 353,
        "python_prompt": "Write a function to remove a specified column from a given nested list.",
        "test": "\nassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]\n\n",
        "code_str": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1",
        "is_deleted": 1,
        "code_str_deleted": "def remove_column(list1, n):\n   for i in list1: \n   #begin to write code\n",
        "code_str_generate": "def remove_column(list1, n):\n\n   '''\n   progame language:python\n   description:Write a function to remove a specified column from a given nested list.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   for i in list1: \n   #begin to write code\n"
    },
    {
        "task_id": 354,
        "python_prompt": "Write a function to find t-nth term of arithemetic progression.",
        "test": "\nassert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16\n\n",
        "code_str": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn",
        "is_deleted": 1,
        "code_str_deleted": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  #begin to write code\n",
        "code_str_generate": "def tn_ap(a,n,d):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of arithemetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  tn = a + (n - 1) * d\n  #begin to write code\n"
    },
    {
        "task_id": 355,
        "python_prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
        "test": "\nassert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0\n\n",
        "code_str": "def count_Rectangles(radius):  \n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n        for b in range(1, 2 * radius): \n            diagnalLengthSquare = (a * a +  b * b)  \n            if (diagnalLengthSquare <= diameterSquare) : \n                rectangles += 1\n    return rectangles ",
        "is_deleted": 1,
        "code_str_deleted": "def count_Rectangles(radius):\n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n    #begin to write code\n",
        "code_str_generate": "def count_Rectangles(radius):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of rectangles in a circle of radius r.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    rectangles = 0 \n    diameter = 2 * radius \n    diameterSquare = diameter * diameter \n    for a in range(1, 2 * radius):  \n    #begin to write code\n"
    },
    {
        "task_id": 356,
        "python_prompt": "Write a function to find the third angle of a triangle using two angles.",
        "test": "\nassert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90\n\n",
        "code_str": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n",
        "is_deleted": 1,
        "code_str_deleted": "def find_angle(a,b):\n c = 180 - (a + b)\n #begin to write code\n",
        "code_str_generate": "def find_angle(a,b):\n\n '''\n progame language:python\n description:Write a function to find the third angle of a triangle using two angles.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n c = 180 - (a + b)\n #begin to write code\n"
    },
    {
        "task_id": 357,
        "python_prompt": "Write a function to find the maximum element of all the given tuple records.",
        "test": "\nassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n\n",
        "code_str": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n",
        "code_str_generate": "def find_max(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to find the maximum element of all the given tuple records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n"
    },
    {
        "task_id": 358,
        "python_prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "test": "\nassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]\n\n",
        "code_str": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)",
        "is_deleted": 1,
        "code_str_deleted": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n",
        "code_str_generate": "def moddiv_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to find modulo division of two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n"
    },
    {
        "task_id": 359,
        "python_prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "test": "\nassert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"\n\n",
        "code_str": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ",
        "is_deleted": 1,
        "code_str_deleted": "def Check_Solution(a,b,c):\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n",
        "code_str_generate": "def Check_Solution(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n"
    },
    {
        "task_id": 360,
        "python_prompt": "Write a function to find the n\u2019th carol number.",
        "test": "\nassert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959\n\n",
        "code_str": "def get_carol(n): \n\tresult = (2**n) - 1\n\treturn result * result - 2",
        "is_deleted": 1,
        "code_str_deleted": "def get_carol(n):\n\tresult = (2**n) - 1\n\t#begin to write code\n",
        "code_str_generate": "def get_carol(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the n\u2019th carol number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tresult = (2**n) - 1\n\t#begin to write code\n"
    },
    {
        "task_id": 361,
        "python_prompt": "Write a function to remove empty lists from a given list of lists.",
        "test": "\nassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n\n",
        "code_str": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty",
        "is_deleted": 1,
        "code_str_deleted": "def remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  #begin to write code\n",
        "code_str_generate": "def remove_empty(list1):\n\n  '''\n  progame language:python\n  description:Write a function to remove empty lists from a given list of lists.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  remove_empty = [x for x in list1 if x]\n  #begin to write code\n"
    },
    {
        "task_id": 362,
        "python_prompt": "Write a python function to find the item with maximum occurrences in a given list.",
        "test": "\nassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1\n\n",
        "code_str": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        #begin to write code\n",
        "code_str_generate": "def max_occurrences(nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        #begin to write code\n"
    },
    {
        "task_id": 363,
        "python_prompt": "Write a function to add the k elements to each element in the tuple.",
        "test": "\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n\n",
        "code_str": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  #begin to write code\n",
        "code_str_generate": "def add_K_element(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to add the k elements to each element in the tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  #begin to write code\n"
    },
    {
        "task_id": 364,
        "python_prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "test": "\nassert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 \n\n",
        "code_str": "def make_flip(ch): \n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t\tflip_count += 1\n\t\texpected = make_flip(expected) \n\treturn flip_count \ndef min_flip_to_make_string_alternate(str): \n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
        "is_deleted": 1,
        "code_str_deleted": "def make_flip(ch):\n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t#begin to write code\n",
        "code_str_generate": "def make_flip(ch):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\treturn '1' if (ch == '0') else '0'\ndef get_flip_with_starting_charcter(str, expected): \n\tflip_count = 0\n\tfor i in range(len( str)): \n\t\tif (str[i] != expected): \n\t\t#begin to write code\n"
    },
    {
        "task_id": 365,
        "python_prompt": "Write a python function to count the number of digits of a given number.",
        "test": "\nassert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7\n\n",
        "code_str": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count",
        "is_deleted": 1,
        "code_str_deleted": "def count_Digit(n):\n    count = 0\n    while n != 0:\n    #begin to write code\n",
        "code_str_generate": "def count_Digit(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    while n != 0:\n    #begin to write code\n"
    },
    {
        "task_id": 366,
        "python_prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "test": "\nassert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6\n\n",
        "code_str": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
        "is_deleted": 1,
        "code_str_deleted": "def adjacent_num_product(list_nums):\n    #begin to write code\n",
        "code_str_generate": "def adjacent_num_product(list_nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 367,
        "python_prompt": "Write a function to check if a binary tree is balanced or not.",
        "test": "\n\nroot = Node(1) \nroot.left = Node(2) \nroot.right = Node(3) \nroot.left.left = Node(4) \nroot.left.right = Node(5) \nroot.left.left.left = Node(8) \nroot1 = Node(1) \nroot1.left = Node(2) \nroot1.right = Node(3) \nroot1.left.left = Node(4) \nroot1.left.right = Node(5) \nroot1.right.left = Node(6) \nroot1.left.left.left = Node(7)\nroot2 = Node(1) \nroot2.left = Node(2) \nroot2.right = Node(3) \nroot2.left.left = Node(4) \nroot2.left.right = Node(5)\nroot2.left.left.left = Node(7)\n    \n    \nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False",
        "code_str": "class Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\ndef is_tree_balanced(root): \n\tif root is None: \n\t\treturn True\n\tlh = get_height(root.left) \n\trh = get_height(root.right) \n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \n\troot.left) is True and is_tree_balanced( root.right) is True: \n\t\treturn True\n\treturn False",
        "is_deleted": 1,
        "code_str_deleted": "def __init__(self, data):\nclass Node: \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t#begin to write code\n",
        "code_str_generate": "def __init__(self, data):\n\n    '''\n    progame language:python\n    description:Write a function to check if a binary tree is balanced or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nclass Node: \n\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\ndef get_height(root): \n\tif root is None: \n\t\treturn 0\n\treturn max(get_height(root.left), get_height(root.right)) + 1\n\t#begin to write code\n"
    },
    {
        "task_id": 368,
        "python_prompt": "Write a function to repeat the given tuple n times.",
        "test": "\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n\n",
        "code_str": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  #begin to write code\n",
        "code_str_generate": "def repeat_tuples(test_tup, N):\n\n  '''\n  progame language:python\n  description:Write a function to repeat the given tuple n times.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = ((test_tup, ) * N)\n  #begin to write code\n"
    },
    {
        "task_id": 369,
        "python_prompt": "Write a function to find the lateral surface area of cuboid",
        "test": "\nassert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800\n\n",
        "code_str": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA",
        "is_deleted": 1,
        "code_str_deleted": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  #begin to write code\n",
        "code_str_generate": "def lateralsurface_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of cuboid\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 2*h*(l+w)\n  #begin to write code\n"
    },
    {
        "task_id": 370,
        "python_prompt": "Write a function to sort a tuple by its float element.",
        "test": "\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] \n\n",
        "code_str": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  return float_sort",
        "is_deleted": 1,
        "code_str_deleted": "def float_sort(price):\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  #begin to write code\n",
        "code_str_generate": "def float_sort(price):\n\n  '''\n  progame language:python\n  description:Write a function to sort a tuple by its float element.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\n  #begin to write code\n"
    },
    {
        "task_id": 371,
        "python_prompt": "Write a function to find the smallest missing element in a sorted array.",
        "test": "\nassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n\n",
        "code_str": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    if A[mid] == mid:\n        return smallest_missing(A, mid + 1, right_element)\n    else:\n        return smallest_missing(A, left_element, mid - 1)",
        "is_deleted": 1,
        "code_str_deleted": "def smallest_missing(A, left_element, right_element):\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    #begin to write code\n",
        "code_str_generate": "def smallest_missing(A, left_element, right_element):\n\n    '''\n    progame language:python\n    description:Write a function to find the smallest missing element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if left_element > right_element:\n        return left_element\n    mid = left_element + (right_element - left_element) // 2\n    #begin to write code\n"
    },
    {
        "task_id": 372,
        "python_prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "test": "\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n",
        "code_str": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\n  return s_result",
        "is_deleted": 1,
        "code_str_deleted": "import heapq as hq\ndef heap_assending(nums):\n  hq.heapify(nums)\n  #begin to write code\n",
        "code_str_generate": "import heapq as hq\ndef heap_assending(nums):\n\n  '''\n  progame language:python\n  description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  hq.heapify(nums)\n  #begin to write code\n"
    },
    {
        "task_id": 373,
        "python_prompt": "Write a function to find the volume of a cuboid.",
        "test": "\nassert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150\n\n",
        "code_str": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume",
        "is_deleted": 1,
        "code_str_deleted": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  #begin to write code\n",
        "code_str_generate": "def volume_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cuboid.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=l*w*h\n  #begin to write code\n"
    },
    {
        "task_id": 374,
        "python_prompt": "Write a function to print all permutations of a given string including duplicates.",
        "test": "\nassert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n\n",
        "code_str": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(str)):\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\n            if new_str not in next_list:\n                next_list.append(new_str)\n    return next_list",
        "is_deleted": 1,
        "code_str_deleted": "def permute_string(str):\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n    #begin to write code\n",
        "code_str_generate": "def permute_string(str):\n\n    '''\n    progame language:python\n    description:Write a function to print all permutations of a given string including duplicates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(str) == 0:\n        return ['']\n    prev_list = permute_string(str[1:len(str)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n    #begin to write code\n"
    },
    {
        "task_id": 375,
        "python_prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "test": "\nassert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218\n\n",
        "code_str": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)",
        "is_deleted": 1,
        "code_str_deleted": "def round_num(n,m):\n    a = (n //m) * m\n    #begin to write code\n",
        "code_str_generate": "def round_num(n,m):\n\n    '''\n    progame language:python\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    a = (n //m) * m\n    #begin to write code\n"
    },
    {
        "task_id": 376,
        "python_prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "test": "\nassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n\n",
        "code_str": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n\t\t\t\telse 'MSP' for ele in test_tup)\n  return (res)",
        "is_deleted": 1,
        "code_str_deleted": "def remove_replica(test_tup):\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n  #begin to write code\n",
        "code_str_generate": "def remove_replica(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  temp = set()\n  res = tuple(ele if ele not in temp and not temp.add(ele) \n  #begin to write code\n"
    },
    {
        "task_id": 377,
        "python_prompt": "Write a python function to remove all occurrences of a character in a given string.",
        "test": "\nassert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"\n\n",
        "code_str": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_Char(s,c) :\n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n    #begin to write code\n",
        "code_str_generate": "def remove_Char(s,c) :\n\n    '''\n    progame language:python\n    description:Write a python function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n    #begin to write code\n"
    },
    {
        "task_id": 378,
        "python_prompt": "Write a python function to shift last element to first position in the given list.",
        "test": "\nassert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]\n\n",
        "code_str": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list",
        "is_deleted": 1,
        "code_str_deleted": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  #begin to write code\n",
        "code_str_generate": "def move_first(test_list):\n\n  '''\n  progame language:python\n  description:Write a python function to shift last element to first position in the given list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  test_list = test_list[-1:] + test_list[:-1]  \n  #begin to write code\n"
    },
    {
        "task_id": 379,
        "python_prompt": "Write a function to find the surface area of a cuboid.",
        "test": "\nassert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350\n\n",
        "code_str": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA",
        "is_deleted": 1,
        "code_str_deleted": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n",
        "code_str_generate": "def surfacearea_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cuboid.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n"
    },
    {
        "task_id": 380,
        "python_prompt": "Write a function to generate a two-dimensional array.",
        "test": "\nassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n\n",
        "code_str": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n    for col in range(colnum):\n        multi_list[row][col]= row*col\n  return multi_list\n",
        "is_deleted": 1,
        "code_str_deleted": "def multi_list(rownum,colnum):\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n  #begin to write code\n",
        "code_str_generate": "def multi_list(rownum,colnum):\n\n  '''\n  progame language:python\n  description:Write a function to generate a two-dimensional array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\n  for row in range(rownum):\n  #begin to write code\n"
    },
    {
        "task_id": 381,
        "python_prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "test": "\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n\n",
        "code_str": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n",
        "code_str_generate": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n"
    },
    {
        "task_id": 382,
        "python_prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "test": "\nassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0\n\n",
        "code_str": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1",
        "is_deleted": 1,
        "code_str_deleted": "def find_rotation_count(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        #begin to write code\n",
        "code_str_generate": "def find_rotation_count(A):\n\n    '''\n    progame language:python\n    description:Write a function to find the number of rotations in a circularly sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        #begin to write code\n"
    },
    {
        "task_id": 383,
        "python_prompt": "Write a python function to toggle all odd bits of a given number.",
        "test": "\nassert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11\n\n",
        "code_str": "def even_bit_toggle_number(n) : \n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n            res = res | (1 << count)      \n        count = count + 1\n        temp >>= 1 \n    return n ^ res ",
        "is_deleted": 1,
        "code_str_deleted": "def even_bit_toggle_number(n) :\n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n        #begin to write code\n",
        "code_str_generate": "def even_bit_toggle_number(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to toggle all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; count = 0; temp = n    \n    while(temp > 0 ) : \n        if (count % 2 == 0) : \n        #begin to write code\n"
    },
    {
        "task_id": 384,
        "python_prompt": "Write a python function to find the frequency of the smallest value in a given array.",
        "test": "\nassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3\n\n",
        "code_str": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ",
        "is_deleted": 1,
        "code_str_deleted": "def frequency_Of_Smallest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n",
        "code_str_generate": "def frequency_Of_Smallest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n"
    },
    {
        "task_id": 385,
        "python_prompt": "Write a function to find the n'th perrin number using recursion.",
        "test": "\nassert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5\n\n",
        "code_str": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n    return 0\n  if (n == 2):\n    return 2 \n  return get_perrin(n - 2) + get_perrin(n - 3)",
        "is_deleted": 1,
        "code_str_deleted": "def get_perrin(n):\n  if (n == 0):\n    return 3\n  if (n == 1):\n  #begin to write code\n",
        "code_str_generate": "def get_perrin(n):\n\n  '''\n  progame language:python\n  description:Write a function to find the n'th perrin number using recursion.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if (n == 0):\n    return 3\n  if (n == 1):\n  #begin to write code\n"
    },
    {
        "task_id": 386,
        "python_prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "test": "\nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1\n\n",
        "code_str": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t\tcount_left += 1\n\t\t\tif imbalance > 0:\n\t\t\t\tswap += imbalance\n\t\t\t\timbalance -= 1\n\t\telif chars[i] == ']':\n\t\t\tcount_right += 1\n\t\t\timbalance = (count_right - count_left) \n\treturn swap",
        "is_deleted": 1,
        "code_str_deleted": "def swap_count(s):\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t#begin to write code\n",
        "code_str_generate": "def swap_count(s):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tchars = s\n\tcount_left = 0\n\tcount_right = 0\n\tswap = 0\n\timbalance = 0; \n\tfor i in range(len(chars)):\n\t\tif chars[i] == '[':\n\t\t#begin to write code\n"
    },
    {
        "task_id": 387,
        "python_prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
        "test": "\nassert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"\n\n",
        "code_str": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ",
        "is_deleted": 1,
        "code_str_deleted": "def even_or_odd(N):\n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        #begin to write code\n",
        "code_str_generate": "def even_or_odd(N):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the hexadecimal number is even or odd.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        #begin to write code\n"
    },
    {
        "task_id": 388,
        "python_prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "test": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n\n",
        "code_str": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ",
        "is_deleted": 1,
        "code_str_deleted": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n",
        "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n"
    },
    {
        "task_id": 389,
        "python_prompt": "Write a function to find the n'th lucas number.",
        "test": "\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n\n",
        "code_str": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_lucas(n):\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n",
        "code_str_generate": "def find_lucas(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the n'th lucas number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n"
    },
    {
        "task_id": 390,
        "python_prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "test": "\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n\n",
        "code_str": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string",
        "is_deleted": 1,
        "code_str_deleted": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n #begin to write code\n",
        "code_str_generate": "def add_string(list,string):\n\n '''\n progame language:python\n description:Write a function to insert a given string at the beginning of all items in a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n add_string=[string.format(i) for i in  list]\n #begin to write code\n"
    },
    {
        "task_id": 391,
        "python_prompt": "Write a function to convert more than one list to nested dictionary.",
        "test": "\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n\n",
        "code_str": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result",
        "is_deleted": 1,
        "code_str_deleted": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     #begin to write code\n",
        "code_str_generate": "def convert_list_dictionary(l1, l2, l3):\n\n     '''\n     progame language:python\n     description:Write a function to convert more than one list to nested dictionary.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     #begin to write code\n"
    },
    {
        "task_id": 392,
        "python_prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "test": "\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n\n",
        "code_str": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[n]",
        "is_deleted": 1,
        "code_str_deleted": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t#begin to write code\n",
        "code_str_generate": "def get_max_sum (n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<n + 1:\n\t#begin to write code\n"
    },
    {
        "task_id": 393,
        "python_prompt": "Write a function to find the list with maximum length using lambda function.",
        "test": "\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n\n",
        "code_str": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    max_list = max(input_list, key = lambda i: len(i))    \n    return(max_length, max_list)",
        "is_deleted": 1,
        "code_str_deleted": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list )   \n    #begin to write code\n",
        "code_str_generate": "def max_length_list(input_list):\n\n    '''\n    progame language:python\n    description:Write a function to find the list with maximum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_length = max(len(x) for x in input_list )   \n    #begin to write code\n"
    },
    {
        "task_id": 394,
        "python_prompt": "Write a function to check if given tuple is distinct or not.",
        "test": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n\n",
        "code_str": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n",
        "code_str_generate": "def check_distinct(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n"
    },
    {
        "task_id": 395,
        "python_prompt": "Write a python function to find the first non-repeated character in a given string.",
        "test": "\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n\n",
        "code_str": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None",
        "is_deleted": 1,
        "code_str_deleted": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n",
        "code_str_generate": "def first_non_repeating_character(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n"
    },
    {
        "task_id": 396,
        "python_prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "test": "\nassert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"\n\n",
        "code_str": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n\tif(re.search(regex, string)): \n\t\treturn \"Valid\" \n\telse: \n\t\treturn \"Invalid\" ",
        "is_deleted": 1,
        "code_str_deleted": "import re  \ndef check_char(string):\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\tif(re.search(regex, string)): \n\t#begin to write code\n",
        "code_str_generate": "import re  \ndef check_char(string):\n\n    '''\n    progame language:python\n    description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\tif(re.search(regex, string)): \n\t#begin to write code\n"
    },
    {
        "task_id": 397,
        "python_prompt": "Write a function to find the median of three specific numbers.",
        "test": "\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n\n",
        "code_str": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median",
        "is_deleted": 1,
        "code_str_deleted": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n",
        "code_str_generate": "def median_numbers(a,b,c):\n\n '''\n progame language:python\n description:Write a function to find the median of three specific numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n"
    },
    {
        "task_id": 398,
        "python_prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "test": "\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n\n",
        "code_str": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
        "is_deleted": 1,
        "code_str_deleted": "def sum_of_digits(nums):\n    #begin to write code\n",
        "code_str_generate": "def sum_of_digits(nums):\n\n    '''\n    progame language:python\n    description:Write a function to compute the sum of digits of each number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 399,
        "python_prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "test": "\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\n",
        "code_str": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def bitwise_xor(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 400,
        "python_prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "test": "\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n\n",
        "code_str": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (res)",
        "is_deleted": 1,
        "code_str_deleted": "def extract_freq(test_list):\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  #begin to write code\n",
        "code_str_generate": "def extract_freq(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  #begin to write code\n"
    },
    {
        "task_id": 401,
        "python_prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "test": "\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\n",
        "code_str": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def add_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n  #begin to write code\n",
        "code_str_generate": "def add_nested_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 402,
        "python_prompt": "Write a function to compute the value of ncr%p.",
        "test": "\nassert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10\n\n",
        "code_str": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ",
        "is_deleted": 1,
        "code_str_deleted": "def ncr_modp(n, r, p):\n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n",
        "code_str_generate": "def ncr_modp(n, r, p):\n\n    '''\n    progame language:python\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n"
    },
    {
        "task_id": 403,
        "python_prompt": "Write a function to check if a url is valid or not using regex.",
        "test": "\nassert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False\n\n",
        "code_str": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n",
        "code_str_generate": "import re\ndef is_valid_URL(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if a url is valid or not using regex.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n"
    },
    {
        "task_id": 404,
        "python_prompt": "Write a python function to find the minimum of two numbers.",
        "test": "\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n\n",
        "code_str": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ",
        "is_deleted": 1,
        "code_str_deleted": "def minimum(a,b):\n    if a <= b: \n        return a \n        #begin to write code\n",
        "code_str_generate": "def minimum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if a <= b: \n        return a \n        #begin to write code\n"
    },
    {
        "task_id": 405,
        "python_prompt": "Write a function to check whether an element exists within a tuple.",
        "test": "\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n\n",
        "code_str": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_tuplex(tuplex,tuple1):\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n",
        "code_str_generate": "def check_tuplex(tuplex,tuple1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether an element exists within a tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n"
    },
    {
        "task_id": 406,
        "python_prompt": "Write a python function to find the parity of a given number.",
        "test": "\nassert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"\n\n",
        "code_str": "def find_Parity(x): \n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    y = y ^ (y >> 16); \n    if (y & 1): \n        return (\"Odd Parity\"); \n    return (\"Even Parity\"); ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Parity(x):\n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    #begin to write code\n",
        "code_str_generate": "def find_Parity(x):\n\n    '''\n    progame language:python\n    description:Write a python function to find the parity of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    y = x ^ (x >> 1); \n    y = y ^ (y >> 2); \n    y = y ^ (y >> 4); \n    y = y ^ (y >> 8); \n    #begin to write code\n"
    },
    {
        "task_id": 407,
        "python_prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "test": "\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120\n\n",
        "code_str": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            z.remove(y)\n            z.sort()\n            nums[i:] = [y] + z\n            return int(\"\".join(nums))\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def rearrange_bigger(n):\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            #begin to write code\n",
        "code_str_generate": "def rearrange_bigger(n):\n\n    '''\n    progame language:python\n    description:Write a function to create the next bigger number by rearranging the digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nums = list(str(n))\n    for i in range(len(nums)-2,-1,-1):\n        if nums[i] < nums[i+1]:\n            z = nums[i:]\n            y = min(filter(lambda x: x > z[0], z))\n            #begin to write code\n"
    },
    {
        "task_id": 408,
        "python_prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "test": "\nassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\n",
        "code_str": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   while queue and len(pairs) < k:\n       _, i, j = heapq.heappop(queue)\n       pairs.append([nums1[i], nums2[j]])\n       push(i, j + 1)\n       if j == 0:\n           push(i + 1, 0)\n   return pairs",
        "is_deleted": 1,
        "code_str_deleted": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   #begin to write code\n",
        "code_str_generate": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n\n   '''\n   progame language:python\n   description:Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   queue = []\n   def push(i, j):\n       if i < len(nums1) and j < len(nums2):\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n   push(0, 0)\n   pairs = []\n   #begin to write code\n"
    },
    {
        "task_id": 409,
        "python_prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "test": "\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n\n",
        "code_str": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min",
        "is_deleted": 1,
        "code_str_deleted": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    #begin to write code\n",
        "code_str_generate": "def min_product_tuple(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result_min = min([abs(x * y) for x, y in list1] )\n    #begin to write code\n"
    },
    {
        "task_id": 410,
        "python_prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "test": "\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n\n",
        "code_str": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val",
        "is_deleted": 1,
        "code_str_deleted": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n",
        "code_str_generate": "def min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n"
    },
    {
        "task_id": 411,
        "python_prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "test": "\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'\n\n",
        "code_str": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef snake_to_camel(word):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef snake_to_camel(word):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given snake case string to camel case string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 412,
        "python_prompt": "Write a python function to remove odd numbers from a given list.",
        "test": "\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n\n",
        "code_str": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l",
        "is_deleted": 1,
        "code_str_deleted": "def remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n        #begin to write code\n",
        "code_str_generate": "def remove_odd(l):\n\n    '''\n    progame language:python\n    description:Write a python function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in l:\n        if i % 2 != 0:\n        #begin to write code\n"
    },
    {
        "task_id": 413,
        "python_prompt": "Write a function to extract the nth element from a given list of tuples.",
        "test": "\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n\n",
        "code_str": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    #begin to write code\n",
        "code_str_generate": "def extract_nth_element(list1, n):\n\n    '''\n    progame language:python\n    description:Write a function to extract the nth element from a given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x[n] for x in list1]\n    #begin to write code\n"
    },
    {
        "task_id": 414,
        "python_prompt": "Write a python function to check whether the value exists in a sequence or not.",
        "test": "\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n\n",
        "code_str": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0",
        "is_deleted": 1,
        "code_str_deleted": "def overlapping(list1,list2):\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n",
        "code_str_generate": "def overlapping(list1,list2):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n"
    },
    {
        "task_id": 415,
        "python_prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "test": "\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n\n",
        "code_str": "def max_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] > x * y): \n                x = arr[i]; y = arr[j] \n    return x,y    ",
        "is_deleted": 1,
        "code_str_deleted": "def max_Product(arr):\n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    #begin to write code\n",
        "code_str_generate": "def max_Product(arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find a pair with highest product from a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr_len = len(arr) \n    if (arr_len < 2): \n        return (\"No pairs exists\")           \n    x = arr[0]; y = arr[1]      \n    #begin to write code\n"
    },
    {
        "task_id": 416,
        "python_prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "test": "\nassert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23\n\n",
        "code_str": "MAX = 1000000\ndef breakSum(n): \n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \n\treturn dp[n]",
        "is_deleted": 1,
        "code_str_deleted": "def breakSum(n):\nMAX = 1000000\n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\t#begin to write code\n",
        "code_str_generate": "def breakSum(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nMAX = 1000000\n\tdp = [0]*(n+1) \n\tdp[0] = 0\n\t#begin to write code\n"
    },
    {
        "task_id": 417,
        "python_prompt": "Write a function to find common first element in given list of tuple.",
        "test": "\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\n",
        "code_str": "def group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] ",
        "is_deleted": 1,
        "code_str_deleted": "def group_tuples(Input):\n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t#begin to write code\n",
        "code_str_generate": "def group_tuples(Input):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find common first element in given list of tuple.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t#begin to write code\n"
    },
    {
        "task_id": 418,
        "python_prompt": "Write a python function to find the sublist having maximum length.",
        "test": "\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\n",
        "code_str": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList",
        "is_deleted": 1,
        "code_str_deleted": "def Find_Max(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n",
        "code_str_generate": "def Find_Max(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxList = max((x) for x in lst) \n    #begin to write code\n"
    },
    {
        "task_id": 419,
        "python_prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "test": "\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n\n",
        "code_str": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum",
        "is_deleted": 1,
        "code_str_deleted": "def round_and_sum(list1):\n  lenght=len(list1)\n  #begin to write code\n",
        "code_str_generate": "def round_and_sum(list1):\n\n  '''\n  progame language:python\n  description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lenght=len(list1)\n  #begin to write code\n"
    },
    {
        "task_id": 420,
        "python_prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "test": "\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n\n",
        "code_str": "def cube_Sum(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += (2*i)*(2*i)*(2*i) \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "def cube_Sum(n):\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n",
        "code_str_generate": "def cube_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the cube sum of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n"
    },
    {
        "task_id": 421,
        "python_prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "test": "\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n\n",
        "code_str": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    #begin to write code\n",
        "code_str_generate": "def concatenate_tuple(test_tup):\n\n    '''\n    progame language:python\n    description:Write a function to concatenate each element of tuple by the delimiter.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    #begin to write code\n"
    },
    {
        "task_id": 422,
        "python_prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "test": "\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n\n",
        "code_str": "def find_Average_Of_Cube(n):  \n    sum = 0\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n + 1): \n    #begin to write code\n",
        "code_str_generate": "def find_Average_Of_Cube(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1, n + 1): \n    #begin to write code\n"
    },
    {
        "task_id": 423,
        "python_prompt": "Write a function to solve gold mine problem.",
        "test": "\nassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13\n\n",
        "code_str": "def get_maxgold(gold, m, n): \n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n            else: \n                right_up = goldTable[row-1][col+1] \n            if (row == m-1 or col == n-1): \n                right_down = 0\n            else: \n                right_down = goldTable[row+1][col+1] \n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \n    res = goldTable[0][0] \n    for i in range(1, m): \n        res = max(res, goldTable[i][0])  \n    return res ",
        "is_deleted": 1,
        "code_str_deleted": "def get_maxgold(gold, m, n):\n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n                #begin to write code\n",
        "code_str_generate": "def get_maxgold(gold, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to solve gold mine problem.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    goldTable = [[0 for i in range(n)] \n                        for j in range(m)]   \n    for col in range(n-1, -1, -1): \n        for row in range(m):  \n            if (col == n-1): \n                right = 0\n            else: \n                right = goldTable[row][col+1] \n            if (row == 0 or col == n-1): \n                right_up = 0\n                #begin to write code\n"
    },
    {
        "task_id": 424,
        "python_prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "test": "\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n\n",
        "code_str": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n",
        "code_str_generate": "def extract_rear(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to extract only the rear index element of each string in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n"
    },
    {
        "task_id": 425,
        "python_prompt": "Write a function to count the number of sublists containing a particular element.",
        "test": "\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n\n",
        "code_str": "def count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr",
        "is_deleted": 1,
        "code_str_deleted": "def count_element_in_list(list1, x):\n    ctr = 0\n    for i in range(len(list1)): \n    #begin to write code\n",
        "code_str_generate": "def count_element_in_list(list1, x):\n\n    '''\n    progame language:python\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for i in range(len(list1)): \n    #begin to write code\n"
    },
    {
        "task_id": 426,
        "python_prompt": "Write a function to filter odd numbers using lambda function.",
        "test": "\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n\n",
        "code_str": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums",
        "is_deleted": 1,
        "code_str_deleted": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n",
        "code_str_generate": "def filter_oddnumbers(nums):\n\n '''\n progame language:python\n description:Write a function to filter odd numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n"
    },
    {
        "task_id": 427,
        "python_prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "test": "\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n\n",
        "code_str": "import re\ndef change_date_format(dt):\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef change_date_format(dt):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef change_date_format(dt):\n\n    '''\n    progame language:python\n    description:Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 428,
        "python_prompt": "Write a function to sort the given array by using shell sort.",
        "test": "\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n\n",
        "code_str": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list",
        "is_deleted": 1,
        "code_str_deleted": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            #begin to write code\n",
        "code_str_generate": "def shell_sort(my_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            #begin to write code\n"
    },
    {
        "task_id": 429,
        "python_prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "test": "\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\n",
        "code_str": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n",
        "code_str_generate": "def and_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to extract the elementwise and tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 430,
        "python_prompt": "Write a function to find the directrix of a parabola.",
        "test": "\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n\n",
        "code_str": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix",
        "is_deleted": 1,
        "code_str_deleted": "def parabola_directrix(a, b, c):\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n",
        "code_str_generate": "def parabola_directrix(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n"
    },
    {
        "task_id": 431,
        "python_prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "test": "\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True\n\n",
        "code_str": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n             if x == y:\n                 result = True\n                 return result",
        "is_deleted": 1,
        "code_str_deleted": "def common_element(list1, list2):\n     result = False\n     for x in list1:\n         for y in list2:\n         #begin to write code\n",
        "code_str_generate": "def common_element(list1, list2):\n\n     '''\n     progame language:python\n     description:Write a function that takes two lists and returns true if they have at least one common element.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     result = False\n     for x in list1:\n         for y in list2:\n         #begin to write code\n"
    },
    {
        "task_id": 432,
        "python_prompt": "Write a function to find the median of a trapezium.",
        "test": "\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n\n",
        "code_str": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median",
        "is_deleted": 1,
        "code_str_deleted": "def median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n #begin to write code\n",
        "code_str_generate": "def median_trapezium(base1,base2,height):\n\n '''\n progame language:python\n description:Write a function to find the median of a trapezium.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n median = 0.5 * (base1+ base2)\n #begin to write code\n"
    },
    {
        "task_id": 433,
        "python_prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "test": "\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n\n",
        "code_str": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n    return ('Yes, the entered number is greater than those in the array')\n  else:\n    return ('No, entered number is less than those in the array')",
        "is_deleted": 1,
        "code_str_deleted": "def check_greater(arr, number):\n  arr.sort()\n  if number > arr[-1]:\n  #begin to write code\n",
        "code_str_generate": "def check_greater(arr, number):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the entered number is greater than the elements of the given array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  arr.sort()\n  if number > arr[-1]:\n  #begin to write code\n"
    },
    {
        "task_id": 434,
        "python_prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "test": "\nassert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')\n\n",
        "code_str": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')\n",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_match_one(text):\n\n        '''\n        progame language:python\n        description:Write a function that matches a string that has an a followed by one or more b's.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 435,
        "python_prompt": "Write a python function to find the last digit of a given number.",
        "test": "\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n\n",
        "code_str": "def last_Digit(n) :\n    return (n % 10) ",
        "is_deleted": 1,
        "code_str_deleted": "def last_Digit(n) :\n    #begin to write code\n",
        "code_str_generate": "def last_Digit(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 436,
        "python_prompt": "Write a python function to print negative numbers in a list.",
        "test": "\nassert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6\n\n",
        "code_str": "def neg_nos(list1):\n  for num in list1: \n    if num < 0: \n       return num ",
        "is_deleted": 1,
        "code_str_deleted": "def neg_nos(list1):\n  for num in list1: \n  #begin to write code\n",
        "code_str_generate": "def neg_nos(list1):\n\n  '''\n  progame language:python\n  description:Write a python function to print negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for num in list1: \n  #begin to write code\n"
    },
    {
        "task_id": 437,
        "python_prompt": "Write a function to remove odd characters in a string.",
        "test": "\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n\n",
        "code_str": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 == 0):\n        str2 = str2 + str1[i - 1]\n return str2",
        "is_deleted": 1,
        "code_str_deleted": "def remove_odd(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n #begin to write code\n",
        "code_str_generate": "def remove_odd(str1):\n\n '''\n progame language:python\n description:Write a function to remove odd characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = ''\n for i in range(1, len(str1) + 1):\n #begin to write code\n"
    },
    {
        "task_id": 438,
        "python_prompt": "Write a function to count bidirectional tuple pairs.",
        "test": "\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'\n\n",
        "code_str": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\n        res += 1\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def count_bidirectional(test_list):\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n    #begin to write code\n",
        "code_str_generate": "def count_bidirectional(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to count bidirectional tuple pairs.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = 0\n  for idx in range(0, len(test_list)):\n    for iidx in range(idx + 1, len(test_list)):\n    #begin to write code\n"
    },
    {
        "task_id": 439,
        "python_prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "test": "\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n\n",
        "code_str": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  return x",
        "is_deleted": 1,
        "code_str_deleted": "def multiple_to_single(L):\n  x = int(\"\".join(map(str, L)))\n  #begin to write code\n",
        "code_str_generate": "def multiple_to_single(L):\n\n  '''\n  progame language:python\n  description:Write a function to convert a list of multiple integers into a single integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  x = int(\"\".join(map(str, L)))\n  #begin to write code\n"
    },
    {
        "task_id": 440,
        "python_prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "test": "\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n\n",
        "code_str": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n    return (m.start(), m.end(), m.group(0))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef find_adverb_position(text):\n for m in re.finditer(r\"\\w+ly\", text):\n #begin to write code\n",
        "code_str_generate": "import re\ndef find_adverb_position(text):\n\n '''\n progame language:python\n description:Write a function to find all adverbs and their positions in a given sentence.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n for m in re.finditer(r\"\\w+ly\", text):\n #begin to write code\n"
    },
    {
        "task_id": 441,
        "python_prompt": "Write a function to find the surface area of a cube.",
        "test": "\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n\n",
        "code_str": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea",
        "is_deleted": 1,
        "code_str_deleted": "def surfacearea_cube(l):\n  surfacearea= 6*l*l\n  #begin to write code\n",
        "code_str_generate": "def surfacearea_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  surfacearea= 6*l*l\n  #begin to write code\n"
    },
    {
        "task_id": 442,
        "python_prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "test": "\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\n",
        "code_str": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n        else:\n          None\n    return round(n1/n,2)",
        "is_deleted": 1,
        "code_str_deleted": "from array import array\ndef positive_count(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n        #begin to write code\n",
        "code_str_generate": "from array import array\ndef positive_count(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the ration of positive numbers in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n        #begin to write code\n"
    },
    {
        "task_id": 443,
        "python_prompt": "Write a python function to find the largest negative number from the given list.",
        "test": "\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1\n\n",
        "code_str": "def largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max",
        "is_deleted": 1,
        "code_str_deleted": "def largest_neg(list1):\n    max = list1[0] \n    for x in list1: \n    #begin to write code\n",
        "code_str_generate": "def largest_neg(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max = list1[0] \n    for x in list1: \n    #begin to write code\n"
    },
    {
        "task_id": 444,
        "python_prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "test": "\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n\n",
        "code_str": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    res.append(tuple(list(ele)[K: N - K]))\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def trim_tuple(test_list, K):\n  res = []\n  for ele in test_list:\n  #begin to write code\n",
        "code_str_generate": "def trim_tuple(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to trim each tuple by k in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  for ele in test_list:\n  #begin to write code\n"
    },
    {
        "task_id": 445,
        "python_prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "test": "\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n\n",
        "code_str": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def index_multiplication(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n  #begin to write code\n",
        "code_str_generate": "def index_multiplication(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n  #begin to write code\n"
    },
    {
        "task_id": 446,
        "python_prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "test": "\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n\n",
        "code_str": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter \ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup: \n    #begin to write code\n",
        "code_str_generate": "from collections import Counter \ndef count_Occurrence(tup, lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    for item in tup: \n    #begin to write code\n"
    },
    {
        "task_id": 447,
        "python_prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "test": "\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n\n",
        "code_str": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums",
        "is_deleted": 1,
        "code_str_deleted": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n #begin to write code\n",
        "code_str_generate": "def cube_nums(nums):\n\n '''\n progame language:python\n description:Write a function to find cubes of individual elements in a list using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n cube_nums = list(map(lambda x: x ** 3, nums))\n #begin to write code\n"
    },
    {
        "task_id": 448,
        "python_prompt": "Write a function to calculate the sum of perrin numbers.",
        "test": "\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n\n",
        "code_str": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n-1\n\treturn sum",
        "is_deleted": 1,
        "code_str_deleted": "def cal_sum(n):\n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\t\t#begin to write code\n",
        "code_str_generate": "def cal_sum(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the sum of perrin numbers.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\t\t#begin to write code\n"
    },
    {
        "task_id": 449,
        "python_prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "test": "\nassert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'\n\n",
        "code_str": "def check_Triangle(x1,y1,x2,y2,x3,y3): \n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n        return ('No') \n    else: \n        return ('Yes') ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n    #begin to write code\n",
        "code_str_generate": "def check_Triangle(x1,y1,x2,y2,x3,y3):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if 3 points are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \n    if a == 0: \n    #begin to write code\n"
    },
    {
        "task_id": 450,
        "python_prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "test": "\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n\n",
        "code_str": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    #begin to write code\n",
        "code_str_generate": "def extract_string(str, l):\n\n    '''\n    progame language:python\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [e for e in str if len(e) == l] \n    #begin to write code\n"
    },
    {
        "task_id": 451,
        "python_prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "test": "\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n\n",
        "code_str": "import re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef remove_whitespaces(text1):\n    #begin to write code\n",
        "code_str_generate": "import re\ndef remove_whitespaces(text1):\n\n    '''\n    progame language:python\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 452,
        "python_prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "test": "\nassert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000\n\n",
        "code_str": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None",
        "is_deleted": 1,
        "code_str_deleted": "def loss_amount(actual_cost,sale_amount):\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n",
        "code_str_generate": "def loss_amount(actual_cost,sale_amount):\n\n  '''\n  progame language:python\n  description:Write a function that gives loss amount if the given amount has loss else return none.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n"
    },
    {
        "task_id": 453,
        "python_prompt": "Write a python function to find the sum of even factors of a number.",
        "test": "\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n\n",
        "code_str": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            n = n // i \n            if (i == 2 and count == 1) : \n                curr_sum = 0\n            curr_term = curr_term * i \n            curr_sum = curr_sum + curr_term \n        res = res * curr_sum  \n    if (n >= 2) : \n        res = res * (1 + n) \n    return res ",
        "is_deleted": 1,
        "code_str_deleted": "import math \ndef sumofFactors(n) :\n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            #begin to write code\n",
        "code_str_generate": "import math \ndef sumofFactors(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of even factors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 2 != 0) : \n        return 0\n    res = 1\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \n        count = 0\n        curr_sum = 1\n        curr_term = 1\n        while (n % i == 0) : \n            count= count + 1\n            #begin to write code\n"
    },
    {
        "task_id": 454,
        "python_prompt": "Write a function that matches a word containing 'z'.",
        "test": "\nassert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')\n\n",
        "code_str": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n                return 'Found a match!'\n        else:\n                return('Not matched!')",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef text_match_wordz(text):\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n        #begin to write code\n",
        "code_str_generate": "import re\ndef text_match_wordz(text):\n\n        '''\n        progame language:python\n        description:Write a function that matches a word containing 'z'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        patterns = '\\w*z.\\w*'\n        if re.search(patterns,  text):\n        #begin to write code\n"
    },
    {
        "task_id": 455,
        "python_prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "test": "\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n\n",
        "code_str": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False",
        "is_deleted": 1,
        "code_str_deleted": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    #begin to write code\n",
        "code_str_generate": "def check_monthnumb_number(monthnum2):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    #begin to write code\n"
    },
    {
        "task_id": 456,
        "python_prompt": "Write a function to reverse strings in a given list of string values.",
        "test": "\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n\n",
        "code_str": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n",
        "code_str_generate": "def reverse_string_list(stringlist):\n\n    '''\n    progame language:python\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n"
    },
    {
        "task_id": 457,
        "python_prompt": "Write a python function to find the sublist having minimum length.",
        "test": "\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n\n",
        "code_str": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList",
        "is_deleted": 1,
        "code_str_deleted": "def Find_Min(lst):\n    minList = min((x) for x in lst) \n    #begin to write code\n",
        "code_str_generate": "def Find_Min(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minList = min((x) for x in lst) \n    #begin to write code\n"
    },
    {
        "task_id": 458,
        "python_prompt": "Write a function to find the area of a rectangle.",
        "test": "\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n\n",
        "code_str": "def rectangle_area(l,b):\n  area=l*b\n  return area",
        "is_deleted": 1,
        "code_str_deleted": "def rectangle_area(l,b):\n  area=l*b\n  #begin to write code\n",
        "code_str_generate": "def rectangle_area(l,b):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a rectangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=l*b\n  #begin to write code\n"
    },
    {
        "task_id": 459,
        "python_prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "test": "\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\n",
        "code_str": "import re\ndef remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  result =  remove_upper(str1)\n  return (result)",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef remove_uppercase(str1):\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  #begin to write code\n",
        "code_str_generate": "import re\ndef remove_uppercase(str1):\n\n  '''\n  progame language:python\n  description:Write a function to remove uppercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\n  #begin to write code\n"
    },
    {
        "task_id": 460,
        "python_prompt": "Write a python function to get the first element of each sublist.",
        "test": "\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n\n",
        "code_str": "def Extract(lst): \n    return [item[0] for item in lst] ",
        "is_deleted": 1,
        "code_str_deleted": "def Extract(lst):\n    #begin to write code\n",
        "code_str_generate": "def Extract(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 461,
        "python_prompt": "Write a python function to count the upper case characters in a given string.",
        "test": "\nassert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0\n\n",
        "code_str": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\n          return upper_ctr",
        "is_deleted": 1,
        "code_str_deleted": "def upper_ctr(str):\n    upper_ctr = 0\n    for i in range(len(str)):\n    #begin to write code\n",
        "code_str_generate": "def upper_ctr(str):\n\n    '''\n    progame language:python\n    description:Write a python function to count the upper case characters in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    upper_ctr = 0\n    for i in range(len(str)):\n    #begin to write code\n"
    },
    {
        "task_id": 462,
        "python_prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "test": "\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\n",
        "code_str": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    #begin to write code\n",
        "code_str_generate": "def combinations_list(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all possible combinations of the elements of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    #begin to write code\n"
    },
    {
        "task_id": 463,
        "python_prompt": "Write a function to find the maximum product subarray of the given array.",
        "test": "\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n\n",
        "code_str": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t\tmax_ending_here = 1\n\t\t\tmin_ending_here = 1\n\t\telse:\n\t\t\ttemp = max_ending_here\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\n\t\t\tmin_ending_here = temp * arr[i]\n\t\tif (max_so_far < max_ending_here):\n\t\t\tmax_so_far = max_ending_here\n\tif flag == 0 and max_so_far == 0:\n\t\treturn 0\n\treturn max_so_far",
        "is_deleted": 1,
        "code_str_deleted": "def max_subarray_product(arr):\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t#begin to write code\n",
        "code_str_generate": "def max_subarray_product(arr):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum product subarray of the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(arr)\n\tmax_ending_here = 1\n\tmin_ending_here = 1\n\tmax_so_far = 0\n\tflag = 0\n\tfor i in range(0, n):\n\t\tif arr[i] > 0:\n\t\t\tmax_ending_here = max_ending_here * arr[i]\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\n\t\t\tflag = 1\n\t\telif arr[i] == 0:\n\t\t#begin to write code\n"
    },
    {
        "task_id": 464,
        "python_prompt": "Write a function to check if all values are same in a dictionary.",
        "test": "\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n\n",
        "code_str": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    #begin to write code\n",
        "code_str_generate": "def check_value(dict, n):\n\n    '''\n    progame language:python\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = all(x == n for x in dict.values()) \n    #begin to write code\n"
    },
    {
        "task_id": 465,
        "python_prompt": "Write a function to drop empty items from a given dictionary.",
        "test": "\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n\n",
        "code_str": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1",
        "is_deleted": 1,
        "code_str_deleted": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n",
        "code_str_generate": "def drop_empty(dict1):\n\n  '''\n  progame language:python\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n"
    },
    {
        "task_id": 466,
        "python_prompt": "Write a function to find the peak element in the given array.",
        "test": "\nassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 \n\n",
        "code_str": "def find_peak_util(arr, low, high, n): \n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \n\t\treturn find_peak_util(arr, low, (mid - 1), n) \n\telse: \n\t\treturn find_peak_util(arr, (mid + 1), high, n) \ndef find_peak(arr, n): \n\treturn find_peak_util(arr, 0, n - 1, n) ",
        "is_deleted": 1,
        "code_str_deleted": "def find_peak_util(arr, low, high, n):\n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\t\t#begin to write code\n",
        "code_str_generate": "def find_peak_util(arr, low, high, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the peak element in the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tmid = low + (high - low)/2\n\tmid = int(mid) \n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \n\t\treturn mid \n\t\t#begin to write code\n"
    },
    {
        "task_id": 467,
        "python_prompt": "Write a python function to convert decimal number to octal number.",
        "test": "\nassert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41\n\n",
        "code_str": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n        remainder= deciNum % 8;\n        octalNum+= remainder*countval;\n        countval= countval*10;\n        deciNum //= 8; \n    return (octalNum)",
        "is_deleted": 1,
        "code_str_deleted": "def decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n    #begin to write code\n",
        "code_str_generate": "def decimal_to_Octal(deciNum):\n\n    '''\n    progame language:python\n    description:Write a python function to convert decimal number to octal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    octalNum = 0\n    countval = 1;\n    dNo = deciNum;\n    while (deciNum!= 0):\n    #begin to write code\n"
    },
    {
        "task_id": 468,
        "python_prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "test": "\nassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 \n\n",
        "code_str": "def max_product(arr, n ): \n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\treturn max(mpis)",
        "is_deleted": 1,
        "code_str_deleted": "def max_product(arr, n ):\n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t#begin to write code\n",
        "code_str_generate": "def max_product(arr, n ):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tmpis =[0] * (n) \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t#begin to write code\n"
    },
    {
        "task_id": 469,
        "python_prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "test": "\nassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2\n\n",
        "code_str": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n                max_so_far = 0\n                for x in range(j):\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\n                    if max_so_far < curr_price:\n                        max_so_far = curr_price\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\n    return final_profit[k][n-1]",
        "is_deleted": 1,
        "code_str_deleted": "def max_profit(price, k):\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n            #begin to write code\n",
        "code_str_generate": "def max_profit(price, k):\n\n    '''\n    progame language:python\n    description:Write a function to find the maximum profit earned from a maximum of k stock transactions\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    n = len(price)\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(n):\n            if i == 0 or j == 0:\n                final_profit[i][j] = 0\n            else:\n            #begin to write code\n"
    },
    {
        "task_id": 470,
        "python_prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "test": "\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\n",
        "code_str": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def add_pairwise(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n",
        "code_str_generate": "def add_pairwise(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the pairwise addition of the elements of the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n"
    },
    {
        "task_id": 471,
        "python_prompt": "Write a python function to find remainder of array multiplication divided by n.",
        "test": "\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0\n\n",
        "code_str": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ",
        "is_deleted": 1,
        "code_str_deleted": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n",
        "code_str_generate": "def find_remainder(arr, lens, n):\n\n    '''\n    progame language:python\n    description:Write a python function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n"
    },
    {
        "task_id": 472,
        "python_prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "test": "\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n\n",
        "code_str": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) ",
        "is_deleted": 1,
        "code_str_deleted": "def check_Consecutive(l):\n    #begin to write code\n",
        "code_str_generate": "def check_Consecutive(l):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 473,
        "python_prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "test": "\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\n",
        "code_str": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)",
        "is_deleted": 1,
        "code_str_deleted": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n",
        "code_str_generate": "def tuple_intersection(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n"
    },
    {
        "task_id": 474,
        "python_prompt": "Write a function to replace characters in a string.",
        "test": "\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n\n",
        "code_str": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2",
        "is_deleted": 1,
        "code_str_deleted": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n #begin to write code\n",
        "code_str_generate": "def replace_char(str1,ch,newch):\n\n '''\n progame language:python\n description:Write a function to replace characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(ch, newch)\n #begin to write code\n"
    },
    {
        "task_id": 475,
        "python_prompt": "Write a function to sort counter by value.",
        "test": "\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\n",
        "code_str": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n sort_counter=x.most_common()\n return sort_counter",
        "is_deleted": 1,
        "code_str_deleted": "from collections import Counter\ndef sort_counter(dict1):\n x = Counter(dict1)\n #begin to write code\n",
        "code_str_generate": "from collections import Counter\ndef sort_counter(dict1):\n\n '''\n progame language:python\n description:Write a function to sort counter by value.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n x = Counter(dict1)\n #begin to write code\n"
    },
    {
        "task_id": 476,
        "python_prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "test": "\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n\n",
        "code_str": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum",
        "is_deleted": 1,
        "code_str_deleted": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      #begin to write code\n",
        "code_str_generate": "def big_sum(nums):\n\n      '''\n      progame language:python\n      description:Write a python function to find the sum of the largest and smallest value in a given array.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      sum= max(nums)+min(nums)\n      #begin to write code\n"
    },
    {
        "task_id": 477,
        "python_prompt": "Write a python function to convert the given string to lower case.",
        "test": "\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n\n",
        "code_str": "def is_lower(string):\n  return (string.lower())",
        "is_deleted": 1,
        "code_str_deleted": "def is_lower(string):\n    #begin to write code\n",
        "code_str_generate": "def is_lower(string):\n\n    '''\n    progame language:python\n    description:Write a python function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n"
    },
    {
        "task_id": 478,
        "python_prompt": "Write a function to remove lowercase substrings from a given string.",
        "test": "\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n\n",
        "code_str": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n #begin to write code\n",
        "code_str_generate": "import re\ndef remove_lowercase(str1):\n\n '''\n progame language:python\n description:Write a function to remove lowercase substrings from a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n #begin to write code\n"
    },
    {
        "task_id": 479,
        "python_prompt": "Write a python function to find the first digit of a given number.",
        "test": "\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n\n",
        "code_str": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ",
        "is_deleted": 1,
        "code_str_deleted": "def first_Digit(n) :\n    while n >= 10:  \n    #begin to write code\n",
        "code_str_generate": "def first_Digit(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while n >= 10:  \n    #begin to write code\n"
    },
    {
        "task_id": 480,
        "python_prompt": "Write a python function to find the maximum occurring character in a given string.",
        "test": "\nassert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"\n\n",
        "code_str": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch",
        "is_deleted": 1,
        "code_str_deleted": "def get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n",
        "code_str_generate": "def get_max_occuring_char(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the maximum occurring character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n"
    },
    {
        "task_id": 481,
        "python_prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "test": "\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n",
        "code_str": "def is_subset_sum(set, n, sum):\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t\treturn False\n\tif (set[n - 1] > sum):\n\t\treturn is_subset_sum(set, n - 1, sum)\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
        "is_deleted": 1,
        "code_str_deleted": "def is_subset_sum(set, n, sum):\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t#begin to write code\n",
        "code_str_generate": "def is_subset_sum(set, n, sum):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (sum == 0):\n\t\treturn True\n\tif (n == 0):\n\t#begin to write code\n"
    },
    {
        "task_id": 482,
        "python_prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "test": "\nassert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'\n\n",
        "code_str": "import re \ndef match(text): \n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t\t\treturn('Yes') \n\t\telse: \n\t\t\t\treturn('No') ",
        "is_deleted": 1,
        "code_str_deleted": "import re \ndef match(text):\n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t#begin to write code\n",
        "code_str_generate": "import re \ndef match(text):\n\n\t\t'''\n\t\tprogame language:python\n\t\tdescription:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n\t\tyou must follow:\n\t\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t\t2. Please strictly follow the specified format provided below for the code.\n\t\t3. Do not change the function names.\n\t\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t\t6. Do not generate test cases.\n\t\t'''\n\n\t\tpattern = '[A-Z]+[a-z]+$'\n\t\tif re.search(pattern, text): \n\t\t#begin to write code\n"
    },
    {
        "task_id": 483,
        "python_prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "test": "\nassert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4\n\n",
        "code_str": "def first_Factorial_Divisible_Number(x): \n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n        fact = fact * i \n        if (fact % x == 0): \n            break\n    return i ",
        "is_deleted": 1,
        "code_str_deleted": "def first_Factorial_Divisible_Number(x):\n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n    #begin to write code\n",
        "code_str_generate": "def first_Factorial_Divisible_Number(x):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 1;\n    fact = 1; \n    for i in range(1,x): \n    #begin to write code\n"
    },
    {
        "task_id": 484,
        "python_prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "test": "\nassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n\n",
        "code_str": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n",
        "code_str_generate": "def remove_matching_tuple(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to remove the matching tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n"
    },
    {
        "task_id": 485,
        "python_prompt": "Write a function to find the largest palindromic number in the given array.",
        "test": "\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9\n\n",
        "code_str": "def is_palindrome(n) : \n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\tn = (n % divisor) // 10\n\t\tdivisor = divisor // 100\n\treturn True\ndef largest_palindrome(A, n) : \n\tA.sort() \n\tfor i in range(n - 1, -1, -1) : \n\t\tif (is_palindrome(A[i])) : \n\t\t\treturn A[i] \n\treturn -1",
        "is_deleted": 1,
        "code_str_deleted": "def is_palindrome(n) :\n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\t\t#begin to write code\n",
        "code_str_generate": "def is_palindrome(n) :\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the largest palindromic number in the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdivisor = 1\n\twhile (n / divisor >= 10) : \n\t\tdivisor *= 10\n\twhile (n != 0) : \n\t\tleading = n // divisor \n\t\ttrailing = n % 10\n\t\tif (leading != trailing) : \n\t\t\treturn False\n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 486,
        "python_prompt": "Write a function to compute binomial probability for the given number.",
        "test": "\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488\n\n",
        "code_str": "def nCr(n, r): \n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t\tanswer *= (n - r + i) \n\t\tanswer /= i \n\treturn answer \ndef binomial_probability(n, k, p): \n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
        "is_deleted": 1,
        "code_str_deleted": "def nCr(n, r):\n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t#begin to write code\n",
        "code_str_generate": "def nCr(n, r):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to compute binomial probability for the given number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (r > n / 2): \n\t\tr = n - r \n\tanswer = 1 \n\tfor i in range(1, r + 1): \n\t#begin to write code\n"
    },
    {
        "task_id": 487,
        "python_prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "test": "\nassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]\n\n",
        "code_str": "def sort_tuple(tup): \n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t\ttemp = tup[j] \n\t\t\t\ttup[j]= tup[j + 1] \n\t\t\t\ttup[j + 1]= temp \n\treturn tup",
        "is_deleted": 1,
        "code_str_deleted": "def sort_tuple(tup):\n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t#begin to write code\n",
        "code_str_generate": "def sort_tuple(tup):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tlst = len(tup) \n\tfor i in range(0, lst): \n\t\tfor j in range(0, lst-i-1): \n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \n\t\t\t#begin to write code\n"
    },
    {
        "task_id": 488,
        "python_prompt": "Write a function to find the area of a pentagon.",
        "test": "\nassert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753\n\n",
        "code_str": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n",
        "code_str_generate": "import math\ndef area_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n"
    },
    {
        "task_id": 489,
        "python_prompt": "Write a python function to find the frequency of the largest value in a given array.",
        "test": "\nassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3\n\n",
        "code_str": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ",
        "is_deleted": 1,
        "code_str_deleted": "def frequency_Of_Largest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n",
        "code_str_generate": "def frequency_Of_Largest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n"
    },
    {
        "task_id": 490,
        "python_prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "test": "\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n\n",
        "code_str": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  res = {(a, b) for a, b in temp if a < b}\n  return (res) ",
        "is_deleted": 1,
        "code_str_deleted": "def extract_symmetric(test_list):\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  #begin to write code\n",
        "code_str_generate": "def extract_symmetric(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract all the pairs which are symmetric in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  temp = set(test_list) & {(b, a) for a, b in test_list}\n  #begin to write code\n"
    },
    {
        "task_id": 491,
        "python_prompt": "Write a function to find the sum of geometric progression series.",
        "test": "\nassert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728\n\n",
        "code_str": "import math\ndef sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n return total",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef sum_gp(a,n,r):\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n #begin to write code\n",
        "code_str_generate": "import math\ndef sum_gp(a,n,r):\n\n '''\n progame language:python\n description:Write a function to find the sum of geometric progression series.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n total = (a * (1 - math.pow(r, n ))) / (1- r)\n #begin to write code\n"
    },
    {
        "task_id": 492,
        "python_prompt": "Write a function to search an element in the given array by using binary search.",
        "test": "\nassert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False\n\n",
        "code_str": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found",
        "is_deleted": 1,
        "code_str_deleted": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n",
        "code_str_generate": "def binary_search(item_list,item):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to search an element in the given array by using binary search.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n"
    },
    {
        "task_id": 493,
        "python_prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "test": "\nassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n\n",
        "code_str": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            poly = [\n                (p1x, p1y),\n                (p2x, p2y),\n                (p3x, p3y),\n                (p4x, p4y),\n                (p5x, p5y),\n                (p6x, p6y),\n                (p1x, p1y)]\n            polygons.append(poly)\n            counter += 1\n            startx += w\n        starty += yoffset\n        row += 1\n    return polygons",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            #begin to write code\n",
        "code_str_generate": "import math\ndef calculate_polygons(startx, starty, endx, endy, radius):\n\n    '''\n    progame language:python\n    description:Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl   \n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    polygons = []\n    row = 1\n    counter = 0\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            #begin to write code\n"
    },
    {
        "task_id": 494,
        "python_prompt": "Write a function to convert the given binary tuple to integer.",
        "test": "\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'\n\n",
        "code_str": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  return (str(res)) ",
        "is_deleted": 1,
        "code_str_deleted": "def binary_to_integer(test_tup):\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  #begin to write code\n",
        "code_str_generate": "def binary_to_integer(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to convert the given binary tuple to integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\n  #begin to write code\n"
    },
    {
        "task_id": 495,
        "python_prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "test": "\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n\n",
        "code_str": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  result =  remove_lower(str1)\n  return (result)",
        "is_deleted": 1,
        "code_str_deleted": "import re\ndef remove_lowercase(str1):\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  #begin to write code\n",
        "code_str_generate": "import re\ndef remove_lowercase(str1):\n\n  '''\n  progame language:python\n  description:Write a function to remove lowercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\n  #begin to write code\n"
    },
    {
        "task_id": 496,
        "python_prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "test": "\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]\n\n",
        "code_str": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums",
        "is_deleted": 1,
        "code_str_deleted": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n",
        "code_str_generate": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n\n  '''\n  progame language:python\n  description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n"
    },
    {
        "task_id": 497,
        "python_prompt": "Write a function to find the surface area of a cone.",
        "test": "\nassert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254\n\n",
        "code_str": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  SA = math.pi * r * (r + l)\n  return SA",
        "is_deleted": 1,
        "code_str_deleted": "import math\ndef surfacearea_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  #begin to write code\n",
        "code_str_generate": "import math\ndef surfacearea_cone(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cone.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  l = math.sqrt(r * r + h * h)\n  #begin to write code\n"
    },
    {
        "task_id": 498,
        "python_prompt": "Write a python function to find gcd of two positive integers.",
        "test": "\nassert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1\n\n",
        "code_str": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd",
        "is_deleted": 1,
        "code_str_deleted": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n",
        "code_str_generate": "def gcd(x, y):\n\n    '''\n    progame language:python\n    description:Write a python function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n"
    },
    {
        "task_id": 499,
        "python_prompt": "Write a function to find the diameter of a circle.",
        "test": "\nassert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30\n\n",
        "code_str": "def diameter_circle(r):\n  diameter=2*r\n  return diameter",
        "is_deleted": 1,
        "code_str_deleted": "def diameter_circle(r):\n  diameter=2*r\n  #begin to write code\n",
        "code_str_generate": "def diameter_circle(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the diameter of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  diameter=2*r\n  #begin to write code\n"
    },
    {
        "task_id": 500,
        "python_prompt": "Write a function to concatenate all elements of the given list into a string.",
        "test": "\nassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'\n\n",
        "code_str": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n    ans = ans+ ' '+i\n  return (ans) ",
        "is_deleted": 1,
        "code_str_deleted": "def concatenate_elements(list):\n  ans = ' '\n  for i in list:\n  #begin to write code\n",
        "code_str_generate": "def concatenate_elements(list):\n\n  '''\n  progame language:python\n  description:Write a function to concatenate all elements of the given list into a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ans = ' '\n  for i in list:\n  #begin to write code\n"
    },
    {
        "task_id": 501,
        "python_prompt": "Write a python function to find common divisor between two numbers in a given pair.",
        "test": "\nassert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6\n\n",
        "code_str": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result",
        "is_deleted": 1,
        "code_str_deleted": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  #begin to write code\n",
        "code_str_generate": "def ngcd(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to find common divisor between two numbers in a given pair.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  #begin to write code\n"
    },
    {
        "task_id": 502,
        "python_prompt": "Write a python function to find remainder of two numbers.",
        "test": "\nassert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1\n\n",
        "code_str": "def find(n,m):\n  r = n%m\n  return (r)",
        "is_deleted": 1,
        "code_str_deleted": "def find(n,m):\n  r = n%m\n  #begin to write code\n",
        "code_str_generate": "def find(n,m):\n\n  '''\n  progame language:python\n  description:Write a python function to find remainder of two numbers.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  r = n%m\n  #begin to write code\n"
    },
    {
        "task_id": 503,
        "python_prompt": "Write a function to add consecutive numbers of a given list.",
        "test": "\nassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n\n",
        "code_str": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result",
        "is_deleted": 1,
        "code_str_deleted": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n",
        "code_str_generate": "def add_consecutive_nums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n"
    },
    {
        "task_id": 504,
        "python_prompt": "Write a python function to find the cube sum of first n natural numbers.",
        "test": "\nassert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36\n\n",
        "code_str": "def sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum",
        "is_deleted": 1,
        "code_str_deleted": "def sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n",
        "code_str_generate": "def sum_Of_Series(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n"
    },
    {
        "task_id": 505,
        "python_prompt": "Write a function to move all zeroes to the end of the given array.",
        "test": "\nassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n\n",
        "code_str": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            k = k + 1\n    for i in range(k, len(A)):\n        A[i] = 0\n    return A",
        "is_deleted": 1,
        "code_str_deleted": "def re_order(A):\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            #begin to write code\n",
        "code_str_generate": "def re_order(A):\n\n    '''\n    progame language:python\n    description:Write a function to move all zeroes to the end of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    k = 0\n    for i in A:\n        if i:\n            A[k] = i\n            #begin to write code\n"
    },
    {
        "task_id": 506,
        "python_prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "test": "\nassert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10\n\n",
        "code_str": "def permutation_coefficient(n, k): \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ",
        "is_deleted": 1,
        "code_str_deleted": "def permutation_coefficient(n, k):\n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\t\t#begin to write code\n",
        "code_str_generate": "def permutation_coefficient(n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the permutation coefficient of given p(n, k).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\t\t#begin to write code\n"
    },
    {
        "task_id": 507,
        "python_prompt": "Write a function to remove specific words from a given list.",
        "test": "\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']\n\n",
        "code_str": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n    return list1  ",
        "is_deleted": 1,
        "code_str_deleted": "def remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n        #begin to write code\n",
        "code_str_generate": "def remove_words(list1, removewords):\n\n    '''\n    progame language:python\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for word in list(list1):\n        if word in removewords:\n        #begin to write code\n"
    },
    {
        "task_id": 508,
        "python_prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "test": "\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\n",
        "code_str": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    l2 = [e for e in l2 if e in common_elements]\n    return l1 == l2",
        "is_deleted": 1,
        "code_str_deleted": "def same_order(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    #begin to write code\n",
        "code_str_generate": "def same_order(l1, l2):\n\n    '''\n    progame language:python\n    description:Write a function to check if the common elements between two given lists are in the same order or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    common_elements = set(l1) & set(l2)\n    l1 = [e for e in l1 if e in common_elements]\n    #begin to write code\n"
    },
    {
        "task_id": 509,
        "python_prompt": "Write a python function to find the average of odd numbers till a given odd number.",
        "test": "\nassert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6\n\n",
        "code_str": "def average_Odd(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ",
        "is_deleted": 1,
        "code_str_deleted": "def average_Odd(n) :\n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n",
        "code_str_generate": "def average_Odd(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n"
    },
    {
        "task_id": 510,
        "python_prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "test": "\nassert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4\n\n",
        "code_str": "def no_of_subsequences(arr, k): \n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t\tfor j in range(1, n + 1): \n\t\t\tdp[i][j] = dp[i][j - 1] \n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\n\treturn dp[k][n]",
        "is_deleted": 1,
        "code_str_deleted": "def no_of_subsequences(arr, k):\n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t#begin to write code\n",
        "code_str_generate": "def no_of_subsequences(arr, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(arr) \n\tdp = [[0 for i in range(n + 1)] \n\t\t\tfor j in range(k + 1)] \n\tfor i in range(1, k + 1): \n\t#begin to write code\n"
    }
]