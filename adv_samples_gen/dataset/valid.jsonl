{"task_id": 398, "Adversarial Code": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    #begin to write code\n", "Adversarial truth": "def min_product_tuple(list1):\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "lang": "python"}
{"task_id": 454, "Adversarial Code": "#include <condition_variable>\n#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "Adversarial truth": "#include <condition_variable>\n\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n            filtered[element.first] = element.second;\n        }\n    }\n    return filtered;\n}\n\n\n", "lang": "cpp"}
{"task_id": 150, "Adversarial Code": "class Solution {\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n    final double var_0 = 9.9;\n    final double var_1 = 9.12;\n    double temp_var_5 = var_0 ;while (temp_var_5 < var_1 ) {System.out.println(var_2 );temp_var_5 = temp_var_5 + var_3 ;}\n        final String var_2 = \"This function is used to remove a item of a list\";\n        final int var_3 = 1;\n        List<Integer> result = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n    final double var_0 = 9.9;\n    final double var_1 = 9.12;\n    double temp_var_5 = var_0 ;while (temp_var_5 < var_1 ) {System.out.println(var_2 );temp_var_5 = temp_var_5 + var_3 ;}\n        final String var_2 = \"This function is used to remove a item of a list\";\n        final int var_3 = 1;\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 74, "Adversarial Code": "class Solution {\n    public static double func_0(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double func_0(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        return surfacearea;\n    }\n}\n", "lang": "java"}
{"task_id": 43, "Adversarial Code": "class Solution {\n    public static int[] countingSort(int[] myArray) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 1;\n        final int var_4 = 0;\n        final int var_5 = 0;\n        final int var_6 = 1;\n        int max_value = var_0 ;\n        for (int i = var_1 ; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + var_2 ];\n        for (int i : myArray) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] countingSort(int[] myArray) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 1;\n        final int var_4 = 0;\n        final int var_5 = 0;\n        final int var_6 = 1;\n        int max_value = var_0 ;\n        for (int i = var_1 ; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + var_2 ];\n        for (int i : myArray) {\n            final int var_3 = 1;\n            buckets[i] += var_3 ;\n        }\n        int i = var_4 ;\n        for (int j = var_5 ; j < max_value + var_6 ; j++) {\n            final int var_7 = 0;\n            for (int a = var_7 ; a < buckets[j]; a++) {\n                final int var_8 = 1;\n                myArray[i] = j;\n                i += var_8 ;\n            }\n        }\n        return myArray;\n    }\n}\n", "lang": "java"}
{"task_id": 76, "Adversarial Code": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict1);\n        return mergedDict;\n    }\n}\n", "lang": "java"}
{"task_id": 143, "Adversarial Code": "def specified_element(nums, N):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n#This is a comment line.\n    result = [i[N] for i in nums]\n    return result", "lang": "python"}
{"task_id": 495, "Adversarial Code": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                if (j < k) {\n                    P[i][j + 1] = 0;\n                }\n            }\n        }\n        return P[n][k];\n    }\n}\n", "lang": "java"}
{"task_id": 159, "Adversarial Code": "#include <queue>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "#include <queue>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n\n", "lang": "cpp"}
{"task_id": 121, "Adversarial Code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  #begin to write code\n", "Adversarial truth": "def tup_string(tup1):\n  str =  ''.join(tup1)\n\n\n  return str", "lang": "python"}
{"task_id": 449, "Adversarial Code": "def Extract(lst):\n    #begin to write code\n", "Adversarial truth": "def Extract(lst): \n    return [item[0] for item in lst] ", "lang": "python"}
{"task_id": 473, "Adversarial Code": "def wrfuvremce(ear_2, vzi_3):\n  var_0 = [var_1 for var_1 in ear_2 if var_1 not in vzi_3]\n  #begin to write code\n", "Adversarial truth": "def wrfuvremce(ear_2, vzi_3):\n  var_0 = [var_1 for var_1 in ear_2 if var_1 not in vzi_3]\n  return (var_0) ", "lang": "python"}
{"task_id": 146, "Adversarial Code": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            //begin to write code\n", "Adversarial truth": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        grouped.push([count, current]);\n    }\n    return grouped;\n}\n\n", "lang": "javascript"}
{"task_id": 219, "Adversarial Code": "//function difinition\nfunction replacv_ylamk(str1, char) {\n//begin to write code\n", "Adversarial truth": "//function difinition\nfunction replacv_ylamk(str1, char) {\n    let str2 = str1.replace(/ /g, char);\n    return str2;\n}\n\n", "lang": "javascript"}
{"task_id": 282, "Adversarial Code": "function otherside_rightangle(b, r) {\n//begin to write code\n", "Adversarial truth": "function otherside_rightangle(b, r) {\n    return Math.sqrt((b * b) + (r * r));\n}\n\n", "lang": "javascript"}
{"task_id": 273, "Adversarial Code": "const cluster = require('cluster');\nconst http = require('http');\nfunction check_element(list, element) {\n//begin to write code\n", "Adversarial truth": "const cluster = require('cluster');\nconst http = require('http');\nfunction check_element(list, element) {\n//This is a comment line.\n  let check_element = list.every(v => v === element);\n\n  return check_element;\n}\n\n", "lang": "javascript"}
{"task_id": 418, "Adversarial Code": "function and_tuples(test_tup1, test_tup2) {\n    let\n    //begin to write code\n", "Adversarial truth": "function and_tuples(test_tup1, test_tup2) {\n    let\n res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 243, "Adversarial Code": "import java.net.*;\nimport java.util.*;\nimport java.applet.*;\nclass Solution {\n    public ArrayList<String> words_ae(String text) {\n        final String var_2 = \"[ae]\\\\w+\";\n        final String var_1 = var_2 ;\n        final String var_0 = var_1 ;\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(var_0 );\n        //begin to write code\n", "Adversarial truth": "import java.net.*;\nimport java.util.*;\nimport java.applet.*;\nclass Solution {\n    public ArrayList<String> words_ae(String text) {\n        final String var_2 = \"[ae]\\\\w+\";\n        final String var_1 = var_2 ;\n        final String var_0 = var_1 ;\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(var_0 );\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            list.add(matcher.group());\n        }\n        return list;\n    }\n}\n", "lang": "java"}
{"task_id": 1, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& c, const vector<int>& d) {\n        return accumulate(c.begin(), c.end(), 0) < accumulate(d.begin(), d.end(), 0);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\n\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& c, const vector<int>& d) {\n        return accumulate(c.begin(), c.end(), 0) < accumulate(d.begin(), d.end(), 0);\n    });\n    return M;\n}\n\n\n", "lang": "cpp"}
{"task_id": 94, "Adversarial Code": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 403, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n\n\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 419, "Adversarial Code": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        long directrix = (int)(c - a * ((b * b) + 1) * 4);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        long directrix = (int)(c - a * ((b * b) + 1) * 4);\n        return directrix;\n    }\n}\n", "lang": "java"}
{"task_id": 454, "Adversarial Code": "def drop_empty(dict1):\n  dict1\\\n\\\n    #begin to write code\n", "Adversarial truth": "def drop_empty(dict1):\n  dict1\\\n\\\n = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "lang": "python"}
{"task_id": 174, "Adversarial Code": "function parabola_focus(a, b, c) {\n    let\n    //begin to write code\n", "Adversarial truth": "function parabola_focus(a, b, c) {\n    let\n focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    return focus;\n}\n\n", "lang": "javascript"}
{"task_id": 121, "Adversarial Code": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        return str;\n    }\n}\n", "lang": "java"}
{"task_id": 160, "Adversarial Code": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        return perimeter;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        return perimeter;\n    }\n//This is a comment line.\n}\n", "lang": "java"}
{"task_id": 185, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n            }\n        }\n        return res;\n    }\n}\ndouble temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n", "lang": "java"}
{"task_id": 283, "Adversarial Code": "class Solution {\n    public static int mzcEal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int mzcEal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n            }\n        }\n        return maxVal;\n    }\n}\n", "lang": "java"}
{"task_id": 351, "Adversarial Code": "def max_occurrences(nums):\n    var_0 = 0\n    max_val = var_0 \n    var_1 = 0\n    result = nums[var_1 ] \n    for i in nums:\n    #begin to write code\n", "Adversarial truth": "def max_occurrences(nums):\n    var_0 = 0\n    max_val = var_0 \n    var_1 = 0\n    result = nums[var_1 ] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "lang": "python"}
{"task_id": 347, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<long> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<long> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] % nums2[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 213, "Adversarial Code": "class Solution {\n    public static int countSetBits(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int count = var_0 ;\n        while (n != var_1 ) {\n            final int var_2 = 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSetBits(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int count = var_0 ;\n        while (n != var_1 ) {\n            final int var_2 = 1;\n            final int var_3 = 1;\n            count += n & var_2 ;\n            n >>= var_3 ;\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 133, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint func_0(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n\n", "lang": "cpp"}
{"task_id": 454, "Adversarial Code": "function dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n    //begin to write code\n", "Adversarial truth": "function dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n\n", "lang": "javascript"}
{"task_id": 40, "Adversarial Code": "function func_0(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function func_0(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 114, "Adversarial Code": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n", "Adversarial truth": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = Math.max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n", "lang": "javascript"}
{"task_id": 74, "Adversarial Code": "function surfacearea_sphere(r) {\n  let surfacearea = 4 * Math.PI * r * r;\n  //begin to write code\n", "Adversarial truth": "function surfacearea_sphere(r) {\n  let surfacearea = 4 * Math.PI * r * r;\n  return surfacearea;\n}\n\n", "lang": "javascript"}
{"task_id": 401, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return l;\n}\n\n\n", "lang": "cpp"}
{"task_id": 427, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n    int x;\n    ss >> x;\n    return x;\n}\n\n\n", "lang": "cpp"}
{"task_id": 162, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_splchar(const string& text) {\n    regex pattern(\"[\\\\\\W_]+\");\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_splchar(const string& text) {\n    regex pattern(\"[\\\\\\W_]+\");\n    return regex_replace(text, pattern, \"\");\n}\n", "lang": "cpp"}
{"task_id": 436, "Adversarial Code": "import java.io.*;\nclass Solution {\nfinal double var_0 = 9.9;\nfinal double var_1 = 9.12;\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n        //begin to write code\n", "Adversarial truth": "import java.io.*;\nfinal double var_0 = 9.9;\nfinal double var_1 = 9.12;\nclass Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n    }\n}\ndouble temp_var_2 = var_0 ;while (temp_var_2 < var_1 ) {System.out.println(var_2 );temp_var_2 = temp_var_2 + var_3 ;}\nfinal String var_2 = \"This function is used to remove a item of a list\";\nfinal int var_3 = 1;\n", "lang": "java"}
{"task_id": 414, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    return x % 2 != 0; \n    });\n    return odd_nums;\n}\n\n\n", "lang": "cpp"}
{"task_id": 323, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n\n", "lang": "cpp"}
{"task_id": 436, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<long> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<long> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n", "lang": "cpp"}
{"task_id": 340, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nlong first_Element(const std::vector<long>& arr, int n, int k) {\n    std::map<long, long> count_map;\n    for (int i = 0; i < n; i = 1 + i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] = (1) + count_map[arr[i]];\n        } else {\n            count_map[arr[i]] = 1;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nlong first_Element(const std::vector<long>& arr, int n, int k) {\n    std::map<long, long> count_map;\n    for (int i = 0; i < n; i = 1 + i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] = (1) + count_map[arr[i]];\n        } else {\n            count_map[arr[i]] = 1;\n        }\n    }\n    for (long i = 0; i < n; i = 1 + i) {\n        if (count_map[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 261, "Adversarial Code": "class Solution {\n    public static List<Integer> func_0(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> func_0(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 243, "Adversarial Code": "import re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n #begin to write code\n", "Adversarial truth": "import re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n return list", "lang": "python"}
{"task_id": 432, "Adversarial Code": "class Solution {\n    public static int largestNeg(int[] list1) {\n        int max = list1[0];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int largestNeg(int[] list1) {\n        int max = list1[0];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n            }\n        }\n        return max;\n    }\n}\n\n", "lang": "java"}
{"task_id": 256, "Adversarial Code": "function square_Sum(n) {\n//begin to write code\n", "Adversarial truth": "function square_Sum(n) {\n    return Math.floor(n * (4 * n * n - 1) / 3);\n}\n\n", "lang": "javascript"}
{"task_id": 222, "Adversarial Code": "function alpha(r, h) {\n    let lateralsurface = 2 * 3.1415 * r * h;\n    //begin to write code\n", "Adversarial truth": "function alpha(r, h) {\n    let lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}\n\n", "lang": "javascript"}
{"task_id": 186, "Adversarial Code": "function find_exponentio(test_tup1, test_tup2) {\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  //begin to write code\n", "Adversarial truth": "function find_exponentio(test_tup1, test_tup2) {\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 219, "Adversarial Code": "//function difinition\nfunction replace_blank(str1, char) {\n//begin to write code\n", "Adversarial truth": "//function difinition\nfunction replace_blank(str1, char) {\n    let str2 = str1.replace(/ /g, char);\n    return str2;\n}\n\n", "lang": "javascript"}
{"task_id": 454, "Adversarial Code": "function dropVmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n    //begin to write code\n", "Adversarial truth": "function dropVmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n", "lang": "javascript"}
{"task_id": 465, "Adversarial Code": "function func_0(var_0) {\n    let var_1 = Math.max(...var_0) + Math.min(...var_0);\n    //begin to write code\n", "Adversarial truth": "function func_0(var_0) {\n    let var_1 = Math.max(...var_0) + Math.min(...var_0);\n    return var_1;\n}\n\n", "lang": "javascript"}
{"task_id": 386, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint mewian_nfnbers(int a, int b, int c) {\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint mewian_nfnbers(int a, int b, int c) {\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\n\n", "lang": "cpp"}
{"task_id": 427, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if\\\n (\\\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if\\\n (\\\ntest_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n                res += 1;\n            }\n        }\n    }\n    return res;\n}\n", "lang": "cpp"}
{"task_id": 498, "Adversarial Code": "def func_0(n) :\n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n", "Adversarial truth": "def func_0(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ", "lang": "python"}
{"task_id": 467, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char c:str1)\n    {\n        if(!(c<='z' && c>='a'))\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char c:str1)\n    {\n        if(!(c<='z' && c>='a'))\n        {\n            res += c;\n        }\n    }\n    return res;\n}", "lang": "cpp"}
{"task_id": 216, "Adversarial Code": "//function definition\nfunction func_0(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    //begin to write code\n", "Adversarial truth": "//function definition\nfunction func_0(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n", "lang": "javascript"}
{"task_id": 117, "Adversarial Code": "class Solution {\n    public static List<String> longWords(int len, String text) {\n        List<String> result = new ArrayList<>();\n        String[] words = text.split(\" \");\n        for (String word : words) {\n            if (word.length() > len) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> longWords(int len, String text) {\n        List<String> result = new ArrayList<>();\n        String[] words = text.split(\" \");\n        for (String word : words) {\n            if (word.length() > len) {\n                result.add(word);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 351, "Adversarial Code": "#include <iostream>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int max_val = var_0 ;\n    int result = nums[var_1 ];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_occurrences(vector<int> nums) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int max_val = var_0 ;\n    int result = nums[var_1 ];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 182, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> function(const vector<int>& test_vec) {\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\n\nvector<int> function(const vector<int>& test_vec) {\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n  return vector<int>(unique_elements.begin(), unique_elements.end());\n}\n\n\n", "lang": "cpp"}
{"task_id": 346, "Adversarial Code": "function max(array) {\n  let result = Math.max(...array.flat().map(Number));\n  //begin to write code\n", "Adversarial truth": "function max(array) {\n  let result = Math.max(...array.flat().map(Number));\n  return result;\n}\n\n", "lang": "javascript"}
{"task_id": 83, "Adversarial Code": "function index_minimum(testList) {\n  const var_0 = 1;\n  const var_1 = 1;\n  //begin to write code\n", "Adversarial truth": "function index_minimum(testList) {\n  const var_0 = 1;\n  const var_1 = 1;\n  const var_2 = 0;\n  const res = testList.reduce((min, item) => (item[var_0 ] < min[var_1 ] ? item : min))[var_2 ];\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 267, "Adversarial Code": "class Solution {\n    public\n static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n                break;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 14, "Adversarial Code": "def find_Product(var_0,var_2):\n    var_0.sort() \n    var_3 = 1\n    for var_1 in range(0,var_2,1): \n    #begin to write code\n", "Adversarial truth": "def find_Product(var_0,var_2): \n    var_0.sort() \n    var_3 = 1\n    for var_1 in range(0,var_2,1): \n        if (var_0[var_1 - 1] != var_0[var_1]): \n            var_3 = var_3 * var_0[var_1] \n    return var_3; ", "lang": "python"}
{"task_id": 93, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    }\n    return input_list;\n}\n\n\n", "lang": "cpp"}
{"task_id": 388, "Adversarial Code": "import argparse\nimport sys\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "import argparse\nimport sys\ndef bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python"}
{"task_id": 79, "Adversarial Code": "function len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n        //begin to write code\n", "Adversarial truth": "function len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n            max = i.length;\n        }\n    }\n    return max;\n}\n\n", "lang": "javascript"}
{"task_id": 16, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> remove(const vector<string>& list) {\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            const char var_2 = '9';\n            const char var_3 = '0';\n            const char var_0 = var_2 ;\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> remove(const vector<string>& list) {\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            const char var_2 = '9';\n            const char var_3 = '0';\n            const char var_0 = var_2 ;\n            const char var_1 = var_3 ;\n            if(!(onechar<=var_0  && onechar >=var_1 ))\n            {\n                res.push_back(onechar);\n            }\n        }\n        result.push_back(res);\n        \n    }\n    return result;\n}", "lang": "cpp"}
{"task_id": 340, "Adversarial Code": "#include <thread>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    const auto var_0 = 0;\n    const auto var_3 = 0;\n    const auto var_4 = -1;\n    std::map<int, int> count_map;\n    for (int i = var_0 ; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            const auto var_1 = 1;\n            count_map[arr[i]] += var_1 ;\n        } else {\n//begin to write code\n", "Adversarial truth": "#include <thread>\n\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    const auto var_0 = 0;\n    const auto var_3 = 0;\n    const auto var_4 = -1;\n    std::map<int, int> count_map;\n    for (int i = var_0 ; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            const auto var_1 = 1;\n            count_map[arr[i]] += var_1 ;\n        } else {\n            const auto var_2 = 1;\n            count_map[arr[i]] = var_2 ;\n        }\n    }\n    for (int i = var_3 ; i < n; ++i) {\n        if (count_map[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return var_4 ;\n}\n\n\n", "lang": "cpp"}
{"task_id": 1, "Adversarial Code": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 131, "Adversarial Code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "Adversarial truth": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "lang": "python"}
{"task_id": 441, "Adversarial Code": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n        } else {\n            return null;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 43, "Adversarial Code": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n        //begin to write code\n", "Adversarial truth": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n    }\n    let index = 0;\n    for (let j = 0; j <= max_value; j++) {\n        for (let a = 0; a < buckets[j]; a++) {\n            my_list[index] = j;\n            index += 1;\n        }\n    }\n    return my_list;\n}\n\n", "lang": "javascript"}
{"task_id": 213, "Adversarial Code": "def\\\n count_Set_Bits(n): \n    count = 0\n    while (n): \n    #begin to write code\n", "Adversarial truth": "\n\ndef\\\n count_Set_Bits(n): \n    count = 0\n\n\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n", "lang": "python"}
{"task_id": 164, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n", "lang": "cpp"}
{"task_id": 262, "Adversarial Code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "lang": "python"}
{"task_id": 240, "Adversarial Code": "function insert_element(List, ele) {\n    let result = [];\n    for (let i of List) {\n    //begin to write code\n", "Adversarial truth": "function insert_element(List, ele) {\n    let result = [];\n    for (let i of List) {\n        result.push(ele, i);\n    }\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 71, "Adversarial Code": "import math\ndef func_0(x):\n  func=(4/3)*math.pi*x*x*x\n  #begin to write code\n", "Adversarial truth": "import math\ndef func_0(x):\n  func=(4/3)*math.pi*x*x*x\n  return func", "lang": "python"}
{"task_id": 250, "Adversarial Code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python"}
{"task_id": 381, "Adversarial Code": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res\n        //begin to write code\n", "Adversarial truth": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res\n.push(Math.max(i, (res[Math.floor(i / 2)] \n                        + res[Math.floor(i / 3)]\n                        + res[Math.floor(i / 4)]\n                        + res[Math.floor(i / 5)])));\n        i = i + 1;\n    }\n    return res[n];\n}\n\n", "lang": "javascript"}
{"task_id": 357, "Adversarial Code": "class Solution {\n    public static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n        double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n        double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            res[i] = test_tup;\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 183, "Adversarial Code": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int last_digit = temp % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int last_digit = temp % 10;\n            temp = temp / 10;\n            dec_value += last_digit * base;\n            base = base * 8;\n        }\n        return dec_value;\n    }\n}\n", "lang": "java"}
{"task_id": 439, "Adversarial Code": "//This is a comment line.\nfunction extractString(str, l) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction extractString(str, l) {\n    const result = str.filter(e => e.length === l);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 152, "Adversarial Code": "from math import tan, pi\ndef tan(var_2,var_1):\n  var_0 = var_2 * (var_1 ** 2) / (4 * tan(pi / var_2))\n  #begin to write code\n", "Adversarial truth": "from math import tan, pi\ndef tan(var_2,var_1):\n  var_0 = var_2 * (var_1 ** 2) / (4 * tan(pi / var_2))\n  return var_0", "lang": "python"}
{"task_id": 53, "Adversarial Code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "Adversarial truth": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "lang": "python"}
{"task_id": 394, "Adversarial Code": "def check_tuplex(tuplex,tuple1):\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "lang": "python"}
{"task_id": 163, "Adversarial Code": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n", "Adversarial truth": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n        }\n        result[k].push(v);\n    }\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 415, "Adversarial Code": "//This is a comment line.\nfunction filter_oddnumbers(nums) {\n    const var_0 = 2;\n    //begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction filter_oddnumbers(nums) {\n    const var_0 = 2;\n    const var_1 = 0;\n    const odd_nums = nums.filter(x => x % var_0  !== var_1 );\n    return odd_nums;\n}\n\n", "lang": "javascript"}
{"task_id": 113, "Adversarial Code": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n    }\n\n\n}\n\n", "lang": "java"}
{"task_id": 330, "Adversarial Code": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<int> t(s.begin(), s.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<int> t(s.begin(), s.end());\n    sort(t.begin(), t.end());\n    return t;\n}\n\n\n", "lang": "cpp"}
{"task_id": 441, "Adversarial Code": "class Solution {\n    public static Integer lossAmount(int loss, int error) {\n        if (error > loss) {\n            int result = error - loss;\n            return result;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Integer lossAmount(int loss, int error) {\n        if (error > loss) {\n            int result = error - loss;\n            return result;\n        } else {\n            return null;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 195, "Adversarial Code": "const stream = require('stream');\nfunction concatenateElements(testTup) {\n//begin to write code\n", "Adversarial truth": "const stream = require('stream');\nfunction concatenateElements(testTup) {\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 256, "Adversarial Code": "class Solution {\n    public static int square_Sum(int m) {\n        return (int)(m * (4 * m * m - 1) / 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int m) {\n        return (int)(m * (4 * m * m - 1) / 3);\n    }\n}\n", "lang": "java"}
{"task_id": 166, "Adversarial Code": "const dns = require('dns');\nfunction answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n        //begin to write code\n", "Adversarial truth": "const dns = require('dns');\nfunction answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n    } else {\n        return -1;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 100, "Adversarial Code": "class Solution {\n    public\n List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n        }\n        return new ArrayList<>(resultSet);\n    }\n}\n", "lang": "java"}
{"task_id": 202, "Adversarial Code": "class Solution {\n    public\n static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 399, "Adversarial Code": "#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\n\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = std::toupper(part[0]);\n            result += part;\n        }\n    }\n\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 317, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n    result.insert(result.end(), list1.begin(), list1.begin() + n);\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 130, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    {\n        size_t i = 0;\n        while(i < list1.size()){\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    {\n        size_t i = 0;\n        while(i < list1.size()){\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n            ++i;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 251, "Adversarial Code": "class Solution {\n    public static List<List<Object>> sklrtGdoKaigh(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> sklrtGdoKaigh(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        return Arrays.asList(firstPart, secondPart);\n    }\n}\n", "lang": "java"}
{"task_id": 121, "Adversarial Code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  #begin to write code\n", "Adversarial truth": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "lang": "python"}
{"task_id": 383, "Adversarial Code": "function\n checkDistinct(testArr) {\n  let res = true;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n    //begin to write code\n", "Adversarial truth": "\n\nfunction\n checkDistinct(testArr) {\n  let res = true;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = false;\n      break;\n    }\n    temp.add(ele);\n  }\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 284, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_div(int number) {\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (0 == number % i) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_div(int number) {\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (0 == number % i) {\n            divisors.push_back(i);\n        }\n    }\n    return std::accumulate(divisors.begin(), divisors.end(), 0);\n}\n\n\n", "lang": "cpp"}
{"task_id": 497, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n    while (n >= 1) {\n        count += 1;\n        sm += n;\n        n -= 2;\n    }\n    return sm / count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 329, "Adversarial Code": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (long i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (long i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                if (count == 3) {\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 343, "Adversarial Code": "def tn_ap(a,n,d):\n  tn\\\n  #begin to write code\n", "Adversarial truth": "def tn_ap(a,n,d):\n  tn\\\n = a + (n - 1) * d\n  return tn\n", "lang": "python"}
{"task_id": 354, "Adversarial Code": "def count_Digit(n):\n    count = 0\n    while n != 0:\n    #begin to write code\n", "Adversarial truth": "def count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n\n\n    return count", "lang": "python"}
{"task_id": 210, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 407, "Adversarial Code": "class Solution {\n    public static List<Object> func_0(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> func_0(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java"}
{"task_id": 383, "Adversarial Code": "function checkDistinct(testArr) {\n  let res = true;\n//This is a comment line.\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n    //begin to write code\n", "Adversarial truth": "function checkDistinct(testArr) {\n  let res = true;\n//This is a comment line.\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = false;\n      break;\n    }\n    temp.add(ele);\n  }\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 259, "Adversarial Code": "function func_0(var_0, var_2) {\n    let var_3 = 0;\n    for (let var_1 = 0; var_1 < var_2; var_1 += 2) {\n        if (var_0[var_1] % 2 === 0) {\n        //begin to write code\n", "Adversarial truth": "function func_0(var_0, var_2) {\n    let var_3 = 0;\n    for (let var_1 = 0; var_1 < var_2; var_1 += 2) {\n        if (var_0[var_1] % 2 === 0) {\n            var_3 += var_0[var_1];\n        }\n    }\n    return var_3;\n}\n\n", "lang": "javascript"}
{"task_id": 259, "Adversarial Code": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 2;\n        int sum = var_0 ;\n        for (int i = var_1 ; i < n; i += var_2 ) {\n            final int var_3 = 2;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 2;\n        int sum = var_0 ;\n        for (int i = var_1 ; i < n; i += var_2 ) {\n            final int var_3 = 2;\n            final int var_4 = 0;\n            if (arr[i] % var_3  == var_4 ) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 323, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 403, "Adversarial Code": "def overlapping(list1,list2):\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n", "Adversarial truth": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "lang": "python"}
{"task_id": 1, "Adversarial Code": "class Solution {\n    public int[][] sligMagrrc(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[][] sligMagrrc(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 146, "Adversarial Code": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            //begin to write code\n", "Adversarial truth": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        grouped.push([count, current]);\n    }\n    return grouped;\n}\n\n", "lang": "javascript"}
{"task_id": 252, "Adversarial Code": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n", "Adversarial truth": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    sortedKeys.forEach(key => {\n    sortedDict[key] = d[key];\n    });\n    return sortedDict;\n}", "lang": "javascript"}
{"task_id": 271, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd\\\n::\\\nvector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd\\\n::\\\nvector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n\n\n\n\n\n", "lang": "cpp"}
{"task_id": 445, "Adversarial Code": "function reverseStringList(stringList) {\n//begin to write code\n", "Adversarial truth": "function reverseStringList(stringList) {\n    return stringList.map(s => s.split('').reverse().join(''));\n}\n\n", "lang": "javascript"}
{"task_id": 308, "Adversarial Code": "import re\nimport re\ndef find_long_word(text):\n  var_0 = r\"\\b\\w{5}\\b\"\n  #begin to write code\n", "Adversarial truth": "import re\nimport re\ndef find_long_word(text):\n  var_0 = r\"\\b\\w{5}\\b\"\n  return (re.findall(var_0 , text))", "lang": "python"}
{"task_id": 358, "Adversarial Code": "function lateralsurface_cuboid(x, y, alpha) {\n  let c = 2 * alpha * (x + y);\n  //begin to write code\n", "Adversarial truth": "function lateralsurface_cuboid(x, y, alpha) {\n  let c = 2 * alpha * (x + y);\n  return c;\n}\n\n", "lang": "javascript"}
{"task_id": 311, "Adversarial Code": "const buffer = require('buffer');\nconst child_process = require('child_process');\nfunction position_min(list1) {\n    let min_val = Math.min(...list1);\n    let min_result = [];\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "const buffer = require('buffer');\nconst child_process = require('child_process');\nfunction position_min(list1) {\n    let min_val = Math.min(...list1);\n    let min_result = [];\n//This is a comment line.\n    list1.forEach((j, i) => {\n        if (j === min_val) {\n            min_result.push(i);\n        }\n    });\n    return min_result;\n}\n\n", "lang": "javascript"}
{"task_id": 257, "Adversarial Code": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n    }\n}\n", "lang": "java"}
{"task_id": 341, "Adversarial Code": "def unique_Characters(str):\n    for i in range(len(str)):\n        var_0 = 1\n        for j in range(i + var_0 ,len(str)): \n            if (str[i] == str[j]):\n            #begin to write code\n", "Adversarial truth": "def unique_Characters(str):\n    for i in range(len(str)):\n        var_0 = 1\n        for j in range(i + var_0 ,len(str)): \n            if (str[i] == str[j]):\n\n                var_1 = False\n                return var_1 ;\n    var_2 = True\n    return var_2 ;", "lang": "python"}
{"task_id": 172, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 82, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n\n\n    } else if (a == 0) {\n        return 0;\n    } else if (b == 1) {\n        return a;\n    } else {\n        return a * power(a, b - 1);\n    }\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 320, "Adversarial Code": "#include<cassert>\n#include <iostream>\nint count_unset_bits(long n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\nint count_unset_bits(long n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n            count += 1;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 434, "Adversarial Code": "class Solution {\n    public static int[][] indexMultiplication(long[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] * test_tup2[i][j];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] indexMultiplication(long[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] * test_tup2[i][j];\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 190, "Adversarial Code": "def chkList(lst):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def chkList(lst): \n#This is a comment line.\n#This is a comment line.\n    return len(set(lst)) == 1", "lang": "python"}
{"task_id": 449, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extracg(const std::vector<std::vector<int>>& ost) {\n    std::vector<int> result;\n    for (auto& item : ost) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nstd::vector<int> Extracg(const std::vector<std::vector<int>>& ost) {\n    std::vector<int> result;\n    for (auto& item : ost) {\n        result.push_back(item[0]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 241, "Adversarial Code": "#include <fstream>\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "Adversarial truth": "#include <fstream>\n\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\n\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    return std::make_pair(std::abs(numbers), std::arg(numbers));\n}\n\n\n", "lang": "cpp"}
{"task_id": 387, "Adversarial Code": "class Solution {\n    public static int func_0(List<Object> objects) {\n        int result = 0;\n        for (Object object : objects) {\n            if (object instanceof Integer) {\n                String string = Integer.toString((Integer) object);\n                for (char character : string.toCharArray()) {\n                    if (Character.isDigit(character)) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(List<Object> objects) {\n        int result = 0;\n        for (Object object : objects) {\n            if (object instanceof Integer) {\n                String string = Integer.toString((Integer) object);\n                for (char character : string.toCharArray()) {\n                    if (Character.isDigit(character)) {\n                        result += Character.getNumericValue(character);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 116, "Adversarial Code": "def multiply_int(c, y):\n    if y < 0:\n        return -multiply_int(c, -y)\n    elif y == 0:\n        return 0\n        #begin to write code\n", "Adversarial truth": "def multiply_int(c, y):\n    if y < 0:\n        return -multiply_int(c, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return c\n    else:\n        return c + multiply_int(c, y - 1)", "lang": "python"}
{"task_id": 91, "Adversarial Code": "import sys\ndef snake_to_camel(word):\n        import re\n        #begin to write code\n", "Adversarial truth": "import sys\ndef snake_to_camel(word):\n        import re\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "lang": "python"}
{"task_id": 67, "Adversarial Code": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        if (count % 2 != 0) {\n            ans += 1;\n        }\n        return ans;\n    }\n}\n", "lang": "java"}
{"task_id": 127, "Adversarial Code": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        final int var_0 = 2;\n        final int var_1 = 1;\n        if (n % var_0  == var_1 ) {\n            final boolean var_2 = false;\n            return var_2 ;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        final int var_0 = 2;\n        final int var_1 = 1;\n        if (n % var_0  == var_1 ) {\n            final boolean var_2 = false;\n            return var_2 ;\n        } else {\n            final boolean var_3 = true;\n            return var_3 ;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 398, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nlong min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<long>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\n\nlong min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<long>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n            result_min = product;\n        }\n    }\n    return result_min;\n}\n\n\n", "lang": "cpp"}
{"task_id": 393, "Adversarial Code": "function minimum(a, b) {\n    if (a <= b) {\n        return a;\n        //begin to write code\n", "Adversarial truth": "function minimum(a, b) {\n\n\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 282, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble otherside_rightangle(double w, double h) {\n    double s = std::sqrt((w * w) + (h * h));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble otherside_rightangle(double w, double h) {\n    double s = std::sqrt((w * w) + (h * h));\n    return s;\n}\n\n\n", "lang": "cpp"}
{"task_id": 88, "Adversarial Code": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n\n\n\n\n\n\n    }\n}\n", "lang": "java"}
{"task_id": 357, "Adversarial Code": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  #begin to write code\n", "Adversarial truth": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res) ", "lang": "python"}
{"task_id": 259, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <vector>\nint\\\n sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint\\\n sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n\n\n\n\n\n", "lang": "cpp"}
{"task_id": 449, "Adversarial Code": "#include <vector>\n#include <set>\n#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n        const auto var_1 = 0;\n//begin to write code\n", "Adversarial truth": "#include <vector>\n#include <set>\n#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n        const auto var_1 = 0;\n        const auto var_0 = var_1 ;\n        result.push_back(item[var_0 ]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 192, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n    int x = n2 ^ n1;\n    int setBits = 0;\n    while (x > 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint hamming_Distance(int n1, int n2) {\n    int x = n2 ^ n1;\n    int setBits = 0;\n    while (x > 0) {\n        setBits += 1 & x;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n\n", "lang": "cpp"}
{"task_id": 157, "Adversarial Code": "class Solution {\n    public\n static int frequency(int[] a, int x) {\n        int count = 0;\n        for (int i : a) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int frequency(int[] a, int x) {\n        int count = 0;\n        for (int i : a) {\n            if (i == x) count += 1;\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 180, "Adversarial Code": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 93, "Adversarial Code": "class Solution {\n    public List<List<String>> sortSuylihgs(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<List<String>> sortSuylihgs(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            result.add(sublist);\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 24, "Adversarial Code": "class Solution {\n    public\n static int find_rect_num(int n) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int find_rect_num(int n) {\n        return n * (n + 1);\n    }\n}\n", "lang": "java"}
{"task_id": 53, "Adversarial Code": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n", "Adversarial truth": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    return subjectMarks;\n}\n\n", "lang": "javascript"}
{"task_id": 148, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    }\\\n else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    }\\\n else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n\n    if ((month == \"March\") && (days > 19)) {\n        season = \"spring\";\n    } else if ((month == \"June\") && (days > 20)) {\n        season = \"summer\";\n    } else if ((month == \"September\") && (days > 21)) {\n        season = \"autumn\";\n    } else if ((month == \"December\") && (days > 20)) {\n        season = \"winter\";\n    }\n\n    return season;\n}\n\n\n", "lang": "cpp"}
{"task_id": 491, "Adversarial Code": "function find(n, m) {\n    let r = n % m;\n    //begin to write code\n", "Adversarial truth": "function find(n, m) {\n    let r = n % m;\n    return r;\n}\n\n", "lang": "javascript"}
{"task_id": 91, "Adversarial Code": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n", "lang": "java"}
{"task_id": 387, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\n\nusing namespace std;\n\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n                result += c - '0';\n            }\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 418, "Adversarial Code": "function and_tuples(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    //begin to write code\n", "Adversarial truth": "function and_tuples(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 194, "Adversarial Code": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n    }\n}\n\n", "lang": "java"}
{"task_id": 343, "Adversarial Code": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  #begin to write code\n", "Adversarial truth": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn", "lang": "python"}
{"task_id": 271, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp /= 10;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 133, "Adversarial Code": "function sum_Pairs(arr, m) {\n    let sum = 0;\n    for (let i = m - 1; i >= 0; i--) {\n    //begin to write code\n", "Adversarial truth": "function sum_Pairs(arr, m) {\n    let sum = 0;\n    for (let i = m - 1; i >= 0; i--) {\n        sum += i * arr[i] - (m - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n", "lang": "javascript"}
{"task_id": 488, "Adversarial Code": "def\\\n diameter_circle(r):\n #begin to write code\n", "Adversarial truth": "\n\ndef\\\n diameter_circle(r):\n  diameter=2*r\n  return diameter", "lang": "python"}
{"task_id": 6, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint square_perimeter(int n) {\n    int p = 4 * n;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint square_perimeter(int n) {\n    int p = 4 * n;\n    return p;\n}\n\n\n", "lang": "cpp"}
{"task_id": 298, "Adversarial Code": "def\\\n maximum(a,b):   \n    if a >= b: \n    #begin to write code\n", "Adversarial truth": "def\\\n maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "lang": "python"}
{"task_id": 174, "Adversarial Code": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double y, double c) {\n    std::pair<double, double> focus = std::make_pair((-y / (2 * a)), ((4 * a * c - y * y + 1) / (4 * a)));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double y, double c) {\n    std::pair<double, double> focus = std::make_pair((-y / (2 * a)), ((4 * a * c - y * y + 1) / (4 * a)));\n    return focus;\n}\n\n\n", "lang": "cpp"}
{"task_id": 184, "Adversarial Code": "def first(var_0,var_6,var_4):\n    var_2 = 0\n    var_1 = var_4 - 1\n    var_5 = -1  \n    while (var_2 <= var_1):\n        var_3 = (var_2 + var_1) // 2 \n        if var_0[var_3] > var_6:\n        #begin to write code\n", "Adversarial truth": "def first(var_0,var_6,var_4): \n    var_2 = 0\n    var_1 = var_4 - 1\n    var_5 = -1  \n    while (var_2 <= var_1):\n        var_3 = (var_2 + var_1) // 2 \n        if var_0[var_3] > var_6:\n            var_1 = var_3 - 1\n        elif var_0[var_3] < var_6:\n            var_2 = var_3 + 1\n        else:\n            var_5 = var_3\n            var_1 = var_3 - 1\n    return var_5", "lang": "python"}
{"task_id": 253, "Adversarial Code": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n #begin to write code\n", "Adversarial truth": "def dog_age(h_age):\n if h_age < 0:\n \texit()\n elif h_age <= 2:\n\t d_age = h_age * 10.5\n else:\n\t d_age = 21 + (h_age - 2)*4\n return d_age", "lang": "python"}
{"task_id": 113, "Adversarial Code": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n    }\n}", "lang": "java"}
{"task_id": 258, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n        //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_2 = temp_var_2 + 1;}\n    }\n}\n", "lang": "java"}
{"task_id": 400, "Adversarial Code": "#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\n\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = std::toupper(part[0]);\n            result = result + (part);\n        }\n    }\n\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 414, "Adversarial Code": "class Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n        long ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr = 1 + ctr;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n        long ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr = 1 + ctr;\n            }\n        }\n        return ctr;\n    }\n}\n", "lang": "java"}
{"task_id": 418, "Adversarial Code": "const os = require('os');\nfunction and_tuples(test_tup1, test_tup2) {\n//begin to write code\n", "Adversarial truth": "const os = require('os');\nfunction and_tuples(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 26, "Adversarial Code": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n            }\n        }\n        Collections.sort(intPart);\n        Collections.sort(strPart);\n        List<Object> result = new ArrayList<>(intPart);\n        result.addAll(strPart);\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 71, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\n//This is a comment line.\ndouble volume_sphere(double r) {\n//begin to write code\n", "Adversarial truth": "\n//This is a comment line.\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_sphere(double r) {\n    double volume = (4.0 / 3.0) * M_PI * r * r * r;\n    return volume;\n}\n\n\n", "lang": "cpp"}
{"task_id": 15, "Adversarial Code": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n      //begin to write code\n", "Adversarial truth": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n\n\n      if (ele !== K) {\n        res = false;\n      }\n    }\n  }\n  return res;\n\n\n}\n\n", "lang": "javascript"}
{"task_id": 492, "Adversarial Code": "class Solution {\n    public\n List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 354, "Adversarial Code": "class Solution {\n    public\n static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n\n\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 150, "Adversarial Code": "class Solution {\n    public static List<Integer> union(List<Integer> list1, List<Integer> list2) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> union(List<Integer> list1, List<Integer> list2) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 85, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int c = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint divisor(int n) {\n    int c = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            c++;\n        }\n    }\n    return c;\n}\n\n\n", "lang": "cpp"}
{"task_id": 487, "Adversarial Code": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n                gcd = k;\n                break;\n            }\n        }\n        return gcd;\n    }\n}\n\n", "lang": "java"}
{"task_id": 269, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n\n\n", "lang": "cpp"}
{"task_id": 199, "Adversarial Code": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    //begin to write code\n", "Adversarial truth": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    let found = get_char.test(string);\n    return !found;\n}\n\n", "lang": "javascript"}
{"task_id": 398, "Adversarial Code": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n        }\n        return result_min;\n    }\n}\n", "lang": "java"}
{"task_id": 14, "Adversarial Code": "class Solution {\n    public\n static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if\n            //begin to write code\n", "Adversarial truth": "class Solution {\n\n\n    public\n static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if\n (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n        }\n        return prod;\n    }\n}", "lang": "java"}
{"task_id": 260, "Adversarial Code": "function even_Power_Sum(n) { \n    let sum = 0; \n    for\n (let i = 1; i <= n; i++) { \n //begin to write code\n", "Adversarial truth": "function even_Power_Sum(n) { \n    let sum = 0; \n    for\n (let i = 1; i <= n; i++) { \n        let j = 2 * i; \n        sum += Math.pow(j, 5); \n    } \n    return sum; \n} \n\n", "lang": "javascript"}
{"task_id": 345, "Adversarial Code": "function angle(A, B) {\n    const angle = 180 - (A + B);\n    //begin to write code\n", "Adversarial truth": "function angle(A, B) {\n    const angle = 180 - (A + B);\n    return angle;\n}\n\n", "lang": "javascript"}
{"task_id": 460, "Adversarial Code": "def func_0(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "Adversarial truth": "def func_0(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "lang": "python"}
{"task_id": 260, "Adversarial Code": "function even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let pow = 2 * i; \n        //begin to write code\n", "Adversarial truth": "function even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let pow = 2 * i; \n        sum += Math.pow(pow, 5); \n    } \n    return sum; \n} \n\n", "lang": "javascript"}
{"task_id": 159, "Adversarial Code": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n", "lang": "javascript"}
{"task_id": 200, "Adversarial Code": "function clunt_Num(n) {\n    if (n === 1) {\n        return 1;\n        //begin to write code\n", "Adversarial truth": "function clunt_Num(n) {\n    if (n === 1) {\n        return 1;\n    }\n    let count = Math.pow(2, n - 2);\n    return count;\n}\n\n", "lang": "javascript"}
{"task_id": 107, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static List<String> stringToList(String str) {\n    //begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public static List<String> stringToList(String str) {\n        return Arrays.asList(str.split(\" \"));\n    }\n}\n", "lang": "java"}
{"task_id": 203, "Adversarial Code": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    //begin to write code\n", "Adversarial truth": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    return degree;\n}\n\n", "lang": "javascript"}
{"task_id": 219, "Adversarial Code": "//function difinition\nfunction replace_blank(str1, char) {\n//begin to write code\n", "Adversarial truth": "//function difinition\nfunction replace_blank(str1, char) {\n    let str2 = str1.replace(/ /g, char);\n    return str2;\n}\n\n\n", "lang": "javascript"}
{"task_id": 203, "Adversarial Code": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n    double\\\n//begin to write code\n", "Adversarial truth": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble degree_radian(double radian) {\n    double\\\n degree = radian * (180.0 / M_PI);\n    return degree;\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 199, "Adversarial Code": "function is_allowed_specific_char(char) {\n    let regex = new RegExp('[^a-zA-Z0-9.]');\n    //begin to write code\n", "Adversarial truth": "function is_allowed_specific_char(char) {\n    let regex = new RegExp('[^a-zA-Z0-9.]');\n    let match = regex.test(char);\n    return !match;\n}\n\n", "lang": "javascript"}
{"task_id": 393, "Adversarial Code": "class Solution {\n    public static int solve(int a, int y) {\n        if (a <= y) {\n            return a;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int a, int y) {\n        if (a <= y) {\n            return a;\n        } else {\n            return y;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 415, "Adversarial Code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n", "Adversarial truth": "def filter_oddnumbers(nums):\n\n\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "lang": "python"}
{"task_id": 134, "Adversarial Code": "def max_Abs_Diff(arr,n):\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n", "Adversarial truth": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "lang": "python"}
{"task_id": 9, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool ih_wllwaoo(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool ih_wllwaoo(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n    while (x % 2 == 0) {\n        x = x / 2;\n        p = p + 1;\n        if (p == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp"}
{"task_id": 148, "Adversarial Code": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n     season = 'winter'\n elif month in ('April', 'May', 'June'):\n     season = 'spring'\n elif month in ('July', 'August', 'September'):\n     season = 'summer'\n else:\n     season = 'autumn'\n if (month == 'March') and (days > 19):\n     season = 'spring'\n     #begin to write code\n", "Adversarial truth": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n     season = 'winter'\n elif month in ('April', 'May', 'June'):\n     season = 'spring'\n elif month in ('July', 'August', 'September'):\n     season = 'summer'\n else:\n     season = 'autumn'\n if (month == 'March') and (days > 19):\n     season = 'spring'\n elif (month == 'June') and (days > 20):\n     season = 'summer'\n elif (month == 'September') and (days > 21):\n     season = 'autumn'\n elif (month == 'October') and (days > 21):\n     season = 'autumn'\n elif (month == 'November') and (days > 21):\n     season = 'autumn'\n elif (month == 'December') and (days > 20):\n     season = 'winter'\n return season\n", "lang": "python"}
{"task_id": 197, "Adversarial Code": "function is_decimal(value) {\n    const regex = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    //begin to write code\n", "Adversarial truth": "function is_decimal(value) {\n    const regex = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    const test = regex.test(value);\n    return Boolean(test);\n}\n\n", "lang": "javascript"}
{"task_id": 191, "Adversarial Code": "class Solution {\n    public static String remoeeEvem(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remoeeEvem(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n", "lang": "java"}
{"task_id": 94, "Adversarial Code": "def count(lst):\n    #begin to write code\n", "Adversarial truth": "def count(lst):   \n    return sum(lst) ", "lang": "python"}
{"task_id": 459, "Adversarial Code": "def merge(var_3):\n  var_2 = tuple(var_0 + var_1 for var_0, var_1 in zip(var_3, var_3[1:]))\n  #begin to write code\n", "Adversarial truth": "def merge(var_3):\n  var_2 = tuple(var_0 + var_1 for var_0, var_1 in zip(var_3, var_3[1:]))\n  return (var_2) ", "lang": "python"}
{"task_id": 121, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        //begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        return str;\n    }\n}\n", "lang": "java"}
{"task_id": 211, "Adversarial Code": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                break;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                break;\n//This is a comment line.\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 143, "Adversarial Code": "def hpecifred_element(children, name):\n    elements = [num[name] for num in children]\n    #begin to write code\n", "Adversarial truth": "def hpecifred_element(children, name):\n    elements = [num[name] for num in children]\n    return elements", "lang": "python"}
{"task_id": 247, "Adversarial Code": "def n(a):\n   n = len(list(filter(lambda i: (i%2 != 0) , a)))\n   #begin to write code\n", "Adversarial truth": "def n(a):\n   n = len(list(filter(lambda i: (i%2 != 0) , a)))\n   return n", "lang": "python"}
{"task_id": 435, "Adversarial Code": "#include <memory>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n//begin to write code\n", "Adversarial truth": "#include <memory>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n}\n\n\n", "lang": "cpp"}
{"task_id": 96, "Adversarial Code": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                        count += 1;\n                    }\n                    k = k / 16;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 324, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n\n", "lang": "cpp"}
{"task_id": 481, "Adversarial Code": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n    return found;\n}\n\n\n\n", "lang": "javascript"}
{"task_id": 425, "Adversarial Code": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 13, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint binary_to_decimal(int binary) {\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        long dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint binary_to_decimal(int binary) {\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        long dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n        binary /= 10;\n        i++;\n    }\n    return decimal;\n}\n\n\n", "lang": "cpp"}
{"task_id": 69, "Adversarial Code": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n    }\n}\n", "lang": "java"}
{"task_id": 400, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "Adversarial truth": "//This is a comment line.\nclass Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n", "lang": "java"}
{"task_id": 403, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool oeerlapking(const std::vector<int>& ear_4, const std::vector<int>& var_5) {\n    int var_0 = ear_4.size();\n    int var_1 = var_5.size();\n    for (int var_2 = 0; var_2 < var_0; var_2++) {\n        for (int var_3 = 0; var_3 < var_1; var_3++) {\n            if (ear_4[var_2] == var_5[var_3]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool oeerlapking(const std::vector<int>& ear_4, const std::vector<int>& var_5) {\n    int var_0 = ear_4.size();\n    int var_1 = var_5.size();\n    for (int var_2 = 0; var_2 < var_0; var_2++) {\n        for (int var_3 = 0; var_3 < var_1; var_3++) {\n            if (ear_4[var_2] == var_5[var_3]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp"}
{"task_id": 345, "Adversarial Code": "class Solution {\n    public static int frnd_zngle(int a, int b) {\n        int c = 180 - (a + b);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int frnd_zngle(int a, int b) {\n        int c = 180 - (a + b);\n        return c;\n    }\n}\n", "lang": "java"}
{"task_id": 435, "Adversarial Code": "class Solution {\n    public static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n            }\n        }\n//This is a comment line.\n        return count;\n//This is a comment line.\n    }\n}\n", "lang": "java"}
{"task_id": 201, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fofrth_Kodvr_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fofrth_Kodvr_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n\n\n", "lang": "cpp"}
{"task_id": 54, "Adversarial Code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t#begin to write code\n", "Adversarial truth": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "lang": "python"}
{"task_id": 89, "Adversarial Code": "function next_smallest_palindrome(num) {\n    const var_0 = 1;\n    for (let i = num + var_0 ; i < Number.MAX_SAFE_INTEGER; i++) {\n        const var_1 = '';\n        const var_2 = '';\n        //begin to write code\n", "Adversarial truth": "function next_smallest_palindrome(num) {\n    const var_0 = 1;\n    for (let i = num + var_0 ; i < Number.MAX_SAFE_INTEGER; i++) {\n        const var_1 = '';\n        const var_2 = '';\n        if (i.toString() === i.toString().split(var_1 ).reverse().join(var_2 )) {\n            return i;\n        }\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 411, "Adversarial Code": "def func_0(cube):\n    sum = 0\n    for c in range(1, cube + 1): \n    #begin to write code\n", "Adversarial truth": "def func_0(cube):  \n    sum = 0\n    for c in range(1, cube + 1): \n        sum += c * c * c  \n    return round(sum / cube, 6) ", "lang": "python"}
{"task_id": 258, "Adversarial Code": "def ascii_value(k):\n  ch=k\n  #begin to write code\n", "Adversarial truth": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "lang": "python"}
{"task_id": 324, "Adversarial Code": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double\n total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double\n total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        return total;\n    }\n}\n\n", "lang": "java"}
{"task_id": 273, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool xhexp_eovnvnt(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\nbool xhexp_eovnvnt(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 444, "Adversarial Code": "class Solution {\n    public static boolean checkMonthnumbNumber(int mlmthnfm2) {\n        if(mlmthnfm2==1 || mlmthnfm2==3 || mlmthnfm2==5 || mlmthnfm2==7 || mlmthnfm2==8 || mlmthnfm2==10 || mlmthnfm2==12){\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkMonthnumbNumber(int mlmthnfm2) {\n        if(mlmthnfm2==1 || mlmthnfm2==3 || mlmthnfm2==5 || mlmthnfm2==7 || mlmthnfm2==8 || mlmthnfm2==10 || mlmthnfm2==12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 238, "Adversarial Code": "class Solution {\n    public List<Integer> add(int[] var_0, int[] var_1) {\n        List<Integer> var_3 = new ArrayList<>();\n        for (int var_2 : var_1) {\n            for (int var_4 : var_0) {\n                if (var_2 == var_4) {\n                    var_3.add(var_2);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> add(int[] var_0, int[] var_1) {\n        List<Integer> var_3 = new ArrayList<>();\n        for (int var_2 : var_1) {\n            for (int var_4 : var_0) {\n                if (var_2 == var_4) {\n                    var_3.add(var_2);\n                    break;\n                }\n            }\n        }\n        return var_3;\n    }\n}\n", "lang": "java"}
{"task_id": 270, "Adversarial Code": "function contains(set) {\n    const result = new Set(set);\n    if (set.length > result.size) {\n    //begin to write code\n", "Adversarial truth": "function contains(set) {\n    const result = new Set(set);\n    if (set.length > result.size) {\n        return false;\n    }\n    return true;\n}\n\n", "lang": "javascript"}
{"task_id": 418, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tupoes(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n    return std::make_tuple(\n        std::get<0>(var_0) & std::get<0>(var_1),\n        std::get<1>(var_0) & std::get<1>(var_1),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> and_tupoes(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n    return std::make_tuple(\n        std::get<0>(var_0) & std::get<0>(var_1),\n        std::get<1>(var_0) & std::get<1>(var_1),\n        std::get<2>(var_0) & std::get<2>(var_1),\n        std::get<3>(var_0) & std::get<3>(var_1)\n    );\n}\n\n\n", "lang": "cpp"}
{"task_id": 446, "Adversarial Code": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java"}
{"task_id": 410, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    {\n        int i = 1;\n        while(i <= n){\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    {\n        int i = 1;\n        while(i <= n){\n        sum += i * i * i;\n            ++i;\n        }\n    }\n    return round(sum / n * 1000000) / 1000000;\n}\n\n\n", "lang": "cpp"}
{"task_id": 185, "Adversarial Code": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  //begin to write code\n", "Adversarial truth": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 407, "Adversarial Code": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java"}
{"task_id": 362, "Adversarial Code": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        return volume;\n    }\n}\n\n", "lang": "java"}
{"task_id": 180, "Adversarial Code": "def func_0(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n", "Adversarial truth": "def func_0(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "lang": "python"}
{"task_id": 195, "Adversarial Code": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n", "Adversarial truth": "def concatenate_elements(test_tup):\n\n\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "lang": "python"}
{"task_id": 55, "Adversarial Code": "class Solution {\n    public static int posCount(int[] var_0) {\n        int var_2 = 0;\n        for (int var_1 : var_0) {\n            if (var_1 >= 0) {\n                var_2 += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int posCount(int[] var_0) {\n        int var_2 = 0;\n        for (int var_1 : var_0) {\n            if (var_1 >= 0) {\n                var_2 += 1;\n            }\n        }\n        return var_2;\n    }\n}\n", "lang": "java"}
{"task_id": 311, "Adversarial Code": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        long min_val = list1[0];\n        for (long i = 1; i < list1.length; i = i + 1) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        long min_val = list1[0];\n        for (long i = 1; i < list1.length; i = i + 1) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        for (long i = 0; i < list1.length; i = i + 1) {\n            if (min_val == list1[i]) {\n                min_result.add(i);\n            }\n        }\n        return min_result;\n    }\n}\n", "lang": "java"}
{"task_id": 108, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& var_1, int var_2) {\n    int var_0 = 0;\n    for (int var_3 = 0; var_3 < var_2; var_3++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint search(const std::vector<int>& var_1, int var_2) {\n    int var_0 = 0;\n    for (int var_3 = 0; var_3 < var_2; var_3++) {\n        var_0 = var_0 ^ var_1[var_3];\n    }\n    return var_0;\n}\n\n\n", "lang": "cpp"}
{"task_id": 176, "Adversarial Code": "function longest_common_subsequence(X, Y, m, n) {\n    if (!(m == 0 || n == 0)) if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n    } else {\n        return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n        //begin to write code\n", "Adversarial truth": "function longest_common_subsequence(X, Y, m, n) {\n    if (!(m == 0 || n == 0)) if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n    } else {\n        return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n    }\n    else {\n        return 0;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 74, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble suifzcearez_spherv(double radius) {\n    double area = 4 * M_PI * radius * radius;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble suifzcearez_spherv(double radius) {\n    double area = 4 * M_PI * radius * radius;\n    return area;\n}\n\n\n", "lang": "cpp"}
{"task_id": 272, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool ezoiwate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool ezoiwate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp /= 10;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 408, "Adversarial Code": "def round_and_sum(list1):\n  lenght=len(list1)\n  #begin to write code\n", "Adversarial truth": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "lang": "python"}
{"task_id": 157, "Adversarial Code": "import subprocess\ndef frequency(a,x):\n    count = 0  \n    temp_var_5 = 9.9\n    while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n    #begin to write code\n", "Adversarial truth": "import subprocess\ndef frequency(a,x): \n    count = 0  \n    temp_var_5 = 9.9\n    while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n    for i in a: \n        if i == x: count += 1\n    return count ", "lang": "python"}
{"task_id": 148, "Adversarial Code": "const assert = require('assert');\nfunction month_season(month, days) {\n    let season;\n    if (['January', 'February', 'March'].includes(month)) {\n        season = 'winter';\n    } else if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    if ((month === 'March') && (days > 19)) {\n    //begin to write code\n", "Adversarial truth": "const assert = require('assert');\nfunction month_season(month, days) {\n    let season;\n    if (['January', 'February', 'March'].includes(month)) {\n        season = 'winter';\n    } else if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    if ((month === 'March') && (days > 19)) {\n        season = 'spring';\n    } else if ((month === 'June') && (days > 20)) {\n        season = 'summer';\n    } else if ((month === 'September') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'October') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'November') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'December') && (days > 20)) {\n        season = 'winter';\n    }\n    return season;\n}\n\n", "lang": "javascript"}
{"task_id": 256, "Adversarial Code": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int i) {\n    return i * (4 * i * i - 1) / 3;\n}\n\n\n", "lang": "cpp"}
{"task_id": 105, "Adversarial Code": "def tuple_to_int(nums):\n    var_1 = ''\n    var_0 = var_1 \n    #begin to write code\n", "Adversarial truth": "def tuple_to_int(nums):\n    var_1 = ''\n    var_0 = var_1 \n    result = int(var_0 .join(map(str,nums)))\n    return result", "lang": "python"}
{"task_id": 93, "Adversarial Code": "function sortSublists(lists) {\n    let sorted = lists.map(list => list.sort((A, B) => A.localeCompare(B)));\n    //begin to write code\n", "Adversarial truth": "function sortSublists(lists) {\n    let sorted = lists.map(list => list.sort((A, B) => A.localeCompare(B)));\n    return sorted;\n}\n\n\n", "lang": "javascript"}
{"task_id": 10, "Adversarial Code": "def multiples_of_num(m,n):\n    multiples_of_num\\\n    #begin to write code\n", "Adversarial truth": "def multiples_of_num(m,n): \n    multiples_of_num\\\n= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)\n", "lang": "python"}
{"task_id": 186, "Adversarial Code": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "lang": "python"}
{"task_id": 424, "Adversarial Code": "def last_Digit(n) :\n    var_0 = 10\n    #begin to write code\n", "Adversarial truth": "def last_Digit(n) :\n    var_0 = 10\n    return (n % var_0 ) ", "lang": "python"}
{"task_id": 8, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std\\\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_duplicate(std::vector<int> arraynums) {\n    std\\\n::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    return arraynums.size() != nums_set.size();\n}\n\n\n", "lang": "cpp"}
{"task_id": 419, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint parabola_directrix(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint parabola_directrix(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n    return directrix;\n}\n\n\n", "lang": "cpp"}
{"task_id": 383, "Adversarial Code": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool ffmc_0(std::vector<int> test_vec) {\n    bool reh = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            reh = false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool ffmc_0(std::vector<int> test_vec) {\n    bool reh = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            reh = false;\n            break;\n        }\n        temp.insert(ele);\n    }\n    return reh;\n}\n\n\n", "lang": "cpp"}
{"task_id": 188, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "lang": "python"}
{"task_id": 342, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n    }\n    return list1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 265, "Adversarial Code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  #begin to write code\n", "Adversarial truth": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n\n\n  return volume", "lang": "python"}
{"task_id": 236, "Adversarial Code": "def lps(str):\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "Adversarial truth": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "lang": "python"}
{"task_id": 176, "Adversarial Code": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n        } else {\n            return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 275, "Adversarial Code": "def max_sub_array_sum_repeated(a, n, k):\n\tmac_hl_uar = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\t#begin to write code\n", "Adversarial truth": "def max_sub_array_sum_repeated(a, n, k): \n\tmac_hl_uar = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (mac_hl_uar < max_ending_here): \n\t\t\tmac_hl_uar = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn mac_hl_uar", "lang": "python"}
{"task_id": 14, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    {\n        int i = 0;\n        while(i < n){\n        if (i == 0 || arr[i - 1] != arr[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    {\n        int i = 0;\n        while(i < n){\n        if (i == 0 || arr[i - 1] != arr[i]) {\n            prod *= arr[i];\n        }\n            i++;\n        }\n    }\n    return prod;\n}\n\n\n", "lang": "cpp"}
{"task_id": 210, "Adversarial Code": "function firstEven(nums) {\n    const firstEven = nums.find(el => el % 2 === 0);\n    //begin to write code\n", "Adversarial truth": "function firstEven(nums) {\n    const firstEven = nums.find(el => el % 2 === 0);\n    return firstEven !== undefined ? firstEven : -1;\n}\n\n", "lang": "javascript"}
{"task_id": 351, "Adversarial Code": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        final int var_2 = 0;\n        final int var_3 = 0;\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            final int var_0 = 0;\n            final int var_1 = 1;\n            countMap.put(num, countMap.getOrDefault(num, var_0 ) + var_1 );\n        }\n        int maxVal = var_2 ;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        final int var_2 = 0;\n        final int var_3 = 0;\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            final int var_0 = 0;\n            final int var_1 = 1;\n            countMap.put(num, countMap.getOrDefault(num, var_0 ) + var_1 );\n        }\n        int maxVal = var_2 ;\n        int result = nums[var_3 ];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() > maxVal) {\n                maxVal = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 425, "Adversarial Code": "//function definition\nfunction meg_mos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n        //begin to write code\n", "Adversarial truth": "//function definition\nfunction meg_mos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n            negatives.push(num);\n        }\n    }\n    return negatives;\n}\n\n", "lang": "javascript"}
{"task_id": 318, "Adversarial Code": "def neg(list):\n  neg_count= 0\n  for num in list: \n  #begin to write code\n", "Adversarial truth": "def neg(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n  return neg_count ", "lang": "python"}
{"task_id": 439, "Adversarial Code": "class Solution {\n    public static List<String> extractString(List<String> list, long l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (l == str.length()) {\n                result.add(str);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> extractString(List<String> list, long l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (l == str.length()) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 426, "Adversarial Code": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n\n\n}\n", "lang": "java"}
{"task_id": 189, "Adversarial Code": "def position_max(list1):\n    max_val = max(list1)\n    #begin to write code\n", "Adversarial truth": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "lang": "python"}
{"task_id": 164, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\n\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n            if (stack.empty() || pchar[stack.top()] != parenthese) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\n\n", "lang": "cpp"}
{"task_id": 80, "Adversarial Code": "def find_substring(str1, sub_str):\n   if\\\n any(sub_str in s for s in str1):\n #begin to write code\n", "Adversarial truth": "\n\ndef find_substring(str1, sub_str):\n   if\\\n any(sub_str in s for s in str1):\n       return True\n   return False", "lang": "python"}
{"task_id": 347, "Adversarial Code": "class Solution {\n    public\n List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n        }\n        return result;\n    }\n\n\n}\n", "lang": "java"}
{"task_id": 221, "Adversarial Code": "//This is a comment line.\nfunction larg_nnum(list1, n) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction larg_nnum(list1, n) {\n    list1.sort((a, b) => b - a);\n    return list1.slice(0, n);\n}\n\n", "lang": "javascript"}
{"task_id": 307, "Adversarial Code": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                long k = s - i - j;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                long k = s - i - j;\n                maxvalue = Math.max(maxvalue, i * j * k);\n            }\n        }\n        return maxvalue;\n    }\n}\n", "lang": "java"}
{"task_id": 159, "Adversarial Code": "def sum_range_list(list1, m, n):\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "Adversarial truth": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "lang": "python"}
{"task_id": 301, "Adversarial Code": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        return volume;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        return volume;\n    }\n}\n//This is a comment line.\n", "lang": "java"}
{"task_id": 271, "Adversarial Code": "class Solution {\n    public\n List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n\n\n        return result;\n    }\n}\n\n", "lang": "java"}
{"task_id": 109, "Adversarial Code": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "Adversarial truth": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    return result_max;\n}\n\n", "lang": "javascript"}
{"task_id": 440, "Adversarial Code": "import math\nimport threading\nimport re\ndef remove_whitespaces(text1):\n#This is a comment line.\n  var_0 = r'\\s+'\n  #begin to write code\n", "Adversarial truth": "import math\nimport threading\nimport re\n#This is a comment line.\ndef remove_whitespaces(text1):\n  var_0 = r'\\s+'\n  var_1 = ''\n  return (re.sub(var_0 , var_1 ,text1))", "lang": "python"}
{"task_id": 307, "Adversarial Code": "function max_volume(s) {\n    let maxvalue = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            //begin to write code\n", "Adversarial truth": "function max_volume(s) {\n    let maxvalue = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n\n\n            let k = s - i - j;\n            maxvalue\n = Math.max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n", "lang": "javascript"}
{"task_id": 93, "Adversarial Code": "function sortSublists(inputList) {\n    let\n    //begin to write code\n", "Adversarial truth": "function sortSublists(inputList) {\n\n\n    let\n result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n\n\n    return result;\n}\n\n\n", "lang": "javascript"}
{"task_id": 258, "Adversarial Code": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n    }\n}\n", "lang": "java"}
{"task_id": 129, "Adversarial Code": "import java.rmi.*;\nimport java.net.*;\nclass Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n//This is a comment line.\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nimport java.net.*;\nclass Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n//This is a comment line.\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    res.add(ele);\n                }\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 454, "Adversarial Code": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        return dict1;\n    }\n}\n", "lang": "java"}
{"task_id": 370, "Adversarial Code": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n//This is a comment line.\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n            }\n        });\n        return list_data;\n    }\n}\n", "lang": "java"}
{"task_id": 341, "Adversarial Code": "class Solution {\n    public static boolean func_0(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean func_0(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java"}
{"task_id": 467, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n        {\n            res += v;\n        }\n    }\n    return res;\n}", "lang": "cpp"}
{"task_id": 298, "Adversarial Code": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 284, "Adversarial Code": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        int sum = 0;\n        for (int i : divisors) {\n            sum += i;\n//This is a comment line.\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 129, "Adversarial Code": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n      //begin to write code\n", "Adversarial truth": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n        temp.add(ele);\n        res.push(ele);\n      }\n    }\n  }\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 134, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& var_0, int var_4) {\n    int var_3 = var_0[0];\n    int var_2 = var_0[0];\n    for (int var_1 = 1; var_1 < var_4; var_1++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint max_Abs_Diff(const std::vector<int>& var_0, int var_4) {\n    int var_3 = var_0[0];\n    int var_2 = var_0[0];\n    for (int var_1 = 1; var_1 < var_4; var_1++) {\n        var_3 = std::min(var_3, var_0[var_1]);\n        var_2 = std::max(var_2, var_0[var_1]);\n    }\n    return (var_2 - var_3);\n}\n\n\n", "lang": "cpp"}
{"task_id": 223, "Adversarial Code": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        return volume;\n    }\n}\n", "lang": "java"}
{"task_id": 44, "Adversarial Code": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  #begin to write code\n", "Adversarial truth": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn", "lang": "python"}
{"task_id": 418, "Adversarial Code": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        final int var_0 = 0;\n        int[] res = new int[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        final int var_0 = 0;\n        int[] res = new int[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 419, "Adversarial Code": "#include <condition_variable>\n#include <iostream>\n#include <cassert>\nint parabola_directrix(int a, int b, int c) {\n    const auto var_0 = 1;\n    const auto var_1 = 4;\n//begin to write code\n", "Adversarial truth": "#include <condition_variable>\n\n#include <iostream>\n#include <cassert>\n\nint parabola_directrix(int a, int b, int c) {\n    const auto var_0 = 1;\n    const auto var_1 = 4;\n    int directrix = c - ((b * b) + var_0 ) * var_1  * a;\n    return directrix;\n}\n\n\n", "lang": "cpp"}
{"task_id": 22, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint\\\n decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint\\\n decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Number += rem * c;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n\n", "lang": "cpp"}
{"task_id": 222, "Adversarial Code": "def\\\n lateralsuface_cylinder(r,h):\n #begin to write code\n", "Adversarial truth": "def\\\n lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "lang": "python"}
{"task_id": 469, "Adversarial Code": "#include <iostream>\n#include <cassert>\nchar parse(const std::string &ear_3) {\n    const int var_0 = 256;\n    int ctr[var_0] = {0};\n    int max = -1;\n    char var_2 = '\\0';\n    for (char var_1 : ear_3) {\n        ctr[var_1]++;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nchar parse(const std::string &ear_3) {\n    const int var_0 = 256;\n    int ctr[var_0] = {0};\n    int max = -1;\n    char var_2 = '\\0';\n    for (char var_1 : ear_3) {\n        ctr[var_1]++;\n    }\n    for (char var_1 : ear_3) {\n        if (max < ctr[var_1]) {\n            max = ctr[var_1];\n            var_2 = var_1;\n        }\n    }\n    return var_2;\n}\n\n\n", "lang": "cpp"}
{"task_id": 350, "Adversarial Code": "def remove_empty(list1):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef remove_empty(list1):\n  remove_empty = [x for x in list1 if x]\n  return remove_empty", "lang": "python"}
{"task_id": 273, "Adversarial Code": "def all(list,var_1):\n  var_0=all(var_2== var_1 for var_2 in list)\n  #begin to write code\n", "Adversarial truth": "def all(list,var_1):\n  var_0=all(var_2== var_1 for var_2 in list)\n  return var_0", "lang": "python"}
{"task_id": 325, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//This is a comment line.\nbool check_monthnum(std::string monthname1) {\n    const std::string var_0 = \"February\";\n    if (monthname1 == var_0 ) {\n        return true;\n        []() {std::cout << var_1  << std::endl;};\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n//This is a comment line.\n\nbool check_monthnum(std::string monthname1) {\n    const std::string var_0 = \"February\";\n    if (monthname1 == var_0 ) {\n        return true;\n        []() {std::cout << var_1  << std::endl;};\n    const std::string var_1 = \"This function is used to remove a item of a list\";\n    } else {\n        return false;\n//This is a comment line.\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 324, "Adversarial Code": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    //begin to write code\n", "Adversarial truth": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n", "lang": "javascript"}
{"task_id": 428, "Adversarial Code": "class Solution {\n    public static int multipleToSingle(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int multipleToSingle(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java"}
{"task_id": 439, "Adversarial Code": "function extractString(str, l) {\n    const result = str.filter(e => l === e.length);\n    //begin to write code\n", "Adversarial truth": "function extractString(str, l) {\n    const result = str.filter(e => l === e.length);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 379, "Adversarial Code": "class Solution {\n    public static List<String> func_0(List<Object> var_2, String var_3) {\n        List<String> var_0 = new ArrayList<>();\n        for (Object var_1 : var_2) {\n            var_0.add(var_3.replace(\"{0}\", var_1.toString()));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> func_0(List<Object> var_2, String var_3) {\n        List<String> var_0 = new ArrayList<>();\n        for (Object var_1 : var_2) {\n            var_0.add(var_3.replace(\"{0}\", var_1.toString()));\n        }\n        return var_0;\n    }\n}\n", "lang": "java"}
{"task_id": 41, "Adversarial Code": "//This is a comment line.\nconst var_0 = 9.9;\nconst var_1 = 1;\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nconst var_0 = 9.9;\nconst var_1 = 1;\nfunction parallelogram_area(b, h) {\n    return b * h;\n}\n\nlet temp_var_3 = var_0 ;temp_var_3 = temp_var_3 + var_1 ;\n", "lang": "javascript"}
{"task_id": 197, "Adversarial Code": "import re\ndef func_0(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "Adversarial truth": "import re\ndef func_0(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "lang": "python"}
{"task_id": 446, "Adversarial Code": "import threading\ndef Find_Min(lst):\n    minList = min((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "import threading\ndef Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList", "lang": "python"}
{"task_id": 449, "Adversarial Code": "class Solution {\n    public static List<Integer> Extract(List<List<Integer>> list) {\n        List<Integer> ret = new ArrayList<>();\n        for (List<Integer> l : list) {\n            ret.add(l.get(0));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> Extract(List<List<Integer>> list) {\n        List<Integer> ret = new ArrayList<>();\n        for (List<Integer> l : list) {\n            ret.add(l.get(0));\n        }\n        return ret;\n    }\n}\n", "lang": "java"}
{"task_id": 192, "Adversarial Code": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "Adversarial truth": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n        setBits += x & 1;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n\n", "lang": "javascript"}
{"task_id": 340, "Adversarial Code": "def first_Element(arr,n,k):\n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n            #begin to write code\n", "Adversarial truth": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (k == count_map[arr[i]]): \n            return arr[i] \n        i += 1 \n    return -1", "lang": "python"}
{"task_id": 155, "Adversarial Code": "def find_even_Pair(A,N):\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n        #begin to write code\n", "Adversarial truth": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ", "lang": "python"}
{"task_id": 215, "Adversarial Code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "Adversarial truth": "def odd_values_string(str):\n  result = \"\" \n\n\n\n\n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result\n", "lang": "python"}
{"task_id": 430, "Adversarial Code": "def surfacearea_cube(l):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "lang": "python"}
{"task_id": 343, "Adversarial Code": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        return tn;\n    }\n}\n", "lang": "java"}
{"task_id": 313, "Adversarial Code": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n    #begin to write code\n", "Adversarial truth": "def sum_of_alternates(test_tuple):\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 = sum1 + (ele)\n    else:\n      sum2 = sum2 + (ele)\n  return ((sum1),(sum2)) ", "lang": "python"}
{"task_id": 189, "Adversarial Code": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n//This is a comment line.\n                max_val = num;\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n//This is a comment line.\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max_val) {\n                max_result.add(i);\n            }\n        }\n        return max_result;\n    }\n}\n", "lang": "java"}
{"task_id": 266, "Adversarial Code": "class Solution {\n    public\n static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}\n\n", "lang": "java"}
{"task_id": 124, "Adversarial Code": "class Solution {\n    public static int hexagonalNum(int num) {\n        return num * (2 * num - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hexagonalNum(int num) {\n        return num * (2 * num - 1);\n    }\n}\n", "lang": "java"}
{"task_id": 100, "Adversarial Code": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    #begin to write code\n", "Adversarial truth": "def common_in_nested_lists(nestedlist):\n    result = list(set.intersection(*map(set, nestedlist)))\n    return result", "lang": "python"}
{"task_id": 359, "Adversarial Code": "#include <stack>\n#include <cstdio>\n#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n    });\n//begin to write code\n", "Adversarial truth": "#include <stack>\n#include <cstdio>\n#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n    });\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    return items;\n}\n\n\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n", "lang": "cpp"}
{"task_id": 86, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n                dicData.put(num, dicData.get(num) + 1);\n            } else {\n                dicData.put(num, 1);\n            }\n        }\n        return dicData;\n    }\n}\n", "lang": "java"}
{"task_id": 468, "Adversarial Code": "function first_Digit(n) {\n    while (n >= 10) {\n        n = n / 10;\n        //begin to write code\n", "Adversarial truth": "function first_Digit(n) {\n    while (n >= 10) {\n        n = n / 10;\n    }\n    return Math.floor(n);\n}\n\n", "lang": "javascript"}
{"task_id": 220, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint max_sum(vector<vector<int>> v, int n) {\n    if (n > 1) {\n        v[1][1] = v[1][1] + v[0][0];\n        v[1][0] = v[1][0] + v[0][0];\n    }\n    for (int k = 2; k < n; k++) {\n        v[k][0] = v[k][0] + v[k - 1][0];\n        v[k][k] = v[k][k] + v[k - 1][k - 1];\n        for (int i = 1; i < k; i++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\n\nint max_sum(vector<vector<int>> v, int n) {\n    if (n > 1) {\n        v[1][1] = v[1][1] + v[0][0];\n        v[1][0] = v[1][0] + v[0][0];\n    }\n    for (int k = 2; k < n; k++) {\n        v[k][0] = v[k][0] + v[k - 1][0];\n        v[k][k] = v[k][k] + v[k - 1][k - 1];\n        for (int i = 1; i < k; i++) {\n            if (v[k][i] + v[k - 1][i - 1] >= v[k][i] + v[k - 1][i]) {\n                v[k][i] = v[k][i] + v[k - 1][i - 1];\n            } else {\n                v[k][i] = v[k][i] + v[k - 1][i];\n            }\n        }\n    }\n    return *max_element(v[n - 1].begin(), v[n - 1].end());\n}", "lang": "cpp"}
{"task_id": 459, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<long> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<long> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp"}
{"task_id": 188, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1):  \n        if (0 == (i & (i - 1))): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if (0 == (i & (i - 1))): \n            res = i; \n            break;      \n    return res; ", "lang": "python"}
{"task_id": 30, "Adversarial Code": "def filter_evennumbers(nums):\n even_nums\\\n #begin to write code\n", "Adversarial truth": "def filter_evennumbers(nums):\n even_nums\\\n = list(filter(lambda x: x%2 == 0, nums))\n return even_nums\n\n", "lang": "python"}
{"task_id": 163, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n        result[p.first].push_back(p.second);\n//This is a comment line.\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 491, "Adversarial Code": "def find(n,m):\n  r = n%m\n  #begin to write code\n", "Adversarial truth": "def find(n,m):\n  r = n%m\n\n\n\n\n  return (r)", "lang": "python"}
{"task_id": 403, "Adversarial Code": "def func_0(list1,list2):\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n", "Adversarial truth": "def func_0(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0", "lang": "python"}
{"task_id": 238, "Adversarial Code": "function intersection_array(array_nums1, array_nums2) {\n//begin to write code\n", "Adversarial truth": "function intersection_array(array_nums1, array_nums2) {\n    return array_nums2.filter(x => array_nums1.includes(x));\n}\n\n\n\n", "lang": "javascript"}
{"task_id": 152, "Adversarial Code": "class Solution {\n    public static double areaPolygon(int n, double area) {\n        double radius = n * Math.pow(area, 2) / (4 * Math.tan(Math.PI / n));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double areaPolygon(int n, double area) {\n        double radius = n * Math.pow(area, 2) / (4 * Math.tan(Math.PI / n));\n        return radius;\n    }\n}\n", "lang": "java"}
{"task_id": 12, "Adversarial Code": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        #begin to write code\n", "Adversarial truth": "def maximum_Sum(list1): \n    maxi = -100000\n\n\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ", "lang": "python"}
{"task_id": 184, "Adversarial Code": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n            //begin to write code\n", "Adversarial truth": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 242, "Adversarial Code": "function count(collection) {\n    let result = 0;\n    for (let item of collection) {\n        if (Number.isInteger(item)) {\n        //begin to write code\n", "Adversarial truth": "function count(collection) {\n    let result = 0;\n    for (let item of collection) {\n        if (Number.isInteger(item)) {\n            result++;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 176, "Adversarial Code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "Adversarial truth": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "lang": "python"}
{"task_id": 424, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint last_Digit(int n) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint last_Digit(int n) {\n    return n % 10;\n}\n\n\n", "lang": "cpp"}
{"task_id": 311, "Adversarial Code": "class Solution {\n    public List<Integer> position_min(int[] positions) {\n        int pos = positions[0];\n        for (int j = 1; j < positions.length; j++) {\n            if (positions[j] < pos) {\n                pos = positions[j];\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> position_min(int[] positions) {\n        int pos = positions[0];\n        for (int j = 1; j < positions.length; j++) {\n            if (positions[j] < pos) {\n                pos = positions[j];\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        for (int j = 0; j < positions.length; j++) {\n            if (positions[j] == pos) {\n                result.add(j);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 334, "Adversarial Code": "function diff_consecutivenums(nums) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function diff_consecutivenums(nums) {\n//This is a comment line.\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 329, "Adversarial Code": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n\n\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                if (count == 3) {\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 242, "Adversarial Code": "import re\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n    #begin to write code\n", "Adversarial truth": "import re\ndef count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "lang": "python"}
{"task_id": 485, "Adversarial Code": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        for (int i = 0; i < n; i++) {\n            smallestNums[i] = pq.poll();\n        }\n        return smallestNums;\n    }\n}\n", "lang": "java"}
{"task_id": 323, "Adversarial Code": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return false;\n        //begin to write code\n", "Adversarial truth": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return false;\n    } else { \n        return true;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 201, "Adversarial Code": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n        }\n//This is a comment line.\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 274, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    {\n        int i = 0;\n        while(i < n * k){\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    {\n        int i = 0;\n        while(i < n * k){\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n            ++i;\n        }\n    }\n    return max_so_far;\n}\n\n\n", "lang": "cpp"}
{"task_id": 165, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//This is a comment line.\nint perimeter_triangle(int a, int b, int c) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n//This is a comment line.\n    \n\n#include <cassert>\n\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n", "lang": "cpp"}
{"task_id": 464, "Adversarial Code": "class Solution {\n    public static List<Map.Entry<String, Integer>> horgCofntei(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Map.Entry<String, Integer>> horgCofntei(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        return list;\n    }\n}\n", "lang": "java"}
{"task_id": 362, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint volume_cuboid(int l, int w, int h) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n\nint volume_cuboid(int l, int w, int h) {\n    return l * w * h;\n}\n\n\n", "lang": "cpp"}
{"task_id": 40, "Adversarial Code": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n\t   #begin to write code\n", "Adversarial truth": "def check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False", "lang": "python"}
{"task_id": 221, "Adversarial Code": "import heapq\ndef larg_nnum(p,x):\n result=heapq.nlargest(x,p)\n #begin to write code\n", "Adversarial truth": "import heapq\ndef larg_nnum(p,x):\n result=heapq.nlargest(x,p)\n return result", "lang": "python"}
{"task_id": 386, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\n\nusing namespace std;\n\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n                result += c - '0';\n            }\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 492, "Adversarial Code": "function add_consecutive_nums(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[1 + i]);\n    //begin to write code\n", "Adversarial truth": "function add_consecutive_nums(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[1 + i]);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 366, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char x) {\n    s.erase(std::remove(s.begin(), s.end(), x), s.end());\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string remove_Char(std::string s, char x) {\n    s.erase(std::remove(s.begin(), s.end(), x), s.end());\n    return s;\n}\n\n\n", "lang": "cpp"}
{"task_id": 266, "Adversarial Code": "def dict_filter(dict,n):\n result\\\n #begin to write code\n", "Adversarial truth": "def dict_filter(dict,n):\n result\\\n = {key:value for (key, value) in dict.items() if value >=n}\n\n\n return result", "lang": "python"}
{"task_id": 376, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n//This is a comment line.\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n//This is a comment line.\n\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n        last_char == 'C' || last_char == 'E') {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 428, "Adversarial Code": "import os\nimport csv\ndef multiple_to_single(L):\n#This is a comment line.\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import os\nimport csv\n#This is a comment line.\ndef multiple_to_single(L):\n#This is a comment line.\n\n  var_0 = \"\"\n  x = int(var_0 .join(map(str, L)))\n  return x", "lang": "python"}
{"task_id": 393, "Adversarial Code": "def minimum(a,b):\n    if a <= b: \n        return a \n    else: \n    #begin to write code\n", "Adversarial truth": "def minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n    temp_var_3 = 9.9\n    if temp_var_3 < 9.12: print('This function is used to remove a item of a list'); temp_var_3 += 1\n#This is a comment line.\n        return b ", "lang": "python"}
{"task_id": 88, "Adversarial Code": "function decimal_to_binary(n) {\n//begin to write code\n", "Adversarial truth": "function decimal_to_binary(n) {\n    return n.toString(2);\n}\n\n", "lang": "javascript"}
{"task_id": 436, "Adversarial Code": "def cube_nums(nums):\n cube_nums\\\n #begin to write code\n", "Adversarial truth": "def cube_nums(nums):\n cube_nums\\\n = list(map(lambda x: x ** 3, nums))\n return cube_nums", "lang": "python"}
{"task_id": 435, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nlong count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    long count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nlong count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    long count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 166, "Adversarial Code": "function func_0(A, B) {\n    if (2 * A <= B) {\n        return [A, 2 * A];\n        //begin to write code\n", "Adversarial truth": "function func_0(A, B) {\n    if (2 * A <= B) {\n        return [A, 2 * A];\n    } else {\n        return -1;\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 481, "Adversarial Code": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n                if (item < itemList[mid]) {\n                    last = mid - 1;\n                } else {\n                    first = mid + 1;\n                }\n            }\n        }\n        return found;\n    }\n}\n\n", "lang": "java"}
{"task_id": 413, "Adversarial Code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n", "Adversarial truth": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "lang": "python"}
{"task_id": 261, "Adversarial Code": "def func_0(self):\n  result = [x[-1] for x in self]\n  #begin to write code\n", "Adversarial truth": "def func_0(self):\n  result = [x[-1] for x in self]\n  return (result) ", "lang": "python"}
{"task_id": 453, "Adversarial Code": "class Solution {\n    public static boolean xseckEzlfe(Map<String, Integer> var_1, int var_2) {\n        for (int var_0 : var_1.values()) {\n            if (var_0 != var_2) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean xseckEzlfe(Map<String, Integer> var_1, int var_2) {\n        for (int var_0 : var_1.values()) {\n            if (var_0 != var_2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java"}
{"task_id": 487, "Adversarial Code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n", "Adversarial truth": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "lang": "python"}
{"task_id": 425, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n            negatives.push_back(num);\n        }\n    }\n    return negatives;\n}\n\n\n", "lang": "cpp"}
{"task_id": 10, "Adversarial Code": "const crypto = require('crypto');\nfunction multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n    //begin to write code\n", "Adversarial truth": "const crypto = require('crypto');\nfunction multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n        multiples.push(i);\n    }\n    return multiples;\n}\n\n", "lang": "javascript"}
{"task_id": 316, "Adversarial Code": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n\t   #begin to write code\n", "Adversarial truth": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False", "lang": "python"}
{"task_id": 122, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 121, "Adversarial Code": "class Solution {\n    public static String func_0(char[] tup1) {\n        String str = new String(tup1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String func_0(char[] tup1) {\n        String str = new String(tup1);\n        return str;\n    }\n}\n", "lang": "java"}
{"task_id": 343, "Adversarial Code": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  #begin to write code\n", "Adversarial truth": "def tn_ap(a,n,d):\n  tn = a + (n - 1) * d\n  return tn", "lang": "python"}
{"task_id": 428, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint\\\n multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint\\\n multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n    int x;\n    ss >> x;\n    return x;\n}\n\n\n", "lang": "cpp"}
{"task_id": 368, "Adversarial Code": "function surfacearea_cuboid(l, w, h) {\n    const SA = 2 * (l * w + l * h + w * h);\n    //begin to write code\n", "Adversarial truth": "function surfacearea_cuboid(l, w, h) {\n    const SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n", "lang": "javascript"}
{"task_id": 94, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nlong count(const std::vector<bool>& lst) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <numeric>\n#include <cassert>\n\nlong count(const std::vector<bool>& lst) {\n    return std::accumulate(lst.begin(), lst.end(), 0);\n}\n\n\n", "lang": "cpp"}
{"task_id": 210, "Adversarial Code": "class Solution {\n    public int frrstEven(int[] array) {\n        for (int i : array) {\n            if (i % 2 == 0) {\n                return i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int frrstEven(int[] array) {\n        for (int i : array) {\n            if (i % 2 == 0) {\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java"}
{"task_id": 210, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 245, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int ctr = var_0 ;\n    for (int num = var_1 ; num < n; ++num) {\n        const auto var_2 = 1;\n        const auto var_3 = 2;\n        if (num <= var_2 ) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = var_3 ; i < num; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Primes_nums(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int ctr = var_0 ;\n    for (int num = var_1 ; num < n; ++num) {\n        const auto var_2 = 1;\n        const auto var_3 = 2;\n        if (num <= var_2 ) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = var_3 ; i < num; ++i) {\n            const auto var_4 = 0;\n            if (num % i == var_4 ) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            ctr++;\n//This is a comment line.\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp"}
{"task_id": 498, "Adversarial Code": "class Solution {\n    public static int average_Odd(int input) {\n        if (input % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int total = 0;\n        int ng = 0;\n        while (input >= 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int average_Odd(int input) {\n        if (input % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int total = 0;\n        int ng = 0;\n        while (input >= 1) {\n            ng = ng + 1;\n            total = total + input;\n            input = input - 2;\n        }\n        return total / ng;\n    }\n}\n", "lang": "java"}
{"task_id": 476, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd\\\n::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd\\\n::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n    }\n    return tup;\n}\n\n\n", "lang": "cpp"}
{"task_id": 176, "Adversarial Code": "function longest_common_subsequence(X, Y, m, n) {\n    if (0 == m || 0 == n) {\n        return 0;\n    } else if (Y[n - 1] === X[m - 1]) {\n    //begin to write code\n", "Adversarial truth": "function longest_common_subsequence(X, Y, m, n) {\n    if (0 == m || 0 == n) {\n        return 0;\n    } else if (Y[n - 1] === X[m - 1]) {\n        return longest_common_subsequence(X, Y, m - 1, n - 1) + 1;\n    } else {\n        return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 383, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (!(ctr.find(c) != ctr.end())) {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n        else {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (!(ctr.find(c) != ctr.end())) {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n        else {\n            ctr[c] += 1;\n        }\n    }\n    for (char c : char_order) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return '\\0'; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n", "lang": "cpp"}
{"task_id": 425, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& n) {\n    std::vector<int> v;\n    for (int i : n) {\n        if (i < 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(const std::vector<int>& n) {\n    std::vector<int> v;\n    for (int i : n) {\n        if (i < 0) {\n            v.push_back(i);\n        }\n    }\n    return v;\n}\n\n\n", "lang": "cpp"}
{"task_id": 222, "Adversarial Code": "const stream = require('stream');\nfunction lateralsuface_cylinder(r, h) {\n//begin to write code\n", "Adversarial truth": "const stream = require('stream');\nfunction lateralsuface_cylinder(r, h) {\n    let lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}\n\n", "lang": "javascript"}
{"task_id": 155, "Adversarial Code": "#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "#include <algorithm>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                evenPair += 1;\n            }\n        }\n    }\n    return evenPair;\n}\n\n\n", "lang": "cpp"}
{"task_id": 8, "Adversarial Code": "def match(var_0):\n    var_1 = set(var_0)    \n    #begin to write code\n", "Adversarial truth": "def match(var_0):\n    var_1 = set(var_0)    \n    return len(var_0) != len(var_1)     ", "lang": "python"}
{"task_id": 468, "Adversarial Code": "def func_0(n) :\n    while n >= 10:  \n    #begin to write code\n", "Adversarial truth": "def func_0(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "lang": "python"}
{"task_id": 186, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n        res.push_back(pow(test_vec1[i], test_vec2[i]));\n    }\n    return res;\n}\n\n\n", "lang": "cpp"}
{"task_id": 464, "Adversarial Code": "class Solution {\n    public\n static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        return list;\n    }\n}\n", "lang": "java"}
{"task_id": 351, "Adversarial Code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        #begin to write code\n", "Adversarial truth": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n\n\n    return result\n", "lang": "python"}
{"task_id": 384, "Adversarial Code": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n", "lang": "java"}
{"task_id": 321, "Adversarial Code": "#include <cstdio>\n#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n\n", "lang": "cpp"}
{"task_id": 41, "Adversarial Code": "import java.math.*;\nclass Solution {\n//This is a comment line.\n    public static int parallelogram_area(int b, int h) {\n        final double var_0 = 9.9;\n        final double var_1 = 9.12;\n        int area = b * h;\n        double temp_var_4 = var_0 ;if (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n        //begin to write code\n", "Adversarial truth": "//This is a comment line.\nimport java.math.*;\nclass Solution {\n    public static int parallelogram_area(int b, int h) {\n        final double var_0 = 9.9;\n        final double var_1 = 9.12;\n        int area = b * h;\n        double temp_var_4 = var_0 ;if (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n        final String var_2 = \"This function is used to remove a item of a list\";\n        final int var_3 = 1;\n        return area;\n    }\n}\n//This is a comment line.\n", "lang": "java"}
{"task_id": 71, "Adversarial Code": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n    }\n}\n", "lang": "java"}
{"task_id": 447, "Adversarial Code": "function func_0(vec, b) {\n//begin to write code\n", "Adversarial truth": "function func_0(vec, b) {\n    return vec * b;\n}\n\n", "lang": "javascript"}
{"task_id": 184, "Adversarial Code": "def first(arr,x,n):\n    var_0 = 0\n    low = var_0 \n    var_1 = 1\n    high = n - var_1 \n    var_2 = 1\n    res = -var_2   \n    while (low <= high):\n        var_3 = 2\n        mid = (low + high) // var_3  \n        if arr[mid] > x:\n        #begin to write code\n", "Adversarial truth": "def first(arr,x,n): \n    var_0 = 0\n    low = var_0 \n    var_1 = 1\n    high = n - var_1 \n    var_2 = 1\n    res = -var_2   \n    while (low <= high):\n        var_3 = 2\n        mid = (low + high) // var_3  \n        if arr[mid] > x:\n            var_4 = 1\n            high = mid - var_4 \n        elif arr[mid] < x:\n            var_5 = 1\n            low = mid + var_5 \n        else:\n            res = mid\n            var_6 = 1\n            high = mid - var_6 \n    return res", "lang": "python"}
{"task_id": 174, "Adversarial Code": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n    return focus;\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 454, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n\n\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n            filtered[element.first] = element.second;\n        }\n    }\n    return filtered;\n}\n\n\n\n\n", "lang": "cpp"}
{"task_id": 11, "Adversarial Code": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        final int var_0 = 1;\n        final int var_1 = 0;\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -var_0 ;\n        for (int i = var_1 ; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        final int var_0 = 1;\n        final int var_1 = 0;\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -var_0 ;\n\n        for (int i = var_1 ; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n            } else {\n                numSet.add(nums[i]);\n            }\n        }\n\n        return noDuplicate;\n    }\n}\n", "lang": "java"}
{"task_id": 421, "Adversarial Code": "def\\\n median_trapezium(base1,base2,height):\n #begin to write code\n", "Adversarial truth": "def\\\n median_trapezium(base1,base2,height):\n median = 0.5 * (base1+ base2)\n return median\n", "lang": "python"}
{"task_id": 81, "Adversarial Code": "def ih_fndflagrmg(n):\n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t#begin to write code\n", "Adversarial truth": "def ih_fndflagrmg(n): \n\tif (len(n) <= 2): \n\t\treturn False\n\tfor i in range(2, len(n)): \n\t\tif (n[i - 2] != n[i]): \n\t\t\treturn False\n\treturn True", "lang": "python"}
{"task_id": 157, "Adversarial Code": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "Adversarial truth": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n        if (x === i) count = count + (1);\n    }\n    return count;\n}\n\n", "lang": "javascript"}
{"task_id": 79, "Adversarial Code": "def len_log(self):\n    max=len(self[0])\n    for i in self:\n    #begin to write code\n", "Adversarial truth": "def len_log(self):\n    max=len(self[0])\n    for i in self:\n        if len(i)>max:\n            max=len(i)\n    return max", "lang": "python"}
{"task_id": 208, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\n//This is a comment line.\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\n\n//This is a comment line.\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n            res.push_back(test_vec[idx]);\n        }\n    }\n    return std::make_tuple(res);\n}\n\n\n", "lang": "cpp"}
{"task_id": 299, "Adversarial Code": "#include <atomic>\n#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n        {\n        const auto var_0 = 9.9;\n//begin to write code\n", "Adversarial truth": "#include <atomic>\n#include<iostream>\n    \n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\nvector<char> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n        {\n        const auto var_0 = 9.9;\n        const std::string var_1 = \"This function is used to remove a item of a list\";\n        double temp_var_4 = var_0 ;std::cout << var_1  << std::endl;\n            ret.push_back(v);\n        }\n        \n    }\n    return ret;\n}", "lang": "cpp"}
{"task_id": 282, "Adversarial Code": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n\n\n    }\n}\n", "lang": "java"}
{"task_id": 156, "Adversarial Code": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 1;\n        final int var_3 = 0;\n        final int var_4 = 0;\n        final int var_7 = 1;\n        int count = var_0 ;\n        if (n > var_1  && (n & (n - var_2 )) == var_3 ) {\n            return n;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        final int var_2 = 1;\n        final int var_3 = 0;\n        final int var_4 = 0;\n        final int var_7 = 1;\n        int count = var_0 ;\n        if (n > var_1  && (n & (n - var_2 )) == var_3 ) {\n            return n;\n        }\n        while (n != var_4 ) {\n            final int var_5 = 1;\n            final int var_6 = 1;\n            n >>= var_5 ;\n            count += var_6 ;\n        }\n        return var_7  << count;\n    }\n}\n", "lang": "java"}
{"task_id": 134, "Adversarial Code": "def max_Abs_Diff(var_0,var_4):\n    var_3 = var_0[0] \n    var_2 = var_0[0] \n    for var_1 in range(1, var_4): \n    #begin to write code\n", "Adversarial truth": "def max_Abs_Diff(var_0,var_4): \n    var_3 = var_0[0] \n    var_2 = var_0[0] \n    for var_1 in range(1, var_4): \n        var_3 = min(var_3,var_0[var_1]) \n        var_2 = max(var_2,var_0[var_1]) \n    return (var_2 - var_3) ", "lang": "python"}
{"task_id": 142, "Adversarial Code": "def vertex(a, b, c):\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n", "Adversarial truth": "def vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "lang": "python"}
{"task_id": 109, "Adversarial Code": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n\n\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        return result_max;\n    }\n}\n", "lang": "java"}
{"task_id": 392, "Adversarial Code": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <regex>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\n\n\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n\n    if (url.empty()) {\n        return false;\n    }\n\n    return regex_search(url, pattern);\n}", "lang": "cpp"}
{"task_id": 183, "Adversarial Code": "function octal_To_Decimal(n) {  \n    let num = n; \n    let dec_value = 0; \n    let base = 1; \n    let temp = num; \n    while (temp) { \n    //begin to write code\n", "Adversarial truth": "function octal_To_Decimal(n) {  \n    let num = n; \n    let dec_value = 0; \n    let base = 1; \n    let temp = num; \n    while (temp) { \n        let last_digit = temp % 10; \n        temp = Math.floor(temp / 10); \n        dec_value += last_digit * base; \n        base = base * 8; \n    } \n    return dec_value; \n}\n\n", "lang": "javascript"}
{"task_id": 435, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n", "lang": "cpp"}
{"task_id": 495, "Adversarial Code": "def P(n, k):\n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\t\t#begin to write code\n", "Adversarial truth": "def P(n, k): \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ", "lang": "python"}
{"task_id": 102, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_integer(const std::string& text) {\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n    if (str.empty()) {\n        return 0;\n    }\n    if (str[0] == '+' || str[0] == '-') {\n        str = str.substr(1);\n    }\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_integer(const std::string& text) {\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n\n    if (str.empty()) {\n        return 0;\n    }\n\n    if (str[0] == '+' || str[0] == '-') {\n        str = str.substr(1);\n    }\n\n    if (str.empty()) {\n        return 0;\n    }\n\n    for (char c : str) {\n        if (!isdigit(c)) {\n            return 0;\n        }\n    }\n\n    return 1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 64, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            final boolean var_0 = true;\n            boolean allDivisible = var_0 ;\n            for (Integer ele : sub) {\n                final int var_1 = 0;\n                if (ele % K != var_1 ) {\n                    final boolean var_2 = false;\n                    allDivisible = var_2 ;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            final boolean var_0 = true;\n            boolean allDivisible = var_0 ;\n            for (Integer ele : sub) {\n                final int var_1 = 0;\n                if (ele % K != var_1 ) {\n                    final boolean var_2 = false;\n                    allDivisible = var_2 ;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 388, "Adversarial Code": "const fs = require('fs');\nfunction bitwise_xor(test_tup1, test_tup2) {\n//begin to write code\n", "Adversarial truth": "const fs = require('fs');\nfunction bitwise_xor(test_tup1, test_tup2) {\n    const res = test_tup1.map((ele1, index) => ele1 ^ test_tup2[index]);\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 467, "Adversarial Code": "import re\ndef remove_lowercase(word):\n remove_lower = lambda x: re.sub('[a-z]', '', x)\n #begin to write code\n", "Adversarial truth": "import re\ndef remove_lowercase(word):\n remove_lower = lambda x: re.sub('[a-z]', '', x)\n result =  remove_lower(word)\n return result", "lang": "python"}
{"task_id": 308, "Adversarial Code": "const https = require('https');\nfunction find_long_word(text) {\n//begin to write code\n", "Adversarial truth": "const https = require('https');\nfunction find_long_word(text) {\n    return text.match(/\\b\\w{5}\\b/g) || [];\n}\n\n", "lang": "javascript"}
{"task_id": 390, "Adversarial Code": "function add_nested_tuples(test_tup1, test_tup2) {\n    return test_tup1.map((tuple1, idx) => {\n        return tuple1.map((value, jdx) => {\n        //begin to write code\n", "Adversarial truth": "function add_nested_tuples(test_tup1, test_tup2) {\n    return test_tup1.map((tuple1, idx) => {\n        return tuple1.map((value, jdx) => {\n            return value + test_tup2[idx][jdx];\n        });\n    });\n}\n\n", "lang": "javascript"}
{"task_id": 186, "Adversarial Code": "def find_exponentio(var_2, var_0):\n  var_1 = tuple(var_3 ** var_4 for var_3, var_4 in zip(var_2, var_0))\n  #begin to write code\n", "Adversarial truth": "def find_exponentio(var_2, var_0):\n  var_1 = tuple(var_3 ** var_4 for var_3, var_4 in zip(var_2, var_0))\n  return (var_1)\n", "lang": "python"}
{"task_id": 51, "Adversarial Code": "class Solution {\n    public static int smallest_num(int[] arr) {\n        Arrays.sort(arr);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int smallest_num(int[] arr) {\n        Arrays.sort(arr);\n        return arr[0];\n    }\n}\n", "lang": "java"}
{"task_id": 214, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frmd_Nin(std::vector<int>& arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frmd_Nin(std::vector<int>& arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n            low = mid + 1; \n        } else {\n            high = mid; \n        }\n    }\n    return arr[high];\n}\n\n\n", "lang": "cpp"}
{"task_id": 129, "Adversarial Code": "def extract_singly(self):\n  result = []\n  exclude = set()\n  for s in self:\n    for test in s:\n    #begin to write code\n", "Adversarial truth": "def extract_singly(self):\n  result = []\n  exclude = set()\n  for s in self:\n    for test in s:\n      if not test in exclude:\n        exclude.add(test)\n        result.append(test)\n  return (result) ", "lang": "python"}
{"task_id": 440, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_whitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nstring remove_whitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n    return regex_replace\\\n(text1, pattern, \"\");\n}\n\n\n", "lang": "cpp"}
{"task_id": 496, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n    }\n    return list1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 211, "Adversarial Code": "const util = require('util');\n//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        const var_0 = 0;\n        //begin to write code\n", "Adversarial truth": "const util = require('util');\n//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        const var_0 = 0;\n        if (typeof ele !== typeof test_tuple[var_0 ]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 172, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 407, "Adversarial Code": "function max(lst) {\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    //begin to write code\n", "Adversarial truth": "function max(lst) {\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    return maxList;\n}\n\n", "lang": "javascript"}
{"task_id": 235, "Adversarial Code": "class Solution {\n    public static double babylonianSquareroot(double number) {\n        if(number == 0) {\n            return 0;\n        }\n        double g = number / 2.0;\n        double g2 = g + 1;\n        while(g != g2) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double babylonianSquareroot(double number) {\n        if(number == 0) {\n            return 0;\n        }\n        double g = number / 2.0;\n        double g2 = g + 1;\n        while(g != g2) {\n            double n = number / g;\n            g2 = g;\n            g = (g + n) / 2;\n        }\n        return g;\n    }\n}\n\n", "lang": "java"}
{"task_id": 47, "Adversarial Code": "def opposite_Signs(x,y):\n    #begin to write code\n", "Adversarial truth": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "lang": "python"}
{"task_id": 301, "Adversarial Code": "class Solution {\n    public static double volumeCone(double a, double c) {\n        double v = (1.0/3) * Math.PI * a * a * c;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCone(double a, double c) {\n        double v = (1.0/3) * Math.PI * a * a * c;\n        return v;\n    }\n}\n", "lang": "java"}
{"task_id": 285, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int inv_count = var_0 ;\n    for (int i = var_1 ; i < n; i++) {\n        const auto var_2 = 1;\n        for (int j = i + var_2 ; j < n; j++) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_Inv_Count(vector<int> arr, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int inv_count = var_0 ;\n    for (int i = var_1 ; i < n; i++) {\n        const auto var_2 = 1;\n        for (int j = i + var_2 ; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n//This is a comment line.\n            }\n        }\n    }\n    return inv_count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 270, "Adversarial Code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n    #begin to write code\n", "Adversarial truth": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return False\n    return True", "lang": "python"}
{"task_id": 95, "Adversarial Code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n", "Adversarial truth": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) \n", "lang": "python"}
{"task_id": 487, "Adversarial Code": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k = k - 1) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k = k - 1) {\n            if (x % k == 0 && y % k == 0) {\n                gcd = k;\n                break;\n            }\n        }\n        return gcd;\n    }\n}\n", "lang": "java"}
{"task_id": 388, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> func_0(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n    return std::make_tuple(\n        std::get<0>(var_0) ^ std::get<0>(var_1),\n        std::get<1>(var_0) ^ std::get<1>(var_1),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\n\nstd::tuple<int, int, int, int> func_0(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n    return std::make_tuple(\n        std::get<0>(var_0) ^ std::get<0>(var_1),\n        std::get<1>(var_0) ^ std::get<1>(var_1),\n        std::get<2>(var_0) ^ std::get<2>(var_1),\n        std::get<3>(var_0) ^ std::get<3>(var_1)\n    );\n}\n\n\n", "lang": "cpp"}
{"task_id": 240, "Adversarial Code": "function insert_element(list, element) {\n    let newList = [];\n    for (let elt of list) {\n    //begin to write code\n", "Adversarial truth": "function insert_element(list, element) {\n    let newList = [];\n    for (let elt of list) {\n        newList.push(element, elt);\n\n\n    }\n    return newList;\n\n\n}\n\n\n\n\n", "lang": "javascript"}
{"task_id": 447, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(int l, int b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(int l, int b) {\n    int area = l * b;\n    return area;\n}\n\n\n", "lang": "cpp"}
{"task_id": 362, "Adversarial Code": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  #begin to write code\n", "Adversarial truth": "def volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume", "lang": "python"}
{"task_id": 121, "Adversarial Code": "def tup_string(tuk1):\n  str =  ''.join(tuk1)\n  #begin to write code\n", "Adversarial truth": "def tup_string(tuk1):\n  str =  ''.join(tuk1)\n  return str", "lang": "python"}
{"task_id": 8, "Adversarial Code": "def test_duplicate(arraynums):\n    nums_set\\\n = set(arraynums)    \n #begin to write code\n", "Adversarial truth": "def test_duplicate(arraynums):\n    nums_set\\\n = set(arraynums)    \n    return len\\\n(arraynums) != len(nums_set)     \n\n", "lang": "python"}
{"task_id": 381, "Adversarial Code": "function func_0(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n        //begin to write code\n", "Adversarial truth": "function func_0(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n                        + res[Math.floor(i / 3)]\n                        + res[Math.floor(i / 4)]\n                        + res[Math.floor(i / 5)])));\n        i = i + 1;\n    }\n    return res[n];\n}\n\n", "lang": "javascript"}
{"task_id": 495, "Adversarial Code": "function permutationCoefficient(n, k) {\n    let\n P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n            //begin to write code\n", "Adversarial truth": "function permutationCoefficient(n, k) {\n    let\n P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n            }\n            if (j < k) {\n                P[i][j + 1] = 0;\n            }\n        }\n    }\n    return P[n][k];\n}\n\n", "lang": "javascript"}
{"task_id": 74, "Adversarial Code": "function pi(var_0) {\n  let var_1 = 4 * Math.PI * var_0 * var_0;\n  //begin to write code\n", "Adversarial truth": "function pi(var_0) {\n  let var_1 = 4 * Math.PI * var_0 * var_0;\n  return var_1;\n}\n\n", "lang": "javascript"}
{"task_id": 495, "Adversarial Code": "function permutationCoefficient(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                //begin to write code\n", "Adversarial truth": "function permutationCoefficient(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n            }\n            if (j < k) {\n                P[i][j + 1] = 0;\n            }\n        }\n    }\n    return P[n][k];\n}\n\n", "lang": "javascript"}
{"task_id": 172, "Adversarial Code": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if\n (Math.abs(arr[i] - arr[j]) === k) {\n //begin to write code\n", "Adversarial truth": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if\n (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n\n\n", "lang": "javascript"}
{"task_id": 378, "Adversarial Code": "def find_lucas(n):\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n", "Adversarial truth": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "lang": "python"}
{"task_id": 259, "Adversarial Code": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (0 == arr[i] % 2) {\n                sum += arr[i];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (0 == arr[i] % 2) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 60, "Adversarial Code": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n", "Adversarial truth": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n            if (nums[i] > nums[i + gaps]) {\n                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n", "lang": "javascript"}
{"task_id": 211, "Adversarial Code": "//function difinition\nfunction filter(ear_7) {\n    let var_0 = true;\n    for (let var_1 of ear_7) {\n        if (typeof var_1 !== typeof ear_7[0]) {\n        //begin to write code\n", "Adversarial truth": "//function difinition\nfunction filter(ear_7) {\n    let var_0 = true;\n    for (let var_1 of ear_7) {\n        if (typeof var_1 !== typeof ear_7[0]) {\n            var_0 = false;\n            break;\n        }\n    }\n    return var_0;\n}\n\n", "lang": "javascript"}
{"task_id": 285, "Adversarial Code": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            //begin to write code\n", "Adversarial truth": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count += 1;\n            }\n\n\n        }\n    }\n    return inv_count;\n}\n\n\n", "lang": "javascript"}
{"task_id": 439, "Adversarial Code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    #begin to write code\n", "Adversarial truth": "def extract_string(str, l):\n\n\n\n\n    result = [e for e in str if len(e) == l] \n\n\n    return result", "lang": "python"}
{"task_id": 46, "Adversarial Code": "def find_Max_Num(arr,n) :\n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n    #begin to write code\n", "Adversarial truth": "def find_Max_Num(arr,n) : \n    arr.sort(reverse = True) \n    num = arr[0] \n    for i in range(1,n) : \n#This is a comment line.\n        num = num * 10 + arr[i] \n    return num ", "lang": "python"}
{"task_id": 330, "Adversarial Code": "class Solution {\n    public static Integer[] sort(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Integer[] sort(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        Arrays.sort(t);\n        return t;\n    }\n}\n", "lang": "java"}
{"task_id": 450, "Adversarial Code": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n        }\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        return upperCtr;\n    }\n}\n", "lang": "java"}
{"task_id": 47, "Adversarial Code": "class Solution {\n    public static boolean oppositeSigns(int x, long y) {\n        return ((y ^ x) < 0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean oppositeSigns(int x, long y) {\n        return ((y ^ x) < 0);\n    }\n}\n", "lang": "java"}
{"task_id": 155, "Adversarial Code": "const var_5 = 'stream';\nconst stream = require(var_5 );\nfunction find_even_Pair(A, N) { \n    const var_6 = 0;\n    const var_7 = 0;\n    const var_0 = var_6 ;\n    const var_1 = var_7 ;\n    let evenPair = var_0 ;\n    for (let i = var_1 ; i < N; i++) { \n        const var_8 = 1;\n        const var_2 = var_8 ;\n        //begin to write code\n", "Adversarial truth": "const var_5 = 'stream';\nconst stream = require(var_5 );\nfunction find_even_Pair(A, N) { \n    const var_6 = 0;\n    const var_7 = 0;\n    const var_0 = var_6 ;\n    const var_1 = var_7 ;\n    let evenPair = var_0 ;\n    for (let i = var_1 ; i < N; i++) { \n        const var_8 = 1;\n        const var_2 = var_8 ;\n        for (let j = i + var_2 ; j < N; j++) { \n            const var_9 = 2;\n            const var_10 = 0;\n            const var_3 = var_9 ;\n            const var_4 = var_10 ;\n            if (((A[i] ^ A[j]) % var_3 ) === var_4 ) { \n                evenPair++;\n            }\n        }\n    }\n\n    return evenPair; \n}\n\n", "lang": "javascript"}
{"task_id": 362, "Adversarial Code": "def\\\n volume_cuboid(l,w,h):\n #begin to write code\n", "Adversarial truth": "def\\\n volume_cuboid(l,w,h):\n  volume=l*w*h\n  return volume\n", "lang": "python"}
{"task_id": 215, "Adversarial Code": "def odd_values_string(str):\n  var_1 = \"\" \n  for var_0 in range(len(str)):\n  #begin to write code\n", "Adversarial truth": "def odd_values_string(str):\n  var_1 = \"\" \n  for var_0 in range(len(str)):\n    if var_0 % 2 == 0:\n      var_1 = var_1 + str[var_0]\n  return var_1", "lang": "python"}
{"task_id": 157, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint contains(const std::vector<int>& var_0, int var_2) {\n    int count = 0;\n    for (int var_1 : var_0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint contains(const std::vector<int>& var_0, int var_2) {\n    int count = 0;\n    for (int var_1 : var_0) {\n        if (var_1 == var_2) count += 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 105, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\nint tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\n\n#include <iostream>\n#include <vector>\n//This is a comment line.\n#include <string>\n#include <cassert>\n\nint tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n        result += std::to_string(num);\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    }\n    return std::stoi(result);\n}\n\n\n", "lang": "cpp"}
{"task_id": 21, "Adversarial Code": "function max_Prime_Factors(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function max_Prime_Factors(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return parseInt(maxPrime);\n}\n\n", "lang": "javascript"}
{"task_id": 411, "Adversarial Code": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return Math.round(sum / n * 1000000.0) / 1000000.0;\n    }\n}\n", "lang": "java"}
{"task_id": 259, "Adversarial Code": "class Solution {\n    public static int sum(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sum(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 188, "Adversarial Code": "class Solution {\n    public static int func_0(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 495, "Adversarial Code": "function permutationCoefficient(n, k) {\n    const var_0 = 1;\n    const var_1 = 1;\n    const var_2 = 0;\n    const var_3 = 0;\n    let P = Array.from({ length: n + var_0  }, () => Array(k + var_1 ).fill(var_2 ));\n    for (let i = var_3 ; i <= n; i++) {\n        const var_4 = 0;\n        for (let j = var_4 ; j <= Math.min(i, k); j++) {\n            const var_5 = 0;\n            if (j === var_5 ) {\n                const var_6 = 1;\n                P[i][j] = var_6 ;\n            } else {\n            //begin to write code\n", "Adversarial truth": "function permutationCoefficient(n, k) {\n    const var_0 = 1;\n    const var_1 = 1;\n    const var_2 = 0;\n    const var_3 = 0;\n    let P = Array.from({ length: n + var_0  }, () => Array(k + var_1 ).fill(var_2 ));\n    for (let i = var_3 ; i <= n; i++) {\n        const var_4 = 0;\n        for (let j = var_4 ; j <= Math.min(i, k); j++) {\n            const var_5 = 0;\n            if (j === var_5 ) {\n                const var_6 = 1;\n                P[i][j] = var_6 ;\n            } else {\n                const var_7 = 1;\n                const var_8 = 1;\n                const var_9 = 1;\n                P[i][j] = P[i - var_7 ][j] + (j * P[i - var_8 ][j - var_9 ]);\n            }\n            if (j < k) {\n                const var_10 = 1;\n                const var_11 = 0;\n                P[i][j + var_10 ] = var_11 ;\n            }\n        }\n    }\n    return P[n][k];\n}\n\n", "lang": "javascript"}
{"task_id": 460, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> var_0, int var_2, int var_4) {\n    int var_3 = 1;\n    for (int var_1 = 0; var_1 < var_2; var_1++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_remainder(std::vector<int> var_0, int var_2, int var_4) {\n    int var_3 = 1;\n    for (int var_1 = 0; var_1 < var_2; var_1++) {\n        var_3 = (var_3 * (var_0[var_1] % var_4)) % var_4;\n    }\n    return var_3 % var_4;\n}\n\n\n", "lang": "cpp"}
{"task_id": 230, "Adversarial Code": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n//This is a comment line.\n                }\n            }\n        }\n        return array_3d;\n    }\n}\n", "lang": "java"}
{"task_id": 245, "Adversarial Code": "class Solution {\n    public int countPrimesNums(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int ctr = var_0 ;\n        for (int num = var_1 ; num < n; num++) {\n            final int var_2 = 1;\n            final int var_3 = 2;\n            if (num <= var_2 ) {\n                continue;\n            }\n            int i;\n            for (i = var_3 ; i < num; i++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int countPrimesNums(int n) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int ctr = var_0 ;\n        for (int num = var_1 ; num < n; num++) {\n            final int var_2 = 1;\n            final int var_3 = 2;\n            if (num <= var_2 ) {\n                continue;\n            }\n            int i;\n            for (i = var_3 ; i < num; i++) {\n                final int var_4 = 0;\n                if (num % i == var_4 ) {\n                    break;\n                }\n            }\n            if (i == num) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n}\n", "lang": "java"}
{"task_id": 1, "Adversarial Code": "function sortMatrix(M) {\n//begin to write code\n", "Adversarial truth": "function sortMatrix(M) {\n    return M.sort((a, b) => a.reduce((sum, num) => sum + num, 0) - b.reduce((sum, num) => sum + num, 0));\n}\n\n", "lang": "javascript"}
{"task_id": 477, "Adversarial Code": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n", "Adversarial truth": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area\n", "lang": "python"}
{"task_id": 370, "Adversarial Code": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n        if\n (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n            //begin to write code\n", "Adversarial truth": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n        if\n (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n        } else {\n            return a[indexNo] - b[indexNo];\n        }\n    });\n    return ret;\n}\n", "lang": "javascript"}
{"task_id": 298, "Adversarial Code": "def maximum(a,b):\n    if a >= b: \n        return a \n        #begin to write code\n", "Adversarial truth": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "lang": "python"}
{"task_id": 201, "Adversarial Code": "function fourth_Power_Sum(n) { \n    const var_0 = 0;\n    const var_1 = 1;\n    let sum = var_0 ;\n    for (let i = var_1 ; i <= n; i++) { \n    //begin to write code\n", "Adversarial truth": "function fourth_Power_Sum(n) { \n    const var_0 = 0;\n    const var_1 = 1;\n    let sum = var_0 ;\n    for (let i = var_1 ; i <= n; i++) { \n        const var_2 = 4;\n        sum += Math.pow(i, var_2 );\n//This is a comment line.\n    }\n    return sum;\n}\n\n", "lang": "javascript"}
{"task_id": 358, "Adversarial Code": "function lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  //begin to write code\n", "Adversarial truth": "function lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  return LSA;\n}\n\n", "lang": "javascript"}
{"task_id": 61, "Adversarial Code": "function dif_Square(n) {\n    if (n % 4 !== 2) {\n        return 1;\n        //begin to write code\n", "Adversarial truth": "function dif_Square(n) {\n    if (n % 4 !== 2) {\n        return 1;\n    }\n    return 0;\n}\n\n", "lang": "javascript"}
{"task_id": 53, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n//This is a comment line.\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\n//This is a comment line.\nusing namespace std;\n\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n    return subjectmarks;\n}\n\n\n", "lang": "cpp"}
{"task_id": 43, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n\n\n        buckets[num]++;\n    }\n    int index = 0;\n    for (int j = 0; j <= max_value; ++j) {\n        for (int a = 0; a < buckets[j]; ++a) {\n            my_list[index] = j;\n            index++;\n        }\n    }\n    return my_list;\n}\n\n\n", "lang": "cpp"}
{"task_id": 486, "Adversarial Code": "class Solution {\n    public\n static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n\n\n    public\n static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        return SA;\n    }\n}\n", "lang": "java"}
{"task_id": 29, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap\\\n<\\\nint, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap\\\n<\\\nint, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n            result[num]++;\n        }\n    }\n    return result;\n}\n\n\n\n", "lang": "cpp"}
{"task_id": 85, "Adversarial Code": "class Solution {\n    public static int solve(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                x++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                x++;\n            }\n        }\n        return x;\n    }\n}\n", "lang": "java"}
{"task_id": 4, "Adversarial Code": "class Solution {\n    public\n static\n ArrayList<String> splitLowerString(String text) {\n        ArrayList<String> result = new ArrayList<>();\n        Pattern\n pattern = Pattern.compile(\"[a-z][^a-z]*\");\n //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n    public\n static\n ArrayList<String> splitLowerString(String text) {\n        ArrayList<String> result = new ArrayList<>();\n        Pattern\n pattern = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            result.add(matcher.group());\n        }\n        return result;\n    }\n}\n\n\n", "lang": "java"}
{"task_id": 162, "Adversarial Code": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\");\n    }\n}\n", "lang": "java"}
{"task_id": 128, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble\\\n circle_circumference(double r) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble\\\n circle_circumference(double r) {\n    double perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n\n", "lang": "cpp"}
{"task_id": 239, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n\n\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n\n\n\n\n", "lang": "cpp"}
{"task_id": 133, "Adversarial Code": "class Solution {\n    public static int func_0(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n        }\n        return sum;\n    }\n}\n", "lang": "java"}
{"task_id": 27, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        if (el % 2 != 0 && first_odd == -1) {\n            first_odd = el;\n        }\n    }\n    if (first_even == -1 || first_odd == -1) return -1;\n    return static_cast<double>(first_even) / first_odd;\n}\n\n\n", "lang": "cpp"}
{"task_id": 367, "Adversarial Code": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  //begin to write code\n", "Adversarial truth": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  return test_list;\n}\n\n\n\n", "lang": "javascript"}
{"task_id": 177, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n//This is a comment line.\n}\n\n\n", "lang": "cpp"}
{"task_id": 307, "Adversarial Code": "function max_volume(s) {\n    let mzcvaofe = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            //begin to write code\n", "Adversarial truth": "function max_volume(s) {\n    let mzcvaofe = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            mzcvaofe = Math.max(mzcvaofe, i * j * k);\n        }\n    }\n    return mzcvaofe;\n}\n\n", "lang": "javascript"}
{"task_id": 359, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort\\\n(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort\\\n(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n    });\n    return items;\n}\n\n\n", "lang": "cpp"}
{"task_id": 58, "Adversarial Code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t#begin to write code\n", "Adversarial truth": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set\n", "lang": "python"}
{"task_id": 105, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nint gupov_tl_rnt(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nint gupov_tl_rnt(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n        result += std::to_string(num);\n    }\n    return std::stoi(result);\n}\n\n\n", "lang": "cpp"}
{"task_id": 218, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n\n\n}\n\n\n", "lang": "cpp"}
{"task_id": 77, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, long> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\n\nstd::map<int, long> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n        freq_count[num]++;\n    }\n    return freq_count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 202, "Adversarial Code": "def concatenate_strings(test_tup1, test_tup2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def concatenate_strings(test_tup1, test_tup2):\n\n\n  res\\\n = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python"}
{"task_id": 160, "Adversarial Code": "function perimeter_pentagon(a) {\n//begin to write code\n", "Adversarial truth": "function perimeter_pentagon(a) {\n  return 5 * a;\n}\n\n", "lang": "javascript"}
{"task_id": 180, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n    } else {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n    } else {\n        return false;\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 299, "Adversarial Code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n", "Adversarial truth": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "lang": "python"}
{"task_id": 445, "Adversarial Code": "import java.lang.*;\nimport java.net.*;\nclass Solution {\n    public List<String> reverseStringList(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "import java.lang.*;\nimport java.net.*;\nclass Solution {\n    public List<String> reverseStringList(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n//This is a comment line.\n            result.add(new StringBuilder(s).reverse().toString());\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 400, "Adversarial Code": "import re\ndef snake_to_camel(word):\n    #begin to write code\n", "Adversarial truth": "import re\ndef snake_to_camel(word):\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "lang": "python"}
{"task_id": 4, "Adversarial Code": "class Solution {\n    public static ArrayList<String> parse(String var_3) {\n        ArrayList<String> var_2 = new ArrayList<>();\n        Pattern var_1 = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher var_0 = var_1.matcher(var_3);\n        while (var_0.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> parse(String var_3) {\n        ArrayList<String> var_2 = new ArrayList<>();\n        Pattern var_1 = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher var_0 = var_1.matcher(var_3);\n        while (var_0.find()) {\n            var_2.add(var_0.group());\n        }\n        return var_2;\n    }\n}\n", "lang": "java"}
{"task_id": 29, "Adversarial Code": "function freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num] = 1 + result[num];\n            //begin to write code\n", "Adversarial truth": "function freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num] = 1 + result[num];\n        } else {\n            result[num] = 1;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 115, "Adversarial Code": "def sum(a,b):\n    sum = 0\n    for i in range (1,min(a,b)): \n        if\\\n        #begin to write code\n", "Adversarial truth": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if\\\n (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "lang": "python"}
{"task_id": 439, "Adversarial Code": "#include <fstream>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n            result.push_back(str);\n//begin to write code\n", "Adversarial truth": "#include <fstream>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n            result.push_back(str);\n        }\n    }\n    double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 102, "Adversarial Code": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n            //begin to write code\n", "Adversarial truth": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n        } else if (\"+-\".includes(text[0]) && text.slice(1).split('').every((char, i) => \"0123456789\".includes(text[1 + i]))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n", "lang": "javascript"}
{"task_id": 380, "Adversarial Code": "class Solution {\n    public\n static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            Map<String, Map<String, Integer>> outerMap = new HashMap<>();\n            outerMap.put(l1.get(i), innerMap);\n            result.add(outerMap);\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 116, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\n\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n        if (word.length() > n) {\n            word_len.push_back(word);\n        }\n    }\n    return word_len;\n}\n\n\n", "lang": "cpp"}
{"task_id": 419, "Adversarial Code": "def kzizyloa_drivctrrx(a, b, c):\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n", "Adversarial truth": "def kzizyloa_drivctrrx(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "lang": "python"}
{"task_id": 385, "Adversarial Code": "class Solution {\n    private\n static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    private\n static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 388, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n    double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "//This is a comment line.\nclass Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n    double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 150, "Adversarial Code": "function remove_elements(list1, list2) {\n    const\n result\n //begin to write code\n", "Adversarial truth": "function remove_elements(list1, list2) {\n    const\n result\n =\n list1.filter(x => !list2.includes(x));\n\n\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 473, "Adversarial Code": "def remove_matching_tuple(test_list1, test_list2):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def remove_matching_tuple(test_list1, test_list2):\n#This is a comment line.\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "lang": "python"}
{"task_id": 221, "Adversarial Code": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(long i = 0; i < n; i = i + 1){\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(long i = 0; i < n; i = i + 1){\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n}\n", "lang": "java"}
{"task_id": 89, "Adversarial Code": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n            return i;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\n\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n            return i;\n        }\n    }\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    return -1; // Should never reach here for realistic input ranges\n}\n\n\ndouble temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n", "lang": "cpp"}
{"task_id": 424, "Adversarial Code": "class Solution {\n    public static int lastDigit(int n) {\n        return n % 10;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lastDigit(int n) {\n\n\n        return n % 10;\n    }\n}\n\n", "lang": "java"}
{"task_id": 340, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool unique_Characters(std::string str) {\n    {\n        int i = 0;\n        for (; i < str.length(); i++) {\n            {\n                int j = i + 1;\n                for (; j < str.length(); j++) {\n                        if (str[i] == str[j]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool unique_Characters(std::string str) {\n    {\n        int i = 0;\n        for (; i < str.length(); i++) {\n            {\n                int j = i + 1;\n                for (; j < str.length(); j++) {\n                        if (str[i] == str[j]) {\n                            return false;\n                        }\n                    }\n            }\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 445, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n    return *std::min_element(lst.begin(), lst.end());\n}\n\n\n", "lang": "cpp"}
{"task_id": 260, "Adversarial Code": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            sum = sum + (j * j * j * j * j);\n        }\n        return sum;\n    }\n}\n\n", "lang": "java"}
{"task_id": 364, "Adversarial Code": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    #begin to write code\n", "Adversarial truth": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (\\\nb if n - a > b - n else a)", "lang": "python"}
{"task_id": 129, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<long> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.end() == temp.find(ele)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nstd::vector<long> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.end() == temp.find(ele)) {\n                temp.insert(ele);\n                res.push_back(ele);\n            }\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp"}
{"task_id": 283, "Adversarial Code": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n            }\n        }\n        return maxVal;\n    }\n}\n", "lang": "java"}
{"task_id": 468, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint first_Digit(long n) {\n    while (n >= 10) {\n        n = n / 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint first_Digit(long n) {\n    while (n >= 10) {\n        n = n / 10;\n    }\n    return n;\n}\n\n\n", "lang": "cpp"}
{"task_id": 107, "Adversarial Code": "function stringToList(string) {\n    const var_0 = \" \";\n    //begin to write code\n", "Adversarial truth": "function stringToList(string) {\n    const var_0 = \" \";\n    let lst = string.split(var_0 );\n    return lst;\n}\n\n", "lang": "javascript"}
{"task_id": 481, "Adversarial Code": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        (function() {let temp_var_7 = 9.9; temp_var_7 = temp_var_7 + 1;})();\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n    return found;\n}\n\n", "lang": "javascript"}
{"task_id": 42, "Adversarial Code": "function check_Equality(str) {\n  if (!(str[0] === str[str.length - 1])) {\n    return \"Not Equal\";\n  }\n  //begin to write code\n", "Adversarial truth": "function check_Equality(str) {\n  if (!(str[0] === str[str.length - 1])) {\n    return \"Not Equal\";\n  }\n  else {\n    return \"Equal\";\n  }\n}\n\n", "lang": "javascript"}
{"task_id": 492, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& arr) {\n    std::vector<int> vec;\n    for (size_t index = 0; index < arr.size() - 1; ++index) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(const std::vector<int>& arr) {\n    std::vector<int> vec;\n    for (size_t index = 0; index < arr.size() - 1; ++index) {\n        vec.push_back(arr[index] + arr[index + 1]);\n    }\n    return vec;\n}\n\n\n", "lang": "cpp"}
{"task_id": 322, "Adversarial Code": "def Sort(self):\n    self.sort(key = lambda item: item[1]) \n    #begin to write code\n", "Adversarial truth": "def Sort(self): \n    self.sort(key = lambda item: item[1]) \n    return self ", "lang": "python"}
{"task_id": 48, "Adversarial Code": "class Solution {\n    public\n static int isOctagonal(int n) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n    }\n}\n", "lang": "java"}
{"task_id": 109, "Adversarial Code": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n        return result_max;\n    }\n}\n", "lang": "java"}
{"task_id": 139, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint gcd(int p, int q) {\n    for(;(q != 0);){\n        int temp = p % q;\n        p = q;\n        q = temp;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n//_\ufffd\ufffd_\ufffd__\nint gcd(int p, int q) {\n    for(;(q != 0);){\n        int temp = p % q;\n        p = q;\n        q = temp;\n    }\n    return p;\n}\n\nbool is_coprime(int x, int y) {\n    return gcd(x, y) == 1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 87, "Adversarial Code": "function multiplyNum(numbers) {\n    const var_0 = 1;\n    let temp_var_5 = 9.9;while (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n    let total = var_0 ;\n    //begin to write code\n", "Adversarial truth": "function multiplyNum(numbers) {\n    const var_0 = 1;\n    let temp_var_5 = 9.9;while (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n    let total = var_0 ;\n    for (let x of numbers) {\n        total *= x;\n    }\n    return total / numbers.length;\n}\n\n", "lang": "javascript"}
{"task_id": 108, "Adversarial Code": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n        //begin to write code\n", "Adversarial truth": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n//This is a comment line.\n    return XOR;\n}\n\n", "lang": "javascript"}
{"task_id": 216, "Adversarial Code": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n        } else {\n            smallest = c;\n        }\n        return smallest;\n    }\n}\n", "lang": "java"}
{"task_id": 75, "Adversarial Code": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n    }\n}\n", "lang": "java"}
{"task_id": 248, "Adversarial Code": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i = i + 1) {\n            for (int j = 0; j < test_tup1[i].length; j = j + 1) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i = i + 1) {\n            for (int j = 0; j < test_tup1[i].length; j = j + 1) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 299, "Adversarial Code": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n            }\n        }\n        Character[] result = new Character[list.size()];\n        return list.toArray(result);\n    }\n}\n", "lang": "java"}
{"task_id": 14, "Adversarial Code": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i = i + 1) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n", "Adversarial truth": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i = i + 1) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n            prod = prod * (arr[i]);\n        }\n    }\n    return prod;\n}\n\n", "lang": "javascript"}
{"task_id": 229, "Adversarial Code": "def replace_list(list1,list2):\n list1[-1:] = list2\n #begin to write code\n", "Adversarial truth": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n\n", "lang": "python"}
{"task_id": 104, "Adversarial Code": "class Solution {\n    public static boolean emptyDit(List<Map<Object, Object>> list1) {\n        for (Map<Object, Object> d : list1) {\n            if (!d.isEmpty()) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean emptyDit(List<Map<Object, Object>> list1) {\n        for (Map<Object, Object> d : list1) {\n            if (!d.isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java"}
{"task_id": 49, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\n\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp"}
{"task_id": 41, "Adversarial Code": "class Solution {\n    public static int parallelogram_area(long b, int h) {\n        int area = b * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parallelogram_area(long b, int h) {\n        int area = b * h;\n        return area;\n    }\n}\n", "lang": "java"}
{"task_id": 364, "Adversarial Code": "def round_num(n,m):\n#This is a comment line.\n    a = (n //m) * m\n    temp_var_5 = 9.9\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef round_num(n,m):\n    a = (n //m) * m\n    temp_var_5 = 9.9\n    print('This function is used to remove a item of a list')\n    b = a + m\n    return (b if n - a > b - n else a)", "lang": "python"}
{"task_id": 430, "Adversarial Code": "def\\\n surfacearea_cube(l):\n #begin to write code\n", "Adversarial truth": "def\\\n surfacearea_cube(l):\n  surfacearea= 6*l*l\n  return surfacearea", "lang": "python"}
{"task_id": 155, "Adversarial Code": "def find_even_Pair(A,N):\n    evenPair = 0\n    for i in range(0,N): \n        for\\\n j in range(i+1,N): \n #begin to write code\n", "Adversarial truth": "def find_even_Pair(A,N): \n    evenPair = 0\n\n\n    for i in range(0,N): \n        for\\\n j in range(i+1,N): \n            if\\\n ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ", "lang": "python"}
{"task_id": 154, "Adversarial Code": "function clunt_chai_plhrgion(var_2) {\n    let var_0 = 0;\n    for (let var_1 = 0; var_1 < var_2.length; var_1++) {\n        if (var_1 === var_2.charCodeAt(var_1) - 'A'.charCodeAt(0) ||\n            var_1 === var_2.charCodeAt(var_1) - 'a'.charCodeAt(0)) {\n            //begin to write code\n", "Adversarial truth": "function clunt_chai_plhrgion(var_2) {\n    let var_0 = 0;\n    for (let var_1 = 0; var_1 < var_2.length; var_1++) {\n        if (var_1 === var_2.charCodeAt(var_1) - 'A'.charCodeAt(0) ||\n            var_1 === var_2.charCodeAt(var_1) - 'a'.charCodeAt(0)) {\n            var_0 += 1;\n        }\n    }\n    return var_0;\n}\n\n", "lang": "javascript"}
{"task_id": 382, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> function(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::pair<int, std::vector<int>> function(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n            max_length = vec.size();\n            max_list = vec;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n", "lang": "cpp"}
{"task_id": 324, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\n    const auto var_0 = 2;\n    const auto var_1 = 1;\n    const auto var_2 = 2;\n    const auto var_3 = 9.9;\n    const auto var_4 = 9.12;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint ap_sum(int a, int n, int d) {\n    const auto var_0 = 2;\n    const auto var_1 = 1;\n    const auto var_2 = 2;\n    const auto var_3 = 9.9;\n    const auto var_4 = 9.12;\n    int total = (n * (var_0  * a + (n - var_1 ) * d)) / var_2 ;\n    return total;\n    double temp_var_5 = var_3 ;if (temp_var_5 < var_4 ) {std::cout << var_5  << std::endl;temp_var_5 = temp_var_5 + var_6 ;}\nconst std::string var_5 = \"This function is used to remove a item of a list\";\nconst auto var_6 = 1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 383, "Adversarial Code": "class Solution {\n    public static boolean checkDistinct(long[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkDistinct(long[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                break;\n            }\n            temp.add(ele);\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 447, "Adversarial Code": "#include <mutex>\n#include <atomic>\n#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n//begin to write code\n", "Adversarial truth": "#include <mutex>\n#include <atomic>\n#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n    int area = l * b;\n    return area;\n}\n\n\n", "lang": "cpp"}
{"task_id": 354, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n = n / (10);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n = n / (10);\n        count = count + (1);\n    }\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 411, "Adversarial Code": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return Math\n.round(sum / n * 1000000.0) / 1000000.0;\n    }\n}\n\n", "lang": "java"}
{"task_id": 117, "Adversarial Code": "class Solution {\n    public static List<String> longWords(int n, String str) {\n        List<String> wordLen = new ArrayList<>();\n        String[] txt = str.split(\" \");\n        for (String x : txt) {\n            if (x.length() > n) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> longWords(int n, String str) {\n        List<String> wordLen = new ArrayList<>();\n        String[] txt = str.split(\" \");\n        for (String x : txt) {\n            if (x.length() > n) {\n                wordLen.add(x);\n            }\n        }\n        return wordLen;\n    }\n}\n", "lang": "java"}
{"task_id": 10, "Adversarial Code": "def multiples_of_num(i,num):\n    l= list(range(num,(i+1)*num, num)) \n    #begin to write code\n", "Adversarial truth": "def multiples_of_num(i,num): \n    l= list(range(num,(i+1)*num, num)) \n    return list(l)", "lang": "python"}
{"task_id": 205, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                exist = false;\n                break;\n            }\n        }\n        if (!exist) break;\n    }\n    return exist;\n}\n\n\n", "lang": "cpp"}
{"task_id": 469, "Adversarial Code": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let\n ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n        //begin to write code\n", "Adversarial truth": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let\n ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (max < ctr[str1.charCodeAt(i)]) {\n            max = ctr[str1.charCodeAt(i)];\n            ch = str1[i];\n        }\n    }\n    return ch;\n}\n\n", "lang": "javascript"}
{"task_id": 199, "Adversarial Code": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    let found = get_char.test(string);\n    //begin to write code\n", "Adversarial truth": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    let found = get_char.test(string);\n    return !found;\n    let temp_var_4 = 9.9;temp_var_4 = temp_var_4 + 1;\n}\n\n", "lang": "javascript"}
{"task_id": 122, "Adversarial Code": "function reduce(data) {\n  const result = data.filter(x => x < 0);\n  //begin to write code\n", "Adversarial truth": "function reduce(data) {\n  const result = data.filter(x => x < 0);\n  return result.reduce((sum, beta) => sum + beta, 0);\n}\n\n", "lang": "javascript"}
{"task_id": 49, "Adversarial Code": "class Solution {\n    public int maxLenSub(int arr[], int n) {\n        int mls[] = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i = i + 1) {\n            mls[i] = 1;\n        }\n        for (int i = 1; i < n; i = i + 1) {\n            for (int j = 0; j < i; j = j + 1) {\n                if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int maxLenSub(int arr[], int n) {\n        int mls[] = new int[n];\n        int max = 0;\n\n        for (int i = 0; i < n; i = i + 1) {\n            mls[i] = 1;\n        }\n\n        for (int i = 1; i < n; i = i + 1) {\n            for (int j = 0; j < i; j = j + 1) {\n                if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i = i + 1) {\n            if (max < mls[i]) {\n                max = mls[i];\n            }\n        }\n\n        return max;\n    }\n}\n", "lang": "java"}
{"task_id": 330, "Adversarial Code": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  #begin to write code\n", "Adversarial truth": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)", "lang": "python"}
{"task_id": 83, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n            minLength = v.size();\n        }\n    }\n    return minLength;\n}\n\n\n", "lang": "cpp"}
{"task_id": 189, "Adversarial Code": "#include <fstream>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    const auto var_0 = 0;\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = var_0 ; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n//begin to write code\n", "Adversarial truth": "#include <fstream>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    const auto var_0 = 0;\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = var_0 ; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n            max_result.push_back(i);\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        }\n    }\n    return max_result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 258, "Adversarial Code": "class Solution {\n    public\n static\n int\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n int\n asciiValue(char k) {\n        return (int) k;\n    }\n}\n\n\n\n", "lang": "java"}
{"task_id": 368, "Adversarial Code": "class Solution {\n    public\n static\n int surfacearea_cuboid(int l, int w, int h) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n int surfacearea_cuboid(int l, int w, int h) {\n\n\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n    }\n}\n\n\n\n", "lang": "java"}
{"task_id": 357, "Adversarial Code": "def\\\n repeat_tuples(test_tup, N):\n #begin to write code\n", "Adversarial truth": "\n\ndef\\\n repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n\n\n  return (res) ", "lang": "python"}
{"task_id": 310, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    {\n        int i = 0;\n        for(;(i < list1.size());){\n        if (list1[i] == min_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    {\n        int i = 0;\n        for(;(i < list1.size());){\n        if (list1[i] == min_val) {\n            min_result.push_back(i);\n        }\n            i++;\n        }\n    }\n    return min_result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 122, "Adversarial Code": "def count(var_1):\n  var_0 = list(filter(lambda var_1:var_1<0,var_1))\n  #begin to write code\n", "Adversarial truth": "def count(var_1):\n  var_0 = list(filter(lambda var_1:var_1<0,var_1))\n  return sum(var_0)", "lang": "python"}
{"task_id": 255, "Adversarial Code": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        int LSA = 4 * (l * l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        int LSA = 4 * (l * l);\n        return LSA;\n    }\n}\n", "lang": "java"}
{"task_id": 271, "Adversarial Code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "lang": "python"}
{"task_id": 425, "Adversarial Code": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n            }\n        }\n        return result;\n\n\n\n\n    }\n}\n\n\n", "lang": "java"}
{"task_id": 315, "Adversarial Code": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n            }\n        }\n        return Collections.max(temp.entrySet(), Map.Entry.comparingByValue()).getKey();\n    }\n}\n", "lang": "java"}
{"task_id": 334, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> druf_clmhexfgieemfmh(const vector<int>& var_1) {\n    vector<int> var_2;\n    for (int var_0 = 1; var_0 < var_1.size(); var_0++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> druf_clmhexfgieemfmh(const vector<int>& var_1) {\n    vector<int> var_2;\n    for (int var_0 = 1; var_0 < var_1.size(); var_0++) {\n        var_2.push_back(var_1[var_0] - var_1[var_0-1]);\n    }\n    return var_2;\n}\n\n\n", "lang": "cpp"}
{"task_id": 148, "Adversarial Code": "def mlnth_svzhom(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n\t #begin to write code\n", "Adversarial truth": "def mlnth_svzhom(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season", "lang": "python"}
{"task_id": 352, "Adversarial Code": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 15, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n                break;\n            }\n        }\n        if (!res) break;\n    }\n    return res;\n}\n\n\n\n\n", "lang": "cpp"}
{"task_id": 258, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n\n\n#include <cassert>\n\n\n\nint ascii_value(char k) {\n  return int(k);\n}\n\n\n\n\n", "lang": "cpp"}
{"task_id": 172, "Adversarial Code": "function func_0(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n            //begin to write code\n", "Adversarial truth": "function func_0(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript"}
{"task_id": 205, "Adversarial Code": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "Adversarial truth": "function check_subset_list(list1, list2) {\n    let exist = true;\n\n\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n\n\n            exist = false;\n        }\n    }\n    return exist;\n}\n\n", "lang": "javascript"}
{"task_id": 272, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 481, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool\\\n binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool\\\n binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n\n    return found;\n}\n\n\n\n\n", "lang": "cpp"}
{"task_id": 305, "Adversarial Code": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n            } else if (x < A[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 192, "Adversarial Code": "class Solution {\n    public int hammingDistance(int n1, int n2) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int x = n1 ^ n2;\n        int setBits = var_0 ;\n        while (x > var_1 ) {\n            final int var_2 = 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int hammingDistance(int n1, int n2) {\n        final int var_0 = 0;\n        final int var_1 = 0;\n        int x = n1 ^ n2;\n        int setBits = var_0 ;\n        while (x > var_1 ) {\n            final int var_2 = 1;\n            final int var_3 = 1;\n            setBits += x & var_2 ;\n            x >>= var_3 ;\n        }\n        return setBits;\n    }\n}\n", "lang": "java"}
{"task_id": 381, "Adversarial Code": "const child_process = require('child_process');\nfunction get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n    //begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nfunction get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n                        + res[Math.floor(i / 3)]\n                        + res[Math.floor(i / 4)]\n                        + res[Math.floor(i / 5)])));\n        i = i + 1;\n    }\n    return res[n];\n}\n\n", "lang": "javascript"}
{"task_id": 298, "Adversarial Code": "function maximum(a, b) {\n    if (a >= b) {\n        return a;\n        //begin to write code\n", "Adversarial truth": "function maximum(a, b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n\n\n}\n\n", "lang": "javascript"}
{"task_id": 240, "Adversarial Code": "class Solution {\n    public static ArrayList<String> add(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> add(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            result.add(elt);\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 391, "Adversarial Code": "class Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i = i + 1) {\n            for (int j = Math.min(i, r); j > 0; j = j - 1) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i = i + 1) {\n            for (int j = Math.min(i, r); j > 0; j = j - 1) {\n                C[j] = (C[j] + C[j-1]) % p;\n            }\n        }\n        return C[r];\n    }\n}\n", "lang": "java"}
{"task_id": 408, "Adversarial Code": "def func_0(list1):\n  lenght=len(list1)\n  #begin to write code\n", "Adversarial truth": "def func_0(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "lang": "python"}
{"task_id": 210, "Adversarial Code": "import subprocess\nimport subprocess\ndef first_even(nums):\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even\n    #begin to write code\n", "Adversarial truth": "import subprocess\nimport subprocess\n\n\ndef first_even(nums):\n\n    first_even = next((el for el in nums if el%2==0),-1)\n    return first_even\n    temp_var_4 = 9.9\n    if temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1", "lang": "python"}
{"task_id": 372, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (!(arr[i] < mn)) if (arr[i] == mn) {\n            freq++;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (!(arr[i] < mn)) if (arr[i] == mn) {\n            freq++;\n        }\n        else {\n            mn = arr[i];\n            freq = 1;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp"}
{"task_id": 142, "Adversarial Code": "def parabola_vertex(a, b, c):\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  temp_var_5 = 9.9\n  #begin to write code\n", "Adversarial truth": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  temp_var_5 = 9.9\n  while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n  return vertex", "lang": "python"}
{"task_id": 394, "Adversarial Code": "function check_tuplex(tree, includes) {\n//begin to write code\n", "Adversarial truth": "function check_tuplex(tree, includes) {\n  return tree.includes(includes);\n}\n\n", "lang": "javascript"}
{"task_id": 415, "Adversarial Code": "class Solution {\n    public\n static\n List\n<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n List\n<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n            }\n\n\n        }\n        return oddNums;\n    }\n}\n", "lang": "java"}
{"task_id": 492, "Adversarial Code": "function add_consecutive_nums(nums) {\n    let\n    //begin to write code\n", "Adversarial truth": "function add_consecutive_nums(nums) {\n    let\n result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 388, "Adversarial Code": "function func_0(tesg, other) {\n    const result = tesg.map((value, key) => value ^ other[key]);\n    //begin to write code\n", "Adversarial truth": "function func_0(tesg, other) {\n    const result = tesg.map((value, key) => value ^ other[key]);\n    return result;\n}\n\n", "lang": "javascript"}
{"task_id": 330, "Adversarial Code": "class Solution {\n    public static Integer[] setToTuple(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        Arrays.sort(t);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Integer[] setToTuple(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        Arrays.sort(t);\n        return t;\n    }\n}\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n", "lang": "java"}
{"task_id": 185, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n            res.push_back(ele);\n        }\n    }\n    return res;\n}", "lang": "cpp"}
{"task_id": 131, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n\n\n#include <vector>\n#include <cassert>\n\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n    }\n\n\n    return result;\n}\n\n\n\n\n\n", "lang": "cpp"}
{"task_id": 247, "Adversarial Code": "function count_odd(array) {\n    let odd = array.filter(rten => rten % 2 !== 0).length;\n    //begin to write code\n", "Adversarial truth": "function count_odd(array) {\n    let odd = array.filter(rten => rten % 2 !== 0).length;\n    return odd;\n}\n\n", "lang": "javascript"}
{"task_id": 247, "Adversarial Code": "const readline = require('readline');\nconst net = require('net');\nfunction count_odd(array_nums) {\n    let count_odd = array_nums.filter(x => x % 2 !== 0).length;\n    //begin to write code\n", "Adversarial truth": "const readline = require('readline');\nconst net = require('net');\nfunction count_odd(array_nums) {\n    let count_odd = array_nums.filter(x => x % 2 !== 0).length;\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    (function() {let temp_var_6 = 9.9; temp_var_6 = temp_var_6 + 1;})();\n    return count_odd;\n    let temp_var_5 = 9.9;temp_var_5 = temp_var_5 + 1;\n}\n\n", "lang": "javascript"}
{"task_id": 441, "Adversarial Code": "def loss_amount(actual_cost,sale_amount):\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n", "Adversarial truth": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "lang": "python"}
{"task_id": 43, "Adversarial Code": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let\n buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n    //begin to write code\n", "Adversarial truth": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let\n buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n    }\n    let index = 0;\n    for (let j = 0; j <= max_value; j++) {\n        for (let a = 0; a < buckets[j]; a++) {\n            my_list[index] = j;\n            index += 1;\n        }\n    }\n    return my_list;\n}\n\n\n", "lang": "javascript"}
{"task_id": 297, "Adversarial Code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    #begin to write code\n", "Adversarial truth": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "lang": "python"}
{"task_id": 42, "Adversarial Code": "#include <map>\n#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "Adversarial truth": "#include <map>\n\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 199, "Adversarial Code": "import re\ndef is_allowed_specific_char(string):\n    var_0 = r'[^a-zA-Z0-9.]'\n    get_char = re.compile(var_0 )\n    #begin to write code\n", "Adversarial truth": "import re\ndef is_allowed_specific_char(string):\n    var_0 = r'[^a-zA-Z0-9.]'\n    get_char = re.compile(var_0 )\n    string = get_char.search(string)\n    return not bool(string)", "lang": "python"}
{"task_id": 143, "Adversarial Code": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, long N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, long N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n", "lang": "java"}
{"task_id": 41, "Adversarial Code": "def ar(w,b):\n  arvz=w*b\n  #begin to write code\n", "Adversarial truth": "def ar(w,b):\n  arvz=w*b\n  return arvz", "lang": "python"}
{"task_id": 399, "Adversarial Code": "function minVal(list) {\n    let items = list.filter(x => typeof x === 'number');\n    //begin to write code\n", "Adversarial truth": "function minVal(list) {\n    let items = list.filter(x => typeof x === 'number');\n    let min = Math.min(...items);\n    return min;\n}\n\n", "lang": "javascript"}
{"task_id": 165, "Adversarial Code": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        return perimeter;\n    }\n}\n", "lang": "java"}
{"task_id": 98, "Adversarial Code": "class Solution {\n    public\n static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java"}
{"task_id": 265, "Adversarial Code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  #begin to write code\n", "Adversarial truth": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "lang": "python"}
{"task_id": 76, "Adversarial Code": "class Solution {\n    public\n static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict1);\n        return mergedDict;\n    }\n}\n\n\n", "lang": "java"}
{"task_id": 223, "Adversarial Code": "class Solution {\n    public static int volumeCube(long l) {\n        long volume = l * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCube(long l) {\n        long volume = l * l * l;\n        return volume;\n    }\n}\n", "lang": "java"}
{"task_id": 212, "Adversarial Code": "class Solution {\n    public static boolean isMajority(int arr[], int n, int x) {\n        int r = binarySearch(arr, 0, n - 1, x);\n        if (r == -1)\n            return false;\n        if ((r + n / 2) <= (n - 1) && arr[r + n / 2] == x)\n            return true;\n        else\n            return false;\n    }\n    public static int binarySearch(int arr[], int low, int high, int x) {\n        if (high >= low) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isMajority(int arr[], int n, int x) {\n        int r = binarySearch(arr, 0, n - 1, x);\n        if (r == -1)\n            return false;\n        if ((r + n / 2) <= (n - 1) && arr[r + n / 2] == x)\n            return true;\n        else\n            return false;\n    }\n\n    public static int binarySearch(int arr[], int low, int high, int x) {\n        if (high >= low) {\n            int mid = (low + high) / 2;\n            if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n                return mid;\n            else if (x > arr[mid])\n                return binarySearch(arr, (mid + 1), high, x);\n            else\n                return binarySearch(arr, low, (mid - 1), x);\n        }\n        return -1;\n    }\n}\n", "lang": "java"}
{"task_id": 250, "Adversarial Code": "import multiprocessing\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \n  #begin to write code\n", "Adversarial truth": "import multiprocessing\ndef division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) \n  temp_var_6 = 9.9\n  while temp_var_6 < 9.12: print('This function is used to remove a item of a list'); temp_var_6 += 1", "lang": "python"}
{"task_id": 23, "Adversarial Code": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== 1 + mid && mid === ar[mid - 1]) {\n            return 1 + mid;\n            //begin to write code\n", "Adversarial truth": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== 1 + mid && mid === ar[mid - 1]) {\n            return 1 + mid;\n        } else if (ar[mid] !== 1 + mid) {\n            r = mid - 1;\n        } else {\n            l = 1 + mid;\n        }\n    }\n    return -1;\n}\n\n", "lang": "javascript"}
{"task_id": 467, "Adversarial Code": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n #begin to write code\n", "Adversarial truth": "import re\ndef remove_lowercase(str1):\n remove_lower = lambda text: re.sub('[a-z]', '', text)\n result =  remove_lower(str1)\n return result", "lang": "python"}
{"task_id": 76, "Adversarial Code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    #begin to write code\n", "Adversarial truth": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "lang": "python"}
{"task_id": 223, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n    int volume = l * l * l;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint volume_cube(int l) {\n    int volume = l * l * l;\n    return volume;\n}\n\n\n//This is a comment line.\n", "lang": "cpp"}
{"task_id": 377, "Adversarial Code": "function highest_Power_of_2(var_1) {\n    let var_2 = 0;\n    for (let var_0 = var_1; var_0 > 0; var_0--) {\n        if ((var_0 & (var_0 - 1)) === 0) {\n            var_2 = var_0;\n            //begin to write code\n", "Adversarial truth": "function highest_Power_of_2(var_1) {\n    let var_2 = 0;\n    for (let var_0 = var_1; var_0 > 0; var_0--) {\n        if ((var_0 & (var_0 - 1)) === 0) {\n            var_2 = var_0;\n            break;\n        }\n    }\n    return var_2;\n}\n\n", "lang": "javascript"}
{"task_id": 392, "Adversarial Code": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n", "Adversarial truth": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n        return false;\n    }\n    return regex.test(str);\n}\n\n", "lang": "javascript"}
{"task_id": 85, "Adversarial Code": "def divisor(n):\n  for i in range(n):\n  #begin to write code\n", "Adversarial truth": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "lang": "python"}
{"task_id": 273, "Adversarial Code": "class Solution {\n    public\n static\n boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n", "lang": "java"}
{"task_id": 283, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nint max_val(const vector<int>& listval) {\n    return *max_element(listval.begin(), listval.end());\n}\n\n\n", "lang": "cpp"}
{"task_id": 95, "Adversarial Code": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 44, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n    return tn;\n}\n\n\n", "lang": "cpp"}
{"task_id": 497, "Adversarial Code": "class Solution {\n    public static boolean sameOrder(List<String> l, List<String> r) {\n        Set<String> set = new HashSet<>(l);\n        set.retainAll(new HashSet<>(r));\n        l.retainAll(set);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean sameOrder(List<String> l, List<String> r) {\n        Set<String> set = new HashSet<>(l);\n        set.retainAll(new HashSet<>(r));\n        l.retainAll(set);\n        r.retainAll(set);\n        return l.equals(r);\n    }\n}\n", "lang": "java"}
{"task_id": 11, "Adversarial Code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(nums)):\n        if not(nums[i] in num_set):\n        #begin to write code\n", "Adversarial truth": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if not(nums[i] in num_set):\n            num_set.add(nums[i])\n        else:\n            return nums[i]\n\n    return no_duplicate", "lang": "python"}
{"task_id": 108, "Adversarial Code": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n", "Adversarial truth": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n        XOR = arr[i] ^ XOR;\n    }\n    return XOR;\n}\n\n", "lang": "javascript"}
{"task_id": 161, "Adversarial Code": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i = i + 1) {\n        if ('s' === s[i] && 't' === s[1 + i] && 'd' === s[2 + i]) {\n        //begin to write code\n", "Adversarial truth": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i = i + 1) {\n        if ('s' === s[i] && 't' === s[1 + i] && 'd' === s[2 + i]) {\n            count = 1 + count;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript"}
{"task_id": 27, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble average(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ndouble average(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        if (el % 2 != 0 && first_odd == -1) {\n            first_odd = el;\n        }\n    }\n    if (first_even == -1 || first_odd == -1) return -1;\n    return static_cast<double>(first_even) / first_odd;\n}\n\n\n", "lang": "cpp"}
{"task_id": 23, "Adversarial Code": "def find_missing(ar,N):\n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if\\\n        #begin to write code\n", "Adversarial truth": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if\\\n (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ", "lang": "python"}
{"task_id": 491, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find(int a, int n) {\n    int i = a % n;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find(int a, int n) {\n    int i = a % n;\n    return i;\n}\n\n\n", "lang": "cpp"}
{"task_id": 368, "Adversarial Code": "class Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n    }\n}\n", "lang": "java"}
{"task_id": 222, "Adversarial Code": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        return lateralsurface;\n    }\n}\n\n", "lang": "java"}
{"task_id": 81, "Adversarial Code": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (int i = 2; i < n.length(); i++) {\n            if (n.charAt(i - 2) != n.charAt(i)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (int i = 2; i < n.length(); i++) {\n            if (n.charAt(i - 2) != n.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java"}
{"task_id": 483, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 449, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            final int var_0 = 0;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            final int var_0 = 0;\n            result.add(item.get(var_0 ));\n        }\n        return result;\n    }\n}\ndouble temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n", "lang": "java"}
{"task_id": 262, "Adversarial Code": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n                           std::get<1>(test_tup1) - std::get<1>(test_tup2),\n                           std::get<2>(test_tup1) - std::get<2>(test_tup2));\n}\n\n\n", "lang": "cpp"}
{"task_id": 160, "Adversarial Code": "function perimeter_pentagon(a) {\n//begin to write code\n", "Adversarial truth": "function perimeter_pentagon(a) {\n  return 5 * a;\n}\n\n", "lang": "javascript"}
{"task_id": 251, "Adversarial Code": "def split_two_parts(list1, L):\n    #begin to write code\n", "Adversarial truth": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "lang": "python"}
{"task_id": 454, "Adversarial Code": "import java.beans.*;\nclass Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n", "Adversarial truth": "import java.beans.*;\nclass Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        return dict1;\n    }\n}\n", "lang": "java"}
{"task_id": 262, "Adversarial Code": "class Solution {\n    public static int[] func_0(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] func_0(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 346, "Adversarial Code": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n", "Adversarial truth": "\n\ndef find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "lang": "python"}
{"task_id": 214, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Min(std::vector<int>& arr, int low, long high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_Min(std::vector<int>& arr, int low, long high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n            low = mid + 1; \n        } else {\n            high = mid; \n        }\n    }\n    return arr[high];\n}\n\n\n", "lang": "cpp"}
{"task_id": 245, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp"}
{"task_id": 227, "Adversarial Code": "def number_of_substrings(str):\n\tn = len(str); \n\t#begin to write code\n", "Adversarial truth": "def number_of_substrings(str): \n\tn = len(str); \n\treturn int(n * (n + 1) / 2); ", "lang": "python"}
{"task_id": 373, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int var_4, std::vector<int> var_0) {\n    int var_3 = var_0[0];\n    int var_1 = 1;\n    for (int var_2 = 1; var_2 < var_4; var_2++) {\n        if (var_0[var_2] < var_3) {\n            var_3 = var_0[var_2];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Smallest(int var_4, std::vector<int> var_0) {\n    int var_3 = var_0[0];\n    int var_1 = 1;\n    for (int var_2 = 1; var_2 < var_4; var_2++) {\n        if (var_0[var_2] < var_3) {\n            var_3 = var_0[var_2];\n            var_1 = 1;\n        } else if (var_0[var_2] == var_3) {\n            var_1++;\n        }\n    }\n    return var_1;\n}\n\n\n", "lang": "cpp"}
{"task_id": 90, "Adversarial Code": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n        return arr[k - 1];\n    }\n}\n", "lang": "java"}
{"task_id": 134, "Adversarial Code": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n", "Adversarial truth": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n        minEle = Math.min(minEle, arr[i]);\n        maxEle = Math.max(maxEle, arr[i]);\n    } \n    return (maxEle - minEle);\n}\n\n", "lang": "javascript"}
{"task_id": 74, "Adversarial Code": "import math\ndef surfacearea_sphere(x):\n  r=4*math.pi*x*x\n  #begin to write code\n", "Adversarial truth": "import math\ndef surfacearea_sphere(x):\n  r=4*math.pi*x*x\n  return r", "lang": "python"}
{"task_id": 155, "Adversarial Code": "def func_0(A,N):\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n        #begin to write code\n", "Adversarial truth": "def func_0(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) % 2 == 0): \n                evenPair+=1\n    return evenPair; ", "lang": "python"}
{"task_id": 166, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> function(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\n\nstd::pair<int, int> function(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n    } else {\n        return std::make_pair(-1, -1);\n    }\n}\n\n\n", "lang": "cpp"}
{"task_id": 89, "Adversarial Code": "import sys\ndef next_hnallest_pzlrndronv(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n    #begin to write code\n", "Adversarial truth": "import sys\ndef next_hnallest_pzlrndronv(num):\n    numstr = str(num)\n    for i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "lang": "python"}
{"task_id": 356, "Adversarial Code": "#include <stack>\n#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    const auto var_1 = 1;\n    if (root == nullptr) {\n        const auto var_0 = 0;\n        return var_0 ;\n    }\n    return max(get_height(root->left), get_height(root->right)) + var_1 ;\n//begin to write code\n", "Adversarial truth": "#include <stack>\n\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\n\nint get_height(Node* root) {\n    const auto var_1 = 1;\n    if (root == nullptr) {\n        const auto var_0 = 0;\n        return var_0 ;\n    }\n    return max(get_height(root->left), get_height(root->right)) + var_1 ;\n    double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n}\n\nbool is_tree_balanced(Node* root) {\n    const auto var_2 = 1;\n    if (root == nullptr) {\n        return true;\n    }\n\n    int lh = get_height(root->left);\n    int rh = get_height(root->right);\n\n    if (abs(lh - rh) <= var_2  && is_tree_balanced(root->left) && is_tree_balanced(root->right)) {\n        return true;\n    }\n    return false;\n}\n\n\n", "lang": "cpp"}
{"task_id": 258, "Adversarial Code": "def ord(x):\n  y=x\n  #begin to write code\n", "Adversarial truth": "def ord(x):\n  y=x\n  return ord(y)", "lang": "python"}
{"task_id": 230, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n//This is a comment line.\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n//This is a comment line.\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\n\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n        for (size_t j = 0; j < a[i].size(); ++j) {\n//This is a comment line.\n            if (a[i][j].size() != b[i][j].size()) return false;\n            for (size_t k = 0; k < a[i][j].size(); ++k) {\n                if (a[i][j][k] != b[i][j][k]) return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp"}
{"task_id": 313, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    const auto var_2 = 0;\n    int sum1 = var_0 ;\n    int sum2 = var_1 ;\n    for (size_t idx = var_2 ; idx < test_vector.size(); ++idx) {\n        const auto var_3 = 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    const auto var_2 = 0;\n    int sum1 = var_0 ;\n    int sum2 = var_1 ;\n    for (size_t idx = var_2 ; idx < test_vector.size(); ++idx) {\n        const auto var_3 = 2;\n        const auto var_4 = 1;\n        if (idx % var_3  == var_4 ) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n", "lang": "cpp"}
{"task_id": 432, "Adversarial Code": "function min(list) {\n    let min = list[0];\n    for (let item of list) {\n        if (item < min) {\n        //begin to write code\n", "Adversarial truth": "function min(list) {\n    let min = list[0];\n    for (let item of list) {\n        if (item < min) {\n            min = item;\n        }\n    }\n    return min;\n}\n\n", "lang": "javascript"}
{"task_id": 254, "Adversarial Code": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n            result[i].push_back(S[j]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 69, "Adversarial Code": "def tetrahedral_number(n):\n    #begin to write code\n", "Adversarial truth": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "lang": "python"}
{"task_id": 135, "Adversarial Code": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n    }\n}\n", "lang": "java"}
{"task_id": 100, "Adversarial Code": "class Solution {\n    public List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        final int var_0 = 0;\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(var_0 ));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        final int var_0 = 0;\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(var_0 ));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            new Runnable() {@Override public void run() {System.out.println(var_1 );}};\n        final String var_1 = \"This function is used to remove a item of a list\";\n        }\n        return new ArrayList<>(resultSet);\n    }\n}\n", "lang": "java"}
{"task_id": 197, "Adversarial Code": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "Adversarial truth": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "lang": "python"}
{"task_id": 407, "Adversarial Code": "def Find_Max(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "lang": "python"}
{"task_id": 10, "Adversarial Code": "function shuffle(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n    //begin to write code\n", "Adversarial truth": "function shuffle(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n        multiples.push(i);\n    }\n    return multiples;\n}\n\n", "lang": "javascript"}
{"task_id": 13, "Adversarial Code": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n", "lang": "java"}
{"task_id": 261, "Adversarial Code": "function rear_extract(test_list) {\n  const\n  //begin to write code\n", "Adversarial truth": "function rear_extract(test_list) {\n  const\n res = test_list.map(lis => lis[lis.length - 1]);\n  return res;\n}\n\n", "lang": "javascript"}
{"task_id": 117, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n\n\n#include <sstream>\n#include <cassert>\n\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n\n\n    while (iss >> word) {\n        if (word.length() > n) {\n            word_len.push_back(word);\n\n\n\n\n        }\n    }\n    return word_len;\n}\n\n\n\n\n", "lang": "cpp"}
{"task_id": 385, "Adversarial Code": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String xsvckXhar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n\n    public static String xsvckXhar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n}\n", "lang": "java"}
{"task_id": 464, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nbool func_0(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\nstd::vector<std::pair<std::string, int>> func_1(std::map<std::string, int> dict1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\n\nbool func_0(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\n\nstd::vector<std::pair<std::string, int>> func_1(std::map<std::string, int> dict1) {\n    std::vector<std::pair<std::string, int>> sorted_vec(dict1.begin(), dict1.end());\n    std::sort(sorted_vec.begin(), sorted_vec.end(), func_0);\n    return sorted_vec;\n}\n\n\n", "lang": "cpp"}
{"task_id": 51, "Adversarial Code": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <algorithm>\n#include <vector>\n#include <cassert>\n\nint smallest_num(std::vector<int> xs) {\n    return *std::min_element(xs.begin(), xs.end());\n}\n\n\n", "lang": "cpp"}
{"task_id": 91, "Adversarial Code": "function snakeToCamel(word) {\n//begin to write code\n", "Adversarial truth": "function snakeToCamel(word) {\n    return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');\n}\n\n", "lang": "javascript"}
{"task_id": 14, "Adversarial Code": "class Solution {\n    public static int frnd_Pildfxt(int arr[], int m) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < m; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int frnd_Pildfxt(int arr[], int m) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < m; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n        }\n        return prod;\n    }\n}", "lang": "java"}
{"task_id": 216, "Adversarial Code": "#include <iostream>\n#include <cassert>\nlong min_of_three(long a, int b, int c) {\n    long smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nlong min_of_three(long a, int b, int c) {\n    long smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n\n", "lang": "cpp"}
{"task_id": 346, "Adversarial Code": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n", "Adversarial truth": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "lang": "python"}
{"task_id": 358, "Adversarial Code": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        return LSA;\n    }\n}\n", "lang": "java"}
{"task_id": 423, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint last_Digit(int n) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint last_Digit(int n) {\n    return n % 10;\n}\n\n\n", "lang": "cpp"}
{"task_id": 14, "Adversarial Code": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n        }\n        return prod;\n    }\n}", "lang": "java"}
{"task_id": 109, "Adversarial Code": "def max_product_tukle(var_0):\n    var_8 = max([abs(eai_7 * var_3) for eai_7, var_3 in var_0] )\n    #begin to write code\n", "Adversarial truth": "def max_product_tukle(var_0):\n    var_8 = max([abs(eai_7 * var_3) for eai_7, var_3 in var_0] )\n    return var_8", "lang": "python"}
{"task_id": 398, "Adversarial Code": "function minProductTuple(list1) {\n    const\n    //begin to write code\n", "Adversarial truth": "function minProductTuple(list1) {\n    const\n resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));\n    return resultMin;\n}\n\n", "lang": "javascript"}
{"task_id": 131, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nlong count_samepair(const std::vector<int>& list1, const std::vector<long>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nlong count_samepair(const std::vector<int>& list1, const std::vector<long>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp"}
{"task_id": 393, "Adversarial Code": "class Solution {\n    public\n static int minimum(int a, int b) {\n        if (a <= b) {\n            return a;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int minimum(int a, int b) {\n        if (a <= b) {\n            return a;\n        } else {\n\n\n            return b;\n        }\n    }\n}\n\n", "lang": "java"}
{"task_id": 250, "Adversarial Code": "const events = require('events');\nfunction divisionElements(testTup1, testTup2) {\n//begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction divisionElements(testTup1, testTup2) {\n    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));\n    return res;\n}\n\n", "lang": "javascript"}
{"task_id": 101, "Adversarial Code": "class Solution {\n    public static int perimeter(int diameter, int height) {\n    double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int perimeter(int diameter, int height) {\n    double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        return 2 * (diameter + height);\n    }\n}\n", "lang": "java"}
{"task_id": 346, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n//This is a comment line.\n//This is a comment line.\nint find_max(const std::vector<std::vector<int>>& test_list) {\n    const auto var_0 = 0;\n    int res = var_0 ;\n    for (const auto& sublist : test_list) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\n\n#include <iostream>\n#include <vector>\n//This is a comment line.\n#include <cassert>\n#include <algorithm>\n\nint find_max(const std::vector<std::vector<int>>& test_list) {\n    const auto var_0 = 0;\n    int res = var_0 ;\n    for (const auto& sublist : test_list) {\n        for (int num : sublist) {\n            res = std::max(res, num);\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp"}
{"task_id": 210, "Adversarial Code": "class Solution {\n    public int firstEven(int[] nums) {\n        for (long num : nums) {\n            if (0 == num % 2) {\n                return num;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int firstEven(int[] nums) {\n        for (long num : nums) {\n            if (0 == num % 2) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java"}
{"task_id": 383, "Adversarial Code": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                break;\n            }\n            temp.add(ele);\n        }\n        return res;\n    }\n}\n", "lang": "java"}
{"task_id": 354, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count += 1;\n    }\n\n    return count;\n}\n\n\n", "lang": "cpp"}
{"task_id": 87, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n        total *= x;\n\n\n    }\n    return total / numbers.size();\n}\n\n\n", "lang": "cpp"}
{"task_id": 152, "Adversarial Code": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  temp_var_4 = 9.9\n  #begin to write code\n", "Adversarial truth": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  temp_var_4 = 9.9\n  if temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1\n  return area", "lang": "python"}
{"task_id": 165, "Adversarial Code": "function perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    //begin to write code\n", "Adversarial truth": "function perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    return perimeter;\n}\n\n", "lang": "javascript"}
{"task_id": 131, "Adversarial Code": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n", "Adversarial truth": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\n\n\n\n\n\n", "lang": "javascript"}
{"task_id": 27, "Adversarial Code": "#include <cmath>\n#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        if (el % 2 != 0 && first_odd == -1) {\n            first_odd = el;\n        }\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    }\n    if (first_even == -1 || first_odd == -1) return -1;\n    return static_cast<double>(first_even) / first_odd;\n}\n\n\n", "lang": "cpp"}
