{"task_id": 330, "Adversarial Code": "def set_to_tuple(s):\n  t\\\n  #begin to write code\n", "Adversarial truth": "def set_to_tuple(s):\n  t\\\n = tuple(sorted(s))\n  return (t)\n", "lang": "python", "code_str_generate": "def set_to_tuple(s):\n\n  '''\n  progame language:python\n  description:Write a function to convert the given set into ordered tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  t\\\n  #begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 94, "Adversarial Code": "def xlumt(lst):\n    #begin to write code\n", "Adversarial truth": "def xlumt(lst):   \n    return sum(lst) ", "lang": "python", "code_str_generate": "def xlumt(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to count true booleans in the given list."}
{"task_id": 399, "Adversarial Code": "const dgram = require('dgram');\nfunction minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "Adversarial truth": "const dgram = require('dgram');\nfunction minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    let minVal = Math.min(...filtered);\n    return minVal;\n}\n\n", "lang": "javascript", "code_str_generate": "const dgram = require('dgram');\nfunction minVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 40, "Adversarial Code": "function check_equilateral(x, y, z) {\n    if (y === x && z === y) {\n        return 1;\n        //begin to write code\n", "Adversarial truth": "function check_equilateral(x, y, z) {\n    if (y === x && z === y) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_equilateral(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y === x && z === y) {\n        return 1;\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 401, "Adversarial Code": "function remove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n", "Adversarial truth": "function remove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n        }\n    }\n    return l;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_odd(l) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n", "prompt": "Write a javascript function to remove odd numbers from a given list."}
{"task_id": 77, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] indexes) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int index : indexes) {\n            result.put(index, result.getOrDefault(index, 0) + 1);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] indexes) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int index : indexes) {\n            result.put(index, result.getOrDefault(index, 0) + 1);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] indexes) {\n\n        /*\n        progame language:java\n        description:Write a function to get the frequency of the elements in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int index : indexes) {\n            result.put(index, result.getOrDefault(index, 0) + 1);\n            //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 391, "Adversarial Code": "function ncr_modp(self, p, n) {\n    let tmp = Array(p + 1).fill(0);\n    tmp[0] = 1;\n    for (let b = 1; b <= self; b++) {\n        for (let c = Math.min(b, p); c > 0; c--) {\n        //begin to write code\n", "Adversarial truth": "function ncr_modp(self, p, n) {\n    let tmp = Array(p + 1).fill(0);\n    tmp[0] = 1;\n    for (let b = 1; b <= self; b++) {\n        for (let c = Math.min(b, p); c > 0; c--) {\n            tmp[c] = (tmp[c] + tmp[c - 1]) % n;\n        }\n    }\n    return tmp[p];\n}\n\n", "lang": "javascript", "code_str_generate": "function ncr_modp(self, p, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let tmp = Array(p + 1).fill(0);\n    tmp[0] = 1;\n    for (let b = 1; b <= self; b++) {\n        for (let c = Math.min(b, p); c > 0; c--) {\n        //begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 468, "Adversarial Code": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n    for (char c : str1) {\n        if (max < ctr[c]) {\n            max = ctr[c];\n            ch = c;\n        }\n    }\n    return ch;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n//begin to write code\n", "prompt": "Write a cpp function to find the first digit of a given number."}
{"task_id": 465, "Adversarial Code": "class Solution {\n    public int bigSum(int[] nums) {\n        final int var_4 = 0;\n        final int var_5 = 0;\n        final double var_6 = 9.9;\n        final double var_7 = 9.12;\n        final int var_2 = var_4 ;\n        final int var_3 = var_5 ;\n        final int var_0 = var_2 ;\n        final int var_1 = var_3 ;\n        int max = nums[var_0 ];\n        int min = nums[var_1 ];\n        double temp_var_9 = var_6 ;while (temp_var_9 < var_7 ) {System.out.println(var_8 );temp_var_9 = temp_var_9 + var_9 ;}\n        final String var_8 = \"This function is used to remove a item of a list\";\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int bigSum(int[] nums) {\n        final int var_4 = 0;\n        final int var_5 = 0;\n        final double var_6 = 9.9;\n        final double var_7 = 9.12;\n        final int var_2 = var_4 ;\n        final int var_3 = var_5 ;\n        final int var_0 = var_2 ;\n        final int var_1 = var_3 ;\n        int max = nums[var_0 ];\n        int min = nums[var_1 ];\n        double temp_var_9 = var_6 ;while (temp_var_9 < var_7 ) {System.out.println(var_8 );temp_var_9 = temp_var_9 + var_9 ;}\n        final String var_8 = \"This function is used to remove a item of a list\";\n        final int var_9 = 1;\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            if(num < min) {\n                min = num;\n            }\n        }\n        return max + min;\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int bigSum(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the largest and smallest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_4 = 0;\n        final int var_5 = 0;\n        final double var_6 = 9.9;\n        final double var_7 = 9.12;\n        final int var_2 = var_4 ;\n        final int var_3 = var_5 ;\n        final int var_0 = var_2 ;\n        final int var_1 = var_3 ;\n        int max = nums[var_0 ];\n        int min = nums[var_1 ];\n        double temp_var_9 = var_6 ;while (temp_var_9 < var_7 ) {System.out.println(var_8 );temp_var_9 = temp_var_9 + var_9 ;}\n        final String var_8 = \"This function is used to remove a item of a list\";\n        //begin to write code\n", "prompt": "Write a java function to find the sum of the largest and smallest value in a given array."}
{"task_id": 316, "Adversarial Code": "//function definition\nfunction check_isosceles(x, y, z) {\n    if\n (x === y || y === z || z === x) {\n //begin to write code\n", "Adversarial truth": "//function definition\nfunction check_isosceles(x, y, z) {\n    if\n (x === y || y === z || z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction check_isosceles(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is isosceles or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if\n (x === y || y === z || z === x) {\n //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 383, "Adversarial Code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "Adversarial truth": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "lang": "python", "code_str_generate": "def check_distinct(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 159, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n//This is a comment line.\n        for (int i = m; i <= n; i++) {\n        //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n//This is a comment line.\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n        }\n        return sumRange;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumRange = 0;\n//This is a comment line.\n        for (int i = m; i <= n; i++) {\n        //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 71, "Adversarial Code": "import math\ndef volume_sphere(r):\n  volume=(4/3) * math.pi*r*r*r\n  #begin to write code\n", "Adversarial truth": "import math\ndef volume_sphere(r):\n  volume=(4/3) * math.pi*r*r*r\n  return volume", "lang": "python", "code_str_generate": "import math\ndef volume_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=(4/3) * math.pi*r*r*r\n  #begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 348, "Adversarial Code": "def Check_Solution(a,b,c):\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n", "Adversarial truth": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); \n\n", "lang": "python", "code_str_generate": "def Check_Solution(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 242, "Adversarial Code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n    #begin to write code\n", "Adversarial truth": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "lang": "python", "code_str_generate": "def count_integer(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for i in list1:\n    #begin to write code\n", "prompt": "Write a python function to count integers from a given list."}
{"task_id": 415, "Adversarial Code": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n", "Adversarial truth": "def filter_oddnumbers(nums):\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n return odd_nums", "lang": "python", "code_str_generate": "def filter_oddnumbers(nums):\n\n '''\n progame language:python\n description:Write a function to filter odd numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 41, "Adversarial Code": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        return area;\n\n\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to caluclate area of a parallelogram.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = b * h;\n        //begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 369, "Adversarial Code": "class Solution {\n    public static long[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n            }\n        }\n        return multiList;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long[][] multiList(int rownum, int colnum) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a two-dimensional array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 115, "Adversarial Code": "def sum(a,b):\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n", "Adversarial truth": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (0 == a % i and 0 == b % i): \n            sum = sum + (i) \n    return sum", "lang": "python", "code_str_generate": "def sum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of common divisors of two given numbers."}
{"task_id": 194, "Adversarial Code": "class Solution {\n    public static int[] inversion_elements(int[] gest_arr) {\n        return Arrays.stream(gest_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] inversion_elements(int[] gest_arr) {\n        return Arrays.stream(gest_arr).map(x -> ~x).toArray();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] inversion_elements(int[] gest_arr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the inversions of tuple elements in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.stream(gest_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"task_id": 270, "Adversarial Code": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n", "Adversarial truth": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n        return false;\n    }\n    return true;\n}\n\n", "lang": "javascript", "code_str_generate": "function all_unique(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n", "prompt": "Write a javascript function to check if the elements of a given list are unique or not."}
{"task_id": 284, "Adversarial Code": "function sum_div(number) {\n    const var_0 = 1;\n    const var_1 = 2;\n    const var_3 = 0;\n    let divisors = [var_0 ];\n    for (let i = var_1 ; i < number; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_div(number) {\n    const var_0 = 1;\n    const var_1 = 2;\n    const var_3 = 0;\n    let divisors = [var_0 ];\n    for (let i = var_1 ; i < number; i++) {\n        const var_2 = 0;\n        if (number % i === var_2 ) {\n            divisors.push(i);\n        }\n    }\n    return divisors.reduce((a, b) => a + b, var_3 );\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_div(number) {\n\n    /*\n    progame language:javascript\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 1;\n    const var_1 = 2;\n    const var_3 = 0;\n    let divisors = [var_0 ];\n    for (let i = var_1 ; i < number; i++) {\n    //begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 201, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n        std::get<1>(test_tup1) + std::get<1>(test_tup2),\n        std::get<2>(test_tup1) + std::get<2>(test_tup2)\n    );\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of fourth power of n natural numbers."}
{"task_id": 440, "Adversarial Code": "function remove_whitespaces(text1) {\n//begin to write code\n", "Adversarial truth": "function remove_whitespaces(text1) {\n  return text1.replace(/\\s+/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_whitespaces(text1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 83, "Adversarial Code": "from operator import itemgetter \ndef index_minimum(test_list):\n  var_0 = 1\n  var_1 = 0\n  #begin to write code\n", "Adversarial truth": "from operator import itemgetter \ndef index_minimum(test_list):\n  var_0 = 1\n  var_1 = 0\n  res = min(test_list, key = itemgetter(var_0 ))[var_1 ]\n  return (res) ", "lang": "python", "code_str_generate": "from operator import itemgetter \ndef index_minimum(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 1\n  var_1 = 0\n  #begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 3, "Adversarial Code": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n        final int var_0 = 2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n        final int var_0 = 2;\n        return ((l * b * h) / var_0 );\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the volume of a triangular prism.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 2;\n        //begin to write code\n", "prompt": "Write a java function to find the volume of a triangular prism."}
{"task_id": 359, "Adversarial Code": "import javax.swing.*;\nimport java.net.*;\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "Adversarial truth": "import javax.swing.*;\nimport java.net.*;\n\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n            }\n        });\n        return price;\n    }\n}", "lang": "java", "code_str_generate": "import javax.swing.*;\nimport java.net.*;\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a tuple by its float element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "prompt": "Write a function to sort a tuple by its float element."}
{"task_id": 113, "Adversarial Code": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double angleComplex(double a, double b) {\n\n        /*\n        progame language:java\n        description:Write a function to get the angle of a complex number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Math.atan2(b, a);\n        //begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 444, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(long monthnum2) {\n    if (1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2) {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_monthnumb_number(long monthnum2) {\n    if (1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(long monthnum2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month number contains 31 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2) {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 319, "Adversarial Code": "import re\ndef find_char(text):\n    #begin to write code\n", "Adversarial truth": "import re\ndef find_char(text):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "lang": "python", "code_str_generate": "import re\ndef find_char(text):\n\n    '''\n    progame language:python\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 345, "Adversarial Code": "def find_angle(a,b):\n c = 180 - (a + b)\n #begin to write code\n", "Adversarial truth": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n", "lang": "python", "code_str_generate": "def find_angle(a,b):\n\n '''\n progame language:python\n description:Write a function to find the third angle of a triangle using two angles.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n c = 180 - (a + b)\n #begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 445, "Adversarial Code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n", "Adversarial truth": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "lang": "python", "code_str_generate": "def reverse_string_list(stringlist):\n\n    '''\n    progame language:python\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 195, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> comcatenate_elements(const std::vector<std::string>& elements) {\n    std::vector<std::string> result;\n    for (size_t i = 0; i < elements.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nstd::vector<std::string> comcatenate_elements(const std::vector<std::string>& elements) {\n    std::vector<std::string> result;\n    for (size_t i = 0; i < elements.size() - 1; ++i) {\n        result.push_back(elements[i] + elements[i + 1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> comcatenate_elements(const std::vector<std::string>& elements) {\n    std::vector<std::string> result;\n    for (size_t i = 0; i < elements.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 93, "Adversarial Code": "const events = require('events');\nfunction sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    return result;\n//This is a comment line.\n}\n\n\n", "lang": "javascript", "code_str_generate": "const events = require('events');\nfunction sortSublists(inputList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 12, "Adversarial Code": "function maximum_Sum(list1) {\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n        //begin to write code\n", "Adversarial truth": "function maximum_Sum(list1) {\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n            sum += y;\n        }\n        maxi = Math.max(sum, maxi);\n    }\n    return maxi;\n}\n\n", "lang": "javascript", "code_str_generate": "function maximum_Sum(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 239, "Adversarial Code": "class Solution {\n    public\n static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int count_X(int[] arr, int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occcurences of an element in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n            //begin to write code\n", "prompt": "Write a java function to count the occcurences of an element in a tuple."}
{"task_id": 86, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> merge(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> merge(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n                dicData.put(num, dicData.get(num) + 1);\n            } else {\n                dicData.put(num, 1);\n            }\n        }\n        return dicData;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> merge(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 394, "Adversarial Code": "def check_tuplex(tuplex,tuple1):\n  if tuple1 in tuplex:\n    var_6 = True\n    var_0 = var_6 \n    return var_0 \n  else:\n  var_7 = 9.9\n  var_1 = var_7 \n  temp_var_3 = var_1 \n  var_8 = 9.12\n  #begin to write code\n", "Adversarial truth": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    var_6 = True\n    var_0 = var_6 \n    return var_0 \n  else:\n  var_7 = 9.9\n  var_1 = var_7 \n  temp_var_3 = var_1 \n  var_8 = 9.12\n  var_2 = var_8 \n  var_9 = 'This function is used to remove a item of a list'\n  var_3 = var_9 \n  var_10 = 1\n  var_4 = var_10 \n  while temp_var_3 < var_2 : print(var_3 ); temp_var_3 += var_4 \n     var_11 = False\n     var_5 = var_11 \n     return var_5 ", "lang": "python", "code_str_generate": "def check_tuplex(tuplex,tuple1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether an element exists within a tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if tuple1 in tuplex:\n    var_6 = True\n    var_0 = var_6 \n    return var_0 \n  else:\n  var_7 = 9.9\n  var_1 = var_7 \n  temp_var_3 = var_1 \n  var_8 = 9.12\n  #begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 244, "Adversarial Code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    #begin to write code\n", "Adversarial truth": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "lang": "python", "code_str_generate": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 342, "Adversarial Code": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, long n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, long n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n        }\n        return list1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, long n) {\n\n        /*\n        progame language:java\n        description:Write a function to remove a specified column from a given nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n", "prompt": "Write a function to remove a specified column from a given nested list."}
{"task_id": 201, "Adversarial Code": "class Solution {\n    public static int func_0(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fourth power of n natural numbers."}
{"task_id": 251, "Adversarial Code": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n//This is a comment line.\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n//This is a comment line.\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        return Arrays.asList(firstPart, secondPart);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n\n    /*\n    progame language:java\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        //begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 131, "Adversarial Code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "Adversarial truth": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "lang": "python", "code_str_generate": "def count_samepair(list1,list2,list3):\n\n    '''\n    progame language:python\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 435, "Adversarial Code": "class Solution {\n    public\n static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n            }\n\n\n        }\n        return count;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int countOccurrence(List<Object> tup, List<Object> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurence of all elements of list in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n            //begin to write code\n", "prompt": "Write a java function to count the occurence of all elements of list in a tuple."}
{"task_id": 350, "Adversarial Code": "def remove_empty(list1):\n  remove_empty\\\n  #begin to write code\n", "Adversarial truth": "def remove_empty(list1):\n  remove_empty\\\n = [x for x in list1 if x]\n  return remove_empty\n", "lang": "python", "code_str_generate": "def remove_empty(list1):\n\n  '''\n  progame language:python\n  description:Write a function to remove empty lists from a given list of lists.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  remove_empty\\\n  #begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 428, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n    int x;\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    ss >> x;\n    return x;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a list of multiple integers into a single integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n//begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 268, "Adversarial Code": "class Solution {\n    public static int ihMumWvxatlmao(int n) {\n        return 4 * n * n - 3 * n;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int ihMumWvxatlmao(int n) {\n        return 4 * n * n - 3 * n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int ihMumWvxatlmao(int n) {\n        return 4 * n * n - 3 * n;\n        //begin to write code\n", "prompt": "Write a function to find the nth decagonal number."}
{"task_id": 131, "Adversarial Code": "function count_samepair(list1, list2, list3) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let result = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n    //begin to write code\n", "Adversarial truth": "function count_samepair(list1, list2, list3) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let result = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_samepair(list1, list2, list3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let result = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n    //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 359, "Adversarial Code": "class Solution {\n    public static List<String[]> func_0(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "Adversarial truth": "\nclass Solution {\n    public static List<String[]> func_0(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n            }\n        });\n        return price;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String[]> func_0(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "prompt": "Write a function to sort a tuple by its float element."}
{"task_id": 301, "Adversarial Code": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = h * (1.0/3) * Math.PI * r * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = h * (1.0/3) * Math.PI * r * r;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeCone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = h * (1.0/3) * Math.PI * r * r;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cone."}
{"task_id": 49, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        for (int j = 0; j < i; j = j + 1) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\n\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        for (int j = 0; j < i; j = j + 1) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; i = i + 1) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        for (int j = 0; j < i; j = j + 1) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array."}
{"task_id": 318, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n\n    vector<string> matches;\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        matches.push_back((*i).str());\n    }\n    return matches;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n", "prompt": "Write a cpp function to count negative numbers in a list."}
{"task_id": 201, "Adversarial Code": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    {\n        let i = 1;\n        while(i <= n){ \n        //begin to write code\n", "Adversarial truth": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    {\n        let i = 1;\n        while(i <= n){ \n        sum += Math.pow(i, 4);\n            i++;\n        }\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function fourth_Power_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    {\n        let i = 1;\n        while(i <= n){ \n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of fourth power of n natural numbers."}
{"task_id": 35, "Adversarial Code": "import java.io.*;\nclass Solution {\n    public static boolean testDistinct(int[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n", "Adversarial truth": "import java.io.*;\nclass Solution {\n    public static boolean testDistinct(int[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n        }\n        return data.length == distinctData.size();\n    }\n}\n", "lang": "java", "code_str_generate": "import java.io.*;\nclass Solution {\n    public static boolean testDistinct(int[] data) {\n\n        /*\n        progame language:java\n        description:Write a java function to determine whether all the numbers are different from each other are not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n", "prompt": "Write a java function to determine whether all the numbers are different from each other are not."}
{"task_id": 447, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nlong rectangle_area(long l, long b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nlong rectangle_area(long l, long b) {\n    long area = l * b;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nlong rectangle_area(long l, long b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 53, "Adversarial Code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "Adversarial truth": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "lang": "python", "code_str_generate": "def subject_marks(subjectmarks):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 481, "Adversarial Code": "def yinzib_svarch(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n", "Adversarial truth": "def yinzib_svarch(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "lang": "python", "code_str_generate": "def yinzib_svarch(item_list,item):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to search an element in the given array by using binary search.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 283, "Adversarial Code": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n//This is a comment line.\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n//This is a comment line.\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n            }\n        }\n        return maxVal;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n\n    /*\n    progame language:java\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n            //begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 238, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n                 [&array_nums1](int num) { return array_nums1.end() != std::find(array_nums1.begin(), array_nums1.end(), num); });\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n//begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 255, "Adversarial Code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  #begin to write code\n", "Adversarial truth": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n\n\n\n\n  return LSA", "lang": "python", "code_str_generate": "def lateralsurface_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 4 * (l * l)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 176, "Adversarial Code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "Adversarial truth": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "lang": "python", "code_str_generate": "def longest_common_subsequence(X, Y, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 351, "Adversarial Code": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let\n occu = nums.filter(x => x === i).length;\n //begin to write code\n", "Adversarial truth": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let\n occu = nums.filter(x => x === i).length;\n        if (occu > max_val) {\n            max_val = occu;\n\n\n            result = i;\n        }\n    }\n\n    return result;\n}\n", "lang": "javascript", "code_str_generate": "function max_occurrences(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let\n occu = nums.filter(x => x === i).length;\n //begin to write code\n", "prompt": "Write a javascript function to find the item with maximum occurrences in a given list."}
{"task_id": 348, "Adversarial Code": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n            return (\"No\");\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether one root of the quadratic equation is twice of the other or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 287, "Adversarial Code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n", "Adversarial truth": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "lang": "python", "code_str_generate": "def intersection_nested_lists(l1, l2):\n\n    '''\n    progame language:python\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n", "prompt": "Write a function to find the nested list elements which are present in another list."}
{"task_id": 43, "Adversarial Code": "def counting_sort(var_5):\n    var_4 = 0\n    for var_2 in range(len(var_5)):\n        if var_5[var_2] > var_4:\n            var_4 = var_5[var_2]\n    var_1 = [0] * (var_4 + 1)\n    for var_2 in var_5:\n    #begin to write code\n", "Adversarial truth": "def counting_sort(var_5):\n    var_4 = 0\n    for var_2 in range(len(var_5)):\n        if var_5[var_2] > var_4:\n            var_4 = var_5[var_2]\n    var_1 = [0] * (var_4 + 1)\n    for var_2 in var_5:\n        var_1[var_2] += 1\n    var_2 = 0\n    for var_3 in range(var_4 + 1):\n         for var_0 in range(var_1[var_3]):\n             var_5[var_2] = var_3\n             var_2 += 1\n    return var_5", "lang": "python", "code_str_generate": "def counting_sort(var_5):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_4 = 0\n    for var_2 in range(len(var_5)):\n        if var_5[var_2] > var_4:\n            var_4 = var_5[var_2]\n    var_1 = [0] * (var_4 + 1)\n    for var_2 in var_5:\n    #begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 351, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> var_2) {\n    int var_1 = 0;\n    int var_4 = var_2[0];\n    for (int var_0 : var_2) {\n        int var_3 = count(var_2.begin(), var_2.end(), var_0);\n        if (var_3 > var_1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_occurrences(vector<int> var_2) {\n    int var_1 = 0;\n    int var_4 = var_2[0];\n    for (int var_0 : var_2) {\n        int var_3 = count(var_2.begin(), var_2.end(), var_0);\n        if (var_3 > var_1) {\n            var_1 = var_3;\n            var_4 = var_0;\n        }\n    }\n    return var_4;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int var_1 = 0;\n    int var_4 = var_2[0];\n    for (int var_0 : var_2) {\n        int var_3 = count(var_2.begin(), var_2.end(), var_0);\n        if (var_3 > var_1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the item with maximum occurrences in a given list."}
{"task_id": 468, "Adversarial Code": "import datetime\ndef first_Digit(n) :\n    var_0 = 10\n    while n >= var_0 :  \n    #begin to write code\n", "Adversarial truth": "import datetime\ndef first_Digit(n) :  \n    var_0 = 10\n    while n >= var_0 :  \n        var_1 = 10\n        n = n / var_1 ; \n    return int(n) ", "lang": "python", "code_str_generate": "import datetime\ndef first_Digit(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 10\n    while n >= var_0 :  \n    #begin to write code\n", "prompt": "Write a python function to find the first digit of a given number."}
{"task_id": 467, "Adversarial Code": "//function definition\nfunction definition(str1) {\n  const fn = text => text.replace(/[a-z]/g, '');\n  //begin to write code\n", "Adversarial truth": "//function definition\nfunction definition(str1) {\n  const fn = text => text.replace(/[a-z]/g, '');\n  const result = fn(str1);\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction definition(str1) {\n  const fn = text => text.replace(/[a-z]/g, '');\n  //begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 420, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list, const std::vector<T>& list2) {\n    for (const auto& xx : list) {\n        for (const auto& z : list2) {\n            if (xx == z) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ntemplate <typename T>\nbool common_element(const std::vector<T>& list, const std::vector<T>& list2) {\n    for (const auto& xx : list) {\n        for (const auto& z : list2) {\n            if (xx == z) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list, const std::vector<T>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function that takes two lists and returns true if they have at least one common element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& xx : list) {\n        for (const auto& z : list2) {\n            if (xx == z) {\n//begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 468, "Adversarial Code": "function first_Digit(digit) {\n    while (digit >= 10) {\n        digit = digit / 10;\n        //begin to write code\n", "Adversarial truth": "function first_Digit(digit) {\n    while (digit >= 10) {\n        digit = digit / 10;\n    }\n    return Math.floor(digit);\n}\n\n", "lang": "javascript", "code_str_generate": "function first_Digit(digit) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (digit >= 10) {\n        digit = digit / 10;\n        //begin to write code\n", "prompt": "Write a javascript function to find the first digit of a given number."}
{"task_id": 49, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint ls(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\n\nint ls(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint ls(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array."}
{"task_id": 42, "Adversarial Code": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n", "Adversarial truth": "def check_Equality(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "lang": "python", "code_str_generate": "def check_Equality(str):\n\n  '''\n  progame language:python\n  description:Write a python function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 466, "Adversarial Code": "def is_lower(string):\n    #begin to write code\n", "Adversarial truth": "def is_lower(string):\n  return (string.lower())", "lang": "python", "code_str_generate": "def is_lower(string):\n\n    '''\n    progame language:python\n    description:Write a python function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to convert the given string to lower case."}
{"task_id": 205, "Adversarial Code": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = 1;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = 0;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = 1;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = 0;\n            }\n        }\n        return exist;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a nested list is a subset of another nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean exist = 1;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = 0;\n                //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 341, "Adversarial Code": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (long i = 0; i < str.length(); i = i + 1) {\n            for (int j = i + 1; j < str.length(); j = j + 1) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return 0;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (long i = 0; i < str.length(); i = i + 1) {\n            for (int j = i + 1; j < str.length(); j = j + 1) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return 0;\n                }\n            }\n        }\n        return 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether all the characters in a given string are unique.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (long i = 0; i < str.length(); i = i + 1) {\n            for (int j = i + 1; j < str.length(); j = j + 1) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return 0;\n                    //begin to write code\n", "prompt": "Write a java function to check whether all the characters in a given string are unique."}
{"task_id": 189, "Adversarial Code": "def position_max(list1):\n    max_val = max(list1)\n    #begin to write code\n", "Adversarial truth": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "lang": "python", "code_str_generate": "def position_max(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = max(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 493, "Adversarial Code": "function sum_Of_Series(n) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let sum = var_0 ;\n    //begin to write code\n", "Adversarial truth": "function sum_Of_Series(n) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let sum = var_0 ;\n    for (let i = var_1 ; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_Of_Series(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 1;\n    let sum = var_0 ;\n    //begin to write code\n", "prompt": "Write a javascript function to find the cube sum of first n natural numbers."}
{"task_id": 263, "Adversarial Code": "import math  \ndef\\\n even_binomial_Coeff_Sum( n): \n #begin to write code\n", "Adversarial truth": "import math  \ndef\\\n even_binomial_Coeff_Sum( n): \n    return (1 << (n - 1)) ", "lang": "python", "code_str_generate": "import math  \ndef\\\n\n '''\n progame language:python\n description:Write a python function to find sum of even index binomial coefficients.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n even_binomial_Coeff_Sum( n): \n #begin to write code\n", "prompt": "Write a python function to find sum of even index binomial coefficients."}
{"task_id": 476, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n    }\n    return tup;\n    double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 297, "Adversarial Code": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n            }\n        }\n\n\n        Collections.sort(result, Collections.reverseOrder());\n        return result.subList(0, N);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to find the specified number of largest products from two given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 86, "Adversarial Code": "#include <iostream>\n#include <atomic>\n#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <atomic>\n#include<iostream>\n    \n\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n    for (auto& num : flat_list) {\n        if (dic_data.find(num) != dic_data.end()) {\n            dic_data[num]++;\n        } else {\n            dic_data[num] = 1;\n        }\n    }\n    return dic_data;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <atomic>\n#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 96, "Adversarial Code": "class Solution {\n    public static int solve(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                        count += 1;\n                    }\n                    k = k / 16;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int solve(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "prompt": "Write a java function to count hexadecimal numbers for a given range."}
{"task_id": 433, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<long> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<long> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n            tmp.push_back(ele[i]);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to trim each tuple by k in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<long> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "prompt": "Write a function to trim each tuple by k in the given tuple list."}
{"task_id": 498, "Adversarial Code": "def average_Odd(n) :\n    var_0 = 2\n    var_1 = 0\n    if (n%var_0 ==var_1 ) : \n        var_2 = \"Invalid Input\"\n        return (var_2 ) \n        var_3 = 1\n        return -var_3  \n    var_4 = 0\n    sm =var_4 \n    #begin to write code\n", "Adversarial truth": "def average_Odd(n) : \n    var_0 = 2\n    var_1 = 0\n    if (n%var_0 ==var_1 ) : \n        var_2 = \"Invalid Input\"\n        return (var_2 ) \n        var_3 = 1\n        return -var_3  \n    var_4 = 0\n    sm =var_4 \n    var_5 = 0\n    count =var_5 \n    var_6 = 1\n    while (n>=var_6 ) : \n        var_7 = 1\n        count=count+var_7 \n        sm = sm + n \n        var_8 = 2\n        n = n-var_8 \n    return sm//count ", "lang": "python", "code_str_generate": "def average_Odd(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 2\n    var_1 = 0\n    if (n%var_0 ==var_1 ) : \n        var_2 = \"Invalid Input\"\n        return (var_2 ) \n        var_3 = 1\n        return -var_3  \n    var_4 = 0\n    sm =var_4 \n    #begin to write code\n", "prompt": "Write a python function to find the average of odd numbers till a given odd number."}
{"task_id": 89, "Adversarial Code": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\n\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n            return i;\n        }\n    }\n    return -1; // Should never reach here for realistic input ranges\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n//begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 433, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n            tmp.push_back(ele[i]);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to trim each tuple by k in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "prompt": "Write a function to trim each tuple by k in the given tuple list."}
{"task_id": 282, "Adversarial Code": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the third side of a right angled triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n        //begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 284, "Adversarial Code": "class Solution {\n    public static int divide(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int divide(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        int sum = 0;\n        for (int i : divisors) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int divide(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 321, "Adversarial Code": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n            //begin to write code\n", "Adversarial truth": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n\n\n    return dict;\n\n\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function char_frequency(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n            //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 115, "Adversarial Code": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of common divisors of two given numbers."}
{"task_id": 477, "Adversarial Code": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n", "Adversarial truth": "import math\ndef area_pentagon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "lang": "python", "code_str_generate": "import math\ndef area_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 165, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (!(2 * L <= R)) {\n        return std::make_pair(-1, -1);\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\n\nstd::pair<int, int> answer(int L, int R) {\n    if (!(2 * L <= R)) {\n        return std::make_pair(-1, -1);\n    }\n    else {\n        return std::make_pair(L, 2 * L);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (!(2 * L <= R)) {\n        return std::make_pair(-1, -1);\n    }\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 122, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& values) {\n    int result = 0;\n    for (auto n : values) {\n        if (n < 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& values) {\n    int result = 0;\n    for (auto n : values) {\n        if (n < 0) {\n            result += n;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& values) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    for (auto n : values) {\n        if (n < 0) {\n//begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 108, "Adversarial Code": "function search(arr, n) {\n    let XOR = 0;\n    for\n (let i = 0; i < n; i++) {\n //begin to write code\n", "Adversarial truth": "function search(arr, n) {\n    let XOR = 0;\n    for\n (let i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return XOR;\n\n\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function search(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let XOR = 0;\n    for\n (let i = 0; i < n; i++) {\n //begin to write code\n", "prompt": "Write a javascript function to find the element that appears only once in a sorted array."}
{"task_id": 226, "Adversarial Code": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            res.put(sortedEle, res.getOrDefault(sortedEle, 0) + 1);\n        }\n        return res;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n\n        /*\n        progame language:java\n        description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"task_id": 438, "Adversarial Code": "#include<cassert>\n#include <iostream>\nusing namespace std;\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\nusing namespace std;\n\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n    } else {\n    double temp_var_8 = 9.9;if (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n        return \"Yes\";\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\nusing namespace std;\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the triangle is valid or not if 3 points are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n//begin to write code\n", "prompt": "Write a cpp function to check whether the triangle is valid or not if 3 points are given."}
{"task_id": 498, "Adversarial Code": "function average_Odd(n) {\n    const var_0 = 2;\n    const var_1 = 0;\n    const var_3 = 0;\n    const var_4 = 0;\n    const var_5 = 1;\n    if (n % var_0  === var_1 ) {\n        const var_2 = \"Invalid Input\";\n        return var_2 ;\n    }\n    //begin to write code\n", "Adversarial truth": "function average_Odd(n) {\n    const var_0 = 2;\n    const var_1 = 0;\n    const var_3 = 0;\n    const var_4 = 0;\n    const var_5 = 1;\n    if (n % var_0  === var_1 ) {\n        const var_2 = \"Invalid Input\";\n        return var_2 ;\n    }\n    let sm = var_3 ;\n    let count = var_4 ;\n    while (n >= var_5 ) {\n        const var_6 = 1;\n        const var_7 = 2;\n        count += var_6 ;\n        sm += n;\n        n -= var_7 ;\n    }\n    return Math.floor(sm / count);\n}\n\n", "lang": "javascript", "code_str_generate": "function average_Odd(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 2;\n    const var_1 = 0;\n    const var_3 = 0;\n    const var_4 = 0;\n    const var_5 = 1;\n    if (n % var_0  === var_1 ) {\n        const var_2 = \"Invalid Input\";\n        return var_2 ;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find the average of odd numbers till a given odd number."}
{"task_id": 262, "Adversarial Code": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n                           std::get<1>(test_tup1) - std::get<1>(test_tup2),\n                           std::get<2>(test_tup1) - std::get<2>(test_tup2));\n}\n//This is a comment line.\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 222, "Adversarial Code": "function lateralsuface_cylinder(r, h) {\n    let\n    //begin to write code\n", "Adversarial truth": "function lateralsuface_cylinder(r, h) {\n    let\n lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}\n\n", "lang": "javascript", "code_str_generate": "function lateralsuface_cylinder(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 271, "Adversarial Code": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to substaract two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n            //begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 362, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n    return l * w * h;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 76, "Adversarial Code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    #begin to write code\n", "Adversarial truth": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n\n", "lang": "python", "code_str_generate": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n    '''\n    progame language:python\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    #begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 42, "Adversarial Code": "function check_Equality(str) {\n  if (str[str.length - 1] === str[0]) {\n    return \"Equal\";\n    //begin to write code\n", "Adversarial truth": "function check_Equality(str) {\n  if (str[str.length - 1] === str[0]) {\n    return \"Equal\";\n  } else {\n    return \"Not Equal\";\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Equality(str) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (str[str.length - 1] === str[0]) {\n    return \"Equal\";\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 191, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nclass Solution {\n    public static String removeEven(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove even characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "prompt": "Write a function to remove even characters in a string."}
{"task_id": 493, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (long i = 1; i <= n; i = i + 1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (long i = 1; i <= n; i = i + 1) {\n        sum = sum + (i * i * i);\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (long i = 1; i <= n; i = i + 1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the cube sum of first n natural numbers."}
{"task_id": 13, "Adversarial Code": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            long dec = binary % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            long dec = binary % 10;\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int binaryToDecimal(int binary) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given binary number to its decimal equivalent.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            long dec = binary % 10;\n            //begin to write code\n", "prompt": "Write a function to convert the given binary number to its decimal equivalent."}
{"task_id": 316, "Adversarial Code": "import java.security.*;\nclass Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "import java.security.*;\nclass Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "import java.security.*;\nclass Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is isosceles or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 45, "Adversarial Code": "def rev(num):\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (10 * rev_num + num % 10) \n        #begin to write code\n", "Adversarial truth": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (10 * rev_num + num % 10) \n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (1 + n == 2 * rev(n))  ", "lang": "python", "code_str_generate": "def rev(num):\n\n    '''\n    progame language:python\n    description:Write a python function to check if a given number is one less than twice its reverse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (10 * rev_num + num % 10) \n        #begin to write code\n", "prompt": "Write a python function to check if a given number is one less than twice its reverse."}
{"task_id": 383, "Adversarial Code": "function checkDistinct(testArr) {\n  let res = 1;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = 0;\n      //begin to write code\n", "Adversarial truth": "function checkDistinct(testArr) {\n  let res = 1;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = 0;\n      break;\n    }\n    temp.add(ele);\n  }\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function checkDistinct(testArr) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let res = 1;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = 0;\n      //begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 30, "Adversarial Code": "function filter_evennumbers(nums) {\n//begin to write code\n", "Adversarial truth": "function filter_evennumbers(nums) {\n    return nums.filter(x => x % 2 === 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function filter_evennumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 425, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        const auto var_0 = 0;\n        if (num < var_0 ) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        const auto var_0 = 0;\n        if (num < var_0 ) {\n            negatives.push_back(num);\n        }\n    }\n    return negatives;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to print negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> negatives;\n    for (int num : list1) {\n        const auto var_0 = 0;\n        if (num < var_0 ) {\n//begin to write code\n", "prompt": "Write a cpp function to print negative numbers in a list."}
{"task_id": 231, "Adversarial Code": "def count_charac(str1):\n total = 0\n for i in str1:\n #begin to write code\n", "Adversarial truth": "def count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "lang": "python", "code_str_generate": "def count_charac(str1):\n\n '''\n progame language:python\n description:Write a function to count total characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n total = 0\n for i in str1:\n #begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 79, "Adversarial Code": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n    #begin to write code\n", "Adversarial truth": "def len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    return max\n\n", "lang": "python", "code_str_generate": "def len_log(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max=len(list1[0])\n    for i in list1:\n    #begin to write code\n", "prompt": "Write a python function to find the length of the longest word."}
{"task_id": 352, "Adversarial Code": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  #begin to write code\n", "Adversarial truth": "def add_K_element(test_list, K):\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  return (res) ", "lang": "python", "code_str_generate": "def add_K_element(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to add the k elements to each element in the tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [tuple(j + K for j in sub ) for sub in test_list]\n  #begin to write code\n", "prompt": "Write a function to add the k elements to each element in the tuple."}
{"task_id": 133, "Adversarial Code": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "Adversarial truth": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_Pairs(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 311, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int\\\n min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int\\\n min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            min_result.push_back(i);\n        }\n    }\n    return min_result;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int\\\n min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 182, "Adversarial Code": "import itertools\ndef remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  #begin to write code\n", "Adversarial truth": "import itertools\ndef remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ", "lang": "python", "code_str_generate": "import itertools\ndef remove_tuple(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove the duplicates from the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(set(test_tup))\n  #begin to write code\n", "prompt": "Write a function to remove the duplicates from the given tuple."}
{"task_id": 233, "Adversarial Code": "class Solution {\n    public static int nextPerfectSquare(int var_0) {\n        int var_1 = (int) Math.floor(Math.sqrt(var_0)) + 1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int nextPerfectSquare(int var_0) {\n        int var_1 = (int) Math.floor(Math.sqrt(var_0)) + 1;\n        return var_1 * var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int nextPerfectSquare(int var_0) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the next perfect square greater than a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int var_1 = (int) Math.floor(Math.sqrt(var_0)) + 1;\n        //begin to write code\n", "prompt": "Write a java function to find the next perfect square greater than a given number."}
{"task_id": 447, "Adversarial Code": "class Solution {\n    public\n static\n int rectangleArea(int l, int b) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n int rectangleArea(int l, int b) {\n        int area = l * b;\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static\n int rectangleArea(int l, int b) {\n\n /*\n progame language:java\n description:Write a function to find the area of a rectangle.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 439, "Adversarial Code": "function extractString(str, l) {\n    const\n    //begin to write code\n", "Adversarial truth": "function extractString(str, l) {\n    const\n result = str.filter(e => e.length === l);\n\n\n    return result;\n}\n\n\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function extractString(str, l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 84, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    {\n        int i = 1;\n        while(i <= n){\n        if (n % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint divisor(int n) {\n    int x = 0;\n    {\n        int i = 1;\n        while(i <= n){\n        if (n % i == 0) {\n            x++;\n        }\n            ++i;\n        }\n    }\n    return x;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    {\n        int i = 1;\n        while(i <= n){\n        if (n % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum length of sublist."}
{"task_id": 480, "Adversarial Code": "const child_process = require('child_process');\nfunction sum_gp(a, n, r) {\n//begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nfunction sum_gp(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\nfunction sum_gp(a, n, r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of geometric progression series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 408, "Adversarial Code": "//function definition\nfunction func_0(list1) {\n    const length = list1.length;\n    //begin to write code\n", "Adversarial truth": "//function definition\nfunction func_0(list1) {\n    const length = list1.length;\n    const roundedSum = list1.map(Math.round).reduce((a, b) => a + b, 0) * length;\n    return roundedSum;\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction func_0(list1) {\n    const length = list1.length;\n    //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 345, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n    int c = 180 - (a + b);\n    return c;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 298, "Adversarial Code": "function maximum(a, b) {\n    if (a >= b) {\n    let temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    //begin to write code\n", "Adversarial truth": "function maximum(a, b) {\n    if (a >= b) {\n    let temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n        return a;\n    } else {\n        return b;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function maximum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a >= b) {\n    let temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum of two numbers."}
{"task_id": 393, "Adversarial Code": "function dist(x, d) {\n    if (x <= d) {\n        return x;\n        //begin to write code\n", "Adversarial truth": "function dist(x, d) {\n    if (x <= d) {\n        return x;\n    } else {\n        return d;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function dist(x, d) {\n    if (x <= d) {\n        return x;\n        //begin to write code\n", "prompt": "Write a javascript function to find the minimum of two numbers."}
{"task_id": 414, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n                ctr++;\n                break;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 166, "Adversarial Code": "def answer(L,R):\n    if (2 * L <= R): \n        return (L ,2*L)\n        #begin to write code\n", "Adversarial truth": "def answer(L,R): \n    if (2 * L <= R): \n        return (L ,2*L)\n    else: \n        return (-1) ", "lang": "python", "code_str_generate": "def answer(L,R):\n\n    '''\n    progame language:python\n    description:Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2 * L <= R): \n        return (L ,2*L)\n        #begin to write code\n", "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range."}
{"task_id": 231, "Adversarial Code": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (long i = 0; i < str1.length(); i++) {\n            total = 1 + total;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (long i = 0; i < str1.length(); i++) {\n            total = 1 + total;\n        }\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countCharac(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to count total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 0;\n        for (long i = 0; i < str1.length(); i++) {\n            total = 1 + total;\n            //begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 492, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<long> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<long> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<long> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 23, "Adversarial Code": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return (-1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findMissing(int ar[], int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the missing number in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n", "prompt": "Write a java function to find the missing number in a sorted array."}
{"task_id": 287, "Adversarial Code": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n", "Adversarial truth": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function intersectionNestedLists(l1, l2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n", "prompt": "Write a function to find the nested list elements which are present in another list."}
{"task_id": 61, "Adversarial Code": "function test(n) {\n    if (n % 4 !== 2) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function test(n) {\n    if (n % 4 !== 2) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function test(n) {\n    if (n % 4 !== 2) {\n        return true;\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 159, "Adversarial Code": "class Solution {\n    public static int hunIamtvLrht(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hunIamtvLrht(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n        }\n        return sumRange;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int hunIamtvLrht(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n            //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 218, "Adversarial Code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      temp_var_6 = 9.9\n      #begin to write code\n", "Adversarial truth": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      temp_var_6 = 9.9\n      print('This function is used to remove a item of a list')\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "lang": "python", "code_str_generate": "def re_arrange_array(arr, n):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      temp_var_6 = 9.9\n      #begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 60, "Adversarial Code": "const cluster = require('cluster');\nfunction combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        //begin to write code\n", "Adversarial truth": "const cluster = require('cluster');\nfunction combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n            if (nums[i] > nums[i + gaps]) {\n                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n", "lang": "javascript", "code_str_generate": "const cluster = require('cluster');\nfunction combSort(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 258, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint func_0(char k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint func_0(char k) {\n  return int(k);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint func_0(char k) {\n//begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 459, "Adversarial Code": "def add_pairwise(test_tup):\n  var_0 = 1\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[var_0 :]))\n  #begin to write code\n", "Adversarial truth": "def add_pairwise(test_tup):\n  var_0 = 1\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[var_0 :]))\n#This is a comment line.\n#This is a comment line.\n  return (res) ", "lang": "python", "code_str_generate": "def add_pairwise(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the pairwise addition of the elements of the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 1\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[var_0 :]))\n  #begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 251, "Adversarial Code": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List\n<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        return Arrays.asList(firstPart, secondPart);\n    }\n}\n\n\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n\n        /*\n        progame language:java\n        description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List\n        //begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 200, "Adversarial Code": "class Solution {\n    public static int count_Num(int num) {\n        if (num == 1) {\n            return 1;\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Num(int num) {\n        if (num == 1) {\n            return 1;\n        }\n        int result = (int) Math.pow(2, num - 2);\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Num(int num) {\n\n        /*\n        progame language:java\n        description:Write a java function to count numbers whose oth and nth bits are set.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (num == 1) {\n            return 1;\n        }\n        //begin to write code\n", "prompt": "Write a java function to count numbers whose oth and nth bits are set."}
{"task_id": 117, "Adversarial Code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "Adversarial truth": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "lang": "python", "code_str_generate": "def long_words(n, str):\n\n    '''\n    progame language:python\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 417, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    int gap = my_list.size() / var_0 ;\n    while (gap > var_1 ) {\n        const auto var_2 = 2;\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nvoid shell_sort(std::vector<int>& my_list) {\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    int gap = my_list.size() / var_0 ;\n    while (gap > var_1 ) {\n        const auto var_2 = 2;\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n            my_list[j] = current_item;\n        }\n        gap /= var_2 ;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    int gap = my_list.size() / var_0 ;\n    while (gap > var_1 ) {\n        const auto var_2 = 2;\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n//begin to write code\n", "prompt": "Write a function to sort the given array by using shell sort."}
{"task_id": 87, "Adversarial Code": "def func_0(n):\n    result = 1\n    for i in n:\n    #begin to write code\n", "Adversarial truth": "def func_0(n):  \n    result = 1\n    for i in n:\n        result *= i  \n    return result/len(n) ", "lang": "python", "code_str_generate": "def func_0(n):\n\n    '''\n    progame language:python\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = 1\n    for i in n:\n    #begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 181, "Adversarial Code": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "Adversarial truth": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_String(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "prompt": "Write a javascript function to check whether a string has atleast one letter and one number."}
{"task_id": 116, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint add(int var_0, int var_1) {\n    if (var_1 < 0) {\n        return -add(var_0, -var_1);\n    } else if (var_1 == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint add(int var_0, int var_1) {\n    if (var_1 < 0) {\n        return -add(var_0, -var_1);\n    } else if (var_1 == 0) {\n        return 0;\n    } else if (var_1 == 1) {\n        return var_0;\n    } else {\n        return var_0 + add(var_0, var_1 - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint add(int var_0, int var_1) {\n    if (var_1 < 0) {\n        return -add(var_0, -var_1);\n    } else if (var_1 == 0) {\n        return 0;\n//begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in cpp."}
{"task_id": 3, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find_Volume(int l, int b, int h) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find_Volume(int l, int b, int h) {\n    return ((l * b * h) / 2);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find_Volume(int l, int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the volume of a triangular prism.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the volume of a triangular prism."}
{"task_id": 270, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_uniquv(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool all_uniquv(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n        return false;\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_uniquv(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n//begin to write code\n", "prompt": "Write a cpp function to check if the elements of a given list are unique or not."}
{"task_id": 438, "Adversarial Code": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n        //begin to write code\n", "Adversarial truth": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n    } else {\n        return 'Yes';\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the triangle is valid or not if 3 points are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the triangle is valid or not if 3 points are given."}
{"task_id": 454, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> function(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<std::string, std::string> function(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n            filtered[element.first] = element.second;\n        }\n    }\n    return filtered;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> function(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 283, "Adversarial Code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "Adversarial truth": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "lang": "python", "code_str_generate": "def max_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 273, "Adversarial Code": "class Solution {\n    public static boolean checkElement(Object[] var_2, Object var_2) {\n        for (Object var_2 : var_2) {\n            if (!var_2.equals(var_2)) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkElement(Object[] var_2, Object var_2) {\n        for (Object var_2 : var_2) {\n            if (!var_2.equals(var_2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkElement(Object[] var_2, Object var_2) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether all items of a list are equal to a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object var_2 : var_2) {\n            if (!var_2.equals(var_2)) {\n                return false;\n                //begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 321, "Adversarial Code": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            const var_0 = 1;\n            dict[n] += var_0 ;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            const var_0 = 1;\n            dict[n] += var_0 ;\n        } else {\n            const var_1 = 1;\n            dict[n] = var_1 ;\n        }\n    }\n//This is a comment line.\n    return dict;\n}\n//This is a comment line.\n\n", "lang": "javascript", "code_str_generate": "function char_frequency(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            const var_0 = 1;\n            dict[n] += var_0 ;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 490, "Adversarial Code": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public\n static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n\n    public\n static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        int result = 0;\n        int z = (int) Math.sqrt(n);\n        for (int i = 1; i <= z; i++) {\n            if (n % i == 0) {\n                result += 2;\n                if (i == n / i) {\n                    result -= 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public\n static int num_comm_div(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find common divisor between two numbers in a given pair.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = ngcd(x, y);\n        //begin to write code\n", "prompt": "Write a java function to find common divisor between two numbers in a given pair."}
{"task_id": 390, "Adversarial Code": "class Solution {\n    public static int[][] func_0(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] func_0(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] func_0(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples."}
{"task_id": 105, "Adversarial Code": "def tuple_to_int(nums):\n    result = long(''.join(map(str,nums)))\n    #begin to write code\n", "Adversarial truth": "def tuple_to_int(nums):\n    result = long(''.join(map(str,nums)))\n    return result", "lang": "python", "code_str_generate": "def tuple_to_int(nums):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = long(''.join(map(str,nums)))\n    #begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 188, "Adversarial Code": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find highest power of 2 less than or equal to given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "prompt": "Write a java function to find highest power of 2 less than or equal to given number."}
{"task_id": 370, "Adversarial Code": "from operator import itemgetter\ndef hort(var, ezl):\n    sort = sorted(var, key=itemgetter(ezl))\n    #begin to write code\n", "Adversarial truth": "from operator import itemgetter\ndef hort(var, ezl):\n    sort = sorted(var, key=itemgetter(ezl))\n    return sort", "lang": "python", "code_str_generate": "from operator import itemgetter\ndef hort(var, ezl):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sort = sorted(var, key=itemgetter(ezl))\n    #begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 445, "Adversarial Code": "#include <sstream>\n#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        const auto var_0 = 9.9;\n        const std::string var_1 = \"This function is used to remove a item of a list\";\n//begin to write code\n", "Adversarial truth": "#include <sstream>\n#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        const auto var_0 = 9.9;\n        const std::string var_1 = \"This function is used to remove a item of a list\";\n        reverse(s.begin(), s.end());\n        double temp_var_3 = var_0 ;std::cout << var_1  << std::endl;\n    }\n    return stringlist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <sstream>\n#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (string& s : stringlist) {\n        const auto var_0 = 9.9;\n        const std::string var_1 = \"This function is used to remove a item of a list\";\n//begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 467, "Adversarial Code": "//function definition\nfunction remove_lowercase(str1) {\n  const\n  //begin to write code\n", "Adversarial truth": "//function definition\nfunction remove_lowercase(str1) {\n  const\n remove_lower = text => text.replace(/[a-z]/g, '');\n  const result = remove_lower(str1);\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction remove_lowercase(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove lowercase substrings from a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const\n  //begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 138, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if\\\n ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n\n\n            if\\\n ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n\n\n        result = max(result, dp[i]);\n    }\n    return result;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if\\\n ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 218, "Adversarial Code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "Adversarial truth": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = 1 + j\n  return arr", "lang": "python", "code_str_generate": "def re_arrange_array(arr, n):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 23, "Adversarial Code": "def find_missing(ar,N):\n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n        #begin to write code\n", "Adversarial truth": "def find_missing(ar,N): \n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n            return (mid + 1)  \n        elif (ar[mid] != mid + 1): \n            r = mid - 1 \n        else: \n            l = mid + 1\n    return (-1) ", "lang": "python", "code_str_generate": "def find_missing(ar,N):\n\n    '''\n    progame language:python\n    description:Write a python function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l = 0\n    r = N - 1\n    while (l <= r):  \n        mid = (l + r) / 2\n        mid= int (mid) \n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \n        #begin to write code\n", "prompt": "Write a python function to find the missing number in a sorted array."}
{"task_id": 324, "Adversarial Code": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        final double var_0 = 2.0;\n        final int var_1 = 1;\n        final double var_2 = 2.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        final double var_0 = 2.0;\n        final int var_1 = 1;\n        final double var_2 = 2.0;\n        double total = (n * (var_0  * a + (n - var_1 ) * d)) / var_2 ;\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double apSum(int a, int n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of arithmetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final double var_0 = 2.0;\n        final int var_1 = 1;\n        final double var_2 = 2.0;\n        //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 252, "Adversarial Code": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d, HashMap<String, Integer> other) {\n        HashMap<String, Integer> result = (HashMap<String, Integer>) d.clone();\n        result.putAll(other);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d, HashMap<String, Integer> other) {\n        HashMap<String, Integer> result = (HashMap<String, Integer>) d.clone();\n        result.putAll(other);\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d, HashMap<String, Integer> other) {\n\n        /*\n        progame language:java\n        description:Write a function to merge two dictionaries.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<String, Integer> result = (HashMap<String, Integer>) d.clone();\n        result.putAll(other);\n        //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 440, "Adversarial Code": "function func_0(text8) {\n//begin to write code\n", "Adversarial truth": "function func_0(text8) {\n  return text8.replace(/\\s+/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(text8) {\n//begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 362, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int o, int w, int h) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int o, int w, int h) {\n    return o * w * h;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int o, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 82, "Adversarial Code": "function mod(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n        //begin to write code\n", "Adversarial truth": "function mod(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n        return a;\n    } else {\n        return a * mod(a, b - 1);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function mod(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 325, "Adversarial Code": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 28 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 171, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\n\nusing namespace std;\n\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n            lowercase_characters.push_back(c);\n        } else if (isdigit(c)) {\n            numerical_characters.push_back(c);\n        } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n            special_characters.push_back(c);\n        }\n    }\n\n    return make_tuple(uppercase_characters, lowercase_characters, numerical_characters, special_characters);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 308, "Adversarial Code": "import re\ndef find_long_word(text):\n  return (\\\n  #begin to write code\n", "Adversarial truth": "import re\ndef find_long_word(text):\n  return (\\\nre.findall(r\"\\b\\w{5}\\b\", text))\n", "lang": "python", "code_str_generate": "import re\ndef find_long_word(text):\n\n  '''\n  progame language:python\n  description:Write a function to find all five characters long word in the given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  return (\\\n  #begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 439, "Adversarial Code": "class Solution {\n    public static List<String> func_0(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> func_0(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> func_0(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n                //begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 322, "Adversarial Code": "import java.io.*;\nclass Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                final int var_0 = 1;\n                final int var_1 = 1;\n                //begin to write code\n", "Adversarial truth": "import java.io.*;\nclass Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                final int var_0 = 1;\n                final int var_1 = 1;\n                return Integer.compare((Integer) o1.get(var_0 ), (Integer) o2.get(var_1 ));\n            }\n        });\n        return sub_li;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.io.*;\nclass Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n\n        /*\n        progame language:java\n        description:Write a java function to sort a list according to the second element in sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                final int var_0 = 1;\n                final int var_1 = 1;\n                //begin to write code\n", "prompt": "Write a java function to sort a list according to the second element in sublist."}
{"task_id": 320, "Adversarial Code": "#include<cassert>\n#include <iostream>\nint count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\nint count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n            count += 1;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\nint count_unset_bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    int x = 1;\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count unset bits of a given number."}
{"task_id": 265, "Adversarial Code": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  #begin to write code\n", "Adversarial truth": "def volume_cylinder(r,h):\n  volume=3.1415*r*r*h\n  return volume", "lang": "python", "code_str_generate": "def volume_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=3.1415*r*r*h\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 283, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nint max_val(const vector<int>& listval) {\n    return *max_element(listval.begin(), listval.end());\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 355, "Adversarial Code": "def adjacent_num_product(list_nums):\n    #begin to write code\n", "Adversarial truth": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "lang": "python", "code_str_generate": "def adjacent_num_product(list_nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 156, "Adversarial Code": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        int count = 0;\n        if (n > 0 && 0 == (n & (n - 1))) {\n            return n;\n        }\n        while (0 != n) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        int count = 0;\n        if (n > 0 && 0 == (n & (n - 1))) {\n            return n;\n        }\n        while (0 != n) {\n            n >>= 1;\n            count += 1;\n        }\n        return 1 << count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int next_Power_Of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest power of 2 greater than or equal to n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        if (n > 0 && 0 == (n & (n - 1))) {\n            return n;\n        }\n        while (0 != n) {\n        //begin to write code\n", "prompt": "Write a java function to find smallest power of 2 greater than or equal to n."}
{"task_id": 299, "Adversarial Code": "def string_to_tuple(str1):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def string_to_tuple(str1):\n#This is a comment line.\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "lang": "python", "code_str_generate": "def string_to_tuple(str1):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 134, "Adversarial Code": "function nin(a, n) { \n    let Min = a[0];\n    let max = a[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n", "Adversarial truth": "function nin(a, n) { \n    let Min = a[0];\n    let max = a[0];\n    for (let i = 1; i < n; i++) { \n        Min = Math.min(Min, a[i]);\n        max = Math.max(max, a[i]);\n    } \n    return (max - Min);\n}\n\n", "lang": "javascript", "code_str_generate": "function nin(a, n) { \n    let Min = a[0];\n    let max = a[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum difference between any two elements in a given array."}
{"task_id": 114, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n    int sum = 0;\n    {\n        int i = 1;\n        while(i < std::min(a, b)){\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <algorithm>\n\nint sum(int a, int b) {\n    int sum = 0;\n    {\n        int i = 1;\n        while(i < std::min(a, b)){\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n            i++;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n    int sum = 0;\n    {\n        int i = 1;\n        while(i < std::min(a, b)){\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string."}
{"task_id": 231, "Adversarial Code": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n        }\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countCharac(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to count total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n            //begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 260, "Adversarial Code": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (long i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (long i = 1; i <= n; i++) {\n            int j = 2 * i;\n            sum = sum + (j * j * j * j * j);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int evenPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fifth power of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (long i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fifth power of first n even natural numbers."}
{"task_id": 312, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    {\n        size_t idx = 0;\n        while(idx < test_vector.size()){\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    {\n        size_t idx = 0;\n        while(idx < test_vector.size()){\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n            ++idx;\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    {\n        size_t idx = 0;\n        while(idx < test_vector.size()){\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "prompt": "Write a function to re-arrange the given array in alternating positive and negative items."}
{"task_id": 87, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n        total *= x;\n    }\n    return total / numbers.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n\n    /*\n    progame language:cpp\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 447, "Adversarial Code": "class Solution {\n    public static int rectangleArea(long l, int b) {\n        int area = b * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int rectangleArea(long l, int b) {\n        int area = b * l;\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int rectangleArea(long l, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a rectangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = b * l;\n        //begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 270, "Adversarial Code": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n    #begin to write code\n", "Adversarial truth": "def all_unique(test_list):\n    if len(test_list) > len(set(test_list)):\n        return 0\n    return 1", "lang": "python", "code_str_generate": "def all_unique(test_list):\n\n    '''\n    progame language:python\n    description:Write a python function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(test_list) > len(set(test_list)):\n    #begin to write code\n", "prompt": "Write a python function to check if the elements of a given list are unique or not."}
{"task_id": 418, "Adversarial Code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def and_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to extract the elementwise and tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 355, "Adversarial Code": "function adjacentNumProduct(listNums) {\n//begin to write code\n", "Adversarial truth": "function adjacentNumProduct(listNums) {\n    return Math.max(...listNums.slice(0, -1).map((num, i) => num * listNums[i + 1]));\n}\n\n", "lang": "javascript", "code_str_generate": "function adjacentNumProduct(listNums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 54, "Adversarial Code": "function total(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += total(element);\n            //begin to write code\n", "Adversarial truth": "function total(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += total(element);\n        } else {\n            total += element;\n        }\n    }\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function total(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += total(element);\n            //begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 268, "Adversarial Code": "class Solution {\n    public static int isNumDecagonal(int n) {\n        return 4 * n * n - 3 * n;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n\n\n    public static int isNumDecagonal(int n) {\n        return 4 * n * n - 3 * n;\n\n\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int isNumDecagonal(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth decagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 4 * n * n - 3 * n;\n        //begin to write code\n", "prompt": "Write a function to find the nth decagonal number."}
{"task_id": 44, "Adversarial Code": "import math\ndef tn_gp(n,m,gp):\n  g = n * (math.pow(gp, m - 1))\n  #begin to write code\n", "Adversarial truth": "import math\ndef tn_gp(n,m,gp):\n  g = n * (math.pow(gp, m - 1))\n  return g", "lang": "python", "code_str_generate": "import math\ndef tn_gp(n,m,gp):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of geometric series.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  g = n * (math.pow(gp, m - 1))\n  #begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 477, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble area_pentagon(double a) {\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n  return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n\n  /*\n  progame language:cpp\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n//begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 228, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n    list1.insert(list1.end(), list2.begin(), list2.end());\n    return list1;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n//begin to write code\n", "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m."}
{"task_id": 35, "Adversarial Code": "class Solution {\n    public static boolean testDistinct(int[] dagz) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : dagz) {\n            distinctData.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean testDistinct(int[] dagz) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : dagz) {\n            distinctData.add(i);\n        }\n        return dagz.length == distinctData.size();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean testDistinct(int[] dagz) {\n\n        /*\n        progame language:java\n        description:Write a java function to determine whether all the numbers are different from each other are not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : dagz) {\n            distinctData.add(i);\n            //begin to write code\n", "prompt": "Write a java function to determine whether all the numbers are different from each other are not."}
{"task_id": 407, "Adversarial Code": "def Find_Max(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "lang": "python", "code_str_generate": "def Find_Max(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having maximum length."}
{"task_id": 177, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool prod_Square(int var_2) {\n    for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n        if (var_2 * var_2 < (var_2 + 1)) {\n            for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n                if ((var_2 * var_2 * var_2 * var_2) == var_2) {\n                    return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int var_2) {\n    for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n        if (var_2 * var_2 < (var_2 + 1)) {\n            for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n                if ((var_2 * var_2 * var_2 * var_2) == var_2) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool prod_Square(int var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n        if (var_2 * var_2 < (var_2 + 1)) {\n            for (int var_2 = 2; var_2 <= var_2; ++var_2) {\n                if ((var_2 * var_2 * var_2 * var_2) == var_2) {\n                    return true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 243, "Adversarial Code": "class Solution {\n    public ArrayList<String> parse(String text) {\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public ArrayList<String> parse(String text) {\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            list.add(matcher.group());\n        }\n        return list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public ArrayList<String> parse(String text) {\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n", "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string."}
{"task_id": 96, "Adversarial Code": "class Solution {\n    public static long count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                        count += 1;\n                    }\n                    k = k / 16;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long count_Hexadecimal(int L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to count hexadecimal numbers for a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "prompt": "Write a java function to count hexadecimal numbers for a given range."}
{"task_id": 57, "Adversarial Code": "function is_Monotonic(A) {\n    const var_0 = 1;\n    const var_1 = 1;\n    const var_2 = 1;\n    //begin to write code\n", "Adversarial truth": "function is_Monotonic(A) {\n    const var_0 = 1;\n    const var_1 = 1;\n    const var_2 = 1;\n    const var_3 = 1;\n    return A.every((val, i) => i === A.length - var_0  || val <= A[i + var_1 ]) ||\n           A.every((val, i) => i === A.length - var_2  || val >= A[i + var_3 ]);\n}\n\n", "lang": "javascript", "code_str_generate": "function is_Monotonic(A) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 1;\n    const var_1 = 1;\n    const var_2 = 1;\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the given array is monotonic or not."}
{"task_id": 85, "Adversarial Code": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        {\n            int i = 1;\n            for(;(i <= n);){\n            if (n % i == 0) {\n                x++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        {\n            int i = 1;\n            for(;(i <= n);){\n            if (n % i == 0) {\n                x++;\n            }\n                    i++;\n            }\n        }\n        return x;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int divisor(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the number of divisors of a given integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int x = 0;\n        {\n            int i = 1;\n            for(;(i <= n);){\n            if (n % i == 0) {\n                x++;\n                //begin to write code\n", "prompt": "Write a java function to find the number of divisors of a given integer."}
{"task_id": 128, "Adversarial Code": "function circle_circumference(r) {\n    let\n    //begin to write code\n", "Adversarial truth": "function circle_circumference(r) {\n    let\n perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function circle_circumference(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 347, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] % nums2[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 133, "Adversarial Code": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        {\n            int i = n - 1;\n            while(i >= 0){\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        {\n            int i = n - 1;\n            while(i >= 0){\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n                    i--;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of absolute differences in all pairs of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        {\n            int i = n - 1;\n            while(i >= 0){\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "prompt": "Write a java function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 350, "Adversarial Code": "function remove_empty(list1) {\n    const\n    //begin to write code\n", "Adversarial truth": "function remove_empty(list1) {\n    const\n filteredList = list1.filter(x => x.length);\n    return filteredList;\n  }", "lang": "javascript", "code_str_generate": "function remove_empty(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove empty lists from a given list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 323, "Adversarial Code": "import multiprocessing\nimport subprocess\ndef check_Validity(a,b,c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        var_0 = False\n        return var_0 \n    else: \n    #begin to write code\n", "Adversarial truth": "import multiprocessing\nimport subprocess\ndef check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        var_0 = False\n        return var_0 \n    else: \n        var_1 = True\n        temp_var_6 = 9.9\n        print('This function is used to remove a item of a list')\n        return var_1         ", "lang": "python", "code_str_generate": "import multiprocessing\nimport subprocess\ndef check_Validity(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        var_0 = False\n        return var_0 \n    else: \n    #begin to write code\n", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": 124, "Adversarial Code": "def hexagonal_num(n):\n    #begin to write code\n", "Adversarial truth": "def hexagonal_num(n): \n\treturn n*(2*n - 1) ", "lang": "python", "code_str_generate": "def hexagonal_num(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 418, "Adversarial Code": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int r = 0; r < test_tup1.length; r++) {\n            res[r] = test_tup1[r] & test_tup2[r];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int r = 0; r < test_tup1.length; r++) {\n            res[r] = test_tup1[r] & test_tup2[r];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the elementwise and tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int r = 0; r < test_tup1.length; r++) {\n            res[r] = test_tup1[r] & test_tup2[r];\n            //begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 77, "Adversarial Code": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  #begin to write code\n", "Adversarial truth": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n\n\n  return freq_count", "lang": "python", "code_str_generate": "import collections\ndef freq_count(list1):\n\n  '''\n  progame language:python\n  description:Write a function to get the frequency of the elements in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  freq_count= collections.Counter(list1)\n  #begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 22, "Adversarial Code": "function decimal_To_Binary(N) {\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 0;\n    let B_Number = var_0 ;\n    let cnt = var_1 ;\n    while (N != var_2 ) {\n        const var_3 = 2;\n        const var_4 = 10;\n        //begin to write code\n", "Adversarial truth": "function decimal_To_Binary(N) {\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 0;\n    let B_Number = var_0 ;\n    let cnt = var_1 ;\n    while (N != var_2 ) {\n        const var_3 = 2;\n        const var_4 = 10;\n        const var_5 = 2;\n        const var_6 = 1;\n        let rem = N % var_3 ;\n        let c = Math.pow(var_4 , cnt);\n        B_Number += rem * c;\n        N = Math.floor(N / var_5 );\n        cnt += var_6 ;\n    }\n    return B_Number;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_To_Binary(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 0;\n    let B_Number = var_0 ;\n    let cnt = var_1 ;\n    while (N != var_2 ) {\n        const var_3 = 2;\n        const var_4 = 10;\n        //begin to write code\n", "prompt": "Write a javascript function to convert a decimal number to binary number."}
{"task_id": 469, "Adversarial Code": "function get_max_occuring_char(string) {\n    const len = 256;\n    let arr = new Array(len).fill(0);\n    let index = -1;\n    let str = '';\n    for (let j = 0; j < string.length; j++) {\n        arr[string.charCodeAt(j)]++;\n    }\n    //begin to write code\n", "Adversarial truth": "function get_max_occuring_char(string) {\n    const len = 256;\n    let arr = new Array(len).fill(0);\n    let index = -1;\n    let str = '';\n    for (let j = 0; j < string.length; j++) {\n        arr[string.charCodeAt(j)]++;\n    }\n    for (let j = 0; j < string.length; j++) {\n        if (index < arr[string.charCodeAt(j)]) {\n            index = arr[string.charCodeAt(j)];\n            str = string[j];\n        }\n    }\n    return str;\n}\n\n", "lang": "javascript", "code_str_generate": "function get_max_occuring_char(string) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const len = 256;\n    let arr = new Array(len).fill(0);\n    let index = -1;\n    let str = '';\n    for (let j = 0; j < string.length; j++) {\n        arr[string.charCodeAt(j)]++;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum occurring character in a given string."}
{"task_id": 82, "Adversarial Code": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * power(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int power(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the value of 'a' to the power 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 220, "Adversarial Code": "function max_sum(var_3, var_2) {\n    if (var_2 > 1) {\n        var_3[1][1] = var_3[1][1] + var_3[0][0];\n        var_3[1][0] = var_3[1][0] + var_3[0][0];\n    }\n    for (let var_0 = 2; var_0 < var_2; var_0++) {\n        var_3[var_0][0] = var_3[var_0][0] + var_3[var_0 - 1][0];\n        var_3[var_0][var_0] = var_3[var_0][var_0] + var_3[var_0 - 1][var_0 - 1];\n        for (let var_1 = 1; var_1 < var_0; var_1++) {\n        //begin to write code\n", "Adversarial truth": "function max_sum(var_3, var_2) {\n    if (var_2 > 1) {\n        var_3[1][1] = var_3[1][1] + var_3[0][0];\n        var_3[1][0] = var_3[1][0] + var_3[0][0];\n    }\n    for (let var_0 = 2; var_0 < var_2; var_0++) {\n        var_3[var_0][0] = var_3[var_0][0] + var_3[var_0 - 1][0];\n        var_3[var_0][var_0] = var_3[var_0][var_0] + var_3[var_0 - 1][var_0 - 1];\n        for (let var_1 = 1; var_1 < var_0; var_1++) {\n            if (var_3[var_0][var_1] + var_3[var_0 - 1][var_1 - 1] >= var_3[var_0][var_1] + var_3[var_0 - 1][var_1]) {\n                var_3[var_0][var_1] = var_3[var_0][var_1] + var_3[var_0 - 1][var_1 - 1];\n            } else {\n                var_3[var_0][var_1] = var_3[var_0][var_1] + var_3[var_0 - 1][var_1];\n            }\n        }\n    }\n    return Math.max(...var_3[var_2 - 1]);\n}\n\n", "lang": "javascript", "code_str_generate": "function max_sum(var_3, var_2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum in the given right triangle of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (var_2 > 1) {\n        var_3[1][1] = var_3[1][1] + var_3[0][0];\n        var_3[1][0] = var_3[1][0] + var_3[0][0];\n    }\n    for (let var_0 = 2; var_0 < var_2; var_0++) {\n        var_3[var_0][0] = var_3[var_0][0] + var_3[var_0 - 1][0];\n        var_3[var_0][var_0] = var_3[var_0][var_0] + var_3[var_0 - 1][var_0 - 1];\n        for (let var_1 = 1; var_1 < var_0; var_1++) {\n        //begin to write code\n", "prompt": "Write a function to find the maximum sum in the given right triangle of numbers."}
{"task_id": 308, "Adversarial Code": "import re\ndef find_long_word(text):\n    #begin to write code\n", "Adversarial truth": "import re\ndef find_long_word(text):\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "lang": "python", "code_str_generate": "import re\ndef find_long_word(text):\n\n    '''\n    progame language:python\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 145, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        int second = stoi(get<1>(x));\n        result.push_back(make_tuple(first, second));\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 393, "Adversarial Code": "class Solution {\n    public static int minimum(long a, int b) {\n        if (a <= b) {\n            return a;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int minimum(long a, int b) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int minimum(long a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a <= b) {\n            return a;\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to find the minimum of two numbers."}
{"task_id": 29, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency of the elements in a given list of lists using collections module.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 367, "Adversarial Code": "def move_first(test_list):\n  test_list\\\n  #begin to write code\n", "Adversarial truth": "def move_first(test_list):\n  test_list\\\n = test_list[-1:] + test_list[:-1]  \n  return test_list", "lang": "python", "code_str_generate": "def move_first(test_list):\n\n  '''\n  progame language:python\n  description:Write a python function to shift last element to first position in the given list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  test_list\\\n  #begin to write code\n", "prompt": "Write a python function to shift last element to first position in the given list."}
{"task_id": 324, "Adversarial Code": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  #begin to write code\n", "Adversarial truth": "def ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "lang": "python", "code_str_generate": "def ap_sum(a,n,d):\n\n  '''\n  progame language:python\n  description:Write a function to find the sum of arithmetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  #begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 394, "Adversarial Code": "function check_tuplex(tuplex, tuple1) {\n//begin to write code\n", "Adversarial truth": "function check_tuplex(tuplex, tuple1) {\n  return tuplex.includes(tuple1);\n}\n\n", "lang": "javascript", "code_str_generate": "function check_tuplex(tuplex, tuple1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether an element exists within a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 240, "Adversarial Code": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            result.add(elt);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n\n        /*\n        progame language:java\n        description:Write a function to insert an element before each element of a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n", "prompt": "Write a function to insert an element before each element of a list."}
{"task_id": 445, "Adversarial Code": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n", "Adversarial truth": "def reverse_string_list(stringlist):\n    result = [x[::-1] for x in stringlist]\n    return result", "lang": "python", "code_str_generate": "def reverse_string_list(stringlist):\n\n    '''\n    progame language:python\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x[::-1] for x in stringlist]\n    #begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 14, "Adversarial Code": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n", "Adversarial truth": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_Product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the product of non-repeated elements in a given array."}
{"task_id": 311, "Adversarial Code": "def position_min(list1):\n    min_val = min(list1)\n    min_result\\\n    #begin to write code\n", "Adversarial truth": "def position_min(list1):\n    min_val = min(list1)\n    min_result\\\n = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "lang": "python", "code_str_generate": "def position_min(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_val = min(list1)\n    min_result\\\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 165, "Adversarial Code": "class Solution {\n    public static int perimeterTriangle(int a, long b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int perimeterTriangle(int a, long b, int c) {\n        int perimeter = a + b + c;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int perimeterTriangle(int a, long b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = a + b + c;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 14, "Adversarial Code": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let r = 0; r < n; r++) {\n        if (r === 0 || arr[r - 1] !== arr[r]) {\n        //begin to write code\n", "Adversarial truth": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let r = 0; r < n; r++) {\n        if (r === 0 || arr[r - 1] !== arr[r]) {\n            prod *= arr[r];\n        }\n    }\n    return prod;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_Product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let r = 0; r < n; r++) {\n        if (r === 0 || arr[r - 1] !== arr[r]) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the product of non-repeated elements in a given array."}
{"task_id": 134, "Adversarial Code": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n        return (maxEle - minEle);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum difference between any two elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n", "prompt": "Write a java function to find the maximum difference between any two elements in a given array."}
{"task_id": 340, "Adversarial Code": "def first_Element(arr,n,k):\n    count_map = {}; \n    for i in range(0, n): \n        if not((arr[i] in count_map.keys())):\n            count_map[arr[i]] = 1\n        else:\n            count_map[arr[i]] += 1\n            #begin to write code\n", "Adversarial truth": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if not((arr[i] in count_map.keys())):\n            count_map[arr[i]] = 1\n        else:\n            count_map[arr[i]] += 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "lang": "python", "code_str_generate": "def first_Element(arr,n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count_map = {}; \n    for i in range(0, n): \n        if not((arr[i] in count_map.keys())):\n            count_map[arr[i]] = 1\n        else:\n            count_map[arr[i]] += 1\n            #begin to write code\n", "prompt": "Write a python function to find the first element occurring k times in a given array."}
{"task_id": 11, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nlong find_first_duplicate(std::vector<long>& nums) {\n    std::set<long> num_set;\n    long no_duplicate = -1;\n    for (long num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nlong find_first_duplicate(std::vector<long>& nums) {\n    std::set<long> num_set;\n    long no_duplicate = -1;\n\n    for (long num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n        } else {\n            num_set.insert(num);\n        }\n    }\n    return no_duplicate;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nlong find_first_duplicate(std::vector<long>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<long> num_set;\n    long no_duplicate = -1;\n    for (long num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 322, "Adversarial Code": "def Sort(sub_li):\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "Adversarial truth": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ", "lang": "python", "code_str_generate": "def Sort(sub_li):\n\n    '''\n    progame language:python\n    description:Write a python function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "prompt": "Write a python function to sort a list according to the second element in sublist."}
{"task_id": 285, "Adversarial Code": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 1 + i; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 1 + i; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                }\n            }\n        }\n        return inv_count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count inversions in an array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 1 + i; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "prompt": "Write a java function to count inversions in an array."}
{"task_id": 60, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n//This is a comment line.\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n//This is a comment line.\n    bool swapped = true;\n    \n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n            if (nums[i] > nums[i + gaps]) {\n                std::swap(nums[i], nums[i + gaps]);\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n//This is a comment line.\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n//begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 57, "Adversarial Code": "def is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "Adversarial truth": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "lang": "python", "code_str_generate": "def is_Monotonic(A):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "prompt": "Write a python function to check whether the given array is monotonic or not."}
{"task_id": 84, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint\\\n Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint\\\n Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n            minLength = v.size();\n        }\n    }\n    return minLength;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint\\\n Find_Min_Length(vector<vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum length of sublist."}
{"task_id": 165, "Adversarial Code": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  #begin to write code\n", "Adversarial truth": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter", "lang": "python", "code_str_generate": "def perimeter_triangle(a,b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=a+b+c\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 221, "Adversarial Code": "import multiprocessing\nimport unittest\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n var_0 = 9.9\n temp_var_4 = var_0 \n #begin to write code\n", "Adversarial truth": "import multiprocessing\nimport unittest\nimport heapq\ndef larg_nnum(list1,n):\n largest=heapq.nlargest(n,list1)\n return largest\n var_0 = 9.9\n temp_var_4 = var_0 \n var_1 = 9.12\n var_2 = 'This function is used to remove a item of a list'\n var_3 = 1\n while temp_var_4 < var_1 : print(var_2 ); temp_var_4 += var_3 ", "lang": "python", "code_str_generate": "import multiprocessing\nimport unittest\nimport heapq\ndef larg_nnum(list1,n):\n\n '''\n progame language:python\n description:Write a function to get the n largest items from a dataset.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n largest=heapq.nlargest(n,list1)\n return largest\n var_0 = 9.9\n temp_var_4 = var_0 \n #begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 323, "Adversarial Code": "def check_Validity(a,b,c):\n    if\\\n (a + b <= c) or (a + c <= b) or (b + c <= a) : \n #begin to write code\n", "Adversarial truth": "\n\ndef check_Validity(a,b,c):  \n    if\\\n\n\n (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return False\n\n\n    else: \n        return True        \n", "lang": "python", "code_str_generate": "def check_Validity(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if\\\n (a + b <= c) or (a + c <= b) or (b + c <= a) : \n #begin to write code\n", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": 383, "Adversarial Code": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (long ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (long ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n            break;\n        }\n        temp.insert(ele);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if given tuple is distinct or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = true;\n    std::set<int> temp;\n    for (long ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 203, "Adversarial Code": "function rotate(deg) {\n    const angle = deg * (180 / Math.PI);\n    //begin to write code\n", "Adversarial truth": "function rotate(deg) {\n    const angle = deg * (180 / Math.PI);\n    return angle;\n}\n\n", "lang": "javascript", "code_str_generate": "function rotate(deg) {\n    const angle = deg * (180 / Math.PI);\n    //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 419, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint product(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint product(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n    return directrix;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint product(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n//begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 152, "Adversarial Code": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  #begin to write code\n", "Adversarial truth": "from math import tan, pi\ndef area_polygon(s,l):\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "lang": "python", "code_str_generate": "from math import tan, pi\ndef area_polygon(s,l):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the area of a regular polygon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area = s * (l ** 2) / (4 * tan(pi / s))\n  #begin to write code\n", "prompt": "Write a function to calculate the area of a regular polygon."}
{"task_id": 283, "Adversarial Code": "def maximum(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "Adversarial truth": "def maximum(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "lang": "python", "code_str_generate": "def maximum(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 29, "Adversarial Code": "function uiej_elvnvng(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n            //begin to write code\n", "Adversarial truth": "function uiej_elvnvng(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n        } else {\n            result[num] = 1;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function uiej_elvnvng(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n            //begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 368, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int var_1, int var_3, int var_2) {\n    int var_0 = 2 * (var_1 * var_3 + var_1 * var_2 + var_3 * var_2);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\nint surfacearea_cuboid(int var_1, int var_3, int var_2) {\n    int var_0 = 2 * (var_1 * var_3 + var_1 * var_2 + var_3 * var_2);\n    return var_0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int var_1, int var_3, int var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int var_0 = 2 * (var_1 * var_3 + var_1 * var_2 + var_3 * var_2);\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 89, "Adversarial Code": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for\\\n    #begin to write code\n", "Adversarial truth": "import sys\ndef next_smallest_palindrome(num):\n    numstr = str(num)\n    for\\\n i in range(num+1,sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i", "lang": "python", "code_str_generate": "import sys\ndef next_smallest_palindrome(num):\n\n    '''\n    progame language:python\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    numstr = str(num)\n    for\\\n    #begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 394, "Adversarial Code": "function check_tuplex(tuplex, tuple1) {\n//begin to write code\n", "Adversarial truth": "function check_tuplex(tuplex, tuple1) {\n  return tuplex.includes(tuple1);\n}\n\n", "lang": "javascript", "code_str_generate": "function check_tuplex(tuplex, tuple1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether an element exists within a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 82, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else{\n          if (a == 0) {\n            return 0;\n        } else{\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else{\n          if (a == 0) {\n            return 0;\n        } else{\n              if (b == 1) {\n                return a;\n            } else {\n                return a * power(a, b - 1);\n            }\n          }\n      }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (b == 0) {\n        return 1;\n    } else{\n          if (a == 0) {\n            return 0;\n        } else{\n//begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 43, "Adversarial Code": "function counting_sort(var_6) {\n    let var_5 = 0;\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        if (var_6[var_2] > var_5) {\n            var_5 = var_6[var_2];\n        }\n    }\n    let var_1 = new Array(var_5 + 1).fill(0);\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        var_1[var_6[var_2]] += 1;\n        //begin to write code\n", "Adversarial truth": "function counting_sort(var_6) {\n    let var_5 = 0;\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        if (var_6[var_2] > var_5) {\n            var_5 = var_6[var_2];\n        }\n    }\n    let var_1 = new Array(var_5 + 1).fill(0);\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        var_1[var_6[var_2]] += 1;\n    }\n    let var_3 = 0;\n    for (let var_4 = 0; var_4 <= var_5; var_4++) {\n        for (let var_0 = 0; var_0 < var_1[var_4]; var_0++) {\n            var_6[var_3] = var_4;\n            var_3 += 1;\n        }\n    }\n    return var_6;\n}\n\n", "lang": "javascript", "code_str_generate": "function counting_sort(var_6) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_5 = 0;\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        if (var_6[var_2] > var_5) {\n            var_5 = var_6[var_2];\n        }\n    }\n    let var_1 = new Array(var_5 + 1).fill(0);\n    for (let var_2 = 0; var_2 < var_6.length; var_2++) {\n        var_1[var_6[var_2]] += 1;\n        //begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 306, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n            maxvalue = max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "prompt": "Write a function to reflect the modified run-length encoding from a list."}
{"task_id": 110, "Adversarial Code": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n            return false;\n        }\n        return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) ||\n               checkTriplet(A, n - 1, sum, count);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n\n        /*\n        progame language:java\n        description:Write a function to find the triplet with sum of the given array\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 398, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint\\\n min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\n\nint\\\n min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n            result_min = product;\n        }\n    }\n    return result_min;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint\\\n min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n//begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 378, "Adversarial Code": "def find_lucas(n):\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n", "Adversarial truth": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "lang": "python", "code_str_generate": "def find_lucas(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the n'th lucas number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 74, "Adversarial Code": "import math\ndef surfacearea_sphere(r):\n  var_0 = 4\n  #begin to write code\n", "Adversarial truth": "import math\ndef surfacearea_sphere(r):\n  var_0 = 4\n  surfacearea=var_0 *math.pi*r*r\n  return surfacearea", "lang": "python", "code_str_generate": "import math\ndef surfacearea_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 4\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 8, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<long> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<long> nums_set(arraynums.begin(), arraynums.end());    \n    return nums_set.size() != arraynums.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<long> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 44, "Adversarial Code": "class Solution {\n    public static double tn_gp(int n, int p, int f) {\n        double g = n * Math.pow(f, p - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double tn_gp(int n, int p, int f) {\n        double g = n * Math.pow(f, p - 1);\n        return g;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double tn_gp(int n, int p, int f) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of geometric series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double g = n * Math.pow(f, p - 1);\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 181, "Adversarial Code": "function check_String(str) {\n    let flag_l = 0;\n    let flag_n = 0;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = 1;\n            //begin to write code\n", "Adversarial truth": "function check_String(str) {\n    let flag_l = 0;\n    let flag_n = 0;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = 1;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = 1;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_String(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let flag_l = 0;\n    let flag_n = 0;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = 1;\n            //begin to write code\n", "prompt": "Write a javascript function to check whether a string has atleast one letter and one number."}
{"task_id": 487, "Adversarial Code": "def gcd(self, other):\n    n = 1\n    if self % other == 0:\n        return other\n    for i in range(int(other / 2), 0, -1):\n    #begin to write code\n", "Adversarial truth": "def gcd(self, other):\n    n = 1\n    if self % other == 0:\n        return other\n    for i in range(int(other / 2), 0, -1):\n        if self % i == 0 and other % i == 0:\n            n = i\n            break  \n    return n", "lang": "python", "code_str_generate": "def gcd(self, other):\n\n    '''\n    progame language:python\n    description:Write a python function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    n = 1\n    if self % other == 0:\n        return other\n    for i in range(int(other / 2), 0, -1):\n    #begin to write code\n", "prompt": "Write a python function to find gcd of two positive integers."}
{"task_id": 108, "Adversarial Code": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "Adversarial truth": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "lang": "python", "code_str_generate": "def search(arr,n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "prompt": "Write a python function to find the element that appears only once in a sorted array."}
{"task_id": 256, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n odd natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n odd natural numbers."}
{"task_id": 446, "Adversarial Code": "def Find_Min(lst):\n    minList = min((l) for l in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Min(lst): \n    minList = min((l) for l in lst) \n    return minList", "lang": "python", "code_str_generate": "def Find_Min(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minList = min((l) for l in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having minimum length."}
{"task_id": 466, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\nstd::string is_lower(const std::string& str) {\n    std::string lower_str = str;\n    std\\\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\n\nstd::string is_lower(const std::string& str) {\n    std::string lower_str = str;\n    std\\\n::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return lower_str;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\nstd::string is_lower(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string lower_str = str;\n    std\\\n//begin to write code\n", "prompt": "Write a cpp function to convert the given string to lower case."}
{"task_id": 51, "Adversarial Code": "import subprocess\nimport io\ndef smallest_num(xs):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import subprocess\n#This is a comment line.\nimport io\ndef smallest_num(xs):\n#This is a comment line.\n  return min(xs)\n", "lang": "python", "code_str_generate": "import subprocess\nimport io\ndef smallest_num(xs):\n\n    '''\n    progame language:python\n    description:Write a python function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a python function to find smallest number in a list."}
{"task_id": 117, "Adversarial Code": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let c of txt) {\n        if (c.length > n) {\n        //begin to write code\n", "Adversarial truth": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let c of txt) {\n        if (c.length > n) {\n            wordLen.push(c);\n        }\n    }\n    return wordLen;\n}\n\n", "lang": "javascript", "code_str_generate": "function longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let c of txt) {\n        if (c.length > n) {\n        //begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 189, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& var_1) {\n    int var_3 = *std::max_element(var_1.begin(), var_1.end());\n    std::vector<int> var_2;\n    for (int var_0 = 0; var_0 < var_1.size(); ++var_0) {\n        if (var_1[var_0] == var_3) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& var_1) {\n    int var_3 = *std::max_element(var_1.begin(), var_1.end());\n    std::vector<int> var_2;\n    for (int var_0 = 0; var_0 < var_1.size(); ++var_0) {\n        if (var_1[var_0] == var_3) {\n            var_2.push_back(var_0);\n        }\n    }\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& var_1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int var_3 = *std::max_element(var_1.begin(), var_1.end());\n    std::vector<int> var_2;\n    for (int var_0 = 0; var_0 < var_1.size(); ++var_0) {\n        if (var_1[var_0] == var_3) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 460, "Adversarial Code": "function func_0(func, l, p) { \n    let result = 1;\n    for (let i = 0; i < l; i++) {  \n    //begin to write code\n", "Adversarial truth": "function func_0(func, l, p) { \n    let result = 1;\n    for (let i = 0; i < l; i++) {  \n        result = (result * (func[i] % p)) % p;\n    }\n    return result % p;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(func, l, p) { \n    let result = 1;\n    for (let i = 0; i < l; i++) {  \n    //begin to write code\n", "prompt": "Write a javascript function to find remainder of array multiplication divided by n."}
{"task_id": 393, "Adversarial Code": "function minimum(a, b) {\n    if (a <= b) {\n        return a;\n    } else {\n    //begin to write code\n", "Adversarial truth": "function minimum(a, b) {\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n        let temp_var_3 = 9.9;while (temp_var_3 < 9.12) {temp_var_3 = temp_var_3 + 1;}\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function minimum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a <= b) {\n        return a;\n    } else {\n    //begin to write code\n", "prompt": "Write a javascript function to find the minimum of two numbers."}
{"task_id": 160, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n    int perimeter = 5 * a;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint perimeter_pentagon(int a) {\n    int perimeter = 5 * a;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 5 * a;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 276, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (\nint)(2 * n * (n + 1) * (2 * n + 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n even natural numbers."}
{"task_id": 200, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint count_Num(int n) {\n    if (1 == n) {\n        return 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint count_Num(int n) {\n    if (1 == n) {\n        return 1;\n    }\n    int count = pow(2, n - 2);\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint count_Num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count numbers whose oth and nth bits are set.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (1 == n) {\n        return 1;\n//begin to write code\n", "prompt": "Write a cpp function to count numbers whose oth and nth bits are set."}
{"task_id": 430, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//This is a comment line.\nint surfacearea_cube(int l) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n//This is a comment line.\n#include <cassert>\n\n\nint surfacearea_cube(int l) {\n    int surfacearea = 6 * l * l;\n    return surfacearea;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//This is a comment line.\nint surfacearea_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 478, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency_Of_Largest\\\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint\\\n frequency_Of_Largest\\\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n\n\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency_Of_Largest\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the largest value in a given array."}
{"task_id": 408, "Adversarial Code": "class Solution {\n    public static int func_0(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n        }\n        roundAndSum *= length;\n        return roundAndSum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n\n        /*\n        progame language:java\n        description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 218, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> function(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> function(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> function(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 453, "Adversarial Code": "def check_value(dict, n):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def check_value(dict, n):\n\n\n    result\\\n = all(x == n for x in dict.values()) \n    return result\n", "lang": "python", "code_str_generate": "def check_value(dict, n):\n\n    '''\n    progame language:python\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 388, "Adversarial Code": "def bitwise_xor(test_tup1, test_tup2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def bitwise_xor(test_tup1, test_tup2):\n  res\\\n = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def bitwise_xor(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 215, "Adversarial Code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "Adversarial truth": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n  return result", "lang": "python", "code_str_generate": "def odd_values_string(str):\n\n  '''\n  progame language:python\n  description:Write a python function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "prompt": "Write a python function to remove the characters which have odd index values of a given string."}
{"task_id": 447, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n    return regex_replace(str1, upper, \"\");\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n//begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 115, "Adversarial Code": "function min(A, B) {\n    let result = 0;\n    for (let j = 1; j < Math.min(A, B); j++) {\n        if (A % j === 0 && B % j === 0) {\n        //begin to write code\n", "Adversarial truth": "function min(A, B) {\n    let result = 0;\n    for (let j = 1; j < Math.min(A, B); j++) {\n        if (A % j === 0 && B % j === 0) {\n            result += j;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function min(A, B) {\n    let result = 0;\n    for (let j = 1; j < Math.min(A, B); j++) {\n        if (A % j === 0 && B % j === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of common divisors of two given numbers."}
{"task_id": 392, "Adversarial Code": "import re\ndef is_valid_URL(str):\n\tregex\\\n = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\t\t\t#begin to write code\n", "Adversarial truth": "import re\ndef is_valid_URL(str):\n\tregex\\\n = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "lang": "python", "code_str_generate": "import re\ndef is_valid_URL(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if a url is valid or not using regex.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tregex\\\n = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\t\t\t#begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 1, "Adversarial Code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n", "Adversarial truth": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    lambda: print('This function is used to remove a item of a list')\n    return result", "lang": "python", "code_str_generate": "def sort_matrix(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 354, "Adversarial Code": "class Solution {\n    public static int xoumg_Wrtig(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int xoumg_Wrtig(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int xoumg_Wrtig(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            //begin to write code\n", "prompt": "Write a java function to count the number of digits of a given number."}
{"task_id": 53, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> sorted(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, int>> sorted(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n    return subjectmarks;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> sorted(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 67, "Adversarial Code": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        if (count % 2 != 0) {\n            ans += 1;\n        }\n        return ans;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countWithOddSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find number of integers with odd number of set bits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n", "prompt": "Write a java function to find number of integers with odd number of set bits."}
{"task_id": 205, "Adversarial Code": "const dns = require('dns');\nfunction check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "Adversarial truth": "const dns = require('dns');\nfunction check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n            exist = false;\n        }\n    }\n    return exist;\n}\n\n", "lang": "javascript", "code_str_generate": "const dns = require('dns');\nfunction check_subset_list(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 201, "Adversarial Code": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (Math.pow(i, 4));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (Math.pow(i, 4));\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int fourthPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fourth power of n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (Math.pow(i, 4));\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fourth power of n natural numbers."}
{"task_id": 416, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n            my_list[j] = current_item;\n        }\n        gap /= 2;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."}
{"task_id": 284, "Adversarial Code": "def sum_div(number):\n    divisors = [1]\n    for\\\n i in range(2, number):\n #begin to write code\n", "Adversarial truth": "def sum_div(number):\n    divisors = [1]\n    for\\\n i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "lang": "python", "code_str_generate": "def sum_div(number):\n\n    '''\n    progame language:python\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    divisors = [1]\n    for\\\n i in range(2, number):\n #begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 201, "Adversarial Code": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n", "Adversarial truth": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n        sum += Math.pow(i, 4);\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function fourth_Power_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of fourth power of n natural numbers."}
{"task_id": 334, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<long>& nums) {\n    vector<long> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> diff_consecutivenums(const vector<long>& nums) {\n    vector<long> result;\n    for (int i = 1; i < nums.size(); i++) {\n        result.push_back(nums[i] - nums[i-1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<long>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<long> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 30, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 29, "Adversarial Code": "from collections import Counter\nfrom itertools import chain\ndef freq_element(iter):\n  c = Counter(chain.from_iterable(iter))\n  #begin to write code\n", "Adversarial truth": "from collections import Counter\nfrom itertools import chain\ndef freq_element(iter):\n  c = Counter(chain.from_iterable(iter))\n  return c", "lang": "python", "code_str_generate": "from collections import Counter\nfrom itertools import chain\ndef freq_element(iter):\n\n  '''\n  progame language:python\n  description:Write a function to find frequency of the elements in a given list of lists using collections module.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  c = Counter(chain.from_iterable(iter))\n  #begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 128, "Adversarial Code": "function circle_ciicumferenxv(r) {\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n", "Adversarial truth": "function circle_ciicumferenxv(r) {\n    let perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function circle_ciicumferenxv(r) {\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 402, "Adversarial Code": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, long n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, long n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, long n) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the nth element from a given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n            //begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 413, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> function(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<char> function(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n        res.push_back(sub[sub.length() - 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> function(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 79, "Adversarial Code": "function max(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n        //begin to write code\n", "Adversarial truth": "function max(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n            max = i.length;\n        }\n    }\n    return max;\n}\n\n", "lang": "javascript", "code_str_generate": "function max(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the length of the longest word."}
{"task_id": 495, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n    }\n    return list1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 80, "Adversarial Code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n   #begin to write code\n", "Adversarial truth": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return 1\n   return 0", "lang": "python", "code_str_generate": "def find_substring(str1, sub_str):\n\n   '''\n   progame language:python\n   description:Write a function to check if a substring is present in a given list of string values.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   if any(sub_str in s for s in str1):\n   #begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 324, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 177, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 436, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n//This is a comment line.\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n//This is a comment line.\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n//This is a comment line.\nvector<int> cube_nums(const vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 38, "Adversarial Code": "def specified_element(nums, N):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list."}
{"task_id": 186, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n        res.push_back(pow(test_vec1[i], test_vec2[i]));\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the exponentiation of the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 102, "Adversarial Code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n     #begin to write code\n", "Adversarial truth": "\n\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "lang": "python", "code_str_generate": "def check_integer(text):\n\n '''\n progame language:python\n description:Write a function to check if a string represents an integer or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n     #begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 180, "Adversarial Code": "def check_monthnumber(monthname3):\n  if \"April\" == monthname3 or \"June\" == monthname3 or \"September\" == monthname3 or \"November\" == monthname3:\n    return 1\n    #begin to write code\n", "Adversarial truth": "def check_monthnumber(monthname3):\n  if \"April\" == monthname3 or \"June\" == monthname3 or \"September\" == monthname3 or \"November\" == monthname3:\n    return 1\n  else:\n    return 0", "lang": "python", "code_str_generate": "def check_monthnumber(monthname3):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 30 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if \"April\" == monthname3 or \"June\" == monthname3 or \"September\" == monthname3 or \"November\" == monthname3:\n    return 1\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 399, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint func_0(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nint func_0(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n            min_val = value;\n        }\n    }\n    return min_val;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint func_0(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 466, "Adversarial Code": "function is_lower(string) {\n//begin to write code\n", "Adversarial truth": "function is_lower(string) {\n  return string.toLowerCase();\n}\n\n", "lang": "javascript", "code_str_generate": "function is_lower(string) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to convert the given string to lower case."}
{"task_id": 102, "Adversarial Code": "def check_integer(text):\n text = text.strip()\n if not(len(text) < 1):\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n     #begin to write code\n", "Adversarial truth": "def check_integer(text):\n text = text.strip()\n if not(len(text) < 1):\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False\n else:\n     return None", "lang": "python", "code_str_generate": "def check_integer(text):\n\n '''\n progame language:python\n description:Write a function to check if a string represents an integer or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n text = text.strip()\n if not(len(text) < 1):\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n     #begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 481, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, long item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item == item_list[mid]) {\n            found = true;\n        } else {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool binary_search(const std::vector<int>& item_list, long item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item == item_list[mid]) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = 1 + mid;\n            }\n        }\n    }\n\n    return found;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, long item) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using binary search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item == item_list[mid]) {\n            found = true;\n        } else {\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 222, "Adversarial Code": "class Solution {\n    public static double surface(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surface(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        return lateralsurface;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surface(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 35, "Adversarial Code": "def test_distinct(data):\n  if\\\n len(data) == len(set(data)):\n #begin to write code\n", "Adversarial truth": "def test_distinct(data):\n  if\\\n len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "lang": "python", "code_str_generate": "def test_distinct(data):\n\n  '''\n  progame language:python\n  description:Write a python function to determine whether all the numbers are different from each other are not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if\\\n len(data) == len(set(data)):\n #begin to write code\n", "prompt": "Write a python function to determine whether all the numbers are different from each other are not."}
{"task_id": 340, "Adversarial Code": "def first_Element(arr,n,k):\n    count_map = {}; \n    for i in range(0, n): \n        if\\\n(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n        #begin to write code\n", "Adversarial truth": "def first_Element(arr,n,k): \n    count_map = {}; \n    for i in range(0, n): \n        if\\\n(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n        i += 1\n    for i in range(0, n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        i += 1 \n    return -1", "lang": "python", "code_str_generate": "def first_Element(arr,n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count_map = {}; \n    for i in range(0, n): \n        if\\\n(arr[i] in count_map.keys()): \n            count_map[arr[i]] += 1\n        else: \n        #begin to write code\n", "prompt": "Write a python function to find the first element occurring k times in a given array."}
{"task_id": 384, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, long> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, long> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n    }\n    for (char c : char_order) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return '\\0'; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first non-repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<char> char_order;\n    std::map<char, long> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "prompt": "Write a cpp function to find the first non-repeated character in a given string."}
{"task_id": 231, "Adversarial Code": "def\\\n count_charac(str1):\n total = 0\n #begin to write code\n", "Adversarial truth": "def\\\n\n\n count_charac(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total\n", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to count total characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n count_charac(str1):\n total = 0\n #begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 415, "Adversarial Code": "def odd(nums):\n ldw_nfms = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n", "Adversarial truth": "def odd(nums):\n ldw_nfms = list(filter(lambda x: x%2 != 0, nums))\n return ldw_nfms", "lang": "python", "code_str_generate": "def odd(nums):\n\n '''\n progame language:python\n description:Write a function to filter odd numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n ldw_nfms = list(filter(lambda x: x%2 != 0, nums))\n #begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 414, "Adversarial Code": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "Adversarial truth": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n            ctr += 1;\n        }\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function countElementInList(list1, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 203, "Adversarial Code": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n    const auto var_0 = 180.0;\n//begin to write code\n", "Adversarial truth": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble degree_radian(double radian) {\n    const auto var_0 = 180.0;\n    double degree = radian * (var_0  / M_PI);\n    return degree;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 180.0;\n//begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 42, "Adversarial Code": "def check_Equality(str):\n  if\\\n (str[0] == str[-1]):  \n #begin to write code\n", "Adversarial truth": "def check_Equality(str):\n  if\\\n (str[0] == str[-1]):  \n    return (\"Equal\") \n\n\n  else:  \n    return (\"Not Equal\") ", "lang": "python", "code_str_generate": "def check_Equality(str):\n\n  '''\n  progame language:python\n  description:Write a python function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if\\\n (str[0] == str[-1]):  \n #begin to write code\n", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 79, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    long max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    long max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n            max = i.length();\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n", "prompt": "Write a cpp function to find the length of the longest word."}
{"task_id": 143, "Adversarial Code": "def specified_element(nums, N):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n    result\\\n = [i[N] for i in nums]\n    return result\n", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 440, "Adversarial Code": "function remove_whitespaces(text1) {\n//begin to write code\n", "Adversarial truth": "function remove_whitespaces(text1) {\n  return text1.replace(/\\s+/g, '');\n}\n\n\n", "lang": "javascript", "code_str_generate": "function remove_whitespaces(text1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 369, "Adversarial Code": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let iod = 0; iod < rownum; iod++) {\n    for (let col = 0; col < colnum; col++) {\n    //begin to write code\n", "Adversarial truth": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let iod = 0; iod < rownum; iod++) {\n    for (let col = 0; col < colnum; col++) {\n      multi_list[iod][col] = iod * col;\n    }\n  }\n  return multi_list;\n}\n\n", "lang": "javascript", "code_str_generate": "function multi_list(rownum, colnum) {\n\n  /*\n  progame language:javascript\n  description:Write a function to generate a two-dimensional array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let iod = 0; iod < rownum; iod++) {\n    for (let col = 0; col < colnum; col++) {\n    //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 491, "Adversarial Code": "class Solution {\n    public int find(int r, int k) {\n        int j = r % k;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int find(int r, int k) {\n        int j = r % k;\n        return j;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int find(int r, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int j = r % k;\n        //begin to write code\n", "prompt": "Write a java function to find remainder of two numbers."}
{"task_id": 21, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(long n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint max_Prime_Factors(long n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return maxPrime;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(long n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest prime factor of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest prime factor of a given number."}
{"task_id": 446, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n    return *std::min_element(lst.begin(), lst.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the sublist having minimum length."}
{"task_id": 121, "Adversarial Code": "import random\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  #begin to write code\n", "Adversarial truth": "import random\ndef tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "lang": "python", "code_str_generate": "import random\ndef tup_string(tup1):\n\n  '''\n  progame language:python\n  description:Write a function to convert tuple to a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  str =  ''.join(tup1)\n  #begin to write code\n", "prompt": "Write a function to convert tuple to a string."}
{"task_id": 210, "Adversarial Code": "const crypto = require('crypto');\nconst var_5 = 'events';\nconst var_6 = 'zlib';\nconst var_7 = 'http';\nconst var_8 = 'https';\nconst var_12 = 9.9;\nconst var_13 = 1;\nconst events = require(var_5 );\nconst zlib = require(var_6 );\nconst http = require(var_7 );\nconst https = require(var_8 );\nfunction firstEven(nums) {\n//begin to write code\n", "Adversarial truth": "const crypto = require('crypto');\nconst var_5 = 'events';\nconst var_6 = 'zlib';\nconst var_7 = 'http';\nconst var_8 = 'https';\nconst var_12 = 9.9;\nconst var_13 = 1;\nconst events = require(var_5 );\nconst zlib = require(var_6 );\nconst http = require(var_7 );\nconst https = require(var_8 );\nfunction firstEven(nums) {\n    const var_9 = 2;\n    const var_10 = 0;\n    const var_11 = 1;\n    const var_0 = var_9 ;\n    const var_1 = var_10 ;\n    const var_2 = var_11 ;\n    const firstEven = nums.find(el => el % var_0  === var_1 );\n    return firstEven !== undefined ? firstEven : -var_2 ;\n}\n\n(function() {let temp_var_4 = var_3 ; temp_var_4 = temp_var_4 + var_4 ;})();\nconst var_3 = var_12 ;\nconst var_4 = var_13 ;\n", "lang": "javascript", "code_str_generate": "const crypto = require('crypto');\nconst var_5 = 'events';\nconst var_6 = 'zlib';\nconst var_7 = 'http';\nconst var_8 = 'https';\nconst var_12 = 9.9;\nconst var_13 = 1;\nconst events = require(var_5 );\nconst zlib = require(var_6 );\nconst http = require(var_7 );\nconst https = require(var_8 );\nfunction firstEven(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the first even number in a given list of numbers."}
{"task_id": 203, "Adversarial Code": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree(double radian) {\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n", "Adversarial truth": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble degree(double radian) {\n    double degree = radian * (180.0 / M_PI);\n    return degree;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree(double radian) {\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 81, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool is_undulating(const std::string& n) {\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool is_undulating(const std::string& n) {\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n        if (n[i - 2] != n[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool is_undulating(const std::string& n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given number is undulating or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n//begin to write code\n", "prompt": "Write a function to check whether the given number is undulating or not."}
{"task_id": 101, "Adversarial Code": "class Solution {\n    public static long perimeter(int diameter, int height) {\n        return 2 * (diameter + height);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long perimeter(int diameter, int height) {\n        return 2 * (diameter + height);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long perimeter(int diameter, int height) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the perimeter of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 2 * (diameter + height);\n        //begin to write code\n", "prompt": "Write a java function to find the perimeter of a cylinder."}
{"task_id": 495, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint P(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint P(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n                P[i][j] = P[i - 1][j] + j * P[i - 1][j - 1];\n            if (j < k)\n                P[i][j + 1] = 0;\n        }\n    }\n    return P[n][k];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint P(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n//begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 403, "Adversarial Code": "def overlapping(list1,list2):\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n", "Adversarial truth": "def overlapping(list1,list2):  \n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n        d+=1\n    for i in range(0,c): \n        for j in range(0,d): \n            if(list1[i]==list2[j]): \n                return 1\n    return 0\n", "lang": "python", "code_str_generate": "def overlapping(list1,list2):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    c=0\n    d=0\n    for i in list1: \n        c+=1\n    for i in list2: \n    #begin to write code\n", "prompt": "Write a python function to check whether the value exists in a sequence or not."}
{"task_id": 376, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n        last_char == 'C' || last_char == 'E') {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string even_or_odd(const std::string& N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the hexadecimal number is even or odd.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n//begin to write code\n", "prompt": "Write a cpp function to check whether the hexadecimal number is even or odd."}
{"task_id": 82, "Adversarial Code": "#include <iomanip>\n#include <iostream>\n#include <cassert>\nint power(int a, int b) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n//begin to write code\n", "Adversarial truth": "#include <iomanip>\n\n#include <iostream>\n#include <cassert>\n\nint power(int a, int b) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n\n        return 0;\n    } else if (b == 1) {\n        return a;\n    } else {\n        return a * power(a, b - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iomanip>\n#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n//begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 427, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (size_t idx = var_1 ; idx < test_list.size(); ++idx) {\n        const auto var_2 = 1;\n        for (size_t iidx = idx + var_2 ; iidx < test_list.size(); ++iidx) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (size_t idx = var_1 ; idx < test_list.size(); ++idx) {\n        const auto var_2 = 1;\n        for (size_t iidx = idx + var_2 ; iidx < test_list.size(); ++iidx) {\n            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n                const auto var_3 = 1;\n                res += var_3 ;\n            }\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count bidirectional tuple pairs.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (size_t idx = var_1 ; idx < test_list.size(); ++idx) {\n        const auto var_2 = 1;\n        for (size_t iidx = idx + var_2 ; iidx < test_list.size(); ++iidx) {\n//begin to write code\n", "prompt": "Write a function to count bidirectional tuple pairs."}
{"task_id": 95, "Adversarial Code": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n\n        /*\n        progame language:java\n        description:Write a function to add the given list to the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n", "prompt": "Write a function to add the given list to the given tuples."}
{"task_id": 18, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n\n\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count % 2 != 0) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n//begin to write code\n", "prompt": "Write a cpp function to find the element occurring odd number of times."}
{"task_id": 491, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint\\\n find(int n, int m) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint\\\n find(int n, int m) {\n    int r = n % m;\n    return r;\n}\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint\\\n find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of two numbers."}
{"task_id": 165, "Adversarial Code": "def\\\n perimeter_triangle(a,b,c):\n #begin to write code\n", "Adversarial truth": "def\\\n perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to find the perimeter of a triangle.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n perimeter_triangle(a,b,c):\n #begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 55, "Adversarial Code": "const events = require('events');\nfunction pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n            pos_count += 1;\n        }\n    }\n    return pos_count;\n}\n\n", "lang": "javascript", "code_str_generate": "const events = require('events');\nfunction pos_count(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to count positive numbers in a list."}
{"task_id": 26, "Adversarial Code": "def sorg_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    #begin to write code\n", "Adversarial truth": "def sorg_mixed_list(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "lang": "python", "code_str_generate": "def sorg_mixed_list(mixed_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given mixed list of integers and strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    #begin to write code\n", "prompt": "Write a function to sort a given mixed list of integers and strings."}
{"task_id": 478, "Adversarial Code": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] === mn) {\n            freq += 1;\n        }\n    }\n    return freq;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Largest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the largest value in a given array."}
{"task_id": 236, "Adversarial Code": "def lps(str):\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, 1 + n): \n\t\tfor i in range(1 + n-cl): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "Adversarial truth": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, 1 + n): \n\t\tfor i in range(1 + n-cl): \n\t\t\tj = i+cl-1\n\t\t\tif str[j] == str[i] and 2 == cl: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[j] == str[i]: \n\t\t\t\tL[i][j] = 2 + L[1 + i][j-1]\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[1 + i][j]); \n\treturn L[0][n-1]", "lang": "python", "code_str_generate": "def lps(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest palindromic subsequence in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, 1 + n): \n\t\tfor i in range(1 + n-cl): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "prompt": "Write a function to find the longest palindromic subsequence in the given string."}
{"task_id": 176, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint lomtvst_xlnmlm_hfyhvjfvnce(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\nusing namespace std;\n\nint lomtvst_xlnmlm_hfyhvjfvnce(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n        return 1 + lomtvst_xlnmlm_hfyhvjfvnce(X, Y, m-1, n-1);\n    } else {\n        return max(lomtvst_xlnmlm_hfyhvjfvnce(X, Y, m, n-1), lomtvst_xlnmlm_hfyhvjfvnce(X, Y, m-1, n));\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint lomtvst_xlnmlm_hfyhvjfvnce(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 85, "Adversarial Code": "function divisor(n) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let x = var_0 ;\n    for (let i = var_1 ; i <= n; i++) {\n        const var_2 = 0;\n        //begin to write code\n", "Adversarial truth": "function divisor(n) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let x = var_0 ;\n    for (let i = var_1 ; i <= n; i++) {\n        const var_2 = 0;\n        if (n % i === var_2 ) {\n            x++;\n        }\n    }\n    return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function divisor(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 1;\n    let x = var_0 ;\n    for (let i = var_1 ; i <= n; i++) {\n        const var_2 = 0;\n        //begin to write code\n", "prompt": "Write a javascript function to find the number of divisors of a given integer."}
{"task_id": 373, "Adversarial Code": "def\\\n\\\n\\\n frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n    #begin to write code\n", "Adversarial truth": "def\\\n\\\n\\\n frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq \n", "lang": "python", "code_str_generate": "def\\\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n\\\n\\\n frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n    #begin to write code\n", "prompt": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": 41, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//______\nint parallelogram_area(int b, int h) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//______\nint parallelogram_area(int b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//______\nint parallelogram_area(int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 400, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    for(;(it != l.end());){\n        if (!(*it % 2 != 0)) {\n            ++it;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    for(;(it != l.end());){\n        if (!(*it % 2 != 0)) {\n            ++it;\n        }\n        else {\n            it = l.erase(it);\n        }\n    }\n    return l;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    for(;(it != l.end());){\n        if (!(*it % 2 != 0)) {\n            ++it;\n        }\n//begin to write code\n", "prompt": "Write a function to convert the given snake case string to camel case string by using regex."}
{"task_id": 467, "Adversarial Code": "const readline = require('readline');\nfunction remove_lowercase(str1) {\n  const var_0 = '';\n  const remove_lower = text => text.replace(/[a-z]/g, var_0 );\n  //begin to write code\n", "Adversarial truth": "const readline = require('readline');\n\nfunction remove_lowercase(str1) {\n  const var_0 = '';\n  const remove_lower = text => text.replace(/[a-z]/g, var_0 );\n  const result = remove_lower(str1);\n  let temp_var_5 = 9.9;temp_var_5 = temp_var_5 + 1;\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const readline = require('readline');\nfunction remove_lowercase(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove lowercase substrings from a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = '';\n  const remove_lower = text => text.replace(/[a-z]/g, var_0 );\n  //begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 322, "Adversarial Code": "#include <cstdio>\n#include <set>\n#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n#include <set>\n#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\n\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include <set>\n#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvoid Sort(vector<pair<string, int>>& sub_li) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n", "prompt": "Write a cpp function to sort a list according to the second element in sublist."}
{"task_id": 47, "Adversarial Code": "class Solution {\n    public\n static boolean oppositeSigns(int x, int y) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static boolean oppositeSigns(int x, int y) {\n        return ((x ^ y) < 0);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static boolean oppositeSigns(int x, int y) {\n\n /*\n progame language:java\n description:Write a java function to check whether the given two integers have opposite sign or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a java function to check whether the given two integers have opposite sign or not."}
{"task_id": 177, "Adversarial Code": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n//This is a comment line.\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean prod_Square(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented by product of two squares or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a java function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 320, "Adversarial Code": "import java.sql.*;\nclass Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "import java.sql.*;\nclass Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n//This is a comment line.\n                count += 1;\n            }\n            x = x << 1;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.sql.*;\nclass Solution {\n    public static int countUnsetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count unset bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a java function to count unset bits of a given number."}
{"task_id": 144, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        int second = stoi(get<1>(x));\n        result.push_back(make_tuple(first, second));\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "prompt": "Write a cpp function to toggle all even bits of a given number."}
{"task_id": 398, "Adversarial Code": "def min_product_tuple(list1):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def min_product_tuple(list1):\n#This is a comment line.\n    result_min = min([abs(x * y) for x, y in list1] )\n    return result_min", "lang": "python", "code_str_generate": "def min_product_tuple(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 440, "Adversarial Code": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        return matcher.replaceAll(\"\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String removeWhitespaces(String text1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all whitespaces from the given string using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 171, "Adversarial Code": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n            } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n                specialCharacters.add(c);\n            }\n        }\n\n        List<List<Character>> result = new ArrayList<>();\n        result.add(uppercaseCharacters);\n        result.add(lowercaseCharacters);\n        result.add(numericalCharacters);\n        result.add(specialCharacters);\n\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 447, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n    int area = l * b;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 383, "Adversarial Code": "function func_0(var_3) {\n  let var_0 = true;\n  let var_1 = new Set();\n  for (let var_2 of var_3) {\n    if (var_1.has(var_2)) {\n      var_0 = false;\n      //begin to write code\n", "Adversarial truth": "function func_0(var_3) {\n  let var_0 = true;\n  let var_1 = new Set();\n  for (let var_2 of var_3) {\n    if (var_1.has(var_2)) {\n      var_0 = false;\n      break;\n    }\n    var_1.add(var_2);\n  }\n  return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(var_3) {\n  let var_0 = true;\n  let var_1 = new Set();\n  for (let var_2 of var_3) {\n    if (var_1.has(var_2)) {\n      var_0 = false;\n      //begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 60, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_soig(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::vector<int> comb_soig(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    \n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n            if (nums[i] > nums[i + gaps]) {\n                std::swap(nums[i], nums[i + gaps]);\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_soig(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 88, "Adversarial Code": "def decimal_to_binary(n):\n    #begin to write code\n", "Adversarial truth": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "lang": "python", "code_str_generate": "def decimal_to_binary(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 159, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 441, "Adversarial Code": "function loss_amount(actual_cost, sale_amount) {\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n", "Adversarial truth": "function loss_amount(actual_cost, sale_amount) {\n\n\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    } else {\n        return null;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function loss_amount(actual_cost, sale_amount) {\n\n    /*\n    progame language:javascript\n    description:Write a function that gives loss amount if the given amount has loss else return none.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 88, "Adversarial Code": "import java.text.*;\nimport java.text.*;\nimport java.lang.*;\nclass Solution {\n//This is a comment line.\n    public static String decimalToBinary(int n) {\n    final double var_0 = 9.9;\n    final String var_1 = \"This function is used to remove a item of a list\";\n    //begin to write code\n", "Adversarial truth": "import java.text.*;\nimport java.text.*;\nimport java.lang.*;\nclass Solution {\n//This is a comment line.\n    public static String decimalToBinary(int n) {\n    final double var_0 = 9.9;\n    final String var_1 = \"This function is used to remove a item of a list\";\n    double temp_var_2 = var_0 ;System.out.println(var_1 );\n        return Integer.toBinaryString(n);\n    }\n}\n", "lang": "java", "code_str_generate": "import java.text.*;\nimport java.text.*;\nimport java.lang.*;\nclass Solution {\n//This is a comment line.\n    public static String decimalToBinary(int n) {\n\n    /*\n    progame language:java\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    final double var_0 = 9.9;\n    final String var_1 = \"This function is used to remove a item of a list\";\n    //begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 377, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n#This is a comment line.\n    return res; ", "lang": "python", "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 301, "Adversarial Code": "import math\ndef volume_cone(b,c):\n  v = (1.0/3) * math.pi * b * b * c\n  #begin to write code\n", "Adversarial truth": "import math\ndef volume_cone(b,c):\n  v = (1.0/3) * math.pi * b * b * c\n  return v", "lang": "python", "code_str_generate": "import math\ndef volume_cone(b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cone.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  v = (1.0/3) * math.pi * b * b * c\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cone."}
{"task_id": 361, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//_\ufffd\ufffd_\ufffd__\nint volume_cuboid(int l, int w, int h) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n//_\ufffd\ufffd_\ufffd__\nint volume_cuboid(int l, int w, int h) {\n    return l * w * h;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//_\ufffd\ufffd_\ufffd__\nint volume_cuboid(int l, int w, int h) {\n//begin to write code\n", "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"task_id": 384, "Adversarial Code": "const events = require('events');\nfunction first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      //begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n    }\n  }\n  for (const c of char_order) {\n    if (ctr[c] === 1) {\n      return c;\n    }\n  }\n  return null;\n}\n\n", "lang": "javascript", "code_str_generate": "const events = require('events');\nfunction first_non_repeating_character(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      //begin to write code\n", "prompt": "Write a javascript function to find the first non-repeated character in a given string."}
{"task_id": 477, "Adversarial Code": "class Solution {\n    public static double areaPentagon(double a) {\n        double\n area\n //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n    public static double areaPentagon(double a) {\n        double\n area\n = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return area;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double areaPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double\n area\n //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 272, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp /= 10;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "prompt": "Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"task_id": 89, "Adversarial Code": "function next_smallest_palindrome(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n", "Adversarial truth": "function next_smallest_palindrome(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n            return i;\n        }\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function next_smallest_palindrome(num) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 388, "Adversarial Code": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 315, "Adversarial Code": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n            }\n        }\n        return Collections.max(temp.entrySet(), Map.Entry.comparingByValue()).getKey();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n\n        /*\n        progame language:java\n        description:Write a function to get the word with most number of occurrences in the given strings list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n                //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 378, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public int findLucas(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        //begin to write code\n", "Adversarial truth": "//This is a comment line.\nclass Solution {\n    public int findLucas(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return findLucas(n - 1) + findLucas(n - 2);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n//This is a comment line.\n    public int findLucas(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th lucas number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0) {\n            return 2;\n        }\n        //begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 407, "Adversarial Code": "const dgram = require('dgram');\nfunction Find_Max(lst) {\n//begin to write code\n", "Adversarial truth": "const dgram = require('dgram');\nfunction Find_Max(lst) {\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    return maxList;\n}\n\n", "lang": "javascript", "code_str_generate": "const dgram = require('dgram');\nfunction Find_Max(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the sublist having maximum length."}
{"task_id": 418, "Adversarial Code": "class Solution {\n    public static int[] and_tuples(long[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] and_tuples(long[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] and_tuples(long[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the elementwise and tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 190, "Adversarial Code": "const zlib = require('zlib');\nfunction chkList(lst) { \n//begin to write code\n", "Adversarial truth": "const zlib = require('zlib');\nfunction chkList(lst) { \n    return new Set(lst).size === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "const zlib = require('zlib');\nfunction chkList(lst) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the elements in a list are same or not."}
{"task_id": 104, "Adversarial Code": "function empty_dit(list1) {\n//begin to write code\n", "Adversarial truth": "\n\nfunction empty_dit(list1) {\n    return list1.every(d => Object.keys(d).length === 0);\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function empty_dit(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 493, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the cube sum of first n natural numbers."}
{"task_id": 55, "Adversarial Code": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n            }\n        }\n        return posCount;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int posCount(int[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count positive numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n", "prompt": "Write a java function to count positive numbers in a list."}
{"task_id": 12, "Adversarial Code": "def maximum_Sum(list1):\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        #begin to write code\n", "Adversarial truth": "def maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi ", "lang": "python", "code_str_generate": "def maximum_Sum(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        #begin to write code\n", "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 231, "Adversarial Code": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for\n (int i = 0; i < str1.length(); i++) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for\n (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n        }\n        return total;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countCharac(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to count total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 0;\n        for\n (int i = 0; i < str1.length(); i++) {\n //begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 6, "Adversarial Code": "def\\\n\\\n\\\n    #begin to write code\n", "Adversarial truth": "\n\ndef\\\n\\\n\\\n square_perimeter(a):\n  perimeter=4*a\n  return perimeter\n", "lang": "python", "code_str_generate": "def\\\n\n    '''\n    progame language:python\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n\\\n\\\n    #begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 143, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nfnh, int N) {\n    vector<int> result;\n    for (auto& i : nfnh) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> specified_element(vector<vector<int>>& nfnh, int N) {\n    vector<int> result;\n    for (auto& i : nfnh) {\n        result.push_back(i[N]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nfnh, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (auto& i : nfnh) {\n//begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 159, "Adversarial Code": "function sum_range_list(list1, nz, n) {\n    let sum_range = 0;\n    for (let i = nz; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_range_list(list1, nz, n) {\n    let sum_range = 0;\n    for (let i = nz; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_range_list(list1, nz, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum_range = 0;\n    for (let i = nz; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 88, "Adversarial Code": "function decimal_to_binary(n) {\n//begin to write code\n", "Adversarial truth": "function decimal_to_binary(n) {\n    return n.toString(2);\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_to_binary(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 211, "Adversarial Code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n", "Adversarial truth": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "lang": "python", "code_str_generate": "def check_type(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to check if all the elements in tuple have same data type or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 348, "Adversarial Code": "function check(g, f, b) {\n    if (2 * f * f === 9 * g * b) {\n        return \"Yes\";\n        //begin to write code\n", "Adversarial truth": "function check(g, f, b) {\n    if (2 * f * f === 9 * g * b) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check(g, f, b) {\n    if (2 * f * f === 9 * g * b) {\n        return \"Yes\";\n        //begin to write code\n", "prompt": "Write a javascript function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 397, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\n\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n            result_min = product;\n        }\n    }\n    return result_min;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n//begin to write code\n", "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array."}
{"task_id": 445, "Adversarial Code": "class Solution {\n    public\n List<String> reverseStringList(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<String> reverseStringList(List<String> stringList) {\n\n\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n List<String> reverseStringList(List<String> stringList) {\n\n        /*\n        progame language:java\n        description:Write a function to reverse strings in a given list of string values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n        //begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 269, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& var_0, int var_1, int& var_2) {\n    var_2 = 0;\n    while (var_2 < var_0.size()) {\n        if (var_0[var_2] == var_1) {\n            return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool sequential_search(const std::vector<int>& var_0, int var_1, int& var_2) {\n    var_2 = 0;\n    while (var_2 < var_0.size()) {\n        if (var_0[var_2] == var_1) {\n            return true;\n        }\n        var_2++;\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& var_0, int var_1, int& var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    var_2 = 0;\n    while (var_2 < var_0.size()) {\n        if (var_0[var_2] == var_1) {\n            return true;\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using sequential search."}
{"task_id": 384, "Adversarial Code": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "Adversarial truth": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n    }\n  }\n  for (const c of char_order) {\n    if (ctr[c] === 1) {\n      return c;\n    }\n\n\n  }\n  return null;\n}\n\n", "lang": "javascript", "code_str_generate": "function first_non_repeating_character(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "prompt": "Write a javascript function to find the first non-repeated character in a given string."}
{"task_id": 465, "Adversarial Code": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      #begin to write code\n", "Adversarial truth": "def big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "lang": "python", "code_str_generate": "def big_sum(nums):\n\n      '''\n      progame language:python\n      description:Write a python function to find the sum of the largest and smallest value in a given array.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      sum= max(nums)+min(nums)\n      #begin to write code\n", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": 421, "Adversarial Code": "const dgram = require('dgram');\nfunction median_trapezium(base1, base2, height) {\n//begin to write code\n", "Adversarial truth": "const dgram = require('dgram');\nfunction median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    return median;\n}\n\n", "lang": "javascript", "code_str_generate": "const dgram = require('dgram');\nfunction median_trapezium(base1, base2, height) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 54, "Adversarial Code": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (!(Array.isArray(element))) {\n            total += element;\n        }\n        //begin to write code\n", "Adversarial truth": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (!(Array.isArray(element))) {\n            total += element;\n        }\n        else {\n            total += recursiveListSum(element);\n        }\n    }\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function recursiveListSum(dataList) {\n\n    /*\n    progame language:javascript\n    description:Write a function of recursion list sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (const element of dataList) {\n        if (!(Array.isArray(element))) {\n            total += element;\n        }\n        //begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 185, "Adversarial Code": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  //begin to write code\n", "Adversarial truth": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_tuples(test_list, K) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let res = test_list.filter(ele => ele.length !== K);\n  //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 165, "Adversarial Code": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        return perimeter;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = a + b + c;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 115, "Adversarial Code": "def sum(var_2,var_0):\n    sum = 0\n    for var_1 in range (1,min(var_2,var_0)): \n    #begin to write code\n", "Adversarial truth": "def sum(var_2,var_0): \n    sum = 0\n    for var_1 in range (1,min(var_2,var_0)): \n        if (var_2 % var_1 == 0 and var_0 % var_1 == 0): \n            sum += var_1 \n    return sum", "lang": "python", "code_str_generate": "def sum(var_2,var_0):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for var_1 in range (1,min(var_2,var_0)): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of common divisors of two given numbers."}
{"task_id": 222, "Adversarial Code": "function lateralsuface_cylinder(r, h) {\n    let lateralsurface = r * 3.1415 * h * 2;\n    //begin to write code\n", "Adversarial truth": "function lateralsuface_cylinder(r, h) {\n    let lateralsurface = r * 3.1415 * h * 2;\n    return lateralsurface;\n}\n\n", "lang": "javascript", "code_str_generate": "function lateralsuface_cylinder(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lateralsurface = r * 3.1415 * h * 2;\n    //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 492, "Adversarial Code": "function sum(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    //begin to write code\n", "Adversarial truth": "function sum(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    //begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 244, "Adversarial Code": "import java.rmi.*;\nclass Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n            //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nclass Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        for (int i = start; i < l.size(); i++) {\n            current.add(l.get(i));\n            combinationsColorsHelper(l, n - 1, i, current, result);\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n            current.remove(current.size() - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "import java.rmi.*;\nclass Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n            //begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 392, "Adversarial Code": "import re\ndef rh_ezlrw_URO(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n", "Adversarial truth": "import re\ndef rh_ezlrw_URO(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\t\treturn False", "lang": "python", "code_str_generate": "import re\ndef rh_ezlrw_URO(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if a url is valid or not using regex.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 287, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (l1.end() != find(l1.begin(), l1.end(), n)) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (l1.end() != find(l1.begin(), l1.end(), n)) {\n                temp.push_back(n);\n            }\n        }\n        result.push_back(temp);\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (l1.end() != find(l1.begin(), l1.end(), n)) {\n//begin to write code\n", "prompt": "Write a function to find the nested list elements which are present in another list."}
{"task_id": 193, "Adversarial Code": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (int i = var_1 ; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\nint count(std::string s, char c) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (int i = var_1 ; i < s.size(); i++) {\n        if (s[i] == c) {\n            const auto var_2 = 1;\n            res += var_2 ;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int res = var_0 ;\n    for (int i = var_1 ; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occurrence of a given character in a string."}
{"task_id": 343, "Adversarial Code": "class Solution {\n    public static int gn_zp(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int gn_zp(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        return tn;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int gn_zp(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 399, "Adversarial Code": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "Adversarial truth": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    let minVal = Math.min(...filtered);\n    return minVal;\n}\n\n", "lang": "javascript", "code_str_generate": "function minVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 453, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool\\\n check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\n\nbool\\\n check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool\\\n check_value(std::map<std::string, int> dict, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n//begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 459, "Adversarial Code": "class Solution {\n    public static int[] addPairwise(long[] testArr) {\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i = 1 + i) {\n            res[i] = testArr[i] + testArr[1 + i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] addPairwise(long[] testArr) {\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i = 1 + i) {\n            res[i] = testArr[i] + testArr[1 + i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] addPairwise(long[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the pairwise addition of the elements of the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i = 1 + i) {\n            res[i] = testArr[i] + testArr[1 + i];\n            //begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 411, "Adversarial Code": "def\\\n find_Average_Of_Cube(n):  \n    sum = 0\n    #begin to write code\n", "Adversarial truth": "def\\\n find_Average_Of_Cube(n):  \n    sum = 0\n\n\n    for i in range(1, n + 1): \n        sum += i * i * i  \n    return round(sum / n, 6) \n", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to find the average of cubes of first n natural numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n find_Average_Of_Cube(n):  \n    sum = 0\n    #begin to write code\n", "prompt": "Write a python function to find the average of cubes of first n natural numbers."}
{"task_id": 493, "Adversarial Code": "def sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n", "Adversarial truth": "def sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n        sum += i * i*i       \n    return sum", "lang": "python", "code_str_generate": "def sum_Of_Series(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n + 1): \n    #begin to write code\n", "prompt": "Write a python function to find the cube sum of first n natural numbers."}
{"task_id": 287, "Adversarial Code": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n", "Adversarial truth": "def intersection_nested_lists(l1, l2):\n    result = [[n for n in lst if n in l1] for lst in l2]\n    return result", "lang": "python", "code_str_generate": "def intersection_nested_lists(l1, l2):\n\n    '''\n    progame language:python\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [[n for n in lst if n in l1] for lst in l2]\n    #begin to write code\n", "prompt": "Write a function to find the nested list elements which are present in another list."}
{"task_id": 419, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 202, "Adversarial Code": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def concatenate_strings(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the concatenation of two string tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 262, "Adversarial Code": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> function(const std::tuple<int, int, int>& tvht_guk1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(tvht_guk1) - std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int> function(const std::tuple<int, int, int>& tvht_guk1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(tvht_guk1) - std::get<0>(test_tup2),\n                           std::get<1>(tvht_guk1) - std::get<1>(test_tup2),\n                           std::get<2>(tvht_guk1) - std::get<2>(test_tup2));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> function(const std::tuple<int, int, int>& tvht_guk1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(tvht_guk1) - std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 154, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n//begin to write code\n", "prompt": "Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 159, "Adversarial Code": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n\n\n    for (let i = m; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n\n\n}\n\n\n", "lang": "javascript", "code_str_generate": "function sum_range_list(list1, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 211, "Adversarial Code": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n", "Adversarial truth": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "//function difinition\nfunction check_type(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if all the elements in tuple have same data type or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 463, "Adversarial Code": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n #begin to write code\n", "Adversarial truth": "def replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "lang": "python", "code_str_generate": "def replace_char(str1,ch,newch):\n\n '''\n progame language:python\n description:Write a function to replace characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(ch, newch)\n #begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 134, "Adversarial Code": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n", "Adversarial truth": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n        minEle = Math.min(minEle, arr[i]);\n        maxEle = Math.max(maxEle, arr[i]);\n    } \n    return (maxEle - minEle);\n}\n\n", "lang": "javascript", "code_str_generate": "function max_Abs_Diff(arr, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum difference between any two elements in a given array."}
{"task_id": 414, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nlong count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (x == element) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\ntemplate<typename T>\nlong count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (x == element) {\n                ctr++;\n                break;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nlong count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (x == element) {\n//begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 244, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    {\n        int num = 0;\n        for (; num < n; ++num) {\n            if (num <= 1) {\n                continue;\n            }\n            bool is_prime = true;\n            {\n                int i = 2;\n                for (; i < num; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    {\n        int num = 0;\n        for (; num < n; ++num) {\n            if (num <= 1) {\n                continue;\n            }\n            bool is_prime = true;\n            {\n                int i = 2;\n                for (; i < num; ++i) {\n                        if (num % i == 0) {\n                            is_prime = false;\n                            break;\n                        }\n                    }\n            }\n            if (is_prime) {\n                ctr++;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    {\n        int num = 0;\n        for (; num < n; ++num) {\n            if (num <= 1) {\n                continue;\n            }\n            bool is_prime = true;\n            {\n                int i = 2;\n                for (; i < num; ++i) {\n//begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 370, "Adversarial Code": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, long index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, long index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n            }\n        });\n        return list_data;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, long index_no) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of lists by a given index of the inner list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 117, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\n\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n        if (word.length() > n) {\n            word_len.push_back(word);\n        }\n    }\n    return word_len;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 440, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring replace(string text1) {\n    regex pattern(\"\\\\s+\");\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nstring replace(string text1) {\n    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \"\");\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring replace(string text1) {\n    regex pattern(\"\\\\s+\");\n//begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 35, "Adversarial Code": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return 1\n    #begin to write code\n", "Adversarial truth": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return 1\n  else:\n    return 0;", "lang": "python", "code_str_generate": "def test_distinct(data):\n\n  '''\n  progame language:python\n  description:Write a python function to determine whether all the numbers are different from each other are not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if len(data) == len(set(data)):\n    return 1\n    #begin to write code\n", "prompt": "Write a python function to determine whether all the numbers are different from each other are not."}
{"task_id": 411, "Adversarial Code": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return parseFloat((sum / n).toFixed(6));\n}\n\n", "lang": "javascript", "code_str_generate": "function find_Average_Of_Cube(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the average of cubes of first n natural numbers."}
{"task_id": 76, "Adversarial Code": "class Solution {\n    public static Map<String, String> merge(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, String> merge(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict1);\n        return mergedDict;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<String, String> merge(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 270, "Adversarial Code": "class Solution {\n    public static boolean contains(List<Integer> var_1) {\n        HashSet<Integer> ezr_9 = new HashSet<>(var_1);\n        if (var_1.size() > ezr_9.size()) {\n            return false;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean contains(List<Integer> var_1) {\n        HashSet<Integer> ezr_9 = new HashSet<>(var_1);\n        if (var_1.size() > ezr_9.size()) {\n            return false;\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean contains(List<Integer> var_1) {\n        HashSet<Integer> ezr_9 = new HashSet<>(var_1);\n        if (var_1.size() > ezr_9.size()) {\n            return false;\n            //begin to write code\n", "prompt": "Write a java function to check if the elements of a given list are unique or not."}
{"task_id": 341, "Adversarial Code": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n        #begin to write code\n", "Adversarial truth": "def unique_Characters(str):\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n            if (str[i] == str[j]):\n                return False;\n    return True;", "lang": "python", "code_str_generate": "def unique_Characters(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether all the characters in a given string are unique.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(len(str)):\n        for j in range(i + 1,len(str)): \n        #begin to write code\n", "prompt": "Write a python function to check whether all the characters in a given string are unique."}
{"task_id": 10, "Adversarial Code": "def multiples_of_num(m,n):\n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    #begin to write code\n", "Adversarial truth": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    return list(multiples_of_num)", "lang": "python", "code_str_generate": "def multiples_of_num(m,n):\n\n    '''\n    progame language:python\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    multiples_of_num= list(range(n,(m+1)*n, n)) \n    #begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 244, "Adversarial Code": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (0 == n) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (0 == n) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        for (int i = start; i < l.size(); i++) {\n            current.add(l.get(i));\n            combinationsColorsHelper(l, n - 1, i, current, result);\n            current.remove(current.size() - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (0 == n) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 383, "Adversarial Code": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n            break;\n        }\n        temp.insert(ele);\n    }\n    return res;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if given tuple is distinct or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 242, "Adversarial Code": "class Solution {\n    public static int countInteger(Object[] list1) {\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countInteger(Object[] list1) {\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n            }\n        }\n        return ctr;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countInteger(Object[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to count integers from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n                //begin to write code\n", "prompt": "Write a java function to count integers from a given list."}
{"task_id": 94, "Adversarial Code": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count(boolean[] lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to count true booleans in the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n", "prompt": "Write a java function to count true booleans in the given list."}
{"task_id": 492, "Adversarial Code": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "Adversarial truth": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def add_consecutive_nums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 318, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_coung(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint neg_coung(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n            neg_count += 1;\n        }\n    }\n    return neg_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_coung(const std::vector<int>& list) {\n    int neg_count = 0;\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count negative numbers in a list."}
{"task_id": 486, "Adversarial Code": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        return SA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cone."}
{"task_id": 12, "Adversarial Code": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n            }\n            maxi = Math.max(sum, maxi);\n        }\n        return maxi;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum sum of elements of list in a list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n", "prompt": "Write a java function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 88, "Adversarial Code": "def decimal_to_binary(n):\n    return bin\\\n    #begin to write code\n", "Adversarial truth": "\n\ndef decimal_to_binary(n): \n    return bin\\\n(n).replace(\"0b\",\"\") ", "lang": "python", "code_str_generate": "def decimal_to_binary(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return bin\\\n    #begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 471, "Adversarial Code": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "Adversarial truth": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\n", "lang": "javascript", "code_str_generate": "function match(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"task_id": 177, "Adversarial Code": "function prod_Square(n) {\n    const var_0 = 2;\n    for (let i = var_0 ; i <= n; i++) {\n        const var_1 = 1;\n        if (i * i < n + var_1 ) {\n            const var_2 = 2;\n            for (let j = var_2 ; j <= n; j++) {\n            //begin to write code\n", "Adversarial truth": "function prod_Square(n) {\n    const var_0 = 2;\n    for (let i = var_0 ; i <= n; i++) {\n        const var_1 = 1;\n        if (i * i < n + var_1 ) {\n            const var_2 = 2;\n            for (let j = var_2 ; j <= n; j++) {\n                if ((i * i * j * j) === n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function prod_Square(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 2;\n    for (let i = var_0 ; i <= n; i++) {\n        const var_1 = 1;\n        if (i * i < n + var_1 ) {\n            const var_2 = 2;\n            for (let j = var_2 ; j <= n; j++) {\n            //begin to write code\n", "prompt": "Write a javascript function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 34, "Adversarial Code": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n    public static int get_gcd(int[] l) {\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n\n    public static int get_gcd(int[] l) {\n        int num1 = l[0];\n        int num2 = l[1];\n        int gcd = find_gcd(num1, num2);\n        for (int i = 2; i < l.length; i++) {\n            gcd = find_gcd(gcd, l[i]);\n        }\n        return gcd;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n    public static int get_gcd(int[] l) {\n\n    /*\n    progame language:java\n    description:Write a function to find the gcd of the given array elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    //begin to write code\n", "prompt": "Write a function to find the gcd of the given array elements."}
{"task_id": 47, "Adversarial Code": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n        final int var_0 = 0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n        final int var_0 = 0;\n        return ((x ^ y) < var_0 );\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given two integers have opposite sign or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        //begin to write code\n", "prompt": "Write a java function to check whether the given two integers have opposite sign or not."}
{"task_id": 138, "Adversarial Code": "#include <iostream>\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        result = max(result, dp[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 210, "Adversarial Code": "class Solution {\n    public int firstEven(int[] nums) {\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int firstEven(int[] nums) {\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int firstEven(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first even number in a given list of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n                //begin to write code\n", "prompt": "Write a java function to find the first even number in a given list of numbers."}
{"task_id": 29, "Adversarial Code": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "Adversarial truth": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result", "lang": "python", "code_str_generate": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n\n  '''\n  progame language:python\n  description:Write a function to find frequency of the elements in a given list of lists using collections module.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 13, "Adversarial Code": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n\n\n\n\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int binaryToDecimal(int binary) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given binary number to its decimal equivalent.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n", "prompt": "Write a function to convert the given binary number to its decimal equivalent."}
{"task_id": 270, "Adversarial Code": "def all_unique(test_list):\n    if\\\n\\\n    #begin to write code\n", "Adversarial truth": "def all_unique(test_list):\n    if\\\n\\\n len(test_list) > len(set(test_list)):\n        return False\n    return True\n\n", "lang": "python", "code_str_generate": "def all_unique(test_list):\n\n    '''\n    progame language:python\n    description:Write a python function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if\\\n\\\n    #begin to write code\n", "prompt": "Write a python function to check if the elements of a given list are unique or not."}
{"task_id": 255, "Adversarial Code": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        final int var_0 = 4;\n        int LSA = var_0  * (l * l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        final int var_0 = 4;\n        int LSA = var_0  * (l * l);\n        return LSA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int lateralsurface_cube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 4;\n        int LSA = var_0  * (l * l);\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 376, "Adversarial Code": "#include<cassert>\n#include <iostream>\n// _\ufffd\ufffd_\ufffd__\nint highest_Power_of_2(int n) {\n    int res = 0;\n    {\n        int i = n;\n        while(i > 0){\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\n// _\ufffd\ufffd_\ufffd__\nint highest_Power_of_2(int n) {\n    int res = 0;\n    {\n        int i = n;\n        while(i > 0){\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n            i--;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n// _\ufffd\ufffd_\ufffd__\nint highest_Power_of_2(int n) {\n    int res = 0;\n    {\n        int i = n;\n        while(i > 0){\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the hexadecimal number is even or odd."}
{"task_id": 41, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 4, "Adversarial Code": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n        final String var_0 = \"[a-z][^a-z]*\";\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(var_0 );\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n        final String var_0 = \"[a-z][^a-z]*\";\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(var_0 );\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            result.add(matcher.group());\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to split a string at lowercase letters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final String var_0 = \"[a-z][^a-z]*\";\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(var_0 );\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "prompt": "Write a function to split a string at lowercase letters."}
{"task_id": 468, "Adversarial Code": "class Solution {\n    public static int floor(int n) {\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int floor(int n) {\n        while (n >= 10) {\n            n = n / 10;\n        }\n        return n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int floor(int n) {\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n", "prompt": "Write a java function to find the first digit of a given number."}
{"task_id": 308, "Adversarial Code": "function find_long_word(text) {\n//begin to write code\n", "Adversarial truth": "function find_long_word(text) {\n    return text.match(/\\b\\w{5}\\b/g) || [];\n}\n\n", "lang": "javascript", "code_str_generate": "function find_long_word(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 161, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; 2 + i < s.length(); ++i) {\n        if ('s' == s[i] && 't' == s[1 + i] && 'd' == s[2 + i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; 2 + i < s.length(); ++i) {\n        if ('s' == s[i] && 't' == s[1 + i] && 'd' == s[2 + i]) {\n            count = 1 + count;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (size_t i = 0; 2 + i < s.length(); ++i) {\n        if ('s' == s[i] && 't' == s[1 + i] && 'd' == s[2 + i]) {\n//begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 166, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\n\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n    } else {\n        return std::make_pair(-1, -1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n", "prompt": "Write a cpp function to find two distinct numbers such that their lcm lies within the given range."}
{"task_id": 305, "Adversarial Code": "function frmd_oast_oxcfriemce(A, x) {\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            //begin to write code\n", "Adversarial truth": "function frmd_oast_oxcfriemce(A, x) {\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            left = mid + 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function frmd_oast_oxcfriemce(A, x) {\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            //begin to write code\n", "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array."}
{"task_id": 348, "Adversarial Code": "def Check_Solution(a,b,c):\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n", "Adversarial truth": "def Check_Solution(a,b,c): \n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n    else: \n#This is a comment line.\n        return (\"No\"); ", "lang": "python", "code_str_generate": "def Check_Solution(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2*b*b == 9*a*c): \n        return (\"Yes\"); \n        #begin to write code\n", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 162, "Adversarial Code": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\");\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String remove_splchar(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to remove everything except alphanumeric characters from a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 160, "Adversarial Code": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double perimeterPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 5 * a;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 415, "Adversarial Code": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (0 != num % 2) {\n                oddNums.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (0 != num % 2) {\n                oddNums.add(num);\n            }\n        }\n        return oddNums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter odd numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (0 != num % 2) {\n                oddNums.add(num);\n                //begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 216, "Adversarial Code": "//function definition\nfunction min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    }\n    //begin to write code\n", "Adversarial truth": "//function definition\nfunction min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    }\n else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction min_of_three(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    }\n    //begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 490, "Adversarial Code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  #begin to write code\n", "Adversarial truth": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  z = int(n**0.5)\n  i = 1\n  while(i <= z):\n    if(n % i == 0):\n      result += 2 \n      if(i == n/i):\n        result-=1\n    i+=1\n  return result", "lang": "python", "code_str_generate": "def ngcd(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to find common divisor between two numbers in a given pair.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef num_comm_div(x,y):\n  n = ngcd(x,y)\n  result = 0\n  #begin to write code\n", "prompt": "Write a python function to find common divisor between two numbers in a given pair."}
{"task_id": 279, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> func_0(const std::vector<std::vector<int>>& arr) {\n    int i = 0;\n    std::vector<int> result;\n    for (const auto& a : arr) {\n        if (a.size() > i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nstd::pair<int, std::vector<int>> func_0(const std::vector<std::vector<int>>& arr) {\n    int i = 0;\n    std::vector<int> result;\n    for (const auto& a : arr) {\n        if (a.size() > i) {\n            i = a.size();\n            result = a;\n        }\n    }\n    return {i, result};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> func_0(const std::vector<std::vector<int>>& arr) {\n    int i = 0;\n    std::vector<int> result;\n    for (const auto& a : arr) {\n        if (a.size() > i) {\n//begin to write code\n", "prompt": "Write a function to find the list of lists with maximum length."}
{"task_id": 141, "Adversarial Code": "def merge(a,b):\n    c = []\n    while\\\n len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n", "Adversarial truth": "def merge(a,b):\n    c = []\n    while\\\n len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n", "lang": "python", "code_str_generate": "def merge(a,b):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using merge sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    c = []\n    while\\\n len(a) != 0 and len(b) != 0:\n        if a[0] < b[0]:\n            c.append(a[0])\n            a.remove(a[0])\n        else:\n            c.append(b[0])\n            b.remove(b[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 492, "Adversarial Code": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> solution) {\n        List<Integer> list = new ArrayList<>();\n        for (int j = 0; j < solution.size() - 1; j++) {\n            list.add(solution.get(j) + solution.get(j + 1));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> solution) {\n        List<Integer> list = new ArrayList<>();\n        for (int j = 0; j < solution.size() - 1; j++) {\n            list.add(solution.get(j) + solution.get(j + 1));\n        }\n        return list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> solution) {\n\n        /*\n        progame language:java\n        description:Write a function to add consecutive numbers of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> list = new ArrayList<>();\n        for (int j = 0; j < solution.size() - 1; j++) {\n            list.add(solution.get(j) + solution.get(j + 1));\n            //begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 133, "Adversarial Code": "def sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "Adversarial truth": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum", "lang": "python", "code_str_generate": "def sum_Pairs(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 154, "Adversarial Code": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            //begin to write code\n", "Adversarial truth": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_char_position(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            //begin to write code\n", "prompt": "Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 96, "Adversarial Code": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                        count += 1;\n                    }\n                    k = k / 16;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to count hexadecimal numbers for a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n", "prompt": "Write a java function to count hexadecimal numbers for a given range."}
{"task_id": 480, "Adversarial Code": "import math\ndef func_0(g,p,n):\n x = (g * (1 - math.pow(n, p ))) / (1- n)\n #begin to write code\n", "Adversarial truth": "import math\ndef func_0(g,p,n):\n x = (g * (1 - math.pow(n, p ))) / (1- n)\n return x", "lang": "python", "code_str_generate": "import math\ndef func_0(g,p,n):\n\n '''\n progame language:python\n description:Write a function to find the sum of geometric progression series.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n x = (g * (1 - math.pow(n, p ))) / (1- n)\n #begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 185, "Adversarial Code": "import io\ndef remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "Adversarial truth": "import io\ndef remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "lang": "python", "code_str_generate": "import io\ndef remove_tuples(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 215, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(const std::string& values) {\n  std::string s = \"\"; \n  for (int j = 0; j < values.length(); ++j) {\n    if (j % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string func_0(const std::string& values) {\n  std::string s = \"\"; \n  for (int j = 0; j < values.length(); ++j) {\n    if (j % 2 == 0) {\n      s += values[j];\n    }\n  }\n  return s;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(const std::string& values) {\n  std::string s = \"\"; \n  for (int j = 0; j < values.length(); ++j) {\n    if (j % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to remove the characters which have odd index values of a given string."}
{"task_id": 166, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\n\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n    } else {\n        return std::make_pair(-1, -1);\n    }\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n", "prompt": "Write a cpp function to find two distinct numbers such that their lcm lies within the given range."}
{"task_id": 61, "Adversarial Code": "class Solution {\n    public boolean dif_Square(int n) {\n        if (2 != n % 4) {\n            return true;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean dif_Square(int n) {\n        if (2 != n % 4) {\n            return true;\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean dif_Square(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented as difference of two squares or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 != n % 4) {\n            return true;\n            //begin to write code\n", "prompt": "Write a java function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 270, "Adversarial Code": "def match(var_0):\n    if len(var_0) > len(set(var_0)):\n    #begin to write code\n", "Adversarial truth": "def match(var_0):\n    if len(var_0) > len(set(var_0)):\n        return False\n    return True", "lang": "python", "code_str_generate": "def match(var_0):\n\n    '''\n    progame language:python\n    description:Write a python function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if len(var_0) > len(set(var_0)):\n    #begin to write code\n", "prompt": "Write a python function to check if the elements of a given list are unique or not."}
{"task_id": 231, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n    long total = 0;\n    for (char i : str1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n    long total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long total = 0;\n    for (char i : str1) {\n//begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 172, "Adversarial Code": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(1 + i, n):\n    #begin to write code\n", "Adversarial truth": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(1 + i, n):\n      if k == arr[i] - arr[j] or k == arr[j] - arr[i]:\n        count += 1\n  return count", "lang": "python", "code_str_generate": "def count_pairs(arr, n, k):\n\n  '''\n  progame language:python\n  description:Write a function to count all the distinct pairs having a difference of k in any array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  count=0;\n  for i in range(0,n):\n    for j in range(1 + i, n):\n    #begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 212, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n", "prompt": "Write a function to check for majority element in the given sorted array."}
{"task_id": 255, "Adversarial Code": "#include <iostream>\n#include <cassert>\n// _\ufffd\ufffd_\ufffd__\nint square_Sum(int n) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n// _\ufffd\ufffd_\ufffd__\nint square_Sum(int n) {\n    return n * (4 * n * n - 1) / 3;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n// _\ufffd\ufffd_\ufffd__\nint square_Sum(int n) {\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 132, "Adversarial Code": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findLists(List<?> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of lists present in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 256, "Adversarial Code": "function square_Sum(var_0) {\n//begin to write code\n", "Adversarial truth": "function square_Sum(var_0) {\n    return Math.floor(var_0 * (4 * var_0 * var_0 - 1) / 3);\n}\n\n", "lang": "javascript", "code_str_generate": "function square_Sum(var_0) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the sum of squares of first n odd natural numbers."}
{"task_id": 334, "Adversarial Code": "function diff_consecutivenums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n", "Adversarial truth": "function diff_consecutivenums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function diff_consecutivenums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 465, "Adversarial Code": "def big_sum(nums):\n      sum\\\n      #begin to write code\n", "Adversarial truth": "def big_sum(nums):\n\n\n      sum\\\n= max(nums)+min(nums)\n      return sum\n", "lang": "python", "code_str_generate": "def big_sum(nums):\n\n      '''\n      progame language:python\n      description:Write a python function to find the sum of the largest and smallest value in a given array.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      sum\\\n      #begin to write code\n", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": 391, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nint ncr_modp(int n, int r, int p) {\n    const auto var_0 = 1;\n    const auto var_1 = 0;\n    const auto var_2 = 0;\n    const auto var_3 = 1;\n    const auto var_4 = 1;\n    std::vector<int> C(r + var_0 , var_1 );\n    C[var_2 ] = var_3 ;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nint ncr_modp(int n, int r, int p) {\n    const auto var_0 = 1;\n    const auto var_1 = 0;\n    const auto var_2 = 0;\n    const auto var_3 = 1;\n    const auto var_4 = 1;\n    std::vector<int> C(r + var_0 , var_1 );\n    C[var_2 ] = var_3 ;\n    for (int i = var_4 ; i <= n; ++i) {\n        const auto var_5 = 0;\n        for (int j = std::min(i, r); j > var_5 ; --j) {\n            const auto var_6 = 1;\n            C[j] = (C[j] + C[j - var_6 ]) % p;\n        }\n    }\n    return C[r];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint ncr_modp(int n, int r, int p) {\n\n    /*\n    progame language:cpp\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 1;\n    const auto var_1 = 0;\n    const auto var_2 = 0;\n    const auto var_3 = 1;\n    const auto var_4 = 1;\n    std::vector<int> C(r + var_0 , var_1 );\n    C[var_2 ] = var_3 ;\n//begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 40, "Adversarial Code": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            final boolean var_0 = true;\n            return var_0 ;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            final boolean var_0 = true;\n            return var_0 ;\n        } else {\n            final boolean var_1 = false;\n            return var_1 ;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is equilateral or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y && y == z) {\n            final boolean var_0 = true;\n            return var_0 ;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 79, "Adversarial Code": "import itertools\nimport logging\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n            #begin to write code\n", "Adversarial truth": "import itertools\nimport logging\ndef len_log(list1):\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n            temp_var_3 = 9.9\n            print('This function is used to remove a item of a list')\n            lambda: print('This function is used to remove a item of a list')\n    return max", "lang": "python", "code_str_generate": "import itertools\nimport logging\ndef len_log(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max=len(list1[0])\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n            #begin to write code\n", "prompt": "Write a python function to find the length of the longest word."}
{"task_id": 84, "Adversarial Code": "function Find_Min_Length(lst) {\n    let minLength = Math.min(...lst.map(x => x.length));\n    //begin to write code\n", "Adversarial truth": "function Find_Min_Length(lst) {\n    let minLength = Math.min(...lst.map(x => x.length));\n    return minLength;\n}\n\n", "lang": "javascript", "code_str_generate": "function Find_Min_Length(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let minLength = Math.min(...lst.map(x => x.length));\n    //begin to write code\n", "prompt": "Write a javascript function to find the minimum length of sublist."}
{"task_id": 169, "Adversarial Code": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        return dist;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate distance between two points using latitude and longitude.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "prompt": "Write a function to calculate distance between two points using latitude and longitude."}
{"task_id": 448, "Adversarial Code": "function remove_uppercase(str1) {\n    const var_0 = '';\n    //begin to write code\n", "Adversarial truth": "function remove_uppercase(str1) {\n    const var_0 = '';\n    return str1.replace(/[A-Z]/g, var_0 );\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_uppercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = '';\n    //begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 251, "Adversarial Code": "def split_two_parts(list1, L):\n    #begin to write code\n", "Adversarial truth": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "lang": "python", "code_str_generate": "def split_two_parts(list1, L):\n\n    '''\n    progame language:python\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 491, "Adversarial Code": "class Solution {\n    public int find(int n, int m) {\n        int r = n % m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int find(int n, int m) {\n        int r = n % m;\n        return r;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int r = n % m;\n        //begin to write code\n", "prompt": "Write a java function to find remainder of two numbers."}
{"task_id": 384, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar fiist_non_repeztint_cszraxger(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar fiist_non_repeztint_cszraxger(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n    }\n    for (char c : char_order) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return '\\0'; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar fiist_non_repeztint_cszraxger(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "prompt": "Write a cpp function to find the first non-repeated character in a given string."}
{"task_id": 180, "Adversarial Code": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 30 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 324, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint divide(int var_0, int var_3, int var_1) {\n    int var_2 = (var_3 * (2 * var_0 + (var_3 - 1) * var_1)) / 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint divide(int var_0, int var_3, int var_1) {\n    int var_2 = (var_3 * (2 * var_0 + (var_3 - 1) * var_1)) / 2;\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint divide(int var_0, int var_3, int var_1) {\n    int var_2 = (var_3 * (2 * var_0 + (var_3 - 1) * var_1)) / 2;\n//begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 388, "Adversarial Code": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def bitwise_xor(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def bitwise_xor(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 40, "Adversarial Code": "class Solution {\n    public\n boolean\n checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n boolean\n checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n boolean\n checkEquilateral(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is equilateral or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y && y == z) {\n            return true;\n            //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 213, "Adversarial Code": "const path = require('path');\nfunction count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "const path = require('path');\nfunction count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n//This is a comment line.\n        count += n & 1;\n        n >>= 1;\n//This is a comment line.\n    }\n    return count;\n} \n\n", "lang": "javascript", "code_str_generate": "const path = require('path');\nfunction count_Set_Bits(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n) { \n//This is a comment line.\n//begin to write code\n", "prompt": "Write a javascript function to count set bits of a given number."}
{"task_id": 240, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\n\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    return std::make_pair(std::abs(numbers), std::arg(numbers));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "prompt": "Write a function to insert an element before each element of a list."}
{"task_id": 110, "Adversarial Code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n", "Adversarial truth": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "lang": "python", "code_str_generate": "def check_triplet(A, n, sum, count):\n\n    '''\n    progame language:python\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 344, "Adversarial Code": "class Solution {\n    public static int count_Rectangles(int radius) {\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Rectangles(int radius) {\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                if (diagnalLengthSquare <= diameterSquare) {\n                    rectangles += 1;\n                }\n            }\n        }\n        return rectangles;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Rectangles(int radius) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of rectangles in a circle of radius r.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                //begin to write code\n", "prompt": "Write a java function to count the number of rectangles in a circle of radius r."}
{"task_id": 109, "Adversarial Code": "class Solution {\n    public static int max(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int max(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        return result_max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int max(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 282, "Adversarial Code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "Adversarial truth": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "lang": "python", "code_str_generate": "import math\ndef otherside_rightangle(w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the third side of a right angled triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 247, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n            count++;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n\n#include <cassert>\n\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n            count++;\n        }\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find number of odd elements in the given list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n            count++;\n//begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 132, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = n - 1;\n        while(i >= 0){\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = n - 1;\n        while(i >= 0){\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n            --i;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = n - 1;\n        while(i >= 0){\n//begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 351, "Adversarial Code": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, 1 + countMap.getOrDefault(num, 0));\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, 1 + countMap.getOrDefault(num, 0));\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() > maxVal) {\n                maxVal = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int maxOccurrences(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the item with maximum occurrences in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, 1 + countMap.getOrDefault(num, 0));\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n        //begin to write code\n", "prompt": "Write a java function to find the item with maximum occurrences in a given list."}
{"task_id": 113, "Adversarial Code": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "Adversarial truth": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    return angle;\n}", "lang": "javascript", "code_str_generate": "function angle_complex(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 406, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n        return a.size() < b.size();\n    });\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n", "prompt": "Write a function to find common first element in given list of tuple."}
{"task_id": 27, "Adversarial Code": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    #begin to write code\n", "Adversarial truth": "def div_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even/first_odd)", "lang": "python", "code_str_generate": "def div_even_odd(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    first_even = next((el for el in list1 if el%2==0),-1)\n    #begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 185, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector\\\n<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector\\\n<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n            res.push_back(ele);\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector\\\n<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove all the tuples with length k.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 465, "Adversarial Code": "function big_sum(nums) {\n(function() {let temp_var_3 = 9.9; temp_var_3 = temp_var_3 + 1;})();\n//begin to write code\n", "Adversarial truth": "function big_sum(nums) {\n(function() {let temp_var_3 = 9.9; temp_var_3 = temp_var_3 + 1;})();\n    let sum = Math.max(...nums) + Math.min(...nums);\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function big_sum(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of the largest and smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(function() {let temp_var_3 = 9.9; temp_var_3 = temp_var_3 + 1;})();\n//begin to write code\n", "prompt": "Write a javascript function to find the sum of the largest and smallest value in a given array."}
{"task_id": 384, "Adversarial Code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "Adversarial truth": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "lang": "python", "code_str_generate": "def first_non_repeating_character(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "prompt": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": 325, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 28 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 460, "Adversarial Code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "Adversarial truth": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n\n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "lang": "python", "code_str_generate": "def find_remainder(arr, lens, n):\n\n    '''\n    progame language:python\n    description:Write a python function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "prompt": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": 299, "Adversarial Code": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n            }\n\n\n        }\n        Character[] result = new Character[list.size()];\n        return list.toArray(result);\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given string to a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 434, "Adversarial Code": "class Solution {\n    public static int[][] func_0(int[][] var_3, int[][] var_4) {\n        int[][] var_2 = new int[var_3.length][var_3[0].length];\n        for (int var_0 = 0; var_0 < var_3.length; var_0++) {\n            for (int var_1 = 0; var_1 < var_3[var_0].length; var_1++) {\n                var_2[var_0][var_1] = var_3[var_0][var_1] * var_4[var_0][var_1];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] func_0(int[][] var_3, int[][] var_4) {\n        int[][] var_2 = new int[var_3.length][var_3[0].length];\n        for (int var_0 = 0; var_0 < var_3.length; var_0++) {\n            for (int var_1 = 0; var_1 < var_3[var_0].length; var_1++) {\n                var_2[var_0][var_1] = var_3[var_0][var_1] * var_4[var_0][var_1];\n            }\n        }\n        return var_2;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] func_0(int[][] var_3, int[][] var_4) {\n        int[][] var_2 = new int[var_3.length][var_3[0].length];\n        for (int var_0 = 0; var_0 < var_3.length; var_0++) {\n            for (int var_1 = 0; var_1 < var_3[var_0].length; var_1++) {\n                var_2[var_0][var_1] = var_3[var_0][var_1] * var_4[var_0][var_1];\n                //begin to write code\n", "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples."}
{"task_id": 64, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = 1;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = 0;\n                    break;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = 1;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = 0;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = 1;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = 0;\n                    break;\n                    //begin to write code\n", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."}
{"task_id": 463, "Adversarial Code": "function replace_char(str1, ch, newch) {\n    let\n    //begin to write code\n", "Adversarial truth": "function replace_char(str1, ch, newch) {\n    let\n str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    return str2;\n}\n\n", "lang": "javascript", "code_str_generate": "function replace_char(str1, ch, newch) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 215, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n\n  /*\n  progame language:cpp\n  description:Write a cpp function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to remove the characters which have odd index values of a given string."}
{"task_id": 473, "Adversarial Code": "class Solution {\n    public static List<List<String>> union(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> union(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> union(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 44, "Adversarial Code": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n//This is a comment line.\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n//This is a comment line.\n        double tn = a * Math.pow(r, n - 1);\n        return tn;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n\n    /*\n    progame language:java\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 157, "Adversarial Code": "def frequency(y,z):\n    counter = 0  \n    for item in y: \n    #begin to write code\n", "Adversarial truth": "def frequency(y,z): \n    counter = 0  \n    for item in y: \n        if item == z: counter += 1\n    return counter ", "lang": "python", "code_str_generate": "def frequency(y,z):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    counter = 0  \n    for item in y: \n    #begin to write code\n", "prompt": "Write a python function to find the frequency of a number in a given array."}
{"task_id": 6, "Adversarial Code": "def square_perimeter(a):\n#This is a comment line.\n  var_0 = 4\n  #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef square_perimeter(a):\n  var_0 = 4\n  perimeter=var_0 *a\n  return perimeter", "lang": "python", "code_str_generate": "def square_perimeter(a):\n\n    '''\n    progame language:python\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n  var_0 = 4\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 115, "Adversarial Code": "def sum(a,b):\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n", "Adversarial truth": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "lang": "python", "code_str_generate": "def sum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range (1,min(a,b)): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of common divisors of two given numbers."}
{"task_id": 319, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex p(R\"(\\b\\w{3,5}\\b)\");\n    auto words = sregex_iterator(text.begin(), text.end(), p);\n    auto word = sregex_iterator();\n    vector<string> result;\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_char(const string& text) {\n    regex p(R\"(\\b\\w{3,5}\\b)\");\n    auto words = sregex_iterator(text.begin(), text.end(), p);\n    auto word = sregex_iterator();\n\n    vector<string> result;\n    for (sregex_iterator w = words; w != word; ++w) {\n        result.push_back((*w).str());\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex p(R\"(\\b\\w{3,5}\\b)\");\n    auto words = sregex_iterator(text.begin(), text.end(), p);\n    auto word = sregex_iterator();\n    vector<string> result;\n//begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 69, "Adversarial Code": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double tetrahedralNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth tetrahedral number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n", "prompt": "Write a function to find the nth tetrahedral number."}
{"task_id": 394, "Adversarial Code": "class Solution {\n    public static boolean checpGuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checpGuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checpGuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n        //begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 283, "Adversarial Code": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "Adversarial truth": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return(max_val)", "lang": "python", "code_str_generate": "def max_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 185, "Adversarial Code": "class Solution {\n    public\n static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n            }\n        }\n        return res;\n    }\n\n\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all the tuples with length k.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n            //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 133, "Adversarial Code": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "Adversarial truth": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_Pairs(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 361, "Adversarial Code": "class Solution {\n    public\n static int[] heapAssending(int[] nums) {\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[] heapAssending(int[] nums) {\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sResult[i] = pq.poll();\n        }\n        return sResult;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[] heapAssending(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        //begin to write code\n", "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"task_id": 320, "Adversarial Code": "function count_unset_bits(n) {\n    let count = 0;\n//This is a comment line.\n    let x = 1;\n//This is a comment line.\n    while (x < n + 1) {\n    //begin to write code\n", "Adversarial truth": "function count_unset_bits(n) {\n    let count = 0;\n//This is a comment line.\n    let x = 1;\n//This is a comment line.\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n            count++;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_unset_bits(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n//This is a comment line.\n    let x = 1;\n//This is a comment line.\n    while (x < n + 1) {\n    //begin to write code\n", "prompt": "Write a javascript function to count unset bits of a given number."}
{"task_id": 181, "Adversarial Code": "def check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "Adversarial truth": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "lang": "python", "code_str_generate": "def check_String(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "prompt": "Write a python function to check whether a string has atleast one letter and one number."}
{"task_id": 223, "Adversarial Code": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int volumeCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int volume = l * l * l;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 476, "Adversarial Code": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                //begin to write code\n", "Adversarial truth": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n//This is a comment line.\n    }\n    return tup;\n}", "lang": "javascript", "code_str_generate": "//function definition\nfunction sort_tuple(tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                //begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 30, "Adversarial Code": "function filter_evennumbers(nums) {\n//begin to write code\n", "Adversarial truth": "function filter_evennumbers(nums) {\n    return nums.filter(x => x % 2 === 0);\n}\n\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function filter_evennumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 315, "Adversarial Code": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(hub => {\n      hub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(hub => {\n      hub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n          temp[wrd] = 1;\n        }\n      });\n    });\n    let res = Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);\n    return res;\n  }", "lang": "javascript", "code_str_generate": "function mostOccurrences(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const temp = {};\n    testList.forEach(hub => {\n      hub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 495, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint permutation_coefficient(int n, int k) {\n    const auto var_0 = 1;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    const auto var_3 = 0;\n    vector<vector<int>> P(n + var_0 , vector<int>(k + var_1 , var_2 ));\n    for (int i = var_3 ; i <= n; i++) {\n        const auto var_4 = 0;\n        for (int j = var_4 ; j <= min(i, k); j++) {\n            const auto var_5 = 0;\n            const auto var_6 = 1;\n            const auto var_7 = 1;\n            const auto var_8 = 1;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint permutation_coefficient(int n, int k) {\n    const auto var_0 = 1;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    const auto var_3 = 0;\n    vector<vector<int>> P(n + var_0 , vector<int>(k + var_1 , var_2 ));\n    for (int i = var_3 ; i <= n; i++) {\n        const auto var_4 = 0;\n        for (int j = var_4 ; j <= min(i, k); j++) {\n            const auto var_5 = 0;\n            const auto var_6 = 1;\n            const auto var_7 = 1;\n            const auto var_8 = 1;\n            const auto var_9 = 1;\n            const auto var_10 = 1;\n            const auto var_11 = 0;\n            if (j == var_5 )\n                P[i][j] = var_6 ;\n            else\n                P[i][j] = P[i - var_7 ][j] + j * P[i - var_8 ][j - var_9 ];\n            if (j < k)\n                P[i][j + var_10 ] = var_11 ;\n        }\n    }\n    return P[n][k];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint permutation_coefficient(int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the permutation coefficient of given p(n, k).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 1;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    const auto var_3 = 0;\n    vector<vector<int>> P(n + var_0 , vector<int>(k + var_1 , var_2 ));\n    for (int i = var_3 ; i <= n; i++) {\n        const auto var_4 = 0;\n        for (int j = var_4 ; j <= min(i, k); j++) {\n            const auto var_5 = 0;\n            const auto var_6 = 1;\n            const auto var_7 = 1;\n            const auto var_8 = 1;\n//begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 203, "Adversarial Code": "import math\ndef degree_radian(radian):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import math\ndef degree_radian(radian):\n#This is a comment line.\n degree = radian*(180/math.pi)\n return degree", "lang": "python", "code_str_generate": "import math\ndef degree_radian(radian):\n\n    '''\n    progame language:python\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 77, "Adversarial Code": "function freqCount(lihg8) {\n    const freqCount = lihg8.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "Adversarial truth": "function freqCount(lihg8) {\n    const freqCount = lihg8.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n    return freqCount;\n}\n\n", "lang": "javascript", "code_str_generate": "function freqCount(lihg8) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = lihg8.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 385, "Adversarial Code": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String checkChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n            //begin to write code\n", "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex."}
{"task_id": 496, "Adversarial Code": "const url = require('url');\nfunction remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n", "Adversarial truth": "const url = require('url');\nfunction remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            i--;  \n        }\n    }\n    return list1;\n}\n\n", "lang": "javascript", "code_str_generate": "const url = require('url');\nfunction remove_words(list1, removewords) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 321, "Adversarial Code": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, 1 + charCountMap.getOrDefault(c, 0));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, 1 + charCountMap.getOrDefault(c, 0));\n        }\n        return charCountMap;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to count character frequency of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, 1 + charCountMap.getOrDefault(c, 0));\n            //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 384, "Adversarial Code": "class Solution {\n    public static Character fiistMlmIvkvatintXhaiaxter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character fiistMlmIvkvatintXhaiaxter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Character fiistMlmIvkvatintXhaiaxter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n", "prompt": "Write a java function to find the first non-repeated character in a given string."}
{"task_id": 190, "Adversarial Code": "def chkList(lst):\n    #begin to write code\n", "Adversarial truth": "def chkList(lst): \n    return len(set(lst)) == 1", "lang": "python", "code_str_generate": "def chkList(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to check whether the elements in a list are same or not."}
{"task_id": 401, "Adversarial Code": "def remove_odd(o):\n    for i in o:\n        if i % 2 != 0:\n        #begin to write code\n", "Adversarial truth": "def remove_odd(o):\n    for i in o:\n        if i % 2 != 0:\n            o.remove(i)\n    return o", "lang": "python", "code_str_generate": "def remove_odd(o):\n\n    '''\n    progame language:python\n    description:Write a python function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in o:\n        if i % 2 != 0:\n        #begin to write code\n", "prompt": "Write a python function to remove odd numbers from a given list."}
{"task_id": 273, "Adversarial Code": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  #begin to write code\n", "Adversarial truth": "def check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "lang": "python", "code_str_generate": "def check_element(list,element):\n\n  '''\n  progame language:python\n  description:Write a function to check whether all items of a list are equal to a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  check_element=all(v== element for v in list)\n  #begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 313, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, long> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (1 == idx % 2) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::pair<int, long> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (1 == idx % 2) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, long> sum_of_alternates(const std::vector<int>& test_vector) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the sum of alternate chains of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (1 == idx % 2) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "prompt": "Write a function to extract the sum of alternate chains of tuples."}
{"task_id": 261, "Adversarial Code": "function rear_extract(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n", "Adversarial truth": "function rear_extract(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function rear_extract(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to perfom the rear element extraction from list of tuples records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 10, "Adversarial Code": "class Solution {\n    public List<Integer> split(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> split(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n        }\n        return multiples_of_num;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> split(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 11, "Adversarial Code": "function func_0(args) {\n    let result = new Set();\n    let i = -1;\n    for (let j = 0; j < args.length; j++) {\n        if (result.has(args[j])) {\n            return args[j];\n            //begin to write code\n", "Adversarial truth": "function func_0(args) {\n    let result = new Set();\n    let i = -1;\n\n    for (let j = 0; j < args.length; j++) {\n        if (result.has(args[j])) {\n            return args[j];\n        } else {\n            result.add(args[j]);\n        }\n    }\n\n    return i;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(args) {\n    let result = new Set();\n    let i = -1;\n    for (let j = 0; j < args.length; j++) {\n        if (result.has(args[j])) {\n            return args[j];\n            //begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 477, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n  const auto var_0 = 5;\n  const auto var_1 = 5;\n  const auto var_2 = 2;\n  const auto var_3 = 5;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble area_pentagon(double a) {\n  const auto var_0 = 5;\n  const auto var_1 = 5;\n  const auto var_2 = 2;\n  const auto var_3 = 5;\n  const auto var_4 = 2;\n  const auto var_5 = 4.0;\n  double area = (sqrt(var_0  * (var_1  + var_2  * sqrt(var_3 ))) * pow(a, var_4 )) / var_5 ;\n  return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n\n  /*\n  progame language:cpp\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const auto var_0 = 5;\n  const auto var_1 = 5;\n  const auto var_2 = 2;\n  const auto var_3 = 5;\n//begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 231, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_charac(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 214, "Adversarial Code": "class Solution {\n    public int find_Min(int[] solutions, int lo, int hi) {\n        while (lo < hi) {\n            int pos = lo + (hi - lo) / 2;\n            if (solutions[pos] == solutions[hi]) {\n                hi -= 1;\n            } else if (solutions[pos] > solutions[hi]) {\n                lo = pos + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int find_Min(int[] solutions, int lo, int hi) {\n        while (lo < hi) {\n            int pos = lo + (hi - lo) / 2;\n            if (solutions[pos] == solutions[hi]) {\n                hi -= 1;\n            } else if (solutions[pos] > solutions[hi]) {\n                lo = pos + 1;\n            } else {\n                hi = pos;\n            }\n        }\n        return solutions[hi];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int find_Min(int[] solutions, int lo, int hi) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum element in a sorted and rotated array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        while (lo < hi) {\n            int pos = lo + (hi - lo) / 2;\n            if (solutions[pos] == solutions[hi]) {\n                hi -= 1;\n            } else if (solutions[pos] > solutions[hi]) {\n                lo = pos + 1;\n                //begin to write code\n", "prompt": "Write a java function to find the minimum element in a sorted and rotated array."}
{"task_id": 407, "Adversarial Code": "function Find_Max(lst) {\n    let\n    //begin to write code\n", "Adversarial truth": "function Find_Max(lst) {\n    let\n maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    return maxList;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function Find_Max(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a javascript function to find the sublist having maximum length."}
{"task_id": 358, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint func_0(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint func_0(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint func_0(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 190, "Adversarial Code": "def all(lst):\n    #begin to write code\n", "Adversarial truth": "def all(lst): \n    return len(set(lst)) == 1", "lang": "python", "code_str_generate": "def all(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to check whether the elements in a list are same or not."}
{"task_id": 113, "Adversarial Code": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "Adversarial truth": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    return angle;\n}", "lang": "javascript", "code_str_generate": "function angle_complex(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 74, "Adversarial Code": "function surfacearea_sphere(r) {\n  let surfacearea = r * 4 * r * Math.PI;\n  //begin to write code\n", "Adversarial truth": "function surfacearea_sphere(r) {\n  let surfacearea = r * 4 * r * Math.PI;\n  return surfacearea;\n}\n\n", "lang": "javascript", "code_str_generate": "function surfacearea_sphere(r) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the surface area of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let surfacearea = r * 4 * r * Math.PI;\n  //begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 195, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd\\\n::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nstd\\\n::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd\\\n::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the adjacent element concatenation in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 362, "Adversarial Code": "class Solution {\n    public static long volumeCuboid(int l, int w, int h) {\n        int volume = h * w * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long volumeCuboid(int l, int w, int h) {\n        int volume = h * w * l;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long volumeCuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cuboid.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int volume = h * w * l;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 218, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n        }\n        return arr;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 229, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    {\n        size_t i = 0;\n        while(i < a.size()){\n        if (a[i].size() != b[i].size()) return false;\n        {\n            size_t j = 0;\n            while(j < a[i].size()){\n            if (a[i][j].size() != b[i][j].size()) return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\n\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    {\n        size_t i = 0;\n        while(i < a.size()){\n        if (a[i].size() != b[i].size()) return false;\n        {\n            size_t j = 0;\n            while(j < a[i].size()){\n            if (a[i][j].size() != b[i][j].size()) return false;\n            {\n                size_t k = 0;\n                while(k < a[i][j].size()){\n                if (a[i][j][k] != b[i][j][k]) return false;\n                            ++k;\n                }\n            }\n                    ++j;\n            }\n        }\n            ++i;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    {\n        size_t i = 0;\n        while(i < a.size()){\n        if (a[i].size() != b[i].size()) return false;\n        {\n            size_t j = 0;\n            while(j < a[i].size()){\n            if (a[i][j].size() != b[i][j].size()) return false;\n//begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 133, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    long sum = 0;\n    for (long i = n - 1; i >= 0; i = i - 1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    long sum = 0;\n    for (long i = n - 1; i >= 0; i = i - 1) {\n        sum = sum + (i * arr[i] - (n - 1 - i) * arr[i]);\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long sum = 0;\n    for (long i = n - 1; i >= 0; i = i - 1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 38, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n//This is a comment line.\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to extract every first or specified element from a given two-dimensional list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n        //begin to write code\n", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list."}
{"task_id": 436, "Adversarial Code": "function ufmx_9(args) {\n//begin to write code\n", "Adversarial truth": "function ufmx_9(args) {\n    return args.map(e => e ** 3);\n}\n\n", "lang": "javascript", "code_str_generate": "function ufmx_9(args) {\n//begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 384, "Adversarial Code": "#include <ctime>\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    const char var_3 = '\\0';\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            const auto var_0 = 1;\n            ctr[c] += var_0 ;\n        } else {\n            const auto var_1 = 1;\n            ctr[c] = var_1 ;\n//begin to write code\n", "Adversarial truth": "#include <ctime>\n\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar first_non_repeating_character(const std::string& str1) {\n    const char var_3 = '\\0';\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            const auto var_0 = 1;\n            ctr[c] += var_0 ;\n        } else {\n            const auto var_1 = 1;\n            ctr[c] = var_1 ;\n            char_order.push_back(c);\n        }\n    }\n    for (char c : char_order) {\n    double temp_var_9 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n        const auto var_2 = 1;\n        if (ctr[c] == var_2 ) {\n            return c;\n        }\n    }\n    return var_3 ; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <ctime>\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first non-repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const char var_3 = '\\0';\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            const auto var_0 = 1;\n            ctr[c] += var_0 ;\n        } else {\n            const auto var_1 = 1;\n            ctr[c] = var_1 ;\n//begin to write code\n", "prompt": "Write a cpp function to find the first non-repeated character in a given string."}
{"task_id": 233, "Adversarial Code": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint func_0(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nint func_0(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint func_0(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the next perfect square greater than a given number."}
{"task_id": 348, "Adversarial Code": "def Check_Solution(a,b,c):\n    if not((2*b*b == 9*a*c)):\n        return (\"No\");\n        #begin to write code\n", "Adversarial truth": "def Check_Solution(a,b,c): \n    if not((2*b*b == 9*a*c)):\n        return (\"No\");\n    else:\n        return (\"Yes\"); ", "lang": "python", "code_str_generate": "def Check_Solution(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if not((2*b*b == 9*a*c)):\n        return (\"No\");\n        #begin to write code\n", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 250, "Adversarial Code": "#include <mutex>\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "#include <mutex>\n\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n    std::get<1>(test_tup1) / std::get<1>(test_tup2),\n    std::get<2>(test_tup1) / std::get<2>(test_tup2),\n    std::get<3>(test_tup1) / std::get<3>(test_tup2));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <mutex>\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n  /*\n  progame language:cpp\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 463, "Adversarial Code": "import csv\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n #begin to write code\n", "Adversarial truth": "import csv\ndef replace_char(str1,ch,newch):\n str2 = str1.replace(ch, newch)\n return str2", "lang": "python", "code_str_generate": "import csv\ndef replace_char(str1,ch,newch):\n\n '''\n progame language:python\n description:Write a function to replace characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(ch, newch)\n #begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 85, "Adversarial Code": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            x++;\n        }\n    }\n    return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function divisor(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the number of divisors of a given integer."}
{"task_id": 407, "Adversarial Code": "def largest(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def largest(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "lang": "python", "code_str_generate": "def largest(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having maximum length."}
{"task_id": 10, "Adversarial Code": "function multiples_of_num(m, n) {\n    let multiples = [];\n    {\n        let i = n;\n        while(i <= m * n){\n        //begin to write code\n", "Adversarial truth": "function multiples_of_num(m, n) {\n    let multiples = [];\n    {\n        let i = n;\n        while(i <= m * n){\n        multiples.push(i);\n            i += n;\n        }\n    }\n    return multiples;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiples_of_num(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let multiples = [];\n    {\n        let i = n;\n        while(i <= m * n){\n        //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 189, "Adversarial Code": "def position_max(list1):\n    max_val = max(list1)\n    #begin to write code\n", "Adversarial truth": "def position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "lang": "python", "code_str_generate": "def position_max(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = max(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 491, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//This is a comment line.\nint find(int n, int m) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n//This is a comment line.\n\nint find(int n, int m) {\n    int r = n % m;\n    return r;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n//This is a comment line.\nint find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of two numbers."}
{"task_id": 157, "Adversarial Code": "def frequency(a,x):\n    count = 0  \n    for i in a: \n    #begin to write code\n", "Adversarial truth": "def frequency(a,x): \n\n\n    count = 0  \n\n\n    for i in a: \n        if\\\n i == x: count += 1\n    return count \n\n", "lang": "python", "code_str_generate": "def frequency(a,x):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0  \n    for i in a: \n    #begin to write code\n", "prompt": "Write a python function to find the frequency of a number in a given array."}
{"task_id": 461, "Adversarial Code": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[1 + i] != l[i] + 1) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[1 + i] != l[i] + 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given list contains consecutive numbers or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[1 + i] != l[i] + 1) {\n                return false;\n                //begin to write code\n", "prompt": "Write a java function to check whether the given list contains consecutive numbers or not."}
{"task_id": 105, "Adversarial Code": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tupleToInt(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given tuple of positive integers into an integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 161, "Adversarial Code": "class Solution {\n    public static int countOccurance(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countOccurance(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countOccurance(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n                //begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 233, "Adversarial Code": "import math  \ndef next_Perfect_Square(N):\n    nextN = math.floor(math.sqrt(N)) + 1\n    #begin to write code\n", "Adversarial truth": "import math  \ndef next_Perfect_Square(N): \n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN ", "lang": "python", "code_str_generate": "import math  \ndef next_Perfect_Square(N):\n\n    '''\n    progame language:python\n    description:Write a python function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nextN = math.floor(math.sqrt(N)) + 1\n    #begin to write code\n", "prompt": "Write a python function to find the next perfect square greater than a given number."}
{"task_id": 355, "Adversarial Code": "def adjacent_num_product(list_nums):\n    #begin to write code\n", "Adversarial truth": "def adjacent_num_product(list_nums):\n\n\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "lang": "python", "code_str_generate": "def adjacent_num_product(list_nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 189, "Adversarial Code": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    //begin to write code\n", "Adversarial truth": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    let maxResult = list1.map((value, index) => value === maxVal ? index : -1).filter(index => index !== -1);\n\n\n    return maxResult;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function positionMax(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxVal = Math.max(...list1);\n    //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 30, "Adversarial Code": "class Solution {\n    public\n static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n            }\n        }\n        return evenNums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<Integer> filterEvenNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter even numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n            //begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 55, "Adversarial Code": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n            }\n        }\n        return posCount;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int posCount(int[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count positive numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n", "prompt": "Write a java function to count positive numbers in a list."}
{"task_id": 285, "Adversarial Code": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                }\n            }\n        }\n        return inv_count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count inversions in an array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "prompt": "Write a java function to count inversions in an array."}
{"task_id": 296, "Adversarial Code": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, long m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, long m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            newList.add(n);\n            tuplexColon[m] = newList;\n        }\n        return tuplexColon;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, long m, Object n) {\n\n        /*\n        progame language:java\n        description:Write a function to get a colon of a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n", "prompt": "Write a function to get a colon of a tuple."}
{"task_id": 491, "Adversarial Code": "class Solution {\n    public int find(int n, int m) {\n        long r = n % m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int find(int n, int m) {\n        long r = n % m;\n        return r;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long r = n % m;\n        //begin to write code\n", "prompt": "Write a java function to find remainder of two numbers."}
{"task_id": 48, "Adversarial Code": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int isOctagonal(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth octagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "prompt": "Write a function to find the nth octagonal number."}
{"task_id": 102, "Adversarial Code": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n    temp_var_3 = 9.9\n    while temp_var_3 < 9.12: print('This function is used to remove a item of a list'); temp_var_3 += 1\n else:\n #begin to write code\n", "Adversarial truth": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n    temp_var_3 = 9.9\n    while temp_var_3 < 9.12: print('This function is used to remove a item of a list'); temp_var_3 += 1\n else:\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\n          return True\n     elif (text[0] in \"+-\") and \\\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\n         return True\n     else:\n        return False", "lang": "python", "code_str_generate": "def check_integer(text):\n\n '''\n progame language:python\n description:Write a function to check if a string represents an integer or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n text = text.strip()\n if len(text) < 1:\n    return None\n    temp_var_3 = 9.9\n    while temp_var_3 < 9.12: print('This function is used to remove a item of a list'); temp_var_3 += 1\n else:\n #begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 57, "Adversarial Code": "def is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "Adversarial truth": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "lang": "python", "code_str_generate": "def is_Monotonic(A):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "prompt": "Write a python function to check whether the given array is monotonic or not."}
{"task_id": 213, "Adversarial Code": "def count_Set_Bits(n):\n    count = 0\n    while (n): \n    #begin to write code\n", "Adversarial truth": "def count_Set_Bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count ", "lang": "python", "code_str_generate": "def count_Set_Bits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    while (n): \n    #begin to write code\n", "prompt": "Write a python function to count set bits of a given number."}
{"task_id": 379, "Adversarial Code": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n #begin to write code\n", "Adversarial truth": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string", "lang": "python", "code_str_generate": "def add_string(list,string):\n\n '''\n progame language:python\n description:Write a function to insert a given string at the beginning of all items in a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n add_string=[string.format(i) for i in  list]\n #begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 385, "Adversarial Code": "class Solution {\n    static final String var_3 = \"^[a-z]$|^([a-z]).*\\\\1$\";\n    static final String var_0 = var_3 ;\n    private static final Pattern pattern = Pattern.compile(var_0 );\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            final String var_4 = \"Valid\";\n            final String var_1 = var_4 ;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    static final String var_3 = \"^[a-z]$|^([a-z]).*\\\\1$\";\n    static final String var_0 = var_3 ;\n    private static final Pattern pattern = Pattern.compile(var_0 );\n\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            final String var_4 = \"Valid\";\n            final String var_1 = var_4 ;\n            return var_1 ;\n        } else {\n            final String var_5 = \"Invalid\";\n            final String var_2 = var_5 ;\n            return var_2 ;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    static final String var_3 = \"^[a-z]$|^([a-z]).*\\\\1$\";\n    static final String var_0 = var_3 ;\n    private static final Pattern pattern = Pattern.compile(var_0 );\n    public static String checkChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            final String var_4 = \"Valid\";\n            final String var_1 = var_4 ;\n            //begin to write code\n", "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex."}
{"task_id": 283, "Adversarial Code": "def max_val(listval):\n     max_val\\\n     #begin to write code\n", "Adversarial truth": "def max_val(listval):\n     max_val\\\n = max(i for i in listval if isinstance(i, int)) \n     return(max_val)\n\n\n", "lang": "python", "code_str_generate": "def max_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val\\\n     #begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 320, "Adversarial Code": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n        //begin to write code\n", "Adversarial truth": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n            count++;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function count_unset_bits(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to count unset bits of a given number."}
{"task_id": 154, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                evenPair += 1;\n            }\n        }\n    }\n    return evenPair;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 161, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    const auto var_2 = 2;\n    int count = var_0 ;\n    for (size_t i = var_1 ; i + var_2  < s.length(); ++i) {\n        const char var_3 = 's';\n        const auto var_4 = 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint count_occurance(const std::string &s) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    const auto var_2 = 2;\n    int count = var_0 ;\n    for (size_t i = var_1 ; i + var_2  < s.length(); ++i) {\n        const char var_3 = 's';\n        const auto var_4 = 1;\n        const char var_5 = 't';\n        const auto var_6 = 2;\n        const char var_7 = 'd';\n        if (s[i] == var_3  && s[i + var_4 ] == var_5  && s[i + var_6 ] == var_7 ) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    const auto var_2 = 2;\n    int count = var_0 ;\n    for (size_t i = var_1 ; i + var_2  < s.length(); ++i) {\n        const char var_3 = 's';\n        const auto var_4 = 1;\n//begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 95, "Adversarial Code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n", "Adversarial truth": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "lang": "python", "code_str_generate": "def add_lists(test_list, test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to add the given list to the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n", "prompt": "Write a function to add the given list to the given tuples."}
{"task_id": 98, "Adversarial Code": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (long i = 0; i < n; i++) {\n            if ('1' == s.charAt(i)) {\n                count = 1 + count;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (long i = 0; i < n; i++) {\n            if ('1' == s.charAt(i)) {\n                count = 1 + count;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the count of rotations of a binary string with odd value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (long i = 0; i < n; i++) {\n            if ('1' == s.charAt(i)) {\n                count = 1 + count;\n                //begin to write code\n", "prompt": "Write a java function to find the count of rotations of a binary string with odd value."}
{"task_id": 197, "Adversarial Code": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        return matcher.find();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isDecimal(String num) {\n\n        /*\n        progame language:java\n        description:Write a function to check the given decimal with a precision of 2 by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 450, "Adversarial Code": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if\\\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <string>\n#include <cassert>\nusing namespace std;\n\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if\\\n (\\\nstr[i] >= 'A' && str[i] <= 'Z') upper_ctr += 1;\n    }\n    return upper_ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the upper case characters in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if\\\n//begin to write code\n", "prompt": "Write a cpp function to count the upper case characters in a given string."}
{"task_id": 487, "Adversarial Code": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n", "Adversarial truth": "def gcd(x, y):\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if x % k == 0 and y % k == 0:\n            gcd = k\n            break  \n    return gcd", "lang": "python", "code_str_generate": "def gcd(x, y):\n\n    '''\n    progame language:python\n    description:Write a python function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    gcd = 1\n    if x % y == 0:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n", "prompt": "Write a python function to find gcd of two positive integers."}
{"task_id": 202, "Adversarial Code": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        final int var_0 = 0;\n        double temp_var_6 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        String[] res = new String[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        final int var_0 = 0;\n        double temp_var_6 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        String[] res = new String[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n        }\n        return res;\n    }\n}\n//This is a comment line.\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the concatenation of two string tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        double temp_var_6 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        String[] res = new String[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n        //begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 10, "Adversarial Code": "function\n multiples_of_num(m, n) {\n    let multiples = [];\n    for\n    //begin to write code\n", "Adversarial truth": "function\n multiples_of_num(m, n) {\n    let multiples = [];\n    for\n(let i = n; i <= m * n; i += n) {\n\n\n        multiples.push(i);\n    }\n    return multiples;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n multiples_of_num(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let multiples = [];\n    for\n    //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 425, "Adversarial Code": "//function definition\nfunction\n neg_nos(list1) {\n    let negatives = [];\n    for\n (let num of list1) {\n //begin to write code\n", "Adversarial truth": "//function definition\n\n\nfunction\n neg_nos(list1) {\n    let negatives = [];\n    for\n (let num of list1) {\n        if (num < 0) {\n            negatives\n.push(num);\n        }\n    }\n    return negatives;\n}\n\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction\n neg_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let negatives = [];\n    for\n (let num of list1) {\n //begin to write code\n", "prompt": "Write a javascript function to print negative numbers in a list."}
{"task_id": 244, "Adversarial Code": "import subprocess\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    #begin to write code\n", "Adversarial truth": "import subprocess\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "lang": "python", "code_str_generate": "import subprocess\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 172, "Adversarial Code": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n                //begin to write code\n", "Adversarial truth": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n            }\n        }\n    }\n    let temp_var_7 = 9.9;while (temp_var_7 < 9.12) {temp_var_7 = temp_var_7 + 1;}\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_pairs(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count all the distinct pairs having a difference of k in any array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n                //begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 449, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd\\\n::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nstd\\\n::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n        result.push_back(item[0]);\n\n\n    }\n    return result;\n\n\n}\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd\\\n::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (auto& item : lst) {\n//begin to write code\n", "prompt": "Write a cpp function to get the first element of each sublist."}
{"task_id": 322, "Adversarial Code": "def Sort(sub_li):\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "Adversarial truth": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n\n\n    return sub_li ", "lang": "python", "code_str_generate": "def Sort(sub_li):\n\n    '''\n    progame language:python\n    description:Write a python function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "prompt": "Write a python function to sort a list according to the second element in sublist."}
{"task_id": 41, "Adversarial Code": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to caluclate area of a parallelogram.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = b * h;\n        //begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 55, "Adversarial Code": "def pos_count(list):\n  var_0 = 0\n  pos_count= var_0 \n  for num in list: \n    var_1 = 0\n    #begin to write code\n", "Adversarial truth": "def pos_count(list):\n  var_0 = 0\n  pos_count= var_0 \n  for num in list: \n    var_1 = 0\n    if num >= var_1 : \n\n      var_2 = 1\n      pos_count += var_2 \n  return pos_count ", "lang": "python", "code_str_generate": "def pos_count(list):\n\n  '''\n  progame language:python\n  description:Write a python function to count positive numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 0\n  pos_count= var_0 \n  for num in list: \n    var_1 = 0\n    #begin to write code\n", "prompt": "Write a python function to count positive numbers in a list."}
{"task_id": 322, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\nvoid func_0(vector<pair<string, int>>& arr) {\n    sort(arr.begin(), arr.end(), [](const pair<string, int>& s, const pair<string, int>& p) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\n// Sorting function based on the second element of the pairs\nvoid func_0(vector<pair<string, int>>& arr) {\n    sort(arr.begin(), arr.end(), [](const pair<string, int>& s, const pair<string, int>& p) {\n        return s.second < p.second;\n    });\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nvoid func_0(vector<pair<string, int>>& arr) {\n    sort(arr.begin(), arr.end(), [](const pair<string, int>& s, const pair<string, int>& p) {\n//begin to write code\n", "prompt": "Write a cpp function to sort a list according to the second element in sublist."}
{"task_id": 162, "Adversarial Code": "import re\ndef iemlee_hkoxhar(text):\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "Adversarial truth": "import re\ndef iemlee_hkoxhar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "lang": "python", "code_str_generate": "import re\ndef iemlee_hkoxhar(text):\n\n '''\n progame language:python\n description:Write a function to remove everything except alphanumeric characters from a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 82, "Adversarial Code": "class Solution {\n    public static int power(int a, int b) {\n//This is a comment line.\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int power(int a, int b) {\n//This is a comment line.\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * power(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int power(int a, int b) {\n\n    /*\n    progame language:java\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n            //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 84, "Adversarial Code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "Adversarial truth": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "lang": "python", "code_str_generate": "def Find_Min_Length(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "prompt": "Write a python function to find the minimum length of sublist."}
{"task_id": 250, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n  return std::make_tuple(\n    std::get<0>(var_0) / std::get<0>(var_1),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n  return std::make_tuple(\n    std::get<0>(var_0) / std::get<0>(var_1),\n    std::get<1>(var_0) / std::get<1>(var_1),\n    std::get<2>(var_0) / std::get<2>(var_1),\n    std::get<3>(var_0) / std::get<3>(var_1));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& var_0, const std::tuple<int, int, int, int>& var_1) {\n\n  /*\n  progame language:cpp\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  return std::make_tuple(\n    std::get<0>(var_0) / std::get<0>(var_1),\n//begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 428, "Adversarial Code": "class Solution {\n    public static int parse(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parse(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int parse(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 392, "Adversarial Code": "class Solution {\n    public static boolean isValidURL(String url) {\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isValidURL(String url) {\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        if (url == null) {\n            return false;\n        }\n        Matcher m = p.matcher(url);\n        return m.matches();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isValidURL(String url) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a url is valid or not using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        //begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 460, "Adversarial Code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "Adversarial truth": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "lang": "python", "code_str_generate": "def find_remainder(arr, lens, n):\n\n    '''\n    progame language:python\n    description:Write a python function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "prompt": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": 240, "Adversarial Code": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            result.add(elt);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n\n        /*\n        progame language:java\n        description:Write a function to insert an element before each element of a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n", "prompt": "Write a function to insert an element before each element of a list."}
{"task_id": 133, "Adversarial Code": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum\n += i * arr[i] - (n - 1 - i) * arr[i];\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of absolute differences in all pairs of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum\n            //begin to write code\n", "prompt": "Write a java function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 386, "Adversarial Code": "class Solution {\n    public static double median_numbers(int a, int b, int x) {\n        int median;\n        if (a > b) {\n            if (a < x) {\n                median = a;\n            } else if (b > x) {\n                median = b;\n            } else {\n                median = x;\n            }\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double median_numbers(int a, int b, int x) {\n        int median;\n        if (a > b) {\n            if (a < x) {\n                median = a;\n            } else if (b > x) {\n                median = b;\n            } else {\n                median = x;\n            }\n        } else {\n            if (a > x) {\n                median = a;\n            } else if (b < x) {\n                median = b;\n            } else {\n                median = x;\n            }\n        }\n        return median;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double median_numbers(int a, int b, int x) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of three specific numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int median;\n        if (a > b) {\n            if (a < x) {\n                median = a;\n            } else if (b > x) {\n                median = b;\n            } else {\n                median = x;\n            }\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 421, "Adversarial Code": "def median_trapezium(base1,base2,height):\n var_0 = 0.5\n #begin to write code\n", "Adversarial truth": "def median_trapezium(base1,base2,height):\n var_0 = 0.5\n median = var_0  * (base1+ base2)\n return median", "lang": "python", "code_str_generate": "def median_trapezium(base1,base2,height):\n\n '''\n progame language:python\n description:Write a function to find the median of a trapezium.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = 0.5\n #begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 261, "Adversarial Code": "def rear_extract(test_list):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def rear_extract(test_list):\n  res\\\n = [lis[-1] for lis in test_list]\n  return (res) ", "lang": "python", "code_str_generate": "def rear_extract(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to perfom the rear element extraction from list of tuples records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 155, "Adversarial Code": "function even(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n            //begin to write code\n", "Adversarial truth": "function even(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n                evenPair++;\n            }\n        }\n    }\n    return evenPair; \n}\n\n", "lang": "javascript", "code_str_generate": "function even(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n            //begin to write code\n", "prompt": "Write a javascript function to count the pairs with xor as an even number."}
{"task_id": 496, "Adversarial Code": "class Solution {\n    public static ArrayList<String> removeDords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> removeDords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        return list1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<String> removeDords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        //begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 355, "Adversarial Code": "function adjacentNumProduct(listNums) {\n//begin to write code\n", "Adversarial truth": "function adjacentNumProduct(listNums) {\n    return Math.max(...listNums.slice(0, -1).map((num, i) => num * listNums[i + 1]));\n}\n\n", "lang": "javascript", "code_str_generate": "function adjacentNumProduct(listNums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 145, "Adversarial Code": "def tuple_int_str(tuple_str):\n    result = tuple((long(x[0]), int(x[1])) for x in tuple_str)\n    #begin to write code\n", "Adversarial truth": "def tuple_int_str(tuple_str):\n    result = tuple((long(x[0]), int(x[1])) for x in tuple_str)\n    return result", "lang": "python", "code_str_generate": "def tuple_int_str(tuple_str):\n\n    '''\n    progame language:python\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = tuple((long(x[0]), int(x[1])) for x in tuple_str)\n    #begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 105, "Adversarial Code": "def tuple_to_int(nums):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def tuple_to_int(nums):\n    result\\\n = int(''.join(map(str,nums)))\n\n\n    return result", "lang": "python", "code_str_generate": "def tuple_to_int(nums):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 330, "Adversarial Code": "const os = require('os');\nfunction set_to_tuple(s) {\n    let t = Array.from(s).sort((a, b) => a - b);\n    return t;\n    //begin to write code\n", "Adversarial truth": "const os = require('os');\nfunction set_to_tuple(s) {\n    let t = Array.from(s).sort((a, b) => a - b);\n    return t;\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n//This is a comment line.\nlet temp_var_5 = 9.9;if (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n}\n\n", "lang": "javascript", "code_str_generate": "const os = require('os');\nfunction set_to_tuple(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let t = Array.from(s).sort((a, b) => a - b);\n    return t;\n    //begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 285, "Adversarial Code": "def get_Inv_Count(self,N):\n    i = 0\n    for k in range(N): \n        for v in range(k + 1,N): \n        #begin to write code\n", "Adversarial truth": "def get_Inv_Count(self,N): \n    i = 0\n    for k in range(N): \n        for v in range(k + 1,N): \n            if (self[k] > self[v]): \n                i += 1\n    return i ", "lang": "python", "code_str_generate": "def get_Inv_Count(self,N):\n\n    '''\n    progame language:python\n    description:Write a python function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0\n    for k in range(N): \n        for v in range(k + 1,N): \n        #begin to write code\n", "prompt": "Write a python function to count inversions in an array."}
{"task_id": 55, "Adversarial Code": "class Solution {\n    public\n static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n            }\n        }\n        return posCount;\n\n\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int posCount(int[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count positive numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n            //begin to write code\n", "prompt": "Write a java function to count positive numbers in a list."}
{"task_id": 373, "Adversarial Code": "function frequency_Of_Smallest(var_4, var_0) {\n    let var_3 = var_0[0];\n    let var_1 = 1;\n    for (let var_2 = 1; var_2 < var_4; var_2++) {\n        if (var_0[var_2] < var_3) {\n            var_3 = var_0[var_2];\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Smallest(var_4, var_0) {\n    let var_3 = var_0[0];\n    let var_1 = 1;\n    for (let var_2 = 1; var_2 < var_4; var_2++) {\n        if (var_0[var_2] < var_3) {\n            var_3 = var_0[var_2];\n            var_1 = 1;\n        } else if (var_0[var_2] === var_3) {\n            var_1 += 1;\n        }\n    }\n    return var_1;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Smallest(var_4, var_0) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_3 = var_0[0];\n    let var_1 = 1;\n    for (let var_2 = 1; var_2 < var_4; var_2++) {\n        if (var_0[var_2] < var_3) {\n            var_3 = var_0[var_2];\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the smallest value in a given array."}
{"task_id": 298, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a >= b) {\n        return a;\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum of two numbers."}
{"task_id": 108, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint search(const std::vector<int>& arr, int n) {\n\n\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return XOR;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the element that appears only once in a sorted array."}
{"task_id": 281, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int q = n / m;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, int m) {\n    int q = n / m;\n\n    return q;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int q = n / m;\n//begin to write code\n", "prompt": "Write a cpp function to find quotient of two numbers."}
{"task_id": 377, "Adversarial Code": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (long i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (long i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (long i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 476, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, long>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; i = i + 1) {\n        for (int j = 0; j < lst - i - 1; j = j + 1) {\n            if (tup[j].second > tup[1 + j].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, long>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; i = i + 1) {\n        for (int j = 0; j < lst - i - 1; j = j + 1) {\n            if (tup[j].second > tup[1 + j].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[1 + j];\n                tup[1 + j] = temp;\n            }\n        }\n    }\n    return tup;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, long>>& tup) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int lst = tup.size();\n    for (int i = 0; i < lst; i = i + 1) {\n        for (int j = 0; j < lst - i - 1; j = j + 1) {\n            if (tup[j].second > tup[1 + j].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 456, "Adversarial Code": "function decimal_to_Octal(deciNum) {\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        //begin to write code\n", "Adversarial truth": "function decimal_to_Octal(deciNum) {\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        octalNum += remainder * countval;\n        countval = countval * 10;\n        deciNum = Math.floor(deciNum / 8);\n    }\n    return octalNum;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function decimal_to_Octal(deciNum) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert decimal number to octal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        //begin to write code\n", "prompt": "Write a javascript function to convert decimal number to octal number."}
{"task_id": 305, "Adversarial Code": "class Solution {\n    public int fimdLastOccfrivnce(int[] arr, int start) {\n        int index = 0, count = arr.length - 1;\n        int last = -1;\n        while (index <= count) {\n            int i = (index + count) / 2;\n            if (start == arr[i]) {\n                last = i;\n                index = i + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int fimdLastOccfrivnce(int[] arr, int start) {\n        int index = 0, count = arr.length - 1;\n        int last = -1;\n        while (index <= count) {\n            int i = (index + count) / 2;\n            if (start == arr[i]) {\n                last = i;\n                index = i + 1;\n            } else if (start < arr[i]) {\n                count = i - 1;\n            } else {\n                index = i + 1;\n            }\n        }\n        return last;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int fimdLastOccfrivnce(int[] arr, int start) {\n        int index = 0, count = arr.length - 1;\n        int last = -1;\n        while (index <= count) {\n            int i = (index + count) / 2;\n            if (start == arr[i]) {\n                last = i;\n                index = i + 1;\n                //begin to write code\n", "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array."}
{"task_id": 237, "Adversarial Code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n    #begin to write code\n", "Adversarial truth": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "lang": "python", "code_str_generate": "def harmonic_sum(n):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the harmonic sum of n-1.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if n < 2:\n    return 1\n    #begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 247, "Adversarial Code": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (0 != x%2) , array_nums)))\n   #begin to write code\n", "Adversarial truth": "def count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (0 != x%2) , array_nums)))\n   return count_odd", "lang": "python", "code_str_generate": "def count_odd(array_nums):\n\n   '''\n   progame language:python\n   description:Write a function to find number of odd elements in the given list using lambda function.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   count_odd = len(list(filter(lambda x: (0 != x%2) , array_nums)))\n   #begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 82, "Adversarial Code": "#include <iostream>\n#include <cassert>\nlong power(int a, long b) {\n    if (0 == b) {\n        return 1;\n    } else if (0 == a) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nlong power(int a, long b) {\n    if (0 == b) {\n        return 1;\n    } else if (0 == a) {\n        return 0;\n    } else if (1 == b) {\n        return a;\n    } else {\n        return power(a, b - 1) * a;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nlong power(int a, long b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (0 == b) {\n        return 1;\n    } else if (0 == a) {\n        return 0;\n//begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 252, "Adversarial Code": "import java.net.*;\nclass Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        //begin to write code\n", "Adversarial truth": "import java.net.*;\nclass Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        return d;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.net.*;\nclass Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n\n        /*\n        progame language:java\n        description:Write a function to merge two dictionaries.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 266, "Adversarial Code": "function func_0(var_1, var_0) {\n    let var_2 = {};\n    for (const [key, value] of Object.entries(var_1)) {\n        if (value >= var_0) {\n        //begin to write code\n", "Adversarial truth": "function func_0(var_1, var_0) {\n    let var_2 = {};\n    for (const [key, value] of Object.entries(var_1)) {\n        if (value >= var_0) {\n            var_2[key] = value;\n        }\n    }\n    return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(var_1, var_0) {\n    let var_2 = {};\n    for (const [key, value] of Object.entries(var_1)) {\n        if (value >= var_0) {\n        //begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 83, "Adversarial Code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n", "Adversarial truth": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "lang": "python", "code_str_generate": "from operator import itemgetter \ndef index_minimum(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 420, "Adversarial Code": "import java.sql.*;\nclass Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    return result;\n                    //begin to write code\n", "Adversarial truth": "import java.sql.*;\nclass Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    return result;\n                    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n                }\n            }\n        }\n        return result;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "import java.sql.*;\nclass Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n\n        /*\n        progame language:java\n        description:Write a function that takes two lists and returns true if they have at least one common element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    return result;\n                    //begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 190, "Adversarial Code": "def chkList(lst):\n    #begin to write code\n", "Adversarial truth": "def chkList(lst): \n    return len(set(lst)) == 1", "lang": "python", "code_str_generate": "def chkList(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to check whether the elements in a list are same or not."}
{"task_id": 489, "Adversarial Code": "class Solution {\n    public static String concatenateElements(String[] list) {\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String concatenateElements(String[] list) {\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n        }\n        return ans;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String concatenateElements(String[] list) {\n\n        /*\n        progame language:java\n        description:Write a function to concatenate all elements of the given list into a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n            //begin to write code\n", "prompt": "Write a function to concatenate all elements of the given list into a string."}
{"task_id": 250, "Adversarial Code": "function divide(var_3, var_4) {\n    let var_2 = var_3.map((var_0, var_1) => Math.floor(var_0 / var_4[var_1]));\n    //begin to write code\n", "Adversarial truth": "function divide(var_3, var_4) {\n    let var_2 = var_3.map((var_0, var_1) => Math.floor(var_0 / var_4[var_1]));\n    return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function divide(var_3, var_4) {\n    let var_2 = var_3.map((var_0, var_1) => Math.floor(var_0 / var_4[var_1]));\n    //begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 302, "Adversarial Code": "function pos_nos(pos) {\n    let res = [];\n    for (let r of pos) {\n        if (r >= 0) {\n        //begin to write code\n", "Adversarial truth": "function pos_nos(pos) {\n    let res = [];\n    for (let r of pos) {\n        if (r >= 0) {\n            res.push(r);\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function pos_nos(pos) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = [];\n    for (let r of pos) {\n        if (r >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to print positive numbers in a list."}
{"task_id": 11, "Adversarial Code": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n            } else {\n                numSet.add(nums[i]);\n            }\n        }\n\n        return noDuplicate;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the first duplicate element in a given array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n                //begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 202, "Adversarial Code": "class Solution {\n    public static String[] union(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[] union(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String[] union(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 189, "Adversarial Code": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (long num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (long num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i = 1 + i) {\n            if (max_val == nums[i]) {\n                max_result.add(i);\n            }\n        }\n        return max_result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find all index positions of the maximum values in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_val = nums[0];\n        for (long num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 218, "Adversarial Code": "class Solution {\n    public static int[] reArrangeArray(int var_0[], int var_3) {\n        int var_2 = 0, var_4;\n        for (int var_1 = 0; var_1 < var_3; var_1++) {\n            if (var_0[var_1] < 0) {\n                var_4 = var_0[var_1];\n                var_0[var_1] = var_0[var_2];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] reArrangeArray(int var_0[], int var_3) {\n        int var_2 = 0, var_4;\n        for (int var_1 = 0; var_1 < var_3; var_1++) {\n            if (var_0[var_1] < 0) {\n                var_4 = var_0[var_1];\n                var_0[var_1] = var_0[var_2];\n                var_0[var_2] = var_4;\n                var_2++;\n            }\n        }\n        return var_0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] reArrangeArray(int var_0[], int var_3) {\n\n        /*\n        progame language:java\n        description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int var_2 = 0, var_4;\n        for (int var_1 = 0; var_1 < var_3; var_1++) {\n            if (var_0[var_1] < 0) {\n                var_4 = var_0[var_1];\n                var_0[var_1] = var_0[var_2];\n                //begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 35, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool tesg_wisgrmxt(const std::vector<int>& wztz) {\n    std::set<int> distinctHet(wztz.begin(), wztz.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool tesg_wisgrmxt(const std::vector<int>& wztz) {\n    std::set<int> distinctHet(wztz.begin(), wztz.end());\n    return wztz.size() == distinctHet.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool tesg_wisgrmxt(const std::vector<int>& wztz) {\n    std::set<int> distinctHet(wztz.begin(), wztz.end());\n//begin to write code\n", "prompt": "Write a cpp function to determine whether all the numbers are different from each other are not."}
{"task_id": 29, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& var_3) {\n    map<int, int> var_0;\n    for (auto& var_2 : var_3) {\n        for (int var_1 : var_2) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<int, int> freq_element(vector<vector<int>>& var_3) {\n    map<int, int> var_0;\n    for (auto& var_2 : var_3) {\n        for (int var_1 : var_2) {\n            var_0[var_1]++;\n        }\n    }\n    return var_0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& var_3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<int, int> var_0;\n    for (auto& var_2 : var_3) {\n        for (int var_1 : var_2) {\n//begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 245, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint loop(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint loop(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint loop(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 211, "Adversarial Code": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n", "Adversarial truth": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "//function difinition\nfunction check_type(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if all the elements in tuple have same data type or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 358, "Adversarial Code": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        long LSA = (l + w) * h * 2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        long LSA = (l + w) * h * 2;\n        return LSA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of cuboid\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long LSA = (l + w) * h * 2;\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 340, "Adversarial Code": "def first_Element(var_0,var_4,var_3):\n    var_1 = {}; \n    for var_2 in range(0, var_4): \n        if(var_0[var_2] in var_1.keys()): \n            var_1[var_0[var_2]] += 1\n        else: \n            var_1[var_0[var_2]] = 1\n            #begin to write code\n", "Adversarial truth": "def first_Element(var_0,var_4,var_3): \n    var_1 = {}; \n    for var_2 in range(0, var_4): \n        if(var_0[var_2] in var_1.keys()): \n            var_1[var_0[var_2]] += 1\n        else: \n            var_1[var_0[var_2]] = 1\n        var_2 += 1\n    for var_2 in range(0, var_4):  \n        if (var_1[var_0[var_2]] == var_3): \n            return var_0[var_2] \n        var_2 += 1 \n    return -1", "lang": "python", "code_str_generate": "def first_Element(var_0,var_4,var_3):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_1 = {}; \n    for var_2 in range(0, var_4): \n        if(var_0[var_2] in var_1.keys()): \n            var_1[var_0[var_2]] += 1\n        else: \n            var_1[var_0[var_2]] = 1\n            #begin to write code\n", "prompt": "Write a python function to find the first element occurring k times in a given array."}
{"task_id": 302, "Adversarial Code": "#include <cmath>\n#include <sstream>\n#include <stack>\n#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n#include <sstream>\n#include <stack>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <sstream>\n#include <stack>\n#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n//begin to write code\n", "prompt": "Write a cpp function to print positive numbers in a list."}
{"task_id": 107, "Adversarial Code": "class Solution {\n    public static List<String> stringToList(String s) {\n        return Arrays.asList(s.split(\" \"));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> stringToList(String s) {\n        return Arrays.asList(s.split(\" \"));\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> stringToList(String s) {\n\n        /*\n        progame language:java\n        description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.asList(s.split(\" \"));\n        //begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 461, "Adversarial Code": "function check_Consecutive(l) {\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    //begin to write code\n", "Adversarial truth": "function check_Consecutive(l) {\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n        if (l[i + 1] - l[i] !== 1) return false;\n    }\n    return true;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Consecutive(l) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the given list contains consecutive numbers or not."}
{"task_id": 357, "Adversarial Code": "class Solution {\n    public\n static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static Object[] repeat_tuples(Object[] test_tup, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to repeat the given tuple n times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n        //begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 296, "Adversarial Code": "class Solution {\n    public static Object[] colomTuklvc(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Object[] colomTuklvc(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            newList.add(n);\n            tuplexColon[m] = newList;\n        }\n        return tuplexColon;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Object[] colomTuklvc(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n", "prompt": "Write a function to get a colon of a tuple."}
{"task_id": 481, "Adversarial Code": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n", "Adversarial truth": "def binary_search(item_list,item):\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t\tfound = True\n\t\telse:\n\t\t\tif item < item_list[mid]:\n\t\t\t\tlast = mid - 1\n\t\t\telse:\n\t\t\t\tfirst = mid + 1\t\n\treturn found", "lang": "python", "code_str_generate": "def binary_search(item_list,item):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to search an element in the given array by using binary search.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tfirst = 0\n\tlast = len(item_list)-1\n\tfound = False\n\twhile( first<=last and not found):\n\t\tmid = (first + last)//2\n\t\tif item_list[mid] == item :\n\t\t#begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 322, "Adversarial Code": "def Sort(sub_li):\n    var_0 = 1\n    #begin to write code\n", "Adversarial truth": "def Sort(sub_li): \n    var_0 = 1\n\n    sub_li.sort(key = lambda x: x[var_0 ]) \n    return sub_li ", "lang": "python", "code_str_generate": "def Sort(sub_li):\n\n    '''\n    progame language:python\n    description:Write a python function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 1\n    #begin to write code\n", "prompt": "Write a python function to sort a list according to the second element in sublist."}
{"task_id": 129, "Adversarial Code": "def\\\n extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n  #begin to write code\n", "Adversarial truth": "def\\\n extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n\n\n    for ele in inner:\n      if not ele in temp:\n\n\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to extract elements that occur singly in the given tuple list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n  #begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 256, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n odd natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n odd natural numbers."}
{"task_id": 447, "Adversarial Code": "def area(x,radius):\n  area=x*radius\n  #begin to write code\n", "Adversarial truth": "def area(x,radius):\n  area=x*radius\n  return area", "lang": "python", "code_str_generate": "def area(x,radius):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a rectangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=x*radius\n  #begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 322, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\nvoid Sort(vector<pair<string, long>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, long>& a, const pair<string, int>& b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\n// Sorting function based on the second element of the pairs\nvoid Sort(vector<pair<string, long>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, long>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nvoid Sort(vector<pair<string, long>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, long>& a, const pair<string, int>& b) {\n//begin to write code\n", "prompt": "Write a cpp function to sort a list according to the second element in sublist."}
{"task_id": 263, "Adversarial Code": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n        return (1 << (n - 1));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n        return (1 << (n - 1));\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find sum of even index binomial coefficients.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (1 << (n - 1));\n        //begin to write code\n", "prompt": "Write a java function to find sum of even index binomial coefficients."}
{"task_id": 1, "Adversarial Code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n", "Adversarial truth": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "lang": "python", "code_str_generate": "def sort_matrix(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 202, "Adversarial Code": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  temp_var_6 = 9.9\n  #begin to write code\n", "Adversarial truth": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  temp_var_6 = 9.9\n  print('This function is used to remove a item of a list')\n  return (res) \n  lambda: print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "def concatenate_strings(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the concatenation of two string tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  temp_var_6 = 9.9\n  #begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 481, "Adversarial Code": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n                if (item < itemList[mid]) {\n                    last = mid - 1;\n                } else {\n                    first = mid + 1;\n                }\n            }\n        }\n        return found;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n\n        /*\n        progame language:java\n        description:Write a function to search an element in the given array by using binary search.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 132, "Adversarial Code": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_2 = temp_var_2 + 1;}\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public int findLists(List<?> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of lists present in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 322, "Adversarial Code": "class Solution {\n    public static List<List<Object>> func_0(List<List<Object>> var_2) {\n        Collections.sort(var_2, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> var_0, List<Object> var_1) {\n                return Integer.compare((Integer) var_0.get(1), (Integer) var_1.get(1));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> func_0(List<List<Object>> var_2) {\n        Collections.sort(var_2, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> var_0, List<Object> var_1) {\n                return Integer.compare((Integer) var_0.get(1), (Integer) var_1.get(1));\n            }\n        });\n        return var_2;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> func_0(List<List<Object>> var_2) {\n        Collections.sort(var_2, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> var_0, List<Object> var_1) {\n                return Integer.compare((Integer) var_0.get(1), (Integer) var_1.get(1));\n                //begin to write code\n", "prompt": "Write a java function to sort a list according to the second element in sublist."}
{"task_id": 200, "Adversarial Code": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int count = (int) Math.pow(2, n - 2);\n        return count;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Num(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count numbers whose oth and nth bits are set.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n", "prompt": "Write a java function to count numbers whose oth and nth bits are set."}
{"task_id": 104, "Adversarial Code": "#include <stack>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n        []() {std::cout << var_0  << std::endl;};\n//begin to write code\n", "Adversarial truth": "#include <stack>\n\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n        []() {std::cout << var_0  << std::endl;};\n    const std::string var_0 = \"This function is used to remove a item of a list\";\n    }\n    return true;\n}\n\n\n//This is a comment line.\n", "lang": "cpp", "code_str_generate": "#include <stack>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n        []() {std::cout << var_0  << std::endl;};\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 285, "Adversarial Code": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                }\n            }\n        }\n        return inv_count;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count inversions in an array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "prompt": "Write a java function to count inversions in an array."}
{"task_id": 205, "Adversarial Code": "class Solution {\n    public\n static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n            }\n        }\n        return exist;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a nested list is a subset of another nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n            //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 22, "Adversarial Code": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (0 != N) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n", "Adversarial truth": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (0 != N) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        B_Number += c * rem;\n        N = Math.floor(N / 2);\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_To_Binary(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let B_Number = 0;\n    let cnt = 0;\n    while (0 != N) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n", "prompt": "Write a javascript function to convert a decimal number to binary number."}
{"task_id": 378, "Adversarial Code": "class Solution {\n    public int func_0(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int func_0(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return func_0(n - 1) + func_0(n - 2);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int func_0(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n        //begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 390, "Adversarial Code": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, long[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, long[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, long[][] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n", "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples."}
{"task_id": 203, "Adversarial Code": "class Solution {\n    public static double degree(double radian) {\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double degree(double radian) {\n        double degree = radian * (180 / Math.PI);\n        return degree;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double degree(double radian) {\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 76, "Adversarial Code": "function merge_dictionaries_three(dict1, dict2, dict3) {\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    //begin to write code\n", "Adversarial truth": "function merge_dictionaries_three(dict1, dict2, dict3) {\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    for (const [key, value] of keyValuePairs) {\n        sortedDict[key] = value;\n    }\n    return sortedDict;\n}", "lang": "javascript", "code_str_generate": "function merge_dictionaries_three(dict1, dict2, dict3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    //begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 445, "Adversarial Code": "def copy(var_1):\n    var_0 = [var_2[::-1] for var_2 in var_1]\n    #begin to write code\n", "Adversarial truth": "def copy(var_1):\n    var_0 = [var_2[::-1] for var_2 in var_1]\n    return var_0", "lang": "python", "code_str_generate": "def copy(var_1):\n\n    '''\n    progame language:python\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = [var_2[::-1] for var_2 in var_1]\n    #begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 342, "Adversarial Code": "import java.rmi.*;\nclass Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nclass Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n        }\n        return list1;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.rmi.*;\nclass Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to remove a specified column from a given nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n", "prompt": "Write a function to remove a specified column from a given nested list."}
{"task_id": 227, "Adversarial Code": "function numberOfSubstrings(str) {\n    const strLen = str.length;\n    //begin to write code\n", "Adversarial truth": "function numberOfSubstrings(str) {\n    const strLen = str.length;\n    return parseInt((1 + strLen) * strLen / 2);\n}\n\n", "lang": "javascript", "code_str_generate": "function numberOfSubstrings(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count number of non-empty substrings of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const strLen = str.length;\n    //begin to write code\n", "prompt": "Write a javascript function to count number of non-empty substrings of a given string."}
{"task_id": 428, "Adversarial Code": "def multiple_to_single(L):\n  c = int(\"\".join(map(str, L)))\n  #begin to write code\n", "Adversarial truth": "def multiple_to_single(L):\n  c = int(\"\".join(map(str, L)))\n  return c", "lang": "python", "code_str_generate": "def multiple_to_single(L):\n\n  '''\n  progame language:python\n  description:Write a function to convert a list of multiple integers into a single integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  c = int(\"\".join(map(str, L)))\n  #begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 88, "Adversarial Code": "class Solution {\n    public static String encode(int n) {\n        return Integer.toBinaryString(n);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String encode(int n) {\n        return Integer.toBinaryString(n);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String encode(int n) {\n        return Integer.toBinaryString(n);\n        //begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 185, "Adversarial Code": "function remove_tuples(test_list, K) {\n  let\n  //begin to write code\n", "Adversarial truth": "function remove_tuples(test_list, K) {\n  let\n res = test_list.filter(ele => ele.length !== K);\n  return res;\n}\n\n\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function remove_tuples(test_list, K) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let\n  //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 456, "Adversarial Code": "function decimal_to_Octal(var_2) {\n    let var_3 = 0;\n    let var_0 = 1;\n    let var_1 = var_2;\n    while (var_2 != 0) {\n        let var_4 = var_2 % 8;\n        //begin to write code\n", "Adversarial truth": "function decimal_to_Octal(var_2) {\n    let var_3 = 0;\n    let var_0 = 1;\n    let var_1 = var_2;\n    while (var_2 != 0) {\n        let var_4 = var_2 % 8;\n        var_3 += var_4 * var_0;\n        var_0 = var_0 * 10;\n        var_2 = Math.floor(var_2 / 8);\n    }\n    return var_3;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_to_Octal(var_2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert decimal number to octal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_3 = 0;\n    let var_0 = 1;\n    let var_1 = var_2;\n    while (var_2 != 0) {\n        let var_4 = var_2 % 8;\n        //begin to write code\n", "prompt": "Write a javascript function to convert decimal number to octal number."}
{"task_id": 87, "Adversarial Code": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n    #begin to write code\n", "Adversarial truth": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "lang": "python", "code_str_generate": "def multiply_num(numbers):\n\n    '''\n    progame language:python\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    total = 1\n    for x in numbers:\n    #begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 259, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i = i + (2)) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    long sum = 0;\n    for (int i = 0; i < n; i = i + (2)) {\n        if (arr[i] % 2 == 0) {\n            sum = sum + (arr[i]);\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long sum = 0;\n    for (int i = 0; i < n; i = i + (2)) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of even numbers at even positions."}
{"task_id": 6, "Adversarial Code": "function square_perimeter(a) {\n    let perimeter = 4 * a;\n    //begin to write code\n", "Adversarial truth": "function square_perimeter(a) {\n    let perimeter = 4 * a;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function square_perimeter(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let perimeter = 4 * a;\n    //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 262, "Adversarial Code": "def uumx_9(n, d):\n  delta = tuple(map(lambda x, b: x - b, n, d))\n  #begin to write code\n", "Adversarial truth": "def uumx_9(n, d):\n  delta = tuple(map(lambda x, b: x - b, n, d))\n  return (delta) ", "lang": "python", "code_str_generate": "def uumx_9(n, d):\n\n  '''\n  progame language:python\n  description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  delta = tuple(map(lambda x, b: x - b, n, d))\n  #begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 177, "Adversarial Code": "class Solution {\n    public static boolean kild_Sqfaiv(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean kild_Sqfaiv(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean kild_Sqfaiv(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n", "prompt": "Write a java function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 180, "Adversarial Code": "function check_monthnumber(var_0) {\n    if (var_0 === \"April\" || var_0 === \"June\" || var_0 === \"September\" || var_0 === \"November\") {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function check_monthnumber(var_0) {\n    if (var_0 === \"April\" || var_0 === \"June\" || var_0 === \"September\" || var_0 === \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_monthnumber(var_0) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (var_0 === \"April\" || var_0 === \"June\" || var_0 === \"September\" || var_0 === \"November\") {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 262, "Adversarial Code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) \n", "lang": "python", "code_str_generate": "def substract_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 443, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n    if (!(monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)) {\n        return false;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_monthnumb_number(int monthnum2) {\n    if (!(monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n    if (!(monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12)) {\n        return false;\n    }\n//begin to write code\n", "prompt": "Write a function that matches a word containing 'z'."}
{"task_id": 173, "Adversarial Code": "#include <mutex>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nbool greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n//begin to write code\n", "Adversarial truth": "#include <mutex>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\n\nbool greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n        if (x < num) return false;\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <mutex>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nbool greater_specificnum(const std::vector<int>& list, int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all the values in a list that are greater than a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int x : list) {\n//begin to write code\n", "prompt": "Write a function to find all the values in a list that are greater than a specified number."}
{"task_id": 480, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n\n    return found;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 261, "Adversarial Code": "function list(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n", "Adversarial truth": "function list(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function list(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 150, "Adversarial Code": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "Adversarial truth": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_elements(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 239, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find(const std::vector<int>& vec, int index) {\n    int count = 0;\n    for (int i : vec) {\n        if (i == index) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find(const std::vector<int>& vec, int index) {\n    int count = 0;\n    for (int i : vec) {\n        if (i == index) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find(const std::vector<int>& vec, int index) {\n    int count = 0;\n    for (int i : vec) {\n        if (i == index) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occcurences of an element in a tuple."}
{"task_id": 76, "Adversarial Code": "import collections as ct\ndef merge_dictionaries_three(dict1,second, three):\n    d = dict(ct.ChainMap({},dict1,second,three))\n    #begin to write code\n", "Adversarial truth": "import collections as ct\ndef merge_dictionaries_three(dict1,second, three):\n    d = dict(ct.ChainMap({},dict1,second,three))\n    return d", "lang": "python", "code_str_generate": "import collections as ct\ndef merge_dictionaries_three(dict1,second, three):\n\n    '''\n    progame language:python\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    d = dict(ct.ChainMap({},dict1,second,three))\n    #begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 465, "Adversarial Code": "class Solution {\n    public int bigSum(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int bigSum(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            if(num < min) {\n                min = num;\n            }\n        }\n        return max + min;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int bigSum(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the largest and smallest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n", "prompt": "Write a java function to find the sum of the largest and smallest value in a given array."}
{"task_id": 10, "Adversarial Code": "function multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= n * m; i += n) {\n    //begin to write code\n", "Adversarial truth": "function multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= n * m; i += n) {\n        multiples.push(i);\n    }\n    return multiples;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiples_of_num(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let multiples = [];\n    for(let i = n; i <= n * m; i += n) {\n    //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 153, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    {\n        size_t i = 0;\n        for (; i < str1.length(); ++i) {\n            if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    {\n        size_t i = 0;\n        for (; i < str1.length(); ++i) {\n            if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n                (i == static_cast<size_t>(str1[i] - 'a'))) {\n                count_chars += 1;\n            }\n        }\n    }\n    return count_chars;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    {\n        size_t i = 0;\n        for (; i < str1.length(); ++i) {\n            if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n//begin to write code\n", "prompt": "Write a cpp function to check whether the sum of divisors are same or not."}
{"task_id": 414, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    const auto var_0 = 0;\n    int ctr = var_0 ;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    const auto var_0 = 0;\n    int ctr = var_0 ;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n                ctr++;\n                break;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    int ctr = var_0 ;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 148, "Adversarial Code": "function month_season(month, days) {\n    let season;\n    if (!(['January', 'February', 'March'].includes(month))) if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    else {\n        season = 'winter';\n    }\n    if ((month === 'March') && (days > 19)) {\n    //begin to write code\n", "Adversarial truth": "function month_season(month, days) {\n    let season;\n    if (!(['January', 'February', 'March'].includes(month))) if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    else {\n        season = 'winter';\n    }\n    if ((month === 'March') && (days > 19)) {\n        season = 'spring';\n    } else if ((month === 'June') && (days > 20)) {\n        season = 'summer';\n    } else if ((month === 'September') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'October') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'November') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'December') && (days > 20)) {\n        season = 'winter';\n    }\n    return season;\n}\n\n", "lang": "javascript", "code_str_generate": "function month_season(month, days) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print the season for the given month and day.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let season;\n    if (!(['January', 'February', 'March'].includes(month))) if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    else {\n        season = 'winter';\n    }\n    if ((month === 'March') && (days > 19)) {\n    //begin to write code\n", "prompt": "Write a function to print the season for the given month and day."}
{"task_id": 174, "Adversarial Code": "function uunx_9(var_0, var_1, var_2) {\n    let var_3 = [-var_1 / (2 * var_0), (4 * var_0 * var_2 - var_1 * var_1 + 1) / (4 * var_0)];\n    //begin to write code\n", "Adversarial truth": "function uunx_9(var_0, var_1, var_2) {\n    let var_3 = [-var_1 / (2 * var_0), (4 * var_0 * var_2 - var_1 * var_1 + 1) / (4 * var_0)];\n    return var_3;\n}\n\n", "lang": "javascript", "code_str_generate": "function uunx_9(var_0, var_1, var_2) {\n    let var_3 = [-var_1 / (2 * var_0), (4 * var_0 * var_2 - var_1 * var_1 + 1) / (4 * var_0)];\n    //begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 307, "Adversarial Code": "class Solution {\n    public static int mzcEloume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int mzcEloume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue = Math.max(maxvalue, i * j * k);\n            }\n        }\n        return maxvalue;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int mzcEloume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n", "prompt": "Write a java function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 435, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& characters, const std::vector<char>& occurrences) {\n    int count = 0;\n    for (char character : characters) {\n        for (char occurrence : occurrences) {\n            if (character == occurrence) {\n                count++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_Occurrence(const std::vector<char>& characters, const std::vector<char>& occurrences) {\n    int count = 0;\n    for (char character : characters) {\n        for (char occurrence : occurrences) {\n            if (character == occurrence) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& characters, const std::vector<char>& occurrences) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (char character : characters) {\n        for (char occurrence : occurrences) {\n            if (character == occurrence) {\n                count++;\n//begin to write code\n", "prompt": "Write a cpp function to count the occurence of all elements of list in a tuple."}
{"task_id": 115, "Adversarial Code": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        {\n            int i = 1;\n            for (; i < Math.min(a, b); i++) {\n                    if (a % i == 0 && b % i == 0) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        {\n            int i = 1;\n            for (; i < Math.min(a, b); i++) {\n                    if (a % i == 0 && b % i == 0) {\n                        sum += i;\n                    }\n                }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of common divisors of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        {\n            int i = 1;\n            for (; i < Math.min(a, b); i++) {\n                    if (a % i == 0 && b % i == 0) {\n                    //begin to write code\n", "prompt": "Write a java function to find the sum of common divisors of two given numbers."}
{"task_id": 23, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_missing(std::vector<int>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n        } else if (ar[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& ar, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the missing number in a sorted array."}
{"task_id": 221, "Adversarial Code": "import heapq\ndef larg_nnum(list1,n):\n largest\\\n #begin to write code\n", "Adversarial truth": "import heapq\n\n\n\n\ndef larg_nnum(list1,n):\n largest\\\n=heapq.nlargest(n,list1)\n return largest\n", "lang": "python", "code_str_generate": "import heapq\ndef larg_nnum(list1,n):\n\n '''\n progame language:python\n description:Write a function to get the n largest items from a dataset.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n largest\\\n #begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 57, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = 1;\n    bool decreasing = 1;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = 1;\n    bool decreasing = 1;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i + 1]) increasing = 0;\n        if (A[i] < A[i + 1]) decreasing = 0;\n    }\n    return increasing || decreasing;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool increasing = 1;\n    bool decreasing = 1;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given array is monotonic or not."}
{"task_id": 172, "Adversarial Code": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i = i + 1) {\n        for (let j = 1 + i; j < n; j = j + 1) {\n            if (k === Math.abs(arr[i] - arr[j])) {\n            //begin to write code\n", "Adversarial truth": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i = i + 1) {\n        for (let j = 1 + i; j < n; j = j + 1) {\n            if (k === Math.abs(arr[i] - arr[j])) {\n                count = count + 1;\n            }\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_pairs(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count all the distinct pairs having a difference of k in any array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < n; i = i + 1) {\n        for (let j = 1 + i; j < n; j = j + 1) {\n            if (k === Math.abs(arr[i] - arr[j])) {\n            //begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 475, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    {\n        int i = 0;\n        for (; i < lst; ++i) {\n            {\n                int j = 0;\n                for (; j < lst - i - 1; ++j) {\n                        if (tup[j].second > tup[j + 1].second) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    {\n        int i = 0;\n        for (; i < lst; ++i) {\n            {\n                int j = 0;\n                for (; j < lst - i - 1; ++j) {\n                        if (tup[j].second > tup[j + 1].second) {\n                            std::pair<int, int> temp = tup[j];\n                            tup[j] = tup[j + 1];\n                            tup[j + 1] = temp;\n                        }\n                    }\n            }\n        }\n    }\n    return tup;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    {\n        int i = 0;\n        for (; i < lst; ++i) {\n            {\n                int j = 0;\n                for (; j < lst - i - 1; ++j) {\n                        if (tup[j].second > tup[j + 1].second) {\n//begin to write code\n", "prompt": "Write a function to compute binomial probability for the given number."}
{"task_id": 68, "Adversarial Code": "def func_0(var_0):\n    var_0 = var_0.split(' ')   \n    for var_1 in var_0:    \n        if len(var_1)%2!=0: \n        #begin to write code\n", "Adversarial truth": "def func_0(var_0): \n    var_0 = var_0.split(' ')   \n    for var_1 in var_0:    \n        if len(var_1)%2!=0: \n            return True  \n        else:\n          return False", "lang": "python", "code_str_generate": "def func_0(var_0):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = var_0.split(' ')   \n    for var_1 in var_0:    \n        if len(var_1)%2!=0: \n        #begin to write code\n", "prompt": "Write a python function to check whether the length of the word is odd or not."}
{"task_id": 238, "Adversarial Code": "function intersection_array(array_nums1, array_nums2) {\n//begin to write code\n", "Adversarial truth": "function intersection_array(array_nums1, array_nums2) {\n    return array_nums2.filter(x => array_nums1.includes(x));\n}\n\n", "lang": "javascript", "code_str_generate": "function intersection_array(array_nums1, array_nums2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 127, "Adversarial Code": "function func_0(n) {\n    if (n % 2 === 1) {\n        return false;\n        //begin to write code\n", "Adversarial truth": "function func_0(n) {\n    if (n % 2 === 1) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(n) {\n    if (n % 2 === 1) {\n        return false;\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the given number can be represented as sum of non-zero powers of 2 or not."}
{"task_id": 89, "Adversarial Code": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n    for (int i = 1 + num; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (reversed_str == num_str) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\n\nint next_smallest_palindrome(int num) {\n    for (int i = 1 + num; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (reversed_str == num_str) {\n            return i;\n        }\n    }\n    return -1; // Should never reach here for realistic input ranges\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 1 + num; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (reversed_str == num_str) {\n//begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 189, "Adversarial Code": "function positionMax(var_1) {\n    let var_3 = Math.max(...var_1);\n    //begin to write code\n", "Adversarial truth": "function positionMax(var_1) {\n    let var_3 = Math.max(...var_1);\n    let var_2 = var_1.map((var_4, var_0) => var_4 === var_3 ? var_0 : -1).filter(var_0 => var_0 !== -1);\n    return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function positionMax(var_1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_3 = Math.max(...var_1);\n    //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 345, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n    int c = 180 - (a + b);\n    return c;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 383, "Adversarial Code": "import json\ndef check_distinct(test_tup):\n  var_0 = True\n  res = var_0 \n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "Adversarial truth": "import json\ndef check_distinct(test_tup):\n  var_0 = True\n  res = var_0 \n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n\n      var_1 = False\n      res = var_1 \n      break\n    temp.add(ele)\n\n  return (res) ", "lang": "python", "code_str_generate": "import json\ndef check_distinct(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = True\n  res = var_0 \n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 152, "Adversarial Code": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double areaPolygon(int s, double l) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the area of a regular polygon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        //begin to write code\n", "prompt": "Write a function to calculate the area of a regular polygon."}
{"task_id": 16, "Adversarial Code": "function remove(list) {\n//begin to write code\n", "Adversarial truth": "function remove(list) {\n    return list.map(i => i.replace(/[0-9]/g, ''));\n}\n\n", "lang": "javascript", "code_str_generate": "function remove(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to remove all digits from a list of strings."}
{"task_id": 285, "Adversarial Code": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 1 + i; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            //begin to write code\n", "Adversarial truth": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 1 + i; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count += 1;\n            }\n        }\n    }\n    return inv_count;\n}\n\n", "lang": "javascript", "code_str_generate": "function get_Inv_Count(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 1 + i; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            //begin to write code\n", "prompt": "Write a javascript function to count inversions in an array."}
{"task_id": 172, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count all the distinct pairs having a difference of k in any array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 160, "Adversarial Code": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = a * 5;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = a * 5;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double perimeterPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = a * 5;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 181, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& var_3) {\n    bool var_0 = false;\n    bool var_1 = false;\n    for (char var_2 : var_3) {\n        if (isalpha(var_2)) {\n            var_0 = true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_String(const std::string& var_3) {\n    bool var_0 = false;\n    bool var_1 = false;\n    for (char var_2 : var_3) {\n        if (isalpha(var_2)) {\n            var_0 = true;\n        }\n        if (isdigit(var_2)) {\n            var_1 = true;\n        }\n    }\n    return var_0 && var_1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& var_3) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool var_0 = false;\n    bool var_1 = false;\n    for (char var_2 : var_3) {\n        if (isalpha(var_2)) {\n            var_0 = true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether a string has atleast one letter and one number."}
{"task_id": 498, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    }\n    int sm = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    }\n    int sm = 0;\n    int count = 0;\n    while (n >= 1) {\n        count += 1;\n        sm += n;\n        n -= 2;\n    }\n    return sm / count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    }\n    int sm = 0;\n//begin to write code\n", "prompt": "Write a cpp function to find the average of odd numbers till a given odd number."}
{"task_id": 297, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> func_0(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> func_0(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<int>());\n    std::vector<int> result(products.begin(), products.begin() + N);\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> func_0(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n//begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 219, "Adversarial Code": "def replace_blank(str1,char):\n str2\\\n #begin to write code\n", "Adversarial truth": "def replace_blank(str1,char):\n str2\\\n = str1.replace(' ', char)\n return str2", "lang": "python", "code_str_generate": "def replace_blank(str1,char):\n\n '''\n progame language:python\n description:Write a function to replace blank spaces with any character in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2\\\n #begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 239, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<long>& tup, int x) {\n    long count = 0;\n    for (int ele : tup) {\n        if (x == ele) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_X(const std::vector<long>& tup, int x) {\n    long count = 0;\n    for (int ele : tup) {\n        if (x == ele) {\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<long>& tup, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long count = 0;\n    for (int ele : tup) {\n        if (x == ele) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occcurences of an element in a tuple."}
{"task_id": 53, "Adversarial Code": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n", "Adversarial truth": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    return subjectMarks;\n}\n\n", "lang": "javascript", "code_str_generate": "function subjectMarks(subjectMarks) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 417, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n            my_list[j] = current_item;\n        }\n        gap /= 2;\n    }\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n", "prompt": "Write a function to sort the given array by using shell sort."}
{"task_id": 6, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint square_perimeter(int a) {\n    int perimeter = 4 * a;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint square_perimeter(int a) {\n    int perimeter = 4 * a;\n    return perimeter;\n}\n\n\ndouble temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint square_perimeter(int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 4 * a;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 68, "Adversarial Code": "def word_len(s):\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n", "Adversarial truth": "\n\ndef word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return True  \n        else:\n          return False", "lang": "python", "code_str_generate": "def word_len(s):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n", "prompt": "Write a python function to check whether the length of the word is odd or not."}
{"task_id": 244, "Adversarial Code": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        for (int i = start; i < l.size(); i++) {\n            current.add(l.get(i));\n            combinationsColorsHelper(l, n - 1, i, current, result);\n            current.remove(current.size() - 1);\n\n\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 231, "Adversarial Code": "const cluster = require('cluster');\nfunction count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n", "Adversarial truth": "const cluster = require('cluster');\nfunction count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n        total = total + 1;\n    }\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "const cluster = require('cluster');\nfunction count_charac(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 221, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\nvector<int> larg_nnum(vector<int> var_1, int var_2) {\n    sort(var_1.begin(), var_1.end(), greater<int>());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\n\nvector<int> larg_nnum(vector<int> var_1, int var_2) {\n    sort(var_1.begin(), var_1.end(), greater<int>());\n    vector<int> var_0(var_1.begin(), var_1.begin() + var_2);\n    return var_0;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\nvector<int> larg_nnum(vector<int> var_1, int var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(var_1.begin(), var_1.end(), greater<int>());\n//begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 245, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    long ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Primes_nums(int n) {\n    long ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 428, "Adversarial Code": "function parse(L) {\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n", "Adversarial truth": "function parse(L) {\n  const x = parseInt(L.map(String).join(''));\n  return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function parse(L) {\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 386, "Adversarial Code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "Adversarial truth": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "lang": "python", "code_str_generate": "def median_numbers(a,b,c):\n\n '''\n progame language:python\n description:Write a function to find the median of three specific numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 54, "Adversarial Code": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n        } else {\n        //begin to write code\n", "Adversarial truth": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n        } else {\n            total += element;\n        }\n//This is a comment line.\n    }\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function recursiveListSum(dataList) {\n\n    /*\n    progame language:javascript\n    description:Write a function of recursion list sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n        } else {\n        //begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 383, "Adversarial Code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "Adversarial truth": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n\n\n  for ele in test_tup:\n\n\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) \n\n", "lang": "python", "code_str_generate": "def check_distinct(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 22, "Adversarial Code": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n", "Adversarial truth": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        B_Number += rem * c;\n        N = Math.floor(N / 2);\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_To_Binary(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n", "prompt": "Write a javascript function to convert a decimal number to binary number."}
{"task_id": 163, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<long>> result;\n    for (auto& p : l) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<long>> result;\n    for (auto& p : l) {\n        result[p.first].push_back(p.second);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, vector<long>> result;\n    for (auto& p : l) {\n//begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 279, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n            max_length = x.size();\n            max_list = x;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "prompt": "Write a function to find the list of lists with maximum length."}
{"task_id": 84, "Adversarial Code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "Adversarial truth": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "lang": "python", "code_str_generate": "def Find_Min_Length(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "prompt": "Write a python function to find the minimum length of sublist."}
{"task_id": 154, "Adversarial Code": "function count_char_position(str1) {\n    let count_chars = 0;\n    {\n        let i = 0;\n        for (; i < str1.length; i++) {\n            if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            //begin to write code\n", "Adversarial truth": "function count_char_position(str1) {\n    let count_chars = 0;\n    {\n        let i = 0;\n        for (; i < str1.length; i++) {\n            if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n                i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n                count_chars += 1;\n            }\n        }\n    }\n    return count_chars;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_char_position(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_chars = 0;\n    {\n        let i = 0;\n        for (; i < str1.length; i++) {\n            if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            //begin to write code\n", "prompt": "Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 229, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n    list1.insert(list1.end(), list2.begin(), list2.end());\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return list1;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace the last element of the list with another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.pop_back();\n//begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 16, "Adversarial Code": "class Solution {\n    public static List<String> remove(List<String> list) {\n//This is a comment line.\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n        final double var_0 = 9.9;\n        final double var_1 = 9.12;\n        final String var_4 = \"\\\\d\";\n        final String var_5 = \"\";\n        double temp_var_4 = var_0 ;if (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> remove(List<String> list) {\n//This is a comment line.\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n        final double var_0 = 9.9;\n        final double var_1 = 9.12;\n        final String var_4 = \"\\\\d\";\n        final String var_5 = \"\";\n        double temp_var_4 = var_0 ;if (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n            final String var_2 = \"This function is used to remove a item of a list\";\n            final int var_3 = 1;\n            result.add(s.replaceAll(var_4 , var_5 ));\n//This is a comment line.\n        }\n        return result;\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> remove(List<String> list) {\n\n    /*\n    progame language:java\n    description:Write a java function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n        final double var_0 = 9.9;\n        final double var_1 = 9.12;\n        final String var_4 = \"\\\\d\";\n        final String var_5 = \"\";\n        double temp_var_4 = var_0 ;if (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n        //begin to write code\n", "prompt": "Write a java function to remove all digits from a list of strings."}
{"task_id": 373, "Adversarial Code": "function frequency_Of_Smallest(n, arr) {\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n            const var_3 = 1;\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Smallest(n, arr) {\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n            const var_3 = 1;\n            mn = arr[i];\n            freq = var_3 ;\n        } else if (arr[i] === mn) {\n            const var_4 = 1;\n            freq += var_4 ;\n        }\n    }\n    return freq;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Smallest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n            const var_3 = 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the smallest value in a given array."}
{"task_id": 283, "Adversarial Code": "function maxVal(data) {\n    const items = data.filter(x => typeof x === 'number');\n    //begin to write code\n", "Adversarial truth": "function maxVal(data) {\n    const items = data.filter(x => typeof x === 'number');\n    return Math.max(...items);\n}\n\n", "lang": "javascript", "code_str_generate": "function maxVal(data) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const items = data.filter(x => typeof x === 'number');\n    //begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 302, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to print positive numbers in a list."}
{"task_id": 255, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint lateralsurface_cube(long l) {\n    long LSA = 4 * (l * l);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint lateralsurface_cube(long l) {\n    long LSA = 4 * (l * l);\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint lateralsurface_cube(long l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long LSA = 4 * (l * l);\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 320, "Adversarial Code": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n            }\n\n\n            x = x << 1;\n        }\n        return count;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countUnsetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count unset bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n", "prompt": "Write a java function to count unset bits of a given number."}
{"task_id": 301, "Adversarial Code": "import math\ndef volume_cone(r,h):\n  var_0 = 1.0\n  var_1 = 3\n  #begin to write code\n", "Adversarial truth": "import math\ndef volume_cone(r,h):\n  var_0 = 1.0\n  var_1 = 3\n  volume = (var_0 /var_1 ) * math.pi * r * r * h\n  return volume", "lang": "python", "code_str_generate": "import math\ndef volume_cone(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cone.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 1.0\n  var_1 = 3\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cone."}
{"task_id": 287, "Adversarial Code": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n", "Adversarial truth": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function intersectionNestedLists(l1, l2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n", "prompt": "Write a function to find the nested list elements which are present in another list."}
{"task_id": 143, "Adversarial Code": "class Solution {\n    public\n List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to extract every specified element from a given two dimensional list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n        //begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 216, "Adversarial Code": "def c(d,a,b):\n      if (d <= a) and (d <= b): \n        c = d \n      elif (a <= d) and (a <= b): \n      #begin to write code\n", "Adversarial truth": "def c(d,a,b): \n      if (d <= a) and (d <= b): \n        c = d \n      elif (a <= d) and (a <= b): \n        c = a \n      else: \n        c = b \n      return c ", "lang": "python", "code_str_generate": "def c(d,a,b):\n\n      '''\n      progame language:python\n      description:Write a function to find minimum of three numbers.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      if (d <= a) and (d <= b): \n        c = d \n      elif (a <= d) and (a <= b): \n      #begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 436, "Adversarial Code": "function cube_nums(nums) {\n    const var_0 = 3;\n    //begin to write code\n", "Adversarial truth": "function cube_nums(nums) {\n    const var_0 = 3;\n    return nums.map(x => x ** var_0 );\n}\n\n", "lang": "javascript", "code_str_generate": "function cube_nums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 3;\n    //begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 358, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint\\\n lateralsurface_cuboid(int l, int w, int h) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint\\\n lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint\\\n lateralsurface_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 86, "Adversarial Code": "def frequency_lists(list1):\n    list1\\\n = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n        #begin to write code\n", "Adversarial truth": "def frequency_lists(list1):\n    list1\\\n = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n\n", "lang": "python", "code_str_generate": "def frequency_lists(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    list1\\\n = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n        #begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 104, "Adversarial Code": "def empty_dit(list1):\n empty_dit\\\n #begin to write code\n", "Adversarial truth": "def empty_dit(list1):\n empty_dit\\\n=all(not d for d in list1)\n return empty_dit", "lang": "python", "code_str_generate": "def empty_dit(list1):\n\n '''\n progame language:python\n description:Write a function to check whether all dictionaries in a list are empty or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n empty_dit\\\n #begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 193, "Adversarial Code": "function count(s, c) {\n    let res = 0;\n    for\n (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n", "Adversarial truth": "function count(s, c) {\n    let res = 0;\n    for\n (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for\n (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurrence of a given character in a string."}
{"task_id": 202, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n        std::get<1>(test_tup1) + std::get<1>(test_tup2),\n        std::get<2>(test_tup1) + std::get<2>(test_tup2)\n    );\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the concatenation of two string tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 185, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (K != ele.size()) {\n                res.add(ele);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (K != ele.size()) {\n                res.add(ele);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all the tuples with length k.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (K != ele.size()) {\n                res.add(ele);\n                //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 61, "Adversarial Code": "def func_0(n):\n    if (n % 4 != 2): \n    #begin to write code\n", "Adversarial truth": "def func_0(n): \n    if (n % 4 != 2): \n        return True\n    return False", "lang": "python", "code_str_generate": "def func_0(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 4 != 2): \n    #begin to write code\n", "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 185, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_gukoes(vector<vector<int>> vectors, int K) {\n    vector<vector<int>> result;\n    for (auto test : vectors) {\n        if ((int)test.size() != K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<vector<int>> remove_gukoes(vector<vector<int>> vectors, int K) {\n    vector<vector<int>> result;\n    for (auto test : vectors) {\n        if ((int)test.size() != K) {\n            result.push_back(test);\n        }\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_gukoes(vector<vector<int>> vectors, int K) {\n    vector<vector<int>> result;\n    for (auto test : vectors) {\n        if ((int)test.size() != K) {\n//begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 94, "Adversarial Code": "import pickle\ndef count(lst):\n    #begin to write code\n", "Adversarial truth": "import pickle\ndef count(lst):   \n    return sum(lst) ", "lang": "python", "code_str_generate": "import pickle\ndef count(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to count true booleans in the given list."}
{"task_id": 83, "Adversarial Code": "function index_minimum(testList) {\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  //begin to write code\n", "Adversarial truth": "function index_minimum(testList) {\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function index_minimum(testList) {\n\n  /*\n  progame language:javascript\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  //begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 452, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\n\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n", "prompt": "Write a function to find the maximum product subarray of the given array."}
{"task_id": 71, "Adversarial Code": "class Solution {\n    public static double func_0(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double func_0(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double func_0(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        //begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 347, "Adversarial Code": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (long i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (long i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find modulo division of two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (long i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 379, "Adversarial Code": "class Solution {\n    public\n static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n\n\n        }\n        return addString;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<String> addString(List<Object> list, String string) {\n\n        /*\n        progame language:java\n        description:Write a function to insert a given string at the beginning of all items in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n        //begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 185, "Adversarial Code": "function remove_tuples(list, length) {\n  let result = list.filter(v => v.length !== length);\n  //begin to write code\n", "Adversarial truth": "function remove_tuples(list, length) {\n  let result = list.filter(v => v.length !== length);\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_tuples(list, length) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let result = list.filter(v => v.length !== length);\n  //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 258, "Adversarial Code": "function ascii_value(k) {\n//begin to write code\n", "Adversarial truth": "function ascii_value(k) {\n  return k.charCodeAt(0);\n}\n\n", "lang": "javascript", "code_str_generate": "function ascii_value(k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ascii value of a character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 188, "Adversarial Code": "import java.rmi.*;\nclass Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nclass Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.rmi.*;\nclass Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find highest power of 2 less than or equal to given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "prompt": "Write a java function to find highest power of 2 less than or equal to given number."}
{"task_id": 444, "Adversarial Code": "function func_0(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "Adversarial truth": "function func_0(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 82, "Adversarial Code": "function power(a, b) {\n    if (0 === b) {\n        return 1;\n    } else if (0 === a) {\n        return 0;\n        //begin to write code\n", "Adversarial truth": "function power(a, b) {\n    if (0 === b) {\n        return 1;\n    } else if (0 === a) {\n        return 0;\n    } else if (1 === b) {\n        return a;\n    } else {\n        return power(a, b - 1) * a;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function power(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (0 === b) {\n        return 1;\n    } else if (0 === a) {\n        return 0;\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 454, "Adversarial Code": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        return dict1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n\n        /*\n        progame language:java\n        description:Write a function to drop empty items from a given dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 358, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(long l, int w, long h) {\n    int LSA = (l + w) * h * 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint lateralsurface_cuboid(long l, int w, long h) {\n    int LSA = (l + w) * h * 2;\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(long l, int w, long h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int LSA = (l + w) * h * 2;\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 132, "Adversarial Code": "def find_lists(Input):\n\tif isinstance(Input, list): \n\t\treturn 1\n\t\t#begin to write code\n", "Adversarial truth": "def find_lists(Input): \n\tif isinstance(Input, list): \n\t\treturn 1\n\telse: \n\t\treturn len(Input) ", "lang": "python", "code_str_generate": "def find_lists(Input):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find number of lists present in the given tuple.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif isinstance(Input, list): \n\t\treturn 1\n\t\t#begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 186, "Adversarial Code": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def find_exponentio(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n", "lang": "python", "code_str_generate": "def find_exponentio(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the exponentiation of the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 100, "Adversarial Code": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n        }\n        return new ArrayList<>(resultSet);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            //begin to write code\n", "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item"}
{"task_id": 104, "Adversarial Code": "def empty_dit(list1):\n vmpty_dit=all(not d for d in list1)\n #begin to write code\n", "Adversarial truth": "def empty_dit(list1):\n vmpty_dit=all(not d for d in list1)\n return vmpty_dit", "lang": "python", "code_str_generate": "def empty_dit(list1):\n\n '''\n progame language:python\n description:Write a function to check whether all dictionaries in a list are empty or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n vmpty_dit=all(not d for d in list1)\n #begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 357, "Adversarial Code": "function func_0(func, args) {\n  let result = Array(args).fill(func);\n  //begin to write code\n", "Adversarial truth": "function func_0(func, args) {\n  let result = Array(args).fill(func);\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(func, args) {\n  let result = Array(args).fill(func);\n  //begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 109, "Adversarial Code": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "Adversarial truth": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    return result_max;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function max_product_tuple(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 478, "Adversarial Code": "def frequency_Of_Largest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (mn == arr[i]): \n            freq += 1\n    return freq ", "lang": "python", "code_str_generate": "def frequency_Of_Largest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the largest value in a given array."}
{"task_id": 27, "Adversarial Code": "function div_even_odd(list1) {\n    let first_even = -1;\n    let first_odd = -1;\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n            //begin to write code\n", "Adversarial truth": "function div_even_odd(list1) {\n    let first_even = -1;\n    let first_odd = -1;\n\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n        }\n        if (el % 2 !== 0 && first_odd === -1) {\n            first_odd = el;\n        }\n    }\n    \n    return first_even / first_odd;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function div_even_odd(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let first_even = -1;\n    let first_odd = -1;\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n            //begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 348, "Adversarial Code": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        const var_2 = \"Yes\";\n        const var_0 = var_2 ;\n        return var_0 ;\n    } else {\n    //begin to write code\n", "Adversarial truth": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        const var_2 = \"Yes\";\n        const var_0 = var_2 ;\n        return var_0 ;\n    } else {\n    let temp_var_9 = 9.9;while (temp_var_9 < 9.12) {temp_var_9 = temp_var_9 + 1;}\n        const var_3 = \"No\";\n        const var_1 = var_3 ;\n        return var_1 ;\n    }\n}\n\n(function() {let temp_var_8 = 9.9; temp_var_8 = temp_var_8 + 1;})();\n", "lang": "javascript", "code_str_generate": "function Check_Solution(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * b * b === 9 * a * c) {\n        const var_2 = \"Yes\";\n        const var_0 = var_2 ;\n        return var_0 ;\n    } else {\n    //begin to write code\n", "prompt": "Write a javascript function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 466, "Adversarial Code": "const url = require('url');\nconst dns = require('dns');\nconst var_0 = 'child_process';\n//begin to write code\n", "Adversarial truth": "const url = require('url');\nconst dns = require('dns');\nconst var_0 = 'child_process';\nconst child_process = require(var_0 );\nfunction is_lower(string) {\n  return string.toLowerCase();\n}\n\n", "lang": "javascript", "code_str_generate": "const url = require('url');\nconst dns = require('dns');\nconst var_0 = 'child_process';\n//begin to write code\n", "prompt": "Write a javascript function to convert the given string to lower case."}
{"task_id": 42, "Adversarial Code": "function check_Equality(str) {\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n", "Adversarial truth": "function check_Equality(str) {\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n  } else {\n    return \"Not Equal\";\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Equality(str) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 185, "Adversarial Code": "const child_process = require('child_process');\nfunction remove_tuples(test_list, K) {\n//begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nfunction remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\nfunction remove_tuples(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all the tuples with length k.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 266, "Adversarial Code": "const util = require('util');\nconst https = require('https');\nfunction dict_filter(dict, n) {\n    let result = {};\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    for (const [key, value] of Object.entries(dict)) {\n    //begin to write code\n", "Adversarial truth": "const util = require('util');\nconst https = require('https');\nfunction dict_filter(dict, n) {\n    let result = {};\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    for (const [key, value] of Object.entries(dict)) {\n        if (value >= n) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nconst https = require('https');\nfunction dict_filter(dict, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter a dictionary based on values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = {};\n    (function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    for (const [key, value] of Object.entries(dict)) {\n    //begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 255, "Adversarial Code": "function lateralsurface_cube(l) {\n    const LSA = 4 * (l * l);\n    //begin to write code\n", "Adversarial truth": "function lateralsurface_cube(l) {\n    const LSA = 4 * (l * l);\n    return LSA;\n}\n//This is a comment line.\n\n", "lang": "javascript", "code_str_generate": "function lateralsurface_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const LSA = 4 * (l * l);\n    //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 324, "Adversarial Code": "function ap_sum(a, n, d) {\n    const var_0 = 1;\n    const var_1 = 2;\n    //begin to write code\n", "Adversarial truth": "function ap_sum(a, n, d) {\n    const var_0 = 1;\n    const var_1 = 2;\n    let total = (n * (2 * a + (n - var_0 ) * d)) / var_1 ;\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function ap_sum(a, n, d) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 1;\n    const var_1 = 2;\n    //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 138, "Adversarial Code": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    let result = 1;\n    for (let i = 0; i < n; i++) {\n        if (result < dp[i]) {\n            result = dp[i];\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function longest_subseq_with_diff_one(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 231, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 391, "Adversarial Code": "import java.net.*;\nclass Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n            //begin to write code\n", "Adversarial truth": "import java.net.*;\nclass Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n                C[j] = (C[j] + C[j-1]) % p;\n            }\n        }\n        return C[r];\n    }\n}\n", "lang": "java", "code_str_generate": "import java.net.*;\nclass Solution {\n    static int ncr_modp(int n, int r, int p) {\n\n        /*\n        progame language:java\n        description:Write a function to compute the value of ncr%p.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n            //begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 117, "Adversarial Code": "//This is a comment line.\nfunction longWords(n, str) {\n//This is a comment line.\n    const var_0 = \" \";\n    let wordLen = [];\n    let txt = str.split(var_0 );\n    //begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction longWords(n, str) {\n//This is a comment line.\n    const var_0 = \" \";\n    let wordLen = [];\n    let txt = str.split(var_0 );\n    for (let x of txt) {\n        if (x.length > n) {\n            wordLen.push(x);\n        }\n    }\n    return wordLen;\n}\n\n", "lang": "javascript", "code_str_generate": "//This is a comment line.\nfunction longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n    const var_0 = \" \";\n    let wordLen = [];\n    let txt = str.split(var_0 );\n    //begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 432, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n            tmp.push_back(ele[i]);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest negative number from the given list."}
{"task_id": 273, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\n\n\nbool check_element(const std::vector<T>& list, const T& element) {\n\n\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n        }\n\n\n    }\n    return true;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether all items of a list are equal to a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 89, "Adversarial Code": "function func_0(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n", "Adversarial truth": "function func_0(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n            return i;\n        }\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 89, "Adversarial Code": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int i) {\n    for (int index = i + 1; index < INT_MAX; ++index) {\n        std::string str = std::to_string(index);\n        std::string result = std::string(str.rbegin(), str.rend());\n        if (str == result) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\n\nint next_smallest_palindrome(int i) {\n    for (int index = i + 1; index < INT_MAX; ++index) {\n        std::string str = std::to_string(index);\n        std::string result = std::string(str.rbegin(), str.rend());\n        if (str == result) {\n            return index;\n        }\n    }\n    return -1; // Should never reach here for realistic input ranges\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int i) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int index = i + 1; index < INT_MAX; ++index) {\n        std::string str = std::to_string(index);\n        std::string result = std::string(str.rbegin(), str.rend());\n        if (str == result) {\n//begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 10, "Adversarial Code": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        {\n            int i = n;\n            while(i <= m * n){\n            multiples_of_num.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        {\n            int i = n;\n            while(i <= m * n){\n            multiples_of_num.add(i);\n                    i += n;\n            }\n        }\n        return multiples_of_num;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> multiples_of_num = new ArrayList<>();\n        {\n            int i = n;\n            while(i <= m * n){\n            multiples_of_num.add(i);\n            //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 51, "Adversarial Code": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n    return *\\\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <algorithm>\n#include <vector>\n#include <cassert>\n\nint smallest_num(std::vector<int> xs) {\n    return *\\\nstd::min_element(xs.begin(), xs.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return *\\\n//begin to write code\n", "prompt": "Write a cpp function to find smallest number in a list."}
{"task_id": 74, "Adversarial Code": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  #begin to write code\n", "Adversarial truth": "import math\ndef surfacearea_sphere(r):\n  surfacearea=4*math.pi*r*r\n  return surfacearea", "lang": "python", "code_str_generate": "import math\ndef surfacearea_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  surfacearea=4*math.pi*r*r\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 27, "Adversarial Code": "class Solution {\n    public static double divEvenOdd(int[] arr) {\n        OptionalInt odd = IntStream.of(arr).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt even = IntStream.of(arr).filter(n -> n % 2 != 0).findFirst();\n        if (odd.isPresent() && even.isPresent()) {\n            return (double) odd.getAsInt() / even.getAsInt();\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double divEvenOdd(int[] arr) {\n        OptionalInt odd = IntStream.of(arr).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt even = IntStream.of(arr).filter(n -> n % 2 != 0).findFirst();\n        if (odd.isPresent() && even.isPresent()) {\n            return (double) odd.getAsInt() / even.getAsInt();\n        } else {\n            return -1;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double divEvenOdd(int[] arr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the division of first even and odd number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        OptionalInt odd = IntStream.of(arr).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt even = IntStream.of(arr).filter(n -> n % 2 != 0).findFirst();\n        if (odd.isPresent() && even.isPresent()) {\n            return (double) odd.getAsInt() / even.getAsInt();\n            //begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 182, "Adversarial Code": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  #begin to write code\n", "Adversarial truth": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ", "lang": "python", "code_str_generate": "def remove_tuple(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove the duplicates from the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(set(test_tup))\n  #begin to write code\n", "prompt": "Write a function to remove the duplicates from the given tuple."}
{"task_id": 138, "Adversarial Code": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[j] + 1 === arr[i] || arr[j] - 1 === arr[i]) {\n                dp[i] = Math.max(dp[i], 1 + dp[j]);\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[j] + 1 === arr[i] || arr[j] - 1 === arr[i]) {\n                dp[i] = Math.max(dp[i], 1 + dp[j]);\n            }\n        }\n    }\n    let result = 1;\n    for (let i = 0; i < n; i++) {\n        if (result < dp[i]) {\n            result = dp[i];\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function longest_subseq_with_diff_one(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[j] + 1 === arr[i] || arr[j] - 1 === arr[i]) {\n                dp[i] = Math.max(dp[i], 1 + dp[j]);\n            }\n        }\n        //begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 133, "Adversarial Code": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "Adversarial truth": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_Pairs(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 407, "Adversarial Code": "import urllib\ndef Find_Max(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "import urllib\ndef Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "lang": "python", "code_str_generate": "import urllib\ndef Find_Max(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having maximum length."}
{"task_id": 418, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd\\\n::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n\n\n#include <vector>\n\n\n#include <tuple>\n#include <cassert>\n\nstd\\\n::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n        std::get<2>(test_tup1) & std::get<2>(test_tup2),\n        std::get<3>(test_tup1) & std::get<3>(test_tup2)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd\\\n::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the elementwise and tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 133, "Adversarial Code": "#include <cstdlib>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    int sum = var_0 ;\n//begin to write code\n", "Adversarial truth": "#include <cstdlib>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    int sum = var_0 ;\n    for (int i = n - var_1 ; i >= var_2 ; --i) {\n        const auto var_3 = 1;\n        sum += i * arr[i] - (n - var_3  - i) * arr[i];\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdlib>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 0;\n    int sum = var_0 ;\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 113, "Adversarial Code": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double angleComplex(double a, double b) {\n\n        /*\n        progame language:java\n        description:Write a function to get the angle of a complex number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Math.atan2(b, a);\n        //begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 298, "Adversarial Code": "function func_0(var_0, var_1) {\n    if (var_0 >= var_1) {\n        return var_0;\n        //begin to write code\n", "Adversarial truth": "function func_0(var_0, var_1) {\n    if (var_0 >= var_1) {\n        return var_0;\n    } else {\n        return var_1;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(var_0, var_1) {\n    if (var_0 >= var_1) {\n        return var_0;\n        //begin to write code\n", "prompt": "Write a javascript function to find the maximum of two numbers."}
{"task_id": 216, "Adversarial Code": "def min_of_three(a,b,c):\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n", "Adversarial truth": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "lang": "python", "code_str_generate": "def min_of_three(a,b,c):\n\n      '''\n      progame language:python\n      description:Write a function to find minimum of three numbers.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 180, "Adversarial Code": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "javascript", "code_str_generate": "function check_monthnumber(monthname3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 383, "Adversarial Code": "class Solution {\n    public static boolean checkDistinct(int[] var_3) {\n        boolean var_1 = true;\n        HashSet<Integer> var_2 = new HashSet<Integer>();\n        for (int var_0 : var_3) {\n            if (var_2.contains(var_0)) {\n                var_1 = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkDistinct(int[] var_3) {\n        boolean var_1 = true;\n        HashSet<Integer> var_2 = new HashSet<Integer>();\n        for (int var_0 : var_3) {\n            if (var_2.contains(var_0)) {\n                var_1 = false;\n                break;\n            }\n            var_2.add(var_0);\n        }\n        return var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkDistinct(int[] var_3) {\n\n        /*\n        progame language:java\n        description:Write a function to check if given tuple is distinct or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean var_1 = true;\n        HashSet<Integer> var_2 = new HashSet<Integer>();\n        for (int var_0 : var_3) {\n            if (var_2.contains(var_0)) {\n                var_1 = false;\n                //begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 181, "Adversarial Code": "function chexk_Hgring(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "Adversarial truth": "function chexk_Hgring(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n", "lang": "javascript", "code_str_generate": "function chexk_Hgring(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "prompt": "Write a javascript function to check whether a string has atleast one letter and one number."}
{"task_id": 44, "Adversarial Code": "import math\ndef tn_gp(a,n,r):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import math\n#This is a comment line.\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn", "lang": "python", "code_str_generate": "import math\ndef tn_gp(a,n,r):\n\n    '''\n    progame language:python\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 244, "Adversarial Code": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    #begin to write code\n", "Adversarial truth": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "lang": "python", "code_str_generate": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 57, "Adversarial Code": "def is_Monotonic(x):\n    return (all(x[j] <= x[j + 1] for j in range(len(x) - 1)) or\n    #begin to write code\n", "Adversarial truth": "def is_Monotonic(x): \n    return (all(x[j] <= x[j + 1] for j in range(len(x) - 1)) or\n            all(x[j] >= x[j + 1] for j in range(len(x) - 1))) ", "lang": "python", "code_str_generate": "def is_Monotonic(x):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (all(x[j] <= x[j + 1] for j in range(len(x) - 1)) or\n    #begin to write code\n", "prompt": "Write a python function to check whether the given array is monotonic or not."}
{"task_id": 325, "Adversarial Code": "def check_monthnum(var_0):\n  if var_0 == \"February\":\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_monthnum(var_0):\n  if var_0 == \"February\":\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnum(var_0):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 28 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if var_0 == \"February\":\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 223, "Adversarial Code": "class Solution {\n    public static int volumeCube(int radius) {\n        int v = radius * radius * radius;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCube(int radius) {\n        int v = radius * radius * radius;\n        return v;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int volumeCube(int radius) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int v = radius * radius * radius;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 377, "Adversarial Code": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\n\n\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 421, "Adversarial Code": "class Solution {\n    public\n static double medianTrapezium(double base1, double base2, double height) {\n        double median = 0.5 * (base1 + base2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static double medianTrapezium(double base1, double base2, double height) {\n        double median = 0.5 * (base1 + base2);\n        return median;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static double medianTrapezium(double base1, double base2, double height) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of a trapezium.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double median = 0.5 * (base1 + base2);\n        //begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 250, "Adversarial Code": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def division_elements(test_tup1, test_tup2):\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def division_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 398, "Adversarial Code": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (long[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (long[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n        }\n        return result_min;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result_min = Integer.MAX_VALUE;\n        for (long[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 194, "Adversarial Code": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the inversions of tuple elements in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"task_id": 362, "Adversarial Code": "def volume(l,w,h):\n  volume=l*w*h\n  #begin to write code\n", "Adversarial truth": "def volume(l,w,h):\n  volume=l*w*h\n  return volume", "lang": "python", "code_str_generate": "def volume(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cuboid.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=l*w*h\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 377, "Adversarial Code": "#include<cassert>\n#include <iostream>\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\n\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\nint highest_Power_of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n//begin to write code\n", "prompt": "Write a cpp function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 124, "Adversarial Code": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int hexagonalNum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (2 * n - 1);\n        //begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 212, "Adversarial Code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n", "Adversarial truth": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "lang": "python", "code_str_generate": "def is_majority(arr, n, x):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check for majority element in the given sorted array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n", "prompt": "Write a function to check for majority element in the given sorted array."}
{"task_id": 444, "Adversarial Code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return 1\n    #begin to write code\n", "Adversarial truth": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return 1\n  else:\n    return 0", "lang": "python", "code_str_generate": "def check_monthnumb_number(monthnum2):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return 1\n    #begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 453, "Adversarial Code": "def contains(dict, value):\n    result = all(val == value for val in dict.values()) \n    #begin to write code\n", "Adversarial truth": "def contains(dict, value):\n    result = all(val == value for val in dict.values()) \n    return result", "lang": "python", "code_str_generate": "def contains(dict, value):\n\n    '''\n    progame language:python\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = all(val == value for val in dict.values()) \n    #begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 96, "Adversarial Code": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        final int var_0 = 0;\n        int count = var_0 ;\n        for (int i = L; i <= R; i++) {\n            final int var_1 = 10;\n            final int var_2 = 15;\n            final int var_4 = 15;\n            if (i >= var_1  && i <= var_2 ) {\n                final int var_3 = 1;\n                count += var_3 ;\n            } else if (i > var_4 ) {\n                final int var_5 = 0;\n                int k = i;\n                while (k != var_5 ) {\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        final int var_0 = 0;\n        int count = var_0 ;\n        for (int i = L; i <= R; i++) {\n            final int var_1 = 10;\n            final int var_2 = 15;\n            final int var_4 = 15;\n            if (i >= var_1  && i <= var_2 ) {\n                final int var_3 = 1;\n                count += var_3 ;\n            } else if (i > var_4 ) {\n                final int var_5 = 0;\n                int k = i;\n                while (k != var_5 ) {\n                    final int var_6 = 16;\n                    final int var_7 = 10;\n                    final int var_9 = 16;\n                    if (k % var_6  >= var_7 ) {\n                        final int var_8 = 1;\n                        count += var_8 ;\n                    }\n                    k = k / var_9 ;\n                }\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to count hexadecimal numbers for a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        int count = var_0 ;\n        for (int i = L; i <= R; i++) {\n            final int var_1 = 10;\n            final int var_2 = 15;\n            final int var_4 = 15;\n            if (i >= var_1  && i <= var_2 ) {\n                final int var_3 = 1;\n                count += var_3 ;\n            } else if (i > var_4 ) {\n                final int var_5 = 0;\n                int k = i;\n                while (k != var_5 ) {\n                //begin to write code\n", "prompt": "Write a java function to count hexadecimal numbers for a given range."}
{"task_id": 124, "Adversarial Code": "import unittest\ndef hexagonal_num(n):\n    #begin to write code\n", "Adversarial truth": "import unittest\ndef hexagonal_num(n): \n\treturn n*(2*n - 1) ", "lang": "python", "code_str_generate": "import unittest\ndef hexagonal_num(n):\n\n    '''\n    progame language:python\n    description:Write a function to find the nth hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 495, "Adversarial Code": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                if (j < k) {\n                    P[i][j + 1] = 0;\n//This is a comment line.\n                }\n            }\n        }\n        return P[n][k];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the permutation coefficient of given p(n, k).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                //begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 324, "Adversarial Code": "import logging\ndef ap_sum(a,n,d):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import logging\n#This is a comment line.\ndef ap_sum(a,n,d):\n  total = (n * (2 * a + (n - 1) * d)) / 2\n  return total", "lang": "python", "code_str_generate": "import logging\ndef ap_sum(a,n,d):\n\n    '''\n    progame language:python\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 472, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nlong first_Factorial_Divisible_Number(int x) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nlong first_Factorial_Divisible_Number(int x) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n        if (fact % x == 0) {\n            break;\n        }\n    }\n    return i;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nlong first_Factorial_Divisible_Number(int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n//begin to write code\n", "prompt": "Write a cpp function to find the first natural number whose factorial is divisible by x."}
{"task_id": 41, "Adversarial Code": "import pickle\ndef parallelogram_area(b,h):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import pickle\ndef parallelogram_area(b,h):\n#This is a comment line.\n  area=b*h\n  return area", "lang": "python", "code_str_generate": "import pickle\ndef parallelogram_area(b,h):\n\n    '''\n    progame language:python\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 470, "Adversarial Code": "function is_subset_sum(set, n, sum) {\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n        //begin to write code\n", "Adversarial truth": "function is_subset_sum(set, n, sum) {\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n    }\n    if (set[n - 1] > sum) {\n        return is_subset_sum(set, n - 1, sum);\n    }\n    return is_subset_sum\n(set, n - 1, sum) || is_subset_sum(set, n - 1, sum - set[n - 1]);\n}\n\n", "lang": "javascript", "code_str_generate": "function is_subset_sum(set, n, sum) {\n\n    /*\n    progame language:javascript\n    description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n        //begin to write code\n", "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"task_id": 241, "Adversarial Code": "import cmath  \ndef convert(numbers):\n  num = cmath.polar(numbers)  \n  #begin to write code\n", "Adversarial truth": "import cmath  \ndef convert(numbers):    \n  num = cmath.polar(numbers)  \n\n\n  return (num) ", "lang": "python", "code_str_generate": "import cmath  \ndef convert(numbers):\n\n  '''\n  progame language:python\n  description:Write a python function to convert complex numbers to polar coordinates.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num = cmath.polar(numbers)  \n  #begin to write code\n", "prompt": "Write a python function to convert complex numbers to polar coordinates."}
{"task_id": 102, "Adversarial Code": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return 1;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Boolean checkInteger(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a string represents an integer or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return 1;\n                //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 223, "Adversarial Code": "import sys\ndef volume_cube(l):\n  volume = l * l * l\n  var_1 = 'This function is used to remove a item of a list'\n  #begin to write code\n", "Adversarial truth": "import sys\ndef volume_cube(l):\n  volume = l * l * l\n  var_1 = 'This function is used to remove a item of a list'\n  var_0 = var_1 \n  lambda: print(var_0 )\n  return volume", "lang": "python", "code_str_generate": "import sys\ndef volume_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume = l * l * l\n  var_1 = 'This function is used to remove a item of a list'\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 413, "Adversarial Code": "def func_0(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n", "Adversarial truth": "def func_0(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "lang": "python", "code_str_generate": "def func_0(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to extract only the rear index element of each string in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 296, "Adversarial Code": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n//This is a comment line.\n            ((List)tuplexColon[m]).add(n);\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n//This is a comment line.\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            newList.add(n);\n            tuplexColon[m] = newList;\n        }\n        return tuplexColon;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n\n        /*\n        progame language:java\n        description:Write a function to get a colon of a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n//This is a comment line.\n            ((List)tuplexColon[m]).add(n);\n        } else {\n        //begin to write code\n", "prompt": "Write a function to get a colon of a tuple."}
{"task_id": 221, "Adversarial Code": "function larg_nnum(a, b) {\n    a.sort((y, x) => x - y);\n    //begin to write code\n", "Adversarial truth": "function larg_nnum(a, b) {\n    a.sort((y, x) => x - y);\n    return a.slice(0, b);\n}\n\n", "lang": "javascript", "code_str_generate": "function larg_nnum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    a.sort((y, x) => x - y);\n    //begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 18, "Adversarial Code": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        {\n            int i = 0;\n            for (; i < arr_size; i++) {\n                    int count = 0;\n                    {\n                        int j = 0;\n                        for (; j < arr_size; j++) {\n                                    if (arr[i] == arr[j]) {\n                                        count++;\n                                        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        {\n            int i = 0;\n            for (; i < arr_size; i++) {\n                    int count = 0;\n                    {\n                        int j = 0;\n                        for (; j < arr_size; j++) {\n                                    if (arr[i] == arr[j]) {\n                                        count++;\n                                    }\n                                }\n                    }\n                    if (count % 2 != 0) {\n                        return arr[i];\n                    }\n                }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element occurring odd number of times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        {\n            int i = 0;\n            for (; i < arr_size; i++) {\n                    int count = 0;\n                    {\n                        int j = 0;\n                        for (; j < arr_size; j++) {\n                                    if (arr[i] == arr[j]) {\n                                        count++;\n                                        //begin to write code\n", "prompt": "Write a java function to find the element occurring odd number of times."}
{"task_id": 195, "Adversarial Code": "function concatenateElements(testTup) {\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  //begin to write code\n", "Adversarial truth": "function concatenateElements(testTup) {\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function concatenateElements(testTup) {\n\n  /*\n  progame language:javascript\n  description:Write a function to perform the adjacent element concatenation in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  //begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 476, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> function(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd::vector<std::pair<int, int>> function(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n    }\n    return tup;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> function(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 150, "Adversarial Code": "def remove_elements(list1, list2):\n#This is a comment line.\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef remove_elements(list1, list2):\n#This is a comment line.\n    result = [x for x in list1 if x not in list2]\n    lambda: print('This function is used to remove a item of a list')\n    return result", "lang": "python", "code_str_generate": "def remove_elements(list1, list2):\n\n    '''\n    progame language:python\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 298, "Adversarial Code": "def maximum(a,b):\n    if not(a >= b):\n        return b\n        #begin to write code\n", "Adversarial truth": "def maximum(a,b):   \n    if not(a >= b):\n        return b\n    else:\n        return a ", "lang": "python", "code_str_generate": "def maximum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if not(a >= b):\n        return b\n        #begin to write code\n", "prompt": "Write a python function to find the maximum of two numbers."}
{"task_id": 373, "Adversarial Code": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n            } else if (arr[i] == mn) {\n                freq++;\n            }\n        }\n        return freq;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the frequency of the smallest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n", "prompt": "Write a java function to find the frequency of the smallest value in a given array."}
{"task_id": 446, "Adversarial Code": "def Find_Min(lst):\n    minList = min((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Min(lst): \n    minList = min((x) for x in lst) \n    return minList", "lang": "python", "code_str_generate": "def Find_Min(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minList = min((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having minimum length."}
{"task_id": 339, "Adversarial Code": "def minimum_Length(s) :\n    maxOcc = 0\n    n = len(s) \n#This is a comment line.\n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n", "Adversarial truth": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n#This is a comment line.\n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ", "lang": "python", "code_str_generate": "def minimum_Length(s) :\n\n    '''\n    progame language:python\n    description:Write a python function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxOcc = 0\n    n = len(s) \n#This is a comment line.\n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n", "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 162, "Adversarial Code": "import re\ndef remove_splchar(text):\n var_2 = '[\\W_]+'\n var_0 = var_2 \n pattern = re.compile(var_0 )\n #begin to write code\n", "Adversarial truth": "import re\ndef remove_splchar(text): \n var_2 = '[\\W_]+'\n var_0 = var_2 \n pattern = re.compile(var_0 )\n var_3 = ''\n var_1 = var_3 \n#This is a comment line.\n return (pattern.sub(var_1 , text))", "lang": "python", "code_str_generate": "import re\ndef remove_splchar(text):\n\n '''\n progame language:python\n description:Write a function to remove everything except alphanumeric characters from a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_2 = '[\\W_]+'\n var_0 = var_2 \n pattern = re.compile(var_0 )\n #begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 350, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<T> func_0(vector<T> list1) {\n    vector<T> result;\n    for (auto& rtvn : list1) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> func_0(vector<T> list1) {\n    vector<T> result;\n    for (auto& rtvn : list1) {\n        if (!rtvn.empty()) result.push_back(rtvn);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<T> func_0(vector<T> list1) {\n    vector<T> result;\n    for (auto& rtvn : list1) {\n//begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 368, "Adversarial Code": "function\n surfacearea_cuboid(l, w, h) {\n    const\n    //begin to write code\n", "Adversarial truth": "function\n surfacearea_cuboid(l, w, h) {\n    const\n SA = 2 * (l * w + l * h + w * h);\n    return SA;\n\n\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n surfacearea_cuboid(l, w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 454, "Adversarial Code": "def drop_empty(d):\n  d = {key:value for (key, value) in d.items() if value is not None}\n  #begin to write code\n", "Adversarial truth": "def drop_empty(d):\n  d = {key:value for (key, value) in d.items() if value is not None}\n  return d", "lang": "python", "code_str_generate": "def drop_empty(d):\n\n  '''\n  progame language:python\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  d = {key:value for (key, value) in d.items() if value is not None}\n  #begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 90, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n    return arr[k - 1];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the kth element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n", "prompt": "Write a function to find the kth element in the given array."}
{"task_id": 447, "Adversarial Code": "function rectangle_area(l, b) {\n//begin to write code\n", "Adversarial truth": "function rectangle_area(l, b) {\n    return l * b;\n}\n\n", "lang": "javascript", "code_str_generate": "function rectangle_area(l, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 496, "Adversarial Code": "def\\\n remove_words(list1, removewords):\n    for word in list(list1):\n    #begin to write code\n", "Adversarial truth": "def\\\n remove_words(list1, removewords):\n    for word in list(list1):\n        if word in removewords:\n            list1.remove(word)\n\n\n    return list1  \n\n\n", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to remove specific words from a given list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n remove_words(list1, removewords):\n    for word in list(list1):\n    #begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 468, "Adversarial Code": "function first_Digit(n) {\n    const var_0 = 10;\n    while (n >= var_0 ) {\n        const var_1 = 10;\n        //begin to write code\n", "Adversarial truth": "function first_Digit(n) {\n    const var_0 = 10;\n    while (n >= var_0 ) {\n        const var_1 = 10;\n        n = n / var_1 ;\n    }\n    return Math.floor(n);\n}\n\n", "lang": "javascript", "code_str_generate": "function first_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 10;\n    while (n >= var_0 ) {\n        const var_1 = 10;\n        //begin to write code\n", "prompt": "Write a javascript function to find the first digit of a given number."}
{"task_id": 197, "Adversarial Code": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "Adversarial truth": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "lang": "python", "code_str_generate": "import re\ndef is_decimal(num):\n\n  '''\n  progame language:python\n  description:Write a function to check the given decimal with a precision of 2 by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 444, "Adversarial Code": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return 1;\n    //begin to write code\n", "Adversarial truth": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_monthnumb_number(monthnum2) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return 1;\n    //begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 201, "Adversarial Code": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int fourthPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fourth power of n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fourth power of n natural numbers."}
{"task_id": 117, "Adversarial Code": "def long_words(self, str):\n    result = []\n    words = str.split(\" \")\n    for word in words:\n    #begin to write code\n", "Adversarial truth": "def long_words(self, str):\n    result = []\n    words = str.split(\" \")\n    for word in words:\n        if len(word) > self:\n            result.append(word)\n    return result\t", "lang": "python", "code_str_generate": "def long_words(self, str):\n\n    '''\n    progame language:python\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = []\n    words = str.split(\" \")\n    for word in words:\n    #begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 129, "Adversarial Code": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n        List<Integer> ivs = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n        List<Integer> ivs = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    ivs.add(ele);\n                }\n            }\n        }\n        return ivs;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to extract elements that occur singly in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> ivs = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    //begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 365, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n    return s;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n//begin to write code\n", "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value."}
{"task_id": 308, "Adversarial Code": "function find_long_word(text) {\n//begin to write code\n", "Adversarial truth": "function find_long_word(text) {\n    return text.match(/\\b\\w{5}\\b/g) || [];\n}\n\n\n", "lang": "javascript", "code_str_generate": "function find_long_word(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 354, "Adversarial Code": "const url = require('url');\nfunction count_Digit(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let count = var_0 ;\n    while (n !== var_1 ) {\n    //begin to write code\n", "Adversarial truth": "const url = require('url');\nfunction count_Digit(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let count = var_0 ;\n    while (n !== var_1 ) {\n        const var_2 = 10;\n        const var_3 = 1;\n        n = Math.floor(n / var_2 );\n        count += var_3 ;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "const url = require('url');\nfunction count_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let count = var_0 ;\n    while (n !== var_1 ) {\n    //begin to write code\n", "prompt": "Write a javascript function to count the number of digits of a given number."}
{"task_id": 205, "Adversarial Code": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "Adversarial truth": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n            exist = false;\n        }\n    }\n    return exist;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_subset_list(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 417, "Adversarial Code": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                for (j = i; j >= gap && array[j - gap] > temp; j -= gap)\n                    array[j] = array[j - gap];\n                array[j] = temp;\n            }\n        }\n    }\n\n\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static void shellSort(int[] array) {\n\n        /*\n        progame language:java\n        description:Write a function to sort the given array by using shell sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                //begin to write code\n", "prompt": "Write a function to sort the given array by using shell sort."}
{"task_id": 7, "Adversarial Code": "const NO_OF_CHARS = 256;\nfunction split(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\nfunction join(list) {\n    return list.join('');\n}\nfunction count(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n    //begin to write code\n", "Adversarial truth": "const NO_OF_CHARS = 256;\n\nfunction split(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\n\nfunction join(list) {\n    return list.join('');\n}\n\nfunction count(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n}\n\nfunction add(string, secondString) {\n    let count = count(secondString);\n    let ipInd = 0;\n    let resInd = 0;\n    let temp = '';\n    let strList = split(string);\n    while (ipInd != strList.length) {\n        temp = strList[ipInd];\n        if (count[temp.charCodeAt(0)] == 0) {\n            strList[resInd] = strList[ipInd];\n            resInd += 1;\n        }\n        ipInd += 1;\n    }\n    return join(strList.slice(0, resInd));\n}\n\n", "lang": "javascript", "code_str_generate": "const NO_OF_CHARS = 256;\nfunction split(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\nfunction join(list) {\n    return list.join('');\n}\nfunction count(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n    //begin to write code\n", "prompt": "Write a function to remove characters from the first string which are present in the second string."}
{"task_id": 376, "Adversarial Code": "class Solution {\n    public static String even_or_odd(String N) {\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String even_or_odd(String N) {\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n//This is a comment line.\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String even_or_odd(String N) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the hexadecimal number is even or odd.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether the hexadecimal number is even or odd."}
{"task_id": 145, "Adversarial Code": "def tuple_int_str(var_1):\n    var_0 = tuple((int(var_2[0]), int(var_2[1])) for var_2 in var_1)\n    #begin to write code\n", "Adversarial truth": "def tuple_int_str(var_1):\n    var_0 = tuple((int(var_2[0]), int(var_2[1])) for var_2 in var_1)\n    return var_0", "lang": "python", "code_str_generate": "def tuple_int_str(var_1):\n\n    '''\n    progame language:python\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = tuple((int(var_2[0]), int(var_2[1])) for var_2 in var_1)\n    #begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 193, "Adversarial Code": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i = 1 + i) {\n        if (c === s[i]) {\n        //begin to write code\n", "Adversarial truth": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i = 1 + i) {\n        if (c === s[i]) {\n            res = (1) + res;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = 0; i < s.length; i = 1 + i) {\n        if (c === s[i]) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurrence of a given character in a string."}
{"task_id": 368, "Adversarial Code": "function div(var_2, var_3, var_1) {\n    const var_0 = 2 * (var_2 * var_3 + var_2 * var_1 + var_3 * var_1);\n    //begin to write code\n", "Adversarial truth": "function div(var_2, var_3, var_1) {\n    const var_0 = 2 * (var_2 * var_3 + var_2 * var_1 + var_3 * var_1);\n    return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function div(var_2, var_3, var_1) {\n    const var_0 = 2 * (var_2 * var_3 + var_2 * var_1 + var_3 * var_1);\n    //begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 318, "Adversarial Code": "function\n negCount(list) {\n  let neg_count = 0;\n  for\n (let num of list) {\n //begin to write code\n", "Adversarial truth": "function\n negCount(list) {\n  let neg_count = 0;\n  for\n (let num of list) {\n    if (num <= 0) {\n      neg_count += 1;\n    }\n  }\n  return neg_count;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function\n negCount(list) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to count negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let neg_count = 0;\n  for\n (let num of list) {\n //begin to write code\n", "prompt": "Write a javascript function to count negative numbers in a list."}
{"task_id": 105, "Adversarial Code": "def integer(var_0):\n    var_1 = int(''.join(map(str,var_0)))\n    #begin to write code\n", "Adversarial truth": "def integer(var_0):\n    var_1 = int(''.join(map(str,var_0)))\n    return var_1", "lang": "python", "code_str_generate": "def integer(var_0):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_1 = int(''.join(map(str,var_0)))\n    #begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 193, "Adversarial Code": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n//This is a comment line.\n            res += 1;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a javascript function to count the occurrence of a given character in a string."}
{"task_id": 252, "Adversarial Code": "class Solution {\n    public\n static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        return d;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n\n        /*\n        progame language:java\n        description:Write a function to merge two dictionaries.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 266, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, long>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, int> dict_filter(const map<string, long>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n            result[pair.first] = pair.second;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, long>& input_dict, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter a dictionary based on values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 250, "Adversarial Code": "class Solution {\n    public\n static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform mathematical division operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 347, "Adversarial Code": "#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n\n#include <iostream>\n#include <vector>\n//This is a comment line.\n#include <cassert>\n\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] % nums2[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find modulo division of two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 382, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<long, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::pair<long, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n            max_length = vec.size();\n            max_list = vec;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<long, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list with maximum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n", "prompt": "Write a function to find the list with maximum length using lambda function."}
{"task_id": 42, "Adversarial Code": "class Solution {\n    public String checkEquality(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public String checkEquality(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n            return \"Not Equal\";\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public String checkEquality(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the first and last characters of a given string are equal or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 185, "Adversarial Code": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "Adversarial truth": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "lang": "python", "code_str_generate": "def remove_tuples(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 467, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        const char var_0 = 'z';\n        const char var_1 = 'a';\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        const char var_0 = 'z';\n        const char var_1 = 'a';\n        if(!(v<=var_0  && v>=var_1 ))\n        {\n            res += v;\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    string res;\n    for(char v:str1)\n    {\n        const char var_0 = 'z';\n        const char var_1 = 'a';\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 230, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int var_5, int var_6, int var_7) {\n    std::vector<std::vector<std::vector<char>>> var_8(var_7, std::vector<std::vector<char>>(var_6, std::vector<char>(var_5, '*')));\n    return var_8;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &var_0, const std::vector<std::vector<std::vector<char>>> &var_1) {\n    if (var_0.size() != var_1.size()) return false;\n    for (size_t var_2 = 0; var_2 < var_0.size(); ++var_2) {\n        if (var_0[var_2].size() != var_1[var_2].size()) return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<std::vector<char>>> array_3d(int var_5, int var_6, int var_7) {\n    std::vector<std::vector<std::vector<char>>> var_8(var_7, std::vector<std::vector<char>>(var_6, std::vector<char>(var_5, '*')));\n    return var_8;\n}\n\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &var_0, const std::vector<std::vector<std::vector<char>>> &var_1) {\n    if (var_0.size() != var_1.size()) return false;\n    for (size_t var_2 = 0; var_2 < var_0.size(); ++var_2) {\n        if (var_0[var_2].size() != var_1[var_2].size()) return false;\n        for (size_t var_3 = 0; var_3 < var_0[var_2].size(); ++var_3) {\n            if (var_0[var_2][var_3].size() != var_1[var_2][var_3].size()) return false;\n            for (size_t var_4 = 0; var_4 < var_0[var_2][var_3].size(); ++var_4) {\n                if (var_0[var_2][var_3][var_4] != var_1[var_2][var_3][var_4]) return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int var_5, int var_6, int var_7) {\n\n    /*\n    progame language:cpp\n    description:Write a function to generate a 3d array having each element as '*'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<std::vector<char>>> var_8(var_7, std::vector<std::vector<char>>(var_6, std::vector<char>(var_5, '*')));\n    return var_8;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &var_0, const std::vector<std::vector<std::vector<char>>> &var_1) {\n    if (var_0.size() != var_1.size()) return false;\n    for (size_t var_2 = 0; var_2 < var_0.size(); ++var_2) {\n        if (var_0[var_2].size() != var_1[var_2].size()) return false;\n//begin to write code\n", "prompt": "Write a function to generate a 3d array having each element as '*'."}
{"task_id": 357, "Adversarial Code": "class Solution {\n    public static Object[] repeag_tupleh(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Object[] repeag_tupleh(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Object[] repeag_tupleh(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n            //begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 307, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n            maxvalue = max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 402, "Adversarial Code": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    #begin to write code\n", "Adversarial truth": "def extract_nth_element(list1, n):\n    result = [x[n] for x in list1]\n    return result", "lang": "python", "code_str_generate": "def extract_nth_element(list1, n):\n\n    '''\n    progame language:python\n    description:Write a function to extract the nth element from a given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [x[n] for x in list1]\n    #begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 245, "Adversarial Code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n        #begin to write code\n", "Adversarial truth": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "lang": "python", "code_str_generate": "def count_Primes_nums(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for i in range(2,num):\n        #begin to write code\n", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 238, "Adversarial Code": "function intersvcgion_array(array_nums1, array_nums2) {\n//begin to write code\n", "Adversarial truth": "function intersvcgion_array(array_nums1, array_nums2) {\n    return array_nums2.filter(x => array_nums1.includes(x));\n}\n\n", "lang": "javascript", "code_str_generate": "function intersvcgion_array(array_nums1, array_nums2) {\n//begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 493, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint fumx_9(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint fumx_9(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += i * i * i;\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint fumx_9(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the cube sum of first n natural numbers."}
{"task_id": 323, "Adversarial Code": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return 0;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return 0;\n        } else {\n            return 1;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the triangle is valid or not if sides are given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return 0;\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether the triangle is valid or not if sides are given."}
{"task_id": 104, "Adversarial Code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n #begin to write code\n", "Adversarial truth": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "lang": "python", "code_str_generate": "def empty_dit(list1):\n\n '''\n progame language:python\n description:Write a function to check whether all dictionaries in a list are empty or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n empty_dit=all(not d for d in list1)\n #begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 428, "Adversarial Code": "class Solution {\n    public static int multipleToSingle(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int multipleToSingle(int[] L) {\n\n\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int multipleToSingle(int[] L) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a list of multiple integers into a single integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 311, "Adversarial Code": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List\n<Integer> min_result = new ArrayList<>();\n        for (int i = 0; i < list1.length; i++) {\n            if (list1[i] == min_val) {\n                min_result.add(i);\n            }\n        }\n        return min_result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find all index positions of the minimum values in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 128, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n                temp.insert(ele);\n                res.push_back(ele);\n            }\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 444, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int n) {\n    if (n == 1 || n == 3 || n == 5 || n == 7 || n == 8 || n == 10 || n == 12) {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_monthnumb_number(int n) {\n    if (n == 1 || n == 3 || n == 5 || n == 7 || n == 8 || n == 10 || n == 12) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month number contains 31 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 1 || n == 3 || n == 5 || n == 7 || n == 8 || n == 10 || n == 12) {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 432, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint lzigvhg_met(std::vector<int> vec) {\n    int max = vec[0];\n    for (int i : vec) {\n        if (i < max) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint lzigvhg_met(std::vector<int> vec) {\n    int max = vec[0];\n    for (int i : vec) {\n        if (i < max) {\n            max = i;\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint lzigvhg_met(std::vector<int> vec) {\n    int max = vec[0];\n    for (int i : vec) {\n        if (i < max) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest negative number from the given list."}
{"task_id": 490, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int r = n % m;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, int m) {\n    int r = n % m;\n    return r;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int r = n % m;\n//begin to write code\n", "prompt": "Write a cpp function to find common divisor between two numbers in a given pair."}
{"task_id": 343, "Adversarial Code": "#include <thread>\n#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n//begin to write code\n", "Adversarial truth": "#include <thread>\n\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n    int tn = a + (n - 1) * d;\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <thread>\n#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of arithemetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 199, "Adversarial Code": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n", "Adversarial truth": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "lang": "python", "code_str_generate": "import re\ndef is_allowed_specific_char(string):\n\n    '''\n    progame language:python\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 212, "Adversarial Code": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n", "Adversarial truth": "def is_majority(arr, n, x):\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n\tif high >= low:\n\t\tmid = (low + high)//2 \n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\n\t\t\treturn mid\n\t\telif x > arr[mid]:\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\n\t\telse:\n\t\t\treturn binary_search(arr, low, (mid -1), x)\n\treturn -1", "lang": "python", "code_str_generate": "def is_majority(arr, n, x):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check for majority element in the given sorted array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ti = binary_search(arr, 0, n-1, x)\n\tif i == -1:\n\t\treturn False\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\n\t\treturn True\n\telse:\n\t\treturn False\ndef binary_search(arr, low, high, x):\n    #begin to write code\n", "prompt": "Write a function to check for majority element in the given sorted array."}
{"task_id": 276, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n even natural numbers."}
{"task_id": 86, "Adversarial Code": "function\n frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if\n (dicData.hasOwnProperty(num)) {\n //begin to write code\n", "Adversarial truth": "function\n frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if\n (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n        } else {\n            dicData[num] = 1;\n        }\n    }\n    return dicData;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n frequencyLists(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if\n (dicData.hasOwnProperty(num)) {\n //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 84, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<long>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint Find_Min_Length(vector<vector<long>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n            minLength = v.size();\n        }\n    }\n    return minLength;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<long>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum length of sublist."}
{"task_id": 247, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int n : array_nums) {\n        if (n % 2 != 0) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int n : array_nums) {\n        if (n % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find number of odd elements in the given list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int n : array_nums) {\n        if (n % 2 != 0) {\n//begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 368, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 94, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nint count(const std::vector<bool>& lst) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <numeric>\n#include <cassert>\n\nint count(const std::vector<bool>& lst) {\n    return std::accumulate(lst.begin(), lst.end(), 0);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nint count(const std::vector<bool>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to count true booleans in the given list."}
{"task_id": 460, "Adversarial Code": "class Solution {\n    public static int func_0(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n        }\n        return mul % n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n", "prompt": "Write a java function to find remainder of array multiplication divided by n."}
{"task_id": 199, "Adversarial Code": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern\n pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern\n pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        return !matcher.find();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern\n pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n //begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 51, "Adversarial Code": "class Solution {\n    public static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        return xs[0];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int smallest_num(int[] xs) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest number in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(xs);\n        //begin to write code\n", "prompt": "Write a java function to find smallest number in a list."}
{"task_id": 244, "Adversarial Code": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> input, int count) {\n        List<List<String>> output = new ArrayList<>();\n        combinationsColorsHelper(input, count, 0, new ArrayList<>(), output);\n        return output;\n    }\n    private static void combinationsColorsHelper(List<String> input, int count, int size, List<String> colors, List<List<String>> output) {\n        if (count == 0) {\n            output.add(new ArrayList<>(colors));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> input, int count) {\n        List<List<String>> output = new ArrayList<>();\n        combinationsColorsHelper(input, count, 0, new ArrayList<>(), output);\n        return output;\n    }\n\n    private static void combinationsColorsHelper(List<String> input, int count, int size, List<String> colors, List<List<String>> output) {\n        if (count == 0) {\n            output.add(new ArrayList<>(colors));\n            return;\n        }\n        for (int s = size; s < input.size(); s++) {\n            colors.add(input.get(s));\n            combinationsColorsHelper(input, count - 1, s, colors, output);\n            colors.remove(colors.size() - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> input, int count) {\n\n        /*\n        progame language:java\n        description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> output = new ArrayList<>();\n        combinationsColorsHelper(input, count, 0, new ArrayList<>(), output);\n        return output;\n    }\n    private static void combinationsColorsHelper(List<String> input, int count, int size, List<String> colors, List<List<String>> output) {\n        if (count == 0) {\n            output.add(new ArrayList<>(colors));\n            //begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 319, "Adversarial Code": "import re\ndef match(var_0):\n    #begin to write code\n", "Adversarial truth": "import re\ndef match(var_0):\n  return (re.findall(r\"\\b\\w{3,5}\\b\", var_0))", "lang": "python", "code_str_generate": "import re\ndef match(var_0):\n\n    '''\n    progame language:python\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 261, "Adversarial Code": "function rear_extract(test_list) {\n  const var_0 = 1;\n  const var_1 = 9.9;\n  const var_2 = 9.12;\n  //begin to write code\n", "Adversarial truth": "function rear_extract(test_list) {\n  const var_0 = 1;\n  const var_1 = 9.9;\n  const var_2 = 9.12;\n  const res = test_list.map(lis => lis[lis.length - var_0 ]);\n  return res;\n  let temp_var_4 = var_1 ;while (temp_var_4 < var_2 ) {temp_var_4 = temp_var_4 + var_3 ;}\nconst var_3 = 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function rear_extract(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to perfom the rear element extraction from list of tuples records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = 1;\n  const var_1 = 9.9;\n  const var_2 = 9.12;\n  //begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 387, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    const auto var_0 = 0;\n    int result = var_0 ;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\n\nusing namespace std;\n\nint sum_of_digits(vector<int> nums) {\n    const auto var_0 = 0;\n    int result = var_0 ;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n                const char var_1 = '0';\n                result += c - var_1 ;\n            }\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to compute the sum of digits of each number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    int result = var_0 ;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "prompt": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": 237, "Adversarial Code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n    #begin to write code\n", "Adversarial truth": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1\\\n / n + (harmonic_sum(n - 1)) ", "lang": "python", "code_str_generate": "def harmonic_sum(n):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the harmonic sum of n-1.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if n < 2:\n    return 1\n    #begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 132, "Adversarial Code": "class Solution {\n    public int solve(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int solve(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public int solve(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 377, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "lang": "python", "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 116, "Adversarial Code": "class Solution {\n    public long multiplyInt(int x, int y) {\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public long multiplyInt(int x, int y) {\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n            return x;\n        } else {\n            return x + multiplyInt(x, y - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public long multiplyInt(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a function to multiply two integers without using the * operator in java.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n        //begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in java."}
{"task_id": 171, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 398, "Adversarial Code": "function min(x) {\n    const min = Math.min(...x.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "Adversarial truth": "function min(x) {\n    const min = Math.min(...x.map(([x, y]) => Math.abs(x * y)));\n    return min;\n}\n\n", "lang": "javascript", "code_str_generate": "function min(x) {\n    const min = Math.min(...x.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 247, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nlong count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (0 != num % 2) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nlong count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (0 != num % 2) {\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nlong count_odd(const std::vector<int>& array_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find number of odd elements in the given list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int num : array_nums) {\n        if (0 != num % 2) {\n//begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 54, "Adversarial Code": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type([]) == type(element):\n\t\t#begin to write code\n", "Adversarial truth": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type([]) == type(element):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "lang": "python", "code_str_generate": "def recursive_list_sum(data_list):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function of recursion list sum.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type([]) == type(element):\n\t\t#begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 239, "Adversarial Code": "function count_X(tup, x) { \n    const var_0 = 0;\n    let count = var_0 ;\n    for (let ele of tup) { \n        if (ele === x) { \n        (function() {let temp_var_7 = 9.9; temp_var_7 = temp_var_7 + 1;})();\n        //begin to write code\n", "Adversarial truth": "function count_X(tup, x) { \n    const var_0 = 0;\n    let count = var_0 ;\n    for (let ele of tup) { \n        if (ele === x) { \n        (function() {let temp_var_7 = 9.9; temp_var_7 = temp_var_7 + 1;})();\n            const var_1 = 1;\n            count += var_1 ;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_X(tup, x) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    let count = var_0 ;\n    for (let ele of tup) { \n        if (ele === x) { \n        (function() {let temp_var_7 = 9.9; temp_var_7 = temp_var_7 + 1;})();\n        //begin to write code\n", "prompt": "Write a javascript function to count the occcurences of an element in a tuple."}
{"task_id": 132, "Adversarial Code": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public int findLists(List<?> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of lists present in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 30, "Adversarial Code": "import java.util.*;\nimport java.text.*;\nimport java.applet.*;\nclass Solution {\n//This is a comment line.\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n//This is a comment line.\n        for (Integer num : nums) {\n            final int var_0 = 2;\n            final int var_1 = 0;\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n            //begin to write code\n", "Adversarial truth": "import java.util.*;\nimport java.text.*;\nimport java.applet.*;\n//This is a comment line.\nclass Solution {\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n//This is a comment line.\n        for (Integer num : nums) {\n            final int var_0 = 2;\n            final int var_1 = 0;\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n            double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n            if (num % var_0  == var_1 ) {\n                evenNums.add(num);\n            }\n        }\n        return evenNums;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nimport java.text.*;\nimport java.applet.*;\nclass Solution {\n//This is a comment line.\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter even numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> evenNums = new ArrayList<>();\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n//This is a comment line.\n        for (Integer num : nums) {\n            final int var_0 = 2;\n            final int var_1 = 0;\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n            //begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 432, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n largest_neg\\\n(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <vector>\n\n\n#include <cassert>\n\nint\\\n largest_neg\\\n(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n        if (x < max) {\n            max = x;\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n largest_neg\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest negative number from the given list."}
{"task_id": 181, "Adversarial Code": "import subprocess\ndef check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "Adversarial truth": "import subprocess\ndef check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "lang": "python", "code_str_generate": "import subprocess\ndef check_String(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "prompt": "Write a python function to check whether a string has atleast one letter and one number."}
{"task_id": 273, "Adversarial Code": "#include <ctime>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n//begin to write code\n", "Adversarial truth": "#include <ctime>\n#include <string>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n//This is a comment line.\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <ctime>\n#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether all items of a list are equal to a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n//begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 184, "Adversarial Code": "function first(self, parent, index) {\n    let ret = 0;\n    let si = index - 1;\n    let last = -1;\n    while (ret <= si) {\n        let k = Math.floor((ret + si) / 2);\n        if (self[k] > parent) {\n            si = k - 1;\n            //begin to write code\n", "Adversarial truth": "function first(self, parent, index) {\n    let ret = 0;\n    let si = index - 1;\n    let last = -1;\n    while (ret <= si) {\n        let k = Math.floor((ret + si) / 2);\n        if (self[k] > parent) {\n            si = k - 1;\n        } else if (self[k] < parent) {\n            ret = k + 1;\n        } else {\n            last = k;\n            si = k - 1;\n        }\n    }\n    return last;\n}\n\n", "lang": "javascript", "code_str_generate": "function first(self, parent, index) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ret = 0;\n    let si = index - 1;\n    let last = -1;\n    while (ret <= si) {\n        let k = Math.floor((ret + si) / 2);\n        if (self[k] > parent) {\n            si = k - 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the first position of an element in a sorted array."}
{"task_id": 156, "Adversarial Code": "function next_Power_Of_2(n) {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    //begin to write code\n", "Adversarial truth": "function next_Power_Of_2(n) {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n = n >> (1);\n        count = count + (1);\n    }\n    return 1 << count;\n}\n\n", "lang": "javascript", "code_str_generate": "function next_Power_Of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find smallest power of 2 greater than or equal to n."}
{"task_id": 140, "Adversarial Code": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n", "Adversarial truth": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1", "lang": "python", "code_str_generate": "def gcd(p,q):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number is co-prime or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n", "prompt": "Write a python function to check whether the given number is co-prime or not."}
{"task_id": 355, "Adversarial Code": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n        }\n        return maxProduct;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest product of the pair of adjacent elements from a given list of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n            //begin to write code\n", "prompt": "Write a java function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 297, "Adversarial Code": "//function definition\nfunction large_product(num, alpha, callback) {\n    let result = [];\n    num.forEach(n => {\n        alpha.forEach(a => {\n        //begin to write code\n", "Adversarial truth": "//function definition\nfunction large_product(num, alpha, callback) {\n    let result = [];\n    num.forEach(n => {\n        alpha.forEach(a => {\n            result.push(n * a);\n        });\n    });\n    result.sort((A, B) => B - A);\n    return result.slice(0, callback);\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction large_product(num, alpha, callback) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the specified number of largest products from two given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = [];\n    num.forEach(n => {\n        alpha.forEach(a => {\n        //begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 444, "Adversarial Code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    temp_var_2 = 9.9\n    #begin to write code\n", "Adversarial truth": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    temp_var_2 = 9.9\n    print('This function is used to remove a item of a list')\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnumb_number(monthnum2):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    temp_var_2 = 9.9\n    #begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 339, "Adversarial Code": "def minimum_Length(s) :\n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n", "Adversarial truth": "def minimum_Length(s) : \n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n        arr[ord(s[i]) -ord('a')] += 1\n    for i in range(26) : \n        if arr[i] > maxOcc : \n            maxOcc = arr[i] \n    return n - maxOcc ", "lang": "python", "code_str_generate": "def minimum_Length(s) :\n\n    '''\n    progame language:python\n    description:Write a python function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxOcc = 0\n    n = len(s) \n    arr = [0]*26\n    for i in range(n) : \n    #begin to write code\n", "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 15, "Adversarial Code": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                }\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the given tuple list has all k elements.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 115, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n\n\n#include <iostream>\n#include <algorithm>\n\nint sum(int a, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of common divisors of two given numbers."}
{"task_id": 247, "Adversarial Code": "def count_odd(array_nums):\n   count_odd\\\n   #begin to write code\n", "Adversarial truth": "def count_odd(array_nums):\n   count_odd\\\n = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "lang": "python", "code_str_generate": "def count_odd(array_nums):\n\n   '''\n   progame language:python\n   description:Write a function to find number of odd elements in the given list using lambda function.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   count_odd\\\n   #begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 415, "Adversarial Code": "class Solution {\n    public static List<Integer> func_0(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> func_0(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n            }\n        }\n        return oddNums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Integer> func_0(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 79, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_llt(const std::vector<std::string>& arr) {\n    int max = arr[0].length();\n    for (const std::string& var : arr) {\n        if (var.length() > max) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint len_llt(const std::vector<std::string>& arr) {\n    int max = arr[0].length();\n    for (const std::string& var : arr) {\n        if (var.length() > max) {\n            max = var.length();\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_llt(const std::vector<std::string>& arr) {\n    int max = arr[0].length();\n    for (const std::string& var : arr) {\n        if (var.length() > max) {\n//begin to write code\n", "prompt": "Write a cpp function to find the length of the longest word."}
{"task_id": 495, "Adversarial Code": "class Solution {\n    public int peimutzgronXleufrcivnt(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int peimutzgronXleufrcivnt(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                if (j < k) {\n                    P[i][j + 1] = 0;\n                }\n            }\n        }\n        return P[n][k];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int peimutzgronXleufrcivnt(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                    //begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 325, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 28 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname1 == \"February\") {\n        return 1;\n//begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 172, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint func_0(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 389, "Adversarial Code": "function sort(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n", "Adversarial truth": "function sort(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function sort(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": 233, "Adversarial Code": "function next_Perfect_Square(N) {\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    //begin to write code\n", "Adversarial truth": "function next_Perfect_Square(N) {\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\nlet temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n", "lang": "javascript", "code_str_generate": "function next_Perfect_Square(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    //begin to write code\n", "prompt": "Write a javascript function to find the next perfect square greater than a given number."}
{"task_id": 436, "Adversarial Code": "def cube_nums(nums):\n var_0 = 3\n #begin to write code\n", "Adversarial truth": "def cube_nums(nums):\n var_0 = 3\n cube_nums = list(map(lambda x: x ** var_0 , nums))\n return cube_nums", "lang": "python", "code_str_generate": "def cube_nums(nums):\n\n '''\n progame language:python\n description:Write a function to find cubes of individual elements in a list using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = 3\n #begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 373, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n            const auto var_3 = 1;\n            mn = arr[i];\n            freq = var_3 ;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n        if (arr[i] < mn) {\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the smallest value in a given array."}
{"task_id": 316, "Adversarial Code": "def check_isosceles(x,y,z):\n  if x == y or y == z or z == x:\n\t   return 1\n\t   #begin to write code\n", "Adversarial truth": "def check_isosceles(x,y,z):\n  if x == y or y == z or z == x:\n\t   return 1\n  else:\n     return 0", "lang": "python", "code_str_generate": "def check_isosceles(x,y,z):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is isosceles or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if x == y or y == z or z == x:\n\t   return 1\n\t   #begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 392, "Adversarial Code": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n", "Adversarial truth": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif not((re.search(p, str))):\n\t\treturn False\n\telse:\n\t\treturn True", "lang": "python", "code_str_generate": "import re\ndef is_valid_URL(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if a url is valid or not using regex.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\t#begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 262, "Adversarial Code": "class Solution {\n    public static int[] substract_elements(long[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] substract_elements(long[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] substract_elements(long[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 391, "Adversarial Code": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <regex>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n\n    if (url.empty()) {\n        return false;\n    }\n\n    return regex_search(url, pattern);\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 453, "Adversarial Code": "import math\ndef check_value(dict, n):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import math\n#This is a comment line.\ndef check_value(dict, n):\n    result = all(x == n for x in dict.values()) \n    return result", "lang": "python", "code_str_generate": "import math\ndef check_value(dict, n):\n\n    '''\n    progame language:python\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 88, "Adversarial Code": "function format(m) {\n//begin to write code\n", "Adversarial truth": "function format(m) {\n    return m.toString(2);\n}\n\n", "lang": "javascript", "code_str_generate": "function format(m) {\n//begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 378, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//This is a comment line.\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n//This is a comment line.\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n//This is a comment line.\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0) {\n        return 2;\n//begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 461, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> o) {\n    std::sort(o.begin(), o.end());\n    for (int i = 1; i < o.size(); ++i) {\n        if (o[i] != o[i - 1] + 1) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool check_Consecutive(std::vector<int> o) {\n    std::sort(o.begin(), o.end());\n    for (int i = 1; i < o.size(); ++i) {\n        if (o[i] != o[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> o) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(o.begin(), o.end());\n    for (int i = 1; i < o.size(); ++i) {\n        if (o[i] != o[i - 1] + 1) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given list contains consecutive numbers or not."}
{"task_id": 186, "Adversarial Code": "function pow(func, args) {\n  const results = func.map((fun, i) => Math.pow(fun, args[i]));\n  //begin to write code\n", "Adversarial truth": "function pow(func, args) {\n  const results = func.map((fun, i) => Math.pow(fun, args[i]));\n  return results;\n}\n\n", "lang": "javascript", "code_str_generate": "function pow(func, args) {\n  const results = func.map((fun, i) => Math.pow(fun, args[i]));\n  //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 460, "Adversarial Code": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n        }\n        return mul % n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of array multiplication divided by n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n", "prompt": "Write a java function to find remainder of array multiplication divided by n."}
{"task_id": 254, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (long i = 0; i < step; i = i + 1) {\n        for (int j = i; j < S.size(); j = j + (step)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (long i = 0; i < step; i = i + 1) {\n        for (int j = i; j < S.size(); j = j + (step)) {\n            result[i].push_back(S[j]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a list for every nth element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<T>> result(step);\n    for (long i = 0; i < step; i = i + 1) {\n        for (int j = i; j < S.size(); j = j + (step)) {\n//begin to write code\n", "prompt": "Write a function to split a list for every nth element."}
{"task_id": 23, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<long>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_missing(std::vector<long>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n        } else if (ar[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<long>& ar, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the missing number in a sorted array."}
{"task_id": 182, "Adversarial Code": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  #begin to write code\n", "Adversarial truth": "def remove_tuple(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ", "lang": "python", "code_str_generate": "def remove_tuple(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove the duplicates from the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(set(test_tup))\n  #begin to write code\n", "prompt": "Write a function to remove the duplicates from the given tuple."}
{"task_id": 14, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, long n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint find_Product(std::vector<int> arr, long n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, long n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n//begin to write code\n", "prompt": "Write a cpp function to find the product of non-repeated elements in a given array."}
{"task_id": 232, "Adversarial Code": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples."}
{"task_id": 418, "Adversarial Code": "def func_0(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def func_0(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def func_0(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to extract the elementwise and tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 383, "Adversarial Code": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n//This is a comment line.\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool check_distinct(std::vector<int> test_vec) {\n//This is a comment line.\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n            break;\n        }\n        temp.insert(ele);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if given tuple is distinct or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n//begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 16, "Adversarial Code": "class Solution {\n    public static List<String> func_0(List<String> var_0) {\n        List<String> var_1 = new ArrayList<>();\n        for (String var_2 : var_0) {\n            var_1.add(var_2.replaceAll(\"\\\\d\", \"\"));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> func_0(List<String> var_0) {\n        List<String> var_1 = new ArrayList<>();\n        for (String var_2 : var_0) {\n            var_1.add(var_2.replaceAll(\"\\\\d\", \"\"));\n        }\n        return var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> func_0(List<String> var_0) {\n        List<String> var_1 = new ArrayList<>();\n        for (String var_2 : var_0) {\n            var_1.add(var_2.replaceAll(\"\\\\d\", \"\"));\n            //begin to write code\n", "prompt": "Write a java function to remove all digits from a list of strings."}
{"task_id": 492, "Adversarial Code": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(1 + i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(1 + i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to add consecutive numbers of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(1 + i));\n            //begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 84, "Adversarial Code": "class Solution {\n    public\n static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n            }\n        }\n        return minLength;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int findMinLength(List<List<Integer>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum length of sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n            //begin to write code\n", "prompt": "Write a java function to find the minimum length of sublist."}
{"task_id": 211, "Adversarial Code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n", "Adversarial truth": "def check_type(test_tuple):\n\n\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n  return (res) ", "lang": "python", "code_str_generate": "def check_type(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to check if all the elements in tuple have same data type or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n    #begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 271, "Adversarial Code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)\n\n\n", "lang": "python", "code_str_generate": "def sub_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to substaract two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 170, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\n\nusing namespace std;\n\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n            lowercase_characters.push_back(c);\n        } else if (isdigit(c)) {\n            numerical_characters.push_back(c);\n        } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n            special_characters.push_back(c);\n        }\n    }\n\n    return make_tuple(uppercase_characters, lowercase_characters, numerical_characters, special_characters);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "prompt": "Write a function to find the longest common prefix in the given set of strings."}
{"task_id": 211, "Adversarial Code": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      #begin to write code\n", "Adversarial truth": "def check_type(test_tuple):\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      break\n      temp_var_4 = 9.9\n      print('This function is used to remove a item of a list')\n  return (res) ", "lang": "python", "code_str_generate": "def check_type(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to check if all the elements in tuple have same data type or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  for ele in test_tuple:\n    if not isinstance(ele, type(test_tuple[0])):\n      res = False\n      #begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 216, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint mim_of_thiev(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint mim_of_thiev(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint mim_of_thiev(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 281, "Adversarial Code": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        return q;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find quotient of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int q = n / m;\n        //begin to write code\n", "prompt": "Write a java function to find quotient of two numbers."}
{"task_id": 477, "Adversarial Code": "class Solution {\n    public static double areaPentagon(double a) {\n        double aiez = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double areaPentagon(double a) {\n        double aiez = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return aiez;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double areaPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double aiez = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 47, "Adversarial Code": "function opposite_Signs(x, y) {\n//begin to write code\n", "Adversarial truth": "function opposite_Signs(x, y) {\n    return ((x ^ y) < 0);\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function opposite_Signs(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the given two integers have opposite sign or not."}
{"task_id": 51, "Adversarial Code": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <algorithm>\n#include <vector>\n#include <cassert>\n\nint smallest_num(std::vector<int> xs) {\n    return *std::min_element(xs.begin(), xs.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find smallest number in a list."}
{"task_id": 430, "Adversarial Code": "class Solution {\n    public static int surfaceareaCube(int l) {\n        final int var_0 = 6;\n        int surfacearea = var_0  * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int surfaceareaCube(int l) {\n        final int var_0 = 6;\n        int surfacearea = var_0  * l * l;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int surfaceareaCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 6;\n        int surfacearea = var_0  * l * l;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 91, "Adversarial Code": "function _(word) {\n//begin to write code\n", "Adversarial truth": "function _(word) {\n    return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');\n}\n\n", "lang": "javascript", "code_str_generate": "function _(word) {\n//begin to write code\n", "prompt": "Write a function to convert snake case string to camel case string."}
{"task_id": 343, "Adversarial Code": "def tn_ap(var_0,var_2,var_1):\n  var_3 = var_0 + (var_2 - 1) * var_1\n  #begin to write code\n", "Adversarial truth": "def tn_ap(var_0,var_2,var_1):\n  var_3 = var_0 + (var_2 - 1) * var_1\n  return var_3", "lang": "python", "code_str_generate": "def tn_ap(var_0,var_2,var_1):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of arithemetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_3 = var_0 + (var_2 - 1) * var_1\n  #begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 279, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<long>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<long>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n            max_length = x.size();\n            max_list = x;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<long>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "prompt": "Write a function to find the list of lists with maximum length."}
{"task_id": 128, "Adversarial Code": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double circleCircumference(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the circumference of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n        //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 181, "Adversarial Code": "def check_String(str):\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "Adversarial truth": "def check_String(str): \n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n            flag_l = True  \n        if i.isdigit(): \n            flag_n = True\n    return flag_l and flag_n ", "lang": "python", "code_str_generate": "def check_String(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    flag_l = False\n    flag_n = False\n    for i in str: \n        if i.isalpha(): \n        #begin to write code\n", "prompt": "Write a python function to check whether a string has atleast one letter and one number."}
{"task_id": 259, "Adversarial Code": "class Solution {\n    public\n static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n\n\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int sumEvenAndEvenIndex(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of even numbers at even positions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n            //begin to write code\n", "prompt": "Write a java function to find the sum of even numbers at even positions."}
{"task_id": 229, "Adversarial Code": "function replaceList(list1, list2) {\n    list1.splice(-1, 1, ...list2);\n    //begin to write code\n", "Adversarial truth": "function replaceList(list1, list2) {\n    list1.splice(-1, 1, ...list2);\n    return list1;\n}", "lang": "javascript", "code_str_generate": "function replaceList(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace the last element of the list with another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.splice(-1, 1, ...list2);\n    //begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 257, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint ascii_value(char k) {\n  return int(k);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n//begin to write code\n", "prompt": "Write a function to find the n'th star number."}
{"task_id": 211, "Adversarial Code": "class Solution {\n    public static boolean func_0(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean func_0(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean func_0(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 210, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nlong first_even(const std::vector<long>& nums) {\n    for (long num : nums) {\n        if (0 == num % 2) {\n            return num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nlong first_even(const std::vector<long>& nums) {\n    for (long num : nums) {\n        if (0 == num % 2) {\n            return num;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nlong first_even(const std::vector<long>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (long num : nums) {\n        if (0 == num % 2) {\n            return num;\n//begin to write code\n", "prompt": "Write a cpp function to find the first even number in a given list of numbers."}
{"task_id": 85, "Adversarial Code": "function wrvrsoi(var_0) {\n    let var_2 = 0;\n    for (let vai_1 = 1; vai_1 <= var_0; vai_1++) {\n        if (var_0 % vai_1 === 0) {\n        //begin to write code\n", "Adversarial truth": "function wrvrsoi(var_0) {\n    let var_2 = 0;\n    for (let vai_1 = 1; vai_1 <= var_0; vai_1++) {\n        if (var_0 % vai_1 === 0) {\n            var_2++;\n        }\n    }\n    return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function wrvrsoi(var_0) {\n    let var_2 = 0;\n    for (let vai_1 = 1; vai_1 <= var_0; vai_1++) {\n        if (var_0 % vai_1 === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the number of divisors of a given integer."}
{"task_id": 432, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint largest_neg(std::vector<int> list1) {\n    int max = list1[0];\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    for (int x : list1) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint largest_neg(std::vector<int> list1) {\n    int max = list1[0];\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    for (int x : list1) {\n        if (x < max) {\n            max = x;\n        }\n    }\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint largest_neg(std::vector<int> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max = list1[0];\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    for (int x : list1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest negative number from the given list."}
{"task_id": 350, "Adversarial Code": "function func_0(list1) {\n    const filteredList = list1.filter(c => c.length);\n    //begin to write code\n", "Adversarial truth": "function func_0(list1) {\n    const filteredList = list1.filter(c => c.length);\n    return filteredList;\n  }", "lang": "javascript", "code_str_generate": "function func_0(list1) {\n    const filteredList = list1.filter(c => c.length);\n    //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 93, "Adversarial Code": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            result.add(sublist);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n\n        /*\n        progame language:java\n        description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            //begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 307, "Adversarial Code": "import java.rmi.*;\nclass Solution {\n    public static int maxVolume(int s) {\n//This is a comment line.\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nclass Solution {\n    public static int maxVolume(int s) {\n//This is a comment line.\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue = Math.max(maxvalue, i * j * k);\n            }\n        }\n        return maxvalue;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.rmi.*;\nclass Solution {\n    public static int maxVolume(int s) {\n\n    /*\n    progame language:java\n    description:Write a java function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n", "prompt": "Write a java function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 68, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\nbool word_len(std::string s) {\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nbool word_len(std::string s) {\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n        if (w.length() % 2 != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\nbool word_len(std::string s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the length of the word is odd or not."}
{"task_id": 347, "Adversarial Code": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "lang": "python", "code_str_generate": "def moddiv_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to find modulo division of two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 42, "Adversarial Code": "def check_Equality(str):\n  if (str[-1] == str[0]):  \n    return (\"Equal\") \n    #begin to write code\n", "Adversarial truth": "def check_Equality(str):\n  if (str[-1] == str[0]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "lang": "python", "code_str_generate": "def check_Equality(str):\n\n  '''\n  progame language:python\n  description:Write a python function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if (str[-1] == str[0]):  \n    return (\"Equal\") \n    #begin to write code\n", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 107, "Adversarial Code": "def string_to_list(string):\n    lst = list(string.split(\" \")) \n    #begin to write code\n", "Adversarial truth": "def string_to_list(string): \n    lst = list(string.split(\" \")) \n    return lst\n    lambda: print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "def string_to_list(string):\n\n    '''\n    progame language:python\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    lst = list(string.split(\" \")) \n    #begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 421, "Adversarial Code": "def median_trapezium(base1,base2,height):\n median = (base1+ base2) * 0.5\n #begin to write code\n", "Adversarial truth": "def median_trapezium(base1,base2,height):\n median = (base1+ base2) * 0.5\n return median", "lang": "python", "code_str_generate": "def median_trapezium(base1,base2,height):\n\n '''\n progame language:python\n description:Write a function to find the median of a trapezium.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n median = (base1+ base2) * 0.5\n #begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 40, "Adversarial Code": "class Solution {\n    public boolean checkEquilateral(long x, int y, long z) {\n        if (y == x && z == y) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkEquilateral(long x, int y, long z) {\n        if (y == x && z == y) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkEquilateral(long x, int y, long z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is equilateral or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (y == x && z == y) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 469, "Adversarial Code": "def\\\n get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n", "Adversarial truth": "def\\\n get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to find the maximum occurring character in a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n get_max_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n", "prompt": "Write a python function to find the maximum occurring character in a given string."}
{"task_id": 381, "Adversarial Code": "def get_max_sum (m):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<m + 1:\n\t#begin to write code\n", "Adversarial truth": "def get_max_sum (m):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<m + 1:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = i + 1\n\treturn res[m]", "lang": "python", "code_str_generate": "def get_max_sum (m):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<m + 1:\n\t#begin to write code\n", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 322, "Adversarial Code": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public long compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public long compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n            }\n        });\n        return sub_li;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n\n        /*\n        progame language:java\n        description:Write a java function to sort a list according to the second element in sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public long compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n                //begin to write code\n", "prompt": "Write a java function to sort a list according to the second element in sublist."}
{"task_id": 217, "Adversarial Code": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    (function() {let temp_var_6 = 9.9; temp_var_6 = temp_var_6 + 1;})();\n    let new_num = n & num;\n    //begin to write code\n", "Adversarial truth": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    (function() {let temp_var_6 = 9.9; temp_var_6 = temp_var_6 + 1;})();\n    let new_num = n & num;\n    if (new_num === 0) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether all the bits are unset in the given range or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    (function() {let temp_var_6 = 9.9; temp_var_6 = temp_var_6 + 1;})();\n    let new_num = n & num;\n    //begin to write code\n", "prompt": "Write a javascript function to check whether all the bits are unset in the given range or not."}
{"task_id": 273, "Adversarial Code": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether all items of a list are equal to a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 128, "Adversarial Code": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double circleCircumference(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the circumference of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 131, "Adversarial Code": "class Solution {\n    public static int func_0(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 213, "Adversarial Code": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (0 != n) {\n            count += 1 & n;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (0 != n) {\n            count += 1 & n;\n            n >>= 1;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count set bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (0 != n) {\n            count += 1 & n;\n            //begin to write code\n", "prompt": "Write a java function to count set bits of a given number."}
{"task_id": 138, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, long n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &arr, long n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        result = max(result, dp[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, long n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 299, "Adversarial Code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n", "Adversarial truth": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "lang": "python", "code_str_generate": "def string_to_tuple(str1):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 299, "Adversarial Code": "class Solution {\n    public static Character[] stirngGoGupoe(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character[] stirngGoGupoe(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n            }\n        }\n        Character[] result = new Character[list.size()];\n        return list.toArray(result);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Character[] stirngGoGupoe(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 454, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n            filtered[element.first] = element.second;\n        }\n    }\n    return filtered;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to drop empty items from a given dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 466, "Adversarial Code": "import java.rmi.*;\nimport java.net.*;\nclass Solution {\n    public static String isLower(String string) {\n        final double var_0 = 9.9;\n        final String var_1 = \"This function is used to remove a item of a list\";\n        //begin to write code\n", "Adversarial truth": "import java.rmi.*;\nimport java.net.*;\nclass Solution {\n    public static String isLower(String string) {\n        final double var_0 = 9.9;\n        final String var_1 = \"This function is used to remove a item of a list\";\n        return string.toLowerCase();\n        double temp_var_2 = var_0 ;System.out.println(var_1 );\n    }\n}\n", "lang": "java", "code_str_generate": "import java.rmi.*;\nimport java.net.*;\nclass Solution {\n    public static String isLower(String string) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert the given string to lower case.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final double var_0 = 9.9;\n        final String var_1 = \"This function is used to remove a item of a list\";\n        //begin to write code\n", "prompt": "Write a java function to convert the given string to lower case."}
{"task_id": 14, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint\\\n find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint\\\n find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint\\\n find_Product(std::vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the product of non-repeated elements in a given array."}
{"task_id": 340, "Adversarial Code": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], 1 + count_map.get(arr[i]));\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], 1 + count_map.get(arr[i]));\n            } else {\n                count_map.put(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (k == count_map.get(arr[i])) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first element occurring k times in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], 1 + count_map.get(arr[i]));\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "prompt": "Write a java function to find the first element occurring k times in a given array."}
{"task_id": 266, "Adversarial Code": "class Solution {\n    public static Map<String, Integer> func_0(Map<String, Integer> var_2, int var_2) {\n        Map<String, Integer> var_3 = new HashMap<>();\n        for (Map.Entry<String, Integer> var_2 : var_2.entrySet()) {\n            if (var_2.getValue() >= var_2) {\n                var_3.put(var_2.getKey(), var_2.getValue());\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, Integer> func_0(Map<String, Integer> var_2, int var_2) {\n        Map<String, Integer> var_3 = new HashMap<>();\n        for (Map.Entry<String, Integer> var_2 : var_2.entrySet()) {\n            if (var_2.getValue() >= var_2) {\n                var_3.put(var_2.getKey(), var_2.getValue());\n            }\n        }\n        return var_3;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<String, Integer> func_0(Map<String, Integer> var_2, int var_2) {\n        Map<String, Integer> var_3 = new HashMap<>();\n        for (Map.Entry<String, Integer> var_2 : var_2.entrySet()) {\n            if (var_2.getValue() >= var_2) {\n                var_3.put(var_2.getKey(), var_2.getValue());\n                //begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 299, "Adversarial Code": "import javax.swing.*;\nclass Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "Adversarial truth": "import javax.swing.*;\nclass Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n            }\n        }\n        Character[] result = new Character[list.size()];\n        return list.toArray(result);\n    }\n}\n", "lang": "java", "code_str_generate": "import javax.swing.*;\nclass Solution {\n    public static Character[] stringToTuple(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given string to a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 240, "Adversarial Code": "const var_0 = 'url';\nconst url = require(var_0 );\nfunction insert_element(list, element) {\n    let newList = [];\n    //begin to write code\n", "Adversarial truth": "const var_0 = 'url';\nconst url = require(var_0 );\nfunction insert_element(list, element) {\n    let newList = [];\n    for (let elt of list) {\n        newList.push(element, elt);\n    }\n    return newList;\n}\n\n", "lang": "javascript", "code_str_generate": "const var_0 = 'url';\nconst url = require(var_0 );\nfunction insert_element(list, element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to insert an element before each element of a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let newList = [];\n    //begin to write code\n", "prompt": "Write a function to insert an element before each element of a list."}
{"task_id": 84, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Finw_Min_Lvmgth(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& e : lst) {\n        if (e.size() < minLength) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint Finw_Min_Lvmgth(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& e : lst) {\n        if (e.size() < minLength) {\n            minLength = e.size();\n        }\n    }\n    return minLength;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Finw_Min_Lvmgth(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& e : lst) {\n        if (e.size() < minLength) {\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum length of sublist."}
{"task_id": 490, "Adversarial Code": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        int result = 0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n\n    public static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        int result = 0;\n        int z = (int) Math.sqrt(n);\n        for (int i = 1; i <= z; i++) {\n            if (n % i == 0) {\n                result += 2;\n                if (i == n / i) {\n                    result -= 1;\n//This is a comment line.\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public static int num_comm_div(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find common divisor between two numbers in a given pair.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = ngcd(x, y);\n        int result = 0;\n        //begin to write code\n", "prompt": "Write a java function to find common divisor between two numbers in a given pair."}
{"task_id": 471, "Adversarial Code": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "Adversarial truth": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "lang": "javascript", "code_str_generate": "function match(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"task_id": 174, "Adversarial Code": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n    return focus;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 128, "Adversarial Code": "def circle_circumference(r):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "lang": "python", "code_str_generate": "def circle_circumference(r):\n\n    '''\n    progame language:python\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 164, "Adversarial Code": "class Solution {\n    public boolean add(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean add(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n                stack.push(c);\n            } else if (stack.isEmpty() || mappings.get(stack.pop()) != c) {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean add(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n            //begin to write code\n", "prompt": "Write a function to verify validity of a string of parentheses."}
{"task_id": 447, "Adversarial Code": "import pickle\ndef rectangle_area(l,b):\n  area=l*b\n  #begin to write code\n", "Adversarial truth": "import pickle\ndef rectangle_area(l,b):\n  area=l*b\n#This is a comment line.\n  return area", "lang": "python", "code_str_generate": "import pickle\ndef rectangle_area(l,b):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a rectangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=l*b\n  #begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 40, "Adversarial Code": "def func_0(ear_9,var_1,var_2):\n  if ear_9 == var_1 == var_2:\n\t   return True\n\t   #begin to write code\n", "Adversarial truth": "def func_0(ear_9,var_1,var_2):\n  if ear_9 == var_1 == var_2:\n\t   return True\n  else:\n     return False", "lang": "python", "code_str_generate": "def func_0(ear_9,var_1,var_2):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is equilateral or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if ear_9 == var_1 == var_2:\n\t   return True\n\t   #begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 399, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n            }\n        }\n        return min_val;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static int min_val(List<Object> listval) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 233, "Adversarial Code": "class Solution {\n    public static int nextPerfectSquare(int N) {\n        int\n nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int nextPerfectSquare(int N) {\n        int\n nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n        return nextN * nextN;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int nextPerfectSquare(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the next perfect square greater than a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int\n nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n //begin to write code\n", "prompt": "Write a java function to find the next perfect square greater than a given number."}
{"task_id": 9, "Adversarial Code": "class Solution {\n    public static boolean func_0(int x) {\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean func_0(int x) {\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        while (x % 2 == 0) {\n            x = x / 2;\n            p = p + 1;\n            if (p == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean func_0(int x) {\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        //begin to write code\n", "prompt": "Write a function to check if the given number is woodball or not."}
{"task_id": 30, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<long>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> filter_evennumbers(const std::vector<long>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<long>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 498, "Adversarial Code": "def average_Odd(n) :\n    if (0 == n%2) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n", "Adversarial truth": "def average_Odd(n) : \n    if (0 == n%2) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=1 + count\n        sm = sm + n \n        n = n-2\n    return sm//count ", "lang": "python", "code_str_generate": "def average_Odd(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (0 == n%2) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n", "prompt": "Write a python function to find the average of odd numbers till a given odd number."}
{"task_id": 441, "Adversarial Code": "def\\\n loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n", "Adversarial truth": "def\\\n loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n\n\n  else:\n    return None", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function that gives loss amount if the given amount has loss else return none.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 366, "Adversarial Code": "def remove_Char(s,c) :\n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n    #begin to write code\n", "Adversarial truth": "def remove_Char(s,c) :  \n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n    s = '' . join(s)   \n    return (s) ", "lang": "python", "code_str_generate": "def remove_Char(s,c) :\n\n    '''\n    progame language:python\n    description:Write a python function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    counts = s.count(c) \n    s = list(s) \n    while counts :  \n    #begin to write code\n", "prompt": "Write a python function to remove all occurrences of a character in a given string."}
{"task_id": 18, "Adversarial Code": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element occurring odd number of times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "prompt": "Write a java function to find the element occurring odd number of times."}
{"task_id": 11, "Adversarial Code": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n    for (let i = 0; i < nums.length; i = i + 1) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n", "Adversarial truth": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n\n    for (let i = 0; i < nums.length; i = i + 1) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n        } else {\n            num_set.add(nums[i]);\n        }\n    }\n\n    return no_duplicate;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_first_duplicate(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num_set = new Set();\n    let no_duplicate = -1;\n    for (let i = 0; i < nums.length; i = i + 1) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 157, "Adversarial Code": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "Adversarial truth": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n        if (i === x) count += 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency(a, x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the frequency of a number in a given array."}
{"task_id": 419, "Adversarial Code": "function parabola_directrix(a, b, c) { \n  const var_0 = 1;\n  const var_1 = 4;\n  //begin to write code\n", "Adversarial truth": "function parabola_directrix(a, b, c) { \n  const var_0 = 1;\n  const var_1 = 4;\n  let directrix = Math.floor(c - ((b * b) + var_0 ) * var_1  * a);\n  return directrix;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_directrix(a, b, c) { \n\n  /*\n  progame language:javascript\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = 1;\n  const var_1 = 4;\n  //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 373, "Adversarial Code": "def frequency_Of_Smallest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Smallest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq = freq + (1)\n    return freq ", "lang": "python", "code_str_generate": "def frequency_Of_Smallest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": 498, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n    while (n >= 1) {\n        count = count + (1);\n        sm = sm + (n);\n        n = n - (2);\n    }\n    return sm / count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n//begin to write code\n", "prompt": "Write a cpp function to find the average of odd numbers till a given odd number."}
{"task_id": 221, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n//This is a comment line.\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n\n    /*\n    progame language:java\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        //begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 129, "Adversarial Code": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n      //begin to write code\n", "Adversarial truth": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n        temp.add(ele);\n        res.push(ele);\n      }\n    }\n  }\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function extract_singly(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to extract elements that occur singly in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n      //begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 8, "Adversarial Code": "import math\ndef test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    temp_var_3 = 9.9\n    #begin to write code\n", "Adversarial truth": "import math\ndef test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    temp_var_3 = 9.9\n    print('This function is used to remove a item of a list')\n    return len(arraynums) != len(nums_set)     ", "lang": "python", "code_str_generate": "import math\ndef test_duplicate(arraynums):\n\n    '''\n    progame language:python\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nums_set = set(arraynums)    \n    temp_var_3 = 9.9\n    #begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 41, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(int b, int h) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(int b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint func_0(int b, int h) {\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 301, "Adversarial Code": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        return volume;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeCone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cone."}
{"task_id": 355, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\nint product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n        max_product = max(max_product, list_nums[i] * list_nums[i + 1]);\n    }\n    return max_product;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 459, "Adversarial Code": "def add_pairwise(test_tup):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def add_pairwise(test_tup):\n  res\\\n = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "lang": "python", "code_str_generate": "def add_pairwise(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the pairwise addition of the elements of the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 215, "Adversarial Code": "#include <iostream>\n#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n\n  /*\n  progame language:cpp\n  description:Write a cpp function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to remove the characters which have odd index values of a given string."}
{"task_id": 473, "Adversarial Code": "def remove_matching_tuple(test_list1, test_list2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def remove_matching_tuple(test_list1, test_list2):\n  res\\\n = [sub for sub in test_list1 if sub not in test_list2]\n\n\n  return (res) \n\n", "lang": "python", "code_str_generate": "def remove_matching_tuple(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to remove the matching tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 242, "Adversarial Code": "const util = require('util');\nconst dns = require('dns');\nfunction countInteger(list1) {\n    let ctr = 0;\n    for (let i of list1) {\n    //begin to write code\n", "Adversarial truth": "const util = require('util');\nconst dns = require('dns');\nfunction countInteger(list1) {\n    let ctr = 0;\n    for (let i of list1) {\n        if (Number.isInteger(i)) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nconst dns = require('dns');\nfunction countInteger(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i of list1) {\n    //begin to write code\n", "prompt": "Write a javascript function to count integers from a given list."}
{"task_id": 488, "Adversarial Code": "class Solution {\n    public static double diameterCircle(double r) {\n        double diameter = 2 * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double diameterCircle(double r) {\n        double diameter = 2 * r;\n        return diameter;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double diameterCircle(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the diameter of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double diameter = 2 * r;\n        //begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 321, "Adversarial Code": "class Solution {\n    public\n static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n        return charCountMap;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static Map<Character, Integer> charFrequency(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to count character frequency of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n        //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 51, "Adversarial Code": "class Solution {\n    public static int smallest_num(long[] xs) {\n        Arrays.sort(xs);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int smallest_num(long[] xs) {\n        Arrays.sort(xs);\n        return xs[0];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int smallest_num(long[] xs) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest number in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(xs);\n        //begin to write code\n", "prompt": "Write a java function to find smallest number in a list."}
{"task_id": 109, "Adversarial Code": "class Solution {\n    public static long maxProductTuple(int[][] list1) {\n        long result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long maxProductTuple(int[][] list1) {\n        long result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        return result_max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long maxProductTuple(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 80, "Adversarial Code": "def find_substring(str1, sfy_str):\n   if any(sfy_str in s for s in str1):\n   #begin to write code\n", "Adversarial truth": "def find_substring(str1, sfy_str):\n   if any(sfy_str in s for s in str1):\n       return True\n   return False", "lang": "python", "code_str_generate": "def find_substring(str1, sfy_str):\n\n   '''\n   progame language:python\n   description:Write a function to check if a substring is present in a given list of string values.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   if any(sfy_str in s for s in str1):\n   #begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 388, "Adversarial Code": "class Solution {\n    public\n static\n int\n[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n int\n[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n        }\n        return res;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static\n int\n[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        //begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 467, "Adversarial Code": "import re\ndef remove_lowercase(str1):\n var_0 = '[a-z]'\n var_1 = ''\n #begin to write code\n", "Adversarial truth": "import re\ndef remove_lowercase(str1):\n var_0 = '[a-z]'\n var_1 = ''\n remove_lower = lambda text: re.sub(var_0 , var_1 , text)\n result =  remove_lower(str1)\n return result", "lang": "python", "code_str_generate": "import re\ndef remove_lowercase(str1):\n\n '''\n progame language:python\n description:Write a function to remove lowercase substrings from a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = '[a-z]'\n var_1 = ''\n #begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 247, "Adversarial Code": "import argparse\ndef count_odd(array_nums):\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   #begin to write code\n", "Adversarial truth": "import argparse\n\ndef count_odd(array_nums):\n\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return count_odd", "lang": "python", "code_str_generate": "import argparse\ndef count_odd(array_nums):\n\n   '''\n   progame language:python\n   description:Write a function to find number of odd elements in the given list using lambda function.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   #begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 388, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<long, long, int, int> bitwise_xor(const std::tuple<int, int, int, long>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup2) ^ std::get<0>(test_tup1),\n        std::get<1>(test_tup2) ^ std::get<1>(test_tup1),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\n\nstd::tuple<long, long, int, int> bitwise_xor(const std::tuple<int, int, int, long>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup2) ^ std::get<0>(test_tup1),\n        std::get<1>(test_tup2) ^ std::get<1>(test_tup1),\n        std::get<2>(test_tup2) ^ std::get<2>(test_tup1),\n        std::get<3>(test_tup2) ^ std::get<3>(test_tup1)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<long, long, int, int> bitwise_xor(const std::tuple<int, int, int, long>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup2) ^ std::get<0>(test_tup1),\n        std::get<1>(test_tup2) ^ std::get<1>(test_tup1),\n//begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 76, "Adversarial Code": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    temp_var_6 = 9.9\n    print('This function is used to remove a item of a list')\n    #begin to write code\n", "Adversarial truth": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    temp_var_6 = 9.9\n    print('This function is used to remove a item of a list')\n    temp_var_5 = 9.9\n    while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n#This is a comment line.\n    return merged_dict", "lang": "python", "code_str_generate": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n\n    '''\n    progame language:python\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    temp_var_6 = 9.9\n    print('This function is used to remove a item of a list')\n    #begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 6, "Adversarial Code": "function radius(area) {\n    let radius = 4 * area;\n    //begin to write code\n", "Adversarial truth": "function radius(area) {\n    let radius = 4 * area;\n    return radius;\n}\n\n", "lang": "javascript", "code_str_generate": "function radius(area) {\n    let radius = 4 * area;\n    //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 323, "Adversarial Code": "def check_Validity(a,b,c):\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return 0\n        #begin to write code\n", "Adversarial truth": "def check_Validity(a,b,c):  \n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return 0\n    else: \n        return 1        ", "lang": "python", "code_str_generate": "def check_Validity(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \n        return 0\n        #begin to write code\n", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": 383, "Adversarial Code": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "Adversarial truth": "def check_distinct(test_tup):\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n      res = False\n      break\n    temp.add(ele)\n  return (res) ", "lang": "python", "code_str_generate": "def check_distinct(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to check if given tuple is distinct or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = True\n  temp = set()\n  for ele in test_tup:\n    if ele in temp:\n    #begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 313, "Adversarial Code": "class Solution {\n    public static int[] humOuZltvinages(int[] testArray) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] humOuZltvinages(int[] testArray) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n            } else {\n                sum2 += testArray[idx];\n            }\n        }\n        return new int[]{sum1, sum2};\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] humOuZltvinages(int[] testArray) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n                //begin to write code\n", "prompt": "Write a function to extract the sum of alternate chains of tuples."}
{"task_id": 131, "Adversarial Code": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n        /*\n        progame language:java\n        description:Write a function to count the same pair in three given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 259, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <vector>\nint solve(const std::vector<int>& vec, int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (vec[i] % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint solve(const std::vector<int>& vec, int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (vec[i] % 2 == 0) {\n            result += vec[i];\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <vector>\nint solve(const std::vector<int>& vec, int n) {\n    int result = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (vec[i] % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of even numbers at even positions."}
{"task_id": 138, "Adversarial Code": "function max(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "function max(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    let result = 1;\n    for (let i = 0; i < n; i++) {\n        if (result < dp[i]) {\n            result = dp[i];\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function max(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 29, "Adversarial Code": "import math\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "Adversarial truth": "import math\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n#This is a comment line.\n  return result", "lang": "python", "code_str_generate": "import math\nfrom collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n\n  '''\n  progame language:python\n  description:Write a function to find frequency of the elements in a given list of lists using collections module.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 6, "Adversarial Code": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int squarePerimeter(int a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = 4 * a;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 150, "Adversarial Code": "function remove_elements(collection, element) {\n    const result = collection.filter(item => !element.includes(item));\n    //begin to write code\n", "Adversarial truth": "function remove_elements(collection, element) {\n    const result = collection.filter(item => !element.includes(item));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_elements(collection, element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = collection.filter(item => !element.includes(item));\n    //begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 19, "Adversarial Code": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                if (checkEquality(s.substring(i, i + j))) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to count all the substrings starting and ending with same characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "prompt": "Write a java function to count all the substrings starting and ending with same characters."}
{"task_id": 213, "Adversarial Code": "function count_Set_Bits(var_1) { \n    let var_0 = 0;\n    while (var_1) { \n        var_0 += var_1 & 1;\n        //begin to write code\n", "Adversarial truth": "function count_Set_Bits(var_1) { \n    let var_0 = 0;\n    while (var_1) { \n        var_0 += var_1 & 1;\n        var_1 >>= 1;\n    }\n    return var_0;\n} \n\n", "lang": "javascript", "code_str_generate": "function count_Set_Bits(var_1) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_0 = 0;\n    while (var_1) { \n        var_0 += var_1 & 1;\n        //begin to write code\n", "prompt": "Write a javascript function to count set bits of a given number."}
{"task_id": 84, "Adversarial Code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "Adversarial truth": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength ", "lang": "python", "code_str_generate": "def Find_Min_Length(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minLength = min(len(x) for x in lst )\n    #begin to write code\n", "prompt": "Write a python function to find the minimum length of sublist."}
{"task_id": 400, "Adversarial Code": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder\n camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder\n camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String snakeToCamel(String word) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given snake case string to camel case string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] parts = word.split(\"_\");\n        StringBuilder\n camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "prompt": "Write a function to convert the given snake case string to camel case string by using regex."}
{"task_id": 407, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n        return a.size() < b.size();\n    });\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n", "prompt": "Write a cpp function to find the sublist having maximum length."}
{"task_id": 478, "Adversarial Code": "function frequency_Of_Largest(self, m) {\n    let smallest = m[0];\n    let count = 1;\n    for (let j = 1; j < self; j++) {\n        if (m[j] > smallest) {\n            smallest = m[j];\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Largest(self, m) {\n    let smallest = m[0];\n    let count = 1;\n    for (let j = 1; j < self; j++) {\n        if (m[j] > smallest) {\n            smallest = m[j];\n            count = 1;\n        } else if (m[j] === smallest) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Largest(self, m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let smallest = m[0];\n    let count = 1;\n    for (let j = 1; j < self; j++) {\n        if (m[j] > smallest) {\n            smallest = m[j];\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the largest value in a given array."}
{"task_id": 163, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\n\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n            if (stack.empty() || pchar[stack.top()] != parenthese) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n//begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 496, "Adversarial Code": "def remove_words(words, keyword):\n    for w in list(words):\n        if w in keyword:\n        #begin to write code\n", "Adversarial truth": "def remove_words(words, keyword):\n    for w in list(words):\n        if w in keyword:\n            words.remove(w)\n    return words  ", "lang": "python", "code_str_generate": "def remove_words(words, keyword):\n\n    '''\n    progame language:python\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for w in list(words):\n        if w in keyword:\n        #begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 237, "Adversarial Code": "class Solution {\n    public static double harmonicSum(long n) {\n        if (n < 2) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double harmonicSum(long n) {\n        if (n < 2) {\n            return 1;\n        } else {\n            return 1.0 / n + harmonicSum(n - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double harmonicSum(long n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the harmonic sum of n-1.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n < 2) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 459, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& tvhg_vex) {\n    std::vector<int> res;\n    for (size_t i = 0; i < tvhg_vex.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_pairwise(const std::vector<int>& tvhg_vex) {\n    std::vector<int> res;\n    for (size_t i = 0; i < tvhg_vex.size() - 1; ++i) {\n        res.push_back(tvhg_vex[i] + tvhg_vex[i + 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& tvhg_vex) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the pairwise addition of the elements of the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    for (size_t i = 0; i < tvhg_vex.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 52, "Adversarial Code": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "Adversarial truth": "function max_difference(test_list) {\n\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  let res = Math.max(...temp);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_difference(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 173, "Adversarial Code": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n    return focus;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "prompt": "Write a function to find all the values in a list that are greater than a specified number."}
{"task_id": 189, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<long> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (max_val == list1[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<long> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (max_val == list1[i]) {\n            max_result.push_back(i);\n        }\n    }\n    return max_result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<long> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (max_val == list1[i]) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 470, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n    if (sum == 0) return true;\n    if (n == 0) return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n    if (sum == 0) return true;\n    if (n == 0) return false;\n    if (set[n - 1] > sum) return is_subset_sum(set, n - 1, sum);\n    return is_subset_sum(set, n-1, sum) || is_subset_sum(set, n-1, sum-set[n-1]);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n\n    /*\n    progame language:cpp\n    description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sum == 0) return true;\n    if (n == 0) return false;\n//begin to write code\n", "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"task_id": 329, "Adversarial Code": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                if (count == 3) {\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the three lowest positive numbers from a given list of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n", "prompt": "Write a java function to find the sum of the three lowest positive numbers from a given list of numbers."}
{"task_id": 154, "Adversarial Code": "const cluster = require('cluster');\nfunction count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n        //begin to write code\n", "Adversarial truth": "const cluster = require('cluster');\nfunction count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n", "lang": "javascript", "code_str_generate": "const cluster = require('cluster');\nfunction count_char_position(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n        //begin to write code\n", "prompt": "Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 320, "Adversarial Code": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        long x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        long x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n            }\n            x = x << 1;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countUnsetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count unset bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        long x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n", "prompt": "Write a java function to count unset bits of a given number."}
{"task_id": 94, "Adversarial Code": "def count(lst):\n    #begin to write code\n", "Adversarial truth": "def count(lst):   \n    return sum(lst) ", "lang": "python", "code_str_generate": "def count(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to count true booleans in the given list."}
{"task_id": 213, "Adversarial Code": "function\n count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n    //begin to write code\n", "Adversarial truth": "function\n count_Set_Bits(n) { \n    let count = 0;\n\n\n\n\n    while (n) { \n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n} \n\n\n", "lang": "javascript", "code_str_generate": "function\n count_Set_Bits(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n) { \n    //begin to write code\n", "prompt": "Write a javascript function to count set bits of a given number."}
{"task_id": 393, "Adversarial Code": "def minimum(a,y):\n    if a <= y: \n        return a \n        #begin to write code\n", "Adversarial truth": "def minimum(a,y):   \n    if a <= y: \n        return a \n    else: \n        return y ", "lang": "python", "code_str_generate": "def minimum(a,y):\n\n    '''\n    progame language:python\n    description:Write a python function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if a <= y: \n        return a \n        #begin to write code\n", "prompt": "Write a python function to find the minimum of two numbers."}
{"task_id": 47, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool opposite_Signs(int x, int y) {\n    return ((x ^ y) < 0);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given two integers have opposite sign or not."}
{"task_id": 161, "Adversarial Code": "function func_0(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "Adversarial truth": "function func_0(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 368, "Adversarial Code": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n", "Adversarial truth": "def surfacearea_cuboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA\n", "lang": "python", "code_str_generate": "def surfacearea_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cuboid.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 367, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n        test_list.insert(test_list.begin(), last);\n    }\n    return test_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "prompt": "Write a cpp function to shift last element to first position in the given list."}
{"task_id": 367, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> arr) {\n    if (!arr.empty()) {\n        int index = arr.back();\n        arr.pop_back();\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> move_first(std::vector<int> arr) {\n    if (!arr.empty()) {\n        int index = arr.back();\n        arr.pop_back();\n        arr.insert(arr.begin(), index);\n    }\n    return arr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!arr.empty()) {\n        int index = arr.back();\n        arr.pop_back();\n//begin to write code\n", "prompt": "Write a cpp function to shift last element to first position in the given list."}
{"task_id": 477, "Adversarial Code": "class Solution {\n    public static double areaPentagon(double a) {\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return area;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double areaPentagon(double a) {\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return area;\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double areaPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return area;\n        //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 485, "Adversarial Code": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "Adversarial truth": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "lang": "python", "code_str_generate": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n\n  '''\n  progame language:python\n  description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": 255, "Adversarial Code": "function lateralsurface_cube(l) {\n    const LSA = (l * l) * 4;\n    //begin to write code\n", "Adversarial truth": "function lateralsurface_cube(l) {\n    const LSA = (l * l) * 4;\n    return LSA;\n}\n\n", "lang": "javascript", "code_str_generate": "function lateralsurface_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const LSA = (l * l) * 4;\n    //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 188, "Adversarial Code": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        {\n            int i = n;\n            while(i > 0){\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        {\n            int i = n;\n            while(i > 0){\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n                    i--;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find highest power of 2 less than or equal to given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        {\n            int i = n;\n            while(i > 0){\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "prompt": "Write a java function to find highest power of 2 less than or equal to given number."}
{"task_id": 484, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 465, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint big_sum(const std::vector<int>& nums) {\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint big_sum(const std::vector<int>& nums) {\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint big_sum(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of the largest and smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of the largest and smallest value in a given array."}
{"task_id": 154, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//This is a comment line.\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n//This is a comment line.\n#include <cassert>\n\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//This is a comment line.\nint count_char_position(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n//begin to write code\n", "prompt": "Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 10, "Adversarial Code": "def multiples_of_num(m,n):\n    multiples_of_num= list(range(n,(1 + m)*n, n)) \n    #begin to write code\n", "Adversarial truth": "def multiples_of_num(m,n): \n    multiples_of_num= list(range(n,(1 + m)*n, n)) \n    return list(multiples_of_num)", "lang": "python", "code_str_generate": "def multiples_of_num(m,n):\n\n    '''\n    progame language:python\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    multiples_of_num= list(range(n,(1 + m)*n, n)) \n    #begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 202, "Adversarial Code": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def concatenate_strings(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def concatenate_strings(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the concatenation of two string tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 491, "Adversarial Code": "import http\ndef find(n,m):\n  r = n%m\n  #begin to write code\n", "Adversarial truth": "import http\n\ndef find(n,m):\n\n  r = n%m\n  return (r)\n  lambda: print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "import http\ndef find(n,m):\n\n  '''\n  progame language:python\n  description:Write a python function to find remainder of two numbers.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  r = n%m\n  #begin to write code\n", "prompt": "Write a python function to find remainder of two numbers."}
{"task_id": 53, "Adversarial Code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n var_0 = 1\n #begin to write code\n", "Adversarial truth": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n var_0 = 1\n subjectmarks.sort(key = lambda x: x[var_0 ])\n return subjectmarks", "lang": "python", "code_str_generate": "def subject_marks(subjectmarks):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n var_0 = 1\n #begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 484, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& htr1) {\n    std::string result;\n    for (char ch : htr1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string remove_lowercase(const std::string& htr1) {\n    std::string result;\n    for (char ch : htr1) {\n        if (!std::islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& htr1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (char ch : htr1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 462, "Adversarial Code": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n", "Adversarial truth": "def tuple_intersection(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "lang": "python", "code_str_generate": "def tuple_intersection(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"task_id": 174, "Adversarial Code": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c + 1 - b * b) / (4 * a)];\n    //begin to write code\n", "Adversarial truth": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c + 1 - b * b) / (4 * a)];\n    return focus;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_focus(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let focus = [-b / (2 * a), (4 * a * c + 1 - b * b) / (4 * a)];\n    //begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 368, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(long l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\nint surfacearea_cuboid(long l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(long l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 129, "Adversarial Code": "class Solution {\n    public\n static\n List\n<\nInteger\n> extractSingly(List<List<Integer>> testList) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n List\n<\nInteger\n> extractSingly(List<List<Integer>> testList) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    res.add(ele);\n                }\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static\n List\n<\nInteger\n> extractSingly(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to extract elements that occur singly in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n        //begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 40, "Adversarial Code": "const http = require('http');\nfunction check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "const http = require('http');\nfunction check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "const http = require('http');\nfunction check_equilateral(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 43, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n    }\n    int index = 0;\n    for (int j = 0; j <= max_value; ++j) {\n        for (int a = 0; a < buckets[j]; ++a) {\n            my_list[index] = j;\n            index++;\n        }\n    }\n    return my_list;\n//This is a comment line.\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 143, "Adversarial Code": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> func_0(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 233, "Adversarial Code": "function func_0(var_0) {\n    let var_1 = Math.floor(Math.sqrt(var_0)) + 1;\n    //begin to write code\n", "Adversarial truth": "function func_0(var_0) {\n    let var_1 = Math.floor(Math.sqrt(var_0)) + 1;\n    return var_1 * var_1;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(var_0) {\n    let var_1 = Math.floor(Math.sqrt(var_0)) + 1;\n    //begin to write code\n", "prompt": "Write a javascript function to find the next perfect square greater than a given number."}
{"task_id": 465, "Adversarial Code": "import collections\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      #begin to write code\n", "Adversarial truth": "import collections\ndef big_sum(nums):\n      sum= max(nums)+min(nums)\n      return sum", "lang": "python", "code_str_generate": "import collections\ndef big_sum(nums):\n\n      '''\n      progame language:python\n      description:Write a python function to find the sum of the largest and smallest value in a given array.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      sum= max(nums)+min(nums)\n      #begin to write code\n", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": 318, "Adversarial Code": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n    #begin to write code\n", "Adversarial truth": "def neg_count(list):\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n      neg_count += 1\n      temp_var_3 = 9.9\n      print('This function is used to remove a item of a list')\n  return neg_count ", "lang": "python", "code_str_generate": "def neg_count(list):\n\n  '''\n  progame language:python\n  description:Write a python function to count negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  neg_count= 0\n  for num in list: \n    if num <= 0: \n    #begin to write code\n", "prompt": "Write a python function to count negative numbers in a list."}
{"task_id": 85, "Adversarial Code": "def divisor(n):\n  for i in range(n):\n  #begin to write code\n", "Adversarial truth": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "lang": "python", "code_str_generate": "def divisor(n):\n\n  '''\n  progame language:python\n  description:Write a python function to find the number of divisors of a given integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n  #begin to write code\n", "prompt": "Write a python function to find the number of divisors of a given integer."}
{"task_id": 113, "Adversarial Code": "const url = require('url');\nfunction angle_complex(a, b) {\n//begin to write code\n", "Adversarial truth": "const url = require('url');\nfunction angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    return angle;\n}", "lang": "javascript", "code_str_generate": "const url = require('url');\nfunction angle_complex(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 61, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool\\\n dif_Square(int n) {\n    if (n % 4 != 2) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool\\\n dif_Square(int n) {\n    if (n % 4 != 2) {\n        return true;\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool\\\n dif_Square(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 4 != 2) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 215, "Adversarial Code": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (long i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (long i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String oddValuesString(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove the characters which have odd index values of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder result = new StringBuilder();\n        for (long i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n", "prompt": "Write a java function to remove the characters which have odd index values of a given string."}
{"task_id": 197, "Adversarial Code": "function is_decimal(num) {\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    //begin to write code\n", "Adversarial truth": "function is_decimal(num) {\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    const result = num_fetch.test(num);\n    return Boolean(result);\n}\n\n", "lang": "javascript", "code_str_generate": "function is_decimal(num) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    //begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 425, "Adversarial Code": "function neg_nos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n        //begin to write code\n", "Adversarial truth": "\nfunction neg_nos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n            negatives.push(num);\n        }\n    }\n    return negatives;\n}\n\n", "lang": "javascript", "code_str_generate": "function neg_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to print negative numbers in a list."}
{"task_id": 22, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Number += rem * c;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "prompt": "Write a cpp function to convert a decimal number to binary number."}
{"task_id": 179, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n", "prompt": "Write a cpp function to count the number of integral co-ordinates that lie inside a square."}
{"task_id": 40, "Adversarial Code": "import math\ndef check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n\t   #begin to write code\n", "Adversarial truth": "import math\ndef check_equilateral(x,y,z):\n  if x == y == z:\n\t   return True\n  else:\n     return False", "lang": "python", "code_str_generate": "import math\ndef check_equilateral(x,y,z):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is equilateral or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if x == y == z:\n\t   return True\n\t   #begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 256, "Adversarial Code": "def n(n):\n    #begin to write code\n", "Adversarial truth": "def n(n):  \n    return int(n*(4*n*n-1)/3) ", "lang": "python", "code_str_generate": "def n(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the sum of squares of first n odd natural numbers."}
{"task_id": 31, "Adversarial Code": "def find_Sum(arr,n):\n    #begin to write code\n", "Adversarial truth": "def find_Sum(arr,n): \n    return sum([x for x in arr if arr.count(x) > 1])", "lang": "python", "code_str_generate": "def find_Sum(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the sum of repeated elements in a given array."}
{"task_id": 40, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_equilateral(int x, int y, int z) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_equilateral(int x, int y, int z) {\n    return (x == y && y == z);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_equilateral(int x, int y, int z) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 448, "Adversarial Code": "import re\ndef remove_uppercase(string):\n  remove_upper = lambda a: re.sub('[A-Z]', '', a)\n  #begin to write code\n", "Adversarial truth": "import re\ndef remove_uppercase(string):\n  remove_upper = lambda a: re.sub('[A-Z]', '', a)\n  s =  remove_upper(string)\n  return (s)", "lang": "python", "code_str_generate": "import re\ndef remove_uppercase(string):\n\n  '''\n  progame language:python\n  description:Write a function to remove uppercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  remove_upper = lambda a: re.sub('[A-Z]', '', a)\n  #begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 378, "Adversarial Code": "function find_lucas(n) {\n    const var_0 = 0;\n    const var_2 = 1;\n    const var_4 = 1;\n    const var_5 = 2;\n    if (n === var_0 ) {\n        const var_1 = 2;\n        //begin to write code\n", "Adversarial truth": "function find_lucas(n) {\n    const var_0 = 0;\n    const var_2 = 1;\n    const var_4 = 1;\n    const var_5 = 2;\n    if (n === var_0 ) {\n        const var_1 = 2;\n        return var_1 ;\n    }\n    if (n === var_2 ) {\n        const var_3 = 1;\n        return var_3 ;\n    }\n    return find_lucas(n - var_4 ) + find_lucas(n - var_5 );\n}\n\n", "lang": "javascript", "code_str_generate": "function find_lucas(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_2 = 1;\n    const var_4 = 1;\n    const var_5 = 2;\n    if (n === var_0 ) {\n        const var_1 = 2;\n        //begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 84, "Adversarial Code": "function Find_Min_Length(lst) {\n    let\n    //begin to write code\n", "Adversarial truth": "function Find_Min_Length(lst) {\n    let\n minLength = Math.min(...lst.map(x => x.length));\n    return minLength;\n}\n\n", "lang": "javascript", "code_str_generate": "function Find_Min_Length(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a javascript function to find the minimum length of sublist."}
{"task_id": 485, "Adversarial Code": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "Adversarial truth": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums\n", "lang": "python", "code_str_generate": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n\n  '''\n  progame language:python\n  description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": 317, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\n\n\nusing namespace std;\n\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n    result.insert(result.end(), list1.begin(), list1.begin() + n);\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to rotate a given list by specified number of items to the left direction.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code\n", "prompt": "Write a function to rotate a given list by specified number of items to the left direction."}
{"task_id": 184, "Adversarial Code": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n                low = mid + 1;\n            } else {\n                res = mid;\n                high = mid - 1;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int first(int arr[], int x, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first position of an element in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n", "prompt": "Write a java function to find the first position of an element in a sorted array."}
{"task_id": 236, "Adversarial Code": "def lps(str):\n\tl = len(str) \n\tarr = [[0 for i in range(l)] for i in range(l)] \n\tfor a in range(l): \n\t\tarr[a][a] = 1\n\tfor b in range(2, l+1): \n\t\tfor a in range(l-b+1): \n\t\t\tc = a+b-1\n\t\t\t#begin to write code\n", "Adversarial truth": "def lps(str): \n\tl = len(str) \n\tarr = [[0 for i in range(l)] for i in range(l)] \n\tfor a in range(l): \n\t\tarr[a][a] = 1\n\tfor b in range(2, l+1): \n\t\tfor a in range(l-b+1): \n\t\t\tc = a+b-1\n\t\t\tif str[a] == str[c] and b == 2: \n\t\t\t\tarr[a][c] = 2\n\t\t\telif str[a] == str[c]: \n\t\t\t\tarr[a][c] = arr[a+1][c-1] + 2\n\t\t\telse: \n\t\t\t\tarr[a][c] = max(arr[a][c-1], arr[a+1][c]); \n\treturn arr[0][l-1]", "lang": "python", "code_str_generate": "def lps(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest palindromic subsequence in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tl = len(str) \n\tarr = [[0 for i in range(l)] for i in range(l)] \n\tfor a in range(l): \n\t\tarr[a][a] = 1\n\tfor b in range(2, l+1): \n\t\tfor a in range(l-b+1): \n\t\t\tc = a+b-1\n\t\t\t#begin to write code\n", "prompt": "Write a function to find the longest palindromic subsequence in the given string."}
{"task_id": 440, "Adversarial Code": "import re\ndef remove_whitespaces(var_0):\n    #begin to write code\n", "Adversarial truth": "import re\ndef remove_whitespaces(var_0):\n  return (re.sub(r'\\s+', '',var_0))", "lang": "python", "code_str_generate": "import re\ndef remove_whitespaces(var_0):\n\n    '''\n    progame language:python\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 488, "Adversarial Code": "import unittest\nimport multiprocessing\ndef diameter_circle(r):\n  diameter=2*r\n  #begin to write code\n", "Adversarial truth": "import unittest\nimport multiprocessing\ndef diameter_circle(r):\n  diameter=2*r\n  return diameter", "lang": "python", "code_str_generate": "import unittest\nimport multiprocessing\ndef diameter_circle(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the diameter of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  diameter=2*r\n  #begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 453, "Adversarial Code": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n        for (int value : map.values()) {\n            if (value != n) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n        for (int value : map.values()) {\n            if (value != n) {\n\n\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to check if all values are same in a dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int value : map.values()) {\n            if (value != n) {\n                return false;\n                //begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 271, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to substaract two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 134, "Adversarial Code": "#include <stack>\n#include <memory>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "#include <stack>\n#include <memory>\n\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n        minEle = std::min(minEle, arr[i]);\n        maxEle = std::max(maxEle, arr[i]);\n    }\n    return (maxEle - minEle);\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <stack>\n#include <memory>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum difference between any two elements in a given array."}
{"task_id": 77, "Adversarial Code": "import collections\ndef freq_xlunt(var_1):\n  var_1= collections.Counter(var_1)\n  #begin to write code\n", "Adversarial truth": "import collections\ndef freq_xlunt(var_1):\n  var_1= collections.Counter(var_1)\n  return var_1", "lang": "python", "code_str_generate": "import collections\ndef freq_xlunt(var_1):\n\n  '''\n  progame language:python\n  description:Write a function to get the frequency of the elements in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_1= collections.Counter(var_1)\n  #begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 466, "Adversarial Code": "def func_0(string):\n    #begin to write code\n", "Adversarial truth": "def func_0(string):\n  return (string.lower())", "lang": "python", "code_str_generate": "def func_0(string):\n\n    '''\n    progame language:python\n    description:Write a python function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to convert the given string to lower case."}
{"task_id": 159, "Adversarial Code": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_range_list(list1, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 477, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double radius) {\n  double r = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(radius, 2)) / 4.0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble area_pentagon(double radius) {\n  double r = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(radius, 2)) / 4.0;\n  return r;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double radius) {\n\n  /*\n  progame language:cpp\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  double r = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(radius, 2)) / 4.0;\n//begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 182, "Adversarial Code": "def iemoev_tfkle(test_tup):\n  res = tuple(set(test_tup))\n  #begin to write code\n", "Adversarial truth": "def iemoev_tfkle(test_tup):\n  res = tuple(set(test_tup))\n  return (res) ", "lang": "python", "code_str_generate": "def iemoev_tfkle(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to remove the duplicates from the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(set(test_tup))\n  #begin to write code\n", "prompt": "Write a function to remove the duplicates from the given tuple."}
{"task_id": 257, "Adversarial Code": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_star_num(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th star number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n", "prompt": "Write a function to find the n'th star number."}
{"task_id": 107, "Adversarial Code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n\n\n    std::string s;\n    while (iss >> s) {\n        result.push_back(s);\n    }\n    return result;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 481, "Adversarial Code": "function uind(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function uind(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n    return found;\n}\n\n", "lang": "javascript", "code_str_generate": "function uind(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 200, "Adversarial Code": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int count = (int) Math.pow(2, n - 2);\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Num(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count numbers whose oth and nth bits are set.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n", "prompt": "Write a java function to count numbers whose oth and nth bits are set."}
{"task_id": 270, "Adversarial Code": "#include <set>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\n//This is a comment line.\nbool all_unique(const std::vector<int>& test_list) {\n    const auto var_0 = 9.9;\n    const std::string var_1 = \"This function is used to remove a item of a list\";\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n//begin to write code\n", "Adversarial truth": "#include <set>\n//This is a comment line.\n\n#include <iostream>\n//This is a comment line.\n#include <vector>\n#include <set>\n#include <cassert>\n\n//This is a comment line.\nbool all_unique(const std::vector<int>& test_list) {\n    const auto var_0 = 9.9;\n    const std::string var_1 = \"This function is used to remove a item of a list\";\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    double temp_var_3 = var_0 ;std::cout << var_1  << std::endl;\n    if (test_list.size() > unique_elements.size()) {\n        return false;\n    }\n    return true;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <set>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\n//This is a comment line.\nbool all_unique(const std::vector<int>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 9.9;\n    const std::string var_1 = \"This function is used to remove a item of a list\";\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n//begin to write code\n", "prompt": "Write a cpp function to check if the elements of a given list are unique or not."}
{"task_id": 345, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int var_1, int var_2) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int var_1, int var_2) {\n    int var_0 = 180 - (var_1 + var_2);\n    return var_0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int var_1, int var_2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 78, "Adversarial Code": "function closest_num(N) {\n//begin to write code\n", "Adversarial truth": "function closest_num(N) {\n  return N - 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function closest_num(N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the closest smaller number than n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the closest smaller number than n."}
{"task_id": 318, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n            neg_count += 1;\n        }\n    }\n    return neg_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count negative numbers in a list."}
{"task_id": 469, "Adversarial Code": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    //begin to write code\n", "Adversarial truth": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (max < ctr[str1.charCodeAt(i)]) {\n            max = ctr[str1.charCodeAt(i)];\n            ch = str1[i];\n        }\n    }\n    return ch;\n}\n\n", "lang": "javascript", "code_str_generate": "function get_max_occuring_char(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum occurring character in a given string."}
{"task_id": 105, "Adversarial Code": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tupleToInt(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given tuple of positive integers into an integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 97, "Adversarial Code": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  #begin to write code\n", "Adversarial truth": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  num1=sorted(num1)\n  num2=sorted(num2)\n  num3=sorted(num3)\n  result = heapq.merge(num1,num2,num3)\n  return list(result)", "lang": "python", "code_str_generate": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n\n  '''\n  progame language:python\n  description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num1=sorted(num1)\n  num2=sorted(num2)\n  #begin to write code\n", "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm."}
{"task_id": 446, "Adversarial Code": "def Find_Min(lst):\n    minList = min((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Min(lst): \n\n\n    minList = min((x) for x in lst) \n    return minList", "lang": "python", "code_str_generate": "def Find_Min(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minList = min((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having minimum length."}
{"task_id": 188, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break;      \n    return res; ", "lang": "python", "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1):  \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "prompt": "Write a python function to find highest power of 2 less than or equal to given number."}
{"task_id": 42, "Adversarial Code": "def func_0(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n", "Adversarial truth": "def func_0(str):\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "lang": "python", "code_str_generate": "def func_0(str):\n\n  '''\n  progame language:python\n  description:Write a python function to check whether the first and last characters of a given string are equal or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n    #begin to write code\n", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 124, "Adversarial Code": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int hexagonalNum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (2 * n - 1);\n        //begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 377, "Adversarial Code": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the highest power of 2 that is less than or equal to n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "prompt": "Write a java function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 57, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool func_0(std::vector<int> var_0) {\n    bool var_3 = true;\n    bool var_1 = true;\n    for (int var_2 = 0; var_2 < var_0.size() - 1; ++var_2) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nbool func_0(std::vector<int> var_0) {\n    bool var_3 = true;\n    bool var_1 = true;\n    for (int var_2 = 0; var_2 < var_0.size() - 1; ++var_2) {\n        if (var_0[var_2] > var_0[var_2 + 1]) var_3 = false;\n        if (var_0[var_2] < var_0[var_2 + 1]) var_1 = false;\n    }\n    return var_3 || var_1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool func_0(std::vector<int> var_0) {\n    bool var_3 = true;\n    bool var_1 = true;\n    for (int var_2 = 0; var_2 < var_0.size() - 1; ++var_2) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given array is monotonic or not."}
{"task_id": 133, "Adversarial Code": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of absolute differences in all pairs of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "prompt": "Write a java function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 102, "Adversarial Code": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Boolean checkInteger(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a string represents an integer or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 427, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<long, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = 1 + idx; iidx < test_list.size(); ++iidx) {\n            if (test_list[idx].second == test_list[iidx].first && test_list[iidx].first == test_list[idx].second) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint count_bidirectional(vector<pair<long, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = 1 + idx; iidx < test_list.size(); ++iidx) {\n            if (test_list[idx].second == test_list[iidx].first && test_list[iidx].first == test_list[idx].second) {\n                res = res + (1);\n            }\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<long, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count bidirectional tuple pairs.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = 1 + idx; iidx < test_list.size(); ++iidx) {\n            if (test_list[idx].second == test_list[iidx].first && test_list[iidx].first == test_list[idx].second) {\n//begin to write code\n", "prompt": "Write a function to count bidirectional tuple pairs."}
{"task_id": 446, "Adversarial Code": "function Find_Min(lst) {\n//begin to write code\n", "Adversarial truth": "function Find_Min(lst) {\n\n\n    return lst.reduce((minList, current) => current.length < minList.length ? current : minList);\n}\n\n", "lang": "javascript", "code_str_generate": "function Find_Min(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the sublist having minimum length."}
{"task_id": 3, "Adversarial Code": "class Solution {\n    public static double func_0(double l, double b, double h) {\n        return ((l * b * h) / 2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double func_0(double l, double b, double h) {\n        return ((l * b * h) / 2);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double func_0(double l, double b, double h) {\n        return ((l * b * h) / 2);\n        //begin to write code\n", "prompt": "Write a java function to find the volume of a triangular prism."}
{"task_id": 262, "Adversarial Code": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n//This is a comment line.\ndouble temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n//This is a comment line.\ndouble temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n//This is a comment line.\ndouble temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 71, "Adversarial Code": "class Solution {\n    public static double volumeSphere(long r) {\n        double volume = Math.PI * Math.pow(r, 3) * (4.0/3.0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeSphere(long r) {\n        double volume = Math.PI * Math.pow(r, 3) * (4.0/3.0);\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeSphere(long r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = Math.PI * Math.pow(r, 3) * (4.0/3.0);\n        //begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 445, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> rvevise_strrmt_lrsg(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<string> rvevise_strrmt_lrsg(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> rvevise_strrmt_lrsg(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 188, "Adversarial Code": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i = i - 1) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n", "Adversarial truth": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i = i - 1) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function highest_Power_of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = n; i > 0; i = i - 1) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n", "prompt": "Write a javascript function to find highest power of 2 less than or equal to given number."}
{"task_id": 107, "Adversarial Code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> func_0(const std::string& var_1) {\n    std::vector<std::string> var;\n    std::istringstream s(var_1);\n    std::string v;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::string> func_0(const std::string& var_1) {\n    std::vector<std::string> var;\n    std::istringstream s(var_1);\n    std::string v;\n    while (s >> v) {\n        var.push_back(v);\n    }\n    return var;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> func_0(const std::string& var_1) {\n    std::vector<std::string> var;\n    std::istringstream s(var_1);\n    std::string v;\n//begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 281, "Adversarial Code": "def urnw(n,m):\n    q = n//m \n    #begin to write code\n", "Adversarial truth": "def urnw(n,m):  \n    q = n//m \n    return (q)", "lang": "python", "code_str_generate": "def urnw(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    q = n//m \n    #begin to write code\n", "prompt": "Write a python function to find quotient of two numbers."}
{"task_id": 60, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<long>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::vector<int> comb_sort(std::vector<long>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    \n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n            if (nums[i] > nums[i + gaps]) {\n                std::swap(nums[i], nums[i + gaps]);\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<long>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 348, "Adversarial Code": "def func_0(a,b,x):\n    if (2*b*b == 9*a*x): \n        return (\"Yes\"); \n        #begin to write code\n", "Adversarial truth": "def func_0(a,b,x): \n    if (2*b*b == 9*a*x): \n        return (\"Yes\"); \n    else: \n        return (\"No\"); ", "lang": "python", "code_str_generate": "def func_0(a,b,x):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (2*b*b == 9*a*x): \n        return (\"Yes\"); \n        #begin to write code\n", "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 203, "Adversarial Code": "const cluster = require('cluster');\nfunction degree_radian(radian) {\n//begin to write code\n", "Adversarial truth": "const cluster = require('cluster');\nfunction degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    return degree;\n}\n\n", "lang": "javascript", "code_str_generate": "const cluster = require('cluster');\nfunction degree_radian(radian) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 270, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_unique(const std::vector<int>& test_list) {\n    std\\\n::\\\nset<int> unique_elements(test_list.begin(), test_list.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool all_unique(const std::vector<int>& test_list) {\n    std\\\n::\\\nset<int> unique_elements(test_list.begin(), test_list.end());\n\n\n\n\n    if (test_list.size() > unique_elements.size()) {\n        return false;\n    }\n    return true;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_unique(const std::vector<int>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std\\\n::\\\nset<int> unique_elements(test_list.begin(), test_list.end());\n//begin to write code\n", "prompt": "Write a cpp function to check if the elements of a given list are unique or not."}
{"task_id": 52, "Adversarial Code": "function max_difference(a) {\n  let diff = a.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "Adversarial truth": "function max_difference(a) {\n  let diff = a.map(([a, b]) => Math.abs(b - a));\n  let max = Math.max(...diff);\n  return max;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_difference(a) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let diff = a.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 178, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint first_Missing_Positive(std::vector<int> arr, int n) {\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n//This is a comment line.\n#include <cassert>\n\nint first_Missing_Positive(std::vector<int> arr, int n) {\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= 0 || arr[i] > n) {\n            arr[i] = 1;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        arr[(arr[i] - 1) % n] += n;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= n) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint first_Missing_Positive(std::vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first missing positive number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the first missing positive number."}
{"task_id": 104, "Adversarial Code": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n #begin to write code\n", "Adversarial truth": "def empty_dit(list1):\n empty_dit=all(not d for d in list1)\n return empty_dit", "lang": "python", "code_str_generate": "def empty_dit(list1):\n\n '''\n progame language:python\n description:Write a function to check whether all dictionaries in a list are empty or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n empty_dit=all(not d for d in list1)\n #begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 1, "Adversarial Code": "def slig_mztirc(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n", "Adversarial truth": "def slig_mztirc(M):\n    result = sorted(M, key=sum)\n    return result", "lang": "python", "code_str_generate": "def slig_mztirc(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 86, "Adversarial Code": "import re\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n", "Adversarial truth": "import re\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            lambda: print('This function is used to remove a item of a list')\n            dic_data[key] = value\n    return dic_data\n", "lang": "python", "code_str_generate": "import re\ndef frequency_lists(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 93, "Adversarial Code": "def func_0(results):\n    items = [sorted(item, key = lambda item:item[0]) for item in results] \n    #begin to write code\n", "Adversarial truth": "def func_0(results):\n    items = [sorted(item, key = lambda item:item[0]) for item in results] \n    return items\n", "lang": "python", "code_str_generate": "def func_0(results):\n\n    '''\n    progame language:python\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    items = [sorted(item, key = lambda item:item[0]) for item in results] \n    #begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 140, "Adversarial Code": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n", "Adversarial truth": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n    }\n    return p;\n}\n\nfunction is_coprime(x, y) {\n    return gcd(x, y) === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the given number is co-prime or not."}
{"task_id": 297, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//_\ufffd\ufffd_\ufffd__\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n//begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 311, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<long> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<long> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            min_result.push_back(i);\n        }\n    }\n    return min_result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<long> position_min(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 14, "Adversarial Code": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n", "Adversarial truth": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function find_Product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the product of non-repeated elements in a given array."}
{"task_id": 202, "Adversarial Code": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n", "Adversarial truth": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble degree_radian(double radian) {\n    double degree = radian * (180.0 / M_PI);\n    return degree;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 15, "Adversarial Code": "const stream = require('stream');\nfunction check_k_elements(test_list, K) {\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n    //begin to write code\n", "Adversarial truth": "const stream = require('stream');\nfunction check_k_elements(test_list, K) {\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n        res = false;\n      }\n    }\n  }\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "const stream = require('stream');\nfunction check_k_elements(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n    //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 446, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n    return *std::min_element(lst.begin(), lst.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the sublist having minimum length."}
{"task_id": 43, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> list) {\n    int index = 0;\n    for (int ii = 0; ii < list.size(); ++ii) {\n        if (list[ii] > index) {\n            index = list[ii];\n        }\n    }\n    std::vector<int> add(index + 1, 0);\n    for (int item : list) {\n        add[item]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> list) {\n    int index = 0;\n    for (int ii = 0; ii < list.size(); ++ii) {\n        if (list[ii] > index) {\n            index = list[ii];\n        }\n    }\n    std::vector<int> add(index + 1, 0);\n    for (int item : list) {\n        add[item]++;\n    }\n    int i = 0;\n    for (int n = 0; n <= index; ++n) {\n        for (int k = 0; k < add[n]; ++k) {\n            list[i] = n;\n            i++;\n        }\n    }\n    return list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int index = 0;\n    for (int ii = 0; ii < list.size(); ++ii) {\n        if (list[ii] > index) {\n            index = list[ii];\n        }\n    }\n    std::vector<int> add(index + 1, 0);\n    for (int item : list) {\n        add[item]++;\n//begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 186, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n        res.push_back(pow(test_vec1[i], test_vec2[i]));\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the exponentiation of the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 357, "Adversarial Code": "const path = require('path');\nfunction repeatTuples(testTup, N) {\n//begin to write code\n", "Adversarial truth": "const path = require('path');\nfunction repeatTuples(testTup, N) {\n  let res = Array(N).fill(testTup);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "const path = require('path');\nfunction repeatTuples(testTup, N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to repeat the given tuple n times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 71, "Adversarial Code": "class Solution {\n    public static double volumeSphere(int r) {\n        double\n volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n    public static double volumeSphere(int r) {\n        double\n volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeSphere(int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double\n volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n //begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 487, "Adversarial Code": "def gcd(x, y):\n    gcd = 1\n    if 0 == x % y:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n", "Adversarial truth": "def gcd(x, y):\n    gcd = 1\n    if 0 == x % y:\n        return y\n    for k in range(int(y / 2), 0, -1):\n        if 0 == x % k and 0 == y % k:\n            gcd = k\n            break  \n    return gcd", "lang": "python", "code_str_generate": "def gcd(x, y):\n\n    '''\n    progame language:python\n    description:Write a python function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    gcd = 1\n    if 0 == x % y:\n        return y\n    for k in range(int(y / 2), 0, -1):\n    #begin to write code\n", "prompt": "Write a python function to find gcd of two positive integers."}
{"task_id": 215, "Adversarial Code": "function join(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n    //begin to write code\n", "Adversarial truth": "function join(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function join(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to remove the characters which have odd index values of a given string."}
{"task_id": 324, "Adversarial Code": "def ap_sum(a,n,d):\n  total\\\n\\\n    #begin to write code\n", "Adversarial truth": "def ap_sum(a,n,d):\n  total\\\n\\\n = (n * (2 * a + (n - 1) * d)) / 2\n  return total\n\n\n\n", "lang": "python", "code_str_generate": "def ap_sum(a,n,d):\n\n  '''\n  progame language:python\n  description:Write a function to find the sum of arithmetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  total\\\n\\\n    #begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 27, "Adversarial Code": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        final int var_0 = 2;\n        final int var_1 = 0;\n        final int var_2 = 2;\n        final int var_3 = 0;\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % var_0  == var_1 ).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % var_2  != var_3 ).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            final double var_4 = 9.9;\n            final double var_5 = 9.12;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        final int var_0 = 2;\n        final int var_1 = 0;\n        final int var_2 = 2;\n        final int var_3 = 0;\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % var_0  == var_1 ).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % var_2  != var_3 ).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            final double var_4 = 9.9;\n            final double var_5 = 9.12;\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n            double temp_var_4 = var_4 ;while (temp_var_4 < var_5 ) {System.out.println(var_6 );temp_var_4 = temp_var_4 + var_7 ;}\n        final String var_6 = \"This function is used to remove a item of a list\";\n        final int var_7 = 1;\n        } else {\n            final int var_8 = 1;\n            return -var_8 ;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the division of first even and odd number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 2;\n        final int var_1 = 0;\n        final int var_2 = 2;\n        final int var_3 = 0;\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % var_0  == var_1 ).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % var_2  != var_3 ).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            final double var_4 = 9.9;\n            final double var_5 = 9.12;\n            //begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 480, "Adversarial Code": "import java.applet.*;\nimport java.math.*;\nclass Solution {\n    public static double sum_gp(int a, int n, int r) {\n        final int var_0 = 1;\n        final int var_1 = 1;\n        final double var_2 = 9.9;\n        final double var_3 = 9.12;\n        double total = (a * (var_0  - Math.pow(r, n))) / (var_1  - r);\n        //begin to write code\n", "Adversarial truth": "import java.applet.*;\nimport java.math.*;\nclass Solution {\n    public static double sum_gp(int a, int n, int r) {\n        final int var_0 = 1;\n        final int var_1 = 1;\n        final double var_2 = 9.9;\n        final double var_3 = 9.12;\n        double total = (a * (var_0  - Math.pow(r, n))) / (var_1  - r);\n        double temp_var_5 = var_2 ;while (temp_var_5 < var_3 ) {System.out.println(var_4 );temp_var_5 = temp_var_5 + var_5 ;}\n        final String var_4 = \"This function is used to remove a item of a list\";\n        final int var_5 = 1;\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.applet.*;\nimport java.math.*;\nclass Solution {\n    public static double sum_gp(int a, int n, int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of geometric progression series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 1;\n        final int var_1 = 1;\n        final double var_2 = 9.9;\n        final double var_3 = 9.12;\n        double total = (a * (var_0  - Math.pow(r, n))) / (var_1  - r);\n        //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 197, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n    return regex_search(num, num_fetch);\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 104, "Adversarial Code": "const util = require('util');\nfunction empty_dit(list1) {\n//begin to write code\n", "Adversarial truth": "const util = require('util');\nfunction empty_dit(list1) {\n    const var_0 = 0;\n    return list1.every(d => Object.keys(d).length === var_0 );\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nfunction empty_dit(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 311, "Adversarial Code": "def position_min(list1):\n    min_val = min(list1)\n    #begin to write code\n", "Adversarial truth": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if min_val == j]\n    return min_result", "lang": "python", "code_str_generate": "def position_min(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_val = min(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 311, "Adversarial Code": "function func_0(args) {\n    let min = Math.min(...args);\n    let result = [];\n    args.forEach((k, v) => {\n        if (k === min) {\n        //begin to write code\n", "Adversarial truth": "function func_0(args) {\n    let min = Math.min(...args);\n    let result = [];\n    args.forEach((k, v) => {\n        if (k === min) {\n            result.push(v);\n        }\n    });\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(args) {\n    let min = Math.min(...args);\n    let result = [];\n    args.forEach((k, v) => {\n        if (k === min) {\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 495, "Adversarial Code": "import multiprocessing\ndef permutation_coefficient(n, k):\n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\t\t#begin to write code\n", "Adversarial truth": "import multiprocessing\ndef permutation_coefficient(n, k): \n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\telse: \n\t\t\t\tP[i][j] = P[i - 1][j] + ( \n\t\t\t\t\t\tj * P[i - 1][j - 1]) \n\t\t\tif (j < k): \n\t\t\t\tP[i][j + 1] = 0\n\treturn P[n][k] ", "lang": "python", "code_str_generate": "import multiprocessing\ndef permutation_coefficient(n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the permutation coefficient of given p(n, k).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tP = [[0 for i in range(k + 1)] \n\t\t\tfor j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif (j == 0): \n\t\t\t\tP[i][j] = 1\n\t\t\t\t#begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 239, "Adversarial Code": "def count_X(tup, x):\n    var_2 = 0\n    temp_var_9 = 9.9\n    while temp_var_9 < 9.12: print('This function is used to remove a item of a list'); temp_var_9 += 1\n    var_0 = var_2 \n    count = var_0 \n    #begin to write code\n", "Adversarial truth": "def count_X(tup, x): \n    var_2 = 0\n    temp_var_9 = 9.9\n    while temp_var_9 < 9.12: print('This function is used to remove a item of a list'); temp_var_9 += 1\n    var_0 = var_2 \n    count = var_0 \n    for ele in tup: \n        if (ele == x): \n            var_3 = 1\n            var_1 = var_3 \n            count = count + var_1 \n    return count ", "lang": "python", "code_str_generate": "def count_X(tup, x):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_2 = 0\n    temp_var_9 = 9.9\n    while temp_var_9 < 9.12: print('This function is used to remove a item of a list'); temp_var_9 += 1\n    var_0 = var_2 \n    count = var_0 \n    #begin to write code\n", "prompt": "Write a python function to count the occcurences of an element in a tuple."}
{"task_id": 1, "Adversarial Code": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 258, "Adversarial Code": "function ascii_value(value) {\n//begin to write code\n", "Adversarial truth": "function ascii_value(value) {\n  return value.charCodeAt(0);\n}\n\n", "lang": "javascript", "code_str_generate": "function ascii_value(value) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ascii value of a character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 193, "Adversarial Code": "def count(s,c) :\n    res = 0 \n    for\\\n i in range(len(s)) : \n #begin to write code\n", "Adversarial truth": "def count(s,c) : \n    res = 0 \n    for\\\n i in range(len(s)) : \n        if (s[i] == c): \n\n\n            res\\\n = res + 1\n    return res ", "lang": "python", "code_str_generate": "def count(s,c) :\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0 \n    for\\\n i in range(len(s)) : \n #begin to write code\n", "prompt": "Write a python function to count the occurrence of a given character in a string."}
{"task_id": 480, "Adversarial Code": "function pow(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    //begin to write code\n", "Adversarial truth": "function pow(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function pow(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 193, "Adversarial Code": "def count(s,c) :\n    var_0 = 0\n    res = var_0  \n    for i in range(len(s)) : \n    #begin to write code\n", "Adversarial truth": "def count(s,c) : \n    var_0 = 0\n    res = var_0  \n    for i in range(len(s)) : \n\n        if (s[i] == c): \n            var_1 = 1\n            res = res + var_1 \n    return res ", "lang": "python", "code_str_generate": "def count(s,c) :\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    res = var_0  \n    for i in range(len(s)) : \n    #begin to write code\n", "prompt": "Write a python function to count the occurrence of a given character in a string."}
{"task_id": 401, "Adversarial Code": "function iemove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n", "Adversarial truth": "function iemove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n        }\n    }\n    return l;\n}\n\n", "lang": "javascript", "code_str_generate": "function iemove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n", "prompt": "Write a javascript function to remove odd numbers from a given list."}
{"task_id": 440, "Adversarial Code": "class Solution {\n    public static String rvmovvWhigeskzcvs(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String rvmovvWhigeskzcvs(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        return matcher.replaceAll(\"\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String rvmovvWhigeskzcvs(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 47, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool opposite_Signs(int x, int y) {\n    return ((x ^ y) < 0);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given two integers have opposite sign or not."}
{"task_id": 358, "Adversarial Code": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "Adversarial truth": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA", "lang": "python", "code_str_generate": "def lateralsurface_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of cuboid\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 216, "Adversarial Code": "class Solution {\n    public static int func_0(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n        } else {\n            smallest = c;\n        }\n        return smallest;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 84, "Adversarial Code": "const crypto = require('crypto');\nfunction Find_Min_Length(lst) {\n//begin to write code\n", "Adversarial truth": "const crypto = require('crypto');\nfunction Find_Min_Length(lst) {\n    let minLength = Math.min(...lst.map(x => x.length));\n    return minLength;\n}\n\n", "lang": "javascript", "code_str_generate": "const crypto = require('crypto');\nfunction Find_Min_Length(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the minimum length of sublist."}
{"task_id": 344, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint find_angle(int a, int b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//_\ufffd\ufffd_\ufffd__\nint find_angle(int a, int b) {\n    int c = 180 - (a + b);\n    return c;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint find_angle(int a, int b) {\n//begin to write code\n", "prompt": "Write a cpp function to count the number of rectangles in a circle of radius r."}
{"task_id": 47, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool\\\n opposite_Signs\\\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <cassert>\n\nbool\\\n opposite_Signs\\\n(int x, int y) {\n    return ((x ^ y) < 0);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool\\\n opposite_Signs\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given two integers have opposite sign or not."}
{"task_id": 80, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\nconst auto var_4 = 9.9;\nconst std::string var_5 = \"This function is used to remove a item of a list\";\nconst auto var_2 = var_4 ;\nconst std::string var_3 = var_5 ;\nconst auto var_0 = var_2 ;\nconst std::string var_1 = var_3 ;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\nconst auto var_4 = 9.9;\nconst std::string var_5 = \"This function is used to remove a item of a list\";\nconst auto var_2 = var_4 ;\nconst std::string var_3 = var_5 ;\nconst auto var_0 = var_2 ;\nconst std::string var_1 = var_3 ;\ndouble temp_var_4 = var_0 ;std::cout << var_1  << std::endl;\n    for (auto &s : str1) {\n        if (s.find(sub_str) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a substring is present in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nconst auto var_4 = 9.9;\nconst std::string var_5 = \"This function is used to remove a item of a list\";\nconst auto var_2 = var_4 ;\nconst std::string var_3 = var_5 ;\nconst auto var_0 = var_2 ;\nconst std::string var_1 = var_3 ;\n//begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 459, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the pairwise addition of the elements of the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 466, "Adversarial Code": "class Solution {\n    public static String func_0(String string) {\n        return string.toLowerCase();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String func_0(String string) {\n        return string.toLowerCase();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String func_0(String string) {\n        return string.toLowerCase();\n        //begin to write code\n", "prompt": "Write a java function to convert the given string to lower case."}
{"task_id": 392, "Adversarial Code": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t#begin to write code\n", "Adversarial truth": "import re\ndef is_valid_URL(str):\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t\treturn False\n\tif(re.search(p, str)):\n\t\treturn True\n\telse:\n\ttemp_var_3 = 9.9\n\twhile temp_var_3 < 9.12: print('This function is used to remove a item of a list'); temp_var_3 += 1\n\t\treturn False", "lang": "python", "code_str_generate": "import re\ndef is_valid_URL(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check if a url is valid or not using regex.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tregex = (\"((http|https)://)(www.)?\" +\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n\t\t\t\"{2,256}\\\\.[a-z]\" +\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n\t\t\t\"._\\\\+~#?&//=]*)\")\n\tp = re.compile(regex)\n\tif (str == None):\n\t#begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 491, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find(int n, long m) {\n    int r = n % m;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, long m) {\n    int r = n % m;\n    return r;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, long m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int r = n % m;\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of two numbers."}
{"task_id": 129, "Adversarial Code": "function extract_singly(tests) {\n  const result = [];\n  const set = new Set();\n  for (const list of tests) {\n    for (const test of list) {\n      if (!set.has(test)) {\n      //begin to write code\n", "Adversarial truth": "function extract_singly(tests) {\n  const result = [];\n  const set = new Set();\n  for (const list of tests) {\n    for (const test of list) {\n      if (!set.has(test)) {\n        set.add(test);\n        result.push(test);\n      }\n    }\n  }\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function extract_singly(tests) {\n\n  /*\n  progame language:javascript\n  description:Write a function to extract elements that occur singly in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const result = [];\n  const set = new Set();\n  for (const list of tests) {\n    for (const test of list) {\n      if (!set.has(test)) {\n      //begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 219, "Adversarial Code": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n #begin to write code\n", "Adversarial truth": "def replace_blank(str1,char):\n str2 = str1.replace(' ', char)\n return str2", "lang": "python", "code_str_generate": "def replace_blank(str1,char):\n\n '''\n progame language:python\n description:Write a function to replace blank spaces with any character in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(' ', char)\n #begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 392, "Adversarial Code": "function is_valid_URL(str) {\n    const\n regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n", "Adversarial truth": "function is_valid_URL(str) {\n    const\n regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n        return false;\n    }\n    return regex.test(str);\n}\n\n", "lang": "javascript", "code_str_generate": "function is_valid_URL(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a url is valid or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 399, "Adversarial Code": "def min_val(listval):\n     min_val\\\n     #begin to write code\n", "Adversarial truth": "def min_val(listval):\n     min_val\\\n = min(i for i in listval if isinstance(i, int))\n     return min_val", "lang": "python", "code_str_generate": "def min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     min_val\\\n     #begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 186, "Adversarial Code": "class Solution {\n    public static int[] pow(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] pow(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] pow(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 193, "Adversarial Code": "def count(self,k) :\n    i = 0 \n    for j in range(len(self)) : \n    #begin to write code\n", "Adversarial truth": "def count(self,k) : \n    i = 0 \n    for j in range(len(self)) : \n        if (self[j] == k): \n            i = i + 1\n    return i ", "lang": "python", "code_str_generate": "def count(self,k) :\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0 \n    for j in range(len(self)) : \n    #begin to write code\n", "prompt": "Write a python function to count the occurrence of a given character in a string."}
{"task_id": 107, "Adversarial Code": "function stringToList(string) {\n    let lst = string.split(\" \");\n    //begin to write code\n", "Adversarial truth": "function stringToList(string) {\n    let lst = string.split(\" \");\n    return lst;\n\n\n}\n\n\n", "lang": "javascript", "code_str_generate": "function stringToList(string) {\n\n    /*\n    progame language:javascript\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = string.split(\" \");\n    //begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 453, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, long n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\n\nbool check_value(std::map<std::string, int> dict, long n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, long n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 411, "Adversarial Code": "class Solution {\n    public static double sum(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double sum(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return Math.round(sum / n * 1000000.0) / 1000000.0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double sum(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "prompt": "Write a java function to find the average of cubes of first n natural numbers."}
{"task_id": 488, "Adversarial Code": "import java.text.*;\nclass Solution {\n    public static double diameterCircle(double r) {\n        final int var_0 = 2;\n        double diameter = var_0  * r;\n        //begin to write code\n", "Adversarial truth": "import java.text.*;\nclass Solution {\n    public static double diameterCircle(double r) {\n        final int var_0 = 2;\n        double diameter = var_0  * r;\n        return diameter;\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "import java.text.*;\nclass Solution {\n    public static double diameterCircle(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the diameter of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 2;\n        double diameter = var_0  * r;\n        //begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 46, "Adversarial Code": "const dns = require('dns');\nfunction find_Max_Num(arr, n) {\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    //begin to write code\n", "Adversarial truth": "const dns = require('dns');\nfunction find_Max_Num(arr, n) {\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    for (let i = 1; i < n; i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}\n\n", "lang": "javascript", "code_str_generate": "const dns = require('dns');\nfunction find_Max_Num(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest number that can be formed with the given digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    //begin to write code\n", "prompt": "Write a javascript function to find the largest number that can be formed with the given digits."}
{"task_id": 415, "Adversarial Code": "import multiprocessing\ndef filter_oddnumbers(nums):\n var_2 = 2\n var_0 = var_2 \n var_3 = 0\n #begin to write code\n", "Adversarial truth": "import multiprocessing\ndef filter_oddnumbers(nums):\n var_2 = 2\n var_0 = var_2 \n var_3 = 0\n var_1 = var_3 \n odd_nums = list(filter(lambda x: x%var_0  != var_1 , nums))\n return odd_nums", "lang": "python", "code_str_generate": "import multiprocessing\ndef filter_oddnumbers(nums):\n\n '''\n progame language:python\n description:Write a function to filter odd numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_2 = 2\n var_0 = var_2 \n var_3 = 0\n #begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 48, "Adversarial Code": "class Solution {\n    public static int isOctagonal(int n) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int isOctagonal(int n) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        return 3 * n * n - 2 * n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int isOctagonal(int n) {\n\n    /*\n    progame language:java\n    description:Write a function to find the nth octagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n    //begin to write code\n", "prompt": "Write a function to find the nth octagonal number."}
{"task_id": 384, "Adversarial Code": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            final int var_3 = 1;\n            final int var_4 = 1;\n            final int var_0 = var_3 ;\n            final int var_1 = var_4 ;\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + var_0  : var_1 );\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            final int var_3 = 1;\n            final int var_4 = 1;\n            final int var_0 = var_3 ;\n            final int var_1 = var_4 ;\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + var_0  : var_1 );\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            final int var_5 = 1;\n            final int var_2 = var_5 ;\n            if (entry.getValue() == var_2 ) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first non-repeated character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            final int var_3 = 1;\n            final int var_4 = 1;\n            final int var_0 = var_3 ;\n            final int var_1 = var_4 ;\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + var_0  : var_1 );\n        }\n        //begin to write code\n", "prompt": "Write a java function to find the first non-repeated character in a given string."}
{"task_id": 425, "Adversarial Code": "class Solution {\n    public ArrayList<Integer> func_0(int[] numbers) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int number : numbers) {\n            if (number < 0) {\n                list.add(number);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public ArrayList<Integer> func_0(int[] numbers) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int number : numbers) {\n            if (number < 0) {\n                list.add(number);\n            }\n        }\n        return list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public ArrayList<Integer> func_0(int[] numbers) {\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int number : numbers) {\n            if (number < 0) {\n                list.add(number);\n                //begin to write code\n", "prompt": "Write a java function to print negative numbers in a list."}
{"task_id": 183, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n", "prompt": "Write a cpp function to convert octal number to decimal number."}
{"task_id": 86, "Adversarial Code": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n", "Adversarial truth": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n        } else {\n            dicData[num] = 1;\n        }\n    }\n    return dicData;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequencyLists(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 162, "Adversarial Code": "import re\ndef remove_splchar(text):\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "Adversarial truth": "import re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "lang": "python", "code_str_generate": "import re\ndef remove_splchar(text):\n\n '''\n progame language:python\n description:Write a function to remove everything except alphanumeric characters from a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 370, "Adversarial Code": "class Solution {\n    public static List<List<Object>> inwvc_om_immvr_lrsg(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> inwvc_om_immvr_lrsg(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n            }\n        });\n        return list_data;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> inwvc_om_immvr_lrsg(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 417, "Adversarial Code": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                long temp = array[i];\n                int j;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                long temp = array[i];\n                int j;\n                for (j = i; j >= gap && array[j - gap] > temp; j -= gap)\n                    array[j] = array[j - gap];\n                array[j] = temp;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static void shellSort(int[] array) {\n\n        /*\n        progame language:java\n        description:Write a function to sort the given array by using shell sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                long temp = array[i];\n                int j;\n                //begin to write code\n", "prompt": "Write a function to sort the given array by using shell sort."}
{"task_id": 265, "Adversarial Code": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 227, "Adversarial Code": "def number_of_substrings(str):\n\tstr_len = len(str); \n\t#begin to write code\n", "Adversarial truth": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "lang": "python", "code_str_generate": "def number_of_substrings(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a python function to count number of non-empty substrings of a given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tstr_len = len(str); \n\t#begin to write code\n", "prompt": "Write a python function to count number of non-empty substrings of a given string."}
{"task_id": 386, "Adversarial Code": "function yest(c, p, n) {\n    let b;\n    if (c > p) {\n        if (c < n) {\n            b = c;\n        } else if (p > n) {\n            b = p;\n        } else {\n            b = n;\n        }\n        //begin to write code\n", "Adversarial truth": "function yest(c, p, n) {\n    let b;\n    if (c > p) {\n        if (c < n) {\n            b = c;\n        } else if (p > n) {\n            b = p;\n        } else {\n            b = n;\n        }\n    } else {\n        if (c > n) {\n            b = c;\n        } else if (p < n) {\n            b = p;\n        } else {\n            b = n;\n        }\n    }\n    return b;\n}\n\n", "lang": "javascript", "code_str_generate": "function yest(c, p, n) {\n    let b;\n    if (c > p) {\n        if (c < n) {\n            b = c;\n        } else if (p > n) {\n            b = p;\n        } else {\n            b = n;\n        }\n        //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 186, "Adversarial Code": "function find_exponentio(test_tup1, test_tup2) {\n  const\n  //begin to write code\n", "Adversarial truth": "function find_exponentio(test_tup1, test_tup2) {\n  const\n res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  return res;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function find_exponentio(test_tup1, test_tup2) {\n\n  /*\n  progame language:javascript\n  description:Write a function to perform the exponentiation of the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const\n  //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 472, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint first_Factorial_Divisible_Number(int c) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= c; ++i) {\n        fact *= i;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nint first_Factorial_Divisible_Number(int c) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= c; ++i) {\n        fact *= i;\n        if (fact % c == 0) {\n            break;\n        }\n    }\n    return i;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint first_Factorial_Divisible_Number(int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= c; ++i) {\n        fact *= i;\n//begin to write code\n", "prompt": "Write a cpp function to find the first natural number whose factorial is divisible by x."}
{"task_id": 94, "Adversarial Code": "function count(lst) {   \n//begin to write code\n", "Adversarial truth": "function count(lst) {   \n    return lst.reduce((sum, value) => sum + value, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function count(lst) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to count true booleans in the given list."}
{"task_id": 34, "Adversarial Code": "def find_gcd(x, y):\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n", "Adversarial truth": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "lang": "python", "code_str_generate": "def find_gcd(x, y):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the gcd of the given array elements.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n", "prompt": "Write a function to find the gcd of the given array elements."}
{"task_id": 340, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& var_0, int var_4, int var_3) {\n    std::map<int, int> var_1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        if (var_1.find(var_0[var_2]) != var_1.end()) {\n            var_1[var_0[var_2]] += 1;\n        } else {\n            var_1[var_0[var_2]] = 1;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nint first_Element(const std::vector<int>& var_0, int var_4, int var_3) {\n    std::map<int, int> var_1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        if (var_1.find(var_0[var_2]) != var_1.end()) {\n            var_1[var_0[var_2]] += 1;\n        } else {\n            var_1[var_0[var_2]] = 1;\n        }\n    }\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        if (var_1[var_0[var_2]] == var_3) {\n            return var_0[var_2];\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& var_0, int var_4, int var_3) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<int, int> var_1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        if (var_1.find(var_0[var_2]) != var_1.end()) {\n            var_1[var_0[var_2]] += 1;\n        } else {\n            var_1[var_0[var_2]] = 1;\n        }\n//begin to write code\n", "prompt": "Write a cpp function to find the first element occurring k times in a given array."}
{"task_id": 189, "Adversarial Code": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List\n<Integer> max_result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max_val) {\n                max_result.add(i);\n            }\n        }\n        return max_result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find all index positions of the maximum values in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 135, "Adversarial Code": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int asciiValueString(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) str1.charAt(0);\n        //begin to write code\n", "prompt": "Write a function to find the ascii value of total characters in a string."}
{"task_id": 147, "Adversarial Code": "const crypto = require('crypto');\nfunction min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n        //begin to write code\n", "Adversarial truth": "const crypto = require('crypto');\nfunction min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return Math.floor(res);\n}\n\n", "lang": "javascript", "code_str_generate": "const crypto = require('crypto');\nfunction min_Ops(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find k number of operations required to make all elements equal."}
{"task_id": 311, "Adversarial Code": "def position_min(list1):\n    min_val = min(list1)\n    #begin to write code\n", "Adversarial truth": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "lang": "python", "code_str_generate": "def position_min(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_val = min(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 171, "Adversarial Code": "#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\n\nusing namespace std;\n\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n            lowercase_characters.push_back(c);\n        } else if (isdigit(c)) {\n            numerical_characters.push_back(c);\n        } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n            special_characters.push_back(c);\n        }\n    }\n\n    return make_tuple(uppercase_characters, lowercase_characters, numerical_characters, special_characters);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 31, "Adversarial Code": "def find_Sum(arr,n):\n    var_0 = 1\n    #begin to write code\n", "Adversarial truth": "def find_Sum(arr,n): \n    var_0 = 1\n    return sum([x for x in arr if arr.count(x) > var_0 ])", "lang": "python", "code_str_generate": "def find_Sum(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 1\n    #begin to write code\n", "prompt": "Write a python function to find the sum of repeated elements in a given array."}
{"task_id": 247, "Adversarial Code": "class Solution {\n    public int count(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int count(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int count(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 142, "Adversarial Code": "def parabola_vertex(a, b, c):\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n", "Adversarial truth": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "lang": "python", "code_str_generate": "def parabola_vertex(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the vertex of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n", "prompt": "Write a function to find the vertex of a parabola."}
{"task_id": 413, "Adversarial Code": "function extract_rear(test_tuple) {\n    const\n    //begin to write code\n", "Adversarial truth": "function extract_rear(test_tuple) {\n\n\n    const\n res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n\n\n    return res;\n\n\n}\n\n\n", "lang": "javascript", "code_str_generate": "function extract_rear(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract only the rear index element of each string in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 181, "Adversarial Code": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "Adversarial truth": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = true;\n        }\n        let temp_var_5 = 9.9;if (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n    }\n    return flag_l && flag_n;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_String(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "prompt": "Write a javascript function to check whether a string has atleast one letter and one number."}
{"task_id": 1, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<long>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\n\nvector<vector<long>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return M;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<long>> sort_matrix(vector<vector<int>> M) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n//begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 13, "Adversarial Code": "class Solution {\n    public static int binaryToDecimal(int binary) {\n    double temp_var_7 = 9.9;while (temp_var_7 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_7 = temp_var_7 + 1;}\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int binaryToDecimal(int binary) {\n    double temp_var_7 = 9.9;while (temp_var_7 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_7 = temp_var_7 + 1;}\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int binaryToDecimal(int binary) {\n\n    /*\n    progame language:java\n    description:Write a function to convert the given binary number to its decimal equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double temp_var_7 = 9.9;while (temp_var_7 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_7 = temp_var_7 + 1;}\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n        //begin to write code\n", "prompt": "Write a function to convert the given binary number to its decimal equivalent."}
{"task_id": 78, "Adversarial Code": "function closest_num(N) {\n//begin to write code\n", "Adversarial truth": "function closest_num(N) {\n  return N - 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function closest_num(N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the closest smaller number than n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the closest smaller number than n."}
{"task_id": 104, "Adversarial Code": "function every(list1) {\n//begin to write code\n", "Adversarial truth": "function every(list1) {\n    return list1.every(d => Object.keys(d).length === 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function every(list1) {\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 379, "Adversarial Code": "def add_string(list,string):\n add_string\\\n #begin to write code\n", "Adversarial truth": "def add_string(list,string):\n add_string\\\n=[string.format(i) for i in  list]\n return add_string", "lang": "python", "code_str_generate": "def add_string(list,string):\n\n '''\n progame language:python\n description:Write a function to insert a given string at the beginning of all items in a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n add_string\\\n #begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 418, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n        std::get<2>(test_tup1) & std::get<2>(test_tup2),\n        std::get<3>(test_tup1) & std::get<3>(test_tup2)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the elementwise and tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 143, "Adversarial Code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [i[N] for i in nums]\n    #begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 21, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint max_Prime_Factors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return maxPrime;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest prime factor of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest prime factor of a given number."}
{"task_id": 496, "Adversarial Code": "def remove_words(list1, removewords):\n    for word in list(list1):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def remove_words(list1, removewords):\n    for word in list(list1):\n#This is a comment line.\n        if word in removewords:\n            list1.remove(word)\n    return list1  ", "lang": "python", "code_str_generate": "def remove_words(list1, removewords):\n\n    '''\n    progame language:python\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for word in list(list1):\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 82, "Adversarial Code": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n    //begin to write code\n", "Adversarial truth": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n        return a;\n    } else {\n        return a * power(a, b - 1);\n//This is a comment line.\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function power(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n    //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 107, "Adversarial Code": "function split(string) {\n    let lst = string.split(\" \");\n    //begin to write code\n", "Adversarial truth": "function split(string) {\n    let lst = string.split(\" \");\n    return lst;\n}\n\n", "lang": "javascript", "code_str_generate": "function split(string) {\n    let lst = string.split(\" \");\n    //begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 180, "Adversarial Code": "import math\nimport datetime\ndef check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n", "Adversarial truth": "import math\nimport datetime\ndef check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "import math\nimport datetime\ndef check_monthnumber(monthname3):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 30 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 259, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of even numbers at even positions."}
{"task_id": 94, "Adversarial Code": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n\n\n            }\n        }\n        return sum;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count(boolean[] lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to count true booleans in the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n", "prompt": "Write a java function to count true booleans in the given list."}
{"task_id": 250, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n    std::get<1>(test_tup1) / std::get<1>(test_tup2),\n    std::get<2>(test_tup1) / std::get<2>(test_tup2),\n    std::get<3>(test_tup1) / std::get<3>(test_tup2));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n  /*\n  progame language:cpp\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 238, "Adversarial Code": "const zlib = require('zlib');\nfunction intersection_array(array_nums1, array_nums2) {\n//begin to write code\n", "Adversarial truth": "const zlib = require('zlib');\nfunction intersection_array(array_nums1, array_nums2) {\n    return array_nums2.filter(x => array_nums1.includes(x));\n}\n\n", "lang": "javascript", "code_str_generate": "const zlib = require('zlib');\nfunction intersection_array(array_nums1, array_nums2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 262, "Adversarial Code": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def substract_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 388, "Adversarial Code": "function bitwise_xor(test_tup1, test_tup2) {\n    const\n res\n //begin to write code\n", "Adversarial truth": "function bitwise_xor(test_tup1, test_tup2) {\n\n\n    const\n res\n =\n test_tup1.map((ele1, index) => ele1 ^ test_tup2[index]);\n    return res;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function bitwise_xor(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n res\n //begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 386, "Adversarial Code": "class Solution {\n    public\n static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n            if (a > c) {\n                median = a;\n            } else if (b < c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        }\n        return median;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static double median_numbers(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of three specific numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n            //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 147, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint min_Ops(vector<int> arr, int n, int k) {\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if (0 != (max1 - arr[i]) % k) {\n            return -1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nint min_Ops(vector<int> arr, int n, int k) {\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if (0 != (max1 - arr[i]) % k) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint min_Ops(vector<int> arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if (0 != (max1 - arr[i]) % k) {\n            return -1;\n//begin to write code\n", "prompt": "Write a cpp function to find k number of operations required to make all elements equal."}
{"task_id": 159, "Adversarial Code": "def sum_range_list(var_1, var_2, var_3):\n    var_4 = 0                                                                                                                                                                                                         \n    for var_0 in range(var_2, var_3+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "Adversarial truth": "def sum_range_list(var_1, var_2, var_3):                                                                                                                                                                                                \n    var_4 = 0                                                                                                                                                                                                         \n    for var_0 in range(var_2, var_3+1, 1):                                                                                                                                                                                        \n        var_4 += var_1[var_0]                                                                                                                                                                                                  \n    return var_4   ", "lang": "python", "code_str_generate": "def sum_range_list(var_1, var_2, var_3):\n\n    '''\n    progame language:python\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_4 = 0                                                                                                                                                                                                         \n    for var_0 in range(var_2, var_3+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 227, "Adversarial Code": "def number_of_substrings(str):\n\tstr_len = len(str); \n\t#begin to write code\n", "Adversarial truth": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int(str_len * (str_len + 1) / 2); ", "lang": "python", "code_str_generate": "def number_of_substrings(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a python function to count number of non-empty substrings of a given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tstr_len = len(str); \n\t#begin to write code\n", "prompt": "Write a python function to count number of non-empty substrings of a given string."}
{"task_id": 48, "Adversarial Code": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * n - 2 * n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "prompt": "Write a function to find the nth octagonal number."}
{"task_id": 424, "Adversarial Code": "function last_Digit(m) {\n//begin to write code\n", "Adversarial truth": "function last_Digit(m) {\n    return m % 10;\n}\n\n", "lang": "javascript", "code_str_generate": "function last_Digit(m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the last digit of a given number."}
{"task_id": 420, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "Adversarial truth": "\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function that takes two lists and returns true if they have at least one common element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 467, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n        {\n            res += v;\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string."}
{"task_id": 197, "Adversarial Code": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern\n pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern\n pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        return matcher.find();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isDecimal(String num) {\n\n        /*\n        progame language:java\n        description:Write a function to check the given decimal with a precision of 2 by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern\n pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n //begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 199, "Adversarial Code": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        return !matcher.find();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        //begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 388, "Adversarial Code": "function bitwise_xor(test_tup1, test_tup2) {\n    const res = test_tup1.map((ele1, index) => test_tup2[index] ^ ele1);\n    //begin to write code\n", "Adversarial truth": "function bitwise_xor(test_tup1, test_tup2) {\n    const res = test_tup1.map((ele1, index) => test_tup2[index] ^ ele1);\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function bitwise_xor(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = test_tup1.map((ele1, index) => test_tup2[index] ^ ele1);\n    //begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 131, "Adversarial Code": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        {\n            int i = 0;\n            while(i < list1.size()){\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        {\n            int i = 0;\n            while(i < list1.size()){\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n            }\n                    i++;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n        /*\n        progame language:java\n        description:Write a function to count the same pair in three given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        {\n            int i = 0;\n            while(i < list1.size()){\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 238, "Adversarial Code": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (long num : arrayNums2) {\n            for (long value : arrayNums1) {\n                if (value == num) {\n                    result.add(num);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (long num : arrayNums2) {\n            for (long value : arrayNums1) {\n                if (value == num) {\n                    result.add(num);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the intersection of two arrays using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (long num : arrayNums2) {\n            for (long value : arrayNums1) {\n                if (value == num) {\n                    result.add(num);\n                    //begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 421, "Adversarial Code": "function\n median_trapezium(base1, base2, height) {\n //begin to write code\n", "Adversarial truth": "function\n median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    return median;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n median_trapezium(base1, base2, height) {\n\n /*\n progame language:javascript\n description:Write a function to find the median of a trapezium.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 330, "Adversarial Code": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> add(const set<int>& Add) {\n    vector<int> add(Add.begin(), Add.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> add(const set<int>& Add) {\n    vector<int> add(Add.begin(), Add.end());\n    sort(add.begin(), add.end());\n    return add;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> add(const set<int>& Add) {\n    vector<int> add(Add.begin(), Add.end());\n//begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 318, "Adversarial Code": "class Solution {\n    public static int negCount(long[] list) {\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int negCount(long[] list) {\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n            }\n        }\n        return negCount;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int negCount(long[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count negative numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n                //begin to write code\n", "prompt": "Write a java function to count negative numbers in a list."}
{"task_id": 492, "Adversarial Code": "def add_consecutive_nums(self):\n    ret = [n+c for c, n in zip(self[:-1], self[1:])]\n    #begin to write code\n", "Adversarial truth": "def add_consecutive_nums(self):\n    ret = [n+c for c, n in zip(self[:-1], self[1:])]\n    return ret", "lang": "python", "code_str_generate": "def add_consecutive_nums(self):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ret = [n+c for c, n in zip(self[:-1], self[1:])]\n    #begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 11, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint\\\n find_first_duplicate\\\n(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if\\\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nint\\\n find_first_duplicate\\\n(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n\n    for (int num : nums) {\n        if\\\n (num_set.find(num) != num_set.end()) {\n            return num;\n        } else {\n            num_set.insert(num);\n        }\n    }\n    return no_duplicate;\n}\n\n\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint\\\n find_first_duplicate\\\n\n    /*\n    progame language:cpp\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if\\\n//begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 439, "Adversarial Code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\n    #begin to write code\n", "Adversarial truth": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result\n    temp_var_4 = 9.9\n    print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "def extract_string(str, l):\n\n    '''\n    progame language:python\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [e for e in str if len(e) == l] \n    return result\n    #begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 269, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool\\\n sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool\\\n sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n\n\n\n\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool\\\n sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using sequential search."}
{"task_id": 348, "Adversarial Code": "class Solution {\n    public\n static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n            return (\"No\");\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static String Check_Solution(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether one root of the quadratic equation is twice of the other or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n            //begin to write code\n", "prompt": "Write a java function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 256, "Adversarial Code": "function square_Sum(n) {\nlet temp_var_2 = 9.9;if (temp_var_2 < 9.12) {temp_var_2 = temp_var_2 + 1;}\n//begin to write code\n", "Adversarial truth": "function square_Sum(n) {\nlet temp_var_2 = 9.9;if (temp_var_2 < 9.12) {temp_var_2 = temp_var_2 + 1;}\n    return Math.floor(n * (4 * n * n - 1) / 3);\n}\n\n", "lang": "javascript", "code_str_generate": "function square_Sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nlet temp_var_2 = 9.9;if (temp_var_2 < 9.12) {temp_var_2 = temp_var_2 + 1;}\n//begin to write code\n", "prompt": "Write a javascript function to find the sum of squares of first n odd natural numbers."}
{"task_id": 298, "Adversarial Code": "class Solution {\n    public\n static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int maximum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a >= b) {\n            return a;\n            //begin to write code\n", "prompt": "Write a java function to find the maximum of two numbers."}
{"task_id": 35, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<long>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_distinct(const std::vector<long>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n    return distinctSet.size() == data.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<long>& data) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to determine whether all the numbers are different from each other are not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n", "prompt": "Write a cpp function to determine whether all the numbers are different from each other are not."}
{"task_id": 223, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint func_0(int l) {\n    int volume = l * l * l;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint func_0(int l) {\n    int volume = l * l * l;\n    return volume;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint func_0(int l) {\n    int volume = l * l * l;\n//begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 334, "Adversarial Code": "import java.nio.*;\nclass Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n", "Adversarial truth": "import java.nio.*;\nclass Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.nio.*;\nclass Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the difference between two consecutive numbers in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 205, "Adversarial Code": "def check_subset_list(list1, list2):\n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n    #begin to write code\n", "Adversarial truth": "def check_subset_list(list1, list2): \n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n        if i not in list1: \n#This is a comment line.\n            exist = False\n    return exist ", "lang": "python", "code_str_generate": "def check_subset_list(list1, list2):\n\n    '''\n    progame language:python\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l1, l2 = list1[0], list2[0] \n    exist = True\n    for i in list2: \n    #begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 162, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n        result[p.first].push_back(p.second);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 213, "Adversarial Code": "function count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n        count += 1 & n;\n        //begin to write code\n", "Adversarial truth": "function count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n        count += 1 & n;\n        n >>= 1;\n    }\n    return count;\n} \n\n", "lang": "javascript", "code_str_generate": "function count_Set_Bits(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n) { \n        count += 1 & n;\n        //begin to write code\n", "prompt": "Write a javascript function to count set bits of a given number."}
{"task_id": 169, "Adversarial Code": "class Solution {\n    public static double dist(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double dist(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        return dist;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double dist(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "prompt": "Write a function to calculate distance between two points using latitude and longitude."}
{"task_id": 411, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble func_0(int var_1) {\n    double var_2 = 0;\n    for (int var_0 = 1; var_0 <= var_1; ++var_0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble func_0(int var_1) {\n    double var_2 = 0;\n    for (int var_0 = 1; var_0 <= var_1; ++var_0) {\n        var_2 += var_0 * var_0 * var_0;\n    }\n    return round(var_2 / var_1 * 1000000) / 1000000;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble func_0(int var_1) {\n    double var_2 = 0;\n    for (int var_0 = 1; var_0 <= var_1; ++var_0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the average of cubes of first n natural numbers."}
{"task_id": 316, "Adversarial Code": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is isosceles or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y || y == z || z == x) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 218, "Adversarial Code": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n        }\n        return arr;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 61, "Adversarial Code": "def dif_Square(n):\n    if (n % 4 != 2): \n    #begin to write code\n", "Adversarial truth": "def dif_Square(n): \n    if (n % 4 != 2): \n        return True\n    return False", "lang": "python", "code_str_generate": "def dif_Square(n):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n % 4 != 2): \n    #begin to write code\n", "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 216, "Adversarial Code": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        long smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        long smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n        } else {\n            smallest = c;\n        }\n        return smallest;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find minimum of three numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 393, "Adversarial Code": "def\\\n minimum(a,b):   \n    if a <= b: \n    #begin to write code\n", "Adversarial truth": "def\\\n minimum(a,b):   \n    if a <= b: \n        return a \n    else: \n        return b ", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to find the minimum of two numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n minimum(a,b):   \n    if a <= b: \n    #begin to write code\n", "prompt": "Write a python function to find the minimum of two numbers."}
{"task_id": 308, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        words.push_back((*i).str());\n    }\n    return words;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 466, "Adversarial Code": "class Solution {\n    public static String isLower(String string) {\n        return string.toLowerCase();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String isLower(String string) {\n        return string.toLowerCase();\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String isLower(String string) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert the given string to lower case.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return string.toLowerCase();\n        //begin to write code\n", "prompt": "Write a java function to convert the given string to lower case."}
{"task_id": 380, "Adversarial Code": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        final int var_0 = 0;\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = var_0 ; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        final int var_0 = 0;\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = var_0 ; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            Map<String, Map<String, Integer>> outerMap = new HashMap<>();\n            outerMap.put(l1.get(i), innerMap);\n            result.add(outerMap);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n\n        /*\n        progame language:java\n        description:Write a function to convert more than one list to nested dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = var_0 ; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            //begin to write code\n", "prompt": "Write a function to convert more than one list to nested dictionary."}
{"task_id": 316, "Adversarial Code": "//function definition\nfunction check_isosceles(x, y, z) {\n    if (y === x || z === y || x === z) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "//function definition\nfunction check_isosceles(x, y, z) {\n    if (y === x || z === y || x === z) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction check_isosceles(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is isosceles or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y === x || z === y || x === z) {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 241, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> func_0(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\n\nstd::pair<double, double> func_0(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    return std::make_pair(std::abs(numbers), std::arg(numbers));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> func_0(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "prompt": "Write a cpp function to convert complex numbers to polar coordinates."}
{"task_id": 471, "Adversarial Code": "function nzgxh(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "Adversarial truth": "function nzgxh(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}", "lang": "javascript", "code_str_generate": "function nzgxh(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n", "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex."}
{"task_id": 459, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public static int[] addPairwise(int[] testArr) {\n        int[] res = new int[testArr.length - 1];\n//This is a comment line.\n        for (int i = 0; i < testArr.length - 1; i++) {\n        //begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public static int[] addPairwise(int[] testArr) {\n        int[] res = new int[testArr.length - 1];\n//This is a comment line.\n        for (int i = 0; i < testArr.length - 1; i++) {\n            res[i] = testArr[i] + testArr[i + 1];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nclass Solution {\n    public static int[] addPairwise(int[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the pairwise addition of the elements of the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[testArr.length - 1];\n//This is a comment line.\n        for (int i = 0; i < testArr.length - 1; i++) {\n        //begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 377, "Adversarial Code": "def highest_Power_of_2(n):\n    ies = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    ies = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            ies = i; \n            break; \n    return ies; ", "lang": "python", "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ies = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 387, "Adversarial Code": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n//This is a comment line.\n                    if (Character.isDigit(c)) {\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n//This is a comment line.\n                    if (Character.isDigit(c)) {\n                        sum += Character.getNumericValue(c);\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to compute the sum of digits of each number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n//This is a comment line.\n                    if (Character.isDigit(c)) {\n                    //begin to write code\n", "prompt": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": 208, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, long K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); idx = idx + 1) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, long K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); idx = idx + 1) {\n        if (idx < K || idx >= test_vec.size() - K) {\n            res.push_back(test_vec[idx]);\n        }\n    }\n    return std::make_tuple(res);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, long K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract maximum and minimum k elements in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); idx = idx + 1) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n", "prompt": "Write a function to extract maximum and minimum k elements in the given tuple."}
{"task_id": 211, "Adversarial Code": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if\n (\n //begin to write code\n", "Adversarial truth": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if\n (\ntypeof ele !== typeof test_tuple[0]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "//function difinition\nfunction check_type(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if all the elements in tuple have same data type or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = true;\n    for (let ele of test_tuple) {\n        if\n (\n //begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 394, "Adversarial Code": "import java.beans.*;\nclass Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n    //begin to write code\n", "Adversarial truth": "import java.beans.*;\nclass Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n        return Arrays.asList(tuplex).contains(tuple1);\n    }\n}\n", "lang": "java", "code_str_generate": "import java.beans.*;\nclass Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n\n    /*\n    progame language:java\n    description:Write a function to check whether an element exists within a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n    //begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 42, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "prompt": "Write a cpp function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 419, "Adversarial Code": "function parabola_directrix(a, b, c) { \n  let directrix = Math.floor(c - 4 * a * ((b * b) + 1));\n  //begin to write code\n", "Adversarial truth": "function parabola_directrix(a, b, c) { \n  let directrix = Math.floor(c - 4 * a * ((b * b) + 1));\n  return directrix;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_directrix(a, b, c) { \n\n  /*\n  progame language:javascript\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let directrix = Math.floor(c - 4 * a * ((b * b) + 1));\n  //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 201, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of fourth power of n natural numbers."}
{"task_id": 64, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."}
{"task_id": 319, "Adversarial Code": "function match(text) {\n//begin to write code\n", "Adversarial truth": "function match(text) {\n  return text.match(/\\b\\w{3,5}\\b/g) || [];\n}\n\n", "lang": "javascript", "code_str_generate": "function match(text) {\n//begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 239, "Adversarial Code": "class Solution {\n    public static int count_X(int[] arr, long x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_X(int[] arr, long x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_X(int[] arr, long x) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occcurences of an element in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n                //begin to write code\n", "prompt": "Write a java function to count the occcurences of an element in a tuple."}
{"task_id": 250, "Adversarial Code": "def division_elements(test, other):\n  elements = tuple(i // j for i, j in zip(test, other))\n  #begin to write code\n", "Adversarial truth": "def division_elements(test, other):\n  elements = tuple(i // j for i, j in zip(test, other))\n  return (elements) ", "lang": "python", "code_str_generate": "def division_elements(test, other):\n\n  '''\n  progame language:python\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  elements = tuple(i // j for i, j in zip(test, other))\n  #begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 373, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the smallest value in a given array."}
{"task_id": 345, "Adversarial Code": "def find_angle(a,b):\n c = 180 - (a + b)\n #begin to write code\n", "Adversarial truth": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n", "lang": "python", "code_str_generate": "def find_angle(a,b):\n\n '''\n progame language:python\n description:Write a function to find the third angle of a triangle using two angles.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n c = 180 - (a + b)\n #begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 47, "Adversarial Code": "function opposite_Signs(x, y) {\n//begin to write code\n", "Adversarial truth": "function opposite_Signs(x, y) {\n    return ((x ^ y) < 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function opposite_Signs(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the given two integers have opposite sign or not."}
{"task_id": 197, "Adversarial Code": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        return matcher.find();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isDecimal(String num) {\n\n        /*\n        progame language:java\n        description:Write a function to check the given decimal with a precision of 2 by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 351, "Adversarial Code": "class Solution {\n    public int add(int[] keys) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int k : keys) {\n            result.put(k, result.getOrDefault(k, 0) + 1);\n        }\n        int index = 0;\n        int key = keys[0];\n        for (Map.Entry<Integer, Integer> entry : result.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int add(int[] keys) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int k : keys) {\n            result.put(k, result.getOrDefault(k, 0) + 1);\n        }\n        int index = 0;\n        int key = keys[0];\n        for (Map.Entry<Integer, Integer> entry : result.entrySet()) {\n            if (entry.getValue() > index) {\n                index = entry.getValue();\n                key = entry.getKey();\n            }\n        }\n        return key;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int add(int[] keys) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (int k : keys) {\n            result.put(k, result.getOrDefault(k, 0) + 1);\n        }\n        int index = 0;\n        int key = keys[0];\n        for (Map.Entry<Integer, Integer> entry : result.entrySet()) {\n        //begin to write code\n", "prompt": "Write a java function to find the item with maximum occurrences in a given list."}
{"task_id": 218, "Adversarial Code": "function re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            //begin to write code\n", "Adversarial truth": "function re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n}\n\n", "lang": "javascript", "code_str_generate": "function re_arrange_array(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            //begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 324, "Adversarial Code": "def ap_sum(p,b,c):\n  ap = (b * (2 * p + (b - 1) * c)) / 2\n  #begin to write code\n", "Adversarial truth": "def ap_sum(p,b,c):\n  ap = (b * (2 * p + (b - 1) * c)) / 2\n  return ap", "lang": "python", "code_str_generate": "def ap_sum(p,b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the sum of arithmetic progression.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ap = (b * (2 * p + (b - 1) * c)) / 2\n  #begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 80, "Adversarial Code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n   #begin to write code\n", "Adversarial truth": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False", "lang": "python", "code_str_generate": "def find_substring(str1, sub_str):\n\n   '''\n   progame language:python\n   description:Write a function to check if a substring is present in a given list of string values.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   if any(sub_str in s for s in str1):\n   #begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 164, "Adversarial Code": "function isValidParenthese(str1) {\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n            //begin to write code\n", "Adversarial truth": "function isValidParenthese(str1) {\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n        } else if (stack.length === 0 || pchar[stack.pop()] !== parenthese) {\n            return false;\n        }\n    }\n    return stack.length === 0;\n}\n\n", "lang": "javascript", "code_str_generate": "function isValidParenthese(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to verify validity of a string of parentheses.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n            //begin to write code\n", "prompt": "Write a function to verify validity of a string of parentheses."}
{"task_id": 251, "Adversarial Code": "function sklig_twl_kaigs(list1, L) {\n//begin to write code\n", "Adversarial truth": "function sklig_twl_kaigs(list1, L) {\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\n", "lang": "javascript", "code_str_generate": "function sklig_twl_kaigs(list1, L) {\n//begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 178, "Adversarial Code": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n                nums[i] = 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            nums[(nums[i] - 1) % n] += n;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= n) {\n                return i + 1;\n            }\n        }\n        return n + 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first missing positive number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n            //begin to write code\n", "prompt": "Write a java function to find the first missing positive number."}
{"task_id": 321, "Adversarial Code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys\\\n = dict.keys()\n #begin to write code\n", "Adversarial truth": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys\\\n = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict\n", "lang": "python", "code_str_generate": "def char_frequency(str1):\n\n    '''\n    progame language:python\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    dict = {}\n    for n in str1:\n        keys\\\n = dict.keys()\n #begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 117, "Adversarial Code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "Adversarial truth": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len\\\n.append(x)\n    return word_len    \n\n\n", "lang": "python", "code_str_generate": "def long_words(n, str):\n\n    '''\n    progame language:python\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 409, "Adversarial Code": "class Solution {\n    public static int cube_Sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int cube_Sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n        }\n//This is a comment line.\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int cube_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the cube sum of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n            //begin to write code\n", "prompt": "Write a java function to find the cube sum of first n even natural numbers."}
{"task_id": 193, "Adversarial Code": "class Solution {\n    public static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i = i + 1) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i = i + 1) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count(String s, char c) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurrence of a given character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = 0; i < s.length(); i = i + 1) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n", "prompt": "Write a java function to count the occurrence of a given character in a string."}
{"task_id": 419, "Adversarial Code": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "Adversarial truth": "\n\nclass Solution {\n\n\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        return directrix;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the directrix of a parabola.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 265, "Adversarial Code": "class Solution {\n    public static double func_0(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double func_0(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double func_0(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 238, "Adversarial Code": "def intersection_array(array_nums1,array_nums2):\n result\\\n #begin to write code\n", "Adversarial truth": "def intersection_array(array_nums1,array_nums2):\n result\\\n = list(filter(lambda x: x in array_nums1, array_nums2)) \n return result", "lang": "python", "code_str_generate": "def intersection_array(array_nums1,array_nums2):\n\n '''\n progame language:python\n description:Write a function to find the intersection of two arrays using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result\\\n #begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 421, "Adversarial Code": "function median_trapvzium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n", "Adversarial truth": "function median_trapvzium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    return median;\n}\n\n", "lang": "javascript", "code_str_generate": "function median_trapvzium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 155, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n find_even_Pair\\\n(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for\\\n (int j = i + 1; j < N; ++j) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint\\\n find_even_Pair\\\n(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for\\\n (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                evenPair += 1;\n            }\n        }\n    }\n    return evenPair;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n find_even_Pair\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for\\\n (int j = i + 1; j < N; ++j) {\n//begin to write code\n", "prompt": "Write a cpp function to count the pairs with xor as an even number."}
{"task_id": 367, "Adversarial Code": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  #begin to write code\n", "Adversarial truth": "def move_first(test_list):\n  test_list = test_list[-1:] + test_list[:-1]  \n  return test_list", "lang": "python", "code_str_generate": "def move_first(test_list):\n\n  '''\n  progame language:python\n  description:Write a python function to shift last element to first position in the given list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  test_list = test_list[-1:] + test_list[:-1]  \n  #begin to write code\n", "prompt": "Write a python function to shift last element to first position in the given list."}
{"task_id": 350, "Adversarial Code": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if\n (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n\n\n            if\n (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n            }\n        }\n        return removeEmpty;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove empty lists from a given list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if\n (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 85, "Adversarial Code": "def func_0(n):\n  for i in range(n):\n  #begin to write code\n", "Adversarial truth": "def func_0(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "lang": "python", "code_str_generate": "def func_0(n):\n\n  '''\n  progame language:python\n  description:Write a python function to find the number of divisors of a given integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n  #begin to write code\n", "prompt": "Write a python function to find the number of divisors of a given integer."}
{"task_id": 185, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    {\n        size_t i = 0;\n        for (; i < test_vec1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    {\n        size_t i = 0;\n        for (; i < test_vec1.size(); ++i) {\n            res.push_back(pow(test_vec1[i], test_vec2[i]));\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    {\n        size_t i = 0;\n        for (; i < test_vec1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 107, "Adversarial Code": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n    while (iss >> s) {\n        result.push_back(s);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 152, "Adversarial Code": "import java.net.*;\nclass Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "import java.net.*;\nclass Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n//This is a comment line.\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.net.*;\nclass Solution {\n    public static double areaPolygon(int s, double l) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the area of a regular polygon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to calculate the area of a regular polygon."}
{"task_id": 484, "Adversarial Code": "function remove_lowercase(str1) {\n//begin to write code\n", "Adversarial truth": "function remove_lowercase(str1) {\n  return str1.replace(/[a-z]/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_lowercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 6, "Adversarial Code": "def square_perimeter(a):\n  perimeter=4*a\n  #begin to write code\n", "Adversarial truth": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "lang": "python", "code_str_generate": "def square_perimeter(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a square.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=4*a\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 362, "Adversarial Code": "class Solution {\n    public static int volume(int l, int w, int h) {\n        int volume = l * w * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volume(int l, int w, int h) {\n        int volume = l * w * h;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int volume(int l, int w, int h) {\n        int volume = l * w * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 134, "Adversarial Code": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        long minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        long minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n        return (maxEle - minEle);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum difference between any two elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n", "prompt": "Write a java function to find the maximum difference between any two elements in a given array."}
{"task_id": 282, "Adversarial Code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "Adversarial truth": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "lang": "python", "code_str_generate": "import math\ndef otherside_rightangle(w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the third side of a right angled triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 364, "Adversarial Code": "def round_num(n,m):\n    a = (n //m) * m\n    #begin to write code\n", "Adversarial truth": "def round_num(n,m):\n    a = (n //m) * m\n    b = a + m\n    return (b if n - a > b - n else a)", "lang": "python", "code_str_generate": "def round_num(n,m):\n\n    '''\n    progame language:python\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    a = (n //m) * m\n    #begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 346, "Adversarial Code": "const readline = require('readline');\nfunction find_max(test_list) {\n//begin to write code\n", "Adversarial truth": "const readline = require('readline');\nfunction find_max(test_list) {\n  let res = Math.max(...test_list.flat().map(Number));\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "const readline = require('readline');\nfunction find_max(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum element of all the given tuple records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the maximum element of all the given tuple records."}
{"task_id": 231, "Adversarial Code": "def total(str1):\n total = 0\n for i in str1:\n #begin to write code\n", "Adversarial truth": "def total(str1):\n total = 0\n for i in str1:\n    total = total + 1\n return total", "lang": "python", "code_str_generate": "def total(str1):\n\n '''\n progame language:python\n description:Write a function to count total characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n total = 0\n for i in str1:\n #begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 190, "Adversarial Code": "def chkList(lst):\n    return len\\\n    #begin to write code\n", "Adversarial truth": "\n\ndef chkList(lst): \n    return len\\\n(set(lst)) == 1", "lang": "python", "code_str_generate": "def chkList(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return len\\\n    #begin to write code\n", "prompt": "Write a python function to check whether the elements in a list are same or not."}
{"task_id": 110, "Adversarial Code": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return 1;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return 1;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n            return 0;\n        }\n        return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) ||\n               checkTriplet(A, n - 1, sum, count);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n\n        /*\n        progame language:java\n        description:Write a function to find the triplet with sum of the given array\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (count == 3 && sum == 0) {\n            return 1;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 415, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    return x % 2 != 0; \n    });\n    return odd_nums;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 14, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint func_0(std::vector<int> var_3, int var_1) {\n    std::sort(var_3.begin(), var_3.end());\n    int var_2 = 1;\n    for (int var_0 = 0; var_0 < var_1; var_0++) {\n        if (var_0 == 0 || var_3[var_0 - 1] != var_3[var_0]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint func_0(std::vector<int> var_3, int var_1) {\n    std::sort(var_3.begin(), var_3.end());\n    int var_2 = 1;\n    for (int var_0 = 0; var_0 < var_1; var_0++) {\n        if (var_0 == 0 || var_3[var_0 - 1] != var_3[var_0]) {\n            var_2 *= var_3[var_0];\n        }\n    }\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint func_0(std::vector<int> var_3, int var_1) {\n    std::sort(var_3.begin(), var_3.end());\n    int var_2 = 1;\n    for (int var_0 = 0; var_0 < var_1; var_0++) {\n        if (var_0 == 0 || var_3[var_0 - 1] != var_3[var_0]) {\n//begin to write code\n", "prompt": "Write a cpp function to find the product of non-repeated elements in a given array."}
{"task_id": 277, "Adversarial Code": "class Solution {\n    public\n static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n            }\n        }\n        return currentElement;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int modularInverse(int[] arr, int N, int P) {\n\n        /*\n        progame language:java\n        description:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n            //begin to write code\n", "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself."}
{"task_id": 347, "Adversarial Code": "def map(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def map(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "lang": "python", "code_str_generate": "def map(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to find modulo division of two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 463, "Adversarial Code": "function replace_char(str1, ch, newch) {\n(function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n//begin to write code\n", "Adversarial truth": "function replace_char(str1, ch, newch) {\n(function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n    let str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    return str2;\n}\n\n", "lang": "javascript", "code_str_generate": "function replace_char(str1, ch, newch) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n//begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 368, "Adversarial Code": "def surfacearea_cuboid(l,w,h):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def surfacearea_cuboid(l,w,h):\n#This is a comment line.\n  SA = 2*(l*w + l * h + w * h)\n  return SA", "lang": "python", "code_str_generate": "def surfacearea_cuboid(l,w,h):\n\n    '''\n    progame language:python\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 88, "Adversarial Code": "function decimal_to_binary(n) {\n    return n.toString(2);\n    //begin to write code\n", "Adversarial truth": "function decimal_to_binary(n) {\n    return n.toString(2);\n\nlet temp_var_2 = 9.9;while (temp_var_2 < 9.12) {temp_var_2 = temp_var_2 + 1;}\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_to_binary(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return n.toString(2);\n    //begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 180, "Adversarial Code": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_monthnumber(monthname3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 157, "Adversarial Code": "class Solution {\n    public static int frequency(int[] var_0, int var_3) {\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 == var_3) var_1 += 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int frequency(int[] var_0, int var_3) {\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 == var_3) var_1 += 1;\n        }\n        return var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int frequency(int[] var_0, int var_3) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the frequency of a number in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 == var_3) var_1 += 1;\n            //begin to write code\n", "prompt": "Write a java function to find the frequency of a number in a given array."}
{"task_id": 255, "Adversarial Code": "function lateralsurface_cube(var_1) {\n    const var_0 = 4 * (var_1 * var_1);\n    //begin to write code\n", "Adversarial truth": "function lateralsurface_cube(var_1) {\n    const var_0 = 4 * (var_1 * var_1);\n    return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function lateralsurface_cube(var_1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 4 * (var_1 * var_1);\n    //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 213, "Adversarial Code": "import logging\ndef count_Set_Bits(n):\n    var_0 = 0\n    count = var_0 \n    while (n): \n        var_1 = 1\n        #begin to write code\n", "Adversarial truth": "import logging\ndef count_Set_Bits(n): \n    var_0 = 0\n    count = var_0 \n    while (n): \n        var_1 = 1\n        count += n & var_1 \n        var_2 = 1\n        n >>= var_2 \n    return count ", "lang": "python", "code_str_generate": "import logging\ndef count_Set_Bits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    count = var_0 \n    while (n): \n        var_1 = 1\n        #begin to write code\n", "prompt": "Write a python function to count set bits of a given number."}
{"task_id": 210, "Adversarial Code": "def next(var_2):\n    var_1 = next((var_0 for var_0 in var_2 if var_0%2==0),-1)\n    #begin to write code\n", "Adversarial truth": "def next(var_2):\n    var_1 = next((var_0 for var_0 in var_2 if var_0%2==0),-1)\n    return var_1", "lang": "python", "code_str_generate": "def next(var_2):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_1 = next((var_0 for var_0 in var_2 if var_0%2==0),-1)\n    #begin to write code\n", "prompt": "Write a python function to find the first even number in a given list of numbers."}
{"task_id": 18, "Adversarial Code": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i = i + 1) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j = j + 1) {\n                if (arr[j] == arr[i]) {\n                    count = count + 1;\n                }\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i = i + 1) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j = j + 1) {\n                if (arr[j] == arr[i]) {\n                    count = count + 1;\n                }\n            }\n            if (0 != count % 2) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element occurring odd number of times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < arr_size; i = i + 1) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j = j + 1) {\n                if (arr[j] == arr[i]) {\n                    count = count + 1;\n                }\n                //begin to write code\n", "prompt": "Write a java function to find the element occurring odd number of times."}
{"task_id": 484, "Adversarial Code": "function func_0(str1) {\n//begin to write code\n", "Adversarial truth": "function func_0(str1) {\n  return str1.replace(/[a-z]/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(str1) {\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 389, "Adversarial Code": "function extract_freq(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n", "Adversarial truth": "function extract_freq(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function extract_freq(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": 238, "Adversarial Code": "import socket\ndef intersection_array(array_nums1,array_nums2):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import socket\ndef intersection_array(array_nums1,array_nums2):\n#This is a comment line.\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \n\n\n return result", "lang": "python", "code_str_generate": "import socket\ndef intersection_array(array_nums1,array_nums2):\n\n    '''\n    progame language:python\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 462, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n    {\n        size_t i = 0;\n        while(i < str1.length()){\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string replace_char(std::string str1, char ch, char newch) {\n    {\n        size_t i = 0;\n        while(i < str1.length()){\n        if (str1[i] == ch) {\n            str1[i] = newch;\n        }\n            ++i;\n        }\n    }\n    return str1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n    {\n        size_t i = 0;\n        while(i < str1.length()){\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"task_id": 185, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if (K != (int)ele.size()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if (K != (int)ele.size()) {\n            res.push_back(ele);\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove all the tuples with length k.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if (K != (int)ele.size()) {\n//begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 282, "Adversarial Code": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "Adversarial truth": "import math\ndef otherside_rightangle(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "lang": "python", "code_str_generate": "import math\ndef otherside_rightangle(w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the third side of a right angled triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 341, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool contains(std::string str) {\n    for (int j = 0; j < str.length(); j++) {\n        for (int i = j + 1; i < str.length(); i++) {\n            if (str[j] == str[i]) {\n                return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool contains(std::string str) {\n    for (int j = 0; j < str.length(); j++) {\n        for (int i = j + 1; i < str.length(); i++) {\n            if (str[j] == str[i]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool contains(std::string str) {\n    for (int j = 0; j < str.length(); j++) {\n        for (int i = j + 1; i < str.length(); i++) {\n            if (str[j] == str[i]) {\n                return false;\n//begin to write code\n", "prompt": "Write a cpp function to check whether all the characters in a given string are unique."}
{"task_id": 35, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<int>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_distinct(const std::vector<int>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n    return data.size() == distinctSet.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<int>& data) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to determine whether all the numbers are different from each other are not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n", "prompt": "Write a cpp function to determine whether all the numbers are different from each other are not."}
{"task_id": 478, "Adversarial Code": "def frequency_Of_Largest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "lang": "python", "code_str_generate": "def frequency_Of_Largest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the largest value in a given array."}
{"task_id": 16, "Adversarial Code": "function remove(list) {\n//begin to write code\n", "Adversarial truth": "function remove(list) {\n    return list.map(i => i.replace(/[0-9]/g, ''));\n}\n\n", "lang": "javascript", "code_str_generate": "function remove(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to remove all digits from a list of strings."}
{"task_id": 11, "Adversarial Code": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n    {\n        let i = 0;\n        while(i < nums.length){\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n", "Adversarial truth": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n\n    {\n        let i = 0;\n        while(i < nums.length){\n        if (num_set.has(nums[i])) {\n            return nums[i];\n        } else {\n            num_set.add(nums[i]);\n        }\n            i++;\n        }\n    }\n\n    return no_duplicate;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_first_duplicate(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num_set = new Set();\n    let no_duplicate = -1;\n    {\n        let i = 0;\n        while(i < nums.length){\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 163, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n        result[p.first].push_back(p.second);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 265, "Adversarial Code": "def volume_cylinder(r,h):\n  var_0 = 3.1415\n  #begin to write code\n", "Adversarial truth": "def volume_cylinder(r,h):\n  var_0 = 3.1415\n  volume=var_0 *r*r*h\n  return volume", "lang": "python", "code_str_generate": "def volume_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 3.1415\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 424, "Adversarial Code": "def mod(x) :\n    #begin to write code\n", "Adversarial truth": "def mod(x) :\n    return (x % 10) ", "lang": "python", "code_str_generate": "def mod(x) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the last digit of a given number."}
{"task_id": 258, "Adversarial Code": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int asciiValue(char k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of a character.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) k;\n        //begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 345, "Adversarial Code": "function find_angle(a, b) {\n    const c = 180 - (a + b);\n    //begin to write code\n", "Adversarial truth": "function find_angle(a, b) {\n    const c = 180 - (a + b);\n//This is a comment line.\n    return c;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_angle(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const c = 180 - (a + b);\n    //begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 22, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\ndouble temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint decimal_To_Binary(int N) {\ndouble temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Number += rem * c;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\ndouble temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n//begin to write code\n", "prompt": "Write a cpp function to convert a decimal number to binary number."}
{"task_id": 159, "Adversarial Code": "def sum_range_list(list1, m, n):\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "Adversarial truth": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "lang": "python", "code_str_generate": "def sum_range_list(list1, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 415, "Adversarial Code": "function\n filter_oddnumbers(nums) {\n    const\n    //begin to write code\n", "Adversarial truth": "function\n filter_oddnumbers(nums) {\n    const\n\n\n odd_nums\n = nums.filter(x => x % 2 !== 0);\n    return odd_nums;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function\n filter_oddnumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 325, "Adversarial Code": "class Solution {\n    public boolean checkMonthnum(String var_0) {\n        if (var_0.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthnum(String var_0) {\n        if (var_0.equals(\"February\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkMonthnum(String var_0) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 28 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (var_0.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 22, "Adversarial Code": "class Solution {\n    public static long decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            B_Number += rem * c;\n            N /= 2;\n            cnt += 1;\n        }\n        return B_Number;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long decimal_To_Binary(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert a decimal number to binary number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "prompt": "Write a java function to convert a decimal number to binary number."}
{"task_id": 419, "Adversarial Code": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        return directrix;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the directrix of a parabola.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 315, "Adversarial Code": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n          temp[wrd] = 1;\n        }\n      });\n    });\n    let res = Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);\n    return res;\n  }", "lang": "javascript", "code_str_generate": "function mostOccurrences(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 131, "Adversarial Code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "Adversarial truth": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "lang": "python", "code_str_generate": "def count_samepair(list1,list2,list3):\n\n    '''\n    progame language:python\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 463, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n    const auto var_1 = 0;\n    const auto var_0 = var_1 ;\n    for (size_t i = var_0 ; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string replace_char(std::string str1, char ch, char newch) {\n    const auto var_1 = 0;\n    const auto var_0 = var_1 ;\n    for (size_t i = var_0 ; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n        }\n    }\n    return str1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_1 = 0;\n    const auto var_0 = var_1 ;\n    for (size_t i = var_0 ; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n//begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 446, "Adversarial Code": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sublist having minimum length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n", "prompt": "Write a java function to find the sublist having minimum length."}
{"task_id": 320, "Adversarial Code": "function count_unset_bits(size) {\n    let i = 0;\n    let j = 1;\n    while (j < size + 1) {\n        if ((j & size) === 0) {\n        //begin to write code\n", "Adversarial truth": "function count_unset_bits(size) {\n    let i = 0;\n    let j = 1;\n    while (j < size + 1) {\n        if ((j & size) === 0) {\n            i++;\n        }\n        j = j << 1;\n    }\n    return i;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_unset_bits(size) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = 0;\n    let j = 1;\n    while (j < size + 1) {\n        if ((j & size) === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to count unset bits of a given number."}
{"task_id": 203, "Adversarial Code": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    //begin to write code\n", "Adversarial truth": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    return degree;\n}\n\n", "lang": "javascript", "code_str_generate": "function degree_radian(radian) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const degree = radian * (180 / Math.PI);\n    //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 29, "Adversarial Code": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "Adversarial truth": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n  result = Counter(chain.from_iterable(nums))\n  return result", "lang": "python", "code_str_generate": "from collections import Counter\nfrom itertools import chain\ndef freq_element(nums):\n\n  '''\n  progame language:python\n  description:Write a function to find frequency of the elements in a given list of lists using collections module.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = Counter(chain.from_iterable(nums))\n  #begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 245, "Adversarial Code": "class Solution {\n    public int countPrimesNums(int n) {\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (0 == num % i) {\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int countPrimesNums(int n) {\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (0 == num % i) {\n                    break;\n                }\n            }\n            if (num == i) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int countPrimesNums(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of prime numbers less than a given non-negative number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (0 == num % i) {\n                //begin to write code\n", "prompt": "Write a java function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 281, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint\\\n find(int n, int m) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint\\\n find(int n, int m) {\n    int q = n / m;\n    return q;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint\\\n find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find quotient of two numbers."}
{"task_id": 105, "Adversarial Code": "class Solution {\n    public static long tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long tupleToInt(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given tuple of positive integers into an integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 55, "Adversarial Code": "function pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n", "Adversarial truth": "function pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n            pos_count += 1;\n        }\n    }\n    return pos_count;\n}\n\n", "lang": "javascript", "code_str_generate": "function pos_count(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to count positive numbers in a list."}
{"task_id": 176, "Adversarial Code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n#This is a comment line.\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n       lambda: print('This function is used to remove a item of a list')\n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "lang": "python", "code_str_generate": "def longest_common_subsequence(X, Y, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 122, "Adversarial Code": "#include <cstdio>\n#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    const auto var_0 = 0;\n    int sum = var_0 ;\n    for (auto num : nums) {\n        const auto var_1 = 0;\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& nums) {\n    const auto var_0 = 0;\n    int sum = var_0 ;\n    for (auto num : nums) {\n        const auto var_1 = 0;\n        if (num < var_1 ) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    int sum = var_0 ;\n    for (auto num : nums) {\n        const auto var_1 = 0;\n//begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 271, "Adversarial Code": "def func_0(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def func_0(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "lang": "python", "code_str_generate": "def func_0(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to substaract two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 362, "Adversarial Code": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cuboid.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int volume = l * w * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 447, "Adversarial Code": "def\\\n rectangle_area(l,b):\n #begin to write code\n", "Adversarial truth": "def\\\n rectangle_area(l,b):\n  area=l*b\n  return area", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to find the area of a rectangle.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n rectangle_area(l,b):\n #begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 64, "Adversarial Code": "class Solution {\n    public\n static\n List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static\n List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static\n List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    //begin to write code\n", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."}
{"task_id": 117, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int i, const std::string &ss) {\n    std::vector<std::string> ret;\n    std::istringstream s(ss);\n    std::string result;\n    while (s >> result) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\n\nstd::vector<std::string> long_words(int i, const std::string &ss) {\n    std::vector<std::string> ret;\n    std::istringstream s(ss);\n    std::string result;\n    while (s >> result) {\n        if (result.length() > i) {\n            ret.push_back(result);\n        }\n    }\n    return ret;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int i, const std::string &ss) {\n\n    /*\n    progame language:cpp\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> ret;\n    std::istringstream s(ss);\n    std::string result;\n    while (s >> result) {\n//begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 239, "Adversarial Code": "class Solution {\n    public static int count(int[] arr, int x) {\n        int count = 0;\n        for (int eoe : arr) {\n            if (eoe == x) {\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(int[] arr, int x) {\n        int count = 0;\n        for (int eoe : arr) {\n            if (eoe == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count(int[] arr, int x) {\n        int count = 0;\n        for (int eoe : arr) {\n            if (eoe == x) {\n                count++;\n                //begin to write code\n", "prompt": "Write a java function to count the occcurences of an element in a tuple."}
{"task_id": 197, "Adversarial Code": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "Adversarial truth": "import re\ndef is_decimal(num):\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  result = num_fetch.search(num)\n  return bool(result)", "lang": "python", "code_str_generate": "import re\ndef is_decimal(num):\n\n  '''\n  progame language:python\n  description:Write a function to check the given decimal with a precision of 2 by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n  #begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 424, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint\\\n last_Digit\\\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint\\\n last_Digit\\\n(int n) {\n\n\n    return n % 10;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint\\\n last_Digit\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the last digit of a given number."}
{"task_id": 173, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool\\\n greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool\\\n greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n        if (x < num) return false;\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool\\\n greater_specificnum(const std::vector<int>& list, int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all the values in a list that are greater than a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int x : list) {\n//begin to write code\n", "prompt": "Write a function to find all the values in a list that are greater than a specified number."}
{"task_id": 138, "Adversarial Code": "def longest_subseq_with_diff_one(arr, n):\n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[j]+1 == arr[i]) or (arr[j]-1 == arr[i])): \n\t\t\t\tdp[i] = max(dp[i], 1 + dp[j]) \n\t\t\t\t#begin to write code\n", "Adversarial truth": "def longest_subseq_with_diff_one(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[j]+1 == arr[i]) or (arr[j]-1 == arr[i])): \n\t\t\t\tdp[i] = max(dp[i], 1 + dp[j]) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "lang": "python", "code_str_generate": "def longest_subseq_with_diff_one(arr, n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[j]+1 == arr[i]) or (arr[j]-1 == arr[i])): \n\t\t\t\tdp[i] = max(dp[i], 1 + dp[j]) \n\t\t\t\t#begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 350, "Adversarial Code": "class Solution {\n    public static List<Object> func_0(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> func_0(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n            }\n        }\n        return removeEmpty;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> func_0(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n\n        /*\n        progame language:java\n        description:Write a function to remove empty lists from a given list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n                //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 83, "Adversarial Code": "function index_minimum(testList) {\n  const\n  //begin to write code\n", "Adversarial truth": "function index_minimum(testList) {\n  const\n res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  return res;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function index_minimum(testList) {\n\n  /*\n  progame language:javascript\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const\n  //begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 259, "Adversarial Code": "function sum_even_and_even_index(arr, n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 2;\n    let sum = var_0 ;\n    for (let i = var_1 ; i < n; i += var_2 ) {\n        const var_3 = 2;\n        //begin to write code\n", "Adversarial truth": "function sum_even_and_even_index(arr, n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 2;\n    let sum = var_0 ;\n    for (let i = var_1 ; i < n; i += var_2 ) {\n        const var_3 = 2;\n        const var_4 = 0;\n        if (arr[i] % var_3  === var_4 ) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_even_and_even_index(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    const var_2 = 2;\n    let sum = var_0 ;\n    for (let i = var_1 ; i < n; i += var_2 ) {\n        const var_3 = 2;\n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of even numbers at even positions."}
{"task_id": 154, "Adversarial Code": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if\n (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n //begin to write code\n", "Adversarial truth": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if\n (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_char_position(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if\n (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n //begin to write code\n", "prompt": "Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 355, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<long>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\nint adjacent_num_product(const vector<long>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n        max_product = max(max_product, list_nums[1 + i] * list_nums[i]);\n    }\n    return max_product;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<long>& list_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 197, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex p(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nbool is_decimal(const string& num) {\n    regex p(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n    return regex_search(num, p);\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex p(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 426, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    {\n        size_t idx = 0;\n        for (; idx < test_list.size(); ++idx) {\n            {\n                size_t iidx = idx + 1;\n                for (; iidx < test_list.size(); ++iidx) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    {\n        size_t idx = 0;\n        for (; idx < test_list.size(); ++idx) {\n            {\n                size_t iidx = idx + 1;\n                for (; iidx < test_list.size(); ++iidx) {\n                        if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n                            res += 1;\n                        }\n                    }\n            }\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    {\n        size_t idx = 0;\n        for (; idx < test_list.size(); ++idx) {\n            {\n                size_t iidx = idx + 1;\n                for (; iidx < test_list.size(); ++iidx) {\n//begin to write code\n", "prompt": "Write a function to remove odd characters in a string."}
{"task_id": 216, "Adversarial Code": "def min_of_three(a,b,c):\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n        #begin to write code\n", "Adversarial truth": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n        temp_var_5 = 9.9\n        while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n      return smallest ", "lang": "python", "code_str_generate": "def min_of_three(a,b,c):\n\n      '''\n      progame language:python\n      description:Write a function to find minimum of three numbers.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n        #begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 77, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> vec) {\n    std::map<int, int> freq_count;\n    for (int r : vec) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\n\nstd::map<int, int> freq_count(std::vector<int> vec) {\n    std::map<int, int> freq_count;\n    for (int r : vec) {\n        freq_count[r]++;\n    }\n    return freq_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<int, int> freq_count;\n    for (int r : vec) {\n//begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 74, "Adversarial Code": "function surfacearea_sphere(r) {\n  let\n  //begin to write code\n", "Adversarial truth": "function surfacearea_sphere(r) {\n  let\n surfacearea = 4 * Math.PI * r * r;\n  return surfacearea;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function surfacearea_sphere(r) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the surface area of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let\n  //begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 297, "Adversarial Code": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    #begin to write code\n", "Adversarial truth": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "lang": "python", "code_str_generate": "def large_product(nums1, nums2, N):\n\n    '''\n    progame language:python\n    description:Write a function to find the specified number of largest products from two given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    #begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 154, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nint parse(const std::string& sti1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < sti1.length(); ++i) {\n        if ((i == static_cast<size_t>(sti1[i] - 'A')) ||\n            (i == static_cast<size_t>(sti1[i] - 'a'))) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint parse(const std::string& sti1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < sti1.length(); ++i) {\n        if ((i == static_cast<size_t>(sti1[i] - 'A')) ||\n            (i == static_cast<size_t>(sti1[i] - 'a'))) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint parse(const std::string& sti1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < sti1.length(); ++i) {\n        if ((i == static_cast<size_t>(sti1[i] - 'A')) ||\n            (i == static_cast<size_t>(sti1[i] - 'a'))) {\n//begin to write code\n", "prompt": "Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet."}
{"task_id": 473, "Adversarial Code": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n", "Adversarial truth": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "lang": "python", "code_str_generate": "def remove_matching_tuple(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to remove the matching tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 8, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    return arraynums.size() != nums_set.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 340, "Adversarial Code": "import logging\ndef first_Element(arr,n,k):\n    count_map = {}; \n    var_0 = 0\n    for i in range(var_0 , n): \n        if(arr[i] in count_map.keys()): \n            var_1 = 1\n            count_map[arr[i]] += var_1 \n        else: \n            var_2 = 1\n            count_map[arr[i]] = var_2 \n            #begin to write code\n", "Adversarial truth": "import logging\ndef first_Element(arr,n,k): \n    count_map = {}; \n    var_0 = 0\n    for i in range(var_0 , n): \n        if(arr[i] in count_map.keys()): \n            var_1 = 1\n            count_map[arr[i]] += var_1 \n        else: \n            var_2 = 1\n            count_map[arr[i]] = var_2 \n        var_3 = 1\n        i += var_3 \n    var_4 = 0\n    for i in range(var_4 , n):  \n        if (count_map[arr[i]] == k): \n            return arr[i] \n        var_5 = 1\n        i += var_5  \n    var_6 = 1\n    return -var_6 ", "lang": "python", "code_str_generate": "import logging\ndef first_Element(arr,n,k):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count_map = {}; \n    var_0 = 0\n    for i in range(var_0 , n): \n        if(arr[i] in count_map.keys()): \n            var_1 = 1\n            count_map[arr[i]] += var_1 \n        else: \n            var_2 = 1\n            count_map[arr[i]] = var_2 \n            #begin to write code\n", "prompt": "Write a python function to find the first element occurring k times in a given array."}
{"task_id": 428, "Adversarial Code": "def multiple_to_single(L):\n  x\\\n  #begin to write code\n", "Adversarial truth": "\n\ndef multiple_to_single(L):\n  x\\\n = int(\"\".join(map(str, L)))\n  return x\n", "lang": "python", "code_str_generate": "def multiple_to_single(L):\n\n  '''\n  progame language:python\n  description:Write a function to convert a list of multiple integers into a single integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  x\\\n  #begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 265, "Adversarial Code": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n\n\n        double volume = 3.1415 * r * r * h;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 215, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else{\n          if (b <= a && b <= c) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else{\n          if (b <= a && b <= c) {\n            smallest = b;\n        } else {\n            smallest = c;\n        }\n      }\n    return smallest;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else{\n          if (b <= a && b <= c) {\n//begin to write code\n", "prompt": "Write a cpp function to remove the characters which have odd index values of a given string."}
{"task_id": 57, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i + 1]) increasing = false;\n        if (A[i] < A[i + 1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given array is monotonic or not."}
{"task_id": 315, "Adversarial Code": "class Solution {\n    public static String mostOccurrences(String[] tests) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String test : tests) {\n            for (String s : test.split(\" \")) {\n                map.put(s, map.getOrDefault(s, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String mostOccurrences(String[] tests) {\n        Map<String, Integer> map = new HashMap<>();\n        for (String test : tests) {\n            for (String s : test.split(\" \")) {\n                map.put(s, map.getOrDefault(s, 0) + 1);\n            }\n        }\n        return Collections.max(map.entrySet(), Map.Entry.comparingByValue()).getKey();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String mostOccurrences(String[] tests) {\n\n        /*\n        progame language:java\n        description:Write a function to get the word with most number of occurrences in the given strings list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> map = new HashMap<>();\n        for (String test : tests) {\n            for (String s : test.split(\" \")) {\n                map.put(s, map.getOrDefault(s, 0) + 1);\n                //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 480, "Adversarial Code": "class Solution {\n    public static double sum_gp(int a, int n, long r) {\n        double total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double sum_gp(int a, int n, long r) {\n        double total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double sum_gp(int a, int n, long r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of geometric progression series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n        //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 323, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the triangle is valid or not if sides are given."}
{"task_id": 77, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> freqCount(long[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> freqCount(long[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n        }\n        return freqCount;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqCount(long[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to get the frequency of the elements in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 189, "Adversarial Code": "class Solution {\n    public List<Integer> func_0(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> func_0(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max_val) {\n                max_result.add(i);\n            }\n        }\n        return max_result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> func_0(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 128, "Adversarial Code": "function circle_circumference(r) {\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n", "Adversarial truth": "function circle_circumference(r) {\n    let perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function circle_circumference(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 354, "Adversarial Code": "class Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / (10);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n = n / (10);\n            count = 1 + count;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Digit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of digits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (n != 0) {\n            n = n / (10);\n            //begin to write code\n", "prompt": "Write a java function to count the number of digits of a given number."}
{"task_id": 90, "Adversarial Code": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        {\n            int i = 0;\n            for(;(i < n);){\n            {\n                int j = 0;\n                for(;(j < n - i - 1);){\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        {\n            int i = 0;\n            for(;(i < n);){\n            {\n                int j = 0;\n                for(;(j < n - i - 1);){\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n                            j++;\n                }\n            }\n                    i++;\n            }\n        }\n        return arr[k - 1];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the kth element in the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        {\n            int i = 0;\n            for(;(i < n);){\n            {\n                int j = 0;\n                for(;(j < n - i - 1);){\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    //begin to write code\n", "prompt": "Write a function to find the kth element in the given array."}
{"task_id": 61, "Adversarial Code": "function\n dif_Square(n) {\n    if (n % 4 !== 2) {\n    //begin to write code\n", "Adversarial truth": "function\n dif_Square(n) {\n    if (n % 4 !== 2) {\n\n\n        return true;\n    }\n\n\n    return false;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n dif_Square(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 4 !== 2) {\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the given number can be represented as difference of two squares or not."}
{"task_id": 415, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    const auto var_0 = 2;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    return x % var_0  != var_1 ; \n    });\n    return odd_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    const auto var_0 = 2;\n//begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 411, "Adversarial Code": "def find_Average_Of_Cube(n):\n    var_4 = 0\n    var_0 = var_4 \n    sum = var_0 \n    var_5 = 1\n    var_1 = var_5 \n    var_6 = 1\n    var_2 = var_6 \n    #begin to write code\n", "Adversarial truth": "def find_Average_Of_Cube(n):  \n    var_4 = 0\n    var_0 = var_4 \n    sum = var_0 \n    var_5 = 1\n    var_1 = var_5 \n    var_6 = 1\n    var_2 = var_6 \n    for i in range(var_1 , n + var_2 ): \n        sum += i * i * i  \n        lambda: print('This function is used to remove a item of a list')\n#This is a comment line.\n    var_7 = 6\n    var_3 = var_7 \n    return round(sum / n, var_3 ) ", "lang": "python", "code_str_generate": "def find_Average_Of_Cube(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_4 = 0\n    var_0 = var_4 \n    sum = var_0 \n    var_5 = 1\n    var_1 = var_5 \n    var_6 = 1\n    var_2 = var_6 \n    #begin to write code\n", "prompt": "Write a python function to find the average of cubes of first n natural numbers."}
{"task_id": 101, "Adversarial Code": "#include<iostream>\n#include <cassert>\nlong perimeter(int diameter, int height) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nlong perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nlong perimeter(int diameter, int height) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the perimeter of a cylinder."}
{"task_id": 478, "Adversarial Code": "def frequency_Of_Largest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Largest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "lang": "python", "code_str_generate": "def frequency_Of_Largest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] >mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the largest value in a given array."}
{"task_id": 320, "Adversarial Code": "def count_unset_bits(n):\n    count = 0\n    x = 1\n    while(x < n + 1): \n    #begin to write code\n", "Adversarial truth": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count  ", "lang": "python", "code_str_generate": "def count_unset_bits(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    x = 1\n    while(x < n + 1): \n    #begin to write code\n", "prompt": "Write a python function to count unset bits of a given number."}
{"task_id": 184, "Adversarial Code": "def first(arr,x,n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "Adversarial truth": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "lang": "python", "code_str_generate": "def first(arr,x,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "prompt": "Write a python function to find the first position of an element in a sorted array."}
{"task_id": 251, "Adversarial Code": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, long L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, long L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        return Arrays.asList(firstPart, secondPart);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, long L) {\n\n        /*\n        progame language:java\n        description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        //begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 219, "Adversarial Code": "const stream = require('stream');\nconst readline = require('readline');\nconst net = require('net');\n//begin to write code\n", "Adversarial truth": "const stream = require('stream');\nconst readline = require('readline');\nconst net = require('net');\n\nfunction replace_blank(str1, char) {\n    let str2 = str1.replace(/ /g, char);\n    return str2;\n}\n\n", "lang": "javascript", "code_str_generate": "const stream = require('stream');\nconst readline = require('readline');\nconst net = require('net');\n//begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 496, "Adversarial Code": "import java.sql.*;\nclass Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        //begin to write code\n", "Adversarial truth": "import java.sql.*;\nclass Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        return list1;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.sql.*;\nclass Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n\n        /*\n        progame language:java\n        description:Write a function to remove specific words from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.removeAll(removewords);\n        //begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 181, "Adversarial Code": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "Adversarial truth": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function check_String(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n", "prompt": "Write a javascript function to check whether a string has atleast one letter and one number."}
{"task_id": 325, "Adversarial Code": "function check_monthnum(monthname1) {\n  if (monthname1 === \"February\") {\n    return 1;\n    //begin to write code\n", "Adversarial truth": "function check_monthnum(monthname1) {\n  if (monthname1 === \"February\") {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_monthnum(monthname1) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check whether the given month name contains 28 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (monthname1 === \"February\") {\n    return 1;\n    //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 213, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += 1 & n;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += 1 & n;\n        n >>= 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (n) {\n        count += 1 & n;\n//begin to write code\n", "prompt": "Write a cpp function to count set bits of a given number."}
{"task_id": 271, "Adversarial Code": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int r = 0; r < nums1.size(); r++) {\n            result.add(nums1.get(r) - nums2.get(r));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int r = 0; r < nums1.size(); r++) {\n            result.add(nums1.get(r) - nums2.get(r));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to substaract two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int r = 0; r < nums1.size(); r++) {\n            result.add(nums1.get(r) - nums2.get(r));\n            //begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 181, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static boolean checkString(String str) {\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static boolean checkString(String str) {\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            if (Character.isDigit(c)) {\n                flagN = true;\n            }\n        }\n        return flagL && flagN;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static boolean checkString(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether a string has atleast one letter and one number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            //begin to write code\n", "prompt": "Write a java function to check whether a string has atleast one letter and one number."}
{"task_id": 174, "Adversarial Code": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    //begin to write code\n", "Adversarial truth": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    return focus;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_focus(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    //begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 29, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n            result[num]++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 30, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 203, "Adversarial Code": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = (180 / Math.PI) * radian;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = (180 / Math.PI) * radian;\n        return degree;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double degreeRadian(double radian) {\n\n        /*\n        progame language:java\n        description:Write a function to convert radians to degrees.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double degree = (180 / Math.PI) * radian;\n        //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 281, "Adversarial Code": "class Solution {\n    public static int find(int n, long m) {\n        int q = n / m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find(int n, long m) {\n        int q = n / m;\n        return q;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find(int n, long m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find quotient of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int q = n / m;\n        //begin to write code\n", "prompt": "Write a java function to find quotient of two numbers."}
{"task_id": 246, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n//begin to write code\n", "prompt": "Write a function to swap two numbers."}
{"task_id": 60, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd\\\n::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd\\\n::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    \n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n            if (nums[i] > nums[i + gaps]) {\n                std::swap(nums[i], nums[i + gaps]);\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd\\\n::vector<int> comb_sort(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n//begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 45, "Adversarial Code": "def rev(num):\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        temp_var_4 = 9.9\n        #begin to write code\n", "Adversarial truth": "def rev(num):    \n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        temp_var_4 = 9.9\n        if temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1\n        num = num // 10  \n    return rev_num  \ndef check(n):    \n    return (2 * rev(n) == n + 1)  ", "lang": "python", "code_str_generate": "def rev(num):\n\n    '''\n    progame language:python\n    description:Write a python function to check if a given number is one less than twice its reverse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    rev_num = 0\n    while (num > 0):  \n        rev_num = (rev_num * 10 + num % 10) \n        temp_var_4 = 9.9\n        #begin to write code\n", "prompt": "Write a python function to check if a given number is one less than twice its reverse."}
{"task_id": 140, "Adversarial Code": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n", "Adversarial truth": "def gcd(p,q):\n    while q != 0:\n        p, q = q,p%q\n    return p\ndef is_coprime(x,y):\n    return gcd(x,y) == 1", "lang": "python", "code_str_generate": "def gcd(p,q):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given number is co-prime or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while q != 0:\n        p, q = q,p%q\n        #begin to write code\n", "prompt": "Write a python function to check whether the given number is co-prime or not."}
{"task_id": 384, "Adversarial Code": "def char(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "Adversarial truth": "def char(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "lang": "python", "code_str_generate": "def char(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "prompt": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": 242, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    \n    {\n        sregex_iterator i = words_begin;\n        for (; i != words_end; ++i) {\n            result.push_back((*i).str());\n        }\n    }\n    \n    return result;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    {\n//begin to write code\n", "prompt": "Write a cpp function to count integers from a given list."}
{"task_id": 22, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (0 != N) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (0 != N) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Number += c * rem;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int B_Number = 0;\n    int cnt = 0;\n    while (0 != N) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "prompt": "Write a cpp function to convert a decimal number to binary number."}
{"task_id": 380, "Adversarial Code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     temp_var_5 = 9.9\n     #begin to write code\n", "Adversarial truth": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     temp_var_5 = 9.9\n#This is a comment line.\n     while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n     return result", "lang": "python", "code_str_generate": "def convert_list_dictionary(l1, l2, l3):\n\n     '''\n     progame language:python\n     description:Write a function to convert more than one list to nested dictionary.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     temp_var_5 = 9.9\n     #begin to write code\n", "prompt": "Write a function to convert more than one list to nested dictionary."}
{"task_id": 51, "Adversarial Code": "//This is a comment line.\nfunction smallest_num(xs) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction smallest_num(xs) {\nlet temp_var_2 = 9.9;if (temp_var_2 < 9.12) {temp_var_2 = temp_var_2 + 1;}\n  return Math.min(...xs);\n}\n\n", "lang": "javascript", "code_str_generate": "//This is a comment line.\nfunction smallest_num(xs) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find smallest number in a list."}
{"task_id": 30, "Adversarial Code": "class Solution {\n    public static List<Integer> filgerEvenMumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> filgerEvenMumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n            }\n        }\n        return evenNums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Integer> filgerEvenMumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n                //begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 115, "Adversarial Code": "class Solution {\n    public static int min(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int min(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int min(int a, int b) {\n        int sum = 0;\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of common divisors of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n", "prompt": "Write a java function to find the sum of common divisors of two given numbers."}
{"task_id": 259, "Adversarial Code": "import json\ndef sum_even_and_even_index(arr,n):\n    i = 0\n#This is a comment line.\n    sum = 0\n    #begin to write code\n", "Adversarial truth": "import json\ndef sum_even_and_even_index(arr,n):  \n    i = 0\n#This is a comment line.\n    sum = 0\n    for i in range(0,n,2): \n        if (arr[i] % 2 == 0) : \n            sum += arr[i]  \n    return sum", "lang": "python", "code_str_generate": "import json\ndef sum_even_and_even_index(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0\n#This is a comment line.\n    sum = 0\n    #begin to write code\n", "prompt": "Write a python function to find the sum of even numbers at even positions."}
{"task_id": 186, "Adversarial Code": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, long[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i = i + 1) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, long[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i = i + 1) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, long[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the exponentiation of the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i = i + 1) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 216, "Adversarial Code": "def min_of_three(a,b,c):\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n", "Adversarial truth": "def min_of_three(a,b,c): \n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n        smallest = b \n      else: \n        smallest = c \n      return smallest ", "lang": "python", "code_str_generate": "def min_of_three(a,b,c):\n\n      '''\n      progame language:python\n      description:Write a function to find minimum of three numbers.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      if (a <= b) and (a <= c): \n        smallest = a \n      elif (b <= a) and (b <= c): \n      #begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 281, "Adversarial Code": "class Solution {\n    public static int solve(int n, int m) {\n        int q = n / m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int n, int m) {\n        int q = n / m;\n        return q;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int solve(int n, int m) {\n        int q = n / m;\n        //begin to write code\n", "prompt": "Write a java function to find quotient of two numbers."}
{"task_id": 58, "Adversarial Code": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t#begin to write code\n", "Adversarial truth": "def is_sublist(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn = n + (1)\t\t\t\t\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "lang": "python", "code_str_generate": "def is_sublist(l, s):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to check whether a list contains the given sublist or not.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t#begin to write code\n", "prompt": "Write a function to check whether a list contains the given sublist or not."}
{"task_id": 283, "Adversarial Code": "function maxVal(listval) {\n    const filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "Adversarial truth": "function maxVal(listval) {\n    const filtered = listval.filter(item => typeof item === 'number');\n    return Math.max(...filtered);\n}\n\n", "lang": "javascript", "code_str_generate": "function maxVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 340, "Adversarial Code": "class Solution {\n    public int add(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int add(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (count_map.get(arr[i]) == k) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int add(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "prompt": "Write a java function to find the first element occurring k times in a given array."}
{"task_id": 408, "Adversarial Code": "def round_and_sum(list1):\n  lenght=len(list1)\n  #begin to write code\n", "Adversarial truth": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "lang": "python", "code_str_generate": "def round_and_sum(list1):\n\n  '''\n  progame language:python\n  description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lenght=len(list1)\n  #begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 171, "Adversarial Code": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n            } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n                specialCharacters.add(c);\n            }\n        }\n\n        List<List<Character>> result = new ArrayList<>();\n        result.add(uppercaseCharacters);\n        result.add(lowercaseCharacters);\n        result.add(numericalCharacters);\n        result.add(specialCharacters);\n\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 176, "Adversarial Code": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n        } else {\n            return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest common subsequence for the given two sequences.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n            //begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 60, "Adversarial Code": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n", "Adversarial truth": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n            if (nums[i] > nums[i + gaps]) {\n                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];\n                swapped = true;\n            }\n            i = 1 + i;\n        }\n    }\n    return nums;\n}\n\n", "lang": "javascript", "code_str_generate": "function combSort(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 38, "Adversarial Code": "def specified_element(nums, N):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n    result\\\n = [i[N] for i in nums]\n    return result\n    ", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list."}
{"task_id": 40, "Adversarial Code": "class Solution {\n    public boolean xsvckVjfilatviao(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean xsvckVjfilatviao(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean xsvckVjfilatviao(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 302, "Adversarial Code": "function pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n", "Adversarial truth": "function pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function pos_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to print positive numbers in a list."}
{"task_id": 408, "Adversarial Code": "//function definition\nfunction roundAndSum(list1) {\n    const length = list1.length;\n    //begin to write code\n", "Adversarial truth": "//function definition\nfunction roundAndSum(list1) {\n    const length = list1.length;\n    const roundedSum = list1.map(Math.round).reduce((a, b) => a + b, 0) * length;\n    return roundedSum;\n//This is a comment line.\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction roundAndSum(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const length = list1.length;\n    //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 281, "Adversarial Code": "def find(n,m):\n    q = n//m \n    #begin to write code\n", "Adversarial truth": "def find(n,m):  \n    q = n//m \n    return (q)", "lang": "python", "code_str_generate": "def find(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    q = n//m \n    #begin to write code\n", "prompt": "Write a python function to find quotient of two numbers."}
{"task_id": 14, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n        }\n        return prod;\n    }\n}", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static int find_Product(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the product of non-repeated elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "prompt": "Write a java function to find the product of non-repeated elements in a given array."}
{"task_id": 93, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector\\\n<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector\\\n<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return input_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector\\\n<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for(auto &sublist : input_list) {\n//begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 491, "Adversarial Code": "def func_0(self,k):\n  s = self%k\n  #begin to write code\n", "Adversarial truth": "def func_0(self,k):\n  s = self%k\n  return (s)", "lang": "python", "code_str_generate": "def func_0(self,k):\n\n  '''\n  progame language:python\n  description:Write a python function to find remainder of two numbers.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s = self%k\n  #begin to write code\n", "prompt": "Write a python function to find remainder of two numbers."}
{"task_id": 252, "Adversarial Code": "def func_0(d1,d2):\n d = d1.copy()\n #begin to write code\n", "Adversarial truth": "def func_0(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d", "lang": "python", "code_str_generate": "def func_0(d1,d2):\n\n '''\n progame language:python\n description:Write a function to merge two dictionaries.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n d = d1.copy()\n #begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 466, "Adversarial Code": "#include <thread>\n#include <atomic>\n#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\n//This is a comment line.\nstd::string is_lower(const std::string& str) {\n//This is a comment line.\n    std::string lower_str = str;\n//This is a comment line.\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n//begin to write code\n", "Adversarial truth": "#include <thread>\n#include <atomic>\n\n#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\n//This is a comment line.\n\nstd::string is_lower(const std::string& str) {\n//This is a comment line.\n    std::string lower_str = str;\n//This is a comment line.\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n//This is a comment line.\n//This is a comment line.\n    return lower_str;\n}\n\n//This is a comment line.\n\n", "lang": "cpp", "code_str_generate": "#include <thread>\n#include <atomic>\n#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\n//This is a comment line.\nstd::string is_lower(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n    std::string lower_str = str;\n//This is a comment line.\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n//begin to write code\n", "prompt": "Write a cpp function to convert the given string to lower case."}
{"task_id": 468, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint first_Digit(int wrtit) {\n    while (wrtit >= 10) {\n        wrtit = wrtit / 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint first_Digit(int wrtit) {\n    while (wrtit >= 10) {\n        wrtit = wrtit / 10;\n    }\n    return wrtit;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint first_Digit(int wrtit) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (wrtit >= 10) {\n        wrtit = wrtit / 10;\n//begin to write code\n", "prompt": "Write a cpp function to find the first digit of a given number."}
{"task_id": 188, "Adversarial Code": "function highest_Power_of_2(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        //begin to write code\n", "Adversarial truth": "function highest_Power_of_2(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        if ((i & (i - var_2 )) === var_3 ) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function highest_Power_of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        //begin to write code\n", "prompt": "Write a javascript function to find highest power of 2 less than or equal to given number."}
{"task_id": 356, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\n\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n}\n\nbool is_grev_balancvw(Node* root) {\n    if (root == nullptr) {\n        return true;\n    }\n\n    int lh = get_height(root->left);\n    int rs = get_height(root->right);\n\n    if (abs(lh - rs) <= 1 && is_grev_balancvw(root->left) && is_grev_balancvw(root->right)) {\n        return true;\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n//begin to write code\n", "prompt": "Write a function to check if a binary tree is balanced or not."}
{"task_id": 60, "Adversarial Code": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n", "Adversarial truth": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n            if (nums[i] > nums[i + gaps]) {\n                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function combSort(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 94, "Adversarial Code": "function clfnt(arr) {   \n//begin to write code\n", "Adversarial truth": "function clfnt(arr) {   \n    return arr.reduce((i, j) => i + j, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function clfnt(arr) {   \n//begin to write code\n", "prompt": "Write a javascript function to count true booleans in the given list."}
{"task_id": 6, "Adversarial Code": "function square_perimeter(a) {\nlet temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n//begin to write code\n", "Adversarial truth": "function square_perimeter(a) {\nlet temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n    let perimeter = 4 * a;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function square_perimeter(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nlet temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 230, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n//_\ufffd\ufffd_\ufffd__\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//_\ufffd\ufffd_\ufffd__\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n", "prompt": "Write a function to generate a 3d array having each element as '*'."}
{"task_id": 283, "Adversarial Code": "import sys\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "Adversarial truth": "import sys\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n#This is a comment line.\n     return(max_val)", "lang": "python", "code_str_generate": "import sys\ndef max_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the maximum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     max_val = max(i for i in listval if isinstance(i, int)) \n     #begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 261, "Adversarial Code": "def rear_extract(test_list):\n#This is a comment line.\n  res = [lis[-1] for lis in test_list]\n  #begin to write code\n", "Adversarial truth": "def rear_extract(test_list):\n#This is a comment line.\n  res = [lis[-1] for lis in test_list]\n#This is a comment line.\n  return (res) \n  lambda: print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "def rear_extract(test_list):\n\n    '''\n    progame language:python\n    description:Write a function to perfom the rear element extraction from list of tuples records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n  res = [lis[-1] for lis in test_list]\n  #begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 357, "Adversarial Code": "def repeat(self, repeat):\n  result = ((self, ) * repeat)\n  #begin to write code\n", "Adversarial truth": "def repeat(self, repeat):\n  result = ((self, ) * repeat)\n  return (result) ", "lang": "python", "code_str_generate": "def repeat(self, repeat):\n\n  '''\n  progame language:python\n  description:Write a function to repeat the given tuple n times.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = ((self, ) * repeat)\n  #begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 162, "Adversarial Code": "import re\ndef remove_splchar(text):\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "Adversarial truth": "\n\nimport re\ndef remove_splchar(text): \n pattern = re.compile('[\\W_]+')\n return (pattern.sub('', text))", "lang": "python", "code_str_generate": "import re\ndef remove_splchar(text):\n\n '''\n progame language:python\n description:Write a function to remove everything except alphanumeric characters from a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n pattern = re.compile('[\\W_]+')\n #begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 402, "Adversarial Code": "function\n extract_nth_element(list1, n) {\n //begin to write code\n", "Adversarial truth": "function\n extract_nth_element(list1, n) {\n    const result = list1.map(x => x[n]);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n extract_nth_element(list1, n) {\n\n /*\n progame language:javascript\n description:Write a function to extract the nth element from a given list of tuples.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 108, "Adversarial Code": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "Adversarial truth": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "lang": "python", "code_str_generate": "def search(arr,n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "prompt": "Write a python function to find the element that appears only once in a sorted array."}
{"task_id": 255, "Adversarial Code": "def oatvizlsurfacv_xuye(l):\n  LSA = 4 * (l * l)\n  #begin to write code\n", "Adversarial truth": "def oatvizlsurfacv_xuye(l):\n  LSA = 4 * (l * l)\n  return LSA", "lang": "python", "code_str_generate": "def oatvizlsurfacv_xuye(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 4 * (l * l)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 454, "Adversarial Code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "Adversarial truth": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "lang": "python", "code_str_generate": "def drop_empty(dict1):\n\n  '''\n  progame language:python\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 35, "Adversarial Code": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n    #begin to write code\n", "Adversarial truth": "def test_distinct(data):\n  if len(data) == len(set(data)):\n    return True\n  else:\n    return False;", "lang": "python", "code_str_generate": "def test_distinct(data):\n\n  '''\n  progame language:python\n  description:Write a python function to determine whether all the numbers are different from each other are not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if len(data) == len(set(data)):\n    return True\n    #begin to write code\n", "prompt": "Write a python function to determine whether all the numbers are different from each other are not."}
{"task_id": 176, "Adversarial Code": "function longest_common_subsequence(A, B, C, D) {\n    if (C == 0 || D == 0) {\n        return 0;\n    } else if (A[C - 1] === B[D - 1]) {\n    //begin to write code\n", "Adversarial truth": "function longest_common_subsequence(A, B, C, D) {\n    if (C == 0 || D == 0) {\n        return 0;\n    } else if (A[C - 1] === B[D - 1]) {\n        return 1 + longest_common_subsequence(A, B, C - 1, D - 1);\n    } else {\n        return Math.max(longest_common_subsequence(A, B, C, D - 1), longest_common_subsequence(A, B, C - 1, D));\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function longest_common_subsequence(A, B, C, D) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (C == 0 || D == 0) {\n        return 0;\n    } else if (A[C - 1] === B[D - 1]) {\n    //begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 259, "Adversarial Code": "def func_0(arr,n):\n    r = 0\n    sum = 0\n    for r in range(0,n,2): \n    #begin to write code\n", "Adversarial truth": "def func_0(arr,n):  \n    r = 0\n    sum = 0\n    for r in range(0,n,2): \n        if (arr[r] % 2 == 0) : \n            sum += arr[r]  \n    return sum", "lang": "python", "code_str_generate": "def func_0(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    r = 0\n    sum = 0\n    for r in range(0,n,2): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of even numbers at even positions."}
{"task_id": 343, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n    int tn = a + (n - 1) * d;\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of arithemetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 334, "Adversarial Code": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (long i = 1; i < nums.size(); i = i + 1) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (long i = 1; i < nums.size(); i = i + 1) {\n            result.add(nums.get(i) - nums.get(i - 1));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the difference between two consecutive numbers in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (long i = 1; i < nums.size(); i = i + 1) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 315, "Adversarial Code": "from collections import defaultdict \ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n", "Adversarial truth": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ", "lang": "python", "code_str_generate": "from collections import defaultdict \n\n    '''\n    progame language:python\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 165, "Adversarial Code": "function\n perimeter_triangle(a, b, c) {\n //begin to write code\n", "Adversarial truth": "function\n perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n perimeter_triangle(a, b, c) {\n\n /*\n progame language:javascript\n description:Write a function to find the perimeter of a triangle.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 469, "Adversarial Code": "#include <iostream>\n#include <cassert>\nchar\\\n get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nchar\\\n get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n    for (char c : str1) {\n        if (max < ctr[c]) {\n            max = ctr[c];\n            ch = c;\n        }\n    }\n    return ch;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nchar\\\n get_max_occuring_char(const std::string &str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum occurring character in a given string."}
{"task_id": 285, "Adversarial Code": "class Solution {\n    public static int getInvXlung(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int getInvXlung(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                }\n            }\n        }\n        return inv_count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int getInvXlung(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n", "prompt": "Write a java function to count inversions in an array."}
{"task_id": 82, "Adversarial Code": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    }\n else if (a === 0) {\n        return 0;\n        //begin to write code\n", "Adversarial truth": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    }\n else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n        return a;\n    } else {\n        return a\n * power(a, b - 1);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function power(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (b === 0) {\n        return 1;\n    }\n else if (a === 0) {\n        return 0;\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 343, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n    int tn = a + (n - 1) * d;\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of arithemetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 477, "Adversarial Code": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "Adversarial truth": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  return area;\n}", "lang": "javascript", "code_str_generate": "function area_pentagon(a) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 334, "Adversarial Code": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "Adversarial truth": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def diff_consecutivenums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 135, "Adversarial Code": "class Solution {\n    public static int asciiValueString(String str1) {\n        final int var_0 = 0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValueString(String str1) {\n        final int var_0 = 0;\n        return (int) str1.charAt(var_0 );\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int asciiValueString(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        //begin to write code\n", "prompt": "Write a function to find the ascii value of total characters in a string."}
{"task_id": 18, "Adversarial Code": "def compare(arr,arr_size):\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "Adversarial truth": "def compare(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "lang": "python", "code_str_generate": "def compare(arr,arr_size):\n\n    '''\n    progame language:python\n    description:Write a python function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "prompt": "Write a python function to find the element occurring odd number of times."}
{"task_id": 134, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (long i = 1; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (long i = 1; i < n; i++) {\n        minEle = std::min(minEle, arr[i]);\n        maxEle = std::max(maxEle, arr[i]);\n    }\n    return (maxEle - minEle);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (long i = 1; i < n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum difference between any two elements in a given array."}
{"task_id": 379, "Adversarial Code": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n #begin to write code\n", "Adversarial truth": "def add_string(list,string):\n add_string=[string.format(i) for i in  list]\n return add_string", "lang": "python", "code_str_generate": "def add_string(list,string):\n\n '''\n progame language:python\n description:Write a function to insert a given string at the beginning of all items in a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n add_string=[string.format(i) for i in  list]\n #begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 41, "Adversarial Code": "class Solution {\n    public static int area(int b, int h) {\n        int area = b * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int area(int b, int h) {\n        int area = b * h;\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int area(int b, int h) {\n        int area = b * h;\n        //begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 242, "Adversarial Code": "function\n countInteger(list1) {\n    let ctr = 0;\n    for (let i of list1) {\n        if\n        //begin to write code\n", "Adversarial truth": "function\n countInteger(list1) {\n\n\n    let ctr = 0;\n    for (let i of list1) {\n        if\n (Number.isInteger(i)) {\n            ctr++;\n        }\n\n\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n countInteger(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i of list1) {\n        if\n        //begin to write code\n", "prompt": "Write a javascript function to count integers from a given list."}
{"task_id": 84, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        if (v.size() < minLength) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        if (v.size() < minLength) {\n            minLength = v.size();\n        }\n    }\n    return minLength;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        if (v.size() < minLength) {\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum length of sublist."}
{"task_id": 229, "Adversarial Code": "def replace_list(list1,list2):\n list1[-1:] = list2\n #begin to write code\n", "Adversarial truth": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n return replace_list\n", "lang": "python", "code_str_generate": "def replace_list(list1,list2):\n\n '''\n progame language:python\n description:Write a function to replace the last element of the list with another list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list1[-1:] = list2\n #begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 439, "Adversarial Code": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    #begin to write code\n", "Adversarial truth": "def extract_string(str, l):\n    result = [e for e in str if len(e) == l] \n    return result", "lang": "python", "code_str_generate": "def extract_string(str, l):\n\n    '''\n    progame language:python\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [e for e in str if len(e) == l] \n    #begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 469, "Adversarial Code": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i = i + 1) {\n        ctr[str1.charCodeAt(i)] = ctr[str1.charCodeAt(i)] + 1;\n    }\n    //begin to write code\n", "Adversarial truth": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i = i + 1) {\n        ctr[str1.charCodeAt(i)] = ctr[str1.charCodeAt(i)] + 1;\n    }\n    for (let i = 0; i < str1.length; i = i + 1) {\n        if (max < ctr[str1.charCodeAt(i)]) {\n            max = ctr[str1.charCodeAt(i)];\n            ch = str1[i];\n        }\n    }\n    return ch;\n}\n\n", "lang": "javascript", "code_str_generate": "function get_max_occuring_char(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i = i + 1) {\n        ctr[str1.charCodeAt(i)] = ctr[str1.charCodeAt(i)] + 1;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find the maximum occurring character in a given string."}
{"task_id": 165, "Adversarial Code": "class Solution {\n    public static int perimvgeiTriangov(int a, int b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int perimvgeiTriangov(int a, int b, int c) {\n        int perimeter = a + b + c;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int perimvgeiTriangov(int a, int b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 339, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n    return n - maxOcc;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n", "prompt": "Write a cpp function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 172, "Adversarial Code": "class Solution {\n    public static int countPairs(int pairs[], int m, int p) {\n        int result = 0;\n        for (int c = 0; c < m; c++) {\n            for (int d = c + 1; d < m; d++) {\n                if (pairs[c] - pairs[d] == p || pairs[d] - pairs[c] == p) {\n                    result += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countPairs(int pairs[], int m, int p) {\n        int result = 0;\n        for (int c = 0; c < m; c++) {\n            for (int d = c + 1; d < m; d++) {\n                if (pairs[c] - pairs[d] == p || pairs[d] - pairs[c] == p) {\n                    result += 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countPairs(int pairs[], int m, int p) {\n\n        /*\n        progame language:java\n        description:Write a function to count all the distinct pairs having a difference of k in any array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        for (int c = 0; c < m; c++) {\n            for (int d = c + 1; d < m; d++) {\n                if (pairs[c] - pairs[d] == p || pairs[d] - pairs[c] == p) {\n                    result += 1;\n                    //begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 86, "Adversarial Code": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n", "Adversarial truth": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n        } else {\n            dicData[num] = 1;\n        }\n    }\n    return dicData;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequencyLists(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 435, "Adversarial Code": "class Solution {\n    public static int cofmgOcxfrivnxv(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int cofmgOcxfrivnxv(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int cofmgOcxfrivnxv(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n                //begin to write code\n", "prompt": "Write a java function to count the occurence of all elements of list in a tuple."}
{"task_id": 428, "Adversarial Code": "function multiple_to_single(L) {\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n", "Adversarial truth": "function multiple_to_single(L) {\n  const x = parseInt(L.map(String).join(''));\n  return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiple_to_single(L) {\n\n  /*\n  progame language:javascript\n  description:Write a function to convert a list of multiple integers into a single integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 131, "Adversarial Code": "def count_samepair(self,list2,pair):\n    count = sum(c == d == e for c, d, e in zip(self,list2,pair))\n    #begin to write code\n", "Adversarial truth": "def count_samepair(self,list2,pair):\n    count = sum(c == d == e for c, d, e in zip(self,list2,pair))\n    return count", "lang": "python", "code_str_generate": "def count_samepair(self,list2,pair):\n\n    '''\n    progame language:python\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = sum(c == d == e for c, d, e in zip(self,list2,pair))\n    #begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 284, "Adversarial Code": "import pickle\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n        #begin to write code\n", "Adversarial truth": "import pickle\ndef sum_div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)\n    temp_var_4 = 9.9\n    while temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1", "lang": "python", "code_str_generate": "import pickle\ndef sum_div(number):\n\n    '''\n    progame language:python\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n        #begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 399, "Adversarial Code": "#include <string>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "Adversarial truth": "#include <string>\n\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n            min_val = value;\n        }\n    }\n    return min_val;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <string>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 366, "Adversarial Code": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n//This is a comment line.\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n//This is a comment line.\n//This is a comment line.\n    let result = s.split('').filter(char => char !== c).join('');\n    return result;\n    let temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_Char(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let counts = s.split(c).length - 1;\n//This is a comment line.\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a javascript function to remove all occurrences of a character in a given string."}
{"task_id": 155, "Adversarial Code": "def find_even_Pair(A,N):\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(1 + i,N): \n        #begin to write code\n", "Adversarial truth": "def find_even_Pair(A,N): \n    evenPair = 0\n    for i in range(0,N): \n        for j in range(1 + i,N): \n            if (0 == (A[i] ^ A[j]) % 2): \n                evenPair+=1\n    return evenPair; ", "lang": "python", "code_str_generate": "def find_even_Pair(A,N):\n\n    '''\n    progame language:python\n    description:Write a python function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    evenPair = 0\n    for i in range(0,N): \n        for j in range(1 + i,N): \n        #begin to write code\n", "prompt": "Write a python function to count the pairs with xor as an even number."}
{"task_id": 465, "Adversarial Code": "def average(self):\n      sum= max(self)+min(self)\n      #begin to write code\n", "Adversarial truth": "def average(self):\n      sum= max(self)+min(self)\n      return sum", "lang": "python", "code_str_generate": "def average(self):\n\n      '''\n      progame language:python\n      description:Write a python function to find the sum of the largest and smallest value in a given array.\n      you must follow:\n      1. Provide the complete code without any textual explanations and do not generate test scripts.\n      2. Please strictly follow the specified format provided below for the code.\n      3. Do not change the function names.\n      4. The original code content must be fully included in the generated complete code, including all package import sections.\n      5. For C++ language, do not generate the main function; I have my own main function available.\n      6. Do not generate test cases.\n      '''\n\n      sum= max(self)+min(self)\n      #begin to write code\n", "prompt": "Write a python function to find the sum of the largest and smallest value in a given array."}
{"task_id": 322, "Adversarial Code": "const querystring = require('querystring');\nfunction Sort(sub_li) {\n//begin to write code\n", "Adversarial truth": "const querystring = require('querystring');\nfunction Sort(sub_li) {\n    sub_li.sort((a, b) => a[1] - b[1]);\n    return sub_li;\n}\n\n", "lang": "javascript", "code_str_generate": "const querystring = require('querystring');\nfunction Sort(sub_li) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to sort a list according to the second element in sublist."}
{"task_id": 230, "Adversarial Code": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                }\n            }\n        }\n        return array_3d;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a 3d array having each element as '*'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                    //begin to write code\n", "prompt": "Write a function to generate a 3d array having each element as '*'."}
{"task_id": 131, "Adversarial Code": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n        /*\n        progame language:java\n        description:Write a function to count the same pair in three given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 426, "Adversarial Code": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (0 == i % 2) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (0 == i % 2) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String remove_odd(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove odd characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (0 == i % 2) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "prompt": "Write a function to remove odd characters in a string."}
{"task_id": 370, "Adversarial Code": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n", "Adversarial truth": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "lang": "python", "code_str_generate": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 402, "Adversarial Code": "class Solution {\n    public\n static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the nth element from a given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n        //begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 34, "Adversarial Code": "def find_gcd(x, y):\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n", "Adversarial truth": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  num2 = l[1]\n  gcd = find_gcd(num1, num2)\n#This is a comment line.\n  for i in range(2, len(l)):\n    gcd = find_gcd(gcd, l[i])\n  return gcd", "lang": "python", "code_str_generate": "def find_gcd(x, y):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the gcd of the given array elements.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef get_gcd(l):\n  num1 = l[0]\n  #begin to write code\n", "prompt": "Write a function to find the gcd of the given array elements."}
{"task_id": 308, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> str(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<string> str(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        words.push_back((*i).str());\n    }\n    return words;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> str(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 174, "Adversarial Code": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n    return focus;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 200, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    {\n        int i = 1;\n        for(;(i <= n);){\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    {\n        int i = 1;\n        for(;(i <= n);){\n        sum += pow(i, 4);\n            i++;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    {\n        int i = 1;\n        for(;(i <= n);){\n//begin to write code\n", "prompt": "Write a cpp function to count numbers whose oth and nth bits are set."}
{"task_id": 117, "Adversarial Code": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n", "Adversarial truth": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n            wordLen.push(x);\n        }\n    }\n    return wordLen;\n}\n\n", "lang": "javascript", "code_str_generate": "function longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 88, "Adversarial Code": "def decimal_to_binary(n):\n    return bin(n).replace(\"0b\",\"\") \n    #begin to write code\n", "Adversarial truth": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \n    temp_var_2 = 9.9\n    print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "def decimal_to_binary(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return bin(n).replace(\"0b\",\"\") \n    #begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 262, "Adversarial Code": "const child_process = require('child_process');\nfunction subtractElements(testTuple1, testTuple2) {\n//begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nfunction subtractElements(testTuple1, testTuple2) {\n    return testTuple1.map((element, index) => element - testTuple2[index]);\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\nfunction subtractElements(testTuple1, testTuple2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 129, "Adversarial Code": "function\n extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for\n (const inner of test_list) {\n    for (const ele of inner) {\n    //begin to write code\n", "Adversarial truth": "function\n extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for\n (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n        temp.add(ele);\n        res.push(ele);\n      }\n    }\n  }\n  return res;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n extract_singly(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to extract elements that occur singly in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const res = [];\n  const temp = new Set();\n  for\n (const inner of test_list) {\n    for (const ele of inner) {\n    //begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 376, "Adversarial Code": "class Solution {\n    public static String even_or_odd(String N) {\n        long l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String even_or_odd(String N) {\n        long l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String even_or_odd(String N) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the hexadecimal number is even or odd.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n", "prompt": "Write a java function to check whether the hexadecimal number is even or odd."}
{"task_id": 101, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n    const auto var_0 = 2;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter(int diameter, int height) {\n    const auto var_0 = 2;\n    return var_0  * (diameter + height);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 2;\n//begin to write code\n", "prompt": "Write a cpp function to find the perimeter of a cylinder."}
{"task_id": 394, "Adversarial Code": "def func_0(tuplex,tuple1):\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n", "Adversarial truth": "def func_0(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False", "lang": "python", "code_str_generate": "def func_0(tuplex,tuple1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether an element exists within a tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 29, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> add(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> add(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> add(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 245, "Adversarial Code": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n", "Adversarial truth": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) ctr++;\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_Primes_nums(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 199, "Adversarial Code": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n", "Adversarial truth": "import re\ndef is_allowed_specific_char(string):\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "lang": "python", "code_str_generate": "import re\ndef is_allowed_specific_char(string):\n\n    '''\n    progame language:python\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\n    #begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 486, "Adversarial Code": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        return SA;\n    }\n}\ndouble temp_var_5 = 9.9;while (temp_var_5 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_5 = temp_var_5 + 1;}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cone."}
{"task_id": 356, "Adversarial Code": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction max(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(max(root.left), max(root.right)) + 1;\n    //begin to write code\n", "Adversarial truth": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nfunction max(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(max(root.left), max(root.right)) + 1;\n}\n\nfunction min(root) {\n    if (root === null) {\n        return true;\n    }\n    let lh = max(root.left);\n    let rh = max(root.right);\n    if (Math.abs(lh - rh) <= 1 && min(root.left) && min(root.right)) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction max(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(max(root.left), max(root.right)) + 1;\n    //begin to write code\n", "prompt": "Write a function to check if a binary tree is balanced or not."}
{"task_id": 481, "Adversarial Code": "class Solution {\n    public boolean contains(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean contains(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n                if (item < itemList[mid]) {\n                    last = mid - 1;\n                } else {\n                    first = mid + 1;\n                }\n            }\n        }\n        return found;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean contains(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 146, "Adversarial Code": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            //begin to write code\n", "Adversarial truth": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        grouped.push([count, current]);\n    }\n    return grouped;\n}\n\n", "lang": "javascript", "code_str_generate": "function encodeList(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to reflect the run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const grouped = [];\n    let current = null;\n    let count = 0;\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            //begin to write code\n", "prompt": "Write a function to reflect the run-length encoding from a list."}
{"task_id": 368, "Adversarial Code": "def hfrfzxvarez_cfboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n", "Adversarial truth": "def hfrfzxvarez_cfboid(l,w,h):\n  SA = 2*(l*w + l * h + w * h)\n  return SA", "lang": "python", "code_str_generate": "def hfrfzxvarez_cfboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cuboid.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  SA = 2*(l*w + l * h + w * h)\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 82, "Adversarial Code": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * power(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int power(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the value of 'a' to the power 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 441, "Adversarial Code": "function func_0(price, value) {\n    if (value > price) {\n        return value - price;\n        //begin to write code\n", "Adversarial truth": "function func_0(price, value) {\n    if (value > price) {\n        return value - price;\n    } else {\n        return null;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(price, value) {\n    if (value > price) {\n        return value - price;\n        //begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 43, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n    }\n    int index = 0;\n    for (int j = 0; j <= max_value; ++j) {\n        for (int a = 0; a < buckets[j]; ++a) {\n            my_list[index] = j;\n            index++;\n        }\n    }\n    return my_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 160, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n    const auto var_0 = 5;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint perimeter_pentagon(int a) {\n    const auto var_0 = 5;\n    int perimeter = var_0  * a;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 5;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 247, "Adversarial Code": "class Solution {\n    public int countOdd(long[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int countOdd(long[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int countOdd(long[] arrayNums) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of odd elements in the given list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 192, "Adversarial Code": "function hamming_Distance(n1, n2) {\n    let x = n2 ^ n1;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "Adversarial truth": "function hamming_Distance(n1, n2) {\n    let x = n2 ^ n1;\n    let setBits = 0;\n    while (x > 0) {\n        setBits += 1 & x;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n", "lang": "javascript", "code_str_generate": "function hamming_Distance(n1, n2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = n2 ^ n1;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the hamming distance between given two integers."}
{"task_id": 68, "Adversarial Code": "def word_len(s):\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n", "Adversarial truth": "def word_len(s): \n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n            return 1  \n        else:\n          return 0", "lang": "python", "code_str_generate": "def word_len(s):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    s = s.split(' ')   \n    for word in s:    \n        if len(word)%2!=0: \n        #begin to write code\n", "prompt": "Write a python function to check whether the length of the word is odd or not."}
{"task_id": 52, "Adversarial Code": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "Adversarial truth": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  let res = Math.max(...temp);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_difference(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 216, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 15, "Adversarial Code": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n      //begin to write code\n", "Adversarial truth": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n        res = false;\n      }\n    }\n  }\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_k_elements(test_list, K) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check if the given tuple list has all k elements.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n      //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 185, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> removeTfples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> removeTfples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> removeTfples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n                //begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 12, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n            }\n            maxi = Math.max(sum, maxi);\n        }\n        return maxi;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nclass Solution {\n    public int maximum_Sum(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum sum of elements of list in a list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n", "prompt": "Write a java function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 15, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<long>>& test_list, long K) {\n    bool res = 1;\n    for (const auto& tup : test_list) {\n        for (long ele : tup) {\n            if (K != ele) {\n                res = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_k_elements(const std::vector<std::vector<long>>& test_list, long K) {\n    bool res = 1;\n    for (const auto& tup : test_list) {\n        for (long ele : tup) {\n            if (K != ele) {\n                res = 0;\n                break;\n            }\n        }\n        if (!res) break;\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<long>>& test_list, long K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = 1;\n    for (const auto& tup : test_list) {\n        for (long ele : tup) {\n            if (K != ele) {\n                res = 0;\n//begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 155, "Adversarial Code": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = 1 + i; j < N; j++) { \n            if (0 === ((A[i] ^ A[j]) % 2)) { \n            //begin to write code\n", "Adversarial truth": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = 1 + i; j < N; j++) { \n            if (0 === ((A[i] ^ A[j]) % 2)) { \n                evenPair++;\n            }\n        }\n    }\n    return evenPair; \n}\n\n", "lang": "javascript", "code_str_generate": "function find_even_Pair(A, N) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = 1 + i; j < N; j++) { \n            if (0 === ((A[i] ^ A[j]) % 2)) { \n            //begin to write code\n", "prompt": "Write a javascript function to count the pairs with xor as an even number."}
{"task_id": 79, "Adversarial Code": "class Solution {\n    public static int max(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int max(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n            }\n        }\n        return max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int max(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n", "prompt": "Write a java function to find the length of the longest word."}
{"task_id": 364, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint round_num(int n, int m) {\n    int a = (n / m) * m;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint round_num(int n, int m) {\n    int a = (n / m) * m;\n    int b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint round_num(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int a = (n / m) * m;\n//begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 252, "Adversarial Code": "def merge_dict(d1,d2):\n d = d1.copy()\n #begin to write code\n", "Adversarial truth": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d", "lang": "python", "code_str_generate": "def merge_dict(d1,d2):\n\n '''\n progame language:python\n description:Write a function to merge two dictionaries.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n d = d1.copy()\n #begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 109, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint sum(const std::vector<std::pair<int, int>>& pairs) {\n    int total = 0;\n    for (const auto& a : pairs) {\n        int val = std::abs(a.first * a.second);\n        if (val > total) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint sum(const std::vector<std::pair<int, int>>& pairs) {\n    int total = 0;\n    for (const auto& a : pairs) {\n        int val = std::abs(a.first * a.second);\n        if (val > total) {\n            total = val;\n        }\n    }\n    return total;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint sum(const std::vector<std::pair<int, int>>& pairs) {\n    int total = 0;\n    for (const auto& a : pairs) {\n        int val = std::abs(a.first * a.second);\n        if (val > total) {\n//begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 1, "Adversarial Code": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 381, "Adversarial Code": "class Solution {\n    public int get_max_sum(int size) {\n        int[] result = new int[size + 1];\n        result[0] = 0;\n        result[1] = 1;\n        int j = 2;\n        while (j < size + 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int get_max_sum(int size) {\n        int[] result = new int[size + 1];\n        result[0] = 0;\n        result[1] = 1;\n        int j = 2;\n        while (j < size + 1) {\n            result[j] = Math.max(j, (result[j / 2] + result[j / 3] + result[j / 4] + result[j / 5]));\n            j = j + 1;\n        }\n        return result[size];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int get_max_sum(int size) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] result = new int[size + 1];\n        result[0] = 0;\n        result[1] = 1;\n        int j = 2;\n        while (j < size + 1) {\n        //begin to write code\n", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 445, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 201, "Adversarial Code": "#include <set>\n#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "#include <set>\n\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <set>\n#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of fourth power of n natural numbers."}
{"task_id": 380, "Adversarial Code": "const zlib = require('zlib');\nfunction convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n    //begin to write code\n", "Adversarial truth": "const zlib = require('zlib');\nfunction convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n        return { [x]: { [l2[index]]: l3[index] } };\n    });\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const zlib = require('zlib');\nfunction convert_list_dictionary(l1, l2, l3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert more than one list to nested dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l1.map((x, index) => {\n    //begin to write code\n", "prompt": "Write a function to convert more than one list to nested dictionary."}
{"task_id": 81, "Adversarial Code": "function isUndulating(n) {\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n    //begin to write code\n", "Adversarial truth": "function isUndulating(n) {\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n        if (n[i - 2] !== n[i]) {\n            return false;\n        }\n\n\n    }\n    return true;\n}\n\n", "lang": "javascript", "code_str_generate": "function isUndulating(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given number is undulating or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n    //begin to write code\n", "prompt": "Write a function to check whether the given number is undulating or not."}
{"task_id": 366, "Adversarial Code": "def\\\n remove_Char(s,c) :  \n    counts\\\n = s.count(c) \n    s = list(s) \n    #begin to write code\n", "Adversarial truth": "\n\ndef\\\n remove_Char(s,c) :  \n\n\n    counts\\\n = s.count(c) \n    s = list(s) \n    while counts :  \n        s.remove(c) \n        counts -= 1 \n\n\n    s = '' . join(s)   \n    return (s) ", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to remove all occurrences of a character in a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n remove_Char(s,c) :  \n    counts\\\n = s.count(c) \n    s = list(s) \n    #begin to write code\n", "prompt": "Write a python function to remove all occurrences of a character in a given string."}
{"task_id": 315, "Adversarial Code": "from collections import defaultdict \ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n", "Adversarial truth": "from collections import defaultdict \n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res)) ", "lang": "python", "code_str_generate": "from collections import defaultdict \n\n    '''\n    progame language:python\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\ndef most_occurrences(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n    #begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 454, "Adversarial Code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "Adversarial truth": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "lang": "python", "code_str_generate": "def drop_empty(dict1):\n\n  '''\n  progame language:python\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 83, "Adversarial Code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n", "Adversarial truth": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "lang": "python", "code_str_generate": "from operator import itemgetter \ndef index_minimum(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = min(test_list, key = itemgetter(1))[0]\n  #begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 54, "Adversarial Code": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n        #begin to write code\n", "Adversarial truth": "def recursive_list_sum(data_list):\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total", "lang": "python", "code_str_generate": "def recursive_list_sum(data_list):\n\n    '''\n    progame language:python\n    description:Write a function of recursion list sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    total = 0\n    for element in data_list:\n        if type(element) == type([]):\n        #begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 84, "Adversarial Code": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n            }\n        }\n        return minLength;\n        double temp_var_4 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum length of sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n", "prompt": "Write a java function to find the minimum length of sublist."}
{"task_id": 215, "Adversarial Code": "function odd_values_string(str) {\n  const var_0 = \"\";\n  const var_1 = 0;\n  let result = var_0 ;\n  for (let i = var_1 ; i < str.length; i++) {\n    const var_2 = 2;\n    //begin to write code\n", "Adversarial truth": "function odd_values_string(str) {\n  const var_0 = \"\";\n  const var_1 = 0;\n  let result = var_0 ;\n  for (let i = var_1 ; i < str.length; i++) {\n    const var_2 = 2;\n    const var_3 = 0;\n    if (i % var_2  === var_3 ) {\n      result += str[i];\n    }\n\n  }\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function odd_values_string(str) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = \"\";\n  const var_1 = 0;\n  let result = var_0 ;\n  for (let i = var_1 ; i < str.length; i++) {\n    const var_2 = 2;\n    //begin to write code\n", "prompt": "Write a javascript function to remove the characters which have odd index values of a given string."}
{"task_id": 40, "Adversarial Code": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is equilateral or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 307, "Adversarial Code": "function max_volume(s) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let maxvalue = var_0 ;\n    for (let i = var_1 ; i < s; i++) {\n        const var_2 = 1;\n        //begin to write code\n", "Adversarial truth": "function max_volume(s) {\n    const var_0 = 0;\n    const var_1 = 1;\n    let maxvalue = var_0 ;\n    for (let i = var_1 ; i < s; i++) {\n        const var_2 = 1;\n        for (let j = var_2 ; j < s; j++) {\n            let k = s - i - j;\n            maxvalue = Math.max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_volume(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 1;\n    let maxvalue = var_0 ;\n    for (let i = var_1 ; i < s; i++) {\n        const var_2 = 1;\n        //begin to write code\n", "prompt": "Write a javascript function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 325, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string month) {\n    if (month == \"February\") {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_monthnum(std::string month) {\n    if (month == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string month) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 28 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (month == \"February\") {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 183, "Adversarial Code": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int ozsg_drgig = temp % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int ozsg_drgig = temp % 10;\n            temp = temp / 10;\n            dec_value += ozsg_drgig * base;\n            base = base * 8;\n        }\n        return dec_value;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int octal_To_Decimal(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert octal number to decimal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int ozsg_drgig = temp % 10;\n            //begin to write code\n", "prompt": "Write a java function to convert octal number to decimal number."}
{"task_id": 367, "Adversarial Code": "class Solution {\n    public static int[] move_first(int[] test_list) {\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        System.arraycopy(test_list, 0, new_list, 1, test_list.length - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] move_first(int[] test_list) {\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        System.arraycopy(test_list, 0, new_list, 1, test_list.length - 1);\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        return new_list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] move_first(int[] test_list) {\n\n        /*\n        progame language:java\n        description:Write a java function to shift last element to first position in the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        System.arraycopy(test_list, 0, new_list, 1, test_list.length - 1);\n        //begin to write code\n", "prompt": "Write a java function to shift last element to first position in the given list."}
{"task_id": 419, "Adversarial Code": "class Solution {\n    public static int solve(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        return directrix;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int solve(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 41, "Adversarial Code": "#include<iostream>\n#include<cassert>\nint parallelogram_area(int b, int h) {\n    int area = b * h;\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n\nint parallelogram_area(int b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\nint parallelogram_area(int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int area = b * h;\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 320, "Adversarial Code": "class Solution {\n    public static int countUnsetBits(int bits) {\n        int i = 0;\n        int j = 1;\n        while (j < bits + 1) {\n            if ((j & bits) == 0) {\n                i += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countUnsetBits(int bits) {\n        int i = 0;\n        int j = 1;\n        while (j < bits + 1) {\n            if ((j & bits) == 0) {\n                i += 1;\n            }\n            j = j << 1;\n        }\n        return i;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countUnsetBits(int bits) {\n\n        /*\n        progame language:java\n        description:Write a java function to count unset bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int i = 0;\n        int j = 1;\n        while (j < bits + 1) {\n            if ((j & bits) == 0) {\n                i += 1;\n                //begin to write code\n", "prompt": "Write a java function to count unset bits of a given number."}
{"task_id": 367, "Adversarial Code": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  //begin to write code\n", "Adversarial truth": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  return test_list;\n}\n\n", "lang": "javascript", "code_str_generate": "function move_first(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to shift last element to first position in the given list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  //begin to write code\n", "prompt": "Write a javascript function to shift last element to first position in the given list."}
{"task_id": 158, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "prompt": "Write a function to calculate the nth pell number."}
{"task_id": 493, "Adversarial Code": "function multiply(var_1) {\n    let var_2 = 0;\n    for (let var_0 = 1; var_0 <= var_1; var_0++) {\n    //begin to write code\n", "Adversarial truth": "function multiply(var_1) {\n    let var_2 = 0;\n    for (let var_0 = 1; var_0 <= var_1; var_0++) {\n        var_2 += var_0 * var_0 * var_0;\n    }\n    return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiply(var_1) {\n    let var_2 = 0;\n    for (let var_0 = 1; var_0 <= var_1; var_0++) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the cube sum of first n natural numbers."}
{"task_id": 319, "Adversarial Code": "import java.lang.*;\nimport java.text.*;\nclass Solution {\n    public static List<String> find_char(String text) {\n        final String var_0 = \"\\\\b\\\\w{3,5}\\\\b\";\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(var_0 ).matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "Adversarial truth": "import java.lang.*;\nimport java.text.*;\nclass Solution {\n    public static List<String> find_char(String text) {\n        final String var_0 = \"\\\\b\\\\w{3,5}\\\\b\";\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(var_0 ).matcher(text);\n        while (m.find()) {\n            matches.add(m.group());\n        }\n        return matches;\n    }\n}\n//This is a comment line.\n", "lang": "java", "code_str_generate": "import java.lang.*;\nimport java.text.*;\nclass Solution {\n    public static List<String> find_char(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all three, four, five characters long words in the given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final String var_0 = \"\\\\b\\\\w{3,5}\\\\b\";\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(var_0 ).matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 223, "Adversarial Code": "def volume_cube(var_0):\n  var_1 = var_0 * var_0 * var_0\n  #begin to write code\n", "Adversarial truth": "def volume_cube(var_0):\n  var_1 = var_0 * var_0 * var_0\n  return var_1", "lang": "python", "code_str_generate": "def volume_cube(var_0):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_1 = var_0 * var_0 * var_0\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 218, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j = j + 1;\n        }\n    }\n    return arr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int j = 0;\n    for (int i = 0; i < n; i = i + 1) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 219, "Adversarial Code": "def replace_blank(str1,char):\n var_0 = ' '\n #begin to write code\n", "Adversarial truth": "def replace_blank(str1,char):\n var_0 = ' '\n str2 = str1.replace(var_0 , char)\n return str2", "lang": "python", "code_str_generate": "def replace_blank(str1,char):\n\n '''\n progame language:python\n description:Write a function to replace blank spaces with any character in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = ' '\n #begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 444, "Adversarial Code": "const dns = require('dns');\nfunction check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "Adversarial truth": "const dns = require('dns');\nfunction check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "const dns = require('dns');\nfunction check_monthnumb_number(monthnum2) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 159, "Adversarial Code": "def sum_range_list(list1, m, n):\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "Adversarial truth": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    sum_range = 0                                                                                                                                                                                                         \n\n\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "lang": "python", "code_str_generate": "def sum_range_list(list1, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum_range = 0                                                                                                                                                                                                         \n    for i in range(m, n+1, 1):                                                                                                                                                                                        \n    #begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 192, "Adversarial Code": "def hamming_Distance(n1,n2) :\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n", "Adversarial truth": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  ", "lang": "python", "code_str_generate": "def hamming_Distance(n1,n2) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n", "prompt": "Write a python function to find the hamming distance between given two integers."}
{"task_id": 140, "Adversarial Code": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n", "Adversarial truth": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n    }\n    return p;\n}\n\nfunction is_coprime(x, y) {\n    return gcd(x, y) === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the given number is co-prime or not."}
{"task_id": 116, "Adversarial Code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif 0 == y:\n        return 0\n        #begin to write code\n", "Adversarial truth": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif 0 == y:\n        return 0\n    elif 1 == y:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "lang": "python", "code_str_generate": "def multiply_int(x, y):\n\n    '''\n    progame language:python\n    description:Write a function to multiply two integers without using the * operator in python.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif 0 == y:\n        return 0\n        #begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in python."}
{"task_id": 318, "Adversarial Code": "function negCount(list) {\n  let n = 0;\n  for (let val of list) {\n    if (val <= 0) {\n    //begin to write code\n", "Adversarial truth": "function negCount(list) {\n  let n = 0;\n  for (let val of list) {\n    if (val <= 0) {\n      n += 1;\n    }\n  }\n  return n;\n}\n\n", "lang": "javascript", "code_str_generate": "function negCount(list) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to count negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let n = 0;\n  for (let val of list) {\n    if (val <= 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to count negative numbers in a list."}
{"task_id": 41, "Adversarial Code": "def parallelogram_area(b,h):\n  area=b*h\n  #begin to write code\n", "Adversarial truth": "def parallelogram_area(b,h):\n  area=b*h\n  return area", "lang": "python", "code_str_generate": "def parallelogram_area(b,h):\n\n  '''\n  progame language:python\n  description:Write a function to caluclate area of a parallelogram.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=b*h\n  #begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 109, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n            result_max = product;\n        }\n    }\n    return result_max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n//begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 370, "Adversarial Code": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result\\\n    #begin to write code\n", "Adversarial truth": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result\\\n = sorted(list_data, key=itemgetter(index_no))\n    return result\n", "lang": "python", "code_str_generate": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 414, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list, T result) {\n    int ctr = 0;\n    for (const auto& X : list) {\n        for (const auto& sub : X) {\n            if (sub == result) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list, T result) {\n    int ctr = 0;\n    for (const auto& X : list) {\n        for (const auto& sub : X) {\n            if (sub == result) {\n                ctr++;\n                break;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list, T result) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ctr = 0;\n    for (const auto& X : list) {\n        for (const auto& sub : X) {\n            if (sub == result) {\n//begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 411, "Adversarial Code": "function func_0(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n    //begin to write code\n", "Adversarial truth": "function func_0(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n        result += i * i * i;\n    }\n    return parseFloat((result / x).toFixed(6));\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(x) {\n    let result = 0;\n    for (let i = 1; i <= x; i++) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the average of cubes of first n natural numbers."}
{"task_id": 116, "Adversarial Code": "class Solution {\n    public int multiplyInt(int a, int b) {\n        if (b < 0) {\n            return -multiplyInt(a, -b);\n        } else if (b == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int multiplyInt(int a, int b) {\n        if (b < 0) {\n            return -multiplyInt(a, -b);\n        } else if (b == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a + multiplyInt(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int multiplyInt(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to multiply two integers without using the * operator in java.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (b < 0) {\n            return -multiplyInt(a, -b);\n        } else if (b == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in java."}
{"task_id": 285, "Adversarial Code": "function func_0(p, limit) {\n    let count = 0;\n    for (let k = 0; k < limit; k++) {\n        for (let v = k + 1; v < limit; v++) {\n            if (p[k] > p[v]) {\n            //begin to write code\n", "Adversarial truth": "function func_0(p, limit) {\n    let count = 0;\n    for (let k = 0; k < limit; k++) {\n        for (let v = k + 1; v < limit; v++) {\n            if (p[k] > p[v]) {\n                count += 1;\n            }\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(p, limit) {\n    let count = 0;\n    for (let k = 0; k < limit; k++) {\n        for (let v = k + 1; v < limit; v++) {\n            if (p[k] > p[v]) {\n            //begin to write code\n", "prompt": "Write a javascript function to count inversions in an array."}
{"task_id": 86, "Adversarial Code": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (!(dicData.hasOwnProperty(num))) {\n            dicData[num] = 1;\n            //begin to write code\n", "Adversarial truth": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (!(dicData.hasOwnProperty(num))) {\n            dicData[num] = 1;\n        }\n        else {\n            dicData[num] += 1;\n        }\n    }\n    return dicData;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequencyLists(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (!(dicData.hasOwnProperty(num))) {\n            dicData[num] = 1;\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 448, "Adversarial Code": "function remove_uppercase(str1) {\n//begin to write code\n", "Adversarial truth": "function remove_uppercase(str1) {\n    return str1.replace(/[A-Z]/g, '');\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function remove_uppercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 82, "Adversarial Code": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\t\t#begin to write code\n", "Adversarial truth": "def power(a,b):\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\telif b==1:\n\t\treturn a\n\telse:\n\t\treturn a*power(a,b-1)", "lang": "python", "code_str_generate": "def power(a,b):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the value of 'a' to the power 'b'.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif b==0:\n\t\treturn 1\n\telif a==0:\n\t\treturn 0\n\t\t#begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 435, "Adversarial Code": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n//This is a comment line.\n            count += 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_Occurrence(tup, lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a javascript function to count the occurence of all elements of list in a tuple."}
{"task_id": 165, "Adversarial Code": "function perimeter_triangle(G, A, B) {\n    let result = G + A + B;\n    //begin to write code\n", "Adversarial truth": "function perimeter_triangle(G, A, B) {\n    let result = G + A + B;\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function perimeter_triangle(G, A, B) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = G + A + B;\n    //begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 477, "Adversarial Code": "import math\ndef area_pentagon(a):\n  var_0 = 5\n  var_1 = 5\n  var_2 = 2\n  var_3 = 5\n  #begin to write code\n", "Adversarial truth": "import math\ndef area_pentagon(a):\n  var_0 = 5\n  var_1 = 5\n  var_2 = 2\n  var_3 = 5\n  var_4 = 2\n  var_5 = 4.0\n  area=(math.sqrt(var_0 *(var_1 +var_2 *math.sqrt(var_3 )))*pow(a,var_4 ))/var_5 \n  return area", "lang": "python", "code_str_generate": "import math\ndef area_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 5\n  var_1 = 5\n  var_2 = 2\n  var_3 = 5\n  #begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 205, "Adversarial Code": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "Adversarial truth": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n            exist = false;\n        }\n    }\n    return exist;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_subset_list(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 180, "Adversarial Code": "import java.text.*;\nclass Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "import java.text.*;\nclass Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "import java.text.*;\nclass Solution {\n    public boolean checkMonthNumber(String monthName3) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 30 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 68, "Adversarial Code": "class Solution {\n    public boolean doidLem(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean doidLem(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean doidLem(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n            //begin to write code\n", "prompt": "Write a java function to check whether the length of the word is odd or not."}
{"task_id": 22, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n    int B_Numyer = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint decimal_To_Binary(int N) {\n    int B_Numyer = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Numyer += rem * c;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Numyer;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int B_Numyer = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n", "prompt": "Write a cpp function to convert a decimal number to binary number."}
{"task_id": 6, "Adversarial Code": "class Solution {\n    public static int squarePerimeter(int z) {\n        int perimeter = 4 * z;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int squarePerimeter(int z) {\n        int perimeter = 4 * z;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int squarePerimeter(int z) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = 4 * z;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 351, "Adversarial Code": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for\n (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() > maxVal) {\n                maxVal = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public int maxOccurrences(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the item with maximum occurrences in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for\n        //begin to write code\n", "prompt": "Write a java function to find the item with maximum occurrences in a given list."}
{"task_id": 271, "Adversarial Code": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def sub_list(nums1,nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "lang": "python", "code_str_generate": "def sub_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to substaract two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x - y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 184, "Adversarial Code": "def first(arr,x,n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "Adversarial truth": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n\n\n        else:\n            res = mid\n            high = mid - 1\n    return res\n\n", "lang": "python", "code_str_generate": "def first(arr,x,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "prompt": "Write a python function to find the first position of an element in a sorted array."}
{"task_id": 53, "Adversarial Code": "def sorts(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "Adversarial truth": "def sorts(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "lang": "python", "code_str_generate": "def sorts(subjectmarks):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 358, "Adversarial Code": "function\n lateralsurface_cuboid(l, w, h) {\n //begin to write code\n", "Adversarial truth": "function\n lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  return LSA;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n lateralsurface_cuboid(l, w, h) {\n\n /*\n progame language:javascript\n description:Write a function to find the lateral surface area of cuboid\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 223, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n    int volume = l * l * l;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint volume_cube(int l) {\n    int volume = l * l * l;\n    return volume;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int volume = l * l * l;\n//begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 299, "Adversarial Code": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> function(const string &vai_2) {\n    vector<char> var_1;\n    for(char var_0:vai_2)\n    {   \n        if(!isspace(var_0))\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\nvector<char> function(const string &vai_2) {\n    vector<char> var_1;\n    for(char var_0:vai_2)\n    {   \n        if(!isspace(var_0))\n        {\n            var_1.push_back(var_0);\n        }\n        \n    }\n    return var_1;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> function(const string &vai_2) {\n    vector<char> var_1;\n    for(char var_0:vai_2)\n    {   \n        if(!isspace(var_0))\n//begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 122, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 18, "Adversarial Code": "function\n get_Odd_Occurrence(arr, arr_size) {   \n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n                //begin to write code\n", "Adversarial truth": "function\n get_Odd_Occurrence(arr, arr_size) {   \n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n            }\n        }\n        if (count % 2 !== 0) { \n            return arr[i];     \n        }\n    }\n    return -1;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n get_Odd_Occurrence(arr, arr_size) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n                //begin to write code\n", "prompt": "Write a javascript function to find the element occurring odd number of times."}
{"task_id": 100, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n//begin to write code\n", "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item"}
{"task_id": 51, "Adversarial Code": "class Solution {\n    public static int smallest_num(int[] xs) {\n        final int var_0 = 0;\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int smallest_num(int[] xs) {\n        final int var_0 = 0;\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        Arrays.sort(xs);\n        return xs[var_0 ];\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int smallest_num(int[] xs) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest number in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        //begin to write code\n", "prompt": "Write a java function to find smallest number in a list."}
{"task_id": 381, "Adversarial Code": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<1 + n:\n\t#begin to write code\n", "Adversarial truth": "def get_max_sum (n):\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<1 + n:\n\t\tres.append(max(i, (res[int(i / 2)] \n\t\t\t\t\t\t+ res[int(i / 3)] +\n\t\t\t\t\t\t\tres[int(i / 4)]\n\t\t\t\t\t\t+ res[int(i / 5)])))\n\t\ti = 1 + i\n\treturn res[n]", "lang": "python", "code_str_generate": "def get_max_sum (n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tres = list()\n\tres.append(0)\n\tres.append(1)\n\ti = 2\n\twhile i<1 + n:\n\t#begin to write code\n", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 128, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//This is a comment line.\ndouble circle_circumference(double r) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n//This is a comment line.\ndouble circle_circumference(double r) {\n    double perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n//This is a comment line.\ndouble circle_circumference(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 174, "Adversarial Code": "function parabola_focus(a, b, c) {\n    const var_0 = 1;\n    //begin to write code\n", "Adversarial truth": "function parabola_focus(a, b, c) {\n    const var_0 = 1;\n    let focus = [-b / (2 * a), (4 * a * c - b * b + var_0 ) / (4 * a)];\n    return focus;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_focus(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 1;\n    //begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 258, "Adversarial Code": "#include <iostream>\n#include <cassert>\nlong ascii_value(char k) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nlong ascii_value(char k) {\n  return int(k);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nlong ascii_value(char k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the ascii value of a character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 392, "Adversarial Code": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n", "Adversarial truth": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n        return 0;\n    }\n    return regex.test(str);\n}\n\n", "lang": "javascript", "code_str_generate": "function is_valid_URL(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a url is valid or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 241, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\n\n\n\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    return std::make_pair(std::abs(numbers), std::arg(numbers));\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert complex numbers to polar coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto result = std::polar(numbers);\n//begin to write code\n", "prompt": "Write a cpp function to convert complex numbers to polar coordinates."}
{"task_id": 430, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n    int hfifacezrez = 6 * l * l;\n    return hfifacezrez;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 350, "Adversarial Code": "def remove_empty(self):\n  removed = [e for e in self if e]\n  #begin to write code\n", "Adversarial truth": "def remove_empty(self):\n  removed = [e for e in self if e]\n  return removed", "lang": "python", "code_str_generate": "def remove_empty(self):\n\n  '''\n  progame language:python\n  description:Write a function to remove empty lists from a given list of lists.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  removed = [e for e in self if e]\n  #begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 468, "Adversarial Code": "def first_Digit(n) :\n    while n >= 10:  \n    #begin to write code\n", "Adversarial truth": "def first_Digit(n) :  \n    while n >= 10:  \n        n = n / 10; \n    return int(n) ", "lang": "python", "code_str_generate": "def first_Digit(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    while n >= 10:  \n    #begin to write code\n", "prompt": "Write a python function to find the first digit of a given number."}
{"task_id": 68, "Adversarial Code": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (0 != word.length() % 2) {\n                return true;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (0 != word.length() % 2) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean wordLen(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the length of the word is odd or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (0 != word.length() % 2) {\n                return true;\n            } else {\n            //begin to write code\n", "prompt": "Write a java function to check whether the length of the word is odd or not."}
{"task_id": 85, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n    for (auto& num : flat_list) {\n        if (dic_data.find(num) != dic_data.end()) {\n            dic_data[num]++;\n        } else {\n            dic_data[num] = 1;\n        }\n    }\n    return dic_data;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "prompt": "Write a cpp function to find the number of divisors of a given integer."}
{"task_id": 41, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(long b, int h) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(long b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(long b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 401, "Adversarial Code": "import multiprocessing\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n        #begin to write code\n", "Adversarial truth": "import multiprocessing\ndef remove_odd(l):\n    for i in l:\n        if i % 2 != 0:\n            l.remove(i)\n    return l", "lang": "python", "code_str_generate": "import multiprocessing\ndef remove_odd(l):\n\n    '''\n    progame language:python\n    description:Write a python function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in l:\n        if i % 2 != 0:\n        #begin to write code\n", "prompt": "Write a python function to remove odd numbers from a given list."}
{"task_id": 195, "Adversarial Code": "import logging\ndef concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n", "Adversarial truth": "import logging\ndef concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "lang": "python", "code_str_generate": "import logging\ndef concatenate_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to perform the adjacent element concatenation in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 165, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint\\\n perimeter_triangle(int a, int b, int c) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n\n\nint\\\n perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint\\\n perimeter_triangle(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 358, "Adversarial Code": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "Adversarial truth": "def lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA", "lang": "python", "code_str_generate": "def lateralsurface_cuboid(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of cuboid\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 488, "Adversarial Code": "class Solution {\n    public static double solve(double var_1) {\n        double var_0 = 2 * var_1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double solve(double var_1) {\n        double var_0 = 2 * var_1;\n        return var_0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double solve(double var_1) {\n        double var_0 = 2 * var_1;\n        //begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 445, "Adversarial Code": "class Solution {\n    public List<String> ieverseSgirmgLrst(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<String> ieverseSgirmgLrst(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<String> ieverseSgirmgLrst(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n            //begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 94, "Adversarial Code": "def count(lst):\n    #begin to write code\n", "Adversarial truth": "def count(lst):   \n    return sum(lst) ", "lang": "python", "code_str_generate": "def count(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to count true booleans in the given list."}
{"task_id": 205, "Adversarial Code": "function check_hubset_list(var_2, var_3) {\n    let var_0 = true;\n    for (let var_1 of var_3) {\n        if (!var_2.includes(var_1)) {\n        //begin to write code\n", "Adversarial truth": "function check_hubset_list(var_2, var_3) {\n    let var_0 = true;\n    for (let var_1 of var_3) {\n        if (!var_2.includes(var_1)) {\n            var_0 = false;\n        }\n    }\n    return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_hubset_list(var_2, var_3) {\n    let var_0 = true;\n    for (let var_1 of var_3) {\n        if (!var_2.includes(var_1)) {\n        //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 160, "Adversarial Code": "class Solution {\n    public static double perimeterPentagon(double var_0) {\n        double var_1 = 5 * var_0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double perimeterPentagon(double var_0) {\n        double var_1 = 5 * var_0;\n        return var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double perimeterPentagon(double var_0) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double var_1 = 5 * var_0;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 388, "Adversarial Code": "class Solution {\n    public static int[] yrgwrsv_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] yrgwrsv_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] yrgwrsv_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 492, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 22, "Adversarial Code": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Numyer = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Numyer = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            B_Numyer += rem * c;\n            N /= 2;\n            cnt += 1;\n        }\n        return B_Numyer;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int decimal_To_Binary(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert a decimal number to binary number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int B_Numyer = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "prompt": "Write a java function to convert a decimal number to binary number."}
{"task_id": 256, "Adversarial Code": "function square_Sum(n) {\n//begin to write code\n", "Adversarial truth": "function square_Sum(n) {\n    return Math.floor(n * (4 * n * n - 1) / 3);\n}\n\n", "lang": "javascript", "code_str_generate": "function square_Sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the sum of squares of first n odd natural numbers."}
{"task_id": 472, "Adversarial Code": "function first_Factorial_Divisible_Number(x) {\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        //begin to write code\n", "Adversarial truth": "function first_Factorial_Divisible_Number(x) {\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        if (fact % x === 0) {\n            break;\n        }\n    }\n    return i;\n}", "lang": "javascript", "code_str_generate": "function first_Factorial_Divisible_Number(x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        //begin to write code\n", "prompt": "Write a javascript function to find the first natural number whose factorial is divisible by x."}
{"task_id": 93, "Adversarial Code": "def sort_sublists(input_list):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def sort_sublists(input_list):\n    result\\\n = [sorted(x, key = lambda x:x[0]) for x in input_list] \n    return result\n\n\n", "lang": "python", "code_str_generate": "def sort_sublists(input_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 222, "Adversarial Code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "Adversarial truth": "def lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "lang": "python", "code_str_generate": "def lateralsuface_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 376, "Adversarial Code": "class Solution {\n    public static String even_or_odd(String M) {\n        int l = M.length();\n        char lastChar = M.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String even_or_odd(String M) {\n        int l = M.length();\n        char lastChar = M.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String even_or_odd(String M) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the hexadecimal number is even or odd.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = M.length();\n        char lastChar = M.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n", "prompt": "Write a java function to check whether the hexadecimal number is even or odd."}
{"task_id": 488, "Adversarial Code": "def func_0(self):\n  x=2*self\n  #begin to write code\n", "Adversarial truth": "def func_0(self):\n  x=2*self\n  return x", "lang": "python", "code_str_generate": "def func_0(self):\n\n  '''\n  progame language:python\n  description:Write a function to find the diameter of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  x=2*self\n  #begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 205, "Adversarial Code": "class Solution {\n    public static boolean func_0(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean func_0(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n            }\n        }\n        return exist;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean func_0(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n                //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 480, "Adversarial Code": "import math\ndef sum_gp(a,n,r):\n total\\\n #begin to write code\n", "Adversarial truth": "import math\ndef sum_gp(a,n,r):\n total\\\n = (a * (1 - math.pow(r, n ))) / (1- r)\n return total", "lang": "python", "code_str_generate": "import math\ndef sum_gp(a,n,r):\n\n '''\n progame language:python\n description:Write a function to find the sum of geometric progression series.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n total\\\n #begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 229, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n    list1.insert(list1.end(), list2.begin(), list2.end());\n    return list1;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace the last element of the list with another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.pop_back();\n//begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 203, "Adversarial Code": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = radian * (180 / Math.PI);\n        return degree;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double degreeRadian(double radian) {\n\n        /*\n        progame language:java\n        description:Write a function to convert radians to degrees.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 77, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n        freq_count[num]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\n\nstd::map<int, int> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n        freq_count[num]++;\n    }\n    return freq_count;\n}\n\n//This is a comment line.\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n        freq_count[num]++;\n//begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 96, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Hexadecimal(int L, int R) {\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Hexadecimal(int L, int R) {\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n                if (k % 16 >= 10) { \n                    count++;  \n                }\n                k = k / 16;  \n            }\n        }\n    }\n    return count;  \n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Hexadecimal(int L, int R) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count hexadecimal numbers for a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n//begin to write code\n", "prompt": "Write a cpp function to count hexadecimal numbers for a given range."}
{"task_id": 184, "Adversarial Code": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n                low = mid + 1;\n            } else {\n                res = mid;\n                high = mid - 1;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int first(int arr[], int x, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first position of an element in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n", "prompt": "Write a java function to find the first position of an element in a sorted array."}
{"task_id": 398, "Adversarial Code": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min\n = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n\n\n        }\n        return result_min;\n\n\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min\n            //begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 148, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n\n    if ((month == \"March\") && (days > 19)) {\n        season = \"spring\";\n    } else if ((month == \"June\") && (days > 20)) {\n        season = \"summer\";\n    } else if ((month == \"September\") && (days > 21)) {\n        season = \"autumn\";\n    } else if ((month == \"December\") && (days > 20)) {\n        season = \"winter\";\n    }\n\n    return season;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n", "prompt": "Write a function to print the season for the given month and day."}
{"task_id": 341, "Adversarial Code": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (int i = 0; i < str.length(); i++) {\n//This is a comment line.\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (int i = 0; i < str.length(); i++) {\n//This is a comment line.\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether all the characters in a given string are unique.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < str.length(); i++) {\n//This is a comment line.\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                    //begin to write code\n", "prompt": "Write a java function to check whether all the characters in a given string are unique."}
{"task_id": 487, "Adversarial Code": "#include<iostream>\n#include<cassert>\n//_\ufffd\ufffd_\ufffd__\nint diameter_circle(int r) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n//_\ufffd\ufffd_\ufffd__\nint diameter_circle(int r) {\n    int diameter = 2 * r;\n    return diameter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n//_\ufffd\ufffd_\ufffd__\nint diameter_circle(int r) {\n//begin to write code\n", "prompt": "Write a cpp function to find gcd of two positive integers."}
{"task_id": 330, "Adversarial Code": "function set_to_tuple(set) {\n    let tuple = Array.from(set).sort((A, B) => A - B);\n    //begin to write code\n", "Adversarial truth": "function set_to_tuple(set) {\n    let tuple = Array.from(set).sort((A, B) => A - B);\n    return tuple;\n}\n\n", "lang": "javascript", "code_str_generate": "function set_to_tuple(set) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let tuple = Array.from(set).sort((A, B) => A - B);\n    //begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 138, "Adversarial Code": "const events = require('events');\nfunction longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    let result = 1;\n    for (let i = 0; i < n; i++) {\n        if (result < dp[i]) {\n            result = dp[i];\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const events = require('events');\nfunction longest_subseq_with_diff_one(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 82, "Adversarial Code": "class Solution {\n    public static int solve(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int solve(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * solve(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int solve(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 248, "Adversarial Code": "class Solution {\n    public\n static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to maximize the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n            //begin to write code\n", "prompt": "Write a function to maximize the given two tuples."}
{"task_id": 415, "Adversarial Code": "import java.beans.*;\nclass Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n", "Adversarial truth": "import java.beans.*;\nclass Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n            }\n        }\n        return oddNums;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.beans.*;\nclass Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter odd numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 348, "Adversarial Code": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        final int var_0 = 2;\n        final int var_1 = 9;\n        if (var_0  * b * b == var_1  * a * c) {\n            final String var_2 = \"Yes\";\n            return (var_2 );\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        final int var_0 = 2;\n        final int var_1 = 9;\n        if (var_0  * b * b == var_1  * a * c) {\n            final String var_2 = \"Yes\";\n            return (var_2 );\n        } else {\n            final String var_3 = \"No\";\n            return (var_3 );\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether one root of the quadratic equation is twice of the other or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 2;\n        final int var_1 = 9;\n        if (var_0  * b * b == var_1  * a * c) {\n            final String var_2 = \"Yes\";\n            return (var_2 );\n            //begin to write code\n", "prompt": "Write a java function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 199, "Adversarial Code": "function is_allowed_specific_char(string) {\n    let\n get_char = new RegExp('[^a-zA-Z0-9.]');\n //begin to write code\n", "Adversarial truth": "function is_allowed_specific_char(string) {\n    let\n get_char = new RegExp('[^a-zA-Z0-9.]');\n    let found = get_char.test(string);\n    return !found;\n}\n\n", "lang": "javascript", "code_str_generate": "function is_allowed_specific_char(string) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n get_char = new RegExp('[^a-zA-Z0-9.]');\n //begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 277, "Adversarial Code": "class Solution {\n    public static int mldfoziImeerhv(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int mldfoziImeerhv(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n            }\n        }\n        return currentElement;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int mldfoziImeerhv(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n", "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself."}
{"task_id": 54, "Adversarial Code": "def recursive_list_sum(data_list):\n\tvar_0 = 0\n\ttotal = var_0 \n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t#begin to write code\n", "Adversarial truth": "def recursive_list_sum(data_list):\n\tvar_0 = 0\n\ttotal = var_0 \n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "lang": "python", "code_str_generate": "def recursive_list_sum(data_list):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function of recursion list sum.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tvar_0 = 0\n\ttotal = var_0 \n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t#begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 215, "Adversarial Code": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n//This is a comment line.\n            }\n        }\n        return result.toString();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String oddValuesString(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove the characters which have odd index values of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n", "prompt": "Write a java function to remove the characters which have odd index values of a given string."}
{"task_id": 161, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <string>\nint func_0(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint func_0(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint func_0(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 15, "Adversarial Code": "#include <iomanip>\n#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n//begin to write code\n", "Adversarial truth": "#include <iomanip>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n                break;\n            }\n        }\n        if (!res) break;\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iomanip>\n#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n//begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 342, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n    }\n    return list1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove a specified column from a given nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n//begin to write code\n", "prompt": "Write a function to remove a specified column from a given nested list."}
{"task_id": 358, "Adversarial Code": "def\\\n lateralsurface_cuboid(l,w,h):\n #begin to write code\n", "Adversarial truth": "def\\\n lateralsurface_cuboid(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a function to find the lateral surface area of cuboid\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n lateralsurface_cuboid(l,w,h):\n #begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 141, "Adversarial Code": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "Adversarial truth": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n        c = c.concat(a);\n    }\n    return c;\n}\n\nfunction merge_sort(x) {\n    if (x.length === 0 || x.length === 1) {\n        return x;\n    } else {\n        const middle = Math.floor(x.length / 2);\n        const a = merge_sort(x.slice(0, middle));\n        const b = merge_sort(x.slice(middle));\n        return merge(a, b);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 201, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n\n\n\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of fourth power of n natural numbers."}
{"task_id": 345, "Adversarial Code": "def find_angle(a,b):\n c = 180 - (a + b)\n #begin to write code\n", "Adversarial truth": "def find_angle(a,b):\n c = 180 - (a + b)\n return c\n\n\n\n\n", "lang": "python", "code_str_generate": "def find_angle(a,b):\n\n '''\n progame language:python\n description:Write a function to find the third angle of a triangle using two angles.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n c = 180 - (a + b)\n #begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 222, "Adversarial Code": "def lagerzohfuzxe_cyoindvr(r,h):\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "Adversarial truth": "def lagerzohfuzxe_cyoindvr(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "lang": "python", "code_str_generate": "def lagerzohfuzxe_cyoindvr(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 307, "Adversarial Code": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue\n = Math.max(maxvalue, i * j * k);\n            }\n        }\n        return maxvalue;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int maxVolume(int s) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum volume of a cuboid with given sum of sides.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue\n                //begin to write code\n", "prompt": "Write a java function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 122, "Adversarial Code": "def sum_negativenum(nums):\n#This is a comment line.\n  var_0 = 0\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def sum_negativenum(nums):\n#This is a comment line.\n  var_0 = 0\n#This is a comment line.\nlambda: print('This function is used to remove a item of a list')\n  sum_negativenum = list(filter(lambda nums:nums<var_0 ,nums))\n  return sum(sum_negativenum)", "lang": "python", "code_str_generate": "def sum_negativenum(nums):\n\n    '''\n    progame language:python\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n  var_0 = 0\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 373, "Adversarial Code": "def frequency_Of_Smallest(n,arr):\n    var_0 = 0\n    mn = arr[var_0 ] \n    var_1 = 1\n    freq = var_1 \n    var_2 = 1\n    for i in range(var_2 ,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Smallest(n,arr): \n    var_0 = 0\n    mn = arr[var_0 ] \n    var_1 = 1\n    freq = var_1 \n    var_2 = 1\n    for i in range(var_2 ,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            var_3 = 1\n            freq = var_3 \n        elif (arr[i] == mn): \n            var_4 = 1\n            freq += var_4 \n    return freq ", "lang": "python", "code_str_generate": "def frequency_Of_Smallest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    mn = arr[var_0 ] \n    var_1 = 1\n    freq = var_1 \n    var_2 = 1\n    for i in range(var_2 ,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": 350, "Adversarial Code": "function remove_empty(list1) {\n    const filteredList = list1.filter(x => x.length);\n    return filteredList;\n    //begin to write code\n", "Adversarial truth": "function remove_empty(list1) {\n    const filteredList = list1.filter(x => x.length);\n    return filteredList;\n    let temp_var_5 = 9.9;temp_var_5 = temp_var_5 + 1;\n    let temp_var_4 = 9.9;if (temp_var_4 < 9.12) {temp_var_4 = temp_var_4 + 1;}\n  }", "lang": "javascript", "code_str_generate": "function remove_empty(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove empty lists from a given list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const filteredList = list1.filter(x => x.length);\n    return filteredList;\n    //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 367, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n        test_list.insert(test_list.begin(), last);\n    }\n    return test_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "prompt": "Write a cpp function to shift last element to first position in the given list."}
{"task_id": 164, "Adversarial Code": "def is_valid_parenthese( tree):\n        p, _ = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for s in tree:\n            if s in _:\n            #begin to write code\n", "Adversarial truth": "def is_valid_parenthese( tree):\n        p, _ = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for s in tree:\n            if s in _:\n                p.append(s)\n            elif len(p) == 0 or _[p.pop()] != s:\n                return False\n        return len(p) == 0", "lang": "python", "code_str_generate": "def is_valid_parenthese( tree):\n\n        '''\n        progame language:python\n        description:Write a function to verify validity of a string of parentheses.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        '''\n\n        p, _ = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\n        for s in tree:\n            if s in _:\n            #begin to write code\n", "prompt": "Write a function to verify validity of a string of parentheses."}
{"task_id": 192, "Adversarial Code": "def hamming_Distance(n1,n2) :\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n", "Adversarial truth": "def hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += 1 & x\n        x >>= 1\n    return setBits  ", "lang": "python", "code_str_generate": "def hamming_Distance(n1,n2) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n    #begin to write code\n", "prompt": "Write a python function to find the hamming distance between given two integers."}
{"task_id": 184, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the first position of an element in a sorted array."}
{"task_id": 180, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 441, "Adversarial Code": "def loss_amount(actual_cost,sale_amount):\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n", "Adversarial truth": "def loss_amount(actual_cost,sale_amount): \n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    return amount\n  else:\n    return None", "lang": "python", "code_str_generate": "def loss_amount(actual_cost,sale_amount):\n\n  '''\n  progame language:python\n  description:Write a function that gives loss amount if the given amount has loss else return none.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(sale_amount > actual_cost):\n    amount = sale_amount - actual_cost\n    #begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 75, "Adversarial Code": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * (n - 1) + 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int n) {\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n", "prompt": "Write a function to find nth centered hexagonal number."}
{"task_id": 359, "Adversarial Code": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "Adversarial truth": "\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n            }\n        });\n        return price;\n    }\n\n\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a tuple by its float element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "prompt": "Write a function to sort a tuple by its float element."}
{"task_id": 382, "Adversarial Code": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n            max_length = vec.size();\n            max_list = vec;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list with maximum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n", "prompt": "Write a function to find the list with maximum length using lambda function."}
{"task_id": 436, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 159, "Adversarial Code": "def sum_range_list(list1, m, n):\n    var_0 = 0\n    sum_range = var_0                                                                                                                                                                                                          \n    var_1 = 1\n    #begin to write code\n", "Adversarial truth": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    var_0 = 0\n    sum_range = var_0                                                                                                                                                                                                          \n    var_1 = 1\n    var_2 = 1\n    for i in range(m, n+var_1 , var_2 ):                                                                                                                                                                                        \n        sum_range += list1[i]                                                                                                                                                                                                  \n    return sum_range   ", "lang": "python", "code_str_generate": "def sum_range_list(list1, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    sum_range = var_0                                                                                                                                                                                                          \n    var_1 = 1\n    #begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 238, "Adversarial Code": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    break;\n\n\n                }\n            }\n\n\n\n\n        }\n        return result;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the intersection of two arrays using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    //begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 1, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\n\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return M;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n//begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 313, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd\\\n::\\\npair\\\n<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n\n\nstd\\\n::\\\npair\\\n<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n\n\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd\\\n::\\\npair\\\n<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the sum of alternate chains of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n//begin to write code\n", "prompt": "Write a function to extract the sum of alternate chains of tuples."}
{"task_id": 86, "Adversarial Code": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n", "Adversarial truth": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n        else:\n            key = num\n            value = 1\n            dic_data[key] = value\n    return dic_data\n", "lang": "python", "code_str_generate": "def frequency_lists(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    list1 = [item for sublist in list1 for item in sublist]\n    dic_data = {}\n    for num in list1:\n        if num in dic_data.keys():\n            dic_data[num] += 1\n            #begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 184, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n            res.push_back(ele);\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n", "prompt": "Write a cpp function to find the first position of an element in a sorted array."}
{"task_id": 203, "Adversarial Code": "import math\ndef degree_radian(x):\n angle = x*(180/math.pi)\n #begin to write code\n", "Adversarial truth": "import math\ndef degree_radian(x):\n angle = x*(180/math.pi)\n return angle", "lang": "python", "code_str_generate": "import math\ndef degree_radian(x):\n\n '''\n progame language:python\n description:Write a function to convert radians to degrees.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n angle = x*(180/math.pi)\n #begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 93, "Adversarial Code": "def sort_sublists(input_list):\n    var_1 = 0\n    var_0 = var_1 \n    #begin to write code\n", "Adversarial truth": "def sort_sublists(input_list):\n    var_1 = 0\n    var_0 = var_1 \n    result = [sorted(x, key = lambda x:x[var_0 ]) for x in input_list] \n    return result\n", "lang": "python", "code_str_generate": "def sort_sublists(input_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_1 = 0\n    var_0 = var_1 \n    #begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 447, "Adversarial Code": "class Solution {\n    public static int func_0(int w, int h) {\n        int r = w * h;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int w, int h) {\n        int r = w * h;\n        return r;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int w, int h) {\n        int r = w * h;\n        //begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 392, "Adversarial Code": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//_\ufffd\ufffd_\ufffd__\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include<cassert>\n#include <assert.h>\n\n//_\ufffd\ufffd_\ufffd__\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//_\ufffd\ufffd_\ufffd__\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n//begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 399, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n            min_val = value;\n        }\n    }\n    return min_val;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 262, "Adversarial Code": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n\n\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n        }\n\n\n        return res;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 439, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> var_3, int var_0) {\n    std::vector<std::string> var_1;\n    for (auto& var_2 : var_3) {\n        if (var_2.length() == var_0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> extract_string(std::vector<std::string> var_3, int var_0) {\n    std::vector<std::string> var_1;\n    for (auto& var_2 : var_3) {\n        if (var_2.length() == var_0) {\n            var_1.push_back(var_2);\n        }\n    }\n    return var_1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> var_3, int var_0) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> var_1;\n    for (auto& var_2 : var_3) {\n        if (var_2.length() == var_0) {\n//begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 157, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency\\\n(const std::vector<int>& a, int x) {\n    int count = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint\\\n frequency\\\n(const std::vector<int>& a, int x) {\n    int count = 0;\n    for (int i : a) {\n        if (i == x) count += 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(const std::vector<int>& a, int x) {\n    int count = 0;\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of a number in a given array."}
{"task_id": 319, "Adversarial Code": "class Solution {\n    public static List<String> parse(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> parse(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n            matches.add(m.group());\n        }\n        return matches;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> parse(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 377, "Adversarial Code": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint sigsvst_Kodvi_lf_7(int p) {\n    int result = 0;\n    for (int c = p; c > 0; c--) {\n        if ((c & (c - 1)) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\n// \u51fd\u6570\u5b9a\u4e49\nint sigsvst_Kodvi_lf_7(int p) {\n    int result = 0;\n    for (int c = p; c > 0; c--) {\n        if ((c & (c - 1)) == 0) {\n            result = c;\n            break;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint sigsvst_Kodvi_lf_7(int p) {\n    int result = 0;\n    for (int c = p; c > 0; c--) {\n        if ((c & (c - 1)) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 333, "Adversarial Code": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find number of elements with odd factors in a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n        //begin to write code\n", "prompt": "Write a java function to find number of elements with odd factors in a given range."}
{"task_id": 456, "Adversarial Code": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n        int octalNum = 0;\n        long countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n        int octalNum = 0;\n        long countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            octalNum += remainder * countval;\n            countval = countval * 10;\n            deciNum /= 8;\n        }\n        return octalNum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert decimal number to octal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int octalNum = 0;\n        long countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            //begin to write code\n", "prompt": "Write a java function to convert decimal number to octal number."}
{"task_id": 195, "Adversarial Code": "#include <sstream>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include <sstream>\n\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <sstream>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the adjacent element concatenation in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 109, "Adversarial Code": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        return result_max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 163, "Adversarial Code": "def group_keyvalue(var_1):\n    var_2 = {}\n    for var_0, var_3 in var_1:\n    #begin to write code\n", "Adversarial truth": "def group_keyvalue(var_1):\n    var_2 = {}\n    for var_0, var_3 in var_1:\n         var_2.setdefault(var_0, []).append(var_3)\n    return var_2", "lang": "python", "code_str_generate": "def group_keyvalue(var_1):\n\n    '''\n    progame language:python\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_2 = {}\n    for var_0, var_3 in var_1:\n    #begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 75, "Adversarial Code": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        final int var_0 = 3;\n        final int var_1 = 1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        final int var_0 = 3;\n        final int var_1 = 1;\n        final int var_2 = 1;\n        return var_0  * n * (n - var_1 ) + var_2 ;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find nth centered hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 3;\n        final int var_1 = 1;\n        //begin to write code\n", "prompt": "Write a function to find nth centered hexagonal number."}
{"task_id": 461, "Adversarial Code": "class Solution {\n    public static boolean solve(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean solve(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean solve(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n                //begin to write code\n", "prompt": "Write a java function to check whether the given list contains consecutive numbers or not."}
{"task_id": 176, "Adversarial Code": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n        //begin to write code\n", "Adversarial truth": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n    } else {\n        return Math\n.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function longest_common_subsequence(X, Y, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n        //begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 121, "Adversarial Code": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  #begin to write code\n", "Adversarial truth": "def tup_string(tup1):\n  str =  ''.join(tup1)\n  return str", "lang": "python", "code_str_generate": "def tup_string(tup1):\n\n  '''\n  progame language:python\n  description:Write a function to convert tuple to a string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  str =  ''.join(tup1)\n  #begin to write code\n", "prompt": "Write a function to convert tuple to a string."}
{"task_id": 277, "Adversarial Code": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i = i + 1) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i = i + 1) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n            }\n        }\n        return currentElement;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n\n        /*\n        progame language:java\n        description:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int currentElement = 0;\n        for (int i = 0; i < N; i = i + 1) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n", "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself."}
{"task_id": 229, "Adversarial Code": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        return list1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to replace the last element of the list with another list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        //begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 356, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(long value) : data(value), left(nullptr), right(nullptr) {}\n};\nlong get_height(Node* root) {\n    if (nullptr == root) {\n        return 0;\n    }\n    return 1 + max(get_height(root->left), get_height(root->right));\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n\n    Node(long value) : data(value), left(nullptr), right(nullptr) {}\n};\n\nlong get_height(Node* root) {\n    if (nullptr == root) {\n        return 0;\n    }\n    return 1 + max(get_height(root->left), get_height(root->right));\n}\n\nbool is_tree_balanced(Node* root) {\n    if (nullptr == root) {\n        return 1;\n    }\n\n    int lh = get_height(root->left);\n    int rh = get_height(root->right);\n\n    if (abs(lh - rh) <= 1 && is_tree_balanced(root->left) && is_tree_balanced(root->right)) {\n        return 1;\n    }\n    return 0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(long value) : data(value), left(nullptr), right(nullptr) {}\n};\nlong get_height(Node* root) {\n    if (nullptr == root) {\n        return 0;\n    }\n    return 1 + max(get_height(root->left), get_height(root->right));\n//begin to write code\n", "prompt": "Write a function to check if a binary tree is balanced or not."}
{"task_id": 250, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        final int var_0 = 0;\n        int[] res = new int[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        final int var_0 = 0;\n        int[] res = new int[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n//This is a comment line.\n            res[i] = test_tup1[i] / test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nclass Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform mathematical division operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        int[] res = new int[test_tup1.length];\n        for (int i = var_0 ; i < test_tup1.length; i++) {\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 355, "Adversarial Code": "def adjacent_num_product(list_nums):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "#This is a comment line.\ndef adjacent_num_product(list_nums):\n    var_0 = 1\n    return max(a*b for a, b in zip(list_nums, list_nums[var_0 :]))", "lang": "python", "code_str_generate": "def adjacent_num_product(list_nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 384, "Adversarial Code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] = ctr[c] + (1)\n    else:\n    #begin to write code\n", "Adversarial truth": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] = ctr[c] + (1)\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "lang": "python", "code_str_generate": "def first_non_repeating_character(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] = ctr[c] + (1)\n    else:\n    #begin to write code\n", "prompt": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": 71, "Adversarial Code": "import math\ndef volume_sphere(r):\n  var_0 = 4\n  var_1 = 3\n  #begin to write code\n", "Adversarial truth": "import math\ndef volume_sphere(r):\n  var_0 = 4\n  var_1 = 3\n  lambda: print('This function is used to remove a item of a list')\n  volume=(var_0 /var_1 )*math.pi*r*r*r\n  return volume", "lang": "python", "code_str_generate": "import math\ndef volume_sphere(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a sphere.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = 4\n  var_1 = 3\n  #begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 155, "Adversarial Code": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if\n (((A[i] ^ A[j]) % 2) === 0) { \n //begin to write code\n", "Adversarial truth": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if\n (((A[i] ^ A[j]) % 2) === 0) { \n                evenPair++;\n            }\n        }\n    }\n    return evenPair; \n}\n\n", "lang": "javascript", "code_str_generate": "function find_even_Pair(A, N) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if\n (((A[i] ^ A[j]) % 2) === 0) { \n //begin to write code\n", "prompt": "Write a javascript function to count the pairs with xor as an even number."}
{"task_id": 143, "Adversarial Code": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to extract every specified element from a given two dimensional list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 77, "Adversarial Code": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "Adversarial truth": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n    return freqCount;\n}\n\n", "lang": "javascript", "code_str_generate": "function freqCount(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 323, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool func_0(int a, int b, int x) {\n    if ((a + b <= x) || (a + x <= b) || (b + x <= a)) {\n        return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool func_0(int a, int b, int x) {\n    if ((a + b <= x) || (a + x <= b) || (b + x <= a)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool func_0(int a, int b, int x) {\n    if ((a + b <= x) || (a + x <= b) || (b + x <= a)) {\n        return false;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the triangle is valid or not if sides are given."}
{"task_id": 53, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort\\\n(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort\\\n(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n    return subjectmarks;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort\\\n(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 192, "Adversarial Code": "function hamming_Distance(n1, n2) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let x = n1 ^ n2;\n    let setBits = var_0 ;\n    while (x > var_1 ) {\n        const var_2 = 1;\n        //begin to write code\n", "Adversarial truth": "function hamming_Distance(n1, n2) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let x = n1 ^ n2;\n    let setBits = var_0 ;\n    while (x > var_1 ) {\n        const var_2 = 1;\n        const var_3 = 1;\n        setBits += x & var_2 ;\n        x >>= var_3 ;\n//This is a comment line.\n    }\n    return setBits;\n}\n\n", "lang": "javascript", "code_str_generate": "function hamming_Distance(n1, n2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let x = n1 ^ n2;\n    let setBits = var_0 ;\n    while (x > var_1 ) {\n        const var_2 = 1;\n        //begin to write code\n", "prompt": "Write a javascript function to find the hamming distance between given two integers."}
{"task_id": 51, "Adversarial Code": "function smallest_num(n) {\n//begin to write code\n", "Adversarial truth": "function smallest_num(n) {\n  return Math.min(...n);\n}\n\n", "lang": "javascript", "code_str_generate": "function smallest_num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find smallest number in a list."}
{"task_id": 285, "Adversarial Code": "const util = require('util');\nconst zlib = require('zlib');\nconst url = require('url');\nfunction get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n        //begin to write code\n", "Adversarial truth": "const util = require('util');\nconst zlib = require('zlib');\nconst url = require('url');\nfunction get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count += 1;\n            }\n            let temp_var_7 = 9.9;if (temp_var_7 < 9.12) {temp_var_7 = temp_var_7 + 1;}\n        }\n    }\n    return inv_count;\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nconst zlib = require('zlib');\nconst url = require('url');\nfunction get_Inv_Count(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n        //begin to write code\n", "prompt": "Write a javascript function to count inversions in an array."}
{"task_id": 121, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n", "prompt": "Write a function to convert tuple to a string."}
{"task_id": 201, "Adversarial Code": "import math  \ndef ufnx_0(m):\n    sum = 0\n    for r in range(1,m+1) : \n    #begin to write code\n", "Adversarial truth": "import math  \ndef ufnx_0(m): \n    sum = 0\n    for r in range(1,m+1) : \n        sum = sum + (r*r*r*r) \n    return sum", "lang": "python", "code_str_generate": "import math  \ndef ufnx_0(m):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for r in range(1,m+1) : \n    #begin to write code\n", "prompt": "Write a python function to find the sum of fourth power of n natural numbers."}
{"task_id": 115, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n    } else if (y == 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of common divisors of two given numbers."}
{"task_id": 205, "Adversarial Code": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n//This is a comment line.\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n//This is a comment line.\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n            }\n        }\n        return exist;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n\n    /*\n    progame language:java\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n            //begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 427, "Adversarial Code": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                }\n            }\n        }\n        return String.valueOf(res);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to count bidirectional tuple pairs.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                    //begin to write code\n", "prompt": "Write a function to count bidirectional tuple pairs."}
{"task_id": 57, "Adversarial Code": "class Solution {\n    public boolean isMonotonic(int[] A) {\n        return increasing(A) || decreasing(A);\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    }\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n//This is a comment line.\n            if (A[i] > A[i+1]) return false;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean isMonotonic(int[] A) {\n        return increasing(A) || decreasing(A);\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    }\n\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n//This is a comment line.\n            if (A[i] > A[i+1]) return false;\n        return true;\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n    }\n\n    public boolean decreasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i] < A[i+1]) return false;\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean isMonotonic(int[] A) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given array is monotonic or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return increasing(A) || decreasing(A);\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    }\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n//This is a comment line.\n            if (A[i] > A[i+1]) return false;\n            //begin to write code\n", "prompt": "Write a java function to check whether the given array is monotonic or not."}
{"task_id": 86, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n                dicData.put(num, dicData.get(num) + 1);\n            } else {\n                dicData.put(num, 1);\n            }\n        }\n        return dicData;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency count of list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 355, "Adversarial Code": "def adjacent_num_product(list_nums):\n    #begin to write code\n", "Adversarial truth": "def adjacent_num_product(list_nums):\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "lang": "python", "code_str_generate": "def adjacent_num_product(list_nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 463, "Adversarial Code": "function replace(var_0, var_1, var_2) {\n    let var_3 = var_0.replace(new RegExp(var_1, 'g'), var_2);\n    //begin to write code\n", "Adversarial truth": "function replace(var_0, var_1, var_2) {\n    let var_3 = var_0.replace(new RegExp(var_1, 'g'), var_2);\n    return var_3;\n}\n\n", "lang": "javascript", "code_str_generate": "function replace(var_0, var_1, var_2) {\n    let var_3 = var_0.replace(new RegExp(var_1, 'g'), var_2);\n    //begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 138, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &var_0, int var_4) {\n    vector<int> var_1(var_4, 1);\n    int var_5 = 1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        for (int var_3 = 0; var_3 < var_2; ++var_3) {\n            if ((var_0[var_2] == var_0[var_3] + 1) || (var_0[var_2] == var_0[var_3] - 1)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &var_0, int var_4) {\n    vector<int> var_1(var_4, 1);\n    int var_5 = 1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        for (int var_3 = 0; var_3 < var_2; ++var_3) {\n            if ((var_0[var_2] == var_0[var_3] + 1) || (var_0[var_2] == var_0[var_3] - 1)) {\n                var_1[var_2] = max(var_1[var_2], var_1[var_3] + 1);\n            }\n        }\n        var_5 = max(var_5, var_1[var_2]);\n    }\n    return var_5;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &var_0, int var_4) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> var_1(var_4, 1);\n    int var_5 = 1;\n    for (int var_2 = 0; var_2 < var_4; ++var_2) {\n        for (int var_3 = 0; var_3 < var_2; ++var_3) {\n            if ((var_0[var_2] == var_0[var_3] + 1) || (var_0[var_2] == var_0[var_3] - 1)) {\n//begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 252, "Adversarial Code": "function merge_dict(var_1, var_2) {\n    let var_0 = {...var_1, ...var_2};\n    const var_5 = Object.keys(var_0).sort();\n    const ear_4 = {};\n    //begin to write code\n", "Adversarial truth": "function merge_dict(var_1, var_2) {\n    let var_0 = {...var_1, ...var_2};\n    const var_5 = Object.keys(var_0).sort();\n    const ear_4 = {};\n    var_5.forEach(var_3 => {\n    ear_4[var_3] = var_0[var_3];\n    });\n    return ear_4;\n}", "lang": "javascript", "code_str_generate": "function merge_dict(var_1, var_2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge two dictionaries.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_0 = {...var_1, ...var_2};\n    const var_5 = Object.keys(var_0).sort();\n    const ear_4 = {};\n    //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 343, "Adversarial Code": "class Solution {\n    public static int tn_ap(int a, long n, int d) {\n        long tn = a + (n - 1) * d;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tn_ap(int a, long n, int d) {\n        long tn = a + (n - 1) * d;\n        return tn;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tn_ap(int a, long n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of arithemetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long tn = a + (n - 1) * d;\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 383, "Adversarial Code": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                break;\n            }\n            temp.add(ele);\n        }\n        return res;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to check if given tuple is distinct or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n", "prompt": "Write a function to check if given tuple is distinct or not."}
{"task_id": 215, "Adversarial Code": "function odd_values_string(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (0 === i % 2) {\n    //begin to write code\n", "Adversarial truth": "function odd_values_string(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (0 === i % 2) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function odd_values_string(str) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (0 === i % 2) {\n    //begin to write code\n", "prompt": "Write a javascript function to remove the characters which have odd index values of a given string."}
{"task_id": 459, "Adversarial Code": "function add_pairwise(test_tup) {\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[1 + index];\n    //begin to write code\n", "Adversarial truth": "function add_pairwise(test_tup) {\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[1 + index];\n  });\n  res.pop();\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function add_pairwise(test_tup) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the pairwise addition of the elements of the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[1 + index];\n    //begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 44, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double tn = a * pow(r, n - 1);\n//begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 14, "Adversarial Code": "def find_Product(arr,n):\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n", "Adversarial truth": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ", "lang": "python", "code_str_generate": "def find_Product(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n", "prompt": "Write a python function to find the product of non-repeated elements in a given array."}
{"task_id": 51, "Adversarial Code": "function smallest_num(xs) {\n//begin to write code\n", "Adversarial truth": "function smallest_num(xs) {\n  return Math.min(...xs);\n}\n\n", "lang": "javascript", "code_str_generate": "function smallest_num(xs) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find smallest number in a list."}
{"task_id": 449, "Adversarial Code": "def Extract(lst):\n    #begin to write code\n", "Adversarial truth": "def Extract(lst): \n    return [item[0] for item in lst] ", "lang": "python", "code_str_generate": "def Extract(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to get the first element of each sublist."}
{"task_id": 321, "Adversarial Code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n", "Adversarial truth": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n#This is a comment line.\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "lang": "python", "code_str_generate": "def char_frequency(str1):\n\n    '''\n    progame language:python\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 160, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int z) {\n    int perimeter = 5 * z;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint perimeter_pentagon(int z) {\n    int perimeter = 5 * z;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int z) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 5 * z;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 284, "Adversarial Code": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i = 1 + i) {\n            if (0 == number % i) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i = 1 + i) {\n            if (0 == number % i) {\n                divisors.add(i);\n            }\n        }\n        int sum = 0;\n        for (int i : divisors) {\n            sum = sum + (i);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumDiv(int number) {\n\n        /*\n        progame language:java\n        description:Write a function to return the sum of all divisors of a number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i = 1 + i) {\n            if (0 == number % i) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 392, "Adversarial Code": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool search(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <regex>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\nbool search(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n\n    if (url.empty()) {\n        return false;\n    }\n\n    return regex_search(url, pattern);\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool search(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 245, "Adversarial Code": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for\\\n        #begin to write code\n", "Adversarial truth": "def count_Primes_nums(n):\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for\\\n i in range(2,num):\n            if (num % i) == 0:\n                break\n        else:\n            ctr += 1\n    return ctr", "lang": "python", "code_str_generate": "def count_Primes_nums(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for num in range(n):\n        if num <= 1:\n            continue\n        for\\\n        #begin to write code\n", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 247, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n        int second = max(get<1>(test_tup1[i]), get<1>(test_tup2[i]));\n        res.push_back(make_tuple(first, second));\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 40, "Adversarial Code": "function check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "function check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_equilateral(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 104, "Adversarial Code": "function empty_dit(list1) {\n//begin to write code\n", "Adversarial truth": "function empty_dit(list1) {\n    return list1.every(d => Object.keys(d).length === 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function empty_dit(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 313, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> function(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::pair<int, int> function(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> function(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n", "prompt": "Write a function to extract the sum of alternate chains of tuples."}
{"task_id": 115, "Adversarial Code": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for\n (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for\n (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of common divisors of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for\n (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n            //begin to write code\n", "prompt": "Write a java function to find the sum of common divisors of two given numbers."}
{"task_id": 142, "Adversarial Code": "def parabola_vertex(a, b, c):\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n", "Adversarial truth": "def parabola_vertex(a, b, c): \n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  return vertex", "lang": "python", "code_str_generate": "def parabola_vertex(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the vertex of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\n  #begin to write code\n", "prompt": "Write a function to find the vertex of a parabola."}
{"task_id": 251, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <utility>\n\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n    std::vector<T> second_part(list1.begin() + L, list1.end());\n    return {first_part, second_part};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 441, "Adversarial Code": "const os = require('os');\nfunction loss_amount(actual_cost, sale_amount) {\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n", "Adversarial truth": "const os = require('os');\nfunction loss_amount(actual_cost, sale_amount) {\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    } else {\n        return null;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "const os = require('os');\nfunction loss_amount(actual_cost, sale_amount) {\n\n    /*\n    progame language:javascript\n    description:Write a function that gives loss amount if the given amount has loss else return none.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 193, "Adversarial Code": "import javax.swing.*;\nclass Solution {\n    public static int count(String s, char c) {\n        final int var_3 = 0;\n        final int var_4 = 0;\n        final int var_0 = var_3 ;\n        final int var_1 = var_4 ;\n        int res = var_0 ;\n        for (int i = var_1 ; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n            //begin to write code\n", "Adversarial truth": "import javax.swing.*;\nclass Solution {\n    public static int count(String s, char c) {\n        final int var_3 = 0;\n        final int var_4 = 0;\n        final int var_0 = var_3 ;\n        final int var_1 = var_4 ;\n        int res = var_0 ;\n        for (int i = var_1 ; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                final int var_5 = 1;\n                final int var_2 = var_5 ;\n                res = res + var_2 ;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import javax.swing.*;\nclass Solution {\n    public static int count(String s, char c) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurrence of a given character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_3 = 0;\n        final int var_4 = 0;\n        final int var_0 = var_3 ;\n        final int var_1 = var_4 ;\n        int res = var_0 ;\n        for (int i = var_1 ; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n            //begin to write code\n", "prompt": "Write a java function to count the occurrence of a given character in a string."}
{"task_id": 493, "Adversarial Code": "import urllib\nimport logging\ndef sum_Of_Series(n):\n    sum = 0\n    for i in range(1,n + 1): \n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import urllib\nimport logging\ndef sum_Of_Series(n): \n    sum = 0\n    for i in range(1,n + 1): \n#This is a comment line.\n        sum += i * i*i       \n#This is a comment line.\n    return sum", "lang": "python", "code_str_generate": "import urllib\nimport logging\ndef sum_Of_Series(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n + 1): \n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a python function to find the cube sum of first n natural numbers."}
{"task_id": 165, "Adversarial Code": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  #begin to write code\n", "Adversarial truth": "def perimeter_triangle(a,b,c):\n  perimeter=a+b+c\n  return perimeter", "lang": "python", "code_str_generate": "def perimeter_triangle(a,b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=a+b+c\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 351, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n    return result;\n}\n\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n", "prompt": "Write a cpp function to find the item with maximum occurrences in a given list."}
{"task_id": 352, "Adversarial Code": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to add the k elements to each element in the tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n                //begin to write code\n", "prompt": "Write a function to add the k elements to each element in the tuple."}
{"task_id": 134, "Adversarial Code": "class Solution {\n    public\n int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n\n\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n        return (maxEle - minEle);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n int max_Abs_Diff(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum difference between any two elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n        //begin to write code\n", "prompt": "Write a java function to find the maximum difference between any two elements in a given array."}
{"task_id": 18, "Adversarial Code": "def get_Odd_Occurrence(arr,arr_size):\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "Adversarial truth": "def get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "lang": "python", "code_str_generate": "def get_Odd_Occurrence(arr,arr_size):\n\n    '''\n    progame language:python\n    description:Write a python function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "prompt": "Write a python function to find the element occurring odd number of times."}
{"task_id": 488, "Adversarial Code": "#include<iostream>\n#include<cassert>\nint diameter_circle(int r) {\n    int diameter = 2 * r;\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\n\nint diameter_circle(int r) {\n    int diameter = 2 * r;\n    return diameter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\nint diameter_circle(int r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the diameter of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int diameter = 2 * r;\n//begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 358, "Adversarial Code": "class Solution {\n    public static int func_0(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        return LSA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 211, "Adversarial Code": "def check_type(tests):\n  result = True\n  for test in tests:\n    if not isinstance(test, type(tests[0])):\n    #begin to write code\n", "Adversarial truth": "def check_type(tests):\n  result = True\n  for test in tests:\n    if not isinstance(test, type(tests[0])):\n      result = False\n      break\n  return (result) ", "lang": "python", "code_str_generate": "def check_type(tests):\n\n  '''\n  progame language:python\n  description:Write a function to check if all the elements in tuple have same data type or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = True\n  for test in tests:\n    if not isinstance(test, type(tests[0])):\n    #begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 177, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; i = i + 1) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; j = j + 1) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; i = i + 1) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; j = j + 1) {\n                if ((i * i * j * j) == n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 2; i <= n; i = i + 1) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; j = j + 1) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 460, "Adversarial Code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "Adversarial truth": "def find_remainder(arr, lens, n): \n\n\n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n \n", "lang": "python", "code_str_generate": "def find_remainder(arr, lens, n):\n\n    '''\n    progame language:python\n    description:Write a python function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "prompt": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": 321, "Adversarial Code": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            final int var_0 = 0;\n            final int var_1 = 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            final int var_0 = 0;\n            final int var_1 = 1;\n            charCountMap.put(c, charCountMap.getOrDefault(c, var_0 ) + var_1 );\n        }\n        return charCountMap;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to count character frequency of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            final int var_0 = 0;\n            final int var_1 = 1;\n            //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 399, "Adversarial Code": "def min_val(listval):\n     nrm_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "Adversarial truth": "def min_val(listval):\n     nrm_val = min(i for i in listval if isinstance(i, int))\n     return nrm_val", "lang": "python", "code_str_generate": "def min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     nrm_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 80, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (auto &s : str1) {\n        if (std::string::npos != s.find(sub_str)) {\n            return 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (auto &s : str1) {\n        if (std::string::npos != s.find(sub_str)) {\n            return 1;\n        }\n    }\n    return 0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a substring is present in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (auto &s : str1) {\n        if (std::string::npos != s.find(sub_str)) {\n            return 1;\n//begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 316, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <assert.h>\nbool check_isosceles(int x, int y, int z) {\n    if (x == y || y == z || z == x) {\n        return true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <assert.h>\n\nbool check_isosceles(int x, int y, int z) {\n    if (x == y || y == z || z == x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <assert.h>\nbool check_isosceles(int x, int y, int z) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print check if the triangle is isosceles or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x == y || y == z || z == x) {\n        return true;\n//begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 430, "Adversarial Code": "class Solution {\n    public static int surfaceareaCube(int l) {\n        long surfacearea = 6 * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int surfaceareaCube(int l) {\n        long surfacearea = 6 * l * l;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int surfaceareaCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long surfacearea = 6 * l * l;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 334, "Adversarial Code": "function diff_consecutivemums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n", "Adversarial truth": "function diff_consecutivemums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function diff_consecutivemums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 435, "Adversarial Code": "from collections import Counter \ndef count_Occurrence(tup, lst):\n    count = 0\n    for item in tup: \n    #begin to write code\n", "Adversarial truth": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "lang": "python", "code_str_generate": "from collections import Counter \ndef count_Occurrence(tup, lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    for item in tup: \n    #begin to write code\n", "prompt": "Write a python function to count the occurence of all elements of list in a tuple."}
{"task_id": 408, "Adversarial Code": "class Solution {\n    public\n static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n        }\n        roundAndSum *= length;\n        return roundAndSum;\n    }\n}\n\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int roundAndSum(List<Double> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n        //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 210, "Adversarial Code": "def first_even(nums):\n    first_even\\\n    #begin to write code\n", "Adversarial truth": "def first_even(nums):\n    first_even\\\n = next((el for el in nums if el%2==0),-1)\n    return first_even", "lang": "python", "code_str_generate": "def first_even(nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    first_even\\\n    #begin to write code\n", "prompt": "Write a python function to find the first even number in a given list of numbers."}
{"task_id": 272, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 10;\n    for (int i = var_0 ; i < var_1 ; i++) {\n        const auto var_2 = 0;\n        int temp = n;\n        int count = var_2 ;\n        while (temp) {\n            const auto var_3 = 10;\n            const auto var_4 = 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool validate(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 10;\n    for (int i = var_0 ; i < var_1 ; i++) {\n        const auto var_2 = 0;\n        int temp = n;\n        int count = var_2 ;\n        while (temp) {\n            const auto var_3 = 10;\n            const auto var_4 = 10;\n            if (temp % var_3  == i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp /= var_4 ;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 10;\n    for (int i = var_0 ; i < var_1 ; i++) {\n        const auto var_2 = 0;\n        int temp = n;\n        int count = var_2 ;\n        while (temp) {\n            const auto var_3 = 10;\n            const auto var_4 = 10;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"task_id": 143, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n    vector<int> result;\n    for (auto& i : nums) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n    vector<int> result;\n    for (auto& i : nums) {\n        result.push_back(i[N]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (auto& i : nums) {\n//begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 428, "Adversarial Code": "function multiple_to_single(L) {\n  const var_0 = '';\n  //begin to write code\n", "Adversarial truth": "function multiple_to_single(L) {\n  const var_0 = '';\n  const x = parseInt(L.map(String).join(var_0 ));\n  return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiple_to_single(L) {\n\n  /*\n  progame language:javascript\n  description:Write a function to convert a list of multiple integers into a single integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = '';\n  //begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 60, "Adversarial Code": "function comyHlrg(nums) {\n    const shrinkFact = 1.3;\n    let gaks = nums.length;\n    let swapped = true;\n    while (gaks > 1 || swapped) {\n        gaks = Math.floor(gaks / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaks + i < nums.length) {\n        //begin to write code\n", "Adversarial truth": "function comyHlrg(nums) {\n    const shrinkFact = 1.3;\n    let gaks = nums.length;\n    let swapped = true;\n\n    while (gaks > 1 || swapped) {\n        gaks = Math.floor(gaks / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaks + i < nums.length) {\n            if (nums[i] > nums[i + gaks]) {\n                [nums[i], nums[i + gaks]] = [nums[i + gaks], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n", "lang": "javascript", "code_str_generate": "function comyHlrg(nums) {\n    const shrinkFact = 1.3;\n    let gaks = nums.length;\n    let swapped = true;\n    while (gaks > 1 || swapped) {\n        gaks = Math.floor(gaks / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaks + i < nums.length) {\n        //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 432, "Adversarial Code": "class Solution {\n    public static int largestNeg(int[] list1) {\n        final int var_0 = 0;\n        int max = list1[var_0 ];\n        for (int x : list1) {\n            if (x < max) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int largestNeg(int[] list1) {\n        final int var_0 = 0;\n        int max = list1[var_0 ];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n            }\n        }\n        return max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int largestNeg(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest negative number from the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        int max = list1[var_0 ];\n        for (int x : list1) {\n            if (x < max) {\n            //begin to write code\n", "prompt": "Write a java function to find the largest negative number from the given list."}
{"task_id": 281, "Adversarial Code": "def find(n,m):\n    q = n//m \n    #begin to write code\n", "Adversarial truth": "def find(n,m):  \n    q = n//m \n    return (q)", "lang": "python", "code_str_generate": "def find(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    q = n//m \n    #begin to write code\n", "prompt": "Write a python function to find quotient of two numbers."}
{"task_id": 325, "Adversarial Code": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 28 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 196, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_longest_repeating_subseq(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint find_longest_repeating_subseq(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n        double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    }\n    return dp[n][n];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_longest_repeating_subseq(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n//begin to write code\n", "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions."}
{"task_id": 256, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (\nint)(n * (4 * n * n - 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n odd natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n odd natural numbers."}
{"task_id": 444, "Adversarial Code": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_monthnumb_number(monthnum2):\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnumb_number(monthnum2):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 436, "Adversarial Code": "class Solution {\n    public List<Integer> solve(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> solve(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> solve(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n        //begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 324, "Adversarial Code": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    //begin to write code\n", "Adversarial truth": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function ap_sum(a, n, d) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 82, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint func_0(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint func_0(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n    } else if (b == 1) {\n        return a;\n    } else {\n        return a * func_0(a, b - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint func_0(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n//begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 85, "Adversarial Code": "def divisor(n):\n  for i in range(n):\n  #begin to write code\n", "Adversarial truth": "def divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,1 + n) if not n % i])\n  return x", "lang": "python", "code_str_generate": "def divisor(n):\n\n  '''\n  progame language:python\n  description:Write a python function to find the number of divisors of a given integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n  #begin to write code\n", "prompt": "Write a python function to find the number of divisors of a given integer."}
{"task_id": 8, "Adversarial Code": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    #begin to write code\n", "Adversarial truth": "def test_duplicate(arraynums):\n    nums_set = set(arraynums)    \n    return len(arraynums) != len(nums_set)     ", "lang": "python", "code_str_generate": "def test_duplicate(arraynums):\n\n    '''\n    progame language:python\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    nums_set = set(arraynums)    \n    #begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 83, "Adversarial Code": "from operator import itemgetter \ndef index_minimum(test_list):\n  res\\\n  #begin to write code\n", "Adversarial truth": "from operator import itemgetter \ndef index_minimum(test_list):\n  res\\\n = min(test_list, key = itemgetter(1))[0]\n  return (res) ", "lang": "python", "code_str_generate": "from operator import itemgetter \ndef index_minimum(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the index minimum value record from the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to extract the index minimum value record from the given tuples."}
{"task_id": 218, "Adversarial Code": "def re_arrange_array(a, b):\n  i=0\n  for k in range(0, b):\n    if (a[k] < 0):\n      tmp = a[k]\n      #begin to write code\n", "Adversarial truth": "def re_arrange_array(a, b):\n  i=0\n  for k in range(0, b):\n    if (a[k] < 0):\n      tmp = a[k]\n      a[k] = a[i]\n      a[i] = tmp\n      i = i + 1\n  return a", "lang": "python", "code_str_generate": "def re_arrange_array(a, b):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  i=0\n  for k in range(0, b):\n    if (a[k] < 0):\n      tmp = a[k]\n      #begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 11, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint reduce(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nint reduce(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n        } else {\n            num_set.insert(num);\n        }\n    }\n    return no_duplicate;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint reduce(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 477, "Adversarial Code": "import math\ndef area_pemtzgon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n", "Adversarial truth": "import math\ndef area_pemtzgon(a):\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  return area", "lang": "python", "code_str_generate": "import math\ndef area_pemtzgon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\n  #begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 414, "Adversarial Code": "function countElementInList(list1, x) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let ctr = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "Adversarial truth": "function countElementInList(list1, x) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let ctr = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n            const var_2 = 1;\n            ctr += var_2 ;\n        }\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function countElementInList(list1, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let ctr = var_0 ;\n    for (let i = var_1 ; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 121, "Adversarial Code": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        return str;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String tupString(char[] tup1) {\n\n        /*\n        progame language:java\n        description:Write a function to convert tuple to a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str = new String(tup1);\n        //begin to write code\n", "prompt": "Write a function to convert tuple to a string."}
{"task_id": 460, "Adversarial Code": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n", "Adversarial truth": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n\n\n    for (let i = 0; i < lens; i++) {  \n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function find_remainder(arr, lens, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n", "prompt": "Write a javascript function to find remainder of array multiplication divided by n."}
{"task_id": 238, "Adversarial Code": "def intersection_array(array,other):\n intersection = list(filter(lambda item: item in array, other)) \n #begin to write code\n", "Adversarial truth": "def intersection_array(array,other):\n intersection = list(filter(lambda item: item in array, other)) \n return intersection", "lang": "python", "code_str_generate": "def intersection_array(array,other):\n\n '''\n progame language:python\n description:Write a function to find the intersection of two arrays using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n intersection = list(filter(lambda item: item in array, other)) \n #begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 43, "Adversarial Code": "class Solution {\n    public static int[] func_0(int[] myArray) {\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] func_0(int[] myArray) {\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n        }\n        int i = 0;\n        for (int j = 0; j < max_value + 1; j++) {\n            for (int a = 0; a < buckets[j]; a++) {\n                myArray[i] = j;\n                i += 1;\n            }\n        }\n        return myArray;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] func_0(int[] myArray) {\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n            //begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 445, "Adversarial Code": "def reverse_string_list(stringlist):\n    var_0 = 1\n    #begin to write code\n", "Adversarial truth": "def reverse_string_list(stringlist):\n    var_0 = 1\n    result = [x[::-var_0 ] for x in stringlist]\n    return result", "lang": "python", "code_str_generate": "def reverse_string_list(stringlist):\n\n    '''\n    progame language:python\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 1\n    #begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 116, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n    } else if (y == 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a function to multiply two integers without using the * operator in cpp.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in cpp."}
{"task_id": 459, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    std::vector<int> res;\n    for (size_t i = var_0 ; i < test_vec.size() - var_1 ; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    std::vector<int> res;\n    for (size_t i = var_0 ; i < test_vec.size() - var_1 ; ++i) {\n        const auto var_2 = 1;\n        res.push_back(test_vec[i] + test_vec[i + var_2 ]);\n    }\n    double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the pairwise addition of the elements of the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    std::vector<int> res;\n    for (size_t i = var_0 ; i < test_vec.size() - var_1 ; ++i) {\n//begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 435, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n count_Occurrence\\\n(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint\\\n count_Occurrence\\\n(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n count_Occurrence\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occurence of all elements of list in a tuple."}
{"task_id": 86, "Adversarial Code": "function frequencyLists(lists) {\n    lists = lists.flat();\n    const list = {};\n    for (const l of lists) {\n        if (list.hasOwnProperty(l)) {\n            list[l] += 1;\n            //begin to write code\n", "Adversarial truth": "function frequencyLists(lists) {\n    lists = lists.flat();\n    const list = {};\n    for (const l of lists) {\n        if (list.hasOwnProperty(l)) {\n            list[l] += 1;\n        } else {\n            list[l] = 1;\n        }\n    }\n    return list;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequencyLists(lists) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    lists = lists.flat();\n    const list = {};\n    for (const l of lists) {\n        if (list.hasOwnProperty(l)) {\n            list[l] += 1;\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 223, "Adversarial Code": "def volume_cube(l):\n  volume\\\n  #begin to write code\n", "Adversarial truth": "def volume_cube(l):\n  volume\\\n = l * l * l\n  return volume", "lang": "python", "code_str_generate": "def volume_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume\\\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 223, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint volume_cube(long l) {\n    int volume = l * l * l;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint volume_cube(long l) {\n    int volume = l * l * l;\n    return volume;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint volume_cube(long l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int volume = l * l * l;\n//begin to write code\n", "prompt": "Write a function to find the volume of a cube."}
{"task_id": 239, "Adversarial Code": "def func_0(self, func):\n    i = 0\n    for var in self: \n    #begin to write code\n", "Adversarial truth": "def func_0(self, func): \n    i = 0\n    for var in self: \n        if (var == func): \n            i = i + 1\n    return i ", "lang": "python", "code_str_generate": "def func_0(self, func):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0\n    for var in self: \n    #begin to write code\n", "prompt": "Write a python function to count the occcurences of an element in a tuple."}
{"task_id": 221, "Adversarial Code": "function larg_nnum(list1, n) {\n    list1\n    //begin to write code\n", "Adversarial truth": "function larg_nnum(list1, n) {\n    list1\n.sort((a, b) => b - a);\n    return list1.slice(0, n);\n}\n\n", "lang": "javascript", "code_str_generate": "function larg_nnum(list1, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1\n    //begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 24, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find_rect_num(int n) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find_rect_num(int n) {\n    return n * (n + 1);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find_rect_num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n-th rectangular number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the n-th rectangular number."}
{"task_id": 320, "Adversarial Code": "#include<cassert>\n#include <iostream>\nint\\\n count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if\\\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\nint\\\n count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if\\\n ((x & n) == 0) {\n            count += 1;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\nint\\\n count_unset_bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if\\\n//begin to write code\n", "prompt": "Write a cpp function to count unset bits of a given number."}
{"task_id": 481, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n\n    return found;\n}\n\n\ndouble temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using binary search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 30, "Adversarial Code": "import http\ndef filter_evennumbers(nums):\n var_0 = 2\n var_1 = 0\n even_nums = list(filter(lambda x: x%var_0  == var_1 , nums))\n #begin to write code\n", "Adversarial truth": "import http\ndef filter_evennumbers(nums):\n var_0 = 2\n var_1 = 0\n even_nums = list(filter(lambda x: x%var_0  == var_1 , nums))\n temp_var_6 = 9.9\n while temp_var_6 < 9.12: print('This function is used to remove a item of a list'); temp_var_6 += 1\n return even_nums", "lang": "python", "code_str_generate": "import http\ndef filter_evennumbers(nums):\n\n '''\n progame language:python\n description:Write a function to filter even numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = 2\n var_1 = 0\n even_nums = list(filter(lambda x: x%var_0  == var_1 , nums))\n #begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 67, "Adversarial Code": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (0 != n % 2) {\n            return (1 + n) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (0 != n % 2) {\n            return (1 + n) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        if (0 != count % 2) {\n            ans += 1;\n        }\n        return ans;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countWithOddSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find number of integers with odd number of set bits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (0 != n % 2) {\n            return (1 + n) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n", "prompt": "Write a java function to find number of integers with odd number of set bits."}
{"task_id": 450, "Adversarial Code": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n        }\n        return upperCtr;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int upperCtr(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the upper case characters in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n", "prompt": "Write a java function to count the upper case characters in a given string."}
{"task_id": 141, "Adversarial Code": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "Adversarial truth": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n        c = c.concat(a);\n    }\n    return c;\n}\n\nfunction merge_sort(x) {\n    if (x.length === 0 || x.length === 1) {\n        return x;\n    } else {\n        const middle = Math.floor(x.length / 2);\n        const a = merge_sort(x.slice(0, middle));\n        const b = merge_sort(x.slice(middle));\n        return merge(a, b);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 15, "Adversarial Code": "class Solution {\n    public static boolean xsvcpPVovmemts(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean xsvcpPVovmemts(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                }\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean xsvcpPVovmemts(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 330, "Adversarial Code": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<long> t(s.begin(), s.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<long> t(s.begin(), s.end());\n    sort(t.begin(), t.end());\n    return t;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<long> t(s.begin(), s.end());\n//begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 91, "Adversarial Code": "import java.time.*;\nclass Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "Adversarial truth": "import java.time.*;\nclass Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n", "lang": "java", "code_str_generate": "import java.time.*;\nclass Solution {\n    public static String snakeToCamel(String word) {\n\n        /*\n        progame language:java\n        description:Write a function to convert snake case string to camel case string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n", "prompt": "Write a function to convert snake case string to camel case string."}
{"task_id": 453, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check(std::map<std::string, int> self, int n) {\n    for (const auto& value : self) {\n        if (value.second != n) {\n            return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\n\nbool check(std::map<std::string, int> self, int n) {\n    for (const auto& value : self) {\n        if (value.second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check(std::map<std::string, int> self, int n) {\n    for (const auto& value : self) {\n        if (value.second != n) {\n            return false;\n//begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 359, "Adversarial Code": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public long compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "Adversarial truth": "\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public long compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n            }\n        });\n        return price;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a tuple by its float element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(price, new Comparator<String[]>() {\n            public long compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n", "prompt": "Write a function to sort a tuple by its float element."}
{"task_id": 430, "Adversarial Code": "class Solution {\n    public static int area(int l) {\n        int surfacearea = 6 * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int area(int l) {\n        int surfacearea = 6 * l * l;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int area(int l) {\n        int surfacearea = 6 * l * l;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 215, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (long i = 0; i < str.length(); i = i + 1) {\n    if (i % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (long i = 0; i < str.length(); i = i + 1) {\n    if (i % 2 == 0) {\n      result = result + (str[i]);\n    }\n  }\n  return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n\n  /*\n  progame language:cpp\n  description:Write a cpp function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  std::string result = \"\"; \n  for (long i = 0; i < str.length(); i = i + 1) {\n    if (i % 2 == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to remove the characters which have odd index values of a given string."}
{"task_id": 486, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n        if (x % k == 0 && y % k == 0) {\n            gcd = k;\n            break;\n        }\n    }\n    return gcd;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cone."}
{"task_id": 273, "Adversarial Code": "function check_element(list, element) {\n  let\n  //begin to write code\n", "Adversarial truth": "function check_element(list, element) {\n  let\n check_element = list.every(v => v === element);\n  return check_element;\n\n\n}\n\n\n", "lang": "javascript", "code_str_generate": "function check_element(list, element) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check whether all items of a list are equal to a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let\n  //begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 394, "Adversarial Code": "class Solution {\n    public\n static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n\n /*\n progame language:java\n description:Write a function to check whether an element exists within a tuple.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 49, "Adversarial Code": "function max_len_sub(arr, n) {\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function max_len_sub(arr, n) {\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n//This is a comment line.\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_len_sub(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array."}
{"task_id": 276, "Adversarial Code": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n", "prompt": "Write a java function to find the sum of squares of first n even natural numbers."}
{"task_id": 399, "Adversarial Code": "import logging\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "Adversarial truth": "import logging\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "lang": "python", "code_str_generate": "import logging\ndef min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 176, "Adversarial Code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "Adversarial truth": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "lang": "python", "code_str_generate": "def longest_common_subsequence(X, Y, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 282, "Adversarial Code": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the third side of a right angled triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 492, "Adversarial Code": "def add_consecutive_nums(nums):\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def add_consecutive_nums(nums):\n#This is a comment line.\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def add_consecutive_nums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 157, "Adversarial Code": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "Adversarial truth": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n        if (i === x) count += 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency(a, x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the frequency of a number in a given array."}
{"task_id": 351, "Adversarial Code": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => i === x).length;\n        if (occu > max_val) {\n        //begin to write code\n", "Adversarial truth": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => i === x).length;\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n\n    return result;\n}", "lang": "javascript", "code_str_generate": "function max_occurrences(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => i === x).length;\n        if (occu > max_val) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the item with maximum occurrences in a given list."}
{"task_id": 283, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nint max_val(const vector<int>& listval) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n    return *max_element(listval.begin(), listval.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 245, "Adversarial Code": "function wre(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n", "Adversarial truth": "function wre(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) ctr++;\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function wre(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 394, "Adversarial Code": "def check_tuplex(tuplex,tuple1):\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_tuplex(tuplex,tuple1): \n  if tuple1 in tuplex:\n    return True\n  else:\n     return False\n", "lang": "python", "code_str_generate": "def check_tuplex(tuplex,tuple1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether an element exists within a tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if tuple1 in tuplex:\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether an element exists within a tuple."}
{"task_id": 219, "Adversarial Code": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n        String str2 = str1.replace(' ', ch);\n        return str2;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n        String str2 = str1.replace(' ', ch);\n        return str2;\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n\n        /*\n        progame language:java\n        description:Write a function to replace blank spaces with any character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = str1.replace(' ', ch);\n        return str2;\n        //begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 239, "Adversarial Code": "class Solution {\n    public static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            if (ele == x) {\n                count++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            if (ele == x) {\n                count++;\n                double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_5 = temp_var_5 + 1;}\n                double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count_X(int[] arr, int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occcurences of an element in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int ele : arr) {\n        double temp_var_7 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            if (ele == x) {\n                count++;\n                //begin to write code\n", "prompt": "Write a java function to count the occcurences of an element in a tuple."}
{"task_id": 115, "Adversarial Code": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n            //begin to write code\n", "Adversarial truth": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n            let temp_var_5 = 9.9;temp_var_5 = temp_var_5 + 1;\n        }\n    }\n\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n            //begin to write code\n", "prompt": "Write a javascript function to find the sum of common divisors of two given numbers."}
{"task_id": 339, "Adversarial Code": "class Solution {\n    public int minimumLength(String s) {\n//This is a comment line.\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int minimumLength(String s) {\n//This is a comment line.\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] > maxOcc) {\n                maxOcc = arr[i];\n            }\n        }\n        return n - maxOcc;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int minimumLength(String s) {\n\n    /*\n    progame language:java\n    description:Write a java function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        //begin to write code\n", "prompt": "Write a java function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 115, "Adversarial Code": "def sum(a,b):\n    sum = 0\n    for i in range (1,min(a,b)): \n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "def sum(a,b): \n    sum = 0\n    for i in range (1,min(a,b)): \n#This is a comment line.\n        if (a % i == 0 and b % i == 0): \n            sum += i \n    return sum", "lang": "python", "code_str_generate": "def sum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range (1,min(a,b)): \n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a python function to find the sum of common divisors of two given numbers."}
{"task_id": 236, "Adversarial Code": "def lps(str):\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "Adversarial truth": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\treturn L[0][n-1]", "lang": "python", "code_str_generate": "def lps(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest palindromic subsequence in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "prompt": "Write a function to find the longest palindromic subsequence in the given string."}
{"task_id": 161, "Adversarial Code": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "Adversarial truth": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n\n\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_occurance(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 51, "Adversarial Code": "class Solution {\n    public\n static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n\n\n    public\n static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        return xs[0];\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int smallest_num(int[] xs) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest number in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(xs);\n        //begin to write code\n", "prompt": "Write a java function to find smallest number in a list."}
{"task_id": 80, "Adversarial Code": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n       #begin to write code\n", "Adversarial truth": "def find_substring(str1, sub_str):\n   if any(sub_str in s for s in str1):\n       return True\n   return False\n   temp_var_4 = 9.9\n   while temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1", "lang": "python", "code_str_generate": "def find_substring(str1, sub_str):\n\n   '''\n   progame language:python\n   description:Write a function to check if a substring is present in a given list of string values.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   if any(sub_str in s for s in str1):\n       return True\n       #begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 10, "Adversarial Code": "class Solution {\n    public List<Integer> multiples_of_num(int m, long n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> multiples_of_num(int m, long n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n        }\n        return multiples_of_num;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> multiples_of_num(int m, long n) {\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 115, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int z, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(z, b); i++) {\n        if (z % i == 0 && b % i == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <algorithm>\n\nint sum(int z, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(z, b); i++) {\n        if (z % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int z, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i < std::min(z, b); i++) {\n        if (z % i == 0 && b % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the sum of common divisors of two given numbers."}
{"task_id": 47, "Adversarial Code": "import collections\ndef opposite_Signs(x,y):\n    #begin to write code\n", "Adversarial truth": "import collections\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "lang": "python", "code_str_generate": "import collections\ndef opposite_Signs(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to check whether the given two integers have opposite sign or not."}
{"task_id": 320, "Adversarial Code": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < 1 + n) {\n        if (0 === (n & x)) {\n        //begin to write code\n", "Adversarial truth": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < 1 + n) {\n        if (0 === (n & x)) {\n            count = count + 1;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_unset_bits(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    let x = 1;\n    while (x < 1 + n) {\n        if (0 === (n & x)) {\n        //begin to write code\n", "prompt": "Write a javascript function to count unset bits of a given number."}
{"task_id": 15, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool ies = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                ies = false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool ies = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                ies = false;\n                break;\n            }\n        }\n        if (!ies) break;\n    }\n    return ies;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool ies = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                ies = false;\n//begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 107, "Adversarial Code": "function stringToList(string) {\n    let lst = string.split(\" \");\n    //begin to write code\n", "Adversarial truth": "function stringToList(string) {\n    let lst = string.split(\" \");\n    return lst;\n}\n\n", "lang": "javascript", "code_str_generate": "function stringToList(string) {\n\n    /*\n    progame language:javascript\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = string.split(\" \");\n    //begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 318, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n//This is a comment line.\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n//This is a comment line.\n    for (int num : list) {\n        if (num <= 0) {\n            neg_count += 1;\n        }\n    }\n    return neg_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int neg_count = 0;\n//This is a comment line.\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count negative numbers in a list."}
{"task_id": 107, "Adversarial Code": "def string_to_list(sgiimg):\n    lst = list(sgiimg.split(\" \")) \n    #begin to write code\n", "Adversarial truth": "def string_to_list(sgiimg): \n    lst = list(sgiimg.split(\" \")) \n    return lst", "lang": "python", "code_str_generate": "def string_to_list(sgiimg):\n\n    '''\n    progame language:python\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    lst = list(sgiimg.split(\" \")) \n    #begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 387, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\n\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n        std::get<2>(test_tup1) ^ std::get<2>(test_tup2),\n        std::get<3>(test_tup1) ^ std::get<3>(test_tup2)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": 315, "Adversarial Code": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n//This is a comment line.\n            for (String wrd : sub.split(\" \")) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n//This is a comment line.\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n            }\n        }\n        return Collections.max(temp.entrySet(), Map.Entry.comparingByValue()).getKey();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n\n        /*\n        progame language:java\n        description:Write a function to get the word with most number of occurrences in the given strings list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n//This is a comment line.\n            for (String wrd : sub.split(\" \")) {\n            //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 42, "Adversarial Code": "function check_Equality(str) {\n(function() {let temp_var_2 = 9.9; temp_var_2 = temp_var_2 + 1;})();\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n", "Adversarial truth": "function check_Equality(str) {\n(function() {let temp_var_2 = 9.9; temp_var_2 = temp_var_2 + 1;})();\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n  } else {\n    return \"Not Equal\";\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Equality(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(function() {let temp_var_2 = 9.9; temp_var_2 = temp_var_2 + 1;})();\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 298, "Adversarial Code": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n//This is a comment line.\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int maximum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to find the maximum of two numbers."}
{"task_id": 460, "Adversarial Code": "def find_remainder(arr, lens, n):\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "Adversarial truth": "def find_remainder(arr, lens, n): \n    mul = 1\n    for i in range(lens):  \n        mul = (mul * (arr[i] % n)) % n \n    return mul % n ", "lang": "python", "code_str_generate": "def find_remainder(arr, lens, n):\n\n    '''\n    progame language:python\n    description:Write a python function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mul = 1\n    for i in range(lens):  \n    #begin to write code\n", "prompt": "Write a python function to find remainder of array multiplication divided by n."}
{"task_id": 343, "Adversarial Code": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        final int var_0 = 1;\n        int tn = a + (n - var_0 ) * d;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        final int var_0 = 1;\n        int tn = a + (n - var_0 ) * d;\n        return tn;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of arithemetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 1;\n        int tn = a + (n - var_0 ) * d;\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of arithemetic progression."}
{"task_id": 281, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint uinw(int var_1, int var_0) {\n    int var_2 = var_1 / var_0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint uinw(int var_1, int var_0) {\n    int var_2 = var_1 / var_0;\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint uinw(int var_1, int var_0) {\n    int var_2 = var_1 / var_0;\n//begin to write code\n", "prompt": "Write a cpp function to find quotient of two numbers."}
{"task_id": 163, "Adversarial Code": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> function(vector<pair<string, int>> o) {\n    map<string, vector<int>> result;\n    for (auto& p : o) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> function(vector<pair<string, int>> o) {\n    map<string, vector<int>> result;\n    for (auto& p : o) {\n        result[p.first].push_back(p.second);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> function(vector<pair<string, int>> o) {\n    map<string, vector<int>> result;\n    for (auto& p : o) {\n//begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 117, "Adversarial Code": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "Adversarial truth": "def long_words(n, str):\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n        if len(x) > n:\n            word_len.append(x)\n    return word_len\t", "lang": "python", "code_str_generate": "def long_words(n, str):\n\n    '''\n    progame language:python\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    word_len = []\n    txt = str.split(\" \")\n    for x in txt:\n    #begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 189, "Adversarial Code": "import sys\ndef position_max(list1):\n    max_val = max(list1)\n    #begin to write code\n", "Adversarial truth": "import sys\ndef position_max(list1):\n    max_val = max(list1)\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\n    return max_result", "lang": "python", "code_str_generate": "import sys\ndef position_max(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = max(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 218, "Adversarial Code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "Adversarial truth": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "lang": "python", "code_str_generate": "def re_arrange_array(arr, n):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 217, "Adversarial Code": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n", "Adversarial truth": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether all the bits are unset in the given range or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to check whether all the bits are unset in the given range or not."}
{"task_id": 181, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n    bool flag_l = 0;\n    bool flag_n = 0;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = 1;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_String(const std::string& str) {\n    bool flag_l = 0;\n    bool flag_n = 0;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = 1;\n        }\n        if (isdigit(i)) {\n            flag_n = 1;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool flag_l = 0;\n    bool flag_n = 0;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = 1;\n//begin to write code\n", "prompt": "Write a cpp function to check whether a string has atleast one letter and one number."}
{"task_id": 417, "Adversarial Code": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            #begin to write code\n", "Adversarial truth": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n\n    return my_list", "lang": "python", "code_str_generate": "def shell_sort(my_list):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            #begin to write code\n", "prompt": "Write a function to sort the given array by using shell sort."}
{"task_id": 8, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    return arraynums.size() != nums_set.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 347, "Adversarial Code": "class Solution {\n    public List<Integer> mowdivLihg(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> mowdivLihg(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> mowdivLihg(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 334, "Adversarial Code": "def diff_consecutivenums(nums):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def diff_consecutivenums(nums):\n    result\\\n = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def diff_consecutivenums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 11, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint find_first_duplicate(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nint find_first_duplicate(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n        } else {\n            num_set.insert(num);\n        }\n    }\n    return no_duplicate;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint find_first_duplicate(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 354, "Adversarial Code": "import http\ndef count_Digit(n):\n    count = 0\n    while n != 0:\n    #begin to write code\n", "Adversarial truth": "import http\ndef count_Digit(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "lang": "python", "code_str_generate": "import http\ndef count_Digit(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    while n != 0:\n    #begin to write code\n", "prompt": "Write a python function to count the number of digits of a given number."}
{"task_id": 109, "Adversarial Code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n", "Adversarial truth": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n\n\n    return result_max", "lang": "python", "code_str_generate": "def max_product_tuple(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 29, "Adversarial Code": "const os = require('os');\nfunction freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n        //begin to write code\n", "Adversarial truth": "const os = require('os');\nfunction freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n        } else {\n            result[num] = 1;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const os = require('os');\nfunction freq_element(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n        //begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 60, "Adversarial Code": "class Solution {\n    public static int[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                    int temp = nums[i];\n                    nums[i] = nums[i + gaps];\n                    nums[i + gaps] = temp;\n                    swapped = true;\n                }\n                i += 1;\n            }\n        }\n        return nums;\n\n\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] combSort(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of elements using comb sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 9, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool is_woodall(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n    while (x % 2 == 0) {\n        x = x / 2;\n        p = p + 1;\n        if (p == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code\n", "prompt": "Write a function to check if the given number is woodball or not."}
{"task_id": 114, "Adversarial Code": "function urmd_lemggs(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n", "Adversarial truth": "function urmd_lemggs(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = Math.max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n", "lang": "javascript", "code_str_generate": "function urmd_lemggs(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string."}
{"task_id": 132, "Adversarial Code": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public int findLists(List<?> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of lists present in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find number of lists present in the given tuple."}
{"task_id": 281, "Adversarial Code": "def find(n,m):\n    q = n//m \n    #begin to write code\n", "Adversarial truth": "def find(n,m):  \n    q = n//m \n    return (q)", "lang": "python", "code_str_generate": "def find(n,m):\n\n    '''\n    progame language:python\n    description:Write a python function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    q = n//m \n    #begin to write code\n", "prompt": "Write a python function to find quotient of two numbers."}
{"task_id": 415, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<long> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<long> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    return x % 2 != 0; \n    });\n    return odd_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<long> filter_oddnumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 358, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n    const auto var_0 = 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint lateralsurface_cuboid(int l, int w, int h) {\n    const auto var_0 = 2;\n    int LSA = var_0  * h * (l + w);\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 2;\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 74, "Adversarial Code": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surfaceareaSphere(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 181, "Adversarial Code": "def check_String(str):\n    flag = False\n    result = False\n    for char in str: \n        if char.isalpha(): \n        #begin to write code\n", "Adversarial truth": "def check_String(str): \n    flag = False\n    result = False\n    for char in str: \n        if char.isalpha(): \n            flag = True  \n        if char.isdigit(): \n            result = True\n    return flag and result ", "lang": "python", "code_str_generate": "def check_String(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    flag = False\n    result = False\n    for char in str: \n        if char.isalpha(): \n        #begin to write code\n", "prompt": "Write a python function to check whether a string has atleast one letter and one number."}
{"task_id": 124, "Adversarial Code": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int hexagonalNum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (2 * n - 1);\n        //begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 245, "Adversarial Code": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num = num + 1) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i = i + 1) {\n        //begin to write code\n", "Adversarial truth": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num = num + 1) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i = i + 1) {\n            if (num % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) ctr = ctr + 1;\n    }\n    return ctr;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_Primes_nums(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let num = 0; num < n; num = num + 1) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i = i + 1) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 460, "Adversarial Code": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n", "Adversarial truth": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_remainder(arr, lens, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n", "prompt": "Write a javascript function to find remainder of array multiplication divided by n."}
{"task_id": 430, "Adversarial Code": "def surfacearea_cube(l):\n  surfacearea= l * 6*l\n  #begin to write code\n", "Adversarial truth": "def surfacearea_cube(l):\n  surfacearea= l * 6*l\n  return surfacearea", "lang": "python", "code_str_generate": "def surfacearea_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  surfacearea= l * 6*l\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 354, "Adversarial Code": "def clumg_Witig(n):\n    count = 0\n    while n != 0:\n    #begin to write code\n", "Adversarial truth": "def clumg_Witig(n):\n    count = 0\n    while n != 0:\n        n //= 10\n        count += 1\n    return count", "lang": "python", "code_str_generate": "def clumg_Witig(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    while n != 0:\n    #begin to write code\n", "prompt": "Write a python function to count the number of digits of a given number."}
{"task_id": 237, "Adversarial Code": "class Solution {\n    public static double harmonicSum(int n) {\n        if (n < 2) {\n            return 1;\n            double temp_var_2 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double harmonicSum(int n) {\n        if (n < 2) {\n            return 1;\n            double temp_var_2 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        } else {\n            return 1.0 / n + harmonicSum(n - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double harmonicSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the harmonic sum of n-1.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n < 2) {\n            return 1;\n            double temp_var_2 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            //begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 339, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n    return n - maxOcc;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n", "prompt": "Write a cpp function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 399, "Adversarial Code": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "Adversarial truth": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    let minVal = Math.min(...filtered);\n    return minVal;\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function minVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 105, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nlong tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (long num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nlong tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (long num : nums) {\n        result = result + (std::to_string(num));\n    }\n    return std::stoi(result);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nlong tuple_to_int(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (long num : nums) {\n//begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 84, "Adversarial Code": "class Solution {\n    public static int findMinLengts(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int findMinLengts(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n            }\n        }\n        return minLength;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int findMinLengts(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n", "prompt": "Write a java function to find the minimum length of sublist."}
{"task_id": 401, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> function(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return l;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> function(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n", "prompt": "Write a cpp function to remove odd numbers from a given list."}
{"task_id": 421, "Adversarial Code": "#include <thread>\n#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n", "Adversarial truth": "#include <thread>\n\n#include <iostream>\n#include <cassert>\n\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n    return median;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <thread>\n#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 323, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n    if\\\n ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_Validity(int a, int b, int c) {\n    if\\\n ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if\\\n ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the triangle is valid or not if sides are given."}
{"task_id": 222, "Adversarial Code": "import datetime\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "Adversarial truth": "import datetime\ndef lateralsuface_cylinder(r,h):\n  lateralsurface= 2*3.1415*r*h\n  return lateralsurface", "lang": "python", "code_str_generate": "import datetime\ndef lateralsuface_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lateralsurface= 2*3.1415*r*h\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 368, "Adversarial Code": "class Solution {\n    public static int area(int h, int s, int r) {\n        int area = 2 * (h * s + h * r + s * r);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int area(int h, int s, int r) {\n        int area = 2 * (h * s + h * r + s * r);\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int area(int h, int s, int r) {\n        int area = 2 * (h * s + h * r + s * r);\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 461, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nconst auto var_3 = 9.9;\nconst auto var_4 = 9.12;\nbool check_Consecutive(std::vector<int> l) {\n    const auto var_0 = 1;\n    std::sort(l.begin(), l.end());\n    for (int i = var_0 ; i < l.size(); ++i) {\n        const auto var_1 = 1;\n        const auto var_2 = 1;\n//begin to write code\n", "Adversarial truth": "const auto var_3 = 9.9;\nconst auto var_4 = 9.12;\n#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool check_Consecutive(std::vector<int> l) {\n    const auto var_0 = 1;\n    std::sort(l.begin(), l.end());\n    for (int i = var_0 ; i < l.size(); ++i) {\n        const auto var_1 = 1;\n        const auto var_2 = 1;\n        if (l[i] != l[i - var_1 ] + var_2 ) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\ndouble temp_var_3 = var_3 ;while (temp_var_3 < var_4 ) {std::cout << var_5  << std::endl;temp_var_3 = temp_var_3 + var_6 ;}\nconst std::string var_5 = \"This function is used to remove a item of a list\";\nconst auto var_6 = 1;\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nconst auto var_3 = 9.9;\nconst auto var_4 = 9.12;\nbool check_Consecutive(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 1;\n    std::sort(l.begin(), l.end());\n    for (int i = var_0 ; i < l.size(); ++i) {\n        const auto var_1 = 1;\n        const auto var_2 = 1;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given list contains consecutive numbers or not."}
{"task_id": 229, "Adversarial Code": "class Solution {\n    public static List<Object> rekoacvLrst(List<Object> orhg1, List<Object> list2) {\n        orhg1.remove(orhg1.size() - 1);\n        orhg1.addAll(list2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> rekoacvLrst(List<Object> orhg1, List<Object> list2) {\n        orhg1.remove(orhg1.size() - 1);\n        orhg1.addAll(list2);\n        return orhg1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> rekoacvLrst(List<Object> orhg1, List<Object> list2) {\n        orhg1.remove(orhg1.size() - 1);\n        orhg1.addAll(list2);\n        //begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 44, "Adversarial Code": "import math\ndef tn_gp(a,n,r):\n  tn\\\n  #begin to write code\n", "Adversarial truth": "import math\ndef tn_gp(a,n,r):\n  tn\\\n = a * (math.pow(r, n - 1))\n  return tn", "lang": "python", "code_str_generate": "import math\ndef tn_gp(a,n,r):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of geometric series.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  tn\\\n  #begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 359, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& y) {\n        return stof(a.second) > stof(y.second);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& y) {\n        return stof(a.second) > stof(y.second);\n    });\n    return items;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a tuple by its float element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& y) {\n        return stof(a.second) > stof(y.second);\n//begin to write code\n", "prompt": "Write a function to sort a tuple by its float element."}
{"task_id": 116, "Adversarial Code": "function multiply_int(x, y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n        //begin to write code\n", "Adversarial truth": "function multiply_int(x, y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n    } else if (y === 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function multiply_int(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a function to multiply two integers without using the * operator in javascript.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n        //begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in javascript."}
{"task_id": 145, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<long, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<long, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        int second = stoi(get<1>(x));\n        result.push_back(make_tuple(first, second));\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<long, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 101, "Adversarial Code": "class Solution {\n    public static int func_0(int diameter, int height) {\n        return 2 * (diameter + height);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int diameter, int height) {\n        return 2 * (diameter + height);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int diameter, int height) {\n        return 2 * (diameter + height);\n        //begin to write code\n", "prompt": "Write a java function to find the perimeter of a cylinder."}
{"task_id": 238, "Adversarial Code": "import java.util.*;\nimport java.security.*;\nclass Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    break;\n                    //begin to write code\n", "Adversarial truth": "import java.util.*;\nimport java.security.*;\nclass Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    break;\n                }\n            }\n            double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nimport java.security.*;\nclass Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the intersection of two arrays using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    break;\n                    //begin to write code\n", "prompt": "Write a function to find the intersection of two arrays using lambda function."}
{"task_id": 44, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n    double tn = pow(r, n - 1) * a;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble tn_gp(double a, int n, double r) {\n    double tn = pow(r, n - 1) * a;\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double tn = pow(r, n - 1) * a;\n//begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 55, "Adversarial Code": "function sfm(arr) {\n    let j = 0;\n    for (let i of arr) {\n        if (i >= 0) {\n        //begin to write code\n", "Adversarial truth": "function sfm(arr) {\n    let j = 0;\n    for (let i of arr) {\n        if (i >= 0) {\n            j += 1;\n        }\n    }\n    return j;\n}\n\n", "lang": "javascript", "code_str_generate": "function sfm(arr) {\n    let j = 0;\n    for (let i of arr) {\n        if (i >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to count positive numbers in a list."}
{"task_id": 342, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> func_0(std::vector<std::vector<int>>& var_0, int var_1) {\n    for (auto& var_2 : var_0) {\n        var_2.erase(var_2.begin() + var_1);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::vector<int>> func_0(std::vector<std::vector<int>>& var_0, int var_1) {\n    for (auto& var_2 : var_0) {\n        var_2.erase(var_2.begin() + var_1);\n    }\n    return var_0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> func_0(std::vector<std::vector<int>>& var_0, int var_1) {\n    for (auto& var_2 : var_0) {\n        var_2.erase(var_2.begin() + var_1);\n//begin to write code\n", "prompt": "Write a function to remove a specified column from a given nested list."}
{"task_id": 323, "Adversarial Code": "def any(var_0,var_1,var_2):\n    if (var_0 + var_1 <= var_2) or (var_0 + var_2 <= var_1) or (var_1 + var_2 <= var_0) : \n        return False\n        #begin to write code\n", "Adversarial truth": "def any(var_0,var_1,var_2):  \n    if (var_0 + var_1 <= var_2) or (var_0 + var_2 <= var_1) or (var_1 + var_2 <= var_0) : \n        return False\n    else: \n        return True        ", "lang": "python", "code_str_generate": "def any(var_0,var_1,var_2):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (var_0 + var_1 <= var_2) or (var_0 + var_2 <= var_1) or (var_1 + var_2 <= var_0) : \n        return False\n        #begin to write code\n", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": 86, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n    for (auto& num : flat_list) {\n        if (dic_data.end() != dic_data.find(num)) {\n            dic_data[num]++;\n        } else {\n            dic_data[num] = 1;\n        }\n    }\n    return dic_data;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 496, "Adversarial Code": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        return list1;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n\n        /*\n        progame language:java\n        description:Write a function to remove specific words from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.removeAll(removewords);\n        //begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 420, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool\\\n common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ntemplate <typename T>\nbool\\\n common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool\\\n common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function that takes two lists and returns true if they have at least one common element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 248, "Adversarial Code": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n//This is a comment line.\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n//This is a comment line.\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n\n    /*\n    progame language:java\n    description:Write a function to maximize the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n            //begin to write code\n", "prompt": "Write a function to maximize the given two tuples."}
{"task_id": 194, "Adversarial Code": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the inversions of tuple elements in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"task_id": 23, "Adversarial Code": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return (-1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findMissing(int ar[], int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the missing number in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n", "prompt": "Write a java function to find the missing number in a sorted array."}
{"task_id": 488, "Adversarial Code": "function diameter_circle(r) {\n    let drzmetei = 2 * r;\n    //begin to write code\n", "Adversarial truth": "function diameter_circle(r) {\n    let drzmetei = 2 * r;\n    return drzmetei;\n}\n\n", "lang": "javascript", "code_str_generate": "function diameter_circle(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the diameter of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let drzmetei = 2 * r;\n    //begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 493, "Adversarial Code": "class Solution {\n    public static int sum_Of_Series(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sum_Of_Series(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return sum;\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sum_Of_Series(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the cube sum of first n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n", "prompt": "Write a java function to find the cube sum of first n natural numbers."}
{"task_id": 9, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    const auto var_2 = 1;\n    const auto var_3 = 1;\n    const auto var_4 = 0;\n    const auto var_5 = 2;\n    const auto var_6 = 0;\n    if (x % var_0  == var_1 ) {\n        return false;\n    }\n    if (x == var_2 ) {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool is_woodall(long long x) {\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    const auto var_2 = 1;\n    const auto var_3 = 1;\n    const auto var_4 = 0;\n    const auto var_5 = 2;\n    const auto var_6 = 0;\n    if (x % var_0  == var_1 ) {\n        return false;\n    }\n    if (x == var_2 ) {\n        return true;\n    }\n    x = x + var_3 ;\n    long long p = var_4 ;\n    while (x % var_5  == var_6 ) {\n        const auto var_7 = 2;\n        const auto var_8 = 1;\n        x = x / var_7 ;\n        p = p + var_8 ;\n        if (p == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 2;\n    const auto var_1 = 0;\n    const auto var_2 = 1;\n    const auto var_3 = 1;\n    const auto var_4 = 0;\n    const auto var_5 = 2;\n    const auto var_6 = 0;\n    if (x % var_0  == var_1 ) {\n        return false;\n    }\n    if (x == var_2 ) {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check if the given number is woodball or not."}
{"task_id": 420, "Adversarial Code": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (y == x) {\n                    result = true;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (y == x) {\n                    result = true;\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n\n        /*\n        progame language:java\n        description:Write a function that takes two lists and returns true if they have at least one common element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (y == x) {\n                    result = true;\n                    //begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 386, "Adversarial Code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "Adversarial truth": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "lang": "python", "code_str_generate": "def median_numbers(a,b,c):\n\n '''\n progame language:python\n description:Write a function to find the median of three specific numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 18, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> vec, int n) {\n    for (int k = 0; k < n; k++) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (vec[k] == vec[i]) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint get_Odd_Occurrence(std::vector<int> vec, int n) {\n    for (int k = 0; k < n; k++) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (vec[k] == vec[i]) {\n                count++;\n            }\n        }\n        if (count % 2 != 0) {\n            return vec[k];\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> vec, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int k = 0; k < n; k++) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (vec[k] == vec[i]) {\n                count++;\n            }\n//begin to write code\n", "prompt": "Write a cpp function to find the element occurring odd number of times."}
{"task_id": 302, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n\n\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n\n\n\n\n    return result;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to print positive numbers in a list."}
{"task_id": 398, "Adversarial Code": "const util = require('util');\nfunction minProductTuple(list1) {\n//begin to write code\n", "Adversarial truth": "const util = require('util');\nfunction minProductTuple(list1) {\n    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));\n    return resultMin;\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nfunction minProductTuple(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list."}
{"task_id": 52, "Adversarial Code": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n//This is a comment line.\n  let res = Math.max(...temp);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_difference(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 248, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test, const vector<tuple<int, int>>& result) {\n    vector<tuple<int, int>> System;\n    for(size_t uple = 0; uple < test.size(); ++uple) {\n        int first = max(get<0>(test[uple]), get<0>(result[uple]));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test, const vector<tuple<int, int>>& result) {\n    vector<tuple<int, int>> System;\n    for(size_t uple = 0; uple < test.size(); ++uple) {\n        int first = max(get<0>(test[uple]), get<0>(result[uple]));\n        int second = max(get<1>(test[uple]), get<1>(result[uple]));\n        System.push_back(make_tuple(first, second));\n    }\n    return System;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test, const vector<tuple<int, int>>& result) {\n\n    /*\n    progame language:cpp\n    description:Write a function to maximize the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> System;\n    for(size_t uple = 0; uple < test.size(); ++uple) {\n        int first = max(get<0>(test[uple]), get<0>(result[uple]));\n//begin to write code\n", "prompt": "Write a function to maximize the given two tuples."}
{"task_id": 260, "Adversarial Code": "class Solution {\n    public static int evemPowerSfm(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int evemPowerSfm(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            sum = sum + (j * j * j * j * j);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int evemPowerSfm(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fifth power of first n even natural numbers."}
{"task_id": 190, "Adversarial Code": "function chkList(lst) { \n//begin to write code\n", "Adversarial truth": "function chkList(lst) { \n    return new Set(lst).size === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function chkList(lst) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the elements in a list are same or not."}
{"task_id": 373, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency_Of_Smallest\\\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint\\\n frequency_Of_Smallest\\\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint\\\n frequency_Of_Smallest\\\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the smallest value in a given array."}
{"task_id": 465, "Adversarial Code": "class Solution {\n    public int solve(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int solve(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            if(num < min) {\n                min = num;\n            }\n        }\n        return max + min;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int solve(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n", "prompt": "Write a java function to find the sum of the largest and smallest value in a given array."}
{"task_id": 193, "Adversarial Code": "function count(s, c) {\n    let res = 0;\n    for (let r = 0; r < s.length; r++) {\n        if (s[r] === c) {\n        //begin to write code\n", "Adversarial truth": "function count(s, c) {\n    let res = 0;\n    for (let r = 0; r < s.length; r++) {\n        if (s[r] === c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let r = 0; r < s.length; r++) {\n        if (s[r] === c) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurrence of a given character in a string."}
{"task_id": 98, "Adversarial Code": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        {\n            int i = 0;\n            while(i < n){\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        {\n            int i = 0;\n            while(i < n){\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n            }\n                    i++;\n            }\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the count of rotations of a binary string with odd value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        {\n            int i = 0;\n            while(i < n){\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n                //begin to write code\n", "prompt": "Write a java function to find the count of rotations of a binary string with odd value."}
{"task_id": 53, "Adversarial Code": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "Adversarial truth": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "lang": "python", "code_str_generate": "def subject_marks(subjectmarks):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    #begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 473, "Adversarial Code": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n", "Adversarial truth": "def remove_matching_tuple(test_list1, test_list2):\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  return (res) ", "lang": "python", "code_str_generate": "def remove_matching_tuple(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to remove the matching tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [sub for sub in test_list1 if sub not in test_list2]\n  #begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 237, "Adversarial Code": "def szimlnrc_hum(ear_9):\n  if ear_9 < 2:\n    return 1\n    #begin to write code\n", "Adversarial truth": "def szimlnrc_hum(ear_9):\n  if ear_9 < 2:\n    return 1\n  else:\n    return 1 / ear_9 + (szimlnrc_hum(ear_9 - 1)) ", "lang": "python", "code_str_generate": "def szimlnrc_hum(ear_9):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the harmonic sum of n-1.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if ear_9 < 2:\n    return 1\n    #begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 348, "Adversarial Code": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n        //begin to write code\n", "Adversarial truth": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function Check_Solution(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n        //begin to write code\n", "prompt": "Write a javascript function to check whether one root of the quadratic equation is twice of the other or not."}
{"task_id": 305, "Adversarial Code": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n            } else if (x < A[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n\n        /*\n        progame language:java\n        description:Write a function to find the index of the last occurrence of a given number in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n                //begin to write code\n", "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array."}
{"task_id": 255, "Adversarial Code": "function\n lateralsurface_cube(l) {\n //begin to write code\n", "Adversarial truth": "function\n lateralsurface_cube(l) {\n    const LSA = 4 * (l * l);\n    return LSA;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n lateralsurface_cube(l) {\n\n /*\n progame language:javascript\n description:Write a function to find the lateral surface area of a cube.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 255, "Adversarial Code": "class Solution {\n    public static int func_0(int l) {\n        int LSA = 4 * (l * l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int func_0(int l) {\n        int LSA = 4 * (l * l);\n        return LSA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int func_0(int l) {\n        int LSA = 4 * (l * l);\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 252, "Adversarial Code": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n", "Adversarial truth": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    sortedKeys.forEach(key => {\n    sortedDict[key] = d[key];\n    });\n\n\n    return sortedDict;\n}", "lang": "javascript", "code_str_generate": "function merge_dict(d1, d2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge two dictionaries.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 386, "Adversarial Code": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "Adversarial truth": "def median_numbers(a,b,c):\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n else:\n\n\n    if a > c:\n        median = a\n    elif b < c:\n        median = b\n    else:\n        median = c\n return median", "lang": "python", "code_str_generate": "def median_numbers(a,b,c):\n\n '''\n progame language:python\n description:Write a function to find the median of three specific numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if a > b:\n    if a < c:\n        median = a\n    elif b > c:\n        median = b\n    else:\n        median = c\n        #begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 377, "Adversarial Code": "def highest_Power_of_2(n):\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "Adversarial truth": "def highest_Power_of_2(n): \n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n            res = i; \n            break; \n    return res; ", "lang": "python", "code_str_generate": "def highest_Power_of_2(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    res = 0; \n    for i in range(n, 0, -1): \n        if ((i & (i - 1)) == 0): \n        #begin to write code\n", "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 439, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd\\\n::\\\nvector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd\\\n::\\\nvector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd\\\n::\\\nvector<std::string> extract_string(std::vector<std::string> vec, int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n//begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 159, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 16, "Adversarial Code": "function remove(list) {\n    return list\n    //begin to write code\n", "Adversarial truth": "function remove(list) {\n    return list\n.map(i => i.replace(/[0-9]/g, ''));\n}\n\n", "lang": "javascript", "code_str_generate": "function remove(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return list\n    //begin to write code\n", "prompt": "Write a javascript function to remove all digits from a list of strings."}
{"task_id": 485, "Adversarial Code": "import heapq as hq\ndef heap_queue_smallest(self,queue):\n  result = hq.nsmallest(queue, self)\n  #begin to write code\n", "Adversarial truth": "import heapq as hq\ndef heap_queue_smallest(self,queue):\n  result = hq.nsmallest(queue, self)\n  return result", "lang": "python", "code_str_generate": "import heapq as hq\ndef heap_queue_smallest(self,queue):\n\n  '''\n  progame language:python\n  description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = hq.nsmallest(queue, self)\n  #begin to write code\n", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": 463, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string func_0(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n        }\n    }\n    return str1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 321, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> func_0(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, int> func_0(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> func_0(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 204, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector\\\n<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\n\nvector\\\n<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n            }\n        } else {\n            result.push_back(g[0]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector\\\n<int> decode_list(const vector<vector<int>>& alist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n", "prompt": "Write a function to decode a run-length encoded given list."}
{"task_id": 411, "Adversarial Code": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (i * i * i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (i * i * i);\n        }\n        return Math.round(sum / n * 1000000.0) / 1000000.0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double findAverageOfCube(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the average of cubes of first n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double sum = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            sum = sum + (i * i * i);\n            //begin to write code\n", "prompt": "Write a java function to find the average of cubes of first n natural numbers."}
{"task_id": 364, "Adversarial Code": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n", "Adversarial truth": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n", "lang": "javascript", "code_str_generate": "function round_num(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 86, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\n\n\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n    for (auto& num : flat_list) {\n        if (dic_data.find(num) != dic_data.end()) {\n            dic_data[num]++;\n        } else {\n            dic_data[num] = 1;\n        }\n    }\n    return dic_data;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 1, "Adversarial Code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n", "Adversarial truth": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "lang": "python", "code_str_generate": "def sort_matrix(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 131, "Adversarial Code": "#include <iomanip>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "Adversarial truth": "#include <iomanip>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iomanip>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 182, "Adversarial Code": "#include <sstream>\n#include <sstream>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> remove_tuple(const vector<int>& test_vec) {\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\ndouble temp_var_3 = var_0 ;while (temp_var_3 < var_1 ) {std::cout << var_2  << std::endl;temp_var_3 = temp_var_3 + var_3 ;}\n//begin to write code\n", "Adversarial truth": "#include <sstream>\n#include <sstream>\n\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\n\nvector<int> remove_tuple(const vector<int>& test_vec) {\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\ndouble temp_var_3 = var_0 ;while (temp_var_3 < var_1 ) {std::cout << var_2  << std::endl;temp_var_3 = temp_var_3 + var_3 ;}\n  const std::string var_2 = \"This function is used to remove a item of a list\";\n  const auto var_3 = 1;\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n  return vector<int>(unique_elements.begin(), unique_elements.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <sstream>\n#include <sstream>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> remove_tuple(const vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove the duplicates from the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\ndouble temp_var_3 = var_0 ;while (temp_var_3 < var_1 ) {std::cout << var_2  << std::endl;temp_var_3 = temp_var_3 + var_3 ;}\n//begin to write code\n", "prompt": "Write a function to remove the duplicates from the given tuple."}
{"task_id": 316, "Adversarial Code": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is isosceles or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 74, "Adversarial Code": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surfaceareaSphere(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 487, "Adversarial Code": "class Solution {\n    public int gcd(int x, int y) {\n        int tcw = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int gcd(int x, int y) {\n        int tcw = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n                tcw = k;\n                break;\n            }\n        }\n        return tcw;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int gcd(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find gcd of two positive integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int tcw = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "prompt": "Write a java function to find gcd of two positive integers."}
{"task_id": 408, "Adversarial Code": "def round_and_sum(list1):\n  lenght=len(list1)\n  #begin to write code\n", "Adversarial truth": "def round_and_sum(list1):\n  lenght=len(list1)\n  round_and_sum=sum(list(map(round,list1))* lenght)\n  return round_and_sum", "lang": "python", "code_str_generate": "def round_and_sum(list1):\n\n  '''\n  progame language:python\n  description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lenght=len(list1)\n  #begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 297, "Adversarial Code": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n            }\n        }\n        Collections.sort(result, Collections.reverseOrder());\n        return result.subList(var_0 , N);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to find the specified number of largest products from two given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n", "prompt": "Write a function to find the specified number of largest products from two given lists."}
{"task_id": 22, "Adversarial Code": "function decimal_To_Binary(var_1) {\n    let var_0 = 0;\n    let var_3 = 0;\n    while (var_1 != 0) {\n        let var_4 = var_1 % 2;\n        let var_2 = Math.pow(10, var_3);\n        //begin to write code\n", "Adversarial truth": "function decimal_To_Binary(var_1) {\n    let var_0 = 0;\n    let var_3 = 0;\n    while (var_1 != 0) {\n        let var_4 = var_1 % 2;\n        let var_2 = Math.pow(10, var_3);\n        var_0 += var_4 * var_2;\n        var_1 = Math.floor(var_1 / 2);\n        var_3 += 1;\n    }\n    return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_To_Binary(var_1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_0 = 0;\n    let var_3 = 0;\n    while (var_1 != 0) {\n        let var_4 = var_1 % 2;\n        let var_2 = Math.pow(10, var_3);\n        //begin to write code\n", "prompt": "Write a javascript function to convert a decimal number to binary number."}
{"task_id": 115, "Adversarial Code": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function sum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of common divisors of two given numbers."}
{"task_id": 245, "Adversarial Code": "def count_Primes_nums(n):\n    var_0 = 0\n    ctr = var_0 \n    for num in range(n):\n        var_1 = 1\n        if num <= var_1 :\n            continue\n        var_2 = 2\n        for i in range(var_2 ,num):\n        #begin to write code\n", "Adversarial truth": "def count_Primes_nums(n):\n    var_0 = 0\n    ctr = var_0 \n    for num in range(n):\n        var_1 = 1\n        if num <= var_1 :\n            continue\n        var_2 = 2\n        for i in range(var_2 ,num):\n            var_3 = 0\n            if (num % i) == var_3 :\n                break\n        else:\n            var_4 = 1\n            ctr += var_4 \n            temp_var_10 = 9.9\n            if temp_var_10 < 9.12: print('This function is used to remove a item of a list'); temp_var_10 += 1\n    return ctr", "lang": "python", "code_str_generate": "def count_Primes_nums(n):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    ctr = var_0 \n    for num in range(n):\n        var_1 = 1\n        if num <= var_1 :\n            continue\n        var_2 = 2\n        for i in range(var_2 ,num):\n        #begin to write code\n", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 86, "Adversarial Code": "def frequency_lists(frequencies):\n    frequencies = [i for f in frequencies for i in f]\n    result = {}\n    for frequency in frequencies:\n        if frequency in result.keys():\n            result[frequency] += 1\n            #begin to write code\n", "Adversarial truth": "def frequency_lists(frequencies):\n    frequencies = [i for f in frequencies for i in f]\n    result = {}\n    for frequency in frequencies:\n        if frequency in result.keys():\n            result[frequency] += 1\n        else:\n            key = frequency\n            count = 1\n            result[key] = count\n    return result\n", "lang": "python", "code_str_generate": "def frequency_lists(frequencies):\n\n    '''\n    progame language:python\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    frequencies = [i for f in frequencies for i in f]\n    result = {}\n    for frequency in frequencies:\n        if frequency in result.keys():\n            result[frequency] += 1\n            #begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 29, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n            result[num]++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 133, "Adversarial Code": "def sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "Adversarial truth": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum = sum + (i*arr[i] - (n-1-i) * arr[i]) \n    return sum", "lang": "python", "code_str_generate": "def sum_Pairs(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 113, "Adversarial Code": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "Adversarial truth": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    return angle;\n}", "lang": "javascript", "code_str_generate": "function angle_complex(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const angle = Math.atan2(b, a);\n    //begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 22, "Adversarial Code": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            B_Number += rem * c;\n            N /= 2;\n            cnt += 1;\n        }\n        return B_Number;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int decimal_To_Binary(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert a decimal number to binary number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n", "prompt": "Write a java function to convert a decimal number to binary number."}
{"task_id": 250, "Adversarial Code": "def division_elements(test_tup1, test_tup2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def division_elements(test_tup1, test_tup2):\n  res\\\n = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def division_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform mathematical division operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 55, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\nint pos_count(const std::vector<int>& list) {\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n//This is a comment line.\n//This is a comment line.\n#include <vector>\n#include <cassert>\n\nint pos_count(const std::vector<int>& list) {\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n//This is a comment line.\n            pos_count++;\n        }\n    }\n    return pos_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\nint pos_count(const std::vector<int>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count positive numbers in a list."}
{"task_id": 160, "Adversarial Code": "function perimeter_pentagon(x) {\n//begin to write code\n", "Adversarial truth": "function perimeter_pentagon(x) {\n  return 5 * x;\n}\n\n", "lang": "javascript", "code_str_generate": "function perimeter_pentagon(x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 389, "Adversarial Code": "def extract_freq(test_list):\n  ieh = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  #begin to write code\n", "Adversarial truth": "def extract_freq(test_list):\n  ieh = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  return (ieh)", "lang": "python", "code_str_generate": "def extract_freq(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ieh = len(list(set(tuple(sorted(sub)) for sub in test_list)))\n  #begin to write code\n", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": 192, "Adversarial Code": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "Adversarial truth": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n        setBits += x & 1;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n", "lang": "javascript", "code_str_generate": "function hamming_Distance(n1, n2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the hamming distance between given two integers."}
{"task_id": 315, "Adversarial Code": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n          temp[wrd] = 1;\n        }\n      });\n    });\n    let res = Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);\n    return res;\n  }", "lang": "javascript", "code_str_generate": "function mostOccurrences(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 131, "Adversarial Code": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "Adversarial truth": "def count_samepair(list1,list2,list3):\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    return result", "lang": "python", "code_str_generate": "def count_samepair(list1,list2,list3):\n\n    '''\n    progame language:python\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\n    #begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 265, "Adversarial Code": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = h * r * 3.1415 * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = h * r * 3.1415 * r;\n        return volume;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = h * r * 3.1415 * r;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 165, "Adversarial Code": "def perimeter(a,b,c):\n  perimeter=a+b+c\n  #begin to write code\n", "Adversarial truth": "def perimeter(a,b,c):\n  perimeter=a+b+c\n  return perimeter", "lang": "python", "code_str_generate": "def perimeter(a,b,c):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=a+b+c\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 480, "Adversarial Code": "function sum_gp(a, n, r) {\n    let total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n    //begin to write code\n", "Adversarial truth": "function sum_gp(a, n, r) {\n    let total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_gp(a, n, r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of geometric progression series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = ((1 - Math.pow(r, n)) * a) / (1 - r);\n    //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 401, "Adversarial Code": "#include <iostream>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n//This is a comment line.\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return l;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nstd::vector<int> remove_odd(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n", "prompt": "Write a cpp function to remove odd numbers from a given list."}
{"task_id": 117, "Adversarial Code": "function longWords(n, str) {\n    let wordLen = [];\n    let\n txt = str.split(\" \");\n    for (let x of txt) {\n    //begin to write code\n", "Adversarial truth": "function longWords(n, str) {\n    let wordLen = [];\n    let\n txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n            wordLen.push(x);\n        }\n    }\n    return wordLen;\n}\n\n", "lang": "javascript", "code_str_generate": "function longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let wordLen = [];\n    let\n txt = str.split(\" \");\n    for (let x of txt) {\n    //begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 188, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    {\n        int i = 0;\n        for(;(i < list1.size());){\n        if (list1[i] == max_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    {\n        int i = 0;\n        for(;(i < list1.size());){\n        if (list1[i] == max_val) {\n            max_result.push_back(i);\n        }\n            ++i;\n        }\n    }\n    return max_result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    {\n        int i = 0;\n        for(;(i < list1.size());){\n        if (list1[i] == max_val) {\n//begin to write code\n", "prompt": "Write a cpp function to find highest power of 2 less than or equal to given number."}
{"task_id": 329, "Adversarial Code": "class Solution {\n    public static int sumThreeSmallestNums(int[] solutions) {\n        Arrays.sort(solutions);\n        int result = 0;\n        int n = 0;\n        for (int j = 0; j < solutions.length; j++) {\n            if (solutions[j] > 0) {\n                result += solutions[j];\n                n++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumThreeSmallestNums(int[] solutions) {\n        Arrays.sort(solutions);\n        int result = 0;\n        int n = 0;\n        for (int j = 0; j < solutions.length; j++) {\n            if (solutions[j] > 0) {\n                result += solutions[j];\n                n++;\n                if (n == 3) {\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumThreeSmallestNums(int[] solutions) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the three lowest positive numbers from a given list of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(solutions);\n        int result = 0;\n        int n = 0;\n        for (int j = 0; j < solutions.length; j++) {\n            if (solutions[j] > 0) {\n                result += solutions[j];\n                n++;\n                //begin to write code\n", "prompt": "Write a java function to find the sum of the three lowest positive numbers from a given list of numbers."}
{"task_id": 85, "Adversarial Code": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (0 === n % i) {\n        //begin to write code\n", "Adversarial truth": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (0 === n % i) {\n            x++;\n        }\n    }\n    return x;\n}\n\n", "lang": "javascript", "code_str_generate": "function divisor(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (0 === n % i) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the number of divisors of a given integer."}
{"task_id": 160, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(long a) {\n    long perimeter = a * 5;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint perimeter_pentagon(long a) {\n    long perimeter = a * 5;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(long a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long perimeter = a * 5;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 192, "Adversarial Code": "def\\\n hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    #begin to write code\n", "Adversarial truth": "def\\\n hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    while (x > 0) : \n        setBits += x & 1\n        x >>= 1\n    return setBits  \n\n\n", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to find the hamming distance between given two integers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n hamming_Distance(n1,n2) : \n    x = n1 ^ n2  \n    setBits = 0\n    #begin to write code\n", "prompt": "Write a python function to find the hamming distance between given two integers."}
{"task_id": 373, "Adversarial Code": "def frvqfemcy_Of_Smaooest(n,arr):\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "Adversarial truth": "def frvqfemcy_Of_Smaooest(n,arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq ", "lang": "python", "code_str_generate": "def frvqfemcy_Of_Smaooest(n,arr):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    mn = arr[0] \n    freq = 1\n    for i in range(1,n): \n        if (arr[i] < mn): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the smallest value in a given array."}
{"task_id": 325, "Adversarial Code": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnum(monthname1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 28 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 284, "Adversarial Code": "def div(number):\n    divisors = [1]\n    for i in range(2, number):\n    #begin to write code\n", "Adversarial truth": "def div(number):\n    divisors = [1]\n    for i in range(2, number):\n        if (number % i)==0:\n            divisors.append(i)\n    return sum(divisors)", "lang": "python", "code_str_generate": "def div(number):\n\n    '''\n    progame language:python\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    divisors = [1]\n    for i in range(2, number):\n    #begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 160, "Adversarial Code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  #begin to write code\n", "Adversarial truth": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  lambda: print('This function is used to remove a item of a list')\n  return perimeter", "lang": "python", "code_str_generate": "import math\ndef perimeter_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=(5*a)\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 260, "Adversarial Code": "const assert = require('assert');\nfunction even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n", "Adversarial truth": "const assert = require('assert');\nfunction even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let j = 2 * i; \n        sum += Math.pow(j, 5); \n    } \n    return sum; \n} \n\n", "lang": "javascript", "code_str_generate": "const assert = require('assert');\nfunction even_Power_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of fifth power of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of fifth power of first n even natural numbers."}
{"task_id": 279, "Adversarial Code": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    const auto var_0 = 0;\n    int max_length = var_0 ;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    const auto var_0 = 0;\n    int max_length = var_0 ;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n            max_length = x.size();\n            max_list = x;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    int max_length = var_0 ;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n", "prompt": "Write a function to find the list of lists with maximum length."}
{"task_id": 400, "Adversarial Code": "function snakeToCamel(word) {\n//begin to write code\n", "Adversarial truth": "function snakeToCamel(word) {\n  return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');\n}\n\n", "lang": "javascript", "code_str_generate": "function snakeToCamel(word) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given snake case string to camel case string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to convert the given snake case string to camel case string by using regex."}
{"task_id": 273, "Adversarial Code": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether all items of a list are equal to a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 76, "Adversarial Code": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n//This is a comment line.\n        mergedDict.putAll(dict1);\n        return mergedDict;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n\n        /*\n        progame language:java\n        description:Write a function to merge three dictionaries into a single expression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n", "prompt": "Write a function to merge three dictionaries into a single expression."}
{"task_id": 156, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint next_Power_Of_2(int n) {\n    int count = 0;\n    if (n && !((n - 1) & n)) {\n        return n;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint next_Power_Of_2(int n) {\n    int count = 0;\n    if (n && !((n - 1) & n)) {\n        return n;\n    }\n    while (0 != n) {\n        n >>= 1;\n        count++;\n    }\n    return 1 << count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint next_Power_Of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    if (n && !((n - 1) & n)) {\n        return n;\n    }\n//begin to write code\n", "prompt": "Write a cpp function to find smallest power of 2 greater than or equal to n."}
{"task_id": 356, "Adversarial Code": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n}\n//begin to write code\n", "Adversarial truth": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n}\n\nfunction is_tree_balanced(root) {\n    if (root === null) {\n        return true;\n    }\n    let lh = get_height(root.left);\n    let rh = get_height(root.right);\n    if\n (Math.abs(lh - rh) <= 1 && is_tree_balanced(root.left) && is_tree_balanced(root.right)) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n}\n//begin to write code\n", "prompt": "Write a function to check if a binary tree is balanced or not."}
{"task_id": 468, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint first_Digit(int n) {\n    while (n >= 10) {\n        n = n / 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint first_Digit(int n) {\n    while (n >= 10) {\n        n = n / 10;\n    }\n    return n;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint first_Digit(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (n >= 10) {\n        n = n / 10;\n//begin to write code\n", "prompt": "Write a cpp function to find the first digit of a given number."}
{"task_id": 192, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n    const auto var_4 = 0;\n    const auto var_5 = 0;\n    const auto var_0 = var_4 ;\n    const auto var_1 = var_5 ;\n    int x = n1 ^ n2;\n    int setBits = var_0 ;\n    while (x > var_1 ) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint hamming_Distance(int n1, int n2) {\n    const auto var_4 = 0;\n    const auto var_5 = 0;\n    const auto var_0 = var_4 ;\n    const auto var_1 = var_5 ;\n    int x = n1 ^ n2;\n    int setBits = var_0 ;\n    while (x > var_1 ) {\n        const auto var_6 = 1;\n        const auto var_7 = 1;\n        const auto var_2 = var_6 ;\n        const auto var_3 = var_7 ;\n        setBits += x & var_2 ;\n        x >>= var_3 ;\n    }\n    return setBits;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_4 = 0;\n    const auto var_5 = 0;\n    const auto var_0 = var_4 ;\n    const auto var_1 = var_5 ;\n    int x = n1 ^ n2;\n    int setBits = var_0 ;\n    while (x > var_1 ) {\n//begin to write code\n", "prompt": "Write a cpp function to find the hamming distance between given two integers."}
{"task_id": 102, "Adversarial Code": "class Solution {\n    public static Boolean checkIngvgei(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Boolean checkIngvgei(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Boolean checkIngvgei(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 42, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "prompt": "Write a cpp function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 477, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n  double\\\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble area_pentagon(double a) {\n\n\n  double\\\n area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n  return area;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n\n  /*\n  progame language:cpp\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  double\\\n//begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 485, "Adversarial Code": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n//This is a comment line.\n        for (int i = 0; i < n; i++) {\n            smallestNums[i] = pq.poll();\n        }\n        return smallestNums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        //begin to write code\n", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": 85, "Adversarial Code": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            if (n % i == 0) {\n                x = x + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            if (n % i == 0) {\n                x = x + 1;\n            }\n        }\n        return x;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int divisor(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the number of divisors of a given integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int x = 0;\n        for (int i = 1; i <= n; i = i + 1) {\n            if (n % i == 0) {\n                x = x + 1;\n                //begin to write code\n", "prompt": "Write a java function to find the number of divisors of a given integer."}
{"task_id": 18, "Adversarial Code": "import json\ndef get_Odd_Occurrence(arr,arr_size):\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "Adversarial truth": "import json\ndef get_Odd_Occurrence(arr,arr_size):   \n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n                count+=1     \n        if (count % 2 != 0): \n            return arr[i]     \n    return -1", "lang": "python", "code_str_generate": "import json\ndef get_Odd_Occurrence(arr,arr_size):\n\n    '''\n    progame language:python\n    description:Write a python function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for i in range(0,arr_size): \n        count = 0\n        for j in range(0,arr_size): \n            if arr[i] == arr[j]: \n            #begin to write code\n", "prompt": "Write a python function to find the element occurring odd number of times."}
{"task_id": 157, "Adversarial Code": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency(const std::vector<int>& a, int x) {\n    const auto var_0 = 0;\n    int count = var_0 ;\n    for (int i : a) {\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency(const std::vector<int>& a, int x) {\n    const auto var_0 = 0;\n    int count = var_0 ;\n    for (int i : a) {\n        const auto var_1 = 1;\n        if (i == x) count += var_1 ;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency(const std::vector<int>& a, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    int count = var_0 ;\n    for (int i : a) {\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of a number in a given array."}
{"task_id": 387, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\n\nusing namespace std;\n\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n                result += c - '0';\n            }\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to compute the sum of digits of each number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n", "prompt": "Write a function to compute the sum of digits of each number of a given list."}
{"task_id": 148, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    const std::string var_0 = \"January\";\n    const std::string var_1 = \"February\";\n    const std::string var_2 = \"March\";\n    const std::string var_4 = \"April\";\n    const std::string var_5 = \"May\";\n    const std::string var_6 = \"June\";\n    const std::string var_8 = \"July\";\n    const std::string var_9 = \"August\";\n    const std::string var_10 = \"September\";\n    const std::string var_13 = \"March\";\n    const auto var_14 = 19;\n    const std::string var_16 = \"June\";\n    const auto var_17 = 20;\n    const std::string var_19 = \"September\";\n    const auto var_20 = 21;\n    const std::string var_22 = \"December\";\n    const auto var_23 = 20;\n    std::string season;\n    if (month == var_0  || month == var_1  || month == var_2 ) {\n        const std::string var_3 = \"winter\";\n        season = var_3 ;\n    } else if (month == var_4  || month == var_5  || month == var_6 ) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string month_season(std::string month, int days) {\n    const std::string var_0 = \"January\";\n    const std::string var_1 = \"February\";\n    const std::string var_2 = \"March\";\n    const std::string var_4 = \"April\";\n    const std::string var_5 = \"May\";\n    const std::string var_6 = \"June\";\n    const std::string var_8 = \"July\";\n    const std::string var_9 = \"August\";\n    const std::string var_10 = \"September\";\n    const std::string var_13 = \"March\";\n    const auto var_14 = 19;\n    const std::string var_16 = \"June\";\n    const auto var_17 = 20;\n    const std::string var_19 = \"September\";\n    const auto var_20 = 21;\n    const std::string var_22 = \"December\";\n    const auto var_23 = 20;\n    std::string season;\n    if (month == var_0  || month == var_1  || month == var_2 ) {\n        const std::string var_3 = \"winter\";\n        season = var_3 ;\n    } else if (month == var_4  || month == var_5  || month == var_6 ) {\n        const std::string var_7 = \"spring\";\n        season = var_7 ;\n    } else if (month == var_8  || month == var_9  || month == var_10 ) {\n        const std::string var_11 = \"summer\";\n        season = var_11 ;\n    } else {\n        const std::string var_12 = \"autumn\";\n        season = var_12 ;\n    }\n\n    if ((month == var_13 ) && (days > var_14 )) {\n        const std::string var_15 = \"spring\";\n        season = var_15 ;\n    } else if ((month == var_16 ) && (days > var_17 )) {\n        const std::string var_18 = \"summer\";\n        season = var_18 ;\n    } else if ((month == var_19 ) && (days > var_20 )) {\n        const std::string var_21 = \"autumn\";\n        season = var_21 ;\n    } else if ((month == var_22 ) && (days > var_23 )) {\n        const std::string var_24 = \"winter\";\n        season = var_24 ;\n    }\n\n    return season;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print the season for the given month and day.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const std::string var_0 = \"January\";\n    const std::string var_1 = \"February\";\n    const std::string var_2 = \"March\";\n    const std::string var_4 = \"April\";\n    const std::string var_5 = \"May\";\n    const std::string var_6 = \"June\";\n    const std::string var_8 = \"July\";\n    const std::string var_9 = \"August\";\n    const std::string var_10 = \"September\";\n    const std::string var_13 = \"March\";\n    const auto var_14 = 19;\n    const std::string var_16 = \"June\";\n    const auto var_17 = 20;\n    const std::string var_19 = \"September\";\n    const auto var_20 = 21;\n    const std::string var_22 = \"December\";\n    const auto var_23 = 20;\n    std::string season;\n    if (month == var_0  || month == var_1  || month == var_2 ) {\n        const std::string var_3 = \"winter\";\n        season = var_3 ;\n    } else if (month == var_4  || month == var_5  || month == var_6 ) {\n//begin to write code\n", "prompt": "Write a function to print the season for the given month and day."}
{"task_id": 370, "Adversarial Code": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n    let temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n            //begin to write code\n", "Adversarial truth": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n    let temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n        } else {\n            return a[indexNo] - b[indexNo];\n        }\n    });\n    return ret;\n}", "lang": "javascript", "code_str_generate": "function indexOnInnerList(listData, indexNo) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ret = listData.sort((a, b) => {\n    let temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n            //begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 69, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_2 = temp_var_2 + 1;}\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n//This is a comment line.\n    public static double tetrahedralNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth tetrahedral number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n", "prompt": "Write a function to find the nth tetrahedral number."}
{"task_id": 146, "Adversarial Code": "function encodeList(list1) {\n    const grofkew = [];\n    let current = null;\n    let count = 0;\n    for (const igen of list1) {\n        if (igen !== current) {\n            if (current !== null) {\n                grofkew.push([count, current]);\n            }\n            current = igen;\n            //begin to write code\n", "Adversarial truth": "function encodeList(list1) {\n    const grofkew = [];\n    let current = null;\n    let count = 0;\n\n    for (const igen of list1) {\n        if (igen !== current) {\n            if (current !== null) {\n                grofkew.push([count, current]);\n            }\n            current = igen;\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        grofkew.push([count, current]);\n    }\n    return grofkew;\n}\n\n", "lang": "javascript", "code_str_generate": "function encodeList(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to reflect the run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const grofkew = [];\n    let current = null;\n    let count = 0;\n    for (const igen of list1) {\n        if (igen !== current) {\n            if (current !== null) {\n                grofkew.push([count, current]);\n            }\n            current = igen;\n            //begin to write code\n", "prompt": "Write a function to reflect the run-length encoding from a list."}
{"task_id": 14, "Adversarial Code": "function find_Product(arr, n) {\n    const var_4 = 1;\n    const var_5 = 0;\n    const var_0 = var_4 ;\n    const var_1 = var_5 ;\n    arr.sort((a, b) => a - b);\n    let prod = var_0 ;\n    for (let i = var_1 ; i < n; i++) {\n        const var_6 = 0;\n        //begin to write code\n", "Adversarial truth": "function find_Product(arr, n) {\n    const var_4 = 1;\n    const var_5 = 0;\n    const var_0 = var_4 ;\n    const var_1 = var_5 ;\n    arr.sort((a, b) => a - b);\n    let prod = var_0 ;\n    for (let i = var_1 ; i < n; i++) {\n        const var_6 = 0;\n        const var_7 = 1;\n        const var_2 = var_6 ;\n        const var_3 = var_7 ;\n        if (i === var_2  || arr[i - var_3 ] !== arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_Product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_4 = 1;\n    const var_5 = 0;\n    const var_0 = var_4 ;\n    const var_1 = var_5 ;\n    arr.sort((a, b) => a - b);\n    let prod = var_0 ;\n    for (let i = var_1 ; i < n; i++) {\n        const var_6 = 0;\n        //begin to write code\n", "prompt": "Write a javascript function to find the product of non-repeated elements in a given array."}
{"task_id": 104, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool func_0(const std::vector<std::map<int, int>>& oist1) {\n    for (const auto& dict : oist1) {\n        if (!dict.empty()) return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nbool func_0(const std::vector<std::map<int, int>>& oist1) {\n    for (const auto& dict : oist1) {\n        if (!dict.empty()) return false;\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool func_0(const std::vector<std::map<int, int>>& oist1) {\n    for (const auto& dict : oist1) {\n        if (!dict.empty()) return false;\n//begin to write code\n", "prompt": "Write a function to check whether all dictionaries in a list are empty or not."}
{"task_id": 202, "Adversarial Code": "def merge(var_2, var_3):\n  var_1 = tuple(var_4 + var_0 for var_4, var_0 in zip(var_2, var_3))\n  #begin to write code\n", "Adversarial truth": "def merge(var_2, var_3):\n  var_1 = tuple(var_4 + var_0 for var_4, var_0 in zip(var_2, var_3))\n  return (var_1) ", "lang": "python", "code_str_generate": "def merge(var_2, var_3):\n\n  '''\n  progame language:python\n  description:Write a function to perform the concatenation of two string tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_1 = tuple(var_4 + var_0 for var_4, var_0 in zip(var_2, var_3))\n  #begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 195, "Adversarial Code": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n", "Adversarial truth": "def concatenate_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return (res) ", "lang": "python", "code_str_generate": "def concatenate_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to perform the adjacent element concatenation in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  #begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 436, "Adversarial Code": "function cube_nums(nums) {\n//begin to write code\n", "Adversarial truth": "function cube_nums(nums) {\n    return nums.map(x => x ** 3);\n}\n\n", "lang": "javascript", "code_str_generate": "function cube_nums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 492, "Adversarial Code": "//This is a comment line.\nfunction add_consecutive_nums(nums) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction add_consecutive_nums(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "//This is a comment line.\nfunction add_consecutive_nums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 487, "Adversarial Code": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n                gcd = k;\n                break;\n            }\n        }\n        return gcd;\n    }\n//This is a comment line.\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int gcd(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find gcd of two positive integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n", "prompt": "Write a java function to find gcd of two positive integers."}
{"task_id": 364, "Adversarial Code": "function func_0(n, m) {\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n", "Adversarial truth": "function func_0(n, m) {\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(n, m) {\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 301, "Adversarial Code": "import math\ndef volume_cone(r,h):\n  volume\\\n  #begin to write code\n", "Adversarial truth": "import math\ndef volume_cone(r,h):\n  volume\\\n = (1.0/3) * math.pi * r * r * h\n  return volume\n", "lang": "python", "code_str_generate": "import math\ndef volume_cone(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cone.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume\\\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cone."}
{"task_id": 29, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, long> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<int, long> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n            result[num]++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, long> freq_element(vector<vector<int>>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 285, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "prompt": "Write a cpp function to count inversions in an array."}
{"task_id": 461, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i - 1] + 1 != l[i]) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i - 1] + 1 != l[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i - 1] + 1 != l[i]) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given list contains consecutive numbers or not."}
{"task_id": 169, "Adversarial Code": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        return dist;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate distance between two points using latitude and longitude.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "prompt": "Write a function to calculate distance between two points using latitude and longitude."}
{"task_id": 367, "Adversarial Code": "function func_0(array) {\n  array = [...array.slice(-1), ...array.slice(0, -1)];\n  //begin to write code\n", "Adversarial truth": "function func_0(array) {\n  array = [...array.slice(-1), ...array.slice(0, -1)];\n  return array;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(array) {\n  array = [...array.slice(-1), ...array.slice(0, -1)];\n  //begin to write code\n", "prompt": "Write a javascript function to shift last element to first position in the given list."}
{"task_id": 143, "Adversarial Code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [i[N] for i in nums]\n    #begin to write code\n", "prompt": "Write a function to extract every specified element from a given two dimensional list."}
{"task_id": 427, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint func_0(vector<pair<int, int>> v) {\n    int result = 0;\n    for (size_t k = 0; k < v.size(); ++k) {\n        for (size_t i = k + 1; i < v.size(); ++i) {\n            if (v[i].first == v[k].second && v[k].second == v[i].first) {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint func_0(vector<pair<int, int>> v) {\n    int result = 0;\n    for (size_t k = 0; k < v.size(); ++k) {\n        for (size_t i = k + 1; i < v.size(); ++i) {\n            if (v[i].first == v[k].second && v[k].second == v[i].first) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint func_0(vector<pair<int, int>> v) {\n    int result = 0;\n    for (size_t k = 0; k < v.size(); ++k) {\n        for (size_t i = k + 1; i < v.size(); ++i) {\n            if (v[i].first == v[k].second && v[k].second == v[i].first) {\n//begin to write code\n", "prompt": "Write a function to count bidirectional tuple pairs."}
{"task_id": 196, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n    return regex_search(num, num_fetch);\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions."}
{"task_id": 418, "Adversarial Code": "function union(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    //begin to write code\n", "Adversarial truth": "function union(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function union(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    //begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 11, "Adversarial Code": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n        #begin to write code\n", "Adversarial truth": "def find_first_duplicate(nums):\n    num_set = set()\n    no_duplicate = -1\n\n    for i in range(len(nums)):\n\n        if nums[i] in num_set:\n            return nums[i]\n        else:\n            num_set.add(nums[i])\n\n    return no_duplicate", "lang": "python", "code_str_generate": "def find_first_duplicate(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    num_set = set()\n    no_duplicate = -1\n    for i in range(len(nums)):\n        if nums[i] in num_set:\n        #begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 402, "Adversarial Code": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> rvhuot = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            rvhuot.add(sublist.get(n));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> rvhuot = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            rvhuot.add(sublist.get(n));\n        }\n        return rvhuot;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the nth element from a given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> rvhuot = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            rvhuot.add(sublist.get(n));\n            //begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 86, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n                dicData.put(num, dicData.get(num) + 1);\n            } else {\n                dicData.put(num, 1);\n            }\n        }\n        return dicData;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency count of list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n", "prompt": "Write a function to find frequency count of list of lists."}
{"task_id": 57, "Adversarial Code": "def is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "Adversarial truth": "def is_Monotonic(A): \n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "lang": "python", "code_str_generate": "def is_Monotonic(A):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n    #begin to write code\n", "prompt": "Write a python function to check whether the given array is monotonic or not."}
{"task_id": 85, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            x++;\n        }\n    }\n    return x;\n}\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the number of divisors of a given integer."}
{"task_id": 113, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <algorithm>\n\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = std::max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n//begin to write code\n", "prompt": "Write a function to get the angle of a complex number."}
{"task_id": 352, "Adversarial Code": "function add_K_element(test_list, K) {\n  let res = test_list.map(sub => sub.map(j => j + K));\n  //begin to write code\n", "Adversarial truth": "function add_K_element(test_list, K) {\n  let res = test_list.map(sub => sub.map(j => j + K));\n  return res;\n//This is a comment line.\n}\n\n", "lang": "javascript", "code_str_generate": "function add_K_element(test_list, K) {\n\n  /*\n  progame language:javascript\n  description:Write a function to add the k elements to each element in the tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let res = test_list.map(sub => sub.map(j => j + K));\n  //begin to write code\n", "prompt": "Write a function to add the k elements to each element in the tuple."}
{"task_id": 139, "Adversarial Code": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to find whether the given number is present in the infinite sequence or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n        //begin to write code\n", "prompt": "Write a java function to find whether the given number is present in the infinite sequence or not."}
{"task_id": 459, "Adversarial Code": "class Solution {\n    public static int[] addPairwise(int[] ari) {\n        int[] result = new int[ari.length - 1];\n        for (int j = 0; j < ari.length - 1; j++) {\n            result[j] = ari[j] + ari[j + 1];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] addPairwise(int[] ari) {\n        int[] result = new int[ari.length - 1];\n        for (int j = 0; j < ari.length - 1; j++) {\n            result[j] = ari[j] + ari[j + 1];\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] addPairwise(int[] ari) {\n\n        /*\n        progame language:java\n        description:Write a function to find the pairwise addition of the elements of the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] result = new int[ari.length - 1];\n        for (int j = 0; j < ari.length - 1; j++) {\n            result[j] = ari[j] + ari[j + 1];\n            //begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 322, "Adversarial Code": "def Sort(sub_li):\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "Adversarial truth": "def Sort(sub_li): \n    sub_li.sort(key = lambda x: x[1]) \n    return sub_li ", "lang": "python", "code_str_generate": "def Sort(sub_li):\n\n    '''\n    progame language:python\n    description:Write a python function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sub_li.sort(key = lambda x: x[1]) \n    #begin to write code\n", "prompt": "Write a python function to sort a list according to the second element in sublist."}
{"task_id": 323, "Adversarial Code": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n    double temp_var_4 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n    double temp_var_4 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n\n    /*\n    progame language:java\n    description:Write a java function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double temp_var_4 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n            //begin to write code\n", "prompt": "Write a java function to check whether the triangle is valid or not if sides are given."}
{"task_id": 439, "Adversarial Code": "function extractString(str, o) {\n    const result = str.filter(e => e.length === o);\n    //begin to write code\n", "Adversarial truth": "function extractString(str, o) {\n    const result = str.filter(e => e.length === o);\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function extractString(str, o) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = str.filter(e => e.length === o);\n    //begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 311, "Adversarial Code": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        for (int i = 0; i < list1.length; i++) {\n            if (list1[i] == min_val) {\n                min_result.add(i);\n            }\n        }\n        return min_result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n\n    /*\n    progame language:java\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        //begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 480, "Adversarial Code": "function sum_gp(a, n, r) {\n    let\n    //begin to write code\n", "Adversarial truth": "function sum_gp(a, n, r) {\n    let\n total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_gp(a, n, r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of geometric progression series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 463, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd\\\n::string replace_char(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd\\\n::string replace_char(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n        }\n    }\n    return str1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd\\\n::string replace_char(std::string str1, char ch, char newch) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n//begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 324, "Adversarial Code": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double apSum(int a, int n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of arithmetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 122, "Adversarial Code": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  #begin to write code\n", "Adversarial truth": "def sum_negativenum(nums):\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  return sum(sum_negativenum)", "lang": "python", "code_str_generate": "def sum_negativenum(nums):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\n  #begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 311, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int pos = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> ret;\n    for (int j = 0; j < list1.size(); j++) {\n        if (list1[j] == pos) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int pos = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> ret;\n    for (int j = 0; j < list1.size(); j++) {\n        if (list1[j] == pos) {\n            ret.push_back(j);\n        }\n    }\n    return ret;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int pos = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> ret;\n    for (int j = 0; j < list1.size(); j++) {\n        if (list1[j] == pos) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 195, "Adversarial Code": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n        ArrayList<String> res = new ArrayList<>();\n//This is a comment line.\n        for (int i = 0; i < test_tup.length - 1; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n        ArrayList<String> res = new ArrayList<>();\n//This is a comment line.\n        for (int i = 0; i < test_tup.length - 1; i++) {\n            res.add(test_tup[i] + test_tup[i + 1]);\n        }\n        return res.toArray(new String[0]);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the adjacent element concatenation in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> res = new ArrayList<>();\n//This is a comment line.\n        for (int i = 0; i < test_tup.length - 1; i++) {\n        //begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 488, "Adversarial Code": "function diameter_circle(r) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function diameter_circle(r) {\n//This is a comment line.\n    let diameter = 2 * r;\n    return diameter;\n}\n\n", "lang": "javascript", "code_str_generate": "function diameter_circle(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the diameter of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 18, "Adversarial Code": "class Solution {\n    public static int gvgOwwLxxfrremcv(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int gvgOwwLxxfrremcv(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int gvgOwwLxxfrremcv(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "prompt": "Write a java function to find the element occurring odd number of times."}
{"task_id": 35, "Adversarial Code": "def test_distinct(self):\n  if len(self) == len(set(self)):\n    return True\n    #begin to write code\n", "Adversarial truth": "def test_distinct(self):\n  if len(self) == len(set(self)):\n    return True\n  else:\n    return False;", "lang": "python", "code_str_generate": "def test_distinct(self):\n\n  '''\n  progame language:python\n  description:Write a python function to determine whether all the numbers are different from each other are not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if len(self) == len(set(self)):\n    return True\n    #begin to write code\n", "prompt": "Write a python function to determine whether all the numbers are different from each other are not."}
{"task_id": 229, "Adversarial Code": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n #begin to write code\n", "Adversarial truth": "def replace_list(list1,list2):\n list1[-1:] = list2\n replace_list=list1\n#This is a comment line.\n return replace_list\n", "lang": "python", "code_str_generate": "def replace_list(list1,list2):\n\n '''\n progame language:python\n description:Write a function to replace the last element of the list with another list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list1[-1:] = list2\n replace_list=list1\n #begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 403, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the value exists in a sequence or not."}
{"task_id": 44, "Adversarial Code": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  #begin to write code\n", "Adversarial truth": "import math\ndef tn_gp(a,n,r):\n  tn = a * (math.pow(r, n - 1))\n  return tn", "lang": "python", "code_str_generate": "import math\ndef tn_gp(a,n,r):\n\n  '''\n  progame language:python\n  description:Write a function to find t-nth term of geometric series.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  tn = a * (math.pow(r, n - 1))\n  #begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 488, "Adversarial Code": "def diameter_circle(r):\n  diameter=2*r\n  #begin to write code\n", "Adversarial truth": "def diameter_circle(r):\n  diameter=2*r\n  return diameter", "lang": "python", "code_str_generate": "def diameter_circle(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the diameter of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  diameter=2*r\n  #begin to write code\n", "prompt": "Write a function to find the diameter of a circle."}
{"task_id": 283, "Adversarial Code": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal\n = Math.max(maxVal, (Integer) obj);\n            }\n        }\n        return maxVal;\n    }\n}\n\n\n\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal\n                //begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 169, "Adversarial Code": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        return dist;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate distance between two points using latitude and longitude.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n", "prompt": "Write a function to calculate distance between two points using latitude and longitude."}
{"task_id": 21, "Adversarial Code": "function pow(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function pow(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return parseInt(maxPrime);\n}\n\n", "lang": "javascript", "code_str_generate": "function pow(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the largest prime factor of a given number."}
{"task_id": 498, "Adversarial Code": "class Solution {\n    public static int average_Odd(int n) {\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int average_Odd(int n) {\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n            count = count + 1;\n            sm = sm + n;\n\n\n            n = n - 2;\n        }\n        return sm / count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int average_Odd(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the average of odd numbers till a given odd number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n        //begin to write code\n", "prompt": "Write a java function to find the average of odd numbers till a given odd number."}
{"task_id": 415, "Adversarial Code": "function filter_oddnumbers(nums) {\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    //begin to write code\n", "Adversarial truth": "function filter_oddnumbers(nums) {\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    return odd_nums;\n}\n\n", "lang": "javascript", "code_str_generate": "function filter_oddnumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    //begin to write code\n", "prompt": "Write a function to filter odd numbers using lambda function."}
{"task_id": 351, "Adversarial Code": "const assert = require('assert');\nfunction max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n//This is a comment line.\n        let occu = nums.filter(x => x === i).length;\n        //begin to write code\n", "Adversarial truth": "const assert = require('assert');\nfunction max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n//This is a comment line.\n        let occu = nums.filter(x => x === i).length;\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n\n    return result;\n}", "lang": "javascript", "code_str_generate": "const assert = require('assert');\nfunction max_occurrences(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n//This is a comment line.\n        let occu = nums.filter(x => x === i).length;\n        //begin to write code\n", "prompt": "Write a javascript function to find the item with maximum occurrences in a given list."}
{"task_id": 463, "Adversarial Code": "def replacement(str1,char,value):\n str2 = str1.replace(char, value)\n #begin to write code\n", "Adversarial truth": "def replacement(str1,char,value):\n str2 = str1.replace(char, value)\n return str2", "lang": "python", "code_str_generate": "def replacement(str1,char,value):\n\n '''\n progame language:python\n description:Write a function to replace characters in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(char, value)\n #begin to write code\n", "prompt": "Write a function to replace characters in a string."}
{"task_id": 257, "Adversarial Code": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n//This is a comment line.\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_star_num(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th star number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n", "prompt": "Write a function to find the n'th star number."}
{"task_id": 95, "Adversarial Code": "class Solution {\n    public static List<Object> addLists(List<Object> result, List<Object> original) {\n        List<Object> list = new ArrayList<>(original);\n        list.addAll(result);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> addLists(List<Object> result, List<Object> original) {\n        List<Object> list = new ArrayList<>(original);\n        list.addAll(result);\n        return list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> addLists(List<Object> result, List<Object> original) {\n\n        /*\n        progame language:java\n        description:Write a function to add the given list to the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> list = new ArrayList<>(original);\n        list.addAll(result);\n        //begin to write code\n", "prompt": "Write a function to add the given list to the given tuples."}
{"task_id": 128, "Adversarial Code": "def circle_circumference(i):\n  perimeter=2*3.1415*i\n  #begin to write code\n", "Adversarial truth": "def circle_circumference(i):\n  perimeter=2*3.1415*i\n  return perimeter", "lang": "python", "code_str_generate": "def circle_circumference(i):\n\n  '''\n  progame language:python\n  description:Write a function to find the circumference of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=2*3.1415*i\n  #begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 454, "Adversarial Code": "const assert = require('assert');\nfunction dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n      //begin to write code\n", "Adversarial truth": "const assert = require('assert');\nfunction dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n    }\n  }\n  let temp_var_3 = 9.9;temp_var_3 = temp_var_3 + 1;\n  return result;\n}\n//This is a comment line.\n\n", "lang": "javascript", "code_str_generate": "const assert = require('assert');\nfunction dropEmpty(dict1) {\n\n  /*\n  progame language:javascript\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n      //begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 108, "Adversarial Code": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "Adversarial truth": "def search(arr,n) :\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "lang": "python", "code_str_generate": "def search(arr,n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    XOR = 0\n    for i in range(n) :\n    #begin to write code\n", "prompt": "Write a python function to find the element that appears only once in a sorted array."}
{"task_id": 159, "Adversarial Code": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_range_list(list1, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 435, "Adversarial Code": "from collections import Counter \ndef count(tup, lst):\n    count = 0\n    for item in tup: \n    #begin to write code\n", "Adversarial truth": "from collections import Counter \ndef count(tup, lst): \n    count = 0\n    for item in tup: \n        if item in lst: \n            count+= 1 \n    return count  ", "lang": "python", "code_str_generate": "from collections import Counter \ndef count(tup, lst):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    for item in tup: \n    #begin to write code\n", "prompt": "Write a python function to count the occurence of all elements of list in a tuple."}
{"task_id": 411, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i * i;\n    }\n    return round(sum / n * 1000000) / 1000000;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the average of cubes of first n natural numbers."}
{"task_id": 160, "Adversarial Code": "const util = require('util');\nfunction perimeter_pentagon(a) {\n//begin to write code\n", "Adversarial truth": "const util = require('util');\nfunction perimeter_pentagon(a) {\n  return 5 * a;\n}\n\n", "lang": "javascript", "code_str_generate": "const util = require('util');\nfunction perimeter_pentagon(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 319, "Adversarial Code": "class Solution {\n    public static List<String> find_char(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> find_char(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n\n\n        while (m.find()) {\n            matches.add(m.group());\n        }\n        return matches;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> find_char(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all three, four, five characters long words in the given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 418, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, long, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup2) & std::get<0>(test_tup1),\n        std::get<1>(test_tup2) & std::get<1>(test_tup1),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, long, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup2) & std::get<0>(test_tup1),\n        std::get<1>(test_tup2) & std::get<1>(test_tup1),\n        std::get<2>(test_tup2) & std::get<2>(test_tup1),\n        std::get<3>(test_tup2) & std::get<3>(test_tup1)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, long, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the elementwise and tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup2) & std::get<0>(test_tup1),\n        std::get<1>(test_tup2) & std::get<1>(test_tup1),\n//begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 411, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i * i;\n    }\n    return round(sum / n * 1000000) / 1000000;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the average of cubes of first n natural numbers."}
{"task_id": 358, "Adversarial Code": "//This is a comment line.\nfunction lateralsurface_cuboid(l, w, h) {\n//begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  return LSA;\n}\n\n", "lang": "javascript", "code_str_generate": "//This is a comment line.\nfunction lateralsurface_cuboid(l, w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 186, "Adversarial Code": "class Solution {\n    public\n static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n        }\n        return res;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the exponentiation of the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 330, "Adversarial Code": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  #begin to write code\n", "Adversarial truth": "def set_to_tuple(s):\n  t = tuple(sorted(s))\n  return (t)", "lang": "python", "code_str_generate": "def set_to_tuple(s):\n\n  '''\n  progame language:python\n  description:Write a function to convert the given set into ordered tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  t = tuple(sorted(s))\n  #begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 202, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n        std::get<1>(test_tup1) + std::get<1>(test_tup2),\n        std::get<2>(test_tup1) + std::get<2>(test_tup2)\n    );\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the concatenation of two string tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 299, "Adversarial Code": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector\\\n<\\\nchar> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\nvector\\\n<\\\nchar> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n        {\n            ret.push_back(v);\n        }\n        \n    }\n    return ret;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector\\\n<\\\nchar> string_to_tuple(const string &str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> ret;\n    for(char v:str1)\n    {   \n//begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 321, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n\n\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 150, "Adversarial Code": "def difference(var_0, var_1):\n    var_2 = [var_3 for var_3 in var_0 if var_3 not in var_1]\n    #begin to write code\n", "Adversarial truth": "def difference(var_0, var_1):\n    var_2 = [var_3 for var_3 in var_0 if var_3 not in var_1]\n    return var_2", "lang": "python", "code_str_generate": "def difference(var_0, var_1):\n\n    '''\n    progame language:python\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_2 = [var_3 for var_3 in var_0 if var_3 not in var_1]\n    #begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 319, "Adversarial Code": "import http\nimport os\nimport re\ndef find_char(text):\n  var_1 = r\"\\b\\w{3,5}\\b\"\n  #begin to write code\n", "Adversarial truth": "import http\nimport os\n\nimport re\ndef find_char(text):\n\n  var_1 = r\"\\b\\w{3,5}\\b\"\n  var_0 = var_1 \n  return (re.findall(var_0 , text))", "lang": "python", "code_str_generate": "import http\nimport os\nimport re\ndef find_char(text):\n\n  '''\n  progame language:python\n  description:Write a function to find all three, four, five characters long words in the given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_1 = r\"\\b\\w{3,5}\\b\"\n  #begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 285, "Adversarial Code": "def get_Inv_Count(arr,n):\n    var_0 = 0\n    inv_count = var_0 \n    for i in range(n): \n        var_1 = 1\n        #begin to write code\n", "Adversarial truth": "def get_Inv_Count(arr,n): \n    var_0 = 0\n    inv_count = var_0 \n    for i in range(n): \n        var_1 = 1\n        for j in range(i + var_1 ,n): \n            if (arr[i] > arr[j]): \n                var_2 = 1\n                inv_count += var_2 \n    return inv_count ", "lang": "python", "code_str_generate": "def get_Inv_Count(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    inv_count = var_0 \n    for i in range(n): \n        var_1 = 1\n        #begin to write code\n", "prompt": "Write a python function to count inversions in an array."}
{"task_id": 23, "Adversarial Code": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n", "Adversarial truth": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n        } else if (ar[mid] !== mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_missing(ar, N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n    let temp_var_6 = 9.9;if (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the missing number in a sorted array."}
{"task_id": 27, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        if (el % 2 != 0 && first_odd == -1) {\n            first_odd = el;\n        }\n    }\n    if (first_even == -1 || first_odd == -1) return -1;\n    return static_cast<double>(first_even) / first_odd;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 155, "Adversarial Code": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                }\n            }\n        }\n        return evenPair;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the pairs with xor as an even number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                    //begin to write code\n", "prompt": "Write a java function to count the pairs with xor as an even number."}
{"task_id": 408, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\nint round_and_sum(const std::vector<double>& var_1) {\n    int length = var_1.size();\n    int var_2 = std::accumulate(var_1.begin(), var_1.end(), 0, [](int var_0, double var_3) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\n\nint round_and_sum(const std::vector<double>& var_1) {\n    int length = var_1.size();\n    int var_2 = std::accumulate(var_1.begin(), var_1.end(), 0, [](int var_0, double var_3) {\n        return var_0 + std::round(var_3);\n    }) * length;\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\nint round_and_sum(const std::vector<double>& var_1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int length = var_1.size();\n    int var_2 = std::accumulate(var_1.begin(), var_1.end(), 0, [](int var_0, double var_3) {\n//begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 161, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n\n\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 251, "Adversarial Code": "def split_two_parts(list1, L):\n    #begin to write code\n", "Adversarial truth": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "lang": "python", "code_str_generate": "def split_two_parts(list1, L):\n\n    '''\n    progame language:python\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 320, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (!(dict.find(n) != dict.end())) {\n            dict[n] = 1;\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (!(dict.find(n) != dict.end())) {\n            dict[n] = 1;\n        }\n        else {\n            dict[n] += 1;\n        }\n    }\n    return dict;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (!(dict.find(n) != dict.end())) {\n            dict[n] = 1;\n        }\n//begin to write code\n", "prompt": "Write a cpp function to count unset bits of a given number."}
{"task_id": 10, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n        multiples.push_back(n * i);\n    }\n    return multiples;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 308, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    for (sregex_iterator i = words_begin; words_end != i; ++i) {\n        words.push_back((*i).str());\n    }\n    return words;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 129, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n                temp.insert(ele);\n                res.push_back(ele);\n            }\n        }\n    }\n    return res;\n\n\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract elements that occur singly in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 103, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n            List<Integer> temp = new ArrayList<>(entry.getKey());\n            temp.add(entry.getValue());\n            res.add(temp);\n        }\n        return res.toString();\n    }\n}\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to assign frequency to each tuple in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n        //begin to write code\n", "prompt": "Write a function to assign frequency to each tuple in the given tuple list."}
{"task_id": 376, "Adversarial Code": "def even_or_odd(N):\n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        #begin to write code\n", "Adversarial truth": "def even_or_odd(N): \n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        N[l-1] =='C'or N[l-1] =='E'): \n        return (\"Even\") \n    else: \n        return (\"Odd\") ", "lang": "python", "code_str_generate": "def even_or_odd(N):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the hexadecimal number is even or odd.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    l = len(N) \n    if (N[l-1] =='0'or N[l-1] =='2'or \n        N[l-1] =='4'or N[l-1] =='6'or \n        N[l-1] =='8'or N[l-1] =='A'or \n        #begin to write code\n", "prompt": "Write a python function to check whether the hexadecimal number is even or odd."}
{"task_id": 190, "Adversarial Code": "function chkList(var_0) { \n//begin to write code\n", "Adversarial truth": "function chkList(var_0) { \n    return new Set(var_0).size === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function chkList(var_0) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the elements in a list are same or not."}
{"task_id": 445, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector\\\n<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\n\nusing namespace std;\n\nvector\\\n<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector\\\n<string> reverse_string_list(vector<string> stringlist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (string& s : stringlist) {\n//begin to write code\n", "prompt": "Write a function to reverse strings in a given list of string values."}
{"task_id": 334, "Adversarial Code": "def func_0(cr):\n    diff = [n-c for c, n in zip(cr[:-1], cr[1:])]\n    #begin to write code\n", "Adversarial truth": "def func_0(cr):\n    diff = [n-c for c, n in zip(cr[:-1], cr[1:])]\n    return diff", "lang": "python", "code_str_generate": "def func_0(cr):\n\n    '''\n    progame language:python\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    diff = [n-c for c, n in zip(cr[:-1], cr[1:])]\n    #begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 1, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate\\\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\n\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate\\\n(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return M;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate\\\n//begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 199, "Adversarial Code": "#include<iostream>\n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\nbool is_allowed_specific_char(string str) {\n    regex get_char(\"[^a-zA-Z0-9.]\");\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\n\nbool is_allowed_specific_char(string str) {\n    regex get_char(\"[^a-zA-Z0-9.]\");\n    return !regex_search(str, get_char);\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\nbool is_allowed_specific_char(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex get_char(\"[^a-zA-Z0-9.]\");\n//begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 421, "Adversarial Code": "def calc(base1,base2,height):\n mvdizm = 0.5 * (base1+ base2)\n #begin to write code\n", "Adversarial truth": "def calc(base1,base2,height):\n mvdizm = 0.5 * (base1+ base2)\n return mvdizm", "lang": "python", "code_str_generate": "def calc(base1,base2,height):\n\n '''\n progame language:python\n description:Write a function to find the median of a trapezium.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n mvdizm = 0.5 * (base1+ base2)\n #begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 272, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            if (count > i) {\n                return 0;\n            }\n            temp /= 10;\n        }\n    }\n    return 1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n", "prompt": "Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"task_id": 202, "Adversarial Code": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the concatenation of two string tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] res = new String[test_tup1.length];\n        for (long i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to perform the concatenation of two string tuples."}
{"task_id": 378, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0) {\n        return 2;\n    }\n//begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 166, "Adversarial Code": "function answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n        //begin to write code\n", "Adversarial truth": "function answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n    } else {\n        return -1;\n    }\n}\n\n\n", "lang": "javascript", "code_str_generate": "function answer(L, R) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * L <= R) {\n        return [L, 2 * L];\n        //begin to write code\n", "prompt": "Write a javascript function to find two distinct numbers such that their lcm lies within the given range."}
{"task_id": 194, "Adversarial Code": "import argparse\ndef inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  #begin to write code\n", "Adversarial truth": "import argparse\ndef inversion_elements(test_tup):\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  return (res) \n  lambda: print('This function is used to remove a item of a list')", "lang": "python", "code_str_generate": "import argparse\ndef inversion_elements(test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to find the inversions of tuple elements in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\n  #begin to write code\n", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"task_id": 346, "Adversarial Code": "function find_max(test_list) {\n  let\n  //begin to write code\n", "Adversarial truth": "function find_max(test_list) {\n  let\n res = Math.max(...test_list.flat().map(Number));\n  return res;\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function find_max(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum element of all the given tuple records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let\n  //begin to write code\n", "prompt": "Write a function to find the maximum element of all the given tuple records."}
{"task_id": 491, "Adversarial Code": "function frnd(n, m) {\n    let r = n % m;\n    //begin to write code\n", "Adversarial truth": "function frnd(n, m) {\n    let r = n % m;\n    return r;\n}\n\n", "lang": "javascript", "code_str_generate": "function frnd(n, m) {\n    let r = n % m;\n    //begin to write code\n", "prompt": "Write a javascript function to find remainder of two numbers."}
{"task_id": 9, "Adversarial Code": "function is_woodall(x) { \n    const var_0 = 2;\n    const var_1 = 0;\n    const var_2 = 1;\n    const var_3 = 1;\n    const var_4 = 0;\n    const var_5 = 2;\n    const var_6 = 0;\n    if (x % var_0  === var_1 ) { \n        return false;\n    }\n    if (x === var_2 ) { \n        return true;\n        //begin to write code\n", "Adversarial truth": "function is_woodall(x) { \n    const var_0 = 2;\n    const var_1 = 0;\n    const var_2 = 1;\n    const var_3 = 1;\n    const var_4 = 0;\n    const var_5 = 2;\n    const var_6 = 0;\n    if (x % var_0  === var_1 ) { \n        return false;\n    }\n    if (x === var_2 ) { \n        return true;\n    }\n    x = x + var_3 ;\n    let p = var_4 ;\n    while (x % var_5  === var_6 ) { \n        const var_7 = 2;\n        const var_8 = 1;\n        x = x / var_7 ;\n        p += var_8 ;\n        if (p === x) { \n            return true;\n        }\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function is_woodall(x) { \n\n    /*\n    progame language:javascript\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 2;\n    const var_1 = 0;\n    const var_2 = 1;\n    const var_3 = 1;\n    const var_4 = 0;\n    const var_5 = 2;\n    const var_6 = 0;\n    if (x % var_0  === var_1 ) { \n        return false;\n    }\n    if (x === var_2 ) { \n        return true;\n        //begin to write code\n", "prompt": "Write a function to check if the given number is woodball or not."}
{"task_id": 133, "Adversarial Code": "def sfn_Pzrih(arr,n):\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "Adversarial truth": "def sfn_Pzrih(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n    return sum", "lang": "python", "code_str_generate": "def sfn_Pzrih(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 6, "Adversarial Code": "def y(var_0):\n  var_1=4*var_0\n  #begin to write code\n", "Adversarial truth": "def y(var_0):\n  var_1=4*var_0\n  return var_1", "lang": "python", "code_str_generate": "def y(var_0):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a square.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_1=4*var_0\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 399, "Adversarial Code": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n            }\n        }\n        return min_val;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int min_val(List<Object> listval) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 492, "Adversarial Code": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "Adversarial truth": "def add_consecutive_nums(nums):\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def add_consecutive_nums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 87, "Adversarial Code": "def multiply_num(numbers):\n    total = 1\n    for x in numbers:\n    #begin to write code\n", "Adversarial truth": "def multiply_num(numbers):  \n    total = 1\n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "lang": "python", "code_str_generate": "def multiply_num(numbers):\n\n    '''\n    progame language:python\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    total = 1\n    for x in numbers:\n    #begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 163, "Adversarial Code": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n", "Adversarial truth": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n        }\n        result[k].push(v);\n    }\n    return result;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function group_keyvalue(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 347, "Adversarial Code": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        final int var_1 = 0;\n        final int var_0 = var_1 ;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        final int var_1 = 0;\n        final int var_0 = var_1 ;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find modulo division of two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_1 = 0;\n        final int var_0 = var_1 ;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n        //begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 51, "Adversarial Code": "#include <map>\n#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint smallest_num(std::vector<int> xs) {\n//begin to write code\n", "Adversarial truth": "#include <map>\n#include<iostream>\n    \n\n#include <algorithm>\n#include <vector>\n#include <cassert>\n\n\n//This is a comment line.\nint smallest_num(std::vector<int> xs) {\n    return *std::min_element(xs.begin(), xs.end());\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <map>\n#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint smallest_num(std::vector<int> xs) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find smallest number in a list."}
{"task_id": 133, "Adversarial Code": "class Solution {\n    public static int sumPairs(int[] arr, long n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumPairs(int[] arr, long n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumPairs(int[] arr, long n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of absolute differences in all pairs of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n", "prompt": "Write a java function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 9, "Adversarial Code": "function is_woodall(x) { \n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    //begin to write code\n", "Adversarial truth": "function is_woodall(x) { \n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    while (x % 2 === 0) { \n        x = x / 2;\n        p += 1;\n        if (p === x) { \n            return true;\n        }\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function is_woodall(x) { \n\n    /*\n    progame language:javascript\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    //begin to write code\n", "prompt": "Write a function to check if the given number is woodball or not."}
{"task_id": 160, "Adversarial Code": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  #begin to write code\n", "Adversarial truth": "import math\ndef perimeter_pentagon(a):\n  perimeter=(5*a)\n  return perimeter", "lang": "python", "code_str_generate": "import math\ndef perimeter_pentagon(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=(5*a)\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 87, "Adversarial Code": "function multiplyNum(numbers) {\n    let total = 1;\n    for (let x of numbers) {\n    //begin to write code\n", "Adversarial truth": "function multiplyNum(numbers) {\n    let total = 1;\n    for (let x of numbers) {\n        total *= x;\n    }\n    return total / numbers.length;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiplyNum(numbers) {\n\n    /*\n    progame language:javascript\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 1;\n    for (let x of numbers) {\n    //begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 384, "Adversarial Code": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first non-repeated character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n", "prompt": "Write a java function to find the first non-repeated character in a given string."}
{"task_id": 453, "Adversarial Code": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, long n) {\n        for (int value : map.values()) {\n            if (value != n) {\n                return 0;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, long n) {\n        for (int value : map.values()) {\n            if (value != n) {\n                return 0;\n            }\n        }\n        return 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, long n) {\n\n        /*\n        progame language:java\n        description:Write a function to check if all values are same in a dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int value : map.values()) {\n            if (value != n) {\n                return 0;\n                //begin to write code\n", "prompt": "Write a function to check if all values are same in a dictionary."}
{"task_id": 203, "Adversarial Code": "function degree_radian(radian) {\n    const\n    //begin to write code\n", "Adversarial truth": "function degree_radian(radian) {\n    const\n degree = radian * (180 / Math.PI);\n    return degree;\n}\n\n", "lang": "javascript", "code_str_generate": "function degree_radian(radian) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to convert radians to degrees."}
{"task_id": 54, "Adversarial Code": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n            //begin to write code\n", "Adversarial truth": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n        } else {\n            total += element;\n        }\n    }\n    return total;\n}\n\n", "lang": "javascript", "code_str_generate": "function recursiveListSum(dataList) {\n\n    /*\n    progame language:javascript\n    description:Write a function of recursion list sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n            //begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 462, "Adversarial Code": "def gfple_rnteihvxtrom(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n", "Adversarial truth": "def gfple_rnteihvxtrom(test_list1, test_list2):\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  return (res)", "lang": "python", "code_str_generate": "def gfple_rnteihvxtrom(test_list1, test_list2):\n\n  '''\n  progame language:python\n  description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n  #begin to write code\n", "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order."}
{"task_id": 413, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n        res.push_back(sub[sub.length() - 1]);\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract only the rear index element of each string in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 145, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\ndouble temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\ndouble temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        int second = stoi(get<1>(x));\n        result.push_back(make_tuple(first, second));\n    }\n    return result;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\ndouble temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 11, "Adversarial Code": "def umijfv(var_1):\n    var_3 = set()\n    var_2 = -1\n    for var_0 in range(len(var_1)):\n        if var_1[var_0] in var_3:\n        #begin to write code\n", "Adversarial truth": "def umijfv(var_1):\n    var_3 = set()\n    var_2 = -1\n\n    for var_0 in range(len(var_1)):\n\n        if var_1[var_0] in var_3:\n            return var_1[var_0]\n        else:\n            var_3.add(var_1[var_0])\n\n    return var_2", "lang": "python", "code_str_generate": "def umijfv(var_1):\n\n    '''\n    progame language:python\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_3 = set()\n    var_2 = -1\n    for var_0 in range(len(var_1)):\n        if var_1[var_0] in var_3:\n        #begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 358, "Adversarial Code": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        final int var_1 = 2;\n        final int var_0 = var_1 ;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        final int var_1 = 2;\n        final int var_0 = var_1 ;\n        int LSA = var_0  * h * (l + w);\n        return LSA;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of cuboid\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_1 = 2;\n        final int var_0 = var_1 ;\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 251, "Adversarial Code": "function split_two_parts(list1, L) {\n//begin to write code\n", "Adversarial truth": "function split_two_parts(list1, L) {\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\n", "lang": "javascript", "code_str_generate": "function split_two_parts(list1, L) {\n\n    /*\n    progame language:javascript\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 190, "Adversarial Code": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool chkList(const std::vector<std::string>& lst) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool chkList(const std::vector<std::string>& lst) {\n    return std::set<std::string>(lst.begin(), lst.end()).size() == 1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool chkList(const std::vector<std::string>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to check whether the elements in a list are same or not."}
{"task_id": 430, "Adversarial Code": "def surfacearea_cube(o):\n  surfacearea= 6*o*o\n  #begin to write code\n", "Adversarial truth": "def surfacearea_cube(o):\n  surfacearea= 6*o*o\n  return surfacearea", "lang": "python", "code_str_generate": "def surfacearea_cube(o):\n\n  '''\n  progame language:python\n  description:Write a function to find the surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  surfacearea= 6*o*o\n  #begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 175, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\nusing namespace std;\n\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1);\n    } else {\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "prompt": "Write a function to search some literals strings in a string by using regex."}
{"task_id": 213, "Adversarial Code": "def count_Set_Bits(var_1):\n    var_0 = 0\n    while (var_1): \n    #begin to write code\n", "Adversarial truth": "def count_Set_Bits(var_1): \n    var_0 = 0\n    while (var_1): \n        var_0 += var_1 & 1\n        var_1 >>= 1\n    return var_0 ", "lang": "python", "code_str_generate": "def count_Set_Bits(var_1):\n\n    '''\n    progame language:python\n    description:Write a python function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    while (var_1): \n    #begin to write code\n", "prompt": "Write a python function to count set bits of a given number."}
{"task_id": 89, "Adversarial Code": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static boolean isPalindrome(long num) {\n        String numStr = Long.toString(num);\n        String reversedStr = new StringBuilder(numStr).reverse().toString();\n        return numStr.equals(reversedStr);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n\n        /*\n        progame language:java\n        description:Write a function to find the next smallest palindrome of a specified number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n        //begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 478, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the largest value in a given array."}
{"task_id": 449, "Adversarial Code": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <string>\n#include <cassert>\nusing namespace std;\n\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') upper_ctr += 1;\n    }\n    return upper_ctr;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n//begin to write code\n", "prompt": "Write a cpp function to get the first element of each sublist."}
{"task_id": 163, "Adversarial Code": "def group_keyvalue(l):\n    result = {}\n    for k, v in l:\n    #begin to write code\n", "Adversarial truth": "\n\ndef group_keyvalue(l):\n\n\n    result = {}\n    for k, v in l:\n\n\n         result\\\n.setdefault(k, []).append(v)\n    return result\n", "lang": "python", "code_str_generate": "def group_keyvalue(l):\n\n    '''\n    progame language:python\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = {}\n    for k, v in l:\n    #begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 424, "Adversarial Code": "class Solution {\n    public static int lastDigit(int n) {\n        final int var_0 = 10;\n        return n % var_0 ;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lastDigit(int n) {\n        final int var_0 = 10;\n        return n % var_0 ;\n        double temp_var_3 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int lastDigit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the last digit of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 10;\n        return n % var_0 ;\n        //begin to write code\n", "prompt": "Write a java function to find the last digit of a given number."}
{"task_id": 244, "Adversarial Code": "from itertools import combinations_with_replacement \ndef func_0(l, n):\n    #begin to write code\n", "Adversarial truth": "from itertools import combinations_with_replacement \ndef func_0(l, n):\n    return list(combinations_with_replacement(l,n))\n", "lang": "python", "code_str_generate": "from itertools import combinations_with_replacement \ndef func_0(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 260, "Adversarial Code": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            sum = sum + (j * j * j * j * j);\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int evenPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fifth power of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            double temp_var_5 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n            //begin to write code\n", "prompt": "Write a java function to find the sum of fifth power of first n even natural numbers."}
{"task_id": 411, "Adversarial Code": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return parseFloat((sum / n).toFixed(6));\n}\n\n", "lang": "javascript", "code_str_generate": "function find_Average_Of_Cube(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the average of cubes of first n natural numbers."}
{"task_id": 379, "Adversarial Code": "def format(list,format):\n add_string=[format.format(item) for item in  list]\n #begin to write code\n", "Adversarial truth": "def format(list,format):\n add_string=[format.format(item) for item in  list]\n return add_string", "lang": "python", "code_str_generate": "def format(list,format):\n\n '''\n progame language:python\n description:Write a function to insert a given string at the beginning of all items in a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n add_string=[format.format(item) for item in  list]\n #begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 88, "Adversarial Code": "def decimal_to_binary(n):\n    #begin to write code\n", "Adversarial truth": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") ", "lang": "python", "code_str_generate": "def decimal_to_binary(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 272, "Adversarial Code": "def validate(self):\n    for _ in range(10): \n        obj = self;  \n        index = 0; \n        while (obj): \n            if (obj % 10 == _): \n            #begin to write code\n", "Adversarial truth": "def validate(self): \n    for _ in range(10): \n        obj = self;  \n        index = 0; \n        while (obj): \n            if (obj % 10 == _): \n                index+=1;  \n            if (index > _): \n                return False\n            obj //= 10; \n    return True", "lang": "python", "code_str_generate": "def validate(self):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    for _ in range(10): \n        obj = self;  \n        index = 0; \n        while (obj): \n            if (obj % 10 == _): \n            #begin to write code\n", "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself."}
{"task_id": 211, "Adversarial Code": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                break;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n\n        /*\n        progame language:java\n        description:Write a function to check if all the elements in tuple have same data type or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n", "prompt": "Write a function to check if all the elements in tuple have same data type or not."}
{"task_id": 152, "Adversarial Code": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double\n area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double\n area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        return area;\n    }\n\n\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double areaPolygon(int s, double l) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the area of a regular polygon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double\n area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n //begin to write code\n", "prompt": "Write a function to calculate the area of a regular polygon."}
{"task_id": 330, "Adversarial Code": "function set_to_tuple(s) {\n    let\n    //begin to write code\n", "Adversarial truth": "function set_to_tuple(s) {\n    let\n t = Array.from(s).sort((a, b) => a - b);\n    return t;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function set_to_tuple(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to convert the given set into ordered tuples."}
{"task_id": 150, "Adversarial Code": "def remove_elements(list1, list2):\n    result\\\n    #begin to write code\n", "Adversarial truth": "\n\n\n\ndef remove_elements(list1, list2):\n    result\\\n = [x for x in list1 if x not in list2]\n    return result", "lang": "python", "code_str_generate": "def remove_elements(list1, list2):\n\n    '''\n    progame language:python\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 339, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            if (count_map.find(arr[i]) != count_map.end()) {\n                count_map[arr[i]] += 1;\n            } else {\n                count_map[arr[i]] = 1;\n            }\n        }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            if (count_map.find(arr[i]) != count_map.end()) {\n                count_map[arr[i]] += 1;\n            } else {\n                count_map[arr[i]] = 1;\n            }\n        }\n    }\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            if (count_map[arr[i]] == k) {\n                return arr[i];\n            }\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            if (count_map.find(arr[i]) != count_map.end()) {\n                count_map[arr[i]] += 1;\n            } else {\n                count_map[arr[i]] = 1;\n            }\n        }\n//begin to write code\n", "prompt": "Write a cpp function to minimize the length of the string by removing occurrence of only one character."}
{"task_id": 110, "Adversarial Code": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n            return false;\n        }\n        return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) ||\n               checkTriplet(A, n - 1, sum, count);\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n\n        /*\n        progame language:java\n        description:Write a function to find the triplet with sum of the given array\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 318, "Adversarial Code": "class Solution {\n    public static int negCount(int[] var_0) {\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 <= 0) {\n                var_1 += 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int negCount(int[] var_0) {\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 <= 0) {\n                var_1 += 1;\n            }\n        }\n        return var_1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int negCount(int[] var_0) {\n\n        /*\n        progame language:java\n        description:Write a java function to count negative numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int var_1 = 0;\n        for (int var_2 : var_0) {\n            if (var_2 <= 0) {\n                var_1 += 1;\n                //begin to write code\n", "prompt": "Write a java function to count negative numbers in a list."}
{"task_id": 468, "Adversarial Code": "class Solution {\n    public static long firstDigit(long n) {\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long firstDigit(long n) {\n        while (n >= 10) {\n            n = n / 10;\n        }\n        return n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long firstDigit(long n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first digit of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n", "prompt": "Write a java function to find the first digit of a given number."}
{"task_id": 30, "Adversarial Code": "function data(data) {\n//begin to write code\n", "Adversarial truth": "function data(data) {\n    return data.filter(x => x % 2 === 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function data(data) {\n//begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 19, "Adversarial Code": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                if (checkEquality(s.substring(i, i + j))) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to count all the substrings starting and ending with same characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "prompt": "Write a java function to count all the substrings starting and ending with same characters."}
{"task_id": 47, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(long x, int y) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool opposite_Signs(long x, int y) {\n    return ((y ^ x) < 0);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(long x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given two integers have opposite sign or not."}
{"task_id": 315, "Adversarial Code": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "Adversarial truth": "function mostOccurrences(testList) {\n    const temp = {};\n\n\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n          temp[wrd] = 1;\n        }\n      });\n    });\n    let res = Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);\n    return res;\n  }", "lang": "javascript", "code_str_generate": "function mostOccurrences(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to get the word with most number of occurrences in the given strings list."}
{"task_id": 98, "Adversarial Code": "function odd_Equivalent(s, n) {\n    let count = 0;\n    for\n (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n        //begin to write code\n", "Adversarial truth": "function odd_Equivalent(s, n) {\n    let count = 0;\n    for\n (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function odd_Equivalent(s, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the count of rotations of a binary string with odd value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for\n (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n        //begin to write code\n", "prompt": "Write a javascript function to find the count of rotations of a binary string with odd value."}
{"task_id": 44, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n    return tn;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double tn = a * pow(r, n - 1);\n//begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 93, "Adversarial Code": "function sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n", "Adversarial truth": "function sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    return result;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function sortSublists(inputList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 368, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 461, "Adversarial Code": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final boolean var_5 = true;\n        Arrays.sort(l);\n        for (int i = var_0 ; i < l.length - var_1 ; i++) {\n            final int var_2 = 1;\n            final int var_3 = 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final boolean var_5 = true;\n        Arrays.sort(l);\n        for (int i = var_0 ; i < l.length - var_1 ; i++) {\n            final int var_2 = 1;\n            final int var_3 = 1;\n            if (l[i] + var_2  != l[i + var_3 ]) {\n                final boolean var_4 = false;\n                return var_4 ;\n            }\n        }\n        return var_5 ;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given list contains consecutive numbers or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final boolean var_5 = true;\n        Arrays.sort(l);\n        for (int i = var_0 ; i < l.length - var_1 ; i++) {\n            final int var_2 = 1;\n            final int var_3 = 1;\n            //begin to write code\n", "prompt": "Write a java function to check whether the given list contains consecutive numbers or not."}
{"task_id": 213, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int bits) {\n    int count = 0;\n    while (bits) {\n        count += bits & 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int bits) {\n    int count = 0;\n    while (bits) {\n        count += bits & 1;\n        bits >>= 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int bits) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (bits) {\n        count += bits & 1;\n//begin to write code\n", "prompt": "Write a cpp function to count set bits of a given number."}
{"task_id": 255, "Adversarial Code": "class Solution {\n    public\n static int lateralsurface_cube(int l) {\n        int LSA = 4 * (l * l);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int lateralsurface_cube(int l) {\n\n\n        int LSA = 4 * (l * l);\n        return LSA;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int lateralsurface_cube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int LSA = 4 * (l * l);\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 213, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n\n\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n", "prompt": "Write a cpp function to count set bits of a given number."}
{"task_id": 449, "Adversarial Code": "function func_0(args) {\n//begin to write code\n", "Adversarial truth": "function func_0(args) {\n    return args.map(c => c[0]);\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(args) {\n//begin to write code\n", "prompt": "Write a javascript function to get the first element of each sublist."}
{"task_id": 204, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (2 == g.size()) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\n\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (2 == g.size()) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n            }\n        } else {\n            result.push_back(g[0]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (2 == g.size()) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n", "prompt": "Write a function to decode a run-length encoded given list."}
{"task_id": 230, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\n\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n        for (size_t j = 0; j < a[i].size(); ++j) {\n            if (a[i][j].size() != b[i][j].size()) return false;\n            for (size_t k = 0; k < a[i][j].size(); ++k) {\n                if (a[i][j][k] != b[i][j][k]) return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n\n    /*\n    progame language:cpp\n    description:Write a function to generate a 3d array having each element as '*'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n//begin to write code\n", "prompt": "Write a function to generate a 3d array having each element as '*'."}
{"task_id": 243, "Adversarial Code": "#include <memory>\n#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "Adversarial truth": "#include <memory>\n#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    \n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        result.push_back((*i).str());\n    }\n    \n    return result;\n}", "lang": "cpp", "code_str_generate": "#include <memory>\n#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all words starting with 'a' or 'e' in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n//begin to write code\n", "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string."}
{"task_id": 285, "Adversarial Code": "def get_Inv_Count(arr,n):\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n        #begin to write code\n", "Adversarial truth": "def get_Inv_Count(arr,n): \n    inv_count = 0\n\n\n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count ", "lang": "python", "code_str_generate": "def get_Inv_Count(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    inv_count = 0\n    for i in range(n): \n        for j in range(i + 1,n): \n        #begin to write code\n", "prompt": "Write a python function to count inversions in an array."}
{"task_id": 364, "Adversarial Code": "def round_nfm(var_3,var_2):\n    var_0 = (var_3 //var_2) * var_2\n    #begin to write code\n", "Adversarial truth": "def round_nfm(var_3,var_2):\n    var_0 = (var_3 //var_2) * var_2\n    var_1 = var_0 + var_2\n    return (var_1 if var_3 - var_0 > var_1 - var_3 else var_0)", "lang": "python", "code_str_generate": "def round_nfm(var_3,var_2):\n\n    '''\n    progame language:python\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = (var_3 //var_2) * var_2\n    #begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 147, "Adversarial Code": "function min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n            //begin to write code\n", "Adversarial truth": "function min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return Math.floor(res);\n}\n\n", "lang": "javascript", "code_str_generate": "function min_Ops(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n            //begin to write code\n", "prompt": "Write a javascript function to find k number of operations required to make all elements equal."}
{"task_id": 270, "Adversarial Code": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return 0;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return 0;\n        }\n        return 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n\n        /*\n        progame language:java\n        description:Write a java function to check if the elements of a given list are unique or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return 0;\n            //begin to write code\n", "prompt": "Write a java function to check if the elements of a given list are unique or not."}
{"task_id": 185, "Adversarial Code": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "Adversarial truth": "def remove_tuples(test_list, K):\n  res = [ele for ele in test_list if len(ele) != K]\n  return (res) ", "lang": "python", "code_str_generate": "def remove_tuples(test_list, K):\n\n  '''\n  progame language:python\n  description:Write a function to remove all the tuples with length k.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = [ele for ele in test_list if len(ele) != K]\n  #begin to write code\n", "prompt": "Write a function to remove all the tuples with length k."}
{"task_id": 282, "Adversarial Code": "import math\ndef lgherside_rrgstzntlv(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "Adversarial truth": "import math\ndef lgherside_rrgstzntlv(w,h):\n  s=math.sqrt((w*w)+(h*h))\n  return s", "lang": "python", "code_str_generate": "import math\ndef lgherside_rrgstzntlv(w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the third side of a right angled triangle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  s=math.sqrt((w*w)+(h*h))\n  #begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 441, "Adversarial Code": "def loss_amount(actual_cost,sale_amount):\n  if not((sale_amount > actual_cost)):\n      return None\n      #begin to write code\n", "Adversarial truth": "def loss_amount(actual_cost,sale_amount): \n  if not((sale_amount > actual_cost)):\n      return None\n  else:\n      amount = sale_amount - actual_cost\n    return amount", "lang": "python", "code_str_generate": "def loss_amount(actual_cost,sale_amount):\n\n  '''\n  progame language:python\n  description:Write a function that gives loss amount if the given amount has loss else return none.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if not((sale_amount > actual_cost)):\n      return None\n      #begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 221, "Adversarial Code": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int r = 0; r < n; r++){\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int r = 0; r < n; r++){\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to get the n largest items from a dataset.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int r = 0; r < n; r++){\n        //begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 122, "Adversarial Code": "function sum_negativenum(nums) {\n  const negativeNums = nums.filter(num => num < 0);\n  //begin to write code\n", "Adversarial truth": "function sum_negativenum(nums) {\n  const negativeNums = nums.filter(num => num < 0);\n  return negativeNums.reduce((acc, cur) => acc + cur, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_negativenum(nums) {\n\n  /*\n  progame language:javascript\n  description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const negativeNums = nums.filter(num => num < 0);\n  //begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 266, "Adversarial Code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "Adversarial truth": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "lang": "python", "code_str_generate": "def dict_filter(dict,n):\n\n '''\n progame language:python\n description:Write a function to filter a dictionary based on values.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 42, "Adversarial Code": "class Solution {\n    public String xsvckEqfzoity(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public String xsvckEqfzoity(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n            return \"Not Equal\";\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public String xsvckEqfzoity(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 129, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> ectrzxg_srmtlb(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nstd::vector<int> ectrzxg_srmtlb(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n                temp.insert(ele);\n                res.push_back(ele);\n            }\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> ectrzxg_srmtlb(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 262, "Adversarial Code": "import collections\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "import collections\ndef substract_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n\n\n  return (res) ", "lang": "python", "code_str_generate": "import collections\ndef substract_elements(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 440, "Adversarial Code": "import re\ndef remove_whitespaces(text1):\n    #begin to write code\n", "Adversarial truth": "\n\nimport re\ndef remove_whitespaces(text1):\n  return (re.sub(r'\\s+', '',text1))\n\n", "lang": "python", "code_str_generate": "import re\ndef remove_whitespaces(text1):\n\n    '''\n    progame language:python\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 242, "Adversarial Code": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n    #begin to write code\n", "Adversarial truth": "def count_integer(list1):\n    ctr = 0\n    for i in list1:\n        if isinstance(i, int):\n            ctr = ctr + 1\n    return ctr", "lang": "python", "code_str_generate": "def count_integer(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for i in list1:\n    #begin to write code\n", "prompt": "Write a python function to count integers from a given list."}
{"task_id": 340, "Adversarial Code": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n\n\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (count_map.get(arr[i]) == k) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first element occurring k times in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n", "prompt": "Write a java function to find the first element occurring k times in a given array."}
{"task_id": 433, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> func_0(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<vector<int>> func_0(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n            tmp.push_back(ele[i]);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> func_0(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n", "prompt": "Write a function to trim each tuple by k in the given tuple list."}
{"task_id": 157, "Adversarial Code": "function frequency(a, x) {\n//This is a comment line.\nlet temp_var_6 = 9.9;temp_var_6 = temp_var_6 + 1;\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "Adversarial truth": "function frequency(a, x) {\n//This is a comment line.\nlet temp_var_6 = 9.9;temp_var_6 = temp_var_6 + 1;\n    let count = 0;\n    for (let i of a) {\n//This is a comment line.\n(function() {let temp_var_5 = 9.9; temp_var_5 = temp_var_5 + 1;})();\n        if (i === x) count += 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency(a, x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\nlet temp_var_6 = 9.9;temp_var_6 = temp_var_6 + 1;\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the frequency of a number in a given array."}
{"task_id": 226, "Adversarial Code": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n", "Adversarial truth": "from collections import Counter \ndef check_occurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "lang": "python", "code_str_generate": "from collections import Counter \ndef check_occurences(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"task_id": 166, "Adversarial Code": "class Solution {\n    public static int[] answer(long L, int R) {\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] answer(long L, int R) {\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n            return false;\n        }\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] answer(long L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to find two distinct numbers such that their lcm lies within the given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n        //begin to write code\n", "prompt": "Write a java function to find two distinct numbers such that their lcm lies within the given range."}
{"task_id": 105, "Adversarial Code": "class Solution {\n    public static int tupleToRmt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tupleToRmt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tupleToRmt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 311, "Adversarial Code": "def position_min(list1):\n    min_val = min(list1)\n    #begin to write code\n", "Adversarial truth": "def position_min(list1):\n    min_val = min(list1)\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\n    return min_result", "lang": "python", "code_str_generate": "def position_min(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    min_val = min(list1)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 391, "Adversarial Code": "def ncr_modp(n, r, p):\n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n", "Adversarial truth": "def ncr_modp(n, r, p): \n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n        for j in range(min(i, r), 0, -1): \n            C[j] = (C[j] + C[j-1]) % p   \n    return C[r] ", "lang": "python", "code_str_generate": "def ncr_modp(n, r, p):\n\n    '''\n    progame language:python\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    C = [0 for i in range(r+1)]   \n    C[0] = 1\n    for i in range(1, n+1): \n    #begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 145, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            intPair.add(Integer.parseInt(pair.get(1)));\n            result.add(intPair);\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a tuple of string values to a tuple of integer values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            //begin to write code\n", "prompt": "Write a function to convert a tuple of string values to a tuple of integer values."}
{"task_id": 222, "Adversarial Code": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        final int var_0 = 2;\n        final double var_1 = 3.1415;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        final int var_0 = 2;\n        final double var_1 = 3.1415;\n        double lateralsurface = var_0  * var_1  * r * h;\n        return lateralsurface;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 2;\n        final double var_1 = 3.1415;\n        //begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 466, "Adversarial Code": "def is_lower(string):\nvar_0 = 9.9\ntemp_var_2 = var_0 \n    #begin to write code\n", "Adversarial truth": "def is_lower(string):\n\nvar_0 = 9.9\ntemp_var_2 = var_0 \nvar_1 = 'This function is used to remove a item of a list'\n\nprint(var_1 )\n  return (string.lower())", "lang": "python", "code_str_generate": "def is_lower(string):\n\n    '''\n    progame language:python\n    description:Write a python function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nvar_0 = 9.9\ntemp_var_2 = var_0 \n    #begin to write code\n", "prompt": "Write a python function to convert the given string to lower case."}
{"task_id": 60, "Adversarial Code": "class Solution {\n    public static long[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static long[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                    int temp = nums[i];\n                    nums[i] = nums[i + gaps];\n                    nums[i + gaps] = temp;\n                    swapped = true;\n                }\n                i += 1;\n            }\n        }\n        return nums;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static long[] combSort(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of elements using comb sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n", "prompt": "Write a function to sort a list of elements using comb sort."}
{"task_id": 134, "Adversarial Code": "class Solution {\n    public int max_Abs_Diff(int elements[], int size) {\n        int min = elements[0];\n        int max = elements[0];\n        for (int j = 1; j < size; j++) {\n            min = Math.min(min, elements[j]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public int max_Abs_Diff(int elements[], int size) {\n        int min = elements[0];\n        int max = elements[0];\n        for (int j = 1; j < size; j++) {\n            min = Math.min(min, elements[j]);\n            max = Math.max(max, elements[j]);\n        }\n        return (max - min);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int max_Abs_Diff(int elements[], int size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum difference between any two elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min = elements[0];\n        int max = elements[0];\n        for (int j = 1; j < size; j++) {\n            min = Math.min(min, elements[j]);\n            //begin to write code\n", "prompt": "Write a java function to find the maximum difference between any two elements in a given array."}
{"task_id": 110, "Adversarial Code": "def check_triplet(self, i, sum, p):\n    if p == 3 and sum == 0:\n        return True\n    if p == 3 or i == 0 or sum < 0:\n    #begin to write code\n", "Adversarial truth": "def check_triplet(self, i, sum, p):\n    if p == 3 and sum == 0:\n        return True\n    if p == 3 or i == 0 or sum < 0:\n        return False\n    return check_triplet(self, i - 1, sum - self[i - 1], p + 1) or\\\n           check_triplet(self, i - 1, sum, p)", "lang": "python", "code_str_generate": "def check_triplet(self, i, sum, p):\n\n    '''\n    progame language:python\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if p == 3 and sum == 0:\n        return True\n    if p == 3 or i == 0 or sum < 0:\n    #begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 218, "Adversarial Code": "function\n re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            //begin to write code\n", "Adversarial truth": "function\n re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n\n\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function\n re_arrange_array(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            //begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 298, "Adversarial Code": "class Solution {\n    public static int mzximun(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int mzximun(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int mzximun(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to find the maximum of two numbers."}
{"task_id": 418, "Adversarial Code": "class Solution {\n    public\n static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the elementwise and tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n        //begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 251, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <utility>\n\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n    std::vector<T> second_part(list1.begin() + L, list1.end());\n    return {first_part, second_part};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given."}
{"task_id": 213, "Adversarial Code": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count set bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n", "prompt": "Write a java function to count set bits of a given number."}
{"task_id": 117, "Adversarial Code": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n", "Adversarial truth": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n            wordLen.push(x);\n        }\n    }\n    return wordLen;\n}\n\n", "lang": "javascript", "code_str_generate": "function longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n", "prompt": "Write a function to shortlist words that are longer than n from a given list of words."}
{"task_id": 439, "Adversarial Code": "def func_0(str, var_1):\n    var_2 = [var_0 for var_0 in str if len(var_0) == var_1] \n    #begin to write code\n", "Adversarial truth": "def func_0(str, var_1):\n    var_2 = [var_0 for var_0 in str if len(var_0) == var_1] \n    return var_2", "lang": "python", "code_str_generate": "def func_0(str, var_1):\n\n    '''\n    progame language:python\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_2 = [var_0 for var_0 in str if len(var_0) == var_1] \n    #begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 148, "Adversarial Code": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n\t #begin to write code\n", "Adversarial truth": "def month_season(month,days):\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n elif (month == 'June') and (days > 20):\n\t season = 'summer'\n elif (month == 'September') and (days > 21):\n\t season = 'autumn'\n elif (month == 'October') and (days > 21):\n\t season = 'autumn'\n elif (month == 'November') and (days > 21):\n\t season = 'autumn'\n elif (month == 'December') and (days > 20):\n\t season = 'winter'\n return season", "lang": "python", "code_str_generate": "def month_season(month,days):\n\n '''\n progame language:python\n description:Write a function to print the season for the given month and day.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n if month in ('January', 'February', 'March'):\n\t season = 'winter'\n elif month in ('April', 'May', 'June'):\n\t season = 'spring'\n elif month in ('July', 'August', 'September'):\n\t season = 'summer'\n else:\n\t season = 'autumn'\n if (month == 'March') and (days > 19):\n\t season = 'spring'\n\t #begin to write code\n", "prompt": "Write a function to print the season for the given month and day."}
{"task_id": 95, "Adversarial Code": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n\n        /*\n        progame language:java\n        description:Write a function to add the given list to the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n", "prompt": "Write a function to add the given list to the given tuples."}
{"task_id": 193, "Adversarial Code": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<cassert>\n\nint count(std::string s, char c) {\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occurrence of a given character in a string."}
{"task_id": 478, "Adversarial Code": "def frequency_Of_Largest(var_4,var_0):\n    var_3 = var_0[0] \n    var_1 = 1\n    for var_2 in range(1,var_4): \n        if (var_0[var_2] >var_3): \n        #begin to write code\n", "Adversarial truth": "def frequency_Of_Largest(var_4,var_0): \n    var_3 = var_0[0] \n    var_1 = 1\n    for var_2 in range(1,var_4): \n        if (var_0[var_2] >var_3): \n            var_3 = var_0[var_2] \n            var_1 = 1\n        elif (var_0[var_2] == var_3): \n            var_1 += 1\n    return var_1 ", "lang": "python", "code_str_generate": "def frequency_Of_Largest(var_4,var_0):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_3 = var_0[0] \n    var_1 = 1\n    for var_2 in range(1,var_4): \n        if (var_0[var_2] >var_3): \n        #begin to write code\n", "prompt": "Write a python function to find the frequency of the largest value in a given array."}
{"task_id": 470, "Adversarial Code": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n        if (sum == 0) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n            return true;\n        }\n        if (n == 0) {\n            return false;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n        if (sum == 0) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (set[n - 1] > sum) {\n            return isSubsetSum(set, n - 1, sum);\n        }\n        return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n\n        /*\n        progame language:java\n        description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (sum == 0) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_4 = temp_var_4 + 1;}\n            return true;\n        }\n        if (n == 0) {\n            return false;\n            //begin to write code\n", "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum."}
{"task_id": 79, "Adversarial Code": "const dgram = require('dgram');\nfunction len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n    let temp_var_5 = 9.9;if (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n    //begin to write code\n", "Adversarial truth": "const dgram = require('dgram');\nfunction len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n    let temp_var_5 = 9.9;if (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n        if (i.length > max) {\n            max = i.length;\n        }\n    }\n    return max;\n}\n\n", "lang": "javascript", "code_str_generate": "const dgram = require('dgram');\nfunction len_log(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max = list1[0].length;\n    for (let i of list1) {\n    let temp_var_5 = 9.9;if (temp_var_5 < 9.12) {temp_var_5 = temp_var_5 + 1;}\n    //begin to write code\n", "prompt": "Write a javascript function to find the length of the longest word."}
{"task_id": 321, "Adversarial Code": "def char_frequency(str1):\n    dict = {}\n    for m in str1:\n        keys = dict.keys()\n        if m in keys:\n        #begin to write code\n", "Adversarial truth": "def char_frequency(str1):\n    dict = {}\n    for m in str1:\n        keys = dict.keys()\n        if m in keys:\n            dict[m] += 1\n        else:\n            dict[m] = 1\n    return dict", "lang": "python", "code_str_generate": "def char_frequency(str1):\n\n    '''\n    progame language:python\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    dict = {}\n    for m in str1:\n        keys = dict.keys()\n        if m in keys:\n        #begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 496, "Adversarial Code": "function remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n", "Adversarial truth": "function remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            i--;  // adjust index after removal\n        }\n    }\n    return list1;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_words(list1, removewords) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 239, "Adversarial Code": "def count_X(tup, x):\n    count = 0\n    for ele in tup: \n    #begin to write code\n", "Adversarial truth": "def count_X(tup, x): \n    count = 0\n    for ele in tup: \n        if (x == ele): \n            count = 1 + count\n    return count ", "lang": "python", "code_str_generate": "def count_X(tup, x):\n\n    '''\n    progame language:python\n    description:Write a python function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0\n    for ele in tup: \n    #begin to write code\n", "prompt": "Write a python function to count the occcurences of an element in a tuple."}
{"task_id": 180, "Adversarial Code": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n\n\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 30 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 280, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int q = n / m;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, int m) {\n    int q = n / m;\n    return q;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int q = n / m;\n//begin to write code\n", "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors."}
{"task_id": 186, "Adversarial Code": "function find_exponentio(test_tup1, test_tup2) {\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n//begin to write code\n", "Adversarial truth": "function find_exponentio(test_tup1, test_tup2) {\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_exponentio(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the exponentiation of the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nlet temp_var_6 = 9.9;while (temp_var_6 < 9.12) {temp_var_6 = temp_var_6 + 1;}\n//begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 128, "Adversarial Code": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  #begin to write code\n", "Adversarial truth": "def circle_circumference(r):\n  perimeter=2*3.1415*r\n  return perimeter", "lang": "python", "code_str_generate": "def circle_circumference(r):\n\n  '''\n  progame language:python\n  description:Write a function to find the circumference of a circle.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=2*3.1415*r\n  #begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 461, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given list contains consecutive numbers or not."}
{"task_id": 381, "Adversarial Code": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < 1 + n) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n        //begin to write code\n", "Adversarial truth": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < 1 + n) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n                        + res[Math.floor(i / 3)]\n                        + res[Math.floor(i / 4)]\n                        + res[Math.floor(i / 5)])));\n        i = 1 + i;\n    }\n    return res[n];\n}\n\n", "lang": "javascript", "code_str_generate": "function get_max_sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < 1 + n) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n        //begin to write code\n", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 10, "Adversarial Code": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n        }\n        return multiples_of_num;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 367, "Adversarial Code": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "Adversarial truth": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n        test_list.insert(test_list.begin(), last);\n    }\n    return test_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n", "prompt": "Write a cpp function to shift last element to first position in the given list."}
{"task_id": 496, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\n\n\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n    }\n    return list1;\n}\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 258, "Adversarial Code": "def ascii_value(k):\n  ch=k\n  #begin to write code\n", "Adversarial truth": "def ascii_value(k):\n  ch=k\n  return ord(ch)", "lang": "python", "code_str_generate": "def ascii_value(k):\n\n  '''\n  progame language:python\n  description:Write a function to find the ascii value of a character.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ch=k\n  #begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 399, "Adversarial Code": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n            }\n        }\n        return min_val;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int min_val(List<Object> listval) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 402, "Adversarial Code": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n//This is a comment line.\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n//This is a comment line.\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n\n    /*\n    progame language:java\n    description:Write a function to extract the nth element from a given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n        //begin to write code\n", "prompt": "Write a function to extract the nth element from a given list of tuples."}
{"task_id": 478, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint func_0(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the largest value in a given array."}
{"task_id": 369, "Adversarial Code": "class Solution {\n    public static int[][] nuotiOrhg(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] nuotiOrhg(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n            }\n        }\n        return multiList;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] nuotiOrhg(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n\n        /*\n        progame language:java\n        description:Write a function to generate a two-dimensional array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 285, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "prompt": "Write a cpp function to count inversions in an array."}
{"task_id": 247, "Adversarial Code": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (\nint) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int countOdd(int[] arrayNums) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of odd elements in the given list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (\n        //begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 23, "Adversarial Code": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if\n (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n", "Adversarial truth": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if\n (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n        } else if (ar[mid] !== mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_missing(ar, N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if\n (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the missing number in a sorted array."}
{"task_id": 408, "Adversarial Code": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        }\n        roundAndSum *= length;\n        return roundAndSum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 498, "Adversarial Code": "def average_Odd(n) :\n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n", "Adversarial truth": "def average_Odd(n) : \n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    while (n>=1) : \n        count=count+1\n        sm = sm + n \n        n = n-2\n    return sm//count ", "lang": "python", "code_str_generate": "def average_Odd(n) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if (n%2==0) : \n        return (\"Invalid Input\") \n        return -1 \n    sm =0\n    count =0\n    #begin to write code\n", "prompt": "Write a python function to find the average of odd numbers till a given odd number."}
{"task_id": 1, "Adversarial Code": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "Adversarial truth": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n            double temp_var_6 = 9.9;System.out.println(\"This function is used to remove a item of a list\");\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n\n    /*\n    progame language:java\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 48, "Adversarial Code": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int isOctagonal(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth octagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 3 * n * n - 2 * n;\n        //begin to write code\n", "prompt": "Write a function to find the nth octagonal number."}
{"task_id": 227, "Adversarial Code": "def number_of_substrings(str):\n\tstr_len = len(str); \n\t#begin to write code\n", "Adversarial truth": "def number_of_substrings(str): \n\tstr_len = len(str); \n\treturn int\\\n\n\n(str_len * (str_len + 1) / 2); \n", "lang": "python", "code_str_generate": "def number_of_substrings(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a python function to count number of non-empty substrings of a given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tstr_len = len(str); \n\t#begin to write code\n", "prompt": "Write a python function to count number of non-empty substrings of a given string."}
{"task_id": 316, "Adversarial Code": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n\t   #begin to write code\n", "Adversarial truth": "def check_isosceles(x,y,z):\n  if x==y or y==z or z==x:\n\t   return True\n  else:\n     return False\n", "lang": "python", "code_str_generate": "def check_isosceles(x,y,z):\n\n  '''\n  progame language:python\n  description:Write a function to print check if the triangle is isosceles or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if x==y or y==z or z==x:\n\t   return True\n\t   #begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 244, "Adversarial Code": "def combinations_colors(l, n):\nfrom\\\n    #begin to write code\n", "Adversarial truth": "from\\\n itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l,n))\n", "lang": "python", "code_str_generate": "def combinations_colors(l, n):\n\n    '''\n    progame language:python\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\nfrom\\\n    #begin to write code\n", "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions."}
{"task_id": 219, "Adversarial Code": "def func_0(str1,chzi):\n str2 = str1.replace(' ', chzi)\n #begin to write code\n", "Adversarial truth": "def func_0(str1,chzi):\n str2 = str1.replace(' ', chzi)\n return str2", "lang": "python", "code_str_generate": "def func_0(str1,chzi):\n\n '''\n progame language:python\n description:Write a function to replace blank spaces with any character in a string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n str2 = str1.replace(' ', chzi)\n #begin to write code\n", "prompt": "Write a function to replace blank spaces with any character in a string."}
{"task_id": 414, "Adversarial Code": "import java.io.*;\nclass Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n    final double var_2 = 9.9;\n    final double var_3 = 9.12;\n    final int var_6 = 0;\n    double temp_var_7 = var_2 ;while (temp_var_7 < var_3 ) {System.out.println(var_4 );temp_var_7 = temp_var_7 + var_5 ;}\n        final String var_4 = \"This function is used to remove a item of a list\";\n        final int var_5 = 1;\n        final int var_1 = var_6 ;\n        final int var_0 = var_1 ;\n        //begin to write code\n", "Adversarial truth": "import java.io.*;\nclass Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n    final double var_2 = 9.9;\n    final double var_3 = 9.12;\n    final int var_6 = 0;\n    double temp_var_7 = var_2 ;while (temp_var_7 < var_3 ) {System.out.println(var_4 );temp_var_7 = temp_var_7 + var_5 ;}\n        final String var_4 = \"This function is used to remove a item of a list\";\n        final int var_5 = 1;\n        final int var_1 = var_6 ;\n        final int var_0 = var_1 ;\n        int ctr = var_0 ;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.io.*;\nclass Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n\n    /*\n    progame language:java\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    final double var_2 = 9.9;\n    final double var_3 = 9.12;\n    final int var_6 = 0;\n    double temp_var_7 = var_2 ;while (temp_var_7 < var_3 ) {System.out.println(var_4 );temp_var_7 = temp_var_7 + var_5 ;}\n        final String var_4 = \"This function is used to remove a item of a list\";\n        final int var_5 = 1;\n        final int var_1 = var_6 ;\n        final int var_0 = var_1 ;\n        //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 180, "Adversarial Code": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_monthnumber(monthname3):\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnumber(monthname3):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 30 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 12, "Adversarial Code": "import random\ndef maximum_Sum(list1):\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n        #begin to write code\n", "Adversarial truth": "import random\ndef maximum_Sum(list1): \n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n            sum+= y      \n        maxi = max(sum,maxi)     \n    return maxi \n    temp_var_5 = 9.9\n    while temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1", "lang": "python", "code_str_generate": "import random\ndef maximum_Sum(list1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxi = -100000\n    for x in list1: \n        sum = 0 \n        for y in x: \n        #begin to write code\n", "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 380, "Adversarial Code": "function convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n        return {\n        //begin to write code\n", "Adversarial truth": "function convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n        return {\n [x]: { [l2[index]]: l3[index] } };\n    });\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function convert_list_dictionary(l1, l2, l3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert more than one list to nested dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l1.map((x, index) => {\n        return {\n        //begin to write code\n", "prompt": "Write a function to convert more than one list to nested dictionary."}
{"task_id": 87, "Adversarial Code": "function multiplyNum(vals) {\n    let result = 1;\n    for (let v of vals) {\n    //begin to write code\n", "Adversarial truth": "function multiplyNum(vals) {\n    let result = 1;\n    for (let v of vals) {\n        result *= v;\n    }\n    return result / vals.length;\n}\n\n", "lang": "javascript", "code_str_generate": "function multiplyNum(vals) {\n\n    /*\n    progame language:javascript\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 1;\n    for (let v of vals) {\n    //begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 163, "Adversarial Code": "import pickle\ndef group_keyvalue(l):\n    result = {}\n    for k, v in l:\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import pickle\ndef group_keyvalue(l):\n    result = {}\n    for k, v in l:\n#This is a comment line.\n         result.setdefault(k, []).append(v)\n         var_0 = 'This function is used to remove a item of a list'\n         lambda: print(var_0 )\n    return result", "lang": "python", "code_str_generate": "import pickle\ndef group_keyvalue(l):\n\n    '''\n    progame language:python\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = {}\n    for k, v in l:\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 449, "Adversarial Code": "function Extract(lst) {\n//begin to write code\n", "Adversarial truth": "function Extract(lst) {\n    return lst.map(item => item[0]);\n}\n\n", "lang": "javascript", "code_str_generate": "function Extract(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to get the first element of each sublist."}
{"task_id": 115, "Adversarial Code": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (0 === a % i && 0 === b % i) {\n        //begin to write code\n", "Adversarial truth": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (0 === a % i && 0 === b % i) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (0 === a % i && 0 === b % i) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the sum of common divisors of two given numbers."}
{"task_id": 163, "Adversarial Code": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n", "Adversarial truth": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n        }\n        result[k].push(v);\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function group_keyvalue(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n", "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists."}
{"task_id": 283, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint maximum(const vector<int>& var_0) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nint maximum(const vector<int>& var_0) {\n    return *max_element(var_0.begin(), var_0.end());\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint maximum(const vector<int>& var_0) {\n//begin to write code\n", "prompt": "Write a function to find the maximum value in a given heterogeneous list."}
{"task_id": 162, "Adversarial Code": "const child_process = require('child_process');\n//This is a comment line.\nfunction remove_splchar(text) {\n//begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\n//This is a comment line.\nfunction remove_splchar(text) {\n    return text.replace(/[\\W_]+/g, '');\n    (function() {let temp_var_2 = 9.9; temp_var_2 = temp_var_2 + 1;})();\n\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\n//This is a comment line.\nfunction remove_splchar(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove everything except alphanumeric characters from a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 498, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint average_Odd(int i) {\n    if (i % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int total = 0;\n    int count = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint average_Odd(int i) {\n    if (i % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int total = 0;\n    int count = 0;\n    while (i >= 1) {\n        count += 1;\n        total += i;\n        i -= 2;\n    }\n    return total / count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint average_Odd(int i) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (i % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int total = 0;\n    int count = 0;\n//begin to write code\n", "prompt": "Write a cpp function to find the average of odd numbers till a given odd number."}
{"task_id": 71, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double radius) {\n    double v = (4.0 / 3.0) * M_PI * radius * radius * radius;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_sphere(double radius) {\n    double v = (4.0 / 3.0) * M_PI * radius * radius * radius;\n    return v;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double radius) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double v = (4.0 / 3.0) * M_PI * radius * radius * radius;\n//begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 80, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool uind_sfbhtiimt(std::vector<std::string> var_2, std::string var_1) {\n    for (auto &var_0 : var_2) {\n        if (var_0.find(var_1) != std::string::npos) {\n            return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nbool uind_sfbhtiimt(std::vector<std::string> var_2, std::string var_1) {\n    for (auto &var_0 : var_2) {\n        if (var_0.find(var_1) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool uind_sfbhtiimt(std::vector<std::string> var_2, std::string var_1) {\n    for (auto &var_0 : var_2) {\n        if (var_0.find(var_1) != std::string::npos) {\n            return true;\n//begin to write code\n", "prompt": "Write a function to check if a substring is present in a given list of string values."}
{"task_id": 392, "Adversarial Code": "#include <cstdio>\n#include <map>\n#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\n//This is a comment line.\nbool is_valid_URL(string url) {\n    const std::string var_2 = \"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\";\n    const std::string var_1 = var_2 ;\n    const std::string var_0 = var_1 ;\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n#include <map>\n#include<iostream>\n    \n//This is a comment line.\n#include <regex>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\nbool is_valid_URL(string url) {\n    const std::string var_2 = \"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\";\n    const std::string var_1 = var_2 ;\n    const std::string var_0 = var_1 ;\n    regex pattern(var_0 );\n\n    if (url.empty()) {\n        return false;\n    }\n\n    return regex_search(url, pattern);\n}", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include <map>\n#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\n//This is a comment line.\nbool is_valid_URL(string url) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a url is valid or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const std::string var_2 = \"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\";\n    const std::string var_1 = var_2 ;\n    const std::string var_0 = var_1 ;\n//begin to write code\n", "prompt": "Write a function to check if a url is valid or not using regex."}
{"task_id": 30, "Adversarial Code": "def even(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n #begin to write code\n", "Adversarial truth": "def even(nums):\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n return even_nums", "lang": "python", "code_str_generate": "def even(nums):\n\n '''\n progame language:python\n description:Write a function to filter even numbers using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n even_nums = list(filter(lambda x: x%2 == 0, nums))\n #begin to write code\n", "prompt": "Write a function to filter even numbers using lambda function."}
{"task_id": 87, "Adversarial Code": "def multiply_num(numbers):\n#This is a comment line.\n    var_0 = 1\n    total = var_0 \n    #begin to write code\n", "Adversarial truth": "def multiply_num(numbers):  \n#This is a comment line.\n    var_0 = 1\n    total = var_0 \n    for x in numbers:\n        total *= x  \n    return total/len(numbers) ", "lang": "python", "code_str_generate": "def multiply_num(numbers):\n\n    '''\n    progame language:python\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n    var_0 = 1\n    total = var_0 \n    #begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 439, "Adversarial Code": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n            }\n        }\n        return result;\n        new Runnable() {@Override public void run() {System.out.println(var_0 );}};\n    final String var_0 = \"This function is used to remove a item of a list\";\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n\n        /*\n        progame language:java\n        description:Write a function to extract specified size of strings from a give list of string values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n            }\n            //begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 356, "Adversarial Code": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n    //begin to write code\n", "Adversarial truth": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n}\n\nfunction is_tree_balanced(root) {\n    if (root === null) {\n        return true;\n    }\n    let lh = get_height(root.left);\n    let rh = get_height(root.right);\n    if (Math.abs(lh - rh) <= 1 && is_tree_balanced(root.left) && is_tree_balanced(root.right)) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n    //begin to write code\n", "prompt": "Write a function to check if a binary tree is balanced or not."}
{"task_id": 459, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    {\n        int i = 0;\n        while(i < lens){\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    {\n        int i = 0;\n        while(i < lens){\n        mul = (mul * (arr[i] % n)) % n;\n            i++;\n        }\n    }\n    return mul % n;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    {\n        int i = 0;\n        while(i < lens){\n//begin to write code\n", "prompt": "Write a function to find the pairwise addition of the elements of the given tuples."}
{"task_id": 77, "Adversarial Code": "import java.beans.*;\nimport java.text.*;\nclass Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n", "Adversarial truth": "import java.beans.*;\nimport java.text.*;\nclass Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n//This is a comment line.\n        }\n        return freqCount;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.beans.*;\nimport java.text.*;\nclass Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to get the frequency of the elements in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 41, "Adversarial Code": "function parallelogram_area(b, h) {\n//begin to write code\n", "Adversarial truth": "\n\nfunction parallelogram_area(b, h) {\n    return b * h;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function parallelogram_area(b, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 350, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 428, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint nuotrpov_gl_hrnglv(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint nuotrpov_gl_hrnglv(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n    int x;\n    ss >> x;\n    return x;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint nuotrpov_gl_hrnglv(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n", "prompt": "Write a function to convert a list of multiple integers into a single integer."}
{"task_id": 298, "Adversarial Code": "def maximum(a,b):\n    if a >= b: \n        return a \n        #begin to write code\n", "Adversarial truth": "def maximum(a,b):   \n    if a >= b: \n        return a \n    else: \n        return b ", "lang": "python", "code_str_generate": "def maximum(a,b):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if a >= b: \n        return a \n        #begin to write code\n", "prompt": "Write a python function to find the maximum of two numbers."}
{"task_id": 435, "Adversarial Code": "function merge(var_3, var_2) {\n    let var_0 = 0;\n    for (const var_1 of var_3) {\n        if (var_2.includes(var_1)) {\n        //begin to write code\n", "Adversarial truth": "function merge(var_3, var_2) {\n    let var_0 = 0;\n    for (const var_1 of var_3) {\n        if (var_2.includes(var_1)) {\n            var_0 += 1;\n        }\n    }\n    return var_0;\n}\n\n", "lang": "javascript", "code_str_generate": "function merge(var_3, var_2) {\n    let var_0 = 0;\n    for (const var_1 of var_3) {\n        if (var_2.includes(var_1)) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurence of all elements of list in a tuple."}
{"task_id": 413, "Adversarial Code": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n", "Adversarial truth": "def extract_rear(test_tuple):\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "lang": "python", "code_str_generate": "def extract_rear(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to extract only the rear index element of each string in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\n  #begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 416, "Adversarial Code": "class Solution {\n    public static String func_0(String dt) {\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String func_0(String dt) {\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n            return matcher.group(3) + \"-\" + matcher.group(2) + \"-\" + matcher.group(1);\n        }\n        return dt;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String func_0(String dt) {\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n        //begin to write code\n", "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex."}
{"task_id": 284, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    {\n        int i = 0;\n        while(i < n){\n        {\n            int j = i + 1;\n            while(j < n){\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    {\n        int i = 0;\n        while(i < n){\n        {\n            int j = i + 1;\n            while(j < n){\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n                    j++;\n            }\n        }\n            i++;\n        }\n    }\n    return inv_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    {\n        int i = 0;\n        while(i < n){\n        {\n            int j = i + 1;\n            while(j < n){\n            if (arr[i] > arr[j]) {\n//begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 334, "Adversarial Code": "class Solution {\n    public\n List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n List<Integer> diffConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the difference between two consecutive numbers in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n        //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 414, "Adversarial Code": "import logging\ndef count_element_in_list(list1, x):\n    ctr = 0\n    for i in range(len(list1)): \n    #begin to write code\n", "Adversarial truth": "import logging\ndef count_element_in_list(list1, x): \n    ctr = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            ctr+= 1          \n    return ctr", "lang": "python", "code_str_generate": "import logging\ndef count_element_in_list(list1, x):\n\n    '''\n    progame language:python\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    ctr = 0\n    for i in range(len(list1)): \n    #begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 321, "Adversarial Code": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, long> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] = dict[n] + (1);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, long> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] = dict[n] + (1);\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, long> char_frequency(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] = dict[n] + (1);\n//begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 414, "Adversarial Code": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "Adversarial truth": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n\n\n            ctr += 1;\n        }\n    }\n    return ctr;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function countElementInList(list1, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 138, "Adversarial Code": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            if (result < dp[i]) {\n                result = dp[i];\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n                //begin to write code\n", "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array."}
{"task_id": 42, "Adversarial Code": "class Solution {\n    public String checkEquality(String str) {\n        if\n (\nstr.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public String checkEquality(String str) {\n        if\n (\nstr.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n            return \"Not Equal\";\n        }\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public String checkEquality(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the first and last characters of a given string are equal or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if\n (\nstr.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n            //begin to write code\n", "prompt": "Write a java function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 334, "Adversarial Code": "function diff_consecutivenums(nums) {\n    let\n    //begin to write code\n", "Adversarial truth": "\n\nfunction diff_consecutivenums(nums) {\n    let\n result = nums.slice(1).map((b, i) => b - nums[i]);\n    return result;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function diff_consecutivenums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 10, "Adversarial Code": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List\n<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List\n<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n        }\n        return multiples_of_num;\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List\n<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n        //begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 193, "Adversarial Code": "class Solution {\n    public\n static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n            }\n\n\n        }\n        return res;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int count(String s, char c) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurrence of a given character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n            //begin to write code\n", "prompt": "Write a java function to count the occurrence of a given character in a string."}
{"task_id": 386, "Adversarial Code": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n", "Adversarial truth": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\n", "lang": "javascript", "code_str_generate": "function median_numbers(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of three specific numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 439, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, long l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (l == str.length()) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> extract_string(std::vector<std::string> vec, long l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (l == str.length()) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, long l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (l == str.length()) {\n//begin to write code\n", "prompt": "Write a function to extract specified size of strings from a give list of string values."}
{"task_id": 448, "Adversarial Code": "function remove_uppercase(str1) {\n//begin to write code\n", "Adversarial truth": "function remove_uppercase(str1) {\n    return str1.replace(/[A-Z]/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_uppercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 355, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\nint adjacent_num_product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n        max_product = max(max_product, list_nums[i] * list_nums[i + 1]);\n    }\n    return max_product;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<int>& list_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 43, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n    }\n    int index = 0;\n    for (int j = 0; j <= max_value; ++j) {\n        for (int a = 0; a < buckets[j]; ++a) {\n            my_list[index] = j;\n            index++;\n        }\n    }\n    return my_list;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n", "prompt": "Write a function to sort the given array by using counting sort."}
{"task_id": 79, "Adversarial Code": "#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n//This is a comment line.\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n", "Adversarial truth": "#include <string>\n\n#include <iostream>\n#include <vector>\n#include <string>\n//This is a comment line.\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n            max = i.length();\n        }\n    }\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return max;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <string>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n//This is a comment line.\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n", "prompt": "Write a cpp function to find the length of the longest word."}
{"task_id": 93, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> func_0(vector<vector<string>> vec) {\n    for(auto &x : vec) {\n        sort(x.begin(), x.end());\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<string>> func_0(vector<vector<string>> vec) {\n    for(auto &x : vec) {\n        sort(x.begin(), x.end());\n    }\n    return vec;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> func_0(vector<vector<string>> vec) {\n    for(auto &x : vec) {\n        sort(x.begin(), x.end());\n//begin to write code\n", "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function."}
{"task_id": 361, "Adversarial Code": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_6 = temp_var_6 + 1;}\n            sResult[i] = pq.poll();\n        }\n        return sResult;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        //begin to write code\n", "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm."}
{"task_id": 354, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint func_0(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint func_0(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count += 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint func_0(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n//begin to write code\n", "prompt": "Write a cpp function to count the number of digits of a given number."}
{"task_id": 267, "Adversarial Code": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n//This is a comment line.\n                break;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n//This is a comment line.\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the element count that occurs before the record in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n//This is a comment line.\n                break;\n                //begin to write code\n", "prompt": "Write a function to find the element count that occurs before the record in the given tuple."}
{"task_id": 407, "Adversarial Code": "def Find_Max(lst):\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "Adversarial truth": "def Find_Max(lst): \n    maxList = max((x) for x in lst) \n    return maxList", "lang": "python", "code_str_generate": "def Find_Max(lst):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    maxList = max((x) for x in lst) \n    #begin to write code\n", "prompt": "Write a python function to find the sublist having maximum length."}
{"task_id": 102, "Adversarial Code": "def strip(var_0):\n var_0 = var_0.strip()\n if len(var_0) < 1:\n    return None\n else:\n     if all(var_0[var_1] in \"0123456789\" for var_1 in range(len(var_0))):\n     #begin to write code\n", "Adversarial truth": "def strip(var_0):\n var_0 = var_0.strip()\n if len(var_0) < 1:\n    return None\n else:\n     if all(var_0[var_1] in \"0123456789\" for var_1 in range(len(var_0))):\n          return True\n     elif (var_0[0] in \"+-\") and \\\n         all(var_0[var_1] in \"0123456789\" for var_1 in range(1,len(var_0))):\n         return True\n     else:\n        return False", "lang": "python", "code_str_generate": "def strip(var_0):\n\n '''\n progame language:python\n description:Write a function to check if a string represents an integer or not.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n var_0 = var_0.strip()\n if len(var_0) < 1:\n    return None\n else:\n     if all(var_0[var_1] in \"0123456789\" for var_1 in range(len(var_0))):\n     #begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 388, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\nconst auto var_4 = 0;\nconst auto var_5 = 0;\nconst auto var_6 = 1;\nconst auto var_7 = 1;\nconst auto var_8 = 2;\nconst auto var_9 = 2;\nconst auto var_10 = 3;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\n\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\nconst auto var_4 = 0;\nconst auto var_5 = 0;\nconst auto var_6 = 1;\nconst auto var_7 = 1;\nconst auto var_8 = 2;\nconst auto var_9 = 2;\nconst auto var_10 = 3;\nconst auto var_11 = 3;\ndouble temp_var_3 = var_0 ;while (temp_var_3 < var_1 ) {std::cout << var_2  << std::endl;temp_var_3 = temp_var_3 + var_3 ;}\n    const std::string var_2 = \"This function is used to remove a item of a list\";\n    const auto var_3 = 1;\n    return std::make_tuple(\n        std::get<var_4 >(test_tup1) ^ std::get<var_5 >(test_tup2),\n        std::get<var_6 >(test_tup1) ^ std::get<var_7 >(test_tup2),\n        std::get<var_8 >(test_tup1) ^ std::get<var_9 >(test_tup2),\n        std::get<var_10 >(test_tup1) ^ std::get<var_11 >(test_tup2)\n    );\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nconst auto var_0 = 9.9;\nconst auto var_1 = 9.12;\nconst auto var_4 = 0;\nconst auto var_5 = 0;\nconst auto var_6 = 1;\nconst auto var_7 = 1;\nconst auto var_8 = 2;\nconst auto var_9 = 2;\nconst auto var_10 = 3;\n//begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 430, "Adversarial Code": "function surfacearea_cube(ezi_0) {\n    let var_1 = 6 * ezi_0 * ezi_0;\n    //begin to write code\n", "Adversarial truth": "function surfacearea_cube(ezi_0) {\n    let var_1 = 6 * ezi_0 * ezi_0;\n    return var_1;\n}\n\n", "lang": "javascript", "code_str_generate": "function surfacearea_cube(ezi_0) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let var_1 = 6 * ezi_0 * ezi_0;\n    //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 399, "Adversarial Code": "class Solution {\n    public static int mim_eao(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int mim_eao(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n            }\n        }\n        return min_val;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int mim_eao(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 186, "Adversarial Code": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        {\n            int i = 0;\n            for (; i < test_tup1.length; i++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        {\n            int i = 0;\n            for (; i < test_tup1.length; i++) {\n                    res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n                }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the exponentiation of the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        {\n            int i = 0;\n            for (; i < test_tup1.length; i++) {\n            //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 18, "Adversarial Code": "import javax.swing.*;\nclass Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "Adversarial truth": "import javax.swing.*;\nclass Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n", "lang": "java", "code_str_generate": "import javax.swing.*;\nclass Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element occurring odd number of times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n", "prompt": "Write a java function to find the element occurring odd number of times."}
{"task_id": 323, "Adversarial Code": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return 0;\n        //begin to write code\n", "Adversarial truth": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return 0;\n    } else { \n        return 1;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_Validity(a, b, c) {  \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return 0;\n        //begin to write code\n", "prompt": "Write a javascript function to check whether the triangle is valid or not if sides are given."}
{"task_id": 424, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n            negatives.push_back(num);\n        }\n    }\n    return negatives;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the last digit of a given number."}
{"task_id": 413, "Adversarial Code": "def extract_rear(test_tuple):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def extract_rear(test_tuple):\n  res\\\n = list(sub[len(sub) - 1] for sub in test_tuple)\n  return (res) ", "lang": "python", "code_str_generate": "def extract_rear(test_tuple):\n\n  '''\n  progame language:python\n  description:Write a function to extract only the rear index element of each string in the given tuple.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 55, "Adversarial Code": "def next(list):\n  i= 0\n  for item in list: \n  #begin to write code\n", "Adversarial truth": "def next(list):\n  i= 0\n  for item in list: \n    if item >= 0: \n      i += 1\n  return i ", "lang": "python", "code_str_generate": "def next(list):\n\n  '''\n  progame language:python\n  description:Write a python function to count positive numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  i= 0\n  for item in list: \n  #begin to write code\n", "prompt": "Write a python function to count positive numbers in a list."}
{"task_id": 384, "Adversarial Code": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "Adversarial truth": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n    }\n  }\n  for (const c of char_order) {\n    if (1 === ctr[c]) {\n      return c;\n    }\n  }\n  return null;\n}\n\n", "lang": "javascript", "code_str_generate": "function first_non_repeating_character(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "prompt": "Write a javascript function to find the first non-repeated character in a given string."}
{"task_id": 40, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool contains(int x, int y, int z) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool contains(int x, int y, int z) {\n    return (x == y && y == z);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool contains(int x, int y, int z) {\n//begin to write code\n", "prompt": "Write a function to print check if the triangle is equilateral or not."}
{"task_id": 421, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble\\\n median_trapezium(double base1, double base2, double height) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble\\\n median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n    return median;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble\\\n median_trapezium(double base1, double base2, double height) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 419, "Adversarial Code": "function parabola_directrix(a, b, c) { \n  let\n  //begin to write code\n", "Adversarial truth": "function parabola_directrix(a, b, c) { \n  let\n directrix = Math.floor(c - ((b * b) + 1) * 4 * a);\n  return directrix;\n}\n\n", "lang": "javascript", "code_str_generate": "function parabola_directrix(a, b, c) { \n\n  /*\n  progame language:javascript\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let\n  //begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 436, "Adversarial Code": "def shapes(shape):\n shapes = list(map(lambda s: s ** 3, shape))\n #begin to write code\n", "Adversarial truth": "def shapes(shape):\n shapes = list(map(lambda s: s ** 3, shape))\n return shapes", "lang": "python", "code_str_generate": "def shapes(shape):\n\n '''\n progame language:python\n description:Write a function to find cubes of individual elements in a list using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n shapes = list(map(lambda s: s ** 3, shape))\n #begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 174, "Adversarial Code": "def parabola_focus(a, b, c):\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  #begin to write code\n", "Adversarial truth": "def parabola_focus(a, b, c): \n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  return focus", "lang": "python", "code_str_generate": "def parabola_focus(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the focus of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\n  #begin to write code\n", "prompt": "Write a function to find the focus of a parabola."}
{"task_id": 430, "Adversarial Code": "function surfacearea_cube(l) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function surfacearea_cube(l) {\n//This is a comment line.\n    let surfacearea = 6 * l * l;\n    return surfacearea;\n}\n\n", "lang": "javascript", "code_str_generate": "function surfacearea_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 316, "Adversarial Code": "class Solution {\n    public static boolean checkIsosceles(int X, int Y, int Z) {\n        if (X == Y || Y == Z || Z == X) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkIsosceles(int X, int Y, int Z) {\n        if (X == Y || Y == Z || Z == X) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkIsosceles(int X, int Y, int Z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is isosceles or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (X == Y || Y == Z || Z == X) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 159, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& var_1, int var_2, int var_3) {\n    int var_4 = 0;\n    for (int var_0 = var_2; var_0 <= var_3; ++var_0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& var_1, int var_2, int var_3) {\n    int var_4 = 0;\n    for (int var_0 = var_2; var_0 <= var_3; ++var_0) {\n        var_4 += var_1[var_0];\n    }\n    return var_4;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& var_1, int var_2, int var_3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int var_4 = 0;\n    for (int var_0 = var_2; var_0 <= var_3; ++var_0) {\n//begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 273, "Adversarial Code": "import json\ndef check_element(list,element):\n#This is a comment line.\n#This is a comment line.\n    #begin to write code\n", "Adversarial truth": "import json\n#This is a comment line.\n#This is a comment line.\ndef check_element(list,element):\n  check_element=all(v== element for v in list)\n  return check_element", "lang": "python", "code_str_generate": "import json\ndef check_element(list,element):\n\n    '''\n    progame language:python\n    description:Write a function to check whether all items of a list are equal to a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n#This is a comment line.\n    #begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 6, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint square_perimeter(long a) {\n    int perimeter = 4 * a;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint square_perimeter(long a) {\n    int perimeter = 4 * a;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint square_perimeter(long a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 4 * a;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 424, "Adversarial Code": "function last_Digit(n) {\n//begin to write code\n", "Adversarial truth": "function last_Digit(n) {\n    return n % 10;\n}\n\n", "lang": "javascript", "code_str_generate": "function last_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the last digit of a given number."}
{"task_id": 393, "Adversarial Code": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(long a, int b) {\n    if (a <= b) {\n        return a;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include<cassert>\n#include <assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(long a, int b) {\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(long a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a <= b) {\n        return a;\n//begin to write code\n", "prompt": "Write a cpp function to find the minimum of two numbers."}
{"task_id": 493, "Adversarial Code": "def\\\n sum_Of_Series(n): \n    sum = 0\n    for\\\n    #begin to write code\n", "Adversarial truth": "def\\\n sum_Of_Series(n): \n\n\n    sum = 0\n    for\\\n\n\n i in range(1,n + 1): \n        sum\\\n += i * i*i       \n    return sum\n", "lang": "python", "code_str_generate": "def\\\n\n '''\n progame language:python\n description:Write a python function to find the cube sum of first n natural numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n sum_Of_Series(n): \n    sum = 0\n    for\\\n    #begin to write code\n", "prompt": "Write a python function to find the cube sum of first n natural numbers."}
{"task_id": 441, "Adversarial Code": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n        } else {\n            return null;\n        }\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n\n        /*\n        progame language:java\n        description:Write a function that gives loss amount if the given amount has loss else return none.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n            //begin to write code\n", "prompt": "Write a function that gives loss amount if the given amount has loss else return none."}
{"task_id": 124, "Adversarial Code": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int hexagonalNum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (2 * n - 1);\n        //begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 82, "Adversarial Code": "def f(x,n):\n\tif n==0:\n\t\treturn 1\n\telif x==0:\n\t\treturn 0\n\t\t#begin to write code\n", "Adversarial truth": "def f(x,n):\n\tif n==0:\n\t\treturn 1\n\telif x==0:\n\t\treturn 0\n\telif n==1:\n\t\treturn x\n\telse:\n\t\treturn x*f(x,n-1)", "lang": "python", "code_str_generate": "def f(x,n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to calculate the value of 'a' to the power 'b'.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif n==0:\n\t\treturn 1\n\telif x==0:\n\t\treturn 0\n\t\t#begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 321, "Adversarial Code": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n", "Adversarial truth": "def char_frequency(str1):\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n            dict[n] += 1\n        else:\n            dict[n] = 1\n    return dict", "lang": "python", "code_str_generate": "def char_frequency(str1):\n\n    '''\n    progame language:python\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    dict = {}\n    for n in str1:\n        keys = dict.keys()\n        if n in keys:\n        #begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 271, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> merge(const std::vector<int>& num, const std::vector<int>& lrht) {\n    std::vector<int> ieg;\n    for (size_t t = 0; t < num.size(); ++t) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> merge(const std::vector<int>& num, const std::vector<int>& lrht) {\n    std::vector<int> ieg;\n    for (size_t t = 0; t < num.size(); ++t) {\n        ieg.push_back(num[t] - lrht[t]);\n    }\n    return ieg;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> merge(const std::vector<int>& num, const std::vector<int>& lrht) {\n    std::vector<int> ieg;\n    for (size_t t = 0; t < num.size(); ++t) {\n//begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 473, "Adversarial Code": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n\n        /*\n        progame language:java\n        description:Write a function to remove the matching tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 322, "Adversarial Code": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n\n\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer\n.compare((Integer) o1.get(1), (Integer) o2.get(1));\n            }\n        });\n        return sub_li;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n\n        /*\n        progame language:java\n        description:Write a java function to sort a list according to the second element in sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer\n                //begin to write code\n", "prompt": "Write a java function to sort a list according to the second element in sublist."}
{"task_id": 12, "Adversarial Code": "class Solution {\n    public int func_0(int[][] solution) {\n        int max = -100000;\n        for (int[] Y : solution) {\n            int i = 0;\n            for (int x : Y) {\n                i += x;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public int func_0(int[][] solution) {\n        int max = -100000;\n        for (int[] Y : solution) {\n            int i = 0;\n            for (int x : Y) {\n                i += x;\n            }\n            max = Math.max(i, max);\n        }\n        return max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int func_0(int[][] solution) {\n        int max = -100000;\n        for (int[] Y : solution) {\n            int i = 0;\n            for (int x : Y) {\n                i += x;\n                //begin to write code\n", "prompt": "Write a java function to find the maximum sum of elements of list in a list of lists."}
{"task_id": 131, "Adversarial Code": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n", "Adversarial truth": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_samepair(list1, list2, list3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 252, "Adversarial Code": "def merge_dict(d1,d2):\n d = d1.copy()\n #begin to write code\n", "Adversarial truth": "def merge_dict(d1,d2):\n d = d1.copy()\n d.update(d2)\n return d", "lang": "python", "code_str_generate": "def merge_dict(d1,d2):\n\n '''\n progame language:python\n description:Write a function to merge two dictionaries.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n d = d1.copy()\n #begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 216, "Adversarial Code": "function min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    //begin to write code\n", "Adversarial truth": "\nfunction min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n", "lang": "javascript", "code_str_generate": "function min_of_three(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    //begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 82, "Adversarial Code": "class Solution {\n    public\n static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n\n\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * power(a, b - 1);\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int power(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the value of 'a' to the power 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n            //begin to write code\n", "prompt": "Write a function to calculate the value of 'a' to the power 'b'."}
{"task_id": 492, "Adversarial Code": "import java.time.*;\nclass Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n            //begin to write code\n", "Adversarial truth": "import java.time.*;\nclass Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.time.*;\nclass Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to add consecutive numbers of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n            //begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 266, "Adversarial Code": "def dict_filter(dict,filter):\n result = {key:value for (key, value) in dict.items() if value >=filter}\n #begin to write code\n", "Adversarial truth": "def dict_filter(dict,filter):\n result = {key:value for (key, value) in dict.items() if value >=filter}\n return result", "lang": "python", "code_str_generate": "def dict_filter(dict,filter):\n\n '''\n progame language:python\n description:Write a function to filter a dictionary based on values.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = {key:value for (key, value) in dict.items() if value >=filter}\n #begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 357, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n    return LSA;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n//begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 115, "Adversarial Code": "import java.sql.*;\nclass Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n", "Adversarial truth": "import java.sql.*;\nclass Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.sql.*;\nclass Solution {\n    public static int sum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of common divisors of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n", "prompt": "Write a java function to find the sum of common divisors of two given numbers."}
{"task_id": 407, "Adversarial Code": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections\n.max(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sublist having maximum length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Collections\n        //begin to write code\n", "prompt": "Write a java function to find the sublist having maximum length."}
{"task_id": 150, "Adversarial Code": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "Adversarial truth": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_elements(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 54, "Adversarial Code": "def recursive_list_sum(var_0):\n\tvar_2 = 0\n\tfor var_1 in var_0:\n\t\tif type(var_1) == type([]):\n\t\t#begin to write code\n", "Adversarial truth": "def recursive_list_sum(var_0):\n\tvar_2 = 0\n\tfor var_1 in var_0:\n\t\tif type(var_1) == type([]):\n\t\t\tvar_2 = var_2 + recursive_list_sum(var_1)\n\t\telse:\n\t\t\tvar_2 = var_2 + var_1\n\treturn var_2", "lang": "python", "code_str_generate": "def recursive_list_sum(var_0):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function of recursion list sum.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tvar_2 = 0\n\tfor var_1 in var_0:\n\t\tif type(var_1) == type([]):\n\t\t#begin to write code\n", "prompt": "Write a function of recursion list sum."}
{"task_id": 6, "Adversarial Code": "def square_perimeter(a):\n  perimeter=4*a\n  #begin to write code\n", "Adversarial truth": "def square_perimeter(a):\n  perimeter=4*a\n  return perimeter", "lang": "python", "code_str_generate": "def square_perimeter(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a square.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=4*a\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 282, "Adversarial Code": "class Solution {\n    public static double func_0(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double func_0(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double func_0(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 160, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    {\n        size_t i = 0;\n        while(i + 2 < s.length()){\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint count_occurance(const std::string &s) {\n    int count = 0;\n    {\n        size_t i = 0;\n        while(i + 2 < s.length()){\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n        }\n            ++i;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    {\n        size_t i = 0;\n        while(i + 2 < s.length()){\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 384, "Adversarial Code": "function count(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "Adversarial truth": "function count(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n    }\n  }\n  for (const c of char_order) {\n    if (ctr[c] === 1) {\n      return c;\n    }\n  }\n  return null;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n", "prompt": "Write a javascript function to find the first non-repeated character in a given string."}
{"task_id": 226, "Adversarial Code": "import java.util.*;\nclass Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "Adversarial truth": "import java.util.*;\nclass Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            res.put(sortedEle, res.getOrDefault(sortedEle, 0) + 1);\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.util.*;\nclass Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n\n        /*\n        progame language:java\n        description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"task_id": 172, "Adversarial Code": "import subprocess\ndef count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n", "Adversarial truth": "import subprocess\ndef count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "lang": "python", "code_str_generate": "import subprocess\ndef count_pairs(arr, n, k):\n\n  '''\n  progame language:python\n  description:Write a function to count all the distinct pairs having a difference of k in any array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 184, "Adversarial Code": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n            //begin to write code\n", "Adversarial truth": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function first(arr, x, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the first position of an element in a sorted array."}
{"task_id": 41, "Adversarial Code": "function kod(var_0, var_1) {\n//begin to write code\n", "Adversarial truth": "function kod(var_0, var_1) {\n    return var_0 * var_1;\n}\n\n", "lang": "javascript", "code_str_generate": "function kod(var_0, var_1) {\n//begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 334, "Adversarial Code": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "Adversarial truth": "def diff_consecutivenums(nums):\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "lang": "python", "code_str_generate": "def diff_consecutivenums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\n    #begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 399, "Adversarial Code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "Adversarial truth": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "lang": "python", "code_str_generate": "def min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     min_val = min(i for i in listval if isinstance(i, int))\n     #begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 447, "Adversarial Code": "const http = require('http');\nfunction rectangle_area(l, b) {\n//begin to write code\n", "Adversarial truth": "const http = require('http');\nfunction rectangle_area(l, b) {\n//This is a comment line.\n    return l * b;\n}\n\n", "lang": "javascript", "code_str_generate": "const http = require('http');\nfunction rectangle_area(l, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 364, "Adversarial Code": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    //begin to write code\n", "Adversarial truth": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    return (\nn - a > b - n ? b : a);\n}\n\n", "lang": "javascript", "code_str_generate": "function round_num(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    //begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 354, "Adversarial Code": "import java.math.*;\nclass Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n//This is a comment line.\n            n /= 10;\n            //begin to write code\n", "Adversarial truth": "import java.math.*;\nclass Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n//This is a comment line.\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}\nnew Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n", "lang": "java", "code_str_generate": "import java.math.*;\nclass Solution {\n    public static int count_Digit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of digits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (n != 0) {\n//This is a comment line.\n            n /= 10;\n            //begin to write code\n", "prompt": "Write a java function to count the number of digits of a given number."}
{"task_id": 333, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n        result.push_back(nums[i] - nums[i-1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find number of elements with odd factors in a given range."}
{"task_id": 102, "Adversarial Code": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Boolean checkInteger(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a string represents an integer or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 133, "Adversarial Code": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "Adversarial truth": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_Pairs(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 22, "Adversarial Code": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let\n        //begin to write code\n", "Adversarial truth": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let\n c = Math.pow(10, cnt);\n        B_Number += rem * c;\n        N = Math.floor(N / 2);\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n", "lang": "javascript", "code_str_generate": "function decimal_To_Binary(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let\n        //begin to write code\n", "prompt": "Write a javascript function to convert a decimal number to binary number."}
{"task_id": 102, "Adversarial Code": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n    let temp_var_4 = 9.9;temp_var_4 = temp_var_4 + 1;\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n        //begin to write code\n", "Adversarial truth": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n    let temp_var_4 = 9.9;temp_var_4 = temp_var_4 + 1;\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n        } else if (\"+-\".includes(text[0]) && text.slice(1).split('').every((char, i) => \"0123456789\".includes(text[i + 1]))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function checkInteger(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a string represents an integer or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n    let temp_var_4 = 9.9;temp_var_4 = temp_var_4 + 1;\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n        //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 321, "Adversarial Code": "class Solution {\n    public static Map<Character, Integer> charFrequency(String string) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (char character : string.toCharArray()) {\n            map.put(character, map.getOrDefault(character, 0) + 1);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Character, Integer> charFrequency(String string) {\n        Map<Character, Integer> map = new HashMap<>();\n        for (char character : string.toCharArray()) {\n            map.put(character, map.getOrDefault(character, 0) + 1);\n        }\n        return map;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Character, Integer> charFrequency(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to count character frequency of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> map = new HashMap<>();\n        for (char character : string.toCharArray()) {\n            map.put(character, map.getOrDefault(character, 0) + 1);\n            //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 403, "Adversarial Code": "#include <sstream>\n#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n", "Adversarial truth": "#include <sstream>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <sstream>\n#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the value exists in a sequence or not."}
{"task_id": 161, "Adversarial Code": "const os = require('os');\nfunction count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "Adversarial truth": "const os = require('os');\nfunction count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "const os = require('os');\nfunction count_occurance(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n", "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item"}
{"task_id": 122, "Adversarial Code": "const path = require('path');\nfunction sum_negativenum(nums) {\n//begin to write code\n", "Adversarial truth": "const path = require('path');\nfunction sum_negativenum(nums) {\n  const negativeNums = nums.filter(num => num < 0);\n  return negativeNums.reduce((acc, cur) => acc + cur, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "const path = require('path');\nfunction sum_negativenum(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function."}
{"task_id": 454, "Adversarial Code": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "Adversarial truth": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "lang": "python", "code_str_generate": "def drop_empty(dict1):\n\n  '''\n  progame language:python\n  description:Write a function to drop empty items from a given dictionary.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  #begin to write code\n", "prompt": "Write a function to drop empty items from a given dictionary."}
{"task_id": 38, "Adversarial Code": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    #begin to write code\n", "Adversarial truth": "def specified_element(nums, N):\n    result = [i[N] for i in nums]\n    return result\n    ", "lang": "python", "code_str_generate": "def specified_element(nums, N):\n\n    '''\n    progame language:python\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = [i[N] for i in nums]\n    #begin to write code\n", "prompt": "Write a function to extract every first or specified element from a given two-dimensional list."}
{"task_id": 298, "Adversarial Code": "def maximum(var_0,var_1):\n    if var_0 >= var_1: \n        return var_0 \n        #begin to write code\n", "Adversarial truth": "def maximum(var_0,var_1):   \n    if var_0 >= var_1: \n        return var_0 \n    else: \n        return var_1 ", "lang": "python", "code_str_generate": "def maximum(var_0,var_1):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if var_0 >= var_1: \n        return var_0 \n        #begin to write code\n", "prompt": "Write a python function to find the maximum of two numbers."}
{"task_id": 71, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n    double\\\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_sphere(double r) {\n    double\\\n volume = (4.0 / 3.0) * M_PI * r * r * r;\n    return volume;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double\\\n//begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 85, "Adversarial Code": "import re\ndef divisor(n):\n  for i in range(n):\n  #begin to write code\n", "Adversarial truth": "import re\ndef divisor(n):\n  for i in range(n):\n    x = len([i for i in range(1,n+1) if not n % i])\n  return x", "lang": "python", "code_str_generate": "import re\ndef divisor(n):\n\n  '''\n  progame language:python\n  description:Write a python function to find the number of divisors of a given integer.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  for i in range(n):\n  #begin to write code\n", "prompt": "Write a python function to find the number of divisors of a given integer."}
{"task_id": 307, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n\n\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n            maxvalue = max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum volume of a cuboid with given sum of sides."}
{"task_id": 414, "Adversarial Code": "function countElementInList(list, element) {\n    let count = 0;\n    for (let q = 0; q < list.length; q++) {\n        if (list[q].includes(element)) {\n        //begin to write code\n", "Adversarial truth": "function countElementInList(list, element) {\n    let count = 0;\n    for (let q = 0; q < list.length; q++) {\n        if (list[q].includes(element)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function countElementInList(list, element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let q = 0; q < list.length; q++) {\n        if (list[q].includes(element)) {\n        //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 370, "Adversarial Code": "import socket\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    temp_var_4 = 9.9\n    while temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1\n    #begin to write code\n", "Adversarial truth": "import socket\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    temp_var_4 = 9.9\n    while temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1\n    temp_var_5 = 9.9\n    if temp_var_5 < 9.12: print('This function is used to remove a item of a list'); temp_var_5 += 1\n    return result", "lang": "python", "code_str_generate": "import socket\nfrom operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(list_data, key=itemgetter(index_no))\n    temp_var_4 = 9.9\n    while temp_var_4 < 9.12: print('This function is used to remove a item of a list'); temp_var_4 += 1\n    #begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 77, "Adversarial Code": "import collections\ndef freq_count(list1):\n  freq_count\\\n  #begin to write code\n", "Adversarial truth": "\n\nimport collections\ndef freq_count(list1):\n  freq_count\\\n= collections.Counter(list1)\n  return freq_count", "lang": "python", "code_str_generate": "import collections\ndef freq_count(list1):\n\n  '''\n  progame language:python\n  description:Write a function to get the frequency of the elements in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  freq_count\\\n  #begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 215, "Adversarial Code": "def odd_values_string(str):\n#This is a comment line.\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "Adversarial truth": "def odd_values_string(str):\n#This is a comment line.\n  result = \"\" \n  for i in range(len(str)):\n    if i % 2 == 0:\n      result = result + str[i]\n#This is a comment line.\n  return result", "lang": "python", "code_str_generate": "def odd_values_string(str):\n\n    '''\n    progame language:python\n    description:Write a python function to remove the characters which have odd index values of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "prompt": "Write a python function to remove the characters which have odd index values of a given string."}
{"task_id": 128, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble circle_circumference(double r) {\n    double perimeter = r * 3.1415 * 2;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble circle_circumference(double r) {\n    double perimeter = r * 3.1415 * 2;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble circle_circumference(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double perimeter = r * 3.1415 * 2;\n//begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 131, "Adversarial Code": "function count_samepair(list1, list2, list3) {\n    let rvhfot = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n", "Adversarial truth": "function count_samepair(list1, list2, list3) {\n    let rvhfot = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n            rvhfot++;\n        }\n    }\n    return rvhfot;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_samepair(list1, list2, list3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let rvhfot = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 213, "Adversarial Code": "class Solution {\n    public static int count(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int count(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int count(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n", "prompt": "Write a java function to count set bits of a given number."}
{"task_id": 233, "Adversarial Code": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the next perfect square greater than a given number."}
{"task_id": 29, "Adversarial Code": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n            }\n        }\n//This is a comment line.\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency of the elements in a given list of lists using collections module.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n", "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module."}
{"task_id": 464, "Adversarial Code": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        return list;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n\n        /*\n        progame language:java\n        description:Write a function to sort counter by value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        //begin to write code\n", "prompt": "Write a function to sort counter by value."}
{"task_id": 98, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint odd_Equivalent(const std::string& s, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int count = var_0 ;\n    for (int i = var_1 ; i < n; ++i) {\n        const char var_2 = '1';\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint odd_Equivalent(const std::string& s, int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int count = var_0 ;\n    for (int i = var_1 ; i < n; ++i) {\n        const char var_2 = '1';\n        if (s[i] == var_2 ) {\n            const auto var_3 = 1;\n            count += var_3 ;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint odd_Equivalent(const std::string& s, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the count of rotations of a binary string with odd value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 0;\n    int count = var_0 ;\n    for (int i = var_1 ; i < n; ++i) {\n        const char var_2 = '1';\n//begin to write code\n", "prompt": "Write a cpp function to find the count of rotations of a binary string with odd value."}
{"task_id": 355, "Adversarial Code": "function max(listNums) {\n//begin to write code\n", "Adversarial truth": "function max(listNums) {\n    return Math.max(...listNums.slice(0, -1).map((num, i) => num * listNums[i + 1]));\n}\n\n", "lang": "javascript", "code_str_generate": "function max(listNums) {\n//begin to write code\n", "prompt": "Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 380, "Adversarial Code": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     #begin to write code\n", "Adversarial truth": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "lang": "python", "code_str_generate": "def convert_list_dictionary(l1, l2, l3):\n\n     '''\n     progame language:python\n     description:Write a function to convert more than one list to nested dictionary.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     #begin to write code\n", "prompt": "Write a function to convert more than one list to nested dictionary."}
{"task_id": 74, "Adversarial Code": "const stream = require('stream');\nfunction surfacearea_sphere(r) {\n//begin to write code\n", "Adversarial truth": "const stream = require('stream');\nfunction surfacearea_sphere(r) {\n  let surfacearea = 4 * Math.PI * r * r;\n  return surfacearea;\n}\n\n", "lang": "javascript", "code_str_generate": "const stream = require('stream');\nfunction surfacearea_sphere(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 477, "Adversarial Code": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "Adversarial truth": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  return area;\n}\n", "lang": "javascript", "code_str_generate": "function area_pentagon(a) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the area of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 270, "Adversarial Code": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n", "Adversarial truth": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n        return false;\n    }\n    return true;\n}\n\n", "lang": "javascript", "code_str_generate": "function all_unique(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n", "prompt": "Write a javascript function to check if the elements of a given list are unique or not."}
{"task_id": 74, "Adversarial Code": "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble surfacearea_sphere(double r) {\n    double surfacearea = 4 * M_PI * r * r;\n//begin to write code\n", "Adversarial truth": "#include <cstdio>\n\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble surfacearea_sphere(double r) {\n    double surfacearea = 4 * M_PI * r * r;\n    return surfacearea;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cstdio>\n#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble surfacearea_sphere(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double surfacearea = 4 * M_PI * r * r;\n//begin to write code\n", "prompt": "Write a function to find the surface area of a sphere."}
{"task_id": 105, "Adversarial Code": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n\n\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int tupleToInt(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given tuple of positive integers into an integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n", "prompt": "Write a function to convert a given tuple of positive integers into an integer."}
{"task_id": 478, "Adversarial Code": "function frequency_Of_Largest(n, arr) {\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] > mn) {\n            const var_3 = 1;\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Largest(n, arr) {\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] > mn) {\n            const var_3 = 1;\n            mn = arr[i];\n            freq = var_3 ;\n        } else if (arr[i] === mn) {\n            const var_4 = 1;\n            freq += var_4 ;\n        }\n    }\n    return freq;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Largest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 1;\n    const var_2 = 1;\n    let mn = arr[var_0 ];\n    let freq = var_1 ;\n    for (let i = var_2 ; i < n; i++) {\n        if (arr[i] > mn) {\n            const var_3 = 1;\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the largest value in a given array."}
{"task_id": 266, "Adversarial Code": "#include <string>\n#include <cmath>\n#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n", "Adversarial truth": "#include <string>\n#include <cmath>\n#include<iostream>\n    \n\n#include <map>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n            result[pair.first] = pair.second;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <string>\n#include <cmath>\n#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter a dictionary based on values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 197, "Adversarial Code": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return regex_search(num, num_fetch);\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n", "prompt": "Write a function to check the given decimal with a precision of 2 by using regex."}
{"task_id": 165, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter(int a, int b, int c) {\n    int perimeter = a + b + c;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter(int a, int b, int c) {\n    int perimeter = a + b + c;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 266, "Adversarial Code": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to filter a dictionary based on values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n                //begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 476, "Adversarial Code": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[1 + j][1]) {\n                let temp = tup[j];\n                //begin to write code\n", "Adversarial truth": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[1 + j][1]) {\n                let temp = tup[j];\n                tup[j] = tup[1 + j];\n                tup[1 + j] = temp;\n            }\n        }\n    }\n    return tup;\n}", "lang": "javascript", "code_str_generate": "//function definition\nfunction sort_tuple(tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[1 + j][1]) {\n                let temp = tup[j];\n                //begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 27, "Adversarial Code": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n        } else {\n            return -1;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the division of first even and odd number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n            //begin to write code\n", "prompt": "Write a function to find the division of first even and odd number of a given list."}
{"task_id": 245, "Adversarial Code": "def next(var_2):\n    var_0 = 0\n    for var_3 in range(var_2):\n        if var_3 <= 1:\n            continue\n        for var_1 in range(2,var_3):\n        #begin to write code\n", "Adversarial truth": "def next(var_2):\n    var_0 = 0\n    for var_3 in range(var_2):\n        if var_3 <= 1:\n            continue\n        for var_1 in range(2,var_3):\n            if (var_3 % var_1) == 0:\n                break\n        else:\n            var_0 += 1\n    return var_0", "lang": "python", "code_str_generate": "def next(var_2):\n\n    '''\n    progame language:python\n    description:Write a python function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_0 = 0\n    for var_3 in range(var_2):\n        if var_3 <= 1:\n            continue\n        for var_1 in range(2,var_3):\n        #begin to write code\n", "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number."}
{"task_id": 205, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                exist = false;\n                break;\n            }\n        }\n        if (!exist) break;\n    }\n    return exist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 250, "Adversarial Code": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new long[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new long[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform mathematical division operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new long[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n            //begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 386, "Adversarial Code": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n            if (a > c) {\n                median = a;\n            } else if (b < c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        }\n        return median;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of three specific numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n        //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 134, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n\n\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n        minEle = std::min(minEle, arr[i]);\n        maxEle = std::max(maxEle, arr[i]);\n    }\n    return (maxEle - minEle);\n\n\n}\n\n\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum difference between any two elements in a given array."}
{"task_id": 407, "Adversarial Code": "class Solution {\n//This is a comment line.\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "class Solution {\n//This is a comment line.\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n//This is a comment line.\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n//This is a comment line.\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n\n    /*\n    progame language:java\n    description:Write a java function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a java function to find the sublist having maximum length."}
{"task_id": 282, "Adversarial Code": "function otherside_rightangle(w, h) {\n//begin to write code\n", "Adversarial truth": "function otherside_rightangle(w, h) {\n    return Math.sqrt((w * w) + (h * h));\n}\n\n", "lang": "javascript", "code_str_generate": "function otherside_rightangle(w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the third side of a right angled triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the third side of a right angled triangle."}
{"task_id": 270, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to check if the elements of a given list are unique or not."}
{"task_id": 284, "Adversarial Code": "function sum_div(number) {\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n        //begin to write code\n", "Adversarial truth": "function sum_div(number) {\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n            divisors.push(i);\n        }\n    }\n    return divisors.reduce((a, b) => a + b, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function sum_div(number) {\n\n    /*\n    progame language:javascript\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n        //begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 131, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint func_0(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint func_0(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 180, "Adversarial Code": "class Solution {\n    public boolean csvxpMomtsNumyer(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean csvxpMomtsNumyer(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean csvxpMomtsNumyer(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month name contains 30 days or not."}
{"task_id": 94, "Adversarial Code": "function count(lst) {   \n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function count(lst) {   \n//This is a comment line.\n    return lst.reduce((sum, value) => sum + value, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function count(lst) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a javascript function to count true booleans in the given list."}
{"task_id": 342, "Adversarial Code": "def remove_column(list1, n):\n   for i in list1: \n   #begin to write code\n", "Adversarial truth": "def remove_column(list1, n):\n   for i in list1: \n    del i[n] \n   return list1", "lang": "python", "code_str_generate": "def remove_column(list1, n):\n\n   '''\n   progame language:python\n   description:Write a function to remove a specified column from a given nested list.\n   you must follow:\n   1. Provide the complete code without any textual explanations and do not generate test scripts.\n   2. Please strictly follow the specified format provided below for the code.\n   3. Do not change the function names.\n   4. The original code content must be fully included in the generated complete code, including all package import sections.\n   5. For C++ language, do not generate the main function; I have my own main function available.\n   6. Do not generate test cases.\n   '''\n\n   for i in list1: \n   #begin to write code\n", "prompt": "Write a function to remove a specified column from a given nested list."}
{"task_id": 128, "Adversarial Code": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double circleCircumference(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the circumference of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 6, "Adversarial Code": "class Solution {\n    public static int squarePerimeter(long a) {\n        int perimeter = a * 4;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int squarePerimeter(long a) {\n        int perimeter = a * 4;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int squarePerimeter(long a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = a * 4;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 399, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<long>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<long>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n            min_val = value;\n        }\n    }\n    return min_val;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = numeric_limits<long>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 491, "Adversarial Code": "def find(n,m):\n  r = n%m\n  #begin to write code\n", "Adversarial truth": "def find(n,m):\n  r = n%m\n  return (r)", "lang": "python", "code_str_generate": "def find(n,m):\n\n  '''\n  progame language:python\n  description:Write a python function to find remainder of two numbers.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  r = n%m\n  #begin to write code\n", "prompt": "Write a python function to find remainder of two numbers."}
{"task_id": 250, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <utility>\n\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n    std::vector<T> second_part(list1.begin() + L, list1.end());\n    return {first_part, second_part};\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n", "prompt": "Write a function to perform mathematical division operation across the given tuples."}
{"task_id": 19, "Adversarial Code": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                if (checkEquality(s.substring(i, i + j))) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to count all the substrings starting and ending with same characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n", "prompt": "Write a java function to count all the substrings starting and ending with same characters."}
{"task_id": 347, "Adversarial Code": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "Adversarial truth": "def moddiv_list(nums1,nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "lang": "python", "code_str_generate": "def moddiv_list(nums1,nums2):\n\n  '''\n  progame language:python\n  description:Write a function to find modulo division of two lists using map and lambda function.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = map(lambda x, y: x % y, nums1, nums2)\n  #begin to write code\n", "prompt": "Write a function to find modulo division of two lists using map and lambda function."}
{"task_id": 129, "Adversarial Code": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n    #begin to write code\n", "Adversarial truth": "def extract_singly(test_list):\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n      if not ele in temp:\n        temp.add(ele)\n        res.append(ele)\n  return (res) ", "lang": "python", "code_str_generate": "def extract_singly(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to extract elements that occur singly in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = []\n  temp = set()\n  for inner in test_list:\n    for ele in inner:\n    #begin to write code\n", "prompt": "Write a function to extract elements that occur singly in the given tuple list."}
{"task_id": 44, "Adversarial Code": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n        double tn = a * Math.pow(r, n - 1);\n        return tn;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of geometric series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n", "prompt": "Write a function to find t-nth term of geometric series."}
{"task_id": 323, "Adversarial Code": "def check_Validity(a,b,c):\n    if not((a + b <= c) or (a + c <= b) or (b + c <= a)):\n        return True\n        #begin to write code\n", "Adversarial truth": "def check_Validity(a,b,c):  \n    if not((a + b <= c) or (a + c <= b) or (b + c <= a)):\n        return True\n    else:\n        return False        ", "lang": "python", "code_str_generate": "def check_Validity(a,b,c):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if not((a + b <= c) or (a + c <= b) or (b + c <= a)):\n        return True\n        #begin to write code\n", "prompt": "Write a python function to check whether the triangle is valid or not if sides are given."}
{"task_id": 90, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, long k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[1 + j]) {\n                swap(arr[j], arr[1 + j]);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint kth_element(vector<int>& arr, int n, long k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[1 + j]) {\n                swap(arr[j], arr[1 + j]);\n            }\n        }\n    }\n    return arr[k - 1];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, long k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the kth element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[1 + j]) {\n                swap(arr[j], arr[1 + j]);\n//begin to write code\n", "prompt": "Write a function to find the kth element in the given array."}
{"task_id": 430, "Adversarial Code": "class Solution {\n    public static int surfaceareaCube(int l) {\n        int surfacearea = 6 * l * l;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int surfaceareaCube(int l) {\n        int surfacearea = 6 * l * l;\n        return surfacearea;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int surfaceareaCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int surfacearea = 6 * l * l;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 324, "Adversarial Code": "function ap_sum(p, c, ap) {\n    let sum = (c * (2 * p + (c - 1) * ap)) / 2;\n    //begin to write code\n", "Adversarial truth": "function ap_sum(p, c, ap) {\n    let sum = (c * (2 * p + (c - 1) * ap)) / 2;\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function ap_sum(p, c, ap) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = (c * (2 * p + (c - 1) * ap)) / 2;\n    //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 171, "Adversarial Code": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n            } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n                specialCharacters.add(c);\n            }\n        }\n\n        List<List<Character>> result = new ArrayList<>();\n        result.add(uppercaseCharacters);\n        result.add(lowercaseCharacters);\n        result.add(numericalCharacters);\n        result.add(specialCharacters);\n\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 362, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n volume_cuboid(int l, int w, int h) {\n    return l * w * h;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n//begin to write code\n", "prompt": "Write a function to find the volume of a cuboid."}
{"task_id": 87, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble func_0(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ndouble func_0(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n        total *= x;\n    }\n    return total / numbers.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble func_0(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n", "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list."}
{"task_id": 147, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n\n    if ((month == \"March\") && (days > 19)) {\n        season = \"spring\";\n    } else if ((month == \"June\") && (days > 20)) {\n        season = \"summer\";\n    } else if ((month == \"September\") && (days > 21)) {\n        season = \"autumn\";\n    } else if ((month == \"December\") && (days > 20)) {\n        season = \"winter\";\n    }\n\n    return season;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n", "prompt": "Write a cpp function to find k number of operations required to make all elements equal."}
{"task_id": 10, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, long n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> multiples_of_num(int m, long n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n        multiples.push_back(n * i);\n    }\n    return multiples;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, long n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 95, "Adversarial Code": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n", "Adversarial truth": "def add_lists(test_list, test_tup):\n  res = tuple(list(test_tup) + test_list)\n  return (res) ", "lang": "python", "code_str_generate": "def add_lists(test_list, test_tup):\n\n  '''\n  progame language:python\n  description:Write a function to add the given list to the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(list(test_tup) + test_list)\n  #begin to write code\n", "prompt": "Write a function to add the given list to the given tuples."}
{"task_id": 133, "Adversarial Code": "def sum_Pairs(arr,n):\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "Adversarial truth": "def sum_Pairs(arr,n): \n    sum = 0\n    for i in range(n - 1,-1,-1): \n        sum += i*arr[i] - (n-1-i) * arr[i] \n\n\n    return sum\n", "lang": "python", "code_str_generate": "def sum_Pairs(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(n - 1,-1,-1): \n    #begin to write code\n", "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array."}
{"task_id": 247, "Adversarial Code": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        new Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int countOdd(int[] arrayNums) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of odd elements in the given list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n", "prompt": "Write a function to find number of odd elements in the given list using lambda function."}
{"task_id": 176, "Adversarial Code": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n    //begin to write code\n", "Adversarial truth": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n    } else {\n        return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function longest_common_subsequence(X, Y, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n    //begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 156, "Adversarial Code": "function next_Power_Of_2(value) {\n    let i = 0;\n    if (value && !(value & (value - 1))) {\n        return value;\n    }\n    //begin to write code\n", "Adversarial truth": "function next_Power_Of_2(value) {\n    let i = 0;\n    if (value && !(value & (value - 1))) {\n        return value;\n    }\n    while (value !== 0) {\n        value >>= 1;\n        i += 1;\n    }\n    return 1 << i;\n}\n\n", "lang": "javascript", "code_str_generate": "function next_Power_Of_2(value) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = 0;\n    if (value && !(value & (value - 1))) {\n        return value;\n    }\n    //begin to write code\n", "prompt": "Write a javascript function to find smallest power of 2 greater than or equal to n."}
{"task_id": 188, "Adversarial Code": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n\n\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find highest power of 2 less than or equal to given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n", "prompt": "Write a java function to find highest power of 2 less than or equal to given number."}
{"task_id": 493, "Adversarial Code": "#include <iomanip>\n#include <iostream>\n#include <cassert>\n//This is a comment line.\nint sum_Of_Series(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    int sum = var_0 ;\n//begin to write code\n", "Adversarial truth": "#include <iomanip>\n\n#include <iostream>\n#include <cassert>\n\n//This is a comment line.\nint sum_Of_Series(int n) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    int sum = var_0 ;\n    for (int i = var_1 ; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iomanip>\n#include <iostream>\n#include <cassert>\n//This is a comment line.\nint sum_Of_Series(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    int sum = var_0 ;\n//begin to write code\n", "prompt": "Write a cpp function to find the cube sum of first n natural numbers."}
{"task_id": 421, "Adversarial Code": "function median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n", "Adversarial truth": "function median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    return median;\n}\n\n", "lang": "javascript", "code_str_generate": "function median_trapezium(base1, base2, height) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 421, "Adversarial Code": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n        double median = (base1 + base2) * 0.5;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n        double median = (base1 + base2) * 0.5;\n        return median;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of a trapezium.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double median = (base1 + base2) * 0.5;\n        //begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 16, "Adversarial Code": "class Solution {\n    public\n static List<String> remove(List<String> list) {\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<String> remove(List<String> list) {\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(s.replaceAll(\"\\\\d\", \"\"));\n        }\n        return result;\n\n\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<String> remove(List<String> list) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove all digits from a list of strings.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n        //begin to write code\n", "prompt": "Write a java function to remove all digits from a list of strings."}
{"task_id": 261, "Adversarial Code": "class Solution {\n    public\n static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<Integer> rearExtract(List<List<Object>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to perfom the rear element extraction from list of tuples records.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n        //begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 421, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = (base1 + base2) * 0.5;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = (base1 + base2) * 0.5;\n    return median;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double median = (base1 + base2) * 0.5;\n//begin to write code\n", "prompt": "Write a function to find the median of a trapezium."}
{"task_id": 101, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a cpp function to find the perimeter of a cylinder."}
{"task_id": 171, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> character;\n    vector<char> characters;\n    vector<char> letters;\n    vector<char> letter;\n    for (char c : str) {\n        if (isupper(c)) {\n            character.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\n\nusing namespace std;\n\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> character;\n    vector<char> characters;\n    vector<char> letters;\n    vector<char> letter;\n\n    for (char c : str) {\n        if (isupper(c)) {\n            character.push_back(c);\n        } else if (islower(c)) {\n            characters.push_back(c);\n        } else if (isdigit(c)) {\n            letters.push_back(c);\n        } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n            letter.push_back(c);\n        }\n    }\n\n    return make_tuple(character, characters, letters, letter);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> character;\n    vector<char> characters;\n    vector<char> letters;\n    vector<char> letter;\n    for (char c : str) {\n        if (isupper(c)) {\n            character.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 355, "Adversarial Code": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final int var_2 = 1;\n        final int var_3 = 1;\n        int maxProduct = nums[var_0 ] * nums[var_1 ];\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final int var_2 = 1;\n        final int var_3 = 1;\n        int maxProduct = nums[var_0 ] * nums[var_1 ];\n        for (int i = var_2 ; i < nums.length - var_3 ; i++) {\n            final int var_4 = 1;\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + var_4 ]);\n        }\n        return maxProduct;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest product of the pair of adjacent elements from a given list of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        final int var_1 = 1;\n        final int var_2 = 1;\n        final int var_3 = 1;\n        int maxProduct = nums[var_0 ] * nums[var_1 ];\n        //begin to write code\n", "prompt": "Write a java function to find the largest product of the pair of adjacent elements from a given list of integers."}
{"task_id": 157, "Adversarial Code": "def frequency(a,x):\n    count = 0  \n    for i in a: \n    #begin to write code\n", "Adversarial truth": "def frequency(a,x): \n    count = 0  \n    for i in a: \n        if i == x: count += 1\n    return count ", "lang": "python", "code_str_generate": "def frequency(a,x):\n\n    '''\n    progame language:python\n    description:Write a python function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    count = 0  \n    for i in a: \n    #begin to write code\n", "prompt": "Write a python function to find the frequency of a number in a given array."}
{"task_id": 101, "Adversarial Code": "class Solution {\n    public\n static int perimeter(int diameter, int height) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int perimeter(int diameter, int height) {\n        return 2 * (diameter + height);\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int perimeter(int diameter, int height) {\n\n /*\n progame language:java\n description:Write a java function to find the perimeter of a cylinder.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a java function to find the perimeter of a cylinder."}
{"task_id": 11, "Adversarial Code": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        {\n            int i = 0;\n            for (; i < nums.length; i++) {\n                    if (numSet.contains(nums[i])) {\n                        return nums[i];\n                        //begin to write code\n", "Adversarial truth": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n\n        {\n            int i = 0;\n            for (; i < nums.length; i++) {\n                    if (numSet.contains(nums[i])) {\n                        return nums[i];\n                    } else {\n                        numSet.add(nums[i]);\n                    }\n                }\n        }\n\n        return noDuplicate;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the first duplicate element in a given array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        {\n            int i = 0;\n            for (; i < nums.length; i++) {\n                    if (numSet.contains(nums[i])) {\n                        return nums[i];\n                        //begin to write code\n", "prompt": "Write a function to find the first duplicate element in a given array of integers."}
{"task_id": 369, "Adversarial Code": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row = row + 1) {\n    for (let col = 0; col < colnum; col = col + 1) {\n    //begin to write code\n", "Adversarial truth": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row = row + 1) {\n    for (let col = 0; col < colnum; col = col + 1) {\n      multi_list[row][col] = row * col;\n    }\n  }\n  return multi_list;\n}\n\n", "lang": "javascript", "code_str_generate": "function multi_list(rownum, colnum) {\n\n  /*\n  progame language:javascript\n  description:Write a function to generate a two-dimensional array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row = row + 1) {\n    for (let col = 0; col < colnum; col = col + 1) {\n    //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 255, "Adversarial Code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  #begin to write code\n", "Adversarial truth": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "lang": "python", "code_str_generate": "def lateralsurface_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 4 * (l * l)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 391, "Adversarial Code": "function ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i = i + 1) {\n        for (let j = Math.min(i, r); j > 0; j = j - 1) {\n        //begin to write code\n", "Adversarial truth": "function ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i = i + 1) {\n        for (let j = Math.min(i, r); j > 0; j = j - 1) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}\n\n", "lang": "javascript", "code_str_generate": "function ncr_modp(n, r, p) {\n\n    /*\n    progame language:javascript\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i = i + 1) {\n        for (let j = Math.min(i, r); j > 0; j = j - 1) {\n        //begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 193, "Adversarial Code": "class Solution {\n    public static int search(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int search(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int search(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n", "prompt": "Write a java function to count the occurrence of a given character in a string."}
{"task_id": 401, "Adversarial Code": "function remove_odd(l) {\n    for\n (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n        //begin to write code\n", "Adversarial truth": "function remove_odd(l) {\n    for\n (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n        }\n    }\n    return l;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_odd(l) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for\n (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to remove odd numbers from a given list."}
{"task_id": 448, "Adversarial Code": "import urllib\nimport re\ndef remove_uppercase(str1):\n  var_0 = '[A-Z]'\n  var_1 = ''\n  #begin to write code\n", "Adversarial truth": "import urllib\nimport re\ndef remove_uppercase(str1):\n  var_0 = '[A-Z]'\n  var_1 = ''\n  remove_upper = lambda text: re.sub(var_0 , var_1 , text)\n  result =  remove_upper(str1)\n  return (result)", "lang": "python", "code_str_generate": "import urllib\nimport re\ndef remove_uppercase(str1):\n\n  '''\n  progame language:python\n  description:Write a function to remove uppercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = '[A-Z]'\n  var_1 = ''\n  #begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 364, "Adversarial Code": "function round_num(n, m) {\n    let a = m * Math.floor(n / m);\n    //begin to write code\n", "Adversarial truth": "function round_num(n, m) {\n    let a = m * Math.floor(n / m);\n    let b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n", "lang": "javascript", "code_str_generate": "function round_num(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = m * Math.floor(n / m);\n    //begin to write code\n", "prompt": "Write a function to round the given number to the nearest multiple of a specific number."}
{"task_id": 160, "Adversarial Code": "function perimeter_pentagon(a) {\n//begin to write code\n", "Adversarial truth": "function perimeter_pentagon(a) {\n  return a * 5;\n}\n\n", "lang": "javascript", "code_str_generate": "function perimeter_pentagon(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 255, "Adversarial Code": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  #begin to write code\n", "Adversarial truth": "def lateralsurface_cube(l):\n  LSA = 4 * (l * l)\n  return LSA", "lang": "python", "code_str_generate": "def lateralsurface_cube(l):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cube.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 4 * (l * l)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cube."}
{"task_id": 389, "Adversarial Code": "function extract_freq(test_list) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "function extract_freq(test_list) {\n//This is a comment line.\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function extract_freq(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective."}
{"task_id": 460, "Adversarial Code": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n", "Adversarial truth": "#include <cmath>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <cmath>\n#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of array multiplication divided by n."}
{"task_id": 476, "Adversarial Code": "//function definition\nfunction sort_tuple(data) {\n    let l = data.length;\n    for (let k = 0; k < l; k++) {\n        for (let i = 0; i < l - k - 1; i++) {\n            if (data[i][1] > data[i + 1][1]) {\n                let tmp = data[i];\n                //begin to write code\n", "Adversarial truth": "//function definition\nfunction sort_tuple(data) {\n    let l = data.length;\n    for (let k = 0; k < l; k++) {\n        for (let i = 0; i < l - k - 1; i++) {\n            if (data[i][1] > data[i + 1][1]) {\n                let tmp = data[i];\n                data[i] = data[i + 1];\n                data[i + 1] = tmp;\n            }\n        }\n    }\n    return data;\n}", "lang": "javascript", "code_str_generate": "//function definition\nfunction sort_tuple(data) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = data.length;\n    for (let k = 0; k < l; k++) {\n        for (let i = 0; i < l - k - 1; i++) {\n            if (data[i][1] > data[i + 1][1]) {\n                let tmp = data[i];\n                //begin to write code\n", "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple."}
{"task_id": 193, "Adversarial Code": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n", "Adversarial truth": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurrence of a given character in a string."}
{"task_id": 377, "Adversarial Code": "function highest_Power_of_2(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        //begin to write code\n", "Adversarial truth": "function highest_Power_of_2(n) {\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        if ((i & (i - var_2 )) === var_3 ) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function highest_Power_of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 0;\n    const var_1 = 0;\n    let res = var_0 ;\n    for (let i = n; i > var_1 ; i--) {\n        const var_2 = 1;\n        const var_3 = 0;\n        //begin to write code\n", "prompt": "Write a javascript function to find the highest power of 2 that is less than or equal to n."}
{"task_id": 449, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<long> result;\n    for (auto& item : lst) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<long> result;\n    for (auto& item : lst) {\n        result.push_back(item[0]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<long> result;\n    for (auto& item : lst) {\n//begin to write code\n", "prompt": "Write a cpp function to get the first element of each sublist."}
{"task_id": 195, "Adversarial Code": "def xomczgvnagv_eoemvnts(element):\n  elements = tuple(a + c for a, c in zip(element, element[1:]))\n  #begin to write code\n", "Adversarial truth": "def xomczgvnagv_eoemvnts(element):\n  elements = tuple(a + c for a, c in zip(element, element[1:]))\n  return (elements) ", "lang": "python", "code_str_generate": "def xomczgvnagv_eoemvnts(element):\n\n  '''\n  progame language:python\n  description:Write a function to perform the adjacent element concatenation in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  elements = tuple(a + c for a, c in zip(element, element[1:]))\n  #begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 486, "Adversarial Code": "class Solution {\n    public static double surfacearea_cone(double t, double s) {\n        double a = Math.sqrt(t * t + s * s);\n        double c = Math.PI * t * (t + a);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double surfacearea_cone(double t, double s) {\n        double a = Math.sqrt(t * t + s * s);\n        double c = Math.PI * t * (t + a);\n        return c;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double surfacearea_cone(double t, double s) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double a = Math.sqrt(t * t + s * s);\n        double c = Math.PI * t * (t + a);\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cone."}
{"task_id": 373, "Adversarial Code": "function\n frequency_Of_Smallest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            //begin to write code\n", "Adversarial truth": "function\n frequency_Of_Smallest(n, arr) {\n\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            freq = 1;\n        }\n else if (arr[i] === mn) {\n            freq += 1;\n        }\n    }\n    return freq;\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n frequency_Of_Smallest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the smallest value in a given array."}
{"task_id": 47, "Adversarial Code": "class Solution {\n    public static boolean okplsiteHrgns(int X, int Y) {\n        return ((X ^ Y) < 0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean okplsiteHrgns(int X, int Y) {\n        return ((X ^ Y) < 0);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean okplsiteHrgns(int X, int Y) {\n        return ((X ^ Y) < 0);\n        //begin to write code\n", "prompt": "Write a java function to check whether the given two integers have opposite sign or not."}
{"task_id": 85, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n//This is a comment line.\n        if (n % i == 0) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n//This is a comment line.\n\n        if (n % i == 0) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n            x++;\n        }\n    }\n    return x;\n}\n\n//This is a comment line.\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n//This is a comment line.\n        if (n % i == 0) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code\n", "prompt": "Write a cpp function to find the number of divisors of a given integer."}
{"task_id": 194, "Adversarial Code": "function filter(gestTup) {\n  const res = gestTup.map(x => ~x);\n  //begin to write code\n", "Adversarial truth": "function filter(gestTup) {\n  const res = gestTup.map(x => ~x);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function filter(gestTup) {\n  const res = gestTup.map(x => ~x);\n  //begin to write code\n", "prompt": "Write a function to find the inversions of tuple elements in the given tuple list."}
{"task_id": 35, "Adversarial Code": "class Solution {\n    public static boolean testDistinct(long[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean testDistinct(long[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n        }\n        return data.length == distinctData.size();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean testDistinct(long[] data) {\n\n        /*\n        progame language:java\n        description:Write a java function to determine whether all the numbers are different from each other are not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n", "prompt": "Write a java function to determine whether all the numbers are different from each other are not."}
{"task_id": 116, "Adversarial Code": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n        #begin to write code\n", "Adversarial truth": "def multiply_int(x, y):\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n    elif y == 1:\n        return x\n    else:\n        return x + multiply_int(x, y - 1)", "lang": "python", "code_str_generate": "def multiply_int(x, y):\n\n    '''\n    progame language:python\n    description:Write a function to multiply two integers without using the * operator in python.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if y < 0:\n        return -multiply_int(x, -y)\n    elif y == 0:\n        return 0\n        #begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in python."}
{"task_id": 399, "Adversarial Code": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, long))\n     #begin to write code\n", "Adversarial truth": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, long))\n     return min_val", "lang": "python", "code_str_generate": "def min_val(listval):\n\n     '''\n     progame language:python\n     description:Write a function to find the minimum value in a given heterogeneous list.\n     you must follow:\n     1. Provide the complete code without any textual explanations and do not generate test scripts.\n     2. Please strictly follow the specified format provided below for the code.\n     3. Do not change the function names.\n     4. The original code content must be fully included in the generated complete code, including all package import sections.\n     5. For C++ language, do not generate the main function; I have my own main function available.\n     6. Do not generate test cases.\n     '''\n\n     min_val = min(i for i in listval if isinstance(i, long))\n     #begin to write code\n", "prompt": "Write a function to find the minimum value in a given heterogeneous list."}
{"task_id": 15, "Adversarial Code": "function check_k_elements(a, k) {\n  let result = true;\n  for (let e of a) {\n    for (let v of e) {\n      if (v !== k) {\n      //begin to write code\n", "Adversarial truth": "function check_k_elements(a, k) {\n  let result = true;\n  for (let e of a) {\n    for (let v of e) {\n      if (v !== k) {\n        result = false;\n      }\n    }\n  }\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function check_k_elements(a, k) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check if the given tuple list has all k elements.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let result = true;\n  for (let e of a) {\n    for (let v of e) {\n      if (v !== k) {\n      //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 284, "Adversarial Code": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        int sum = 0;\n        for (int i : divisors) {\n            sum += i;\n        }\n        return sum;\n    }\n\n\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumDiv(int number) {\n\n        /*\n        progame language:java\n        description:Write a function to return the sum of all divisors of a number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n", "prompt": "Write a function to return the sum of all divisors of a number."}
{"task_id": 469, "Adversarial Code": "def tet_nac_lxcuirmt_xhai(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n", "Adversarial truth": "def tet_nac_lxcuirmt_xhai(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1;\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "lang": "python", "code_str_generate": "def tet_nac_lxcuirmt_xhai(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the maximum occurring character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n  #begin to write code\n", "prompt": "Write a python function to find the maximum occurring character in a given string."}
{"task_id": 189, "Adversarial Code": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    //begin to write code\n", "Adversarial truth": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    let maxResult = list1.map((value, index) => value === maxVal ? index : -1).filter(index => index !== -1);\n    return maxResult;\n}\n\n", "lang": "javascript", "code_str_generate": "function positionMax(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxVal = Math.max(...list1);\n    //begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 413, "Adversarial Code": "function from(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    //begin to write code\n", "Adversarial truth": "function from(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function from(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    //begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 469, "Adversarial Code": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n    const auto var_0 = 256;\n    const auto var_1 = 0;\n    const auto var_2 = -1;\n    const char var_3 = '\\0';\n    const int ASCII_SIZE = var_0 ;\n    int ctr[ASCII_SIZE] = {var_1 };\n    int max = var_2 ;\n    char ch = var_3 ;\n    for (char c : str1) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nchar get_max_occuring_char(const std::string &str1) {\n    const auto var_0 = 256;\n    const auto var_1 = 0;\n    const auto var_2 = -1;\n    const char var_3 = '\\0';\n    const int ASCII_SIZE = var_0 ;\n    int ctr[ASCII_SIZE] = {var_1 };\n    int max = var_2 ;\n    char ch = var_3 ;\n    for (char c : str1) {\n        ctr[c]++;\n    }\n    for (char c : str1) {\n        if (max < ctr[c]) {\n            max = ctr[c];\n            ch = c;\n        }\n    }\n    return ch;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 256;\n    const auto var_1 = 0;\n    const auto var_2 = -1;\n    const char var_3 = '\\0';\n    const int ASCII_SIZE = var_0 ;\n    int ctr[ASCII_SIZE] = {var_1 };\n    int max = var_2 ;\n    char ch = var_3 ;\n    for (char c : str1) {\n//begin to write code\n", "prompt": "Write a cpp function to find the maximum occurring character in a given string."}
{"task_id": 325, "Adversarial Code": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n", "Adversarial truth": "def check_monthnum(monthname1):\n  if monthname1 == \"February\":\n    return True\n  else:\n    return False", "lang": "python", "code_str_generate": "def check_monthnum(monthname1):\n\n  '''\n  progame language:python\n  description:Write a function to check whether the given month name contains 28 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if monthname1 == \"February\":\n    return True\n    #begin to write code\n", "prompt": "Write a function to check whether the given month name contains 28 days or not."}
{"task_id": 159, "Adversarial Code": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        {\n            int i = m;\n            for (; i <= n; i++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        {\n            int i = m;\n            for (; i <= n; i++) {\n                    sumRange += list1[i];\n                }\n        }\n        return sumRange;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumRange = 0;\n        {\n            int i = m;\n            for (; i <= n; i++) {\n            //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 90, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n                []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n            }\n        }\n    }\n    return arr[k - 1];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the kth element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n", "prompt": "Write a function to find the kth element in the given array."}
{"task_id": 52, "Adversarial Code": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "Adversarial truth": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  let res = Math.max(...temp);\n  return res;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_difference(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 230, "Adversarial Code": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n #begin to write code\n", "Adversarial truth": "def array_3d(m,n,o):\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n return array_3d", "lang": "python", "code_str_generate": "def array_3d(m,n,o):\n\n '''\n progame language:python\n description:Write a function to generate a 3d array having each element as '*'.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\n #begin to write code\n", "prompt": "Write a function to generate a 3d array having each element as '*'."}
{"task_id": 222, "Adversarial Code": "def lateralsuface_cylinder(r,h):\n  lateralsurface= r * 3.1415 * 2*h\n  #begin to write code\n", "Adversarial truth": "def lateralsuface_cylinder(r,h):\n  lateralsurface= r * 3.1415 * 2*h\n  return lateralsurface", "lang": "python", "code_str_generate": "def lateralsuface_cylinder(r,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  lateralsurface= r * 3.1415 * 2*h\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of a cylinder."}
{"task_id": 141, "Adversarial Code": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if not(a[0] < b[0]):\n            c.append(b[0])\n            b.remove(b[0])\n        else:\n            c.append(a[0])\n            a.remove(a[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n", "Adversarial truth": "def merge(a,b):\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if not(a[0] < b[0]):\n            c.append(b[0])\n            b.remove(b[0])\n        else:\n            c.append(a[0])\n            a.remove(a[0])\n    if len(a) == 0:\n        c += b\n    else:\n        c += a\n    return c\ndef merge_sort(x):\n    if len(x) == 0 or len(x) == 1:\n        return x\n    else:\n        middle = len(x)//2\n        a = merge_sort(x[:middle])\n        b = merge_sort(x[middle:])\n        return merge(a,b)\n", "lang": "python", "code_str_generate": "def merge(a,b):\n\n    '''\n    progame language:python\n    description:Write a function to sort the given array by using merge sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    c = []\n    while len(a) != 0 and len(b) != 0:\n        if not(a[0] < b[0]):\n            c.append(b[0])\n            b.remove(b[0])\n        else:\n            c.append(a[0])\n            a.remove(a[0])\n    if len(a) == 0:\n        c += b\n        #begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 42, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(const std::string& var_0) {\n    if (var_0[0] == var_0[var_0.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string func_0(const std::string& var_0) {\n    if (var_0[0] == var_0[var_0.length() - 1]) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string func_0(const std::string& var_0) {\n    if (var_0[0] == var_0[var_0.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n", "prompt": "Write a cpp function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 23, "Adversarial Code": "def func_0(self,n):\n    i = 0\n    j = n - 1\n    while (i <= j):  \n        f = (i + j) / 2\n        f= int (f) \n        if (self[f] != f + 1 and self[f - 1] == f): \n        #begin to write code\n", "Adversarial truth": "def func_0(self,n): \n    i = 0\n    j = n - 1\n    while (i <= j):  \n        f = (i + j) / 2\n        f= int (f) \n        if (self[f] != f + 1 and self[f - 1] == f): \n            return (f + 1)  \n        elif (self[f] != f + 1): \n            j = f - 1 \n        else: \n            i = f + 1\n    return (-1) ", "lang": "python", "code_str_generate": "def func_0(self,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    i = 0\n    j = n - 1\n    while (i <= j):  \n        f = (i + j) / 2\n        f= int (f) \n        if (self[f] != f + 1 and self[f - 1] == f): \n        #begin to write code\n", "prompt": "Write a python function to find the missing number in a sorted array."}
{"task_id": 494, "Adversarial Code": "function re_order(A) {\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n            //begin to write code\n", "Adversarial truth": "function re_order(A) {\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n        }\n    }\n    for (let i = k; i < A.length; i++) {\n        A[i] = 0;\n    }\n    return A;\n}\n\n", "lang": "javascript", "code_str_generate": "function re_order(A) {\n\n    /*\n    progame language:javascript\n    description:Write a function to move all zeroes to the end of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n            //begin to write code\n", "prompt": "Write a function to move all zeroes to the end of the given array."}
{"task_id": 496, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> function(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<std::string> function(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n    }\n    return list1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> function(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n", "prompt": "Write a function to remove specific words from a given list."}
{"task_id": 366, "Adversarial Code": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n    let\n    //begin to write code\n", "Adversarial truth": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n    let\n result = s.split('').filter(char => char !== c).join('');\n    return result;\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function remove_Char(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let counts = s.split(c).length - 1;\n    let\n    //begin to write code\n", "prompt": "Write a javascript function to remove all occurrences of a character in a given string."}
{"task_id": 71, "Adversarial Code": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n    double volume = r * (4.0 / 3.0) * M_PI * r * r;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_sphere(double r) {\n    double volume = r * (4.0 / 3.0) * M_PI * r * r;\n    return volume;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double volume = r * (4.0 / 3.0) * M_PI * r * r;\n//begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 81, "Adversarial Code": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (long i = 2; i < n.length(); i++) {\n            if (n.charAt(i) != n.charAt(i - 2)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (long i = 2; i < n.length(); i++) {\n            if (n.charAt(i) != n.charAt(i - 2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isUndulating(String n) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given number is undulating or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (long i = 2; i < n.length(); i++) {\n            if (n.charAt(i) != n.charAt(i - 2)) {\n            //begin to write code\n", "prompt": "Write a function to check whether the given number is undulating or not."}
{"task_id": 94, "Adversarial Code": "function count(lst) {   \n//begin to write code\n", "Adversarial truth": "function count(lst) {   \n    return lst.reduce((sum, value) => sum + value, 0);\n}\n\n", "lang": "javascript", "code_str_generate": "function count(lst) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to count true booleans in the given list."}
{"task_id": 351, "Adversarial Code": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        #begin to write code\n", "Adversarial truth": "def max_occurrences(nums):\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i \n    return result", "lang": "python", "code_str_generate": "def max_occurrences(nums):\n\n    '''\n    progame language:python\n    description:Write a python function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    max_val = 0\n    result = nums[0] \n    for i in nums:\n        occu = nums.count(i)\n        #begin to write code\n", "prompt": "Write a python function to find the item with maximum occurrences in a given list."}
{"task_id": 206, "Adversarial Code": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\nchar first_Repeated_Char(string str) \n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\n\nchar first_Repeated_Char(string str) \n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n        } else { \n            h[ch] = 0;\n        }\n    }\n    return '\\0';\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\nchar first_Repeated_Char(string str) \n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n//begin to write code\n", "prompt": "Write a cpp function to find the first repeated character in a given string."}
{"task_id": 430, "Adversarial Code": "function surfacearea_cube(l) {\n    let\n    //begin to write code\n", "Adversarial truth": "function surfacearea_cube(l) {\n\n\n    let\n surfacearea = 6 * l * l;\n    return surfacearea;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function surfacearea_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a function to find the surface area of a cube."}
{"task_id": 408, "Adversarial Code": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum = roundAndSum + (Math.round(num));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum = roundAndSum + (Math.round(num));\n        }\n        roundAndSum = roundAndSum * (length);\n        return roundAndSum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum = roundAndSum + (Math.round(num));\n            //begin to write code\n", "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list."}
{"task_id": 266, "Adversarial Code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "Adversarial truth": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "lang": "python", "code_str_generate": "def dict_filter(dict,n):\n\n '''\n progame language:python\n description:Write a function to filter a dictionary based on values.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 436, "Adversarial Code": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums\n.stream().map(n -> n * n * n).collect(Collectors.toList());\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find cubes of individual elements in a list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return nums\n        //begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 226, "Adversarial Code": "from collections import Counter \ndef check_lcxurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n", "Adversarial truth": "from collections import Counter \ndef check_lcxurences(test_list):\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  return  (res) ", "lang": "python", "code_str_generate": "from collections import Counter \ndef check_lcxurences(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\n  #begin to write code\n", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"task_id": 184, "Adversarial Code": "def first(arr,x,n):\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "Adversarial truth": "def first(arr,x,n): \n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "lang": "python", "code_str_generate": "def first(arr,x,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    low = 0\n    high = n - 1\n    res = -1  \n    while (low <= high):\n        mid = (low + high) // 2 \n        if arr[mid] > x:\n        #begin to write code\n", "prompt": "Write a python function to find the first position of an element in a sorted array."}
{"task_id": 199, "Adversarial Code": "import re\ndef is_allowed_specific_char(string):\n    get_char\\\n = re.compile(r'[^a-zA-Z0-9.]')\n #begin to write code\n", "Adversarial truth": "import re\ndef is_allowed_specific_char(string):\n    get_char\\\n = re.compile(r'[^a-zA-Z0-9.]')\n    string = get_char.search(string)\n    return not bool(string)", "lang": "python", "code_str_generate": "import re\ndef is_allowed_specific_char(string):\n\n    '''\n    progame language:python\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    get_char\\\n = re.compile(r'[^a-zA-Z0-9.]')\n #begin to write code\n", "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex."}
{"task_id": 215, "Adversarial Code": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "Adversarial truth": "def odd_values_string(str):\n  result = \"\" \n  for i in range(len(str)):\n    if 0 == i % 2:\n      result = result + str[i]\n  return result", "lang": "python", "code_str_generate": "def odd_values_string(str):\n\n  '''\n  progame language:python\n  description:Write a python function to remove the characters which have odd index values of a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  result = \"\" \n  for i in range(len(str)):\n  #begin to write code\n", "prompt": "Write a python function to remove the characters which have odd index values of a given string."}
{"task_id": 321, "Adversarial Code": "function reduce(str1) {\n    const wrct = {};\n    for (const n of str1) {\n        if (n in wrct) {\n            wrct[n] += 1;\n            //begin to write code\n", "Adversarial truth": "function reduce(str1) {\n    const wrct = {};\n    for (const n of str1) {\n        if (n in wrct) {\n            wrct[n] += 1;\n        } else {\n            wrct[n] = 1;\n        }\n    }\n    return wrct;\n}\n\n", "lang": "javascript", "code_str_generate": "function reduce(str1) {\n    const wrct = {};\n    for (const n of str1) {\n        if (n in wrct) {\n            wrct[n] += 1;\n            //begin to write code\n", "prompt": "Write a function to count character frequency of a given string."}
{"task_id": 88, "Adversarial Code": "def bin(n):\n    #begin to write code\n", "Adversarial truth": "def bin(n): \n    return bin(n).replace(\"0b\",\"\") ", "lang": "python", "code_str_generate": "def bin(n):\n\n    '''\n    progame language:python\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 370, "Adversarial Code": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n", "Adversarial truth": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n    result = sorted(list_data, key=itemgetter(index_no))\n    return result", "lang": "python", "code_str_generate": "from operator import itemgetter\ndef index_on_inner_list(list_data, index_no):\n\n    '''\n    progame language:python\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(list_data, key=itemgetter(index_no))\n    #begin to write code\n", "prompt": "Write a function to sort a list of lists by a given index of the inner list."}
{"task_id": 8, "Adversarial Code": "class Solution {\n    public boolean func_0(int[] arraynums) {\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean func_0(int[] arraynums) {\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n        }\n        return arraynums.length != numsSet.size();\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean func_0(int[] arraynums) {\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n            //begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 208, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n            res.push_back(test_vec[idx]);\n        }\n    }\n    return std::make_tuple(res);\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract maximum and minimum k elements in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n", "prompt": "Write a function to extract maximum and minimum k elements in the given tuple."}
{"task_id": 89, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    {\n        int i = 0;\n        for (; i < n; i++) {\n            {\n                int j = 0;\n                for (; j < n - i - 1; j++) {\n                        if (arr[j] > arr[j + 1]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint kth_element(vector<int>& arr, int n, int k) {\n    {\n        int i = 0;\n        for (; i < n; i++) {\n            {\n                int j = 0;\n                for (; j < n - i - 1; j++) {\n                        if (arr[j] > arr[j + 1]) {\n                            swap(arr[j], arr[j + 1]);\n                        }\n                    }\n            }\n        }\n    }\n    return arr[k - 1];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    {\n        int i = 0;\n        for (; i < n; i++) {\n            {\n                int j = 0;\n                for (; j < n - i - 1; j++) {\n                        if (arr[j] > arr[j + 1]) {\n//begin to write code\n", "prompt": "Write a function to find the next smallest palindrome of a specified number."}
{"task_id": 217, "Adversarial Code": "function func_0(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n", "Adversarial truth": "function func_0(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n        return true;\n    }\n    return false;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to check whether all the bits are unset in the given range or not."}
{"task_id": 114, "Adversarial Code": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n", "Adversarial truth": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = Math.max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n", "lang": "javascript", "code_str_generate": "function find_length(string, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n", "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string."}
{"task_id": 350, "Adversarial Code": "class Solution {\nfinal double var_0 = 9.9;\nfinal double var_1 = 9.12;\nfinal String var_2 = \"This function is used to remove a item of a list\";\nfinal int var_3 = 1;\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n        //begin to write code\n", "Adversarial truth": "final double var_0 = 9.9;\nfinal double var_1 = 9.12;\nfinal String var_2 = \"This function is used to remove a item of a list\";\nfinal int var_3 = 1;\nclass Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n            }\n        }\n        return removeEmpty;\n    }\n    double temp_var_4 = var_0 ;while (temp_var_4 < var_1 ) {System.out.println(var_2 );temp_var_4 = temp_var_4 + var_3 ;}\n}", "lang": "java", "code_str_generate": "class Solution {\nfinal double var_0 = 9.9;\nfinal double var_1 = 9.12;\nfinal String var_2 = \"This function is used to remove a item of a list\";\nfinal int var_3 = 1;\n    public static List<Object> removeEmpty(List<Object> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove empty lists from a given list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n        //begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 418, "Adversarial Code": "def and_tuples(test_tup1, test_tup2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def and_tuples(test_tup1, test_tup2):\n  res\\\n = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def and_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to extract the elementwise and tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 192, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int var_0, int var_1) {\n    int var_3 = var_0 ^ var_1;\n    int var_2 = 0;\n    while (var_3 > 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint hamming_Distance(int var_0, int var_1) {\n    int var_3 = var_0 ^ var_1;\n    int var_2 = 0;\n    while (var_3 > 0) {\n        var_2 += var_3 & 1;\n        var_3 >>= 1;\n    }\n    return var_2;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int var_0, int var_1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int var_3 = var_0 ^ var_1;\n    int var_2 = 0;\n    while (var_3 > 0) {\n//begin to write code\n", "prompt": "Write a cpp function to find the hamming distance between given two integers."}
{"task_id": 271, "Adversarial Code": "function ufnx_9(nums1, nums2) {\n//begin to write code\n", "Adversarial truth": "function ufnx_9(nums1, nums2) {\n    return nums1.map((value, index) => value - nums2[index]);\n}\n\n", "lang": "javascript", "code_str_generate": "function ufnx_9(nums1, nums2) {\n//begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 128, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble perimeter(double r) {\n    double perimeter = 2 * 3.1415 * r;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble perimeter(double r) {\n    double perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble perimeter(double r) {\n    double perimeter = 2 * 3.1415 * r;\n//begin to write code\n", "prompt": "Write a function to find the circumference of a circle."}
{"task_id": 205, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool csvcp_suyhvg_lrhg(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nbool csvcp_suyhvg_lrhg(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                exist = false;\n                break;\n            }\n        }\n        if (!exist) break;\n    }\n    return exist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool csvcp_suyhvg_lrhg(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n", "prompt": "Write a function to check if a nested list is a subset of another nested list."}
{"task_id": 53, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, long>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, int>> subject_marks(vector<pair<string, long>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n    return subjectmarks;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, long>> subjectmarks) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 102, "Adversarial Code": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Boolean checkInteger(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a string represents an integer or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 102, "Adversarial Code": "function func_0(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n            //begin to write code\n", "Adversarial truth": "function func_0(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n        } else if (\"+-\".includes(text[0]) && text.slice(1).split('').every((char, i) => \"0123456789\".includes(text[i + 1]))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n            //begin to write code\n", "prompt": "Write a function to check if a string represents an integer or not."}
{"task_id": 477, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    {\n        int i = 1;\n        for (; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    {\n        int i = 1;\n        for (; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n                freq = 1;\n            } else if (arr[i] == mn) {\n                freq++;\n            }\n        }\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    {\n        int i = 1;\n        for (; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n//begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 150, "Adversarial Code": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "Adversarial truth": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_elements(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n", "prompt": "Write a function to remove all elements from a given list present in another list."}
{"task_id": 444, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool check_monthnumb_number(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month number contains 31 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n//begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 367, "Adversarial Code": "const dgram = require('dgram');\nfunction move_first(test_list) {\n  const var_0 = 1;\n  const var_1 = 0;\n  //begin to write code\n", "Adversarial truth": "const dgram = require('dgram');\nfunction move_first(test_list) {\n  const var_0 = 1;\n  const var_1 = 0;\n  const var_2 = 1;\n  test_list = [...test_list.slice(-var_0 ), ...test_list.slice(var_1 , -var_2 )];\n  return test_list;\n}\n\n", "lang": "javascript", "code_str_generate": "const dgram = require('dgram');\nfunction move_first(test_list) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to shift last element to first position in the given list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = 1;\n  const var_1 = 0;\n  //begin to write code\n", "prompt": "Write a javascript function to shift last element to first position in the given list."}
{"task_id": 492, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 491, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    {\n        size_t i = 0;\n        while(i < nums.size() - 1){\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    {\n        size_t i = 0;\n        while(i < nums.size() - 1){\n        result.push_back(nums[i] + nums[i + 1]);\n            ++i;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    {\n        size_t i = 0;\n        while(i < nums.size() - 1){\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of two numbers."}
{"task_id": 436, "Adversarial Code": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n #begin to write code\n", "Adversarial truth": "def cube_nums(nums):\n cube_nums = list(map(lambda x: x ** 3, nums))\n return cube_nums", "lang": "python", "code_str_generate": "def cube_nums(nums):\n\n '''\n progame language:python\n description:Write a function to find cubes of individual elements in a list using lambda function.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n cube_nums = list(map(lambda x: x ** 3, nums))\n #begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 231, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n count_charac(const std::string& str1) {\n    int total = 0;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n\n\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint\\\n count_charac(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int total = 0;\n//begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 466, "Adversarial Code": "def is_lower(string):\n    #begin to write code\n", "Adversarial truth": "def is_lower(string):\n  return (string.lower())", "lang": "python", "code_str_generate": "def is_lower(string):\n\n    '''\n    progame language:python\n    description:Write a python function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to convert the given string to lower case."}
{"task_id": 127, "Adversarial Code": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        if (n % 2 == 1) {\n            return false;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        if (n % 2 == 1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 == 1) {\n            return false;\n        } else {\n        //begin to write code\n", "prompt": "Write a java function to check whether the given number can be represented as sum of non-zero powers of 2 or not."}
{"task_id": 160, "Adversarial Code": "import math\ndef perimetei_pengzton(a):\n  perimeter=(5*a)\n  #begin to write code\n", "Adversarial truth": "import math\ndef perimetei_pengzton(a):\n  perimeter=(5*a)\n  return perimeter", "lang": "python", "code_str_generate": "import math\ndef perimetei_pengzton(a):\n\n  '''\n  progame language:python\n  description:Write a function to find the perimeter of a pentagon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  perimeter=(5*a)\n  #begin to write code\n", "prompt": "Write a function to find the perimeter of a pentagon."}
{"task_id": 135, "Adversarial Code": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int asciiValueString(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) str1.charAt(0);\n        //begin to write code\n", "prompt": "Write a function to find the ascii value of total characters in a string."}
{"task_id": 204, "Adversarial Code": "#include <string>\n#include <sstream>\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        const auto var_0 = 2;\n        if (g.size() == var_0 ) {\n            const auto var_1 = 0;\n            const auto var_2 = 0;\n            for (int i = var_1 ; i < g[var_2 ]; ++i) {\n                const auto var_3 = 1;\n//begin to write code\n", "Adversarial truth": "#include <string>\n#include <sstream>\n\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\n\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        const auto var_0 = 2;\n        if (g.size() == var_0 ) {\n            const auto var_1 = 0;\n            const auto var_2 = 0;\n            for (int i = var_1 ; i < g[var_2 ]; ++i) {\n                const auto var_3 = 1;\n                result.push_back(g[var_3 ]);\n            }\n        } else {\n            const auto var_4 = 0;\n            result.push_back(g[var_4 ]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <string>\n#include <sstream>\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (const auto& g : alist) {\n        const auto var_0 = 2;\n        if (g.size() == var_0 ) {\n            const auto var_1 = 0;\n            const auto var_2 = 0;\n            for (int i = var_1 ; i < g[var_2 ]; ++i) {\n                const auto var_3 = 1;\n//begin to write code\n", "prompt": "Write a function to decode a run-length encoded given list."}
{"task_id": 134, "Adversarial Code": "def max_Abs_Diff(arr,n):\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n", "Adversarial truth": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) \n", "lang": "python", "code_str_generate": "def max_Abs_Diff(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n", "prompt": "Write a python function to find the maximum difference between any two elements in a given array."}
{"task_id": 172, "Adversarial Code": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n", "Adversarial truth": "def count_pairs(arr, n, k):\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\n        count += 1\n  return count", "lang": "python", "code_str_generate": "def count_pairs(arr, n, k):\n\n  '''\n  progame language:python\n  description:Write a function to count all the distinct pairs having a difference of k in any array.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  count=0;\n  for i in range(0,n):\n    for j in range(i+1, n):\n    #begin to write code\n", "prompt": "Write a function to count all the distinct pairs having a difference of k in any array."}
{"task_id": 165, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = a + b + c;\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 152, "Adversarial Code": "from math import tan, pi\ndef area_polygon(s,l):\n  area\\\n\\\n    #begin to write code\n", "Adversarial truth": "from math import tan, pi\ndef area_polygon(s,l):\n  area\\\n\\\n = s * (l ** 2) / (4 * tan(pi / s))\n  return area", "lang": "python", "code_str_generate": "from math import tan, pi\ndef area_polygon(s,l):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the area of a regular polygon.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area\\\n\\\n    #begin to write code\n", "prompt": "Write a function to calculate the area of a regular polygon."}
{"task_id": 23, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& vec, int n) {\n    int c = 0;\n    int d = n - 1;\n    while (c <= d) {\n        int k = (c + d) / 2;\n        if (vec[k] != k + 1 && vec[k - 1] == k) {\n            return k + 1;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_missing(std::vector<int>& vec, int n) {\n    int c = 0;\n    int d = n - 1;\n    while (c <= d) {\n        int k = (c + d) / 2;\n        if (vec[k] != k + 1 && vec[k - 1] == k) {\n            return k + 1;\n        } else if (vec[k] != k + 1) {\n            d = k - 1;\n        } else {\n            c = k + 1;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& vec, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int c = 0;\n    int d = n - 1;\n    while (c <= d) {\n        int k = (c + d) / 2;\n        if (vec[k] != k + 1 && vec[k - 1] == k) {\n            return k + 1;\n//begin to write code\n", "prompt": "Write a cpp function to find the missing number in a sorted array."}
{"task_id": 419, "Adversarial Code": "def parabola_directrix(a, b, c):\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n", "Adversarial truth": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "lang": "python", "code_str_generate": "def parabola_directrix(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 26, "Adversarial Code": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n            }\n        }\n        Collections.sort(intPart);\n        Collections.sort(strPart);\n        List<Object> result = new ArrayList<>(intPart);\n        result.addAll(strPart);\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given mixed list of integers and strings.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n                //begin to write code\n", "prompt": "Write a function to sort a given mixed list of integers and strings."}
{"task_id": 1, "Adversarial Code": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    #begin to write code\n", "Adversarial truth": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "lang": "python", "code_str_generate": "def sort_matrix(M):\n\n    '''\n    progame language:python\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = sorted(M, key=sum)\n    #begin to write code\n", "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows."}
{"task_id": 190, "Adversarial Code": "function chkList(lst) { \n//begin to write code\n", "Adversarial truth": "function chkList(lst) { \n    return new Set(lst).size === 1;\n}\n\n", "lang": "javascript", "code_str_generate": "function chkList(lst) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to check whether the elements in a list are same or not."}
{"task_id": 77, "Adversarial Code": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = 1 + (acc[value] || 0);\n        //begin to write code\n", "Adversarial truth": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = 1 + (acc[value] || 0);\n        return acc;\n    }, {});\n    return freqCount;\n}\n\n", "lang": "javascript", "code_str_generate": "function freqCount(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = 1 + (acc[value] || 0);\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 460, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n\n\n    for (int i = 0; i < lens; i++) {\n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n", "prompt": "Write a cpp function to find remainder of array multiplication divided by n."}
{"task_id": 19, "Adversarial Code": "class Solution {\n    public static boolean checkEquality(String str) {\n        return (str.charAt(0) == str.charAt(str.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String str) {\n        int ret = 0;\n        int length = str.length();\n        for (int k = 0; k < length; k++) {\n            for (int i = 1; i <= length - k; i++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkEquality(String str) {\n        return (str.charAt(0) == str.charAt(str.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String str) {\n        int ret = 0;\n        int length = str.length();\n        for (int k = 0; k < length; k++) {\n            for (int i = 1; i <= length - k; i++) {\n                if (checkEquality(str.substring(k, k + i))) {\n                    ret++;\n                }\n            }\n        }\n        return ret;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkEquality(String str) {\n        return (str.charAt(0) == str.charAt(str.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count all the substrings starting and ending with same characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ret = 0;\n        int length = str.length();\n        for (int k = 0; k < length; k++) {\n            for (int i = 1; i <= length - k; i++) {\n            //begin to write code\n", "prompt": "Write a java function to count all the substrings starting and ending with same characters."}
{"task_id": 478, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n        if (arr[i] > mn) {\n//begin to write code\n", "Adversarial truth": "\n\n//This is a comment line.\n#include <iostream>\n#include <vector>\n//This is a comment line.\n#include <cassert>\n\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n\n        if (arr[i] > mn) {\n            const auto var_3 = 1;\n            mn = arr[i];\n            freq = var_3 ;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n        []() {std::cout << var_4  << std::endl;};\n    const std::string var_4 = \"This function is used to remove a item of a list\";\n    }\n    return freq;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\n//This is a comment line.\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const auto var_0 = 0;\n    const auto var_1 = 1;\n    const auto var_2 = 1;\n    int mn = arr[var_0 ];\n    int freq = var_1 ;\n    for (int i = var_2 ; i < n; i++) {\n        if (arr[i] > mn) {\n//begin to write code\n", "prompt": "Write a cpp function to find the frequency of the largest value in a given array."}
{"task_id": 436, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cubv_mfms(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cubv_mfms(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cubv_mfms(const vector<int>& nums) {\n    vector<int> cube_nums;\n\n    /*\n    progame language:cpp\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int num : nums) {\n//begin to write code\n", "prompt": "Write a function to find cubes of individual elements in a list using lambda function."}
{"task_id": 354, "Adversarial Code": "function count_Digit(n) {\n    let count = 0;\n    while (n !== 0) {\n        n\n        //begin to write code\n", "Adversarial truth": "function count_Digit(n) {\n    let count = 0;\n    while (n !== 0) {\n        n\n = Math.floor(n / 10);\n        count += 1;\n    }\n    return count;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function count_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n !== 0) {\n        n\n        //begin to write code\n", "prompt": "Write a javascript function to count the number of digits of a given number."}
{"task_id": 346, "Adversarial Code": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n", "Adversarial truth": "def find_max(test_list):\n  res = max(int(j) for i in test_list for j in i)\n  return (res) ", "lang": "python", "code_str_generate": "def find_max(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to find the maximum element of all the given tuple records.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = max(int(j) for i in test_list for j in i)\n  #begin to write code\n", "prompt": "Write a function to find the maximum element of all the given tuple records."}
{"task_id": 350, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\n//This is a comment line.\nvector<T> remove_empty(vector<T> list1) {\n    vector<T> result;\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\n\ntemplate<typename T>\n//This is a comment line.\nvector<T> remove_empty(vector<T> list1) {\n    vector<T> result;\n    for (auto& item : list1) {\n        if (!item.empty()) result.push_back(item);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\n//This is a comment line.\nvector<T> remove_empty(vector<T> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove empty lists from a given list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<T> result;\n//begin to write code\n", "prompt": "Write a function to remove empty lists from a given list of lists."}
{"task_id": 420, "Adversarial Code": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n    return median;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n", "prompt": "Write a function that takes two lists and returns true if they have at least one common element."}
{"task_id": 273, "Adversarial Code": "function every(var_0, var_3) {\n  let var_2 = var_0.every(var_1 => var_1 === var_3);\n  //begin to write code\n", "Adversarial truth": "function every(var_0, var_3) {\n  let var_2 = var_0.every(var_1 => var_1 === var_3);\n  return var_2;\n}\n\n", "lang": "javascript", "code_str_generate": "function every(var_0, var_3) {\n  let var_2 = var_0.every(var_1 => var_1 === var_3);\n  //begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 192, "Adversarial Code": "function hamming_Distance(n8, n2) {\n    let x = n8 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "Adversarial truth": "function hamming_Distance(n8, n2) {\n    let x = n8 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n        setBits += x & 1;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n", "lang": "javascript", "code_str_generate": "function hamming_Distance(n8, n2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = n8 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the hamming distance between given two integers."}
{"task_id": 107, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return XOR;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 64, "Adversarial Code": "class Solution {\n    public static List<List<Integer>> finwTfpleh(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Integer>> finwTfpleh(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Integer>> finwTfpleh(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n", "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples."}
{"task_id": 42, "Adversarial Code": "def check_Equality(str):\n#This is a comment line.\n  if (str[0] == str[-1]):  \n  #begin to write code\n", "Adversarial truth": "def check_Equality(str):\n#This is a comment line.\n  if (str[0] == str[-1]):  \n    return (\"Equal\") \n  else:  \n    return (\"Not Equal\") ", "lang": "python", "code_str_generate": "def check_Equality(str):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n#This is a comment line.\n  if (str[0] == str[-1]):  \n  #begin to write code\n", "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not."}
{"task_id": 414, "Adversarial Code": "class Solution {\n    public\n static int countElementInList(List<List<Object>> list1, Object x) {\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int countElementInList(List<List<Object>> list1, Object x) {\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n\n\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int countElementInList(List<List<Object>> list1, Object x) {\n\n        /*\n        progame language:java\n        description:Write a function to count the number of sublists containing a particular element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n            //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 366, "Adversarial Code": "function rvnlev_Xsai(s, c) {\n    let counts = s.split(c).length - 1;\n    //begin to write code\n", "Adversarial truth": "function rvnlev_Xsai(s, c) {\n    let counts = s.split(c).length - 1;\n    let result = s.split('').filter(char => char !== c).join('');\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function rvnlev_Xsai(s, c) {\n    let counts = s.split(c).length - 1;\n    //begin to write code\n", "prompt": "Write a javascript function to remove all occurrences of a character in a given string."}
{"task_id": 491, "Adversarial Code": "class Solution {\n    public\n int\n find(int n, int m) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n int\n find(int n, int m) {\n        int r = n % m;\n        return r;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n int\n find(int n, int m) {\n\n /*\n progame language:java\n description:Write a java function to find remainder of two numbers.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a java function to find remainder of two numbers."}
{"task_id": 15, "Adversarial Code": "class Solution {\n    public\n static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                }\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static boolean checkKElements(int[][] testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the given tuple list has all k elements.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                //begin to write code\n", "prompt": "Write a function to check if the given tuple list has all k elements."}
{"task_id": 299, "Adversarial Code": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n", "Adversarial truth": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "lang": "python", "code_str_generate": "def string_to_tuple(str1):\n\n    '''\n    progame language:python\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = tuple(x for x in str1 if not x.isspace()) \n    #begin to write code\n", "prompt": "Write a function to convert a given string to a tuple."}
{"task_id": 316, "Adversarial Code": "//function definition\nfunction contains(x, y, z) {\n    if (x === y || y === z || z === x) {\n        return true;\n        //begin to write code\n", "Adversarial truth": "//function definition\nfunction contains(x, y, z) {\n    if (x === y || y === z || z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "//function definition\nfunction contains(x, y, z) {\n    if (x === y || y === z || z === x) {\n        return true;\n        //begin to write code\n", "prompt": "Write a function to print check if the triangle is isosceles or not."}
{"task_id": 345, "Adversarial Code": "function find_angle(a, b) {\n    const\n    //begin to write code\n", "Adversarial truth": "function find_angle(a, b) {\n    const\n c = 180 - (a + b);\n    return c;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function find_angle(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const\n    //begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 381, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint get_max_sum(int n) {\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint get_max_sum(int n) {\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n\n    for (int i = 2; i <= n; ++i) {\n        res.push_back(std::max(i, res[i / 2] + res[i / 3] + res[i / 4] + res[i / 5]));\n    }\n\n    return res[n];\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint get_max_sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n//begin to write code\n", "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."}
{"task_id": 109, "Adversarial Code": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n", "Adversarial truth": "def max_product_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1] )\n#This is a comment line.\n    return result_max", "lang": "python", "code_str_generate": "def max_product_tuple(list1):\n\n    '''\n    progame language:python\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result_max = max([abs(x * y) for x, y in list1] )\n    #begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 239, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n//This is a comment line.\n#include <vector>\n#include <cassert>\n\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n//This is a comment line.\nint count_X(const std::vector<int>& tup, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n//begin to write code\n", "prompt": "Write a cpp function to count the occcurences of an element in a tuple."}
{"task_id": 485, "Adversarial Code": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "Adversarial truth": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "lang": "python", "code_str_generate": "import heapq as hq\ndef heap_queue_smallest(nums,n):\n\n  '''\n  progame language:python\n  description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  smallest_nums = hq.nsmallest(n, nums)\n  #begin to write code\n", "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm."}
{"task_id": 110, "Adversarial Code": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n", "Adversarial truth": "def check_triplet(A, n, sum, count):\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n        return False\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\n           check_triplet(A, n - 1, sum, count)", "lang": "python", "code_str_generate": "def check_triplet(A, n, sum, count):\n\n    '''\n    progame language:python\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if count == 3 and sum == 0:\n        return True\n    if count == 3 or n == 0 or sum < 0:\n    #begin to write code\n", "prompt": "Write a function to find the triplet with sum of the given array"}
{"task_id": 391, "Adversarial Code": "const readline = require('readline');\nfunction ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "Adversarial truth": "const readline = require('readline');\nfunction ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = Math.min(i, r); j > 0; j--) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}\n\n", "lang": "javascript", "code_str_generate": "const readline = require('readline');\nfunction ncr_modp(n, r, p) {\n\n    /*\n    progame language:javascript\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n", "prompt": "Write a function to compute the value of ncr%p."}
{"task_id": 162, "Adversarial Code": "class Solution {\n    public static String remlee_splxsar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remlee_splxsar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String remlee_splxsar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 201, "Adversarial Code": "import math  \ndef fourth_Power_Sum(n):\n    sum = 0\n    for i in range(1,n+1) : \n    #begin to write code\n", "Adversarial truth": "import math  \ndef fourth_Power_Sum(n): \n    sum = 0\n    for i in range(1,n+1) : \n        sum = sum + (i*i*i*i) \n    return sum", "lang": "python", "code_str_generate": "import math  \ndef fourth_Power_Sum(n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    sum = 0\n    for i in range(1,n+1) : \n    #begin to write code\n", "prompt": "Write a python function to find the sum of fourth power of n natural numbers."}
{"task_id": 192, "Adversarial Code": "def hamming_Distance(var_1,var_0) :\n    var_3 = var_1 ^ var_0  \n    var_2 = 0\n    while (var_3 > 0) : \n    #begin to write code\n", "Adversarial truth": "def hamming_Distance(var_1,var_0) : \n    var_3 = var_1 ^ var_0  \n    var_2 = 0\n    while (var_3 > 0) : \n        var_2 += var_3 & 1\n        var_3 >>= 1\n    return var_2  ", "lang": "python", "code_str_generate": "def hamming_Distance(var_1,var_0) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_3 = var_1 ^ var_0  \n    var_2 = 0\n    while (var_3 > 0) : \n    #begin to write code\n", "prompt": "Write a python function to find the hamming distance between given two integers."}
{"task_id": 231, "Adversarial Code": "function count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n", "Adversarial truth": "function count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n        total = total + 1;\n    }\n    return total;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function count_charac(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n", "prompt": "Write a function to count total characters in a string."}
{"task_id": 311, "Adversarial Code": "def position_min(var_2):\n    var_4 = min(var_2)\n    #begin to write code\n", "Adversarial truth": "def position_min(var_2):\n    var_4 = min(var_2)\n    var_3 = [var_0 for var_0, var_1 in enumerate(var_2) if var_1 == var_4]\n    return var_3", "lang": "python", "code_str_generate": "def position_min(var_2):\n\n    '''\n    progame language:python\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    var_4 = min(var_2)\n    #begin to write code\n", "prompt": "Write a function to find all index positions of the minimum values in a given list."}
{"task_id": 243, "Adversarial Code": "import math\nimport re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n #begin to write code\n", "Adversarial truth": "import math\nimport re\ndef words_ae(text):\n list = re.findall(r\"[ae]\\w+\", text)\n return list", "lang": "python", "code_str_generate": "import math\nimport re\ndef words_ae(text):\n\n '''\n progame language:python\n description:Write a function to find all words starting with 'a' or 'e' in a given string.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list = re.findall(r\"[ae]\\w+\", text)\n #begin to write code\n", "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string."}
{"task_id": 181, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n        }\n        if (isdigit(i)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether a string has atleast one letter and one number."}
{"task_id": 13, "Adversarial Code": "class Solution {\n    public static int brnzibGoDvxrnao(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int brnzibGoDvxrnao(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int brnzibGoDvxrnao(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n", "prompt": "Write a function to convert the given binary number to its decimal equivalent."}
{"task_id": 6, "Adversarial Code": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        return perimeter;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int squarePerimeter(int a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = 4 * a;\n        //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 216, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n", "prompt": "Write a function to find minimum of three numbers."}
{"task_id": 195, "Adversarial Code": "function func_0(arr) {\n  const result = arr.slice(0, -1).map((x, i) => x + arr[i + 1]);\n  //begin to write code\n", "Adversarial truth": "function func_0(arr) {\n  const result = arr.slice(0, -1).map((x, i) => x + arr[i + 1]);\n  return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(arr) {\n  const result = arr.slice(0, -1).map((x, i) => x + arr[i + 1]);\n  //begin to write code\n", "prompt": "Write a function to perform the adjacent element concatenation in the given tuples."}
{"task_id": 492, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\n\n\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n\n\n    return result;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
{"task_id": 71, "Adversarial Code": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_3 = temp_var_3 + 1;}\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double volumeSphere(int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n        //begin to write code\n", "prompt": "Write a function to find the volume of a sphere."}
{"task_id": 79, "Adversarial Code": "class Solution {\n    public static int lenLog(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int lenLog(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n            }\n        }\n        return max;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int lenLog(String[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the length of the longest word.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n", "prompt": "Write a java function to find the length of the longest word."}
{"task_id": 435, "Adversarial Code": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n        //begin to write code\n", "Adversarial truth": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_Occurrence(tup, lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n        //begin to write code\n", "prompt": "Write a javascript function to count the occurence of all elements of list in a tuple."}
{"task_id": 221, "Adversarial Code": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to get the n largest items from a dataset.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue\n<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        //begin to write code\n", "prompt": "Write a function to get the n largest items from a dataset."}
{"task_id": 131, "Adversarial Code": "class Solution {\n    public\n static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n\n\n\n\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n        /*\n        progame language:java\n        description:Write a function to count the same pair in three given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n            //begin to write code\n", "prompt": "Write a function to count the same pair in three given lists."}
{"task_id": 210, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <vector>\nint reduce(const std::vector<int>& var_1) {\n    for (int v : var_1) {\n        if (v % 2 == 0) {\n            return v;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nint reduce(const std::vector<int>& var_1) {\n    for (int v : var_1) {\n        if (v % 2 == 0) {\n            return v;\n        }\n    }\n    return -1;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nint reduce(const std::vector<int>& var_1) {\n    for (int v : var_1) {\n        if (v % 2 == 0) {\n            return v;\n//begin to write code\n", "prompt": "Write a cpp function to find the first even number in a given list of numbers."}
{"task_id": 319, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n\n    vector<string> matches;\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        matches.push_back((*i).str());\n    }\n    return matches;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n", "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex."}
{"task_id": 320, "Adversarial Code": "#include<cassert>\n#include <iostream>\nint func_0(int var_1) {\n    int count = 0;\n    int var_0 = 1;\n    while(var_0 < var_1 + 1) {\n        if ((var_0 & var_1) == 0) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n\nint func_0(int var_1) {\n    int count = 0;\n    int var_0 = 1;\n    while(var_0 < var_1 + 1) {\n        if ((var_0 & var_1) == 0) {\n            count += 1;\n        }\n        var_0 = var_0 << 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\nint func_0(int var_1) {\n    int count = 0;\n    int var_0 = 1;\n    while(var_0 < var_1 + 1) {\n        if ((var_0 & var_1) == 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count unset bits of a given number."}
{"task_id": 189, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n            max_result.push_back(i);\n        }\n    }\n    return max_result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n//begin to write code\n", "prompt": "Write a function to find all index positions of the maximum values in a given list."}
{"task_id": 261, "Adversarial Code": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            final int var_0 = 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            final int var_0 = 1;\n            res.add((Integer) lis.get(lis.size() - var_0 ));\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to perfom the rear element extraction from list of tuples records.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            final int var_0 = 1;\n            //begin to write code\n", "prompt": "Write a function to perfom the rear element extraction from list of tuples records."}
{"task_id": 162, "Adversarial Code": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\");\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String remove_splchar(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to remove everything except alphanumeric characters from a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n", "prompt": "Write a function to remove everything except alphanumeric characters from a string."}
{"task_id": 52, "Adversarial Code": "def func_0(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  #begin to write code\n", "Adversarial truth": "def func_0(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return (res) ", "lang": "python", "code_str_generate": "def func_0(test_list):\n\n  '''\n  progame language:python\n  description:Write a function to find the maximum difference between available pairs in the given tuple list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  temp = [abs(b - a) for a, b in test_list]\n  #begin to write code\n", "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list."}
{"task_id": 116, "Adversarial Code": "#include <thread>\n#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "Adversarial truth": "#include <thread>\n\n#include <iostream>\n#include <cassert>\n\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n    } else if (y == 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <thread>\n#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a function to multiply two integers without using the * operator in cpp.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n", "prompt": "Write a function to multiply two integers without using the * operator in cpp."}
{"task_id": 317, "Adversarial Code": "function iotatvOvut(p, i, j) {\n    const c = p.slice(i).concat(p.slice(0, j));\n    //begin to write code\n", "Adversarial truth": "function iotatvOvut(p, i, j) {\n    const c = p.slice(i).concat(p.slice(0, j));\n    return c;\n}\n\n", "lang": "javascript", "code_str_generate": "function iotatvOvut(p, i, j) {\n    const c = p.slice(i).concat(p.slice(0, j));\n    //begin to write code\n", "prompt": "Write a function to rotate a given list by specified number of items to the left direction."}
{"task_id": 484, "Adversarial Code": "function remove_lowercase(str1) {\n  const var_0 = '';\n  //begin to write code\n", "Adversarial truth": "function remove_lowercase(str1) {\n  const var_0 = '';\n  return str1.replace(/[a-z]/g, var_0 );\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_lowercase(str1) {\n\n  /*\n  progame language:javascript\n  description:Write a function to remove lowercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  const var_0 = '';\n  //begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 53, "Adversarial Code": "const child_process = require('child_process');\nconst buffer = require('buffer');\nfunction subjectMarks(subjectMarks) {\n//begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nconst buffer = require('buffer');\nfunction subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    return subjectMarks;\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\nconst buffer = require('buffer');\nfunction subjectMarks(subjectMarks) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to sort a list of tuples using lambda."}
{"task_id": 24, "Adversarial Code": "function find_rect_num(n) {\n    const var_0 = 1;\n    //begin to write code\n", "Adversarial truth": "function find_rect_num(n) {\n    const var_0 = 1;\n    return n * (n + var_0 );\n}\n\n", "lang": "javascript", "code_str_generate": "function find_rect_num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n-th rectangular number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const var_0 = 1;\n    //begin to write code\n", "prompt": "Write a function to find the n-th rectangular number."}
{"task_id": 237, "Adversarial Code": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n    #begin to write code\n", "Adversarial truth": "def harmonic_sum(n):\n  if n < 2:\n    return 1\n  else:\n    return 1 / n + (harmonic_sum(n - 1)) ", "lang": "python", "code_str_generate": "def harmonic_sum(n):\n\n  '''\n  progame language:python\n  description:Write a function to calculate the harmonic sum of n-1.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  if n < 2:\n    return 1\n    #begin to write code\n", "prompt": "Write a function to calculate the harmonic sum of n-1."}
{"task_id": 473, "Adversarial Code": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_5 = temp_var_5 + 1;}\n            if (!testList2.contains(sub)) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_5 = temp_var_5 + 1;}\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n\n        /*\n        progame language:java\n        description:Write a function to remove the matching tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {System.out.println(\"This function is used to remove a item of a list\");temp_var_5 = temp_var_5 + 1;}\n            if (!testList2.contains(sub)) {\n            //begin to write code\n", "prompt": "Write a function to remove the matching tuples from the given two tuples."}
{"task_id": 157, "Adversarial Code": "function count(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "Adversarial truth": "function count(a, x) {\n    let count = 0;\n    for (let i of a) {\n        if (i === x) count += 1;\n    }\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the frequency of a number in a given array."}
{"task_id": 413, "Adversarial Code": "const fs = require('fs');\nfunction extract_rear(test_tuple) {\n//begin to write code\n", "Adversarial truth": "const fs = require('fs');\nfunction extract_rear(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    return res;\n}\n\n", "lang": "javascript", "code_str_generate": "const fs = require('fs');\nfunction extract_rear(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract only the rear index element of each string in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to extract only the rear index element of each string in the given tuple."}
{"task_id": 345, "Adversarial Code": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n//This is a comment line.\n    int c = 180 - (a + b);\n    return c;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a function to find the third angle of a triangle using two angles."}
{"task_id": 308, "Adversarial Code": "import re\ndef find_long_word(string):\n    #begin to write code\n", "Adversarial truth": "import re\ndef find_long_word(string):\n  return (re.findall(r\"\\b\\w{5}\\b\", string))", "lang": "python", "code_str_generate": "import re\ndef find_long_word(string):\n\n    '''\n    progame language:python\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a function to find all five characters long word in the given string by using regex."}
{"task_id": 190, "Adversarial Code": "function chkList(lst) { \n    return new\n    //begin to write code\n", "Adversarial truth": "function chkList(lst) { \n    return new\n Set(lst).size === 1;\n}\n\n\n\n", "lang": "javascript", "code_str_generate": "function chkList(lst) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return new\n    //begin to write code\n", "prompt": "Write a javascript function to check whether the elements in a list are same or not."}
{"task_id": 384, "Adversarial Code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "Adversarial truth": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n      ctr[c] = 1 \n      char_order.append(c)\n  for c in char_order:\n    if ctr[c] == 1:\n      return c\n  return None", "lang": "python", "code_str_generate": "def first_non_repeating_character(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      ctr[c] += 1\n    else:\n    #begin to write code\n", "prompt": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": 269, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (item == dlist[pos]) {\n            return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (item == dlist[pos]) {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (item == dlist[pos]) {\n            return true;\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using sequential search."}
{"task_id": 334, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n//This is a comment line.\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n//This is a comment line.\n    for (int i = 1; i < nums.size(); i++) {\n        result.push_back(nums[i] - nums[i-1]);\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n//This is a comment line.\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 176, "Adversarial Code": "def longest_common_subsequence(X, Y, m, n):\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "Adversarial truth": "def longest_common_subsequence(X, Y, m, n): \n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \n    else: \n       return max\\\n(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))\n\n", "lang": "python", "code_str_generate": "def longest_common_subsequence(X, Y, m, n):\n\n    '''\n    progame language:python\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    if m == 0 or n == 0: \n       return 0 \n    elif X[m-1] == Y[n-1]: \n    #begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 176, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n//This is a comment line.\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\nusing namespace std;\n\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n//This is a comment line.\n    } else if (X[m-1] == Y[n-1]) {\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1);\n    } else {\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m == 0 || n == 0) {\n        return 0;\n//This is a comment line.\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 447, "Adversarial Code": "class Solution {\n    public static int rectangleArea(int l, int b) {\n        int area = l * b;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int rectangleArea(int l, int b) {\n        int area = l * b;\n        return area;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int rectangleArea(int l, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a rectangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = l * b;\n        //begin to write code\n", "prompt": "Write a function to find the area of a rectangle."}
{"task_id": 141, "Adversarial Code": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "Adversarial truth": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n        c = c.concat(a);\n    }\n    return c;\n}\n\nfunction merge_sort(x) {\n    if (x.length === 0 || x.length === 1) {\n        return x;\n    } else {\n        const middle = Math.floor(x.length / 2);\n        const a = merge_sort(x.slice(0, middle));\n        const b = merge_sort(x.slice(middle));\n        return merge(a, b);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 140, "Adversarial Code": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n    }\n    return p;\n}\n\nbool is_coprime(int x, int y) {\n    return gcd(x, y) == 1;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given number is co-prime or not."}
{"task_id": 481, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool func_0(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool func_0(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n\n    return found;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool func_0(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n", "prompt": "Write a function to search an element in the given array by using binary search."}
{"task_id": 88, "Adversarial Code": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String decimalToBinary(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given decimal number to its binary equivalent.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Integer.toBinaryString(n);\n        //begin to write code\n", "prompt": "Write a function to convert the given decimal number to its binary equivalent."}
{"task_id": 77, "Adversarial Code": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "Adversarial truth": "function freqCount(list1) {\n\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n\n\n    return freqCount;\n}\n\n\n", "lang": "javascript", "code_str_generate": "function freqCount(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 384, "Adversarial Code": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      var_4 = 1\n      var_0 = var_4 \n      ctr[c] += var_0 \n    else:\n      var_5 = 1\n      var_1 = var_5 \n      #begin to write code\n", "Adversarial truth": "def first_non_repeating_character(str1):\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      var_4 = 1\n      var_0 = var_4 \n      ctr[c] += var_0 \n    else:\n      var_5 = 1\n      var_1 = var_5 \n      ctr[c] = var_1  \n      char_order.append(c)\n  for c in char_order:\n    var_6 = 1\n    var_2 = var_6 \n    if ctr[c] == var_2 :\n      return c\n  var_7 = None\n  var_3 = var_7 \n  return var_3 ", "lang": "python", "code_str_generate": "def first_non_repeating_character(str1):\n\n  '''\n  progame language:python\n  description:Write a python function to find the first non-repeated character in a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  char_order = []\n  ctr = {}\n  for c in str1:\n    if c in ctr:\n      var_4 = 1\n      var_0 = var_4 \n      ctr[c] += var_0 \n    else:\n      var_5 = 1\n      var_1 = var_5 \n      #begin to write code\n", "prompt": "Write a python function to find the first non-repeated character in a given string."}
{"task_id": 165, "Adversarial Code": "const events = require('events');\nfunction perimeter_triangle(a, b, c) {\n//begin to write code\n", "Adversarial truth": "const events = require('events');\nfunction perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "const events = require('events');\nfunction perimeter_triangle(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to find the perimeter of a triangle."}
{"task_id": 368, "Adversarial Code": "import javax.swing.*;\nclass Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n        //begin to write code\n", "Adversarial truth": "import javax.swing.*;\nclass Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n    }\n}\nnew Runnable() {@Override public void run() {System.out.println(\"This function is used to remove a item of a list\");}};\n", "lang": "java", "code_str_generate": "import javax.swing.*;\nclass Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cuboid.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n        //begin to write code\n", "prompt": "Write a function to find the surface area of a cuboid."}
{"task_id": 414, "Adversarial Code": "class Solution {\n    public static int xoumtElenvntImLrst(List<List<Object>> var_1, Object var_3) {\n        int var_0 = 0;\n        for (List<Object> var_2 : var_1) {\n            if (var_2.contains(var_3)) {\n                var_0++;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int xoumtElenvntImLrst(List<List<Object>> var_1, Object var_3) {\n        int var_0 = 0;\n        for (List<Object> var_2 : var_1) {\n            if (var_2.contains(var_3)) {\n                var_0++;\n            }\n        }\n        return var_0;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int xoumtElenvntImLrst(List<List<Object>> var_1, Object var_3) {\n        int var_0 = 0;\n        for (List<Object> var_2 : var_1) {\n            if (var_2.contains(var_3)) {\n                var_0++;\n                //begin to write code\n", "prompt": "Write a function to count the number of sublists containing a particular element."}
{"task_id": 384, "Adversarial Code": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n    }\n    for (char c : char_order) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return '\\0'; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first non-repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n", "prompt": "Write a cpp function to find the first non-repeated character in a given string."}
{"task_id": 424, "Adversarial Code": "function last_Digit(n) {\n//begin to write code\n", "Adversarial truth": "function last_Digit(n) {\n    return n % 10;\n}\n\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function last_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a javascript function to find the last digit of a given number."}
{"task_id": 84, "Adversarial Code": "function Find_Min_Length(list) {\n    let min = Math.min(...list.map(item => item.length));\n    //begin to write code\n", "Adversarial truth": "function Find_Min_Length(list) {\n    let min = Math.min(...list.map(item => item.length));\n    return min;\n}\n\n", "lang": "javascript", "code_str_generate": "function Find_Min_Length(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let min = Math.min(...list.map(item => item.length));\n    //begin to write code\n", "prompt": "Write a javascript function to find the minimum length of sublist."}
{"task_id": 14, "Adversarial Code": "def find_Product(arr,n):\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n", "Adversarial truth": "def find_Product(arr,n): \n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n        if (arr[i - 1] != arr[i]): \n            prod = prod * arr[i] \n    return prod; ", "lang": "python", "code_str_generate": "def find_Product(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    arr.sort() \n    prod = 1\n    for i in range(0,n,1): \n    #begin to write code\n", "prompt": "Write a python function to find the product of non-repeated elements in a given array."}
{"task_id": 477, "Adversarial Code": "function func_0(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "Adversarial truth": "function func_0(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  return area;\n}", "lang": "javascript", "code_str_generate": "function func_0(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n", "prompt": "Write a function to find the area of a pentagon."}
{"task_id": 379, "Adversarial Code": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n        }\n        return addString;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n\n        /*\n        progame language:java\n        description:Write a function to insert a given string at the beginning of all items in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n            //begin to write code\n", "prompt": "Write a function to insert a given string at the beginning of all items in a list."}
{"task_id": 369, "Adversarial Code": "class Solution {\n    public\n static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n            }\n        }\n        return multiList;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static int[][] multiList(int rownum, int colnum) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a two-dimensional array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n            //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 388, "Adversarial Code": "def bitwise_xorj(test, other):\n  iesuot = tuple(eov ^ val for eov, val in zip(test, other))\n  #begin to write code\n", "Adversarial truth": "def bitwise_xorj(test, other):\n  iesuot = tuple(eov ^ val for eov, val in zip(test, other))\n  return (iesuot) ", "lang": "python", "code_str_generate": "def bitwise_xorj(test, other):\n\n  '''\n  progame language:python\n  description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  iesuot = tuple(eov ^ val for eov, val in zip(test, other))\n  #begin to write code\n", "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples."}
{"task_id": 369, "Adversarial Code": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n            }\n        }\n        return multiList;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a two-dimensional array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n", "prompt": "Write a function to generate a two-dimensional array."}
{"task_id": 480, "Adversarial Code": "class Solution {\n    public static double hfn_tk(int a, int n, int r) {\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double hfn_tk(int a, int n, int r) {\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        return total;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double hfn_tk(int a, int n, int r) {\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        //begin to write code\n", "prompt": "Write a function to find the sum of geometric progression series."}
{"task_id": 281, "Adversarial Code": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        return q;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find quotient of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int q = n / m;\n        //begin to write code\n", "prompt": "Write a java function to find quotient of two numbers."}
{"task_id": 271, "Adversarial Code": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to substaract two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final int var_0 = 0;\n        List<Integer> result = new ArrayList<>();\n        for (int i = var_0 ; i < nums1.size(); i++) {\n        //begin to write code\n", "prompt": "Write a function to substaract two lists using map and lambda function."}
{"task_id": 484, "Adversarial Code": "import io\nimport re\ndef remove_lowercase(str1):\n  var_0 = '[a-z]'\n  var_1 = ''\n  #begin to write code\n", "Adversarial truth": "import io\nimport re\ndef remove_lowercase(str1):\n  var_0 = '[a-z]'\n  var_1 = ''\n  remove_lower = lambda text: re.sub(var_0 , var_1 , text)\n  result =  remove_lower(str1)\n  return (result)", "lang": "python", "code_str_generate": "import io\nimport re\ndef remove_lowercase(str1):\n\n  '''\n  progame language:python\n  description:Write a function to remove lowercase substrings from a given string by using regex.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  var_0 = '[a-z]'\n  var_1 = ''\n  #begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 440, "Adversarial Code": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        final String var_0 = \"\\\\s+\";\n        final String var_1 = \"\";\n        Pattern pattern = Pattern.compile(var_0 );\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        final String var_0 = \"\\\\s+\";\n        final String var_1 = \"\";\n        Pattern pattern = Pattern.compile(var_0 );\n        Matcher matcher = pattern.matcher(text1);\n        return matcher.replaceAll(var_1 );\n    }\n}\n//This is a comment line.\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String removeWhitespaces(String text1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all whitespaces from the given string using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        final String var_0 = \"\\\\s+\";\n        final String var_1 = \"\";\n        Pattern pattern = Pattern.compile(var_0 );\n        //begin to write code\n", "prompt": "Write a function to remove all whitespaces from the given string using regex."}
{"task_id": 358, "Adversarial Code": "def L(l,w,h):\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "Adversarial truth": "def L(l,w,h):\n  LSA = 2*h*(l+w)\n  return LSA", "lang": "python", "code_str_generate": "def L(l,w,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the lateral surface area of cuboid\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  LSA = 2*h*(l+w)\n  #begin to write code\n", "prompt": "Write a function to find the lateral surface area of cuboid"}
{"task_id": 318, "Adversarial Code": "#include<iostream>\n#include<vector>\n#include<cassert>\nlong neg_count(const std::vector<long>& list) {\n    long neg_count = 0;\n    for (long num : list) {\n        if (num <= 0) {\n//begin to write code\n", "Adversarial truth": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nlong neg_count(const std::vector<long>& list) {\n    long neg_count = 0;\n    for (long num : list) {\n        if (num <= 0) {\n            neg_count += 1;\n        }\n    }\n    return neg_count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nlong neg_count(const std::vector<long>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long neg_count = 0;\n    for (long num : list) {\n        if (num <= 0) {\n//begin to write code\n", "prompt": "Write a cpp function to count negative numbers in a list."}
{"task_id": 137, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            {\n                int j = 0;\n                for (; j < i; ++j) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            {\n                int j = 0;\n                for (; j < i; ++j) {\n                        if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                            dp[i] = max(dp[i], dp[j] + 1);\n                        }\n                    }\n            }\n            result = max(result, dp[i]);\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    {\n        int i = 0;\n        for (; i < n; ++i) {\n            {\n                int j = 0;\n                for (; j < i; ++j) {\n//begin to write code\n", "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum."}
{"task_id": 302, "Adversarial Code": "const child_process = require('child_process');\nfunction pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n", "Adversarial truth": "const child_process = require('child_process');\nfunction pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n            result.push(num);\n        }\n    }\n\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "const child_process = require('child_process');\nfunction pos_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n", "prompt": "Write a javascript function to print positive numbers in a list."}
{"task_id": 210, "Adversarial Code": "function find(collection) {\n    const result = collection.find(i => i % 2 === 0);\n    //begin to write code\n", "Adversarial truth": "function find(collection) {\n    const result = collection.find(i => i % 2 === 0);\n    return result !== undefined ? result : -1;\n}\n\n", "lang": "javascript", "code_str_generate": "function find(collection) {\n    const result = collection.find(i => i % 2 === 0);\n    //begin to write code\n", "prompt": "Write a javascript function to find the first even number in a given list of numbers."}
{"task_id": 432, "Adversarial Code": "//This is a comment line.\nfunction largest_neg(list1) {\n    let max = list1[0];\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    for (let x of list1) {\n    //begin to write code\n", "Adversarial truth": "//This is a comment line.\nfunction largest_neg(list1) {\n    let max = list1[0];\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    for (let x of list1) {\n        if (x < max) {\n            max = x;\n        }\n    }\n    return max;\n}\n\n", "lang": "javascript", "code_str_generate": "//This is a comment line.\nfunction largest_neg(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max = list1[0];\n    (function() {let temp_var_4 = 9.9; temp_var_4 = temp_var_4 + 1;})();\n    for (let x of list1) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the largest negative number from the given list."}
{"task_id": 109, "Adversarial Code": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "Adversarial truth": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    return result_max;\n}\n\n", "lang": "javascript", "code_str_generate": "function max_product_tuple(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n", "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list."}
{"task_id": 6, "Adversarial Code": "function\n square_perimeter(a) {\n //begin to write code\n", "Adversarial truth": "function\n square_perimeter(a) {\n    let perimeter = 4 * a;\n    return perimeter;\n}\n\n", "lang": "javascript", "code_str_generate": "function\n square_perimeter(a) {\n\n /*\n progame language:javascript\n description:Write a function to find the perimeter of a square.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the perimeter of a square."}
{"task_id": 466, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n", "Adversarial truth": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n        {\n            res += v;\n        }\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n", "prompt": "Write a cpp function to convert the given string to lower case."}
{"task_id": 226, "Adversarial Code": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            res.put(sortedEle, res.getOrDefault(sortedEle, 0) + 1);\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n\n        /*\n        progame language:java\n        description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n", "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples."}
{"task_id": 14, "Adversarial Code": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        {\n            int i = 0;\n            while(i < n){\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        {\n            int i = 0;\n            while(i < n){\n            if (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n                    i++;\n            }\n        }\n        return prod;\n    }\n}", "lang": "java", "code_str_generate": "class Solution {\n    public static int find_Product(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the product of non-repeated elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(arr);\n        int prod = 1;\n        {\n            int i = 0;\n            while(i < n){\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n", "prompt": "Write a java function to find the product of non-repeated elements in a given array."}
{"task_id": 177, "Adversarial Code": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean prod_Square(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented by product of two squares or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n", "prompt": "Write a java function to check whether the given number can be represented by product of two squares or not."}
{"task_id": 41, "Adversarial Code": "def parallelogram_area(b,h):\n  area=b*h\n  #begin to write code\n", "Adversarial truth": "def parallelogram_area(b,h):\n  area=b*h\n  return area\n", "lang": "python", "code_str_generate": "def parallelogram_area(b,h):\n\n  '''\n  progame language:python\n  description:Write a function to caluclate area of a parallelogram.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  area=b*h\n  #begin to write code\n", "prompt": "Write a function to caluclate area of a parallelogram."}
{"task_id": 213, "Adversarial Code": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (n) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code\n", "prompt": "Write a cpp function to count set bits of a given number."}
{"task_id": 229, "Adversarial Code": "class Solution {\n    public\n static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n        list1.remove(list1.size() - 1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n\n\n        list1.remove(list1.size() - 1);\n\n\n        list1.addAll(list2);\n        return list1;\n    }\n}\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to replace the last element of the list with another list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.remove(list1.size() - 1);\n        //begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 101, "Adversarial Code": "#include<iostream>\n#include <cassert>\nint kviinetvr(int diameter, int height) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <cassert>\n\nint kviinetvr(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <cassert>\nint kviinetvr(int diameter, int height) {\n//begin to write code\n", "prompt": "Write a cpp function to find the perimeter of a cylinder."}
{"task_id": 357, "Adversarial Code": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  #begin to write code\n", "Adversarial truth": "def repeat_tuples(test_tup, N):\n  res = ((test_tup, ) * N)\n  return (res) ", "lang": "python", "code_str_generate": "def repeat_tuples(test_tup, N):\n\n  '''\n  progame language:python\n  description:Write a function to repeat the given tuple n times.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = ((test_tup, ) * N)\n  #begin to write code\n", "prompt": "Write a function to repeat the given tuple n times."}
{"task_id": 449, "Adversarial Code": "class Solution {\n    public\n static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            result.add(item.get(0));\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<Integer> Extract(List<List<Integer>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to get the first element of each sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n        //begin to write code\n", "prompt": "Write a java function to get the first element of each sublist."}
{"task_id": 68, "Adversarial Code": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n//This is a comment line.\n//begin to write code\n", "Adversarial truth": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n//This is a comment line.\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public boolean wordLen(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the length of the word is odd or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n//This is a comment line.\n//begin to write code\n", "prompt": "Write a java function to check whether the length of the word is odd or not."}
{"task_id": 418, "Adversarial Code": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "Adversarial truth": "def and_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res) ", "lang": "python", "code_str_generate": "def and_tuples(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to extract the elementwise and tuples from the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  #begin to write code\n", "prompt": "Write a function to extract the elementwise and tuples from the given two tuples."}
{"task_id": 425, "Adversarial Code": "class Solution {\n    public ArrayList<Integer> neg_nos(long[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public ArrayList<Integer> neg_nos(long[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public ArrayList<Integer> neg_nos(long[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to print negative numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n", "prompt": "Write a java function to print negative numbers in a list."}
{"task_id": 176, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    {\n        int i = 2;\n        while(i <= n){\n        if (i * i < (n + 1)) {\n            {\n                int j = 2;\n                while(j <= n){\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int n) {\n    {\n        int i = 2;\n        while(i <= n){\n        if (i * i < (n + 1)) {\n            {\n                int j = 2;\n                while(j <= n){\n                if ((i * i * j * j) == n) {\n                    return true;\n                }\n                            ++j;\n                }\n            }\n        }\n            ++i;\n        }\n    }\n    return false;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    {\n        int i = 2;\n        while(i <= n){\n        if (i * i < (n + 1)) {\n            {\n                int j = 2;\n                while(j <= n){\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 324, "Adversarial Code": "class Solution {\n    public static double akHun(int p, int b, int c) {\n        double sum = (b * (2.0 * p + (b - 1) * c)) / 2.0;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static double akHun(int p, int b, int c) {\n        double sum = (b * (2.0 * p + (b - 1) * c)) / 2.0;\n        return sum;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static double akHun(int p, int b, int c) {\n        double sum = (b * (2.0 * p + (b - 1) * c)) / 2.0;\n        //begin to write code\n", "prompt": "Write a function to find the sum of arithmetic progression."}
{"task_id": 444, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 318, "Adversarial Code": "function negCount(list) {\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n    //begin to write code\n", "Adversarial truth": "function negCount(list) {\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n      neg_count += 1;\n    }\n  }\n  return neg_count;\n}\n\n", "lang": "javascript", "code_str_generate": "function negCount(list) {\n\n  /*\n  progame language:javascript\n  description:Write a javascript function to count negative numbers in a list.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n    //begin to write code\n", "prompt": "Write a javascript function to count negative numbers in a list."}
{"task_id": 47, "Adversarial Code": "def opposite_Signs(x,y):\n    #begin to write code\n", "Adversarial truth": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0); ", "lang": "python", "code_str_generate": "def opposite_Signs(x,y):\n\n    '''\n    progame language:python\n    description:Write a python function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to check whether the given two integers have opposite sign or not."}
{"task_id": 10, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    {\n        int i = 1;\n        for (; i <= m; ++i) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    {\n        int i = 1;\n        for (; i <= m; ++i) {\n            multiples.push_back(n * i);\n        }\n    }\n    return multiples;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> multiples;\n    {\n        int i = 1;\n        for (; i <= m; ++i) {\n//begin to write code\n", "prompt": "Write a function to find m number of multiples of n."}
{"task_id": 248, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, long>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, long>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n        int second = max(get<1>(test_tup1[i]), get<1>(test_tup2[i]));\n        res.push_back(make_tuple(first, second));\n    }\n    return res;\n}", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, long>>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to maximize the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n", "prompt": "Write a function to maximize the given two tuples."}
{"task_id": 8, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    return arraynums.size() != nums_set.size();\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n", "prompt": "Write a function to find whether a given array of integers contains any duplicate element."}
{"task_id": 229, "Adversarial Code": "def replace_list(list1,list2):\n list1[-1:] = list2\n #begin to write code\n", "Adversarial truth": "def replace_list(list1,list2):\n list1[-1:] = list2\n ret=list1\n return ret\n", "lang": "python", "code_str_generate": "def replace_list(list1,list2):\n\n '''\n progame language:python\n description:Write a function to replace the last element of the list with another list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n list1[-1:] = list2\n #begin to write code\n", "prompt": "Write a function to replace the last element of the list with another list."}
{"task_id": 262, "Adversarial Code": "function subtractElements(testTuple1, testTuple2) {\n//begin to write code\n", "Adversarial truth": "function subtractElements(testTuple1, testTuple2) {\n    return testTuple1.map((element, index) => element - testTuple2[index]);\n}\n\n", "lang": "javascript", "code_str_generate": "function subtractElements(testTuple1, testTuple2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple."}
{"task_id": 181, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n        }\n        if (isdigit(i)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n", "prompt": "Write a cpp function to check whether a string has atleast one letter and one number."}
{"task_id": 124, "Adversarial Code": "function func_0(n) {\n//begin to write code\n", "Adversarial truth": "function func_0(n) {\n    return n * (2 * n - 1);\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(n) {\n//begin to write code\n", "prompt": "Write a function to find the nth hexagonal number."}
{"task_id": 273, "Adversarial Code": "def check_element(list,element):\n  check_element\\\n  #begin to write code\n", "Adversarial truth": "\n\ndef check_element(list,element):\n  check_element\\\n=all(v== element for v in list)\n  return check_element\n\n\n", "lang": "python", "code_str_generate": "def check_element(list,element):\n\n  '''\n  progame language:python\n  description:Write a function to check whether all items of a list are equal to a given string.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  check_element\\\n  #begin to write code\n", "prompt": "Write a function to check whether all items of a list are equal to a given string."}
{"task_id": 386, "Adversarial Code": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n", "Adversarial truth": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\n", "lang": "javascript", "code_str_generate": "function median_numbers(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of three specific numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n", "prompt": "Write a function to find the median of three specific numbers."}
{"task_id": 236, "Adversarial Code": "def lps(str):\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "Adversarial truth": "def lps(str): \n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\tif str[i] == str[j] and cl == 2: \n\t\t\t\tL[i][j] = 2\n\t\t\telif str[i] == str[j]: \n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\n\t\t\telse: \n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \n\n\n\treturn L[0][n-1]\n", "lang": "python", "code_str_generate": "def lps(str):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the longest palindromic subsequence in the given string.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tn = len(str) \n\tL = [[0 for x in range(n)] for x in range(n)] \n\tfor i in range(n): \n\t\tL[i][i] = 1\n\tfor cl in range(2, n+1): \n\t\tfor i in range(n-cl+1): \n\t\t\tj = i+cl-1\n\t\t\t#begin to write code\n", "prompt": "Write a function to find the longest palindromic subsequence in the given string."}
{"task_id": 97, "Adversarial Code": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        result.addAll(num2);\n        result.addAll(num3);\n        Collections.sort(result);\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n\n        /*\n        progame language:java\n        description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        //begin to write code\n", "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm."}
{"task_id": 495, "Adversarial Code": "function func_0(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                //begin to write code\n", "Adversarial truth": "function func_0(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n            }\n            if (j < k) {\n                P[i][j + 1] = 0;\n            }\n        }\n    }\n    return P[n][k];\n}\n\n", "lang": "javascript", "code_str_generate": "function func_0(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                //begin to write code\n", "prompt": "Write a function to calculate the permutation coefficient of given p(n, k)."}
{"task_id": 126, "Adversarial Code": "#include <iostream>\n#include <cassert>\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n//begin to write code\n", "prompt": "Write a function to find the ration of zeroes in an array of integers."}
{"task_id": 186, "Adversarial Code": "import java.beans.*;\nclass Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "Adversarial truth": "import java.beans.*;\nclass Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n        }\n        return res;\n    }\n}\n", "lang": "java", "code_str_generate": "import java.beans.*;\nclass Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the exponentiation of the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 77, "Adversarial Code": "class Solution {\n    public\n static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n\n\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n        }\n        return freqCount;\n\n\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static Map<Integer, Integer> freqCount(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to get the frequency of the elements in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 239, "Adversarial Code": "function count_X(tree, index) { \n    let result = 0;\n    for (let t of tree) { \n        if (t === index) { \n        //begin to write code\n", "Adversarial truth": "function count_X(tree, index) { \n    let result = 0;\n    for (let t of tree) { \n        if (t === index) { \n            result += 1;\n        }\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_X(tree, index) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    for (let t of tree) { \n        if (t === index) { \n        //begin to write code\n", "prompt": "Write a javascript function to count the occcurences of an element in a tuple."}
{"task_id": 275, "Adversarial Code": "def max_sub_array_sum_repeated(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\t#begin to write code\n", "Adversarial truth": "def max_sub_array_sum_repeated(a, n, k): \n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\tif (max_so_far < max_ending_here): \n\t\t\tmax_so_far = max_ending_here \n\t\tif (max_ending_here < 0): \n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "lang": "python", "code_str_generate": "def max_sub_array_sum_repeated(a, n, k):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k): \n\t\tmax_ending_here = max_ending_here + a[i%n] \n\t\t#begin to write code\n", "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times."}
{"task_id": 57, "Adversarial Code": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "Adversarial truth": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i + 1]) increasing = false;\n        if (A[i] < A[i + 1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\n\n\n", "lang": "cpp", "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n", "prompt": "Write a cpp function to check whether the given array is monotonic or not."}
{"task_id": 378, "Adversarial Code": "def find_lucas(n):\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n", "Adversarial truth": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "lang": "python", "code_str_generate": "def find_lucas(n):\n\n\t'''\n\tprogame language:python\n\tdescription:Write a function to find the n'th lucas number.\n\tyou must follow:\n\t1. Provide the complete code without any textual explanations and do not generate test scripts.\n\t2. Please strictly follow the specified format provided below for the code.\n\t3. Do not change the function names.\n\t4. The original code content must be fully included in the generated complete code, including all package import sections.\n\t5. For C++ language, do not generate the main function; I have my own main function available.\n\t6. Do not generate test cases.\n\t'''\n\n\tif (n == 0): \n\t\treturn 2\n\t\t#begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 448, "Adversarial Code": "function remove_uppercase(var_0) {\n//begin to write code\n", "Adversarial truth": "function remove_uppercase(var_0) {\n    return var_0.replace(/[A-Z]/g, '');\n}\n\n", "lang": "javascript", "code_str_generate": "function remove_uppercase(var_0) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n", "prompt": "Write a function to remove uppercase substrings from a given string by using regex."}
{"task_id": 491, "Adversarial Code": "function find(n, m) {\n    let r = n % m;\n    //begin to write code\n", "Adversarial truth": "function find(n, m) {\n    let r = n % m;\n    return r;\n}\n\n", "lang": "javascript", "code_str_generate": "function find(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let r = n % m;\n    //begin to write code\n", "prompt": "Write a javascript function to find remainder of two numbers."}
{"task_id": 191, "Adversarial Code": "class Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n\n\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static String removeEven(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove even characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n", "prompt": "Write a function to remove even characters in a string."}
{"task_id": 108, "Adversarial Code": "function search(a, b) {\n    let result = 0;\n    for (let j = 0; j < b; j++) {\n    //begin to write code\n", "Adversarial truth": "function search(a, b) {\n    let result = 0;\n    for (let j = 0; j < b; j++) {\n        result = result ^ a[j];\n    }\n    return result;\n}\n\n", "lang": "javascript", "code_str_generate": "function search(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    for (let j = 0; j < b; j++) {\n    //begin to write code\n", "prompt": "Write a javascript function to find the element that appears only once in a sorted array."}
{"task_id": 77, "Adversarial Code": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "Adversarial truth": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n    return freqCount;\n}\n\n", "lang": "javascript", "code_str_generate": "function freqCount(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n", "prompt": "Write a function to get the frequency of the elements in a list."}
{"task_id": 465, "Adversarial Code": "function big_sum(nums) {\n    let\n    //begin to write code\n", "Adversarial truth": "function big_sum(nums) {\n    let\n sum = Math.max(...nums) + Math.min(...nums);\n\n\n    return sum;\n}\n\n", "lang": "javascript", "code_str_generate": "function big_sum(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of the largest and smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let\n    //begin to write code\n", "prompt": "Write a javascript function to find the sum of the largest and smallest value in a given array."}
{"task_id": 134, "Adversarial Code": "def max_Abs_Diff(arr,n):\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n", "Adversarial truth": "def max_Abs_Diff(arr,n): \n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n        minEle = min(minEle,arr[i]) \n        maxEle = max(maxEle,arr[i]) \n    return (maxEle - minEle) ", "lang": "python", "code_str_generate": "def max_Abs_Diff(arr,n):\n\n    '''\n    progame language:python\n    description:Write a python function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    minEle = arr[0] \n    maxEle = arr[0] \n    for i in range(1, n): \n    #begin to write code\n", "prompt": "Write a python function to find the maximum difference between any two elements in a given array."}
{"task_id": 450, "Adversarial Code": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n        }\n        return upperCtr;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int upperCtr(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the upper case characters in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n", "prompt": "Write a java function to count the upper case characters in a given string."}
{"task_id": 444, "Adversarial Code": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "Adversarial truth": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n", "lang": "javascript", "code_str_generate": "function check_monthnumb_number(monthnum2) {\n\n  /*\n  progame language:javascript\n  description:Write a function to check whether the given month number contains 31 days or not.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  */\n\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 206, "Adversarial Code": "class Solution {\n    public char first_Repeated_Char(String str) {\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public char first_Repeated_Char(String str) {\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n\n\n                h.put(ch, 0);\n            }\n        }\n        return '\\0';\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public char first_Repeated_Char(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first repeated character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n            //begin to write code\n", "prompt": "Write a java function to find the first repeated character in a given string."}
{"task_id": 173, "Adversarial Code": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool func_0(const std::vector<int>& var_0, int var_1) {\n    for (int var_2 : var_0) {\n        if (var_2 < var_1) return false;\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool func_0(const std::vector<int>& var_0, int var_1) {\n    for (int var_2 : var_0) {\n        if (var_2 < var_1) return false;\n    }\n    return true;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool func_0(const std::vector<int>& var_0, int var_1) {\n    for (int var_2 : var_0) {\n        if (var_2 < var_1) return false;\n//begin to write code\n", "prompt": "Write a function to find all the values in a list that are greater than a specified number."}
{"task_id": 75, "Adversarial Code": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find nth centered hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n", "prompt": "Write a function to find nth centered hexagonal number."}
{"task_id": 159, "Adversarial Code": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i = 1 + i) {\n            sumRange = sumRange + (list1[i]);\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i = 1 + i) {\n            sumRange = sumRange + (list1[i]);\n        }\n        return sumRange;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumRange = 0;\n        for (int i = m; i <= n; i = 1 + i) {\n            sumRange = sumRange + (list1[i]);\n            //begin to write code\n", "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range."}
{"task_id": 252, "Adversarial Code": "const http = require('http');\nfunction merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n", "Adversarial truth": "const http = require('http');\nfunction merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    sortedKeys.forEach(key => {\n    sortedDict[key] = d[key];\n    });\n    return sortedDict;\n//This is a comment line.\n}", "lang": "javascript", "code_str_generate": "const http = require('http');\nfunction merge_dict(d1, d2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge two dictionaries.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n", "prompt": "Write a function to merge two dictionaries."}
{"task_id": 108, "Adversarial Code": "def search(self,i) :\n    result = 0\n    for k in range(i) :\n    #begin to write code\n", "Adversarial truth": "def search(self,i) :\n    result = 0\n    for k in range(i) :\n        result = result ^ self[k]\n    return (result)", "lang": "python", "code_str_generate": "def search(self,i) :\n\n    '''\n    progame language:python\n    description:Write a python function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result = 0\n    for k in range(i) :\n    #begin to write code\n", "prompt": "Write a python function to find the element that appears only once in a sorted array."}
{"task_id": 266, "Adversarial Code": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "Adversarial truth": "def dict_filter(dict,n):\n result = {key:value for (key, value) in dict.items() if value >=n}\n return result", "lang": "python", "code_str_generate": "def dict_filter(dict,n):\n\n '''\n progame language:python\n description:Write a function to filter a dictionary based on values.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n '''\n\n result = {key:value for (key, value) in dict.items() if value >=n}\n #begin to write code\n", "prompt": "Write a function to filter a dictionary based on values."}
{"task_id": 171, "Adversarial Code": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            final char var_4 = ',';\n            final char var_5 = '.';\n            final char var_6 = '!';\n            final char var_7 = '?';\n            final char var_0 = var_4 ;\n            final char var_1 = var_5 ;\n            final char var_2 = var_6 ;\n            final char var_3 = var_7 ;\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n                //begin to write code\n", "Adversarial truth": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n\n        for (char c : string.toCharArray()) {\n            final char var_4 = ',';\n            final char var_5 = '.';\n            final char var_6 = '!';\n            final char var_7 = '?';\n            final char var_0 = var_4 ;\n            final char var_1 = var_5 ;\n            final char var_2 = var_6 ;\n            final char var_3 = var_7 ;\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n            } else if (c == var_0  || c == var_1  || c == var_2  || c == var_3 ) {\n                specialCharacters.add(c);\n            }\n        }\n\n        List<List<Character>> result = new ArrayList<>();\n        result.add(uppercaseCharacters);\n        result.add(lowercaseCharacters);\n        result.add(numericalCharacters);\n        result.add(specialCharacters);\n\n        return result;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            final char var_4 = ',';\n            final char var_5 = '.';\n            final char var_6 = '!';\n            final char var_7 = '?';\n            final char var_0 = var_4 ;\n            final char var_1 = var_5 ;\n            final char var_2 = var_6 ;\n            final char var_3 = var_7 ;\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n                //begin to write code\n", "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex."}
{"task_id": 200, "Adversarial Code": "function count_Num(n) {\n    if (n === 1) {\n        return 1;\n        //begin to write code\n", "Adversarial truth": "function count_Num(n) {\n    if (n === 1) {\n        return 1;\n    }\n    let count = Math.pow(2, n - 2);\n    return count;\n}\n\n", "lang": "javascript", "code_str_generate": "function count_Num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count numbers whose oth and nth bits are set.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 1) {\n        return 1;\n        //begin to write code\n", "prompt": "Write a javascript function to count numbers whose oth and nth bits are set."}
{"task_id": 444, "Adversarial Code": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n        if(1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2){\n            return true;\n        } else {\n        //begin to write code\n", "Adversarial truth": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n        if(1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month number contains 31 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if(1 == monthnum2 || 3 == monthnum2 || 5 == monthnum2 || 7 == monthnum2 || 8 == monthnum2 || 10 == monthnum2 || 12 == monthnum2){\n            return true;\n        } else {\n        //begin to write code\n", "prompt": "Write a function to check whether the given month number contains 31 days or not."}
{"task_id": 141, "Adversarial Code": "function merge(var_0, var_1) {\n    let var_2 = [];\n    while (var_0.length !== 0 && var_1.length !== 0) {\n        if (var_0[0] < var_1[0]) {\n            var_2.push(var_0[0]);\n            var_0.shift();\n        } else {\n            var_2.push(var_1[0]);\n            var_1.shift();\n        }\n    }\n    if (var_0.length === 0) {\n        var_2 = var_2.concat(var_1);\n    } else {\n    //begin to write code\n", "Adversarial truth": "function merge(var_0, var_1) {\n    let var_2 = [];\n    while (var_0.length !== 0 && var_1.length !== 0) {\n        if (var_0[0] < var_1[0]) {\n            var_2.push(var_0[0]);\n            var_0.shift();\n        } else {\n            var_2.push(var_1[0]);\n            var_1.shift();\n        }\n    }\n    if (var_0.length === 0) {\n        var_2 = var_2.concat(var_1);\n    } else {\n        var_2 = var_2.concat(var_0);\n    }\n    return var_2;\n}\n\nfunction merge_sort(var_4) {\n    if (var_4.length === 0 || var_4.length === 1) {\n        return var_4;\n    } else {\n        const var_3 = Math.floor(var_4.length / 2);\n        const var_0 = merge_sort(var_4.slice(0, var_3));\n        const var_1 = merge_sort(var_4.slice(var_3));\n        return merge(var_0, var_1);\n    }\n}\n\n", "lang": "javascript", "code_str_generate": "function merge(var_0, var_1) {\n    let var_2 = [];\n    while (var_0.length !== 0 && var_1.length !== 0) {\n        if (var_0[0] < var_1[0]) {\n            var_2.push(var_0[0]);\n            var_0.shift();\n        } else {\n            var_2.push(var_1[0]);\n            var_1.shift();\n        }\n    }\n    if (var_0.length === 0) {\n        var_2 = var_2.concat(var_1);\n    } else {\n    //begin to write code\n", "prompt": "Write a function to sort the given array by using merge sort."}
{"task_id": 258, "Adversarial Code": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = 0;\n        while(i < n){\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = 0;\n        while(i < n){\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n            i += 2;\n        }\n    }\n    return sum;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    {\n        int i = 0;\n        while(i < n){\n        if (arr[i] % 2 == 0) {\n//begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 484, "Adversarial Code": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "Adversarial truth": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n", "prompt": "Write a function to remove lowercase substrings from a given string by using regex."}
{"task_id": 51, "Adversarial Code": "def minimum(xs):\n    #begin to write code\n", "Adversarial truth": "def minimum(xs):\n  return min(xs)\n", "lang": "python", "code_str_generate": "def minimum(xs):\n\n    '''\n    progame language:python\n    description:Write a python function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    #begin to write code\n", "prompt": "Write a python function to find smallest number in a list."}
{"task_id": 186, "Adversarial Code": "def find_exponentio(test_tup1, test_tup2):\n  res\\\n  #begin to write code\n", "Adversarial truth": "def find_exponentio(test_tup1, test_tup2):\n  res\\\n = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return (res)\n\n", "lang": "python", "code_str_generate": "def find_exponentio(test_tup1, test_tup2):\n\n  '''\n  progame language:python\n  description:Write a function to perform the exponentiation of the given two tuples.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  res\\\n  #begin to write code\n", "prompt": "Write a function to perform the exponentiation of the given two tuples."}
{"task_id": 258, "Adversarial Code": "function\n ascii_value(k) {\n //begin to write code\n", "Adversarial truth": "function\n ascii_value(k) {\n  return k.charCodeAt(0);\n}\n\n\n\n\n", "lang": "javascript", "code_str_generate": "function\n ascii_value(k) {\n\n /*\n progame language:javascript\n description:Write a function to find the ascii value of a character.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "Write a function to find the ascii value of a character."}
{"task_id": 419, "Adversarial Code": "def parabola_directrix(a, b, c):\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n", "Adversarial truth": "def parabola_directrix(a, b, c): \n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  return directrix", "lang": "python", "code_str_generate": "def parabola_directrix(a, b, c):\n\n  '''\n  progame language:python\n  description:Write a function to find the directrix of a parabola.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\n  #begin to write code\n", "prompt": "Write a function to find the directrix of a parabola."}
{"task_id": 107, "Adversarial Code": "class Solution {\n    public\n static List<String> stringToList(String str) {\n //begin to write code\n", "Adversarial truth": "class Solution {\n    public\n static List<String> stringToList(String str) {\n        return Arrays.asList(str.split(\" \"));\n    }\n}\n\n\n", "lang": "java", "code_str_generate": "class Solution {\n    public\n static List<String> stringToList(String str) {\n\n /*\n progame language:java\n description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n you must follow:\n 1. Provide the complete code without any textual explanations and do not generate test scripts.\n 2. Please strictly follow the specified format provided below for the code.\n 3. Do not change the function names.\n 4. The original code content must be fully included in the generated complete code, including all package import sections.\n 5. For C++ language, do not generate the main function; I have my own main function available.\n 6. Do not generate test cases.\n */\n\n //begin to write code\n", "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list."}
{"task_id": 176, "Adversarial Code": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (0 == m || 0 == n) {\n        return 0;\n    } else if (Y[n-1] == X[m-1]) {\n//begin to write code\n", "Adversarial truth": "\n#include <iostream>\n#include <cassert>\nusing namespace std;\n\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (0 == m || 0 == n) {\n        return 0;\n    } else if (Y[n-1] == X[m-1]) {\n        return longest_common_subsequence(X, Y, m-1, n-1) + 1;\n    } else {\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));\n    }\n}\n\n\n", "lang": "cpp", "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (0 == m || 0 == n) {\n        return 0;\n    } else if (Y[n-1] == X[m-1]) {\n//begin to write code\n", "prompt": "Write a function to find the longest common subsequence for the given two sequences."}
{"task_id": 265, "Adversarial Code": "def volume_cylinder(i,h):\n  volume=3.1415*i*i*h\n  #begin to write code\n", "Adversarial truth": "def volume_cylinder(i,h):\n  volume=3.1415*i*i*h\n  return volume", "lang": "python", "code_str_generate": "def volume_cylinder(i,h):\n\n  '''\n  progame language:python\n  description:Write a function to find the volume of a cylinder.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  volume=3.1415*i*i*h\n  #begin to write code\n", "prompt": "Write a function to find the volume of a cylinder."}
{"task_id": 218, "Adversarial Code": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "Adversarial truth": "def re_arrange_array(arr, n):\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      arr[i] = arr[j]\n      arr[j] = temp\n      j = j + 1\n  return arr", "lang": "python", "code_str_generate": "def re_arrange_array(arr, n):\n\n  '''\n  progame language:python\n  description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n  you must follow:\n  1. Provide the complete code without any textual explanations and do not generate test scripts.\n  2. Please strictly follow the specified format provided below for the code.\n  3. Do not change the function names.\n  4. The original code content must be fully included in the generated complete code, including all package import sections.\n  5. For C++ language, do not generate the main function; I have my own main function available.\n  6. Do not generate test cases.\n  '''\n\n  j=0\n  for i in range(0, n):\n    if (arr[i] < 0):\n      temp = arr[i]\n      #begin to write code\n", "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones."}
{"task_id": 351, "Adversarial Code": "function func_0(nums) {\n    let max_vzl = 0;\n    let rehulg = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(c => c === i).length;\n        if (occu > max_vzl) {\n        //begin to write code\n", "Adversarial truth": "function func_0(nums) {\n    let max_vzl = 0;\n    let rehulg = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(c => c === i).length;\n        if (occu > max_vzl) {\n            max_vzl = occu;\n            rehulg = i;\n        }\n    }\n\n    return rehulg;\n}", "lang": "javascript", "code_str_generate": "function func_0(nums) {\n    let max_vzl = 0;\n    let rehulg = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(c => c === i).length;\n        if (occu > max_vzl) {\n        //begin to write code\n", "prompt": "Write a javascript function to find the item with maximum occurrences in a given list."}
{"task_id": 478, "Adversarial Code": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n", "Adversarial truth": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] === mn) {\n            freq += 1;\n        }\n    }\n    return freq;\n}\n\n", "lang": "javascript", "code_str_generate": "function frequency_Of_Largest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n", "prompt": "Write a javascript function to find the frequency of the largest value in a given array."}
{"task_id": 334, "Adversarial Code": "class Solution {\n    public List<Integer> func_0(List<Integer> solution) {\n        List<Integer> diff = new ArrayList<>();\n        for (int m = 1; m < solution.size(); m++) {\n            diff.add(solution.get(m) - solution.get(m - 1));\n            //begin to write code\n", "Adversarial truth": "class Solution {\n    public List<Integer> func_0(List<Integer> solution) {\n        List<Integer> diff = new ArrayList<>();\n        for (int m = 1; m < solution.size(); m++) {\n            diff.add(solution.get(m) - solution.get(m - 1));\n        }\n        return diff;\n    }\n}\n", "lang": "java", "code_str_generate": "class Solution {\n    public List<Integer> func_0(List<Integer> solution) {\n        List<Integer> diff = new ArrayList<>();\n        for (int m = 1; m < solution.size(); m++) {\n            diff.add(solution.get(m) - solution.get(m - 1));\n            //begin to write code\n", "prompt": "Write a function to find the difference between two consecutive numbers in a given list."}
{"task_id": 378, "Adversarial Code": "function find_lucas(m) {\n    if (m === 0) {\n        return 2;\n    }\n    //begin to write code\n", "Adversarial truth": "function find_lucas(m) {\n    if (m === 0) {\n        return 2;\n    }\n    if (m === 1) {\n        return 1;\n    }\n    return find_lucas(m - 1) + find_lucas(m - 2);\n}\n\n", "lang": "javascript", "code_str_generate": "function find_lucas(m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m === 0) {\n        return 2;\n    }\n    //begin to write code\n", "prompt": "Write a function to find the n'th lucas number."}
{"task_id": 492, "Adversarial Code": "def add_consecutive_nums(nums):\n    result\\\n    #begin to write code\n", "Adversarial truth": "def add_consecutive_nums(nums):\n    result\\\n = [b+a for a, b in zip(nums[:-1], nums[1:])]\n\n\n    return result", "lang": "python", "code_str_generate": "def add_consecutive_nums(nums):\n\n    '''\n    progame language:python\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    '''\n\n    result\\\n    #begin to write code\n", "prompt": "Write a function to add consecutive numbers of a given list."}
