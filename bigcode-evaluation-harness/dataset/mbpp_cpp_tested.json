[
    {
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nstd::string remove_Occ(std::string s, char ch) {\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ch) {\n            s = s.substr(0, i) + s.substr(i + 1);\n            break;\n        }\n    }\n    for (int i = s.length() - 1; i >= 0; i--) {\n        if (s[i] == ch) {\n            s = s.substr(0, i) + s.substr(i + 1);\n            break;\n        }\n    }\n    return s;\n}\n\n\n",
        "test": "int main() {\n    assert(remove_Occ(\"hello\", 'l') == \"heo\");\n    assert(remove_Occ(\"abcda\", 'a') == \"bcd\");\n    assert(remove_Occ(\"PHP\", 'P') == \"H\");\n    assert(remove_Occ(\"hellolloll\", 'l') == \"helollol\");\n    assert(remove_Occ(\"\", 'l') == \"\");\n\n    // All tests passed\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nstd::string remove_Occ(std::string s, char ch) {\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ch) {\n            s = s.substr(0, i) + s.substr(i + 1);\n            break;\n        }\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to remove first and last occurrence of a given character from the string.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nstd::string remove_Occ(std::string s, char ch) {\n    for (int i = 0; i < s.length(); i++) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        if (s[i] == ch) {\n            s = s.substr(0, i) + s.substr(i + 1);\n            break;\n        }\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_Occ(\"hello\", 'l') == \"heo\");\n    assert(remove_Occ(\"abcda\", 'a') == \"bcd\");\n    assert(remove_Occ(\"PHP\", 'P') == \"H\");\n    assert(remove_Occ(\"hellolloll\", 'l') == \"helollol\");\n    assert(remove_Occ(\"\", 'l') == \"\");\n\n    // All tests passed\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nstd::string remove_Occ(std::string s, char ch) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove first and last occurrence of a given character from the string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ch) {\n            s = s.substr(0, i) + s.substr(i + 1);\n            break;\n        }\n    }\n//begin to write code\n"
    },
    {
        "task_id": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\n\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n    });\n    return M;\n}\n\n\n",
        "test": "int main()\n{\n    assert((sort_matrix({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}) == vector<vector<int>>{{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}));\n    assert((sort_matrix({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}) == vector<vector<int>>{{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}));\n    assert((sort_matrix({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}) == vector<vector<int>>{{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((sort_matrix({{1, 2, 3}, {2, 4, 5}, {1, 1, 1}}) == vector<vector<int>>{{1, 1, 1}, {1, 2, 3}, {2, 4, 5}}));\n    assert((sort_matrix({{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}}) == vector<vector<int>>{{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}}));\n    assert((sort_matrix({{5, 8, 9}, {6, 4, 3}, {2, 1, 4}}) == vector<vector<int>>{{2, 1, 4}, {6, 4, 3}, {5, 8, 9}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <numeric>\nusing namespace std;\nvector<vector<int>> sort_matrix(vector<vector<int>> M) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(M.begin(), M.end(), [](const vector<int>& a, const vector<int>& b) {\n        return accumulate(a.begin(), a.end(), 0) < accumulate(b.begin(), b.end(), 0);\n//begin to write code\n"
    },
    {
        "task_id": 13,
        "prompt": "Write a function to count the most common words in a dictionary.",
        "code_str": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\n\nvector<pair<string, int>> count_common(const vector<string>& words) {\n    map<string, int> word_counts;\n    for (const auto& word : words) {\n        word_counts[word]++;\n    }\n\n    vector<pair<string, int>> sorted_counts(word_counts.begin(), word_counts.end());\n    sort(sorted_counts.begin(), sorted_counts.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second > b.second || (a.second == b.second && a.first > b.first);\n    });\n\n    if (sorted_counts.size() > 4) {\n        sorted_counts.resize(4);\n    }\n    return sorted_counts;\n}",
        "test": "int main()\n    {    \n        assert((count_common({\"red\",\"green\",\"black\",\"pink\",\"black\",\"white\",\"black\",\"eyes\",\"white\",\"black\",\"orange\",\"pink\",\"pink\",\"red\",\"red\",\"white\",\"orange\",\"white\",\"black\",\"pink\",\"green\",\"green\",\"pink\",\"green\",\"pink\",\"white\",\"orange\",\"orange\",\"red\"}) == vector<pair<string, int>>({{\"pink\", 6}, {\"white\", 5}, {\"black\", 5}, {\"red\", 4}}))); \n        assert((count_common({\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"}) == vector<pair<string, int>>({{\"one\", 4}, {\"two\", 2}, {\"three\", 2}, {\"four\", 1}})));\n        assert((count_common({\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"}) == vector<pair<string, int>>({{\"Netflix\", 2}, {\"Apple\", 2}, {\"Amazon\", 2}, {\"Google\", 1}})));\n    }",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<pair<string, int>> count_common(const vector<string>& words) {\n    map<string, int> word_counts;\n    for (const auto& word : words) {\n        word_counts[word]++;\n    }\n    vector<pair<string, int>> sorted_counts(word_counts.begin(), word_counts.end());\n    sort(sorted_counts.begin(), sorted_counts.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count the most common words in a dictionary.",
        "perturbated_codes": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<pair<string, int>> count_common(const vector<string>& words) {\n    map<string, int> word_counts;\n    for (const auto& word : words) {\n        word_counts[word]++;\n        double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n    }\n    vector<pair<string, int>> sorted_counts(word_counts.begin(), word_counts.end());\n    sort(sorted_counts.begin(), sorted_counts.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code",
        "perturbated_cases": "int main()\n    {    \n        assert((count_common({\"red\",\"green\",\"black\",\"pink\",\"black\",\"white\",\"black\",\"eyes\",\"white\",\"black\",\"orange\",\"pink\",\"pink\",\"red\",\"red\",\"white\",\"orange\",\"white\",\"black\",\"pink\",\"green\",\"green\",\"pink\",\"green\",\"pink\",\"white\",\"orange\",\"orange\",\"red\"}) == vector<pair<string, int>>({{\"pink\", 6}, {\"white\", 5}, {\"black\", 5}, {\"red\", 4}}))); \n        assert((count_common({\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"}) == vector<pair<string, int>>({{\"one\", 4}, {\"two\", 2}, {\"three\", 2}, {\"four\", 1}})));\n        assert((count_common({\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"}) == vector<pair<string, int>>({{\"Netflix\", 2}, {\"Apple\", 2}, {\"Amazon\", 2}, {\"Google\", 1}})));\n    }",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<pair<string, int>> count_common(const vector<string>& words) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the most common words in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, int> word_counts;\n    for (const auto& word : words) {\n        word_counts[word]++;\n    }\n    vector<pair<string, int>> sorted_counts(word_counts.begin(), word_counts.end());\n    sort(sorted_counts.begin(), sorted_counts.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n"
    },
    {
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint find_Volume(int l, int b, int h) {\n    return ((l * b * h) / 2);\n}\n\n\n",
        "test": "int main() {\n    assert(find_Volume(10, 8, 6) == 240);\n    assert(find_Volume(3, 2, 2) == 6);\n    assert(find_Volume(1, 2, 1) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint find_Volume(int l, int b, int h) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the volume of a triangular prism.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint find_Volume(int l, int b, int h) {\ndouble temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_Volume(10, 8, 6) == 240);\n    assert(find_Volume(3, 2, 2) == 6);\n    assert(find_Volume(1, 2, 1) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint find_Volume(int l, int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the volume of a triangular prism.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 15,
        "prompt": "Write a function to split a string at lowercase letters.",
        "code_str": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> split_lowerstring(const string& text) {\n    vector<string> result;\n    size_t len = text.length();\n    size_t i = 0;\n\n    while (i < len) {\n\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            size_t start = i;\n            i++;\n\n            while (i < len && (text[i] < 'a' || text[i] > 'z')) {\n                i++;\n            }\n            result.push_back(text.substr(start, i - start));\n        } else {\n            i++;\n        }\n    }\n\n    return result;\n}",
        "test": "int main()\n{\n    assert((split_lowerstring(\"AbCd\") == vector<string>{\"bC\",\"d\"}));\n    assert((split_lowerstring(\"Python\") == vector<string>{\"y\", \"t\", \"h\", \"o\", \"n\"}));\n    assert((split_lowerstring(\"Programming\") == vector<string>{\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"}));\n}    ",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> split_lowerstring(const string& text) {\n    vector<string> result;\n    size_t len = text.length();\n    size_t i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            size_t start = i;\n            i++;\n            while (i < len && (text[i] < 'a' || text[i] > 'z')) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to split a string at lowercase letters.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> split_lowerstring(const string& text) {\n    vector<string> result;\n    size_t len = text.length();\n    size_t i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            size_t start = i;\n            i++;\n            while (i < len && (text[i] < 'a' || text[i] > 'z')) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((split_lowerstring(\"AbCd\") == vector<string>{\"bC\",\"d\"}));\n    assert((split_lowerstring(\"Python\") == vector<string>{\"y\", \"t\", \"h\", \"o\", \"n\"}));\n    assert((split_lowerstring(\"Programming\") == vector<string>{\"r\", \"o\", \"g\", \"r\", \"a\", \"m\", \"m\", \"i\", \"n\", \"g\"}));\n}    ",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> split_lowerstring(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a string at lowercase letters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<string> result;\n    size_t len = text.length();\n    size_t i = 0;\n    while (i < len) {\n        if (text[i] >= 'a' && text[i] <= 'z') {\n            size_t start = i;\n            i++;\n            while (i < len && (text[i] < 'a' || text[i] > 'z')) {\n//begin to write code\n"
    },
    {
        "task_id": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code_str": "#include<iostream>\n    \n#include <string>\n#include <cassert>\nusing namespace std;\n\nstring text_lowercase_underscore(string text) {\n    \n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n\n    size_t underscore_pos = text.find('_');\n    if (underscore_pos == std::string::npos) {\n        return \"Not matched!\";\n    }\n\n    if (underscore_pos == 0 || underscore_pos == text.length() - 1) {\n        return \"Not matched!\";\n    }\n\n    for (size_t i = 0; i < text.length(); ++i) {\n        if (i == underscore_pos) {\n            continue;\n        }\n        if (text[i] < 'a' || text[i] > 'z') {\n            return \"Not matched!\";\n        }\n    }\n\n    return \"Found a match!\";\n\n}",
        "test": "int main() {\n    assert(text_lowercase_underscore(\"aab_cbbbc\") == \"Found a match!\");\n    assert(text_lowercase_underscore(\"aab_Abbbc\") == \"Not matched!\");\n    assert(text_lowercase_underscore(\"Aaab_abbbc\") == \"Not matched!\");\n    assert(text_lowercase_underscore(\"aab-cbbbc\") == \"Not matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring text_lowercase_underscore(string text) {\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    size_t underscore_pos = text.find('_');\n    if (underscore_pos == std::string::npos) {\n        return \"Not matched!\";\n    }\n    if (underscore_pos == 0 || underscore_pos == text.length() - 1) {\n        return \"Not matched!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring text_lowercase_underscore(string text) {\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    size_t underscore_pos = text.find('_');\n    if (underscore_pos == std::string::npos) {\n        return \"Not matched!\";\n    }\n    if (underscore_pos == 0 || underscore_pos == text.length() - 1) {\n        return \"Not matched!\";\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(text_lowercase_underscore(\"aab_cbbbc\") == \"Found a match!\");\n    assert(text_lowercase_underscore(\"aab_Abbbc\") == \"Not matched!\");\n    assert(text_lowercase_underscore(\"Aaab_abbbc\") == \"Not matched!\");\n    assert(text_lowercase_underscore(\"aab-cbbbc\") == \"Not matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring text_lowercase_underscore(string text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sequences of lowercase letters joined with an underscore.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    size_t underscore_pos = text.find('_');\n    if (underscore_pos == std::string::npos) {\n        return \"Not matched!\";\n    }\n    if (underscore_pos == 0 || underscore_pos == text.length() - 1) {\n        return \"Not matched!\";\n//begin to write code\n"
    },
    {
        "task_id": 17,
        "prompt": "Write a function to find the perimeter of a square.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint square_perimeter(int a) {\n    int perimeter = 4 * a;\n    return perimeter;\n}\n\n\n",
        "test": "int main() {\n    assert(square_perimeter(10) == 40);\n    assert(square_perimeter(5) == 20);\n    assert(square_perimeter(4) == 16);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint square_perimeter(int a) {\n    int perimeter = 4 * a;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the perimeter of a square.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint square_perimeter(int a) {\n    int perimeter = 4 * a;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(square_perimeter(10) == 40);\n    assert(square_perimeter(5) == 20);\n    assert(square_perimeter(4) == 16);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint square_perimeter(int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 4 * a;\n//begin to write code\n"
    },
    {
        "task_id": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nconst int NO_OF_CHARS = 256;\n\nvector<char> str_to_list(const string& str) {\n    vector<char> temp;\n    for (char x : str) {\n        temp.push_back(x);\n    }\n    return temp;\n}\n\nstring lst_to_string(const vector<char>& List) {\n    return string(List.begin(), List.end());\n}\n\nvector<int> get_char_count_array(const string& str) {\n    vector<int> count(NO_OF_CHARS, 0);\n    for (char c : str) {\n        count[c]++;\n    }\n    return count;\n}\n\nstring remove_dirty_chars(const string& str, const string& filter_str) {\n    vector<int> count = get_char_count_array(filter_str);\n    int ip_ind = 0, res_ind = 0;\n    vector<char> str_list = str_to_list(str);\n    while (ip_ind != str_list.size()) {\n        char temp = str_list[ip_ind];\n        if (count[temp] == 0) {\n            str_list[res_ind] = str_list[ip_ind];\n            res_ind++;\n        }\n        ip_ind++;\n    }\n    return lst_to_string(vector<char>(str_list.begin(), str_list.begin() + res_ind));\n}\n\n\n",
        "test": "int main()\n{\n    assert(remove_dirty_chars(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(remove_dirty_chars(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(remove_dirty_chars(\"exoticmiles\", \"toxic\") == \"emles\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nconst int NO_OF_CHARS = 256;\nvector<char> str_to_list(const string& str) {\n    vector<char> temp;\n    for (char x : str) {\n        temp.push_back(x);\n    }\n    return temp;\n}\nstring lst_to_string(const vector<char>& List) {\n    return string(List.begin(), List.end());\n}\nvector<int> get_char_count_array(const string& str) {\n    vector<int> count(NO_OF_CHARS, 0);\n    for (char c : str) {\n        count[c]++;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nconst int NO_OF_CHARS = 256;\nvector<char> str_to_list(const string& str) {\n    vector<char> temp;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    for (char x : str) {\n        temp.push_back(x);\n    }\n    return temp;\n}\nstring lst_to_string(const vector<char>& List) {\n    return string(List.begin(), List.end());\n}\nvector<int> get_char_count_array(const string& str) {\n    vector<int> count(NO_OF_CHARS, 0);\n    for (char c : str) {\n        count[c]++;\n    }\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(remove_dirty_chars(\"probasscurve\", \"pros\") == \"bacuve\");\n    assert(remove_dirty_chars(\"digitalindia\", \"talent\") == \"digiidi\");\n    assert(remove_dirty_chars(\"exoticmiles\", \"toxic\") == \"emles\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nconst int NO_OF_CHARS = 256;\nvector<char> str_to_list(const string& str) {\n    vector<char> temp;\n    for (char x : str) {\n        temp.push_back(x);\n    }\n    return temp;\n}\nstring lst_to_string(const vector<char>& List) {\n    return string(List.begin(), List.end());\n}\nvector<int> get_char_count_array(const string& str) {\n    vector<int> count(NO_OF_CHARS, 0);\n    for (char c : str) {\n        count[c]++;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    return arraynums.size() != nums_set.size();\n}\n\n\n",
        "test": "int main() {\n    assert(test_duplicate({1, 2, 3, 4, 5}) == false);\n    assert(test_duplicate({1, 2, 3, 4, 4}) == true);\n    assert(test_duplicate({1, 1, 2, 2, 3, 3, 4, 4, 5}) == true);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n",
        "cpp_prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(test_duplicate({1, 2, 3, 4, 5}) == false);\n    assert(test_duplicate({1, 2, 3, 4, 4}) == true);\n    assert(test_duplicate({1, 1, 2, 2, 3, 3, 4, 4, 5}) == true);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_duplicate(std::vector<int> arraynums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> nums_set(arraynums.begin(), arraynums.end());    \n//begin to write code\n"
    },
    {
        "task_id": 20,
        "prompt": "Write a function to check if the given number is woodball or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool is_woodall(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n    while (x % 2 == 0) {\n        x = x / 2;\n        p = p + 1;\n        if (p == x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(is_woodall(383) == true);\n    assert(is_woodall(254) == false);\n    assert(is_woodall(200) == false);\n\n    assert(is_woodall(32212254719) == true);\n    assert(is_woodall(32212254718) == false);\n    assert(is_woodall(159) == true);\n    \n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if the given number is woodball or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n    if (x % 2 == 0) {\n        return false;\n    }\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_woodall(383) == true);\n    assert(is_woodall(254) == false);\n    assert(is_woodall(200) == false);\n\n    assert(is_woodall(32212254719) == true);\n    assert(is_woodall(32212254718) == false);\n    assert(is_woodall(159) == true);\n    \n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_woodall(long long x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x % 2 == 0) {\n        return false;\n    }\n    if (x == 1) {\n        return true;\n    }\n    x = x + 1;\n    long long p = 0;\n//begin to write code\n"
    },
    {
        "task_id": 21,
        "prompt": "Write a function to find m number of multiples of n.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n        multiples.push_back(n * i);\n    }\n    return multiples;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    std::vector<int> result1 = multiples_of_num(4, 3);\n    assert((result1 == std::vector<int>{3, 6, 9, 12}));\n\n    std::vector<int> result2 = multiples_of_num(2, 5);\n    assert((result2 == std::vector<int>{5, 10}));\n\n    std::vector<int> result3 = multiples_of_num(9, 2);\n    assert((result3 == std::vector<int>{2, 4, 6, 8, 10, 12, 14, 16, 18}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find m number of multiples of n.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n    double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    std::vector<int> result1 = multiples_of_num(4, 3);\n    assert((result1 == std::vector<int>{3, 6, 9, 12}));\n\n    std::vector<int> result2 = multiples_of_num(2, 5);\n    assert((result2 == std::vector<int>{5, 10}));\n\n    std::vector<int> result3 = multiples_of_num(9, 2);\n    assert((result3 == std::vector<int>{2, 4, 6, 8, 10, 12, 14, 16, 18}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> multiples_of_num(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> multiples;\n    for (int i = 1; i <= m; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nint find_first_duplicate(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n        } else {\n            num_set.insert(num);\n        }\n    }\n    return no_duplicate;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> vect1 = {1, 2, 3, 4, 4, 5};\n    assert(find_first_duplicate(vect1) == 4);\n\n    std::vector<int> vect2 = {1, 2, 3, 4};\n    assert(find_first_duplicate(vect2) == -1);\n\n    std::vector<int> vect3 = {1, 1, 2, 3, 3, 2, 2};\n    assert(find_first_duplicate(vect3) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint find_first_duplicate(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint find_first_duplicate(std::vector<int>& nums) {\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n            double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> vect1 = {1, 2, 3, 4, 4, 5};\n    assert(find_first_duplicate(vect1) == 4);\n\n    std::vector<int> vect2 = {1, 2, 3, 4};\n    assert(find_first_duplicate(vect2) == -1);\n\n    std::vector<int> vect3 = {1, 1, 2, 3, 3, 2, 2};\n    assert(find_first_duplicate(vect3) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nint find_first_duplicate(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> num_set;\n    int no_duplicate = -1;\n    for (int num : nums) {\n        if (num_set.find(num) != num_set.end()) {\n            return num;\n//begin to write code\n"
    },
    {
        "task_id": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint maximum_Sum(const vector<vector<int>>& list1) {\n    int maxi = -100000;\n    for (const auto& x : list1) {\n        int sum = 0;\n        for (auto y : x) {\n            sum += y;\n        }\n        maxi = max(sum, maxi);\n    }\n    return maxi;\n}\n\n\n",
        "test": "int main() {\n    assert(maximum_Sum({{1,2,3},{4,5,6},{10,11,12},{7,8,9}}) == 33);\n    assert(maximum_Sum({{0,1,1},{1,1,2},{3,2,1}}) == 6);\n    assert(maximum_Sum({{0,1,3},{1,2,1},{9,8,2},{0,1,0},{6,4,8}}) == 19);\n    assert(maximum_Sum({{0,-1,-1},{-1,-1,-2},{-3,-2,-1}}) == -2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint maximum_Sum(const vector<vector<int>>& list1) {\n    int maxi = -100000;\n    for (const auto& x : list1) {\n        int sum = 0;\n        for (auto y : x) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum sum of elements of list in a list of lists.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint maximum_Sum(const vector<vector<int>>& list1) {\n    int maxi = -100000;\n    for (const auto& x : list1) {\n        int sum = 0;\n        for (auto y : x) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(maximum_Sum({{1,2,3},{4,5,6},{10,11,12},{7,8,9}}) == 33);\n    assert(maximum_Sum({{0,1,1},{1,1,2},{3,2,1}}) == 6);\n    assert(maximum_Sum({{0,1,3},{1,2,1},{9,8,2},{0,1,0},{6,4,8}}) == 19);\n    assert(maximum_Sum({{0,-1,-1},{-1,-1,-2},{-3,-2,-1}}) == -2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint maximum_Sum(const vector<vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxi = -100000;\n    for (const auto& x : list1) {\n        int sum = 0;\n        for (auto y : x) {\n//begin to write code\n"
    },
    {
        "task_id": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint binary_to_decimal(int binary) {\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        int dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n        binary /= 10;\n        i++;\n    }\n    return decimal;\n}\n\n\n",
        "test": "int main() {\n    assert(binary_to_decimal(100) == 4);\n    assert(binary_to_decimal(1011) == 11);\n    assert(binary_to_decimal(1101101) == 109);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint binary_to_decimal(int binary) {\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        int dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint binary_to_decimal(int binary) {\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        int dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(binary_to_decimal(100) == 4);\n    assert(binary_to_decimal(1011) == 11);\n    assert(binary_to_decimal(1101101) == 109);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint binary_to_decimal(int binary) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given binary number to its decimal equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int decimal = 0, i = 0;\n    while (binary != 0) {\n        int dec = binary % 10;\n        decimal += dec * std::pow(2, i);\n//begin to write code\n"
    },
    {
        "task_id": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n\n",
        "test": "int main() {\n    assert(find_Product({1, 1, 2, 3}, 4) == 6);\n    assert(find_Product({1, 2, 3, 1, 1}, 5) == 6);\n    assert(find_Product({1, 1, 4, 5, 6}, 5) == 120);\n    assert(find_Product({1, 1, 4, 5, 6, 5, 7, 1, 1, 3, 4}, 11) == 2520);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the product of non-repeated elements in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, int n) {\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_Product({1, 1, 2, 3}, 4) == 6);\n    assert(find_Product({1, 2, 3, 1, 1}, 5) == 6);\n    assert(find_Product({1, 1, 4, 5, 6}, 5) == 120);\n    assert(find_Product({1, 1, 4, 5, 6, 5, 7, 1, 1, 3, 4}, 11) == 2520);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint find_Product(std::vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(arr.begin(), arr.end());\n    int prod = 1;\n    for (int i = 0; i < n; i++) {\n        if (i == 0 || arr[i - 1] != arr[i]) {\n//begin to write code\n"
    },
    {
        "task_id": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n                break;\n            }\n        }\n        if (!res) break;\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(check_k_elements({{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4) == true);\n    assert(check_k_elements({{7, 7, 7}, {7, 7}}, 7) == true);\n    assert(check_k_elements({{9, 9}, {9, 9, 9, 9}}, 7) == false);\n    assert(check_k_elements({{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 6, 4}, {4}}, 4) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if the given tuple list has all k elements.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n                []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_k_elements({{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4) == true);\n    assert(check_k_elements({{7, 7, 7}, {7, 7}}, 7) == true);\n    assert(check_k_elements({{9, 9}, {9, 9, 9, 9}}, 7) == false);\n    assert(check_k_elements({{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 6, 4}, {4}}, 4) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_k_elements(const std::vector<std::vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = true;\n    for (const auto& tup : test_list) {\n        for (int ele : tup) {\n            if (ele != K) {\n                res = false;\n//begin to write code\n"
    },
    {
        "task_id": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.",
        "code_str": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> remove(const vector<string>& list) {\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            if(!(onechar<='9' && onechar >='0'))\n            {\n                res.push_back(onechar);\n            }\n        }\n        result.push_back(res);\n        \n    }\n    return result;\n}",
        "test": "int main()\n{\n    assert(remove({\"4words\", \"3letters\", \"4digits\"}) == vector<string>({\"words\", \"letters\", \"digits\"}));\n    assert(remove({\"28Jan\",\"12Jan\",\"11Jan\"}) == vector<string>({\"Jan\",\"Jan\",\"Jan\"}));\n    assert(remove({\"wonder1\",\"wonder2\",\"wonder3\"}) == vector<string>({\"wonder\",\"wonder\",\"wonder\"}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> remove(const vector<string>& list) {\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            if(!(onechar<='9' && onechar >='0'))\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to remove all digits from a list of strings.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> remove(const vector<string>& list) {\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            if(!(onechar<='9' && onechar >='0'))\n            double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(remove({\"4words\", \"3letters\", \"4digits\"}) == vector<string>({\"words\", \"letters\", \"digits\"}));\n    assert(remove({\"28Jan\",\"12Jan\",\"11Jan\"}) == vector<string>({\"Jan\",\"Jan\",\"Jan\"}));\n    assert(remove({\"wonder1\",\"wonder2\",\"wonder3\"}) == vector<string>({\"wonder\",\"wonder\",\"wonder\"}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> remove(const vector<string>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<string> result;\n    for (const auto& item : list) {\n        string res;\n        for(char onechar:item)\n        {\n            if(!(onechar<='9' && onechar >='0'))\n//begin to write code\n"
    },
    {
        "task_id": 28,
        "prompt": "Write a python function to find binomial co-efficient.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint binomial_Coeff(int n, int k) {\n    if (k > n) {\n        return 0;\n    }\n    if (k == 0 || k == n) {\n        return 1;\n    }\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k);\n}\n\n\n",
        "test": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(binomial_Coeff(5, 2) == 10);\n    assert(binomial_Coeff(4, 3) == 4);\n    assert(binomial_Coeff(3, 2) == 3);\n    assert(binomial_Coeff(14, 6) == 3003);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint binomial_Coeff(int n, int k) {\n    if (k > n) {\n        return 0;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find binomial co-efficient.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint binomial_Coeff(int n, int k) {\n    if (k > n) {\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n        return 0;\n    }\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(binomial_Coeff(5, 2) == 10);\n    assert(binomial_Coeff(4, 3) == 4);\n    assert(binomial_Coeff(3, 2) == 3);\n    assert(binomial_Coeff(14, 6) == 3003);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint binomial_Coeff(int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find binomial co-efficient.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (k > n) {\n        return 0;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n        }\n        if (count % 2 != 0) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main() {\n    assert(get_Odd_Occurrence(std::vector<int>{1, 2, 3, 1, 2, 3, 1}, 7) == 1);\n    assert(get_Odd_Occurrence(std::vector<int>{1, 2, 3, 2, 3, 1, 3}, 7) == 3);\n    assert(get_Odd_Occurrence(std::vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13) == 5);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the element occurring odd number of times.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_Odd_Occurrence(std::vector<int>{1, 2, 3, 1, 2, 3, 1}, 7) == 1);\n    assert(get_Odd_Occurrence(std::vector<int>{1, 2, 3, 2, 3, 1, 3}, 7) == 3);\n    assert(get_Odd_Occurrence(std::vector<int>{2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2}, 13) == 5);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint get_Odd_Occurrence(std::vector<int> arr, int arr_size) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < arr_size; i++) {\n        int count = 0;\n        for (int j = 0; j < arr_size; j++) {\n            if (arr[i] == arr[j]) {\n                count++;\n            }\n//begin to write code\n"
    },
    {
        "task_id": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_Equality(const std::string &s) {\n    return (s.front() == s.back());\n}\n\nint count_Substring_With_Equal_Ends(const std::string &s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n        for (int j = 1; j <= n - i; ++j) {\n            if (check_Equality(s.substr(i, j))) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Substring_With_Equal_Ends(\"abc\") == 3);\n    assert(count_Substring_With_Equal_Ends(\"abcda\") == 6);\n    assert(count_Substring_With_Equal_Ends(\"ab\") == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string &s) {\n    return (s.front() == s.back());\n}\nint count_Substring_With_Equal_Ends(const std::string &s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count all the substrings starting and ending with same characters.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string &s) {\n    return (s.front() == s.back());\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n}\nint count_Substring_With_Equal_Ends(const std::string &s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Substring_With_Equal_Ends(\"abc\") == 3);\n    assert(count_Substring_With_Equal_Ends(\"abcda\") == 6);\n    assert(count_Substring_With_Equal_Ends(\"ab\") == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string &s) {\n    return (s.front() == s.back());\n}\nint count_Substring_With_Equal_Ends(const std::string &s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count all the substrings starting and ending with same characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <unordered_map>\n#include <queue>\n#include <cassert>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> func(vector<vector<int>>& nums, int k) {\n    unordered_map<int, int> d;\n    for (auto& row : nums) {\n        for (int i : row) {\n            d[i]++;\n        }\n    }\n    \n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (auto& item : d) {\n        int key = item.first;\n        int v = item.second;\n        if (pq.size() < k) {\n            pq.emplace(v, key);\n        } else {\n            if (v > pq.top().first) {\n                pq.pop();\n                pq.emplace(v, key);\n            }\n        }\n    }\n    \n    vector<int> result;\n    while (!pq.empty()) {\n        result.push_back(pq.top().second);\n        pq.pop();\n    }\n    \n    return result;\n}",
        "test": "int main() {\n    vector<vector<int>> nums1{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}};\n    vector<int> result1 = func(nums1, 3);\n    assert((result1 == vector<int>{5, 7, 1}));\n\n    vector<int> result2 = func(nums1, 1);\n    assert((result2 == vector<int>{1}));\n\n    vector<int> result3 = func(nums1, 5);\n    assert((result3 == vector<int>{6,5,7,8,1}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <queue>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nvector<int> func(vector<vector<int>>& nums, int k) {\n    unordered_map<int, int> d;\n    for (auto& row : nums) {\n        for (int i : row) {\n            d[i]++;\n        }\n    }\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (auto& item : d) {\n        int key = item.first;\n        int v = item.second;\n        if (pq.size() < k) {\n            pq.emplace(v, key);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <queue>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nvector<int> func(vector<vector<int>>& nums, int k) {\n    unordered_map<int, int> d;\n    for (auto& row : nums) {\n        for (int i : row) {\n            d[i]++;\n        }\n    }\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (auto& item : d) {\n        int key = item.first;\n        int v = item.second;\n        if (pq.size() < k) {\n            pq.emplace(v, key);\n            double temp_var_10 = 9.9;while (temp_var_10 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_10 = temp_var_10 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<int>> nums1{{1, 2, 6}, {1, 3, 4, 5, 7, 8}, {1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}};\n    vector<int> result1 = func(nums1, 3);\n    assert((result1 == vector<int>{5, 7, 1}));\n\n    vector<int> result2 = func(nums1, 1);\n    assert((result2 == vector<int>{1}));\n\n    vector<int> result3 = func(nums1, 5);\n    assert((result3 == vector<int>{6,5,7,8,1}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <queue>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nvector<int> func(vector<vector<int>>& nums, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<int, int> d;\n    for (auto& row : nums) {\n        for (int i : row) {\n            d[i]++;\n        }\n    }\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n    for (auto& item : d) {\n        int key = item.first;\n        int v = item.second;\n        if (pq.size() < k) {\n            pq.emplace(v, key);\n//begin to write code\n"
    },
    {
        "task_id": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint max_Prime_Factors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return maxPrime;\n}\n\n\n",
        "test": "int main() {\n    assert(max_Prime_Factors(15) == 5);\n    assert(max_Prime_Factors(6) == 3);\n    assert(max_Prime_Factors(2) == 2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the largest prime factor of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(int n) {\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_Prime_Factors(15) == 5);\n    assert(max_Prime_Factors(6) == 3);\n    assert(max_Prime_Factors(2) == 2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint max_Prime_Factors(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest prime factor of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxPrime = -1;\n    while (n % 2 == 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        while (n % i == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        B_Number += rem * c;\n        N /= 2;\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n\n",
        "test": "int main()\n{\n    assert(decimal_To_Binary(10) == 1010);\n    assert(decimal_To_Binary(1) == 1);\n    assert(decimal_To_Binary(20) == 10100);\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to convert a decimal number to binary number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(decimal_To_Binary(10) == 1010);\n    assert(decimal_To_Binary(1) == 1);\n    assert(decimal_To_Binary(20) == 10100);\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint decimal_To_Binary(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int B_Number = 0;\n    int cnt = 0;\n    while (N != 0) {\n        int rem = N % 2;\n        int c = pow(10, cnt);\n//begin to write code\n"
    },
    {
        "task_id": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_missing(std::vector<int>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n        } else if (ar[mid] != mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> ar1 = {1, 2, 3, 5};\n    std::vector<int> ar2 = {1, 3, 4, 5};\n    std::vector<int> ar3 = {1, 2, 3, 5, 6, 7};\n    \n    assert(find_missing(ar1, 4) == 4);\n    assert(find_missing(ar2, 4) == 2);\n    assert(find_missing(ar3, 6) == 4);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the missing number in a sorted array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& ar, int N) {\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> ar1 = {1, 2, 3, 5};\n    std::vector<int> ar2 = {1, 3, 4, 5};\n    std::vector<int> ar3 = {1, 2, 3, 5, 6, 7};\n    \n    assert(find_missing(ar1, 4) == 4);\n    assert(find_missing(ar2, 4) == 2);\n    assert(find_missing(ar3, 6) == 4);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_missing(std::vector<int>& ar, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = 0;\n    int r = N - 1;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n            return mid + 1;\n//begin to write code\n"
    },
    {
        "task_id": 35,
        "prompt": "Write a function to find the n-th rectangular number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint find_rect_num(int n) {\n    return n * (n + 1);\n}\n\n\n",
        "test": "int main() {\n    assert(find_rect_num(4) == 20);\n    assert(find_rect_num(5) == 30);\n    assert(find_rect_num(6) == 42);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint find_rect_num(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n-th rectangular number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint find_rect_num(int n) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_rect_num(4) == 20);\n    assert(find_rect_num(5) == 30);\n    assert(find_rect_num(6) == 42);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint find_rect_num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n-th rectangular number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint find_Nth_Digit(int p, int q, int N) {\n    int res;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n        res = p / q;\n        p %= q;\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(find_Nth_Digit(1, 2, 1) == 5);\n    assert(find_Nth_Digit(3, 5, 1) == 6);\n    assert(find_Nth_Digit(5, 6, 5) == 3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint find_Nth_Digit(int p, int q, int N) {\n    int res;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the nth digit in the proper fraction of two given numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint find_Nth_Digit(int p, int q, int N) {\n    int res;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_Nth_Digit(1, 2, 1) == 5);\n    assert(find_Nth_Digit(3, 5, 1) == 6);\n    assert(find_Nth_Digit(5, 6, 5) == 3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint find_Nth_Digit(int p, int q, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the nth digit in the proper fraction of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n//begin to write code\n"
    },
    {
        "task_id": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nstd::vector<std::string> sort_mixed_list(std::vector<std::string> mixed_list) {\n    std::vector<int> int_part;\n    std::vector<std::string> str_part;\n\n    for (const auto& item : mixed_list) {\n        if (isdigit(item[0]) || (item[0] == '-' && item.size() > 1 && isdigit(item[1]))) {\n            int_part.push_back(std::stoi(item));\n        } else {\n            str_part.push_back(item);\n        }\n    }\n\n    std::sort(int_part.begin(), int_part.end());\n    std::sort(str_part.begin(), str_part.end());\n\n    std::vector<std::string> sorted_list;\n    for (const auto& num : int_part) {\n        sorted_list.push_back(std::to_string(num));\n    }\n    sorted_list.insert(sorted_list.end(), str_part.begin(), str_part.end());\n    \n    return sorted_list;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> test_list1 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list1 = sort_mixed_list(test_list1);\n    std::vector<std::string> expected_list1 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list1 == expected_list1);\n\n    std::vector<std::string> test_list2 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list2 = sort_mixed_list(test_list2);\n    std::vector<std::string> expected_list2 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list2 == expected_list2);\n\n    std::vector<std::string> test_list3 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list3 = sort_mixed_list(test_list3);\n    std::vector<std::string> expected_list3 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list3 == expected_list3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nstd::vector<std::string> sort_mixed_list(std::vector<std::string> mixed_list) {\n    std::vector<int> int_part;\n    std::vector<std::string> str_part;\n    for (const auto& item : mixed_list) {\n        if (isdigit(item[0]) || (item[0] == '-' && item.size() > 1 && isdigit(item[1]))) {\n            int_part.push_back(std::stoi(item));\n        } else {\n            str_part.push_back(item);\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a given mixed list of integers and strings.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nstd::vector<std::string> sort_mixed_list(std::vector<std::string> mixed_list) {\n    std::vector<int> int_part;\n    std::vector<std::string> str_part;\n    for (const auto& item : mixed_list) {\n        if (isdigit(item[0]) || (item[0] == '-' && item.size() > 1 && isdigit(item[1]))) {\n            int_part.push_back(std::stoi(item));\n        } else {\n            str_part.push_back(item);\n        }\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> test_list1 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list1 = sort_mixed_list(test_list1);\n    std::vector<std::string> expected_list1 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list1 == expected_list1);\n\n    std::vector<std::string> test_list2 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list2 = sort_mixed_list(test_list2);\n    std::vector<std::string> expected_list2 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list2 == expected_list2);\n\n    std::vector<std::string> test_list3 = {\"19\", \"red\", \"12\", \"green\", \"blue\", \"10\", \"white\", \"green\", \"1\"};\n    std::vector<std::string> sorted_list3 = sort_mixed_list(test_list3);\n    std::vector<std::string> expected_list3 = {\"1\", \"10\", \"12\", \"19\", \"blue\", \"green\", \"green\", \"red\", \"white\"};\n    assert(sorted_list3 == expected_list3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nstd::vector<std::string> sort_mixed_list(std::vector<std::string> mixed_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given mixed list of integers and strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> int_part;\n    std::vector<std::string> str_part;\n    for (const auto& item : mixed_list) {\n        if (isdigit(item[0]) || (item[0] == '-' && item.size() > 1 && isdigit(item[1]))) {\n            int_part.push_back(std::stoi(item));\n        } else {\n            str_part.push_back(item);\n        }\n//begin to write code\n"
    },
    {
        "task_id": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        if (el % 2 != 0 && first_odd == -1) {\n            first_odd = el;\n        }\n    }\n    if (first_even == -1 || first_odd == -1) return -1;\n    return static_cast<double>(first_even) / first_odd;\n}\n\n\n",
        "test": "int main()\n{\n    assert(div_even_odd({1, 3, 5, 7, 4, 1, 6, 8}) == 4);\n    assert(div_even_odd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 2);\n    assert(div_even_odd({1, 5, 7, 9, 10}) == 10);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the division of first even and odd number of a given list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(div_even_odd({1, 3, 5, 7, 4, 1, 6, 8}) == 4);\n    assert(div_even_odd({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == 2);\n    assert(div_even_odd({1, 5, 7, 9, 10}) == 10);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ndouble div_even_odd(const vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first_even = -1;\n    int first_odd = -1;\n    for (int el : list1) {\n        if (el % 2 == 0 && first_even == -1) {\n            first_even = el;\n        }\n//begin to write code\n"
    },
    {
        "task_id": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code_str": "#include <iostream>\n#include <queue>\n#include <string>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\n\nstring rearrange_string(string S) {\n    unordered_map<char, int> ctr;\n    for (char c : S) {\n        ctr[c]++;\n    }\n    \n    auto comp = [](pair<int, char> left, pair<int, char> right) {\n        if (left.first == right.first) return left.second > right.second;\n        return left.first < right.first;\n    };\n    \n    priority_queue<pair<int, char>, vector<pair<int, char>>, decltype(comp)> heap(comp);\n    \n    for (auto& kv : ctr) {\n        heap.push(make_pair(kv.second, kv.first));\n    }\n    \n    if (heap.top().first > (S.length() + 1) / 2) {\n        return \"\";\n    }\n    \n    string ans = \"\";\n    while (heap.size() >= 2) {\n        auto p1 = heap.top();\n        heap.pop();\n        auto p2 = heap.top();\n        heap.pop();\n        \n        ans += p1.second;\n        ans += p2.second;\n        \n        if (--p1.first > 0) heap.push(p1);\n        if (--p2.first > 0) heap.push(p2);\n    }\n    \n    if (!heap.empty()) {\n        auto p = heap.top();\n        heap.pop();\n        ans += p.second;\n    }\n    \n    return ans;\n}",
        "test": "int main() {\n    assert(rearrange_string(\"aab\") == \"aba\");\n    assert(rearrange_string(\"aabb\") == \"abab\");\n    assert(rearrange_string(\"abccdd\") == \"cdabcd\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <queue>\n#include <string>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nstring rearrange_string(string S) {\n    unordered_map<char, int> ctr;\n    for (char c : S) {\n        ctr[c]++;\n    }\n    auto comp = [](pair<int, char> left, pair<int, char> right) {\n        if (left.first == right.first) return left.second > right.second;\n        return left.first < right.first;\n    };\n    priority_queue<pair<int, char>, vector<pair<int, char>>, decltype(comp)> heap(comp);\n    for (auto& kv : ctr) {\n        heap.push(make_pair(kv.second, kv.first));\n    }\n    if (heap.top().first > (S.length() + 1) / 2) {\n        return \"\";\n    }\n    string ans = \"\";\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "perturbated_codes": "#include <iostream>\n#include <queue>\n#include <string>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nstring rearrange_string(string S) {\n    unordered_map<char, int> ctr;\n    for (char c : S) {\n        ctr[c]++;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    auto comp = [](pair<int, char> left, pair<int, char> right) {\n        if (left.first == right.first) return left.second > right.second;\n        return left.first < right.first;\n    };\n    priority_queue<pair<int, char>, vector<pair<int, char>>, decltype(comp)> heap(comp);\n    for (auto& kv : ctr) {\n        heap.push(make_pair(kv.second, kv.first));\n    }\n    if (heap.top().first > (S.length() + 1) / 2) {\n        return \"\";\n    }\n    string ans = \"\";\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(rearrange_string(\"aab\") == \"aba\");\n    assert(rearrange_string(\"aabb\") == \"abab\");\n    assert(rearrange_string(\"abccdd\") == \"cdabcd\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <queue>\n#include <string>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nstring rearrange_string(string S) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<char, int> ctr;\n    for (char c : S) {\n        ctr[c]++;\n    }\n    auto comp = [](pair<int, char> left, pair<int, char> right) {\n        if (left.first == right.first) return left.second > right.second;\n        return left.first < right.first;\n    };\n    priority_queue<pair<int, char>, vector<pair<int, char>>, decltype(comp)> heap(comp);\n    for (auto& kv : ctr) {\n        heap.push(make_pair(kv.second, kv.first));\n    }\n    if (heap.top().first > (S.length() + 1) / 2) {\n        return \"\";\n    }\n    string ans = \"\";\n//begin to write code\n"
    },
    {
        "task_id": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\n\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n            result[num]++;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    vector<vector<int>> test_case1 = {{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}};\n    vector<vector<int>> test_case2 = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};\n    vector<vector<int>> test_case3 = {{15,20,30,40},{80,90,100,110},{30,30,80,90}};\n\n    map<int, int> result1 = freq_element(test_case1);\n    map<int, int> result2 = freq_element(test_case2);\n    map<int, int> result3 = freq_element(test_case3);\n\n    // Check correctness\n    assert(result1[2] == 3 && result1[1] == 2 && result1[5] == 2 && result1[3] == 1 && result1[4] == 1 && result1[6] == 1 && result1[7] == 1 && result1[9] == 1);\n    assert(result2[1] == 1 && result2[2] == 1 && result2[3] == 1 && result2[4] == 1 && result2[5] == 1 && result2[6] == 1 && result2[7] == 1 && result2[8] == 1 && result2[9] == 1 && result2[10] == 1 && result2[11] == 1 && result2[12] == 1);\n    assert(result3[30] == 3 && result3[80] == 2 && result3[90] == 2 && result3[15] == 1 && result3[20] == 1 && result3[40] == 1 && result3[100] == 1 && result3[110] == 1);\n    \n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<int>> test_case1 = {{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}};\n    vector<vector<int>> test_case2 = {{1,2,3,4},{5,6,7,8},{9,10,11,12}};\n    vector<vector<int>> test_case3 = {{15,20,30,40},{80,90,100,110},{30,30,80,90}};\n\n    map<int, int> result1 = freq_element(test_case1);\n    map<int, int> result2 = freq_element(test_case2);\n    map<int, int> result3 = freq_element(test_case3);\n\n    // Check correctness\n    assert(result1[2] == 3 && result1[1] == 2 && result1[5] == 2 && result1[3] == 1 && result1[4] == 1 && result1[6] == 1 && result1[7] == 1 && result1[9] == 1);\n    assert(result2[1] == 1 && result2[2] == 1 && result2[3] == 1 && result2[4] == 1 && result2[5] == 1 && result2[6] == 1 && result2[7] == 1 && result2[8] == 1 && result2[9] == 1 && result2[10] == 1 && result2[11] == 1 && result2[12] == 1);\n    assert(result3[30] == 3 && result3[80] == 2 && result3[90] == 2 && result3[15] == 1 && result3[20] == 1 && result3[40] == 1 && result3[100] == 1 && result3[110] == 1);\n    \n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\nusing namespace std;\nmap<int, int> freq_element(vector<vector<int>>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<int, int> result;\n    for (auto& row : nums) {\n        for (int num : row) {\n//begin to write code\n"
    },
    {
        "task_id": 41,
        "prompt": "Write a function to filter even numbers using lambda function.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            even_nums.push_back(num);\n        }\n    }\n    return even_nums;\n}\n\n\n",
        "test": "int main() {\n    // Test case 1\n    std::vector<int> nums1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> expected1 = {2, 4, 6, 8, 10};\n    assert(filter_evennumbers(nums1) == expected1);\n\n    // Test case 2\n    std::vector<int> nums2 = {10, 20, 45, 67, 84, 93};\n    std::vector<int> expected2 = {10, 20, 84};\n    assert(filter_evennumbers(nums2) == expected2);\n\n    // Test case 3\n    std::vector<int> nums3 = {5, 7, 9, 8, 6, 4, 3};\n    std::vector<int> expected3 = {8, 6, 4};\n    assert(filter_evennumbers(nums3) == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to filter even numbers using lambda function.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test case 1\n    std::vector<int> nums1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> expected1 = {2, 4, 6, 8, 10};\n    assert(filter_evennumbers(nums1) == expected1);\n\n    // Test case 2\n    std::vector<int> nums2 = {10, 20, 45, 67, 84, 93};\n    std::vector<int> expected2 = {10, 20, 84};\n    assert(filter_evennumbers(nums2) == expected2);\n\n    // Test case 3\n    std::vector<int> nums3 = {5, 7, 9, 8, 6, 4, 3};\n    std::vector<int> expected3 = {8, 6, 4};\n    assert(filter_evennumbers(nums3) == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> filter_evennumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> even_nums;\n    for (int num : nums) {\n        if (num % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\n\nint find_Sum(const vector<int>& arr) {\n    unordered_map<int, int> count;\n    for (int num : arr) {\n        count[num]++;\n    }\n    int sum = 0;\n    for (const auto& p : count) {\n        if (p.second > 1) {\n            sum += p.first;\n        }\n    }\n    return sum;\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_Sum({1,2,3,1,1,4,5,6}) == 1);\n    assert(find_Sum({1,2,3,1,1}) == 1);\n    assert(find_Sum({1,1,2}) == 1);\n    assert(find_Sum({1,1,2,3,4,5,6,3,5}) == 9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nint find_Sum(const vector<int>& arr) {\n    unordered_map<int, int> count;\n    for (int num : arr) {\n        count[num]++;\n    }\n    int sum = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of repeated elements in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nint find_Sum(const vector<int>& arr) {\n    unordered_map<int, int> count;\n    for (int num : arr) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        count[num]++;\n    }\n    int sum = 0;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_Sum({1,2,3,1,1,4,5,6}) == 1);\n    assert(find_Sum({1,2,3,1,1}) == 1);\n    assert(find_Sum({1,1,2}) == 1);\n    assert(find_Sum({1,1,2,3,4,5,6,3,5}) == 9);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nint find_Sum(const vector<int>& arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<int, int> count;\n    for (int num : arr) {\n        count[num]++;\n    }\n    int sum = 0;\n//begin to write code\n"
    },
    {
        "task_id": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code_str": "\n#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring text_match(const string& text) {\n    regex pattern(\"^[a-z]+_[a-z]+$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(text_match(\"aab_cbbbc\") == \"Found a match!\");\n    assert(text_match(\"aab_Abbbc\") == \"Not matched!\");\n    assert(text_match(\"Aaab_abbbc\") == \"Not matched!\");\n    assert(text_match(\"aab-cbbbc\") == \"Not matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match(const string& text) {\n    regex pattern(\"^[a-z]+_[a-z]+$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match(const string& text) {\n    regex pattern(\"^[a-z]+_[a-z]+$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(text_match(\"aab_cbbbc\") == \"Found a match!\");\n    assert(text_match(\"aab_Abbbc\") == \"Not matched!\");\n    assert(text_match(\"Aaab_abbbc\") == \"Not matched!\");\n    assert(text_match(\"aab-cbbbc\") == \"Not matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"^[a-z]+_[a-z]+$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n"
    },
    {
        "task_id": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.",
        "code_str": "#include <iostream>\n#include <cassert>\nusing namespace std;\n\nstring text_match_string(string text) {\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n\n    if (isalnum(text[0]) || text[0] == '_') {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n\n}",
        "test": "int main() {\n    assert(text_match_string(\" python\") == \"Not matched!\");\n    assert(text_match_string(\"python\") == \"Found a match!\");\n    assert(text_match_string(\"  lang\") == \"Not matched!\");\n    assert(text_match_string(\"foo\") == \"Found a match!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring text_match_string(string text) {\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    if (isalnum(text[0]) || text[0] == '_') {\n//begin to write code\n",
        "cpp_prompt": "Write a function that matches a word at the beginning of a string.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring text_match_string(string text) {\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    if (isalnum(text[0]) || text[0] == '_') {\n    double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(text_match_string(\" python\") == \"Not matched!\");\n    assert(text_match_string(\"python\") == \"Found a match!\");\n    assert(text_match_string(\"  lang\") == \"Not matched!\");\n    assert(text_match_string(\"foo\") == \"Found a match!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring text_match_string(string text) {\n\n    /*\n    progame language:cpp\n    description:Write a function that matches a word at the beginning of a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (text.empty()) {\n        return \"Not matched!\";\n    }\n    if (isalnum(text[0]) || text[0] == '_') {\n//begin to write code\n"
    },
    {
        "task_id": 45,
        "prompt": "Write a function to find the gcd of the given array elements.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_gcd(int x, int y) {\n    while (y != 0) {\n        int temp = x % y;\n        x = y;\n        y = temp;\n    }\n    return x;\n}\n\nint get_gcd(std::vector<int> l) {\n    int num1 = l[0];\n    int num2 = l[1];\n    int gcd = find_gcd(num1, num2);\n    for (size_t i = 2; i < l.size(); i++) {\n        gcd = find_gcd(gcd, l[i]);\n    }\n    return gcd;\n}\n\n\n",
        "test": "int main() {\n    assert(get_gcd({2, 4, 6, 8, 16}) == 2);\n    assert(get_gcd({1, 2, 3}) == 1);\n    assert(get_gcd({2, 4, 6, 8}) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_gcd(int x, int y) {\n    while (y != 0) {\n        int temp = x % y;\n        x = y;\n        y = temp;\n    }\n    return x;\n}\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the gcd of the given array elements.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_gcd(int x, int y) {\n    while (y != 0) {\n        int temp = x % y;\n        x = y;\n        y = temp;\n    }\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    return x;\n}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_gcd({2, 4, 6, 8, 16}) == 2);\n    assert(get_gcd({1, 2, 3}) == 1);\n    assert(get_gcd({2, 4, 6, 8}) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_gcd(int x, int y) {\n    while (y != 0) {\n        int temp = x % y;\n        x = y;\n        y = temp;\n    }\n    return x;\n}\n//begin to write code\n"
    },
    {
        "task_id": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool test_distinct(const std::vector<int>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n    return data.size() == distinctSet.size();\n}\n\n\n",
        "test": "int main() {\n    assert(test_distinct({1,5,7,9}) == true);\n    assert(test_distinct({2,4,5,5,7,9}) == false);\n    assert(test_distinct({1,2,3}) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<int>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to determine whether all the numbers are different from each other are not.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<int>& data) {\n    std::set<int> distinctSet(data.begin(), data.end());\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(test_distinct({1,5,7,9}) == true);\n    assert(test_distinct({2,4,5,5,7,9}) == false);\n    assert(test_distinct({1,2,3}) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool test_distinct(const std::vector<int>& data) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to determine whether all the numbers are different from each other are not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> distinctSet(data.begin(), data.end());\n//begin to write code\n"
    },
    {
        "task_id": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nint compute_Last_Digit(int A, int B) {\n    int variable = 1;\n    if (A == B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n    } else {\n        for (int i = A + 1; i <= B; i++) {\n            variable = (variable * (i % 10)) % 10;\n        }\n        return variable;\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(compute_Last_Digit(2,4) == 2);\n    assert(compute_Last_Digit(6,8) == 6);\n    assert(compute_Last_Digit(1,2) == 2);\n\n    assert(compute_Last_Digit(3,7) == 0);\n    assert(compute_Last_Digit(20,23) == 6);\n    assert(compute_Last_Digit(1021,1024) == 4);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint compute_Last_Digit(int A, int B) {\n    int variable = 1;\n    if (A == B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the last digit when factorial of a divides factorial of b.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint compute_Last_Digit(int A, int B) {\n    int variable = 1;\n    if (A == B) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(compute_Last_Digit(2,4) == 2);\n    assert(compute_Last_Digit(6,8) == 6);\n    assert(compute_Last_Digit(1,2) == 2);\n\n    assert(compute_Last_Digit(3,7) == 0);\n    assert(compute_Last_Digit(20,23) == 6);\n    assert(compute_Last_Digit(1021,1024) == 4);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint compute_Last_Digit(int A, int B) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the last digit when factorial of a divides factorial of b.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int variable = 1;\n    if (A == B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n//begin to write code\n"
    },
    {
        "task_id": 48,
        "prompt": "Write a python function to set all odd bits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint odd_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n            res |= (1 << count);\n        }\n        count += 1;\n        temp >>= 1;\n    }\n    return (n | res);\n}\n\n\n",
        "test": "int main() {\n    assert(odd_bit_set_number(10) == 15);\n    assert(odd_bit_set_number(20) == 21);\n    assert(odd_bit_set_number(30) == 31);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint odd_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to set all odd bits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint odd_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(odd_bit_set_number(10) == 15);\n    assert(odd_bit_set_number(20) == 21);\n    assert(odd_bit_set_number(30) == 31);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint odd_bit_set_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to set all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> specified_element(const std::vector<std::vector<int>>& nums, int N) {\n    std::vector<int> result;\n    for (const auto& i : nums) {\n        result.push_back(i[N]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0) == std::vector<int>{1, 4, 7}));\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2) == std::vector<int>{3, 6, 9}));\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1) == std::vector<int>{2, 5, 1}));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> specified_element(const std::vector<std::vector<int>>& nums, int N) {\n    std::vector<int> result;\n    for (const auto& i : nums) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> specified_element(const std::vector<std::vector<int>>& nums, int N) {\n    std::vector<int> result;\n    for (const auto& i : nums) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 0) == std::vector<int>{1, 4, 7}));\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 2) == std::vector<int>{3, 6, 9}));\n    assert((specified_element({{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}}, 1) == std::vector<int>{2, 5, 1}));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> specified_element(const std::vector<std::vector<int>>& nums, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (const auto& i : nums) {\n//begin to write code\n"
    },
    {
        "task_id": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::pair<int, std::vector<int>> min_length_list(const std::vector<std::vector<int>>& input_list) {\n    auto min_it = std::min_element(input_list.begin(), input_list.end(),\n                                   [](const std::vector<int>& a, const std::vector<int>& b) {\n                                       return a.size() < b.size();\n                                   });\n    int min_length = min_it->size();\n    return {min_length, *min_it};\n}\n\n\n",
        "test": "int main() {\n    assert((min_length_list({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(1, std::vector<int>{0})));\n    assert((min_length_list({{1,2,3,4,5}, {1,2,3,4}, {1,2,3}, {1,2}, {1}}) == std::make_pair(1, std::vector<int>{1})));\n    assert((min_length_list({{3,4,5}, {6,7,8,9}, {10,11,12}, {1,2}}) == std::make_pair(2, std::vector<int>{1, 2})));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::pair<int, std::vector<int>> min_length_list(const std::vector<std::vector<int>>& input_list) {\n    auto min_it = std::min_element(input_list.begin(), input_list.end(),\n                                   [](const std::vector<int>& a, const std::vector<int>& b) {\n                                       return a.size() < b.size();\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the list with minimum length using lambda function.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::pair<int, std::vector<int>> min_length_list(const std::vector<std::vector<int>>& input_list) {\n    auto min_it = std::min_element(input_list.begin(), input_list.end(),\n                                   [](const std::vector<int>& a, const std::vector<int>& b) {\n                                       return a.size() < b.size();\n                                       []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((min_length_list({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(1, std::vector<int>{0})));\n    assert((min_length_list({{1,2,3,4,5}, {1,2,3,4}, {1,2,3}, {1,2}, {1}}) == std::make_pair(1, std::vector<int>{1})));\n    assert((min_length_list({{3,4,5}, {6,7,8,9}, {10,11,12}, {1,2}}) == std::make_pair(2, std::vector<int>{1, 2})));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::pair<int, std::vector<int>> min_length_list(const std::vector<std::vector<int>>& input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list with minimum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto min_it = std::min_element(input_list.begin(), input_list.end(),\n                                   [](const std::vector<int>& a, const std::vector<int>& b) {\n                                       return a.size() < b.size();\n//begin to write code\n"
    },
    {
        "task_id": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool check_equilateral(int x, int y, int z) {\n    return (x == y && y == z);\n}\n\n\n",
        "test": "int main() {\n    assert(check_equilateral(6, 8, 12) == false);\n    assert(check_equilateral(6, 6, 12) == false);\n    assert(check_equilateral(6, 6, 6) == true);\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool check_equilateral(int x, int y, int z) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to print check if the triangle is equilateral or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool check_equilateral(int x, int y, int z) {\ndouble temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_equilateral(6, 8, 12) == false);\n    assert(check_equilateral(6, 6, 12) == false);\n    assert(check_equilateral(6, 6, 6) == true);\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_equilateral(int x, int y, int z) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.",
        "code_str": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n    int area = b * h;\n    return area;\n}\n\n\n",
        "test": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(parallelogram_area(10,20) == 200);\n    assert(parallelogram_area(15,20) == 300);\n    assert(parallelogram_area(8,9) == 72);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to caluclate area of a parallelogram.",
        "perturbated_codes": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\ndouble temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(parallelogram_area(10,20) == 200);\n    assert(parallelogram_area(15,20) == 300);\n    assert(parallelogram_area(8,9) == 72);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint parallelogram_area(int b, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n    } else {\n        return \"Not Equal\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(check_Equality(\"abcda\") == \"Equal\");\n    assert(check_Equality(\"ab\") == \"Not Equal\");\n    assert(check_Equality(\"mad\") == \"Not Equal\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the first and last characters of a given string are equal or not.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_Equality(\"abcda\") == \"Equal\");\n    assert(check_Equality(\"ab\") == \"Not Equal\");\n    assert(check_Equality(\"mad\") == \"Not Equal\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string check_Equality(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (str[0] == str[str.length() - 1]) {\n        return \"Equal\";\n//begin to write code\n"
    },
    {
        "task_id": 54,
        "prompt": "Write a function to sort the given array by using counting sort.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n    }\n    int index = 0;\n    for (int j = 0; j <= max_value; ++j) {\n        for (int a = 0; a < buckets[j]; ++a) {\n            my_list[index] = j;\n            index++;\n        }\n    }\n    return my_list;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> test1 = {1, 23, 4, 5, 6, 7, 8};\n    std::vector<int> test2 = {12, 9, 28, 33, 69, 45};\n    std::vector<int> test3 = {8, 4, 14, 3, 2, 1};\n    \n    assert(counting_sort(test1) == std::vector<int>({1, 4, 5, 6, 7, 8, 23}));\n    assert(counting_sort(test2) == std::vector<int>({9, 12, 28, 33, 45, 69}));\n    assert(counting_sort(test3) == std::vector<int>({1, 2, 3, 4, 8, 14}));\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort the given array by using counting sort.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> test1 = {1, 23, 4, 5, 6, 7, 8};\n    std::vector<int> test2 = {12, 9, 28, 33, 69, 45};\n    std::vector<int> test3 = {8, 4, 14, 3, 2, 1};\n    \n    assert(counting_sort(test1) == std::vector<int>({1, 4, 5, 6, 7, 8, 23}));\n    assert(counting_sort(test2) == std::vector<int>({9, 12, 28, 33, 45, 69}));\n    assert(counting_sort(test3) == std::vector<int>({1, 2, 3, 4, 8, 14}));\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> counting_sort(std::vector<int> my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_value = 0;\n    for (int i = 0; i < my_list.size(); ++i) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    std::vector<int> buckets(max_value + 1, 0);\n    for (int num : my_list) {\n        buckets[num]++;\n//begin to write code\n"
    },
    {
        "task_id": 55,
        "prompt": "Write a function to find t-nth term of geometric series.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n    return tn;\n}\n\n\n",
        "test": "int main()\n{\n    assert(tn_gp(1, 5, 2) == 16);\n    assert(tn_gp(1, 5, 4) == 256);\n    assert(tn_gp(2, 6, 3) == 486);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n    double tn = a * pow(r, n - 1);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find t-nth term of geometric series.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    double tn = a * pow(r, n - 1);\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(tn_gp(1, 5, 2) == 16);\n    assert(tn_gp(1, 5, 4) == 256);\n    assert(tn_gp(2, 6, 3) == 486);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\ndouble tn_gp(double a, int n, double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double tn = a * pow(r, n - 1);\n//begin to write code\n"
    },
    {
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint rev(int num) {\n    int rev_num = 0;\n    while (num > 0) {\n        rev_num = rev_num * 10 + num % 10;\n        num = num / 10;\n    }\n    return rev_num;\n}\n\nbool check(int n) {\n    return (2 * rev(n) == n + 1);\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(check(70) == false);\n    assert(check(23) == false);\n    assert(check(73) == true);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint rev(int num) {\n    int rev_num = 0;\n    while (num > 0) {\n        rev_num = rev_num * 10 + num % 10;\n        num = num / 10;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check if a given number is one less than twice its reverse.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint rev(int num) {\n    int rev_num = 0;\n    while (num > 0) {\n        rev_num = rev_num * 10 + num % 10;\n        num = num / 10;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(check(70) == false);\n    assert(check(23) == false);\n    assert(check(73) == true);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint rev(int num) {\n    int rev_num = 0;\n    while (num > 0) {\n        rev_num = rev_num * 10 + num % 10;\n        num = num / 10;\n//begin to write code\n"
    },
    {
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\n// \u51fd\u6570\u5b9a\u4e49\nint find_Max_Num(std::vector<int> arr, int n) {\n    std::sort(arr.rbegin(), arr.rend());\n    int num = arr[0];\n    for (int i = 1; i < n; ++i) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(find_Max_Num({1, 2, 3}, 3) == 321);\n    assert(find_Max_Num({4, 5, 6, 1}, 4) == 6541);\n    assert(find_Max_Num({1, 2, 3, 9}, 4) == 9321);\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Max_Num(std::vector<int> arr, int n) {\n    std::sort(arr.rbegin(), arr.rend());\n    int num = arr[0];\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the largest number that can be formed with the given digits.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Max_Num(std::vector<int> arr, int n) {\n    std::sort(arr.rbegin(), arr.rend());\n    int num = arr[0];\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(find_Max_Num({1, 2, 3}, 3) == 321);\n    assert(find_Max_Num({4, 5, 6, 1}, 4) == 6541);\n    assert(find_Max_Num({1, 2, 3, 9}, 4) == 9321);\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Max_Num(std::vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest number that can be formed with the given digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(arr.rbegin(), arr.rend());\n    int num = arr[0];\n//begin to write code\n"
    },
    {
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool opposite_Signs(int x, int y) {\n    return ((x ^ y) < 0);\n}\n\n\n",
        "test": "int main() {\n    assert(opposite_Signs(1, -2) == true);\n    assert(opposite_Signs(3, 2) == false);\n    assert(opposite_Signs(-10, -10) == false);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given two integers have opposite sign or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(opposite_Signs(1, -2) == true);\n    assert(opposite_Signs(3, 2) == false);\n    assert(opposite_Signs(-10, -10) == false);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool opposite_Signs(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 59,
        "prompt": "Write a function to find the nth octagonal number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint is_octagonal(int n) {\n    return 3 * n * n - 2 * n;\n}\n\n\n",
        "test": "int main() {\n    assert(is_octagonal(5) == 65);\n    assert(is_octagonal(10) == 280);\n    assert(is_octagonal(15) == 645);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint is_octagonal(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nth octagonal number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint is_octagonal(int n) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_octagonal(5) == 65);\n    assert(is_octagonal(10) == 280);\n    assert(is_octagonal(15) == 645);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint is_octagonal(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nth octagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\n\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n\n",
        "test": "int main() {\n    assert(max_len_sub({2, 5, 6, 3, 7, 6, 5, 8}, 8) == 5);\n    assert(max_len_sub({-2, -1, 5, -1, 4, 0, 3}, 7) == 4);\n    assert(max_len_sub({9, 11, 13, 15, 18}, 5) == 1);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n            double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_len_sub({2, 5, 6, 3, 7, 6, 5, 8}, 8) == 5);\n    assert(max_len_sub({-2, -1, 5, -1, 4, 0, 3}, 7) == 4);\n    assert(max_len_sub({9, 11, 13, 15, 18}, 5) == 1);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nint max_len_sub(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> mls(n, 1);\n    int max = 0;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n//begin to write code\n"
    },
    {
        "task_id": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "code_str": "\n#include <iostream>\n#include <unordered_map>\n#include <cassert>\n\nint count_Substrings(const std::string& s, int n) {\n    int count = 0, sum = 0;\n    std::unordered_map<int, int> mp;\n    mp[0] = 1;\n    for (int i = 0; i < n; ++i) {\n        sum += s[i] - '0';\n        int key = sum - (i + 1);\n        count += mp[key];\n        mp[key]++;\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Substrings(\"112112\", 6) == 6);\n    assert(count_Substrings(\"111\", 3) == 6);\n    assert(count_Substrings(\"1101112\", 7) == 12);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nint count_Substrings(const std::string& s, int n) {\n    int count = 0, sum = 0;\n    std::unordered_map<int, int> mp;\n    mp[0] = 1;\n    for (int i = 0; i < n; ++i) {\n        sum += s[i] - '0';\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count number of substrings with the sum of digits equal to their length.",
        "perturbated_codes": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nint count_Substrings(const std::string& s, int n) {\n    int count = 0, sum = 0;\n    std::unordered_map<int, int> mp;\n    mp[0] = 1;\n    for (int i = 0; i < n; ++i) {\n        sum += s[i] - '0';\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Substrings(\"112112\", 6) == 6);\n    assert(count_Substrings(\"111\", 3) == 6);\n    assert(count_Substrings(\"1101112\", 7) == 12);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nint count_Substrings(const std::string& s, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count number of substrings with the sum of digits equal to their length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0, sum = 0;\n    std::unordered_map<int, int> mp;\n    mp[0] = 1;\n    for (int i = 0; i < n; ++i) {\n        sum += s[i] - '0';\n//begin to write code\n"
    },
    {
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "code_str": "#include<iostream>\n    \n\n#include <algorithm>\n#include <vector>\n#include <cassert>\n\nint smallest_num(std::vector<int> xs) {\n    return *std::min_element(xs.begin(), xs.end());\n}\n\n\n",
        "test": "int main() {\n    assert(smallest_num({10, 20, 1, 45, 99}) == 1);\n    assert(smallest_num({1, 2, 3}) == 1);\n    assert(smallest_num({45, 46, 50, 60}) == 45);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find smallest number in a list.",
        "perturbated_codes": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(smallest_num({10, 20, 1, 45, 99}) == 1);\n    assert(smallest_num({1, 2, 3}) == 1);\n    assert(smallest_num({45, 46, 50, 60}) == 45);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <algorithm>\n#include <vector>\n#include <cassert>\nint smallest_num(std::vector<int> xs) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nint max_difference(vector<pair<int, int>> test_list) {\n    vector<int> temp;\n    for (auto p : test_list) {\n        temp.push_back(abs(p.second - p.first));\n    }\n    int res = *max_element(temp.begin(), temp.end());\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(max_difference({{3, 5}, {1, 7}, {10, 3}, {1, 2}}) == 7);\n    assert(max_difference({{4, 6}, {2, 17}, {9, 13}, {11, 12}}) == 15);\n    assert(max_difference({{12, 35}, {21, 27}, {13, 23}, {41, 22}}) == 23);\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint max_difference(vector<pair<int, int>> test_list) {\n    vector<int> temp;\n    for (auto p : test_list) {\n        temp.push_back(abs(p.second - p.first));\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint max_difference(vector<pair<int, int>> test_list) {\n    vector<int> temp;\n    for (auto p : test_list) {\n        temp.push_back(abs(p.second - p.first));\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_difference({{3, 5}, {1, 7}, {10, 3}, {1, 2}}) == 7);\n    assert(max_difference({{4, 6}, {2, 17}, {9, 13}, {11, 12}}) == 15);\n    assert(max_difference({{12, 35}, {21, 27}, {13, 23}, {41, 22}}) == 23);\n    cout << \"All test cases passed!\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\nint max_difference(vector<pair<int, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum difference between available pairs in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> temp;\n    for (auto p : test_list) {\n        temp.push_back(abs(p.second - p.first));\n//begin to write code\n"
    },
    {
        "task_id": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n    return subjectmarks;\n}\n\n\n",
        "test": "int main()\n{\n    vector<pair<string, int>> result1 = subject_marks({{\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}, {\"Social sciences\", 82}});\n    assert((result1 == vector<pair<string, int>>{{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}));\n\n    vector<pair<string, int>> result2 = subject_marks({{\"Telugu\", 49}, {\"Hindhi\", 54}, {\"Social\", 33}});\n    assert((result2 == vector<pair<string, int>>{{\"Social\", 33}, {\"Telugu\", 49}, {\"Hindhi\", 54}}));\n\n    vector<pair<string, int>> result3 = subject_marks({{\"Physics\", 96}, {\"Chemistry\", 97}, {\"Biology\", 45}});\n    assert((result3 == vector<pair<string, int>>{{\"Biology\", 45}, {\"Physics\", 96}, {\"Chemistry\", 97}}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a list of tuples using lambda.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<pair<string, int>> result1 = subject_marks({{\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}, {\"Social sciences\", 82}});\n    assert((result1 == vector<pair<string, int>>{{\"Social sciences\", 82}, {\"English\", 88}, {\"Science\", 90}, {\"Maths\", 97}}));\n\n    vector<pair<string, int>> result2 = subject_marks({{\"Telugu\", 49}, {\"Hindhi\", 54}, {\"Social\", 33}});\n    assert((result2 == vector<pair<string, int>>{{\"Social\", 33}, {\"Telugu\", 49}, {\"Hindhi\", 54}}));\n\n    vector<pair<string, int>> result3 = subject_marks({{\"Physics\", 96}, {\"Chemistry\", 97}, {\"Biology\", 45}});\n    assert((result3 == vector<pair<string, int>>{{\"Biology\", 45}, {\"Physics\", 96}, {\"Chemistry\", 97}}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, int>> subject_marks(vector<pair<string, int>> subjectmarks) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(subjectmarks.begin(), subjectmarks.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n//begin to write code\n"
    },
    {
        "task_id": 65,
        "prompt": "Write a function of recursion list sum.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\n#include <type_traits>\n\nusing namespace std;\n\nclass Any {\npublic:\n    Any() : content(nullptr) {}\n\n    template<typename T>\n    Any(const T& value) : content(new Holder<T>(value)) {}\n\n    Any(const Any& other) : content(other.content ? other.content->clone() : nullptr) {}\n\n    ~Any() { delete content; }\n\n    Any& operator=(const Any& other) {\n        if (this != &other) {\n            delete content;\n            content = other.content ? other.content->clone() : nullptr;\n        }\n        return *this;\n    }\n\n    template<typename T>\n    T& cast() {\n        return static_cast<Holder<T>*>(content)->held;\n    }\n\n    template<typename T>\n    const T& cast() const {\n        return static_cast<const Holder<T>*>(content)->held;\n    }\n\n    const type_info& type() const {\n        return content ? content->type() : typeid(void);\n    }\n\nprivate:\n    struct Placeholder {\n        virtual ~Placeholder() {}\n        virtual const type_info& type() const = 0;\n        virtual Placeholder* clone() const = 0;\n    };\n\n    template<typename T>\n    struct Holder : Placeholder {\n        Holder(const T& value) : held(value) {}\n        const type_info& type() const override {\n            return typeid(T);\n        }\n        Placeholder* clone() const override {\n            return new Holder(held);\n        }\n        T held;\n    };\n\n    Placeholder* content;\n};\n\nint recursive_list_sum(const vector<Any>& data_list) {\n    int total = 0;\n    for (const auto& element : data_list) {\n        if (element.type() == typeid(vector<Any>)) {\n            total += recursive_list_sum(element.cast<vector<Any>>());\n        } else {\n            total += element.cast<int>();\n        }\n    }\n    return total;\n}",
        "test": "int main() {\n    assert(recursive_list_sum({1, 2, vector<Any>{3, 4}, vector<Any>{5, 6}}) == 21);\n    assert(recursive_list_sum({7, 10, vector<Any>{15, 14}, vector<Any>{19, 41}}) == 106);\n    assert(recursive_list_sum({10, 20, vector<Any>{30, 40}, vector<Any>{50, 60}}) == 210);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\n#include <type_traits>\nusing namespace std;\nclass Any {\npublic:\n    Any() : content(nullptr) {}\n    template<typename T>\n    Any(const T& value) : content(new Holder<T>(value)) {}\n    Any(const Any& other) : content(other.content ? other.content->clone() : nullptr) {}\n    ~Any() { delete content; }\n    Any& operator=(const Any& other) {\n        if (this != &other) {\n            delete content;\n            content = other.content ? other.content->clone() : nullptr;\n        }\n        return *this;\n    }\n    template<typename T>\n    T& cast() {\n        return static_cast<Holder<T>*>(content)->held;\n    }\n    template<typename T>\n    const T& cast() const {\n        return static_cast<const Holder<T>*>(content)->held;\n    }\n    const type_info& type() const {\n        return content ? content->type() : typeid(void);\n    }\nprivate:\n    struct Placeholder {\n//begin to write code\n",
        "cpp_prompt": "Write a function of recursion list sum.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\n#include <type_traits>\nusing namespace std;\nclass Any {\npublic:\n    Any() : content(nullptr) {}\n    template<typename T>\n    Any(const T& value) : content(new Holder<T>(value)) {}\n    Any(const Any& other) : content(other.content ? other.content->clone() : nullptr) {}\n    ~Any() { delete content; }\n    Any& operator=(const Any& other) {\n        if (this != &other) {\n            delete content;\n            content = other.content ? other.content->clone() : nullptr;\n        }\n        return *this;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    template<typename T>\n    T& cast() {\n        return static_cast<Holder<T>*>(content)->held;\n    }\n    template<typename T>\n    const T& cast() const {\n        return static_cast<const Holder<T>*>(content)->held;\n    }\n    const type_info& type() const {\n        return content ? content->type() : typeid(void);\n    }\nprivate:\n    struct Placeholder {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(recursive_list_sum({1, 2, vector<Any>{3, 4}, vector<Any>{5, 6}}) == 21);\n    assert(recursive_list_sum({7, 10, vector<Any>{15, 14}, vector<Any>{19, 41}}) == 106);\n    assert(recursive_list_sum({10, 20, vector<Any>{30, 40}, vector<Any>{50, 60}}) == 210);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\n#include <type_traits>\nusing namespace std;\nclass Any {\npublic:\n    Any() : content(nullptr) {}\n    template<typename T>\n    Any(const T& value) : content(new Holder<T>(value)) {}\n    Any(const Any& other) : content(other.content ? other.content->clone() : nullptr) {}\n    ~Any() { delete content; }\n    Any& operator=(const Any& other) {\n        if (this != &other) {\n            delete content;\n            content = other.content ? other.content->clone() : nullptr;\n        }\n        return *this;\n    }\n    template<typename T>\n    T& cast() {\n        return static_cast<Holder<T>*>(content)->held;\n    }\n    template<typename T>\n    const T& cast() const {\n        return static_cast<const Holder<T>*>(content)->held;\n    }\n    const type_info& type() const {\n        return content ? content->type() : typeid(void);\n    }\nprivate:\n    struct Placeholder {\n//begin to write code\n"
    },
    {
        "task_id": 66,
        "prompt": "Write a python function to count positive numbers in a list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint pos_count(const std::vector<int>& list) {\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n            pos_count++;\n        }\n    }\n    return pos_count;\n}\n\n\n",
        "test": "int main() {\n    assert(pos_count({1, -2, 3, -4}) == 2);\n    assert(pos_count({3, 4, 5, -1}) == 3);\n    assert(pos_count({1, 2, 3, 4}) == 4);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint pos_count(const std::vector<int>& list) {\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count positive numbers in a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint pos_count(const std::vector<int>& list) {\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(pos_count({1, -2, 3, -4}) == 2);\n    assert(pos_count({3, 4, 5, -1}) == 3);\n    assert(pos_count({1, 2, 3, 4}) == 4);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint pos_count(const std::vector<int>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int pos_count = 0;\n    for (int num : list) {\n        if (num >= 0) {\n//begin to write code\n"
    },
    {
        "task_id": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nunsigned long long bell_number(int n) {\n    vector<vector<unsigned long long>> bell(n+1, vector<unsigned long long>(n+1, 0));\n    bell[0][0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        bell[i][0] = bell[i-1][i-1];\n        for (int j = 1; j <= i; ++j) {\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n        }\n    }\n    return bell[n][0];\n}\n\n\n",
        "test": "int main()\n{\n    assert(bell_number(2) == 2);\n    assert(bell_number(10) == 115975);\n    assert(bell_number(56) == 6775685320645824322581483068371419745979053216268760300ULL);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nunsigned long long bell_number(int n) {\n    vector<vector<unsigned long long>> bell(n+1, vector<unsigned long long>(n+1, 0));\n    bell[0][0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        bell[i][0] = bell[i-1][i-1];\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nunsigned long long bell_number(int n) {\n    vector<vector<unsigned long long>> bell(n+1, vector<unsigned long long>(n+1, 0));\n    bell[0][0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        bell[i][0] = bell[i-1][i-1];\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(bell_number(2) == 2);\n    assert(bell_number(10) == 115975);\n    assert(bell_number(56) == 6775685320645824322581483068371419745979053216268760300ULL);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nunsigned long long bell_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the number of ways to partition a set of bell numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<unsigned long long>> bell(n+1, vector<unsigned long long>(n+1, 0));\n    bell[0][0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        bell[i][0] = bell[i-1][i-1];\n//begin to write code\n"
    },
    {
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n        if (A[i] > A[i + 1]) increasing = false;\n        if (A[i] < A[i + 1]) decreasing = false;\n    }\n    return increasing || decreasing;\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_Monotonic({6, 5, 4, 4}) == true);\n    assert(is_Monotonic({1, 2, 2, 3}) == true);\n    assert(is_Monotonic({1, 3, 2}) == false);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given array is monotonic or not.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_Monotonic({6, 5, 4, 4}) == true);\n    assert(is_Monotonic({1, 2, 2, 3}) == true);\n    assert(is_Monotonic({1, 3, 2}) == false);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nbool is_Monotonic(std::vector<int> A) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool increasing = true;\n    bool decreasing = true;\n    for (int i = 0; i < A.size() - 1; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool is_sublist(const std::vector<int>& l, const std::vector<int>& s) {\n    bool sub_set = false;\n    if (s.empty()) {\n        sub_set = true;\n    } else if (s == l) {\n        sub_set = true;\n    } else if (s.size() > l.size()) {\n        sub_set = false;\n    } else {\n        for (size_t i = 0; i <= l.size() - s.size(); i++) {\n            if (l[i] == s[0]) {\n                size_t n = 1;\n                while (n < s.size() && l[i + n] == s[n]) {\n                    n++;\n                }\n                if (n == s.size()) {\n                    sub_set = true;\n                }\n            }\n        }\n    }\n    return sub_set;\n}\n\n\n",
        "test": "int main() {\n    assert(is_sublist({2, 4, 3, 5, 7}, {3, 7}) == false);\n    assert(is_sublist({2, 4, 3, 5, 7}, {4, 3}) == true);\n    assert(is_sublist({2, 4, 3, 5, 7}, {1, 6}) == false);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_sublist(const std::vector<int>& l, const std::vector<int>& s) {\n    bool sub_set = false;\n    if (s.empty()) {\n        sub_set = true;\n    } else if (s == l) {\n        sub_set = true;\n    } else if (s.size() > l.size()) {\n        sub_set = false;\n    } else {\n        for (size_t i = 0; i <= l.size() - s.size(); i++) {\n            if (l[i] == s[0]) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether a list contains the given sublist or not.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_sublist(const std::vector<int>& l, const std::vector<int>& s) {\n    bool sub_set = false;\n    if (s.empty()) {\n        sub_set = true;\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    } else if (s == l) {\n        sub_set = true;\n    } else if (s.size() > l.size()) {\n        sub_set = false;\n    } else {\n        for (size_t i = 0; i <= l.size() - s.size(); i++) {\n            if (l[i] == s[0]) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_sublist({2, 4, 3, 5, 7}, {3, 7}) == false);\n    assert(is_sublist({2, 4, 3, 5, 7}, {4, 3}) == true);\n    assert(is_sublist({2, 4, 3, 5, 7}, {1, 6}) == false);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_sublist(const std::vector<int>& l, const std::vector<int>& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether a list contains the given sublist or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool sub_set = false;\n    if (s.empty()) {\n        sub_set = true;\n    } else if (s == l) {\n        sub_set = true;\n    } else if (s.size() > l.size()) {\n        sub_set = false;\n    } else {\n        for (size_t i = 0; i <= l.size() - s.size(); i++) {\n            if (l[i] == s[0]) {\n//begin to write code\n"
    },
    {
        "task_id": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nbool find_equal_tuple(const vector<vector<int>>& input, int k) {\n    for (const auto& tuple : input) {\n        if (tuple.size() != k) {\n            return false;\n        }\n    }\n    return true;\n}\n\nstring get_equal(const vector<vector<int>>& input, int k) {\n    if (find_equal_tuple(input, k)) {\n        return \"All tuples have same length\";\n    } else {\n        return \"All tuples do not have same length\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(get_equal({{11, 22, 33}, {44, 55, 66}}, 3) == \"All tuples have same length\");\n    assert(get_equal({{1, 2, 3}, {4, 5, 6, 7}}, 3) == \"All tuples do not have same length\");\n    assert(get_equal({{1, 2}, {3, 4}}, 2) == \"All tuples have same length\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nbool find_equal_tuple(const vector<vector<int>>& input, int k) {\n    for (const auto& tuple : input) {\n        if (tuple.size() != k) {\n            return false;\n        }\n    }\n    return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nbool find_equal_tuple(const vector<vector<int>>& input, int k) {\n    for (const auto& tuple : input) {\n        if (tuple.size() != k) {\n            return false;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        }\n    }\n    return true;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_equal({{11, 22, 33}, {44, 55, 66}}, 3) == \"All tuples have same length\");\n    assert(get_equal({{1, 2, 3}, {4, 5, 6, 7}}, 3) == \"All tuples do not have same length\");\n    assert(get_equal({{1, 2}, {3, 4}}, 2) == \"All tuples have same length\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nbool find_equal_tuple(const vector<vector<int>>& input, int k) {\n    for (const auto& tuple : input) {\n        if (tuple.size() != k) {\n            return false;\n        }\n    }\n    return true;\n//begin to write code\n"
    },
    {
        "task_id": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.",
        "code_str": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    \n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n            if (nums[i] > nums[i + gaps]) {\n                std::swap(nums[i], nums[i + gaps]);\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> nums1 = {5, 15, 37, 25, 79};\n    std::vector<int> nums2 = {41, 32, 15, 19, 22};\n    std::vector<int> nums3 = {99, 15, 13, 47};\n    \n    assert(comb_sort(nums1) == std::vector<int>({5, 15, 25, 37, 79}));\n    assert(comb_sort(nums2) == std::vector<int>({15, 19, 22, 32, 41}));\n    assert(comb_sort(nums3) == std::vector<int>({13, 15, 47, 99}));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a list of elements using comb sort.",
        "perturbated_codes": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> nums1 = {5, 15, 37, 25, 79};\n    std::vector<int> nums2 = {41, 32, 15, 19, 22};\n    std::vector<int> nums3 = {99, 15, 13, 47};\n    \n    assert(comb_sort(nums1) == std::vector<int>({5, 15, 25, 37, 79}));\n    assert(comb_sort(nums2) == std::vector<int>({15, 19, 22, 32, 41}));\n    assert(comb_sort(nums3) == std::vector<int>({13, 15, 47, 99}));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::vector<int> comb_sort(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    float shrink_fact = 1.3;\n    int gaps = nums.size(), i;\n    bool swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = int(float(gaps) / shrink_fact);\n        swapped = false;\n        i = 0;\n        while (gaps + i < nums.size()) {\n//begin to write code\n"
    },
    {
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool dif_Square(int n) {\n    if (n % 4 != 2) {\n        return true;\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(dif_Square(5) == true);\n    assert(dif_Square(10) == false);\n    assert(dif_Square(15) == true);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool dif_Square(int n) {\n    if (n % 4 != 2) {\n        return true;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given number can be represented as difference of two squares or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool dif_Square(int n) {\n    if (n % 4 != 2) {\n        return true;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(dif_Square(5) == true);\n    assert(dif_Square(10) == false);\n    assert(dif_Square(15) == true);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool dif_Square(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 4 != 2) {\n        return true;\n//begin to write code\n"
    },
    {
        "task_id": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "code_str": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> multiple_split(const string& text) {\n    regex delimiter(R\"(;\\s|,\\s|\\*|\\\\n)\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), delimiter, -1);\n    sregex_token_iterator end;\n    while(iter != end) {\n        result.push_back(*iter++);\n    }\n    return result;\n}",
        "test": "int main() {\n    assert((multiple_split(\"Forces of the \\\\ndarkness*are coming into the play.\") == vector<string>{\"Forces of the \", \"darkness\", \"are coming into the play.\"}));\n    assert((multiple_split(\"Mi Box runs on the \\\\n Latest android*which has google assistance and chromecast.\") == vector<string>{\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"}));\n    assert((multiple_split(\"Certain services\\\\nare subjected to change*over the seperate subscriptions.\") == vector<string>{\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> multiple_split(const string& text) {\n    regex delimiter(R\"(;\\s|,\\s|\\*|\\\\n)\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), delimiter, -1);\n    sregex_token_iterator end;\n//begin to write code\n",
        "cpp_prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> multiple_split(const string& text) {\ndouble temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    regex delimiter(R\"(;\\s|,\\s|\\*|\\\n)\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), delimiter, -1);\n    sregex_token_iterator end;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((multiple_split(\"Forces of the \\\\ndarkness*are coming into the play.\") == vector<string>{\"Forces of the \", \"darkness\", \"are coming into the play.\"}));\n    assert((multiple_split(\"Mi Box runs on the \\\\n Latest android*which has google assistance and chromecast.\") == vector<string>{\"Mi Box runs on the \", \" Latest android\", \"which has google assistance and chromecast.\"}));\n    assert((multiple_split(\"Certain services\\\\nare subjected to change*over the seperate subscriptions.\") == vector<string>{\"Certain services\", \"are subjected to change\", \"over the seperate subscriptions.\"}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> multiple_split(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split the given string with multiple delimiters by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex delimiter(R\"(;\\s|,\\s|\\*|\\\\n)\");\n    vector<string> result;\n    sregex_token_iterator iter(text.begin(), text.end(), delimiter, -1);\n    sregex_token_iterator end;\n//begin to write code\n"
    },
    {
        "task_id": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\n\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n    if (colors.size() != patterns.size()) {\n        return false;\n    }\n\n    std::map<std::string, std::vector<std::string>> sdict;\n    std::set<std::string> pset;\n    std::set<std::string> sset;\n\n    for (size_t i = 0; i < patterns.size(); ++i) {\n        pset.insert(patterns[i]);\n        sset.insert(colors[i]);\n        sdict[patterns[i]].push_back(colors[i]);\n    }\n\n    if (pset.size() != sset.size()) {\n        return false;\n    }\n\n    for (auto& key_value : sdict) {\n        std::vector<std::string>& values = key_value.second;\n        for (size_t i = 0; i < values.size() - 1; ++i) {\n            if (values[i] != values[i+1]) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(is_samepatterns({\"red\",\"green\",\"green\"}, {\"a\", \"b\", \"b\"}) == true);\n    assert(is_samepatterns({\"red\",\"green\",\"greenn\"}, {\"a\", \"b\", \"b\"}) == false);\n    assert(is_samepatterns({\"red\",\"green\",\"greenn\"}, {\"a\", \"b\"}) == false);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n    if (colors.size() != patterns.size()) {\n        return false;\n    }\n    std::map<std::string, std::vector<std::string>> sdict;\n    std::set<std::string> pset;\n    std::set<std::string> sset;\n    for (size_t i = 0; i < patterns.size(); ++i) {\n        pset.insert(patterns[i]);\n        sset.insert(colors[i]);\n        sdict[patterns[i]].push_back(colors[i]);\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n    if (colors.size() != patterns.size()) {\n        return false;\n    }\n    std::map<std::string, std::vector<std::string>> sdict;\n    std::set<std::string> pset;\n    std::set<std::string> sset;\n    for (size_t i = 0; i < patterns.size(); ++i) {\n        pset.insert(patterns[i]);\n        sset.insert(colors[i]);\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        sdict[patterns[i]].push_back(colors[i]);\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_samepatterns({\"red\",\"green\",\"green\"}, {\"a\", \"b\", \"b\"}) == true);\n    assert(is_samepatterns({\"red\",\"green\",\"greenn\"}, {\"a\", \"b\", \"b\"}) == false);\n    assert(is_samepatterns({\"red\",\"green\",\"greenn\"}, {\"a\", \"b\"}) == false);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <string>\nbool is_samepatterns(std::vector<std::string> colors, std::vector<std::string> patterns) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether it follows the sequence given in the patterns array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (colors.size() != patterns.size()) {\n        return false;\n    }\n    std::map<std::string, std::vector<std::string>> sdict;\n    std::set<std::string> pset;\n    std::set<std::string> sset;\n    for (size_t i = 0; i < patterns.size(); ++i) {\n        pset.insert(patterns[i]);\n        sset.insert(colors[i]);\n        sdict[patterns[i]].push_back(colors[i]);\n    }\n//begin to write code\n"
    },
    {
        "task_id": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <sstream>\n#include <cassert>\n\nstd::string find_tuples(const std::vector<std::vector<int>>& test_list, int K) {\n    std::vector<std::vector<int>> res;\n    for (const auto& sub : test_list) {\n        bool all_divisible = true;\n        for (int ele : sub) {\n            if (ele % K != 0) {\n                all_divisible = false;\n                break;\n            }\n        }\n        if (all_divisible) {\n            res.push_back(sub);\n        }\n    }\n    std::ostringstream stream;\n    stream << \"[\";\n    for (size_t i = 0; i < res.size(); ++i) {\n        stream << \"(\";\n        for (size_t j = 0; j < res[i].size(); ++j) {\n            stream << res[i][j];\n            if (j < res[i].size() - 1) stream << \", \";\n        }\n        stream << \")\";\n        if (i < res.size() - 1) stream << \", \";\n    }\n    stream << \"]\";\n    return stream.str();\n}\n\n\n",
        "test": "int main() {\n    assert(find_tuples({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6) == \"[(6, 24, 12)]\");\n    assert(find_tuples({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5) == \"[(5, 25, 30)]\");\n    assert(find_tuples({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4) == \"[(8, 16, 4)]\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <cassert>\nstd::string find_tuples(const std::vector<std::vector<int>>& test_list, int K) {\n    std::vector<std::vector<int>> res;\n    for (const auto& sub : test_list) {\n        bool all_divisible = true;\n        for (int ele : sub) {\n            if (ele % K != 0) {\n                all_divisible = false;\n                break;\n            }\n        }\n        if (all_divisible) {\n            res.push_back(sub);\n        }\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <cassert>\nstd::string find_tuples(const std::vector<std::vector<int>>& test_list, int K) {\n    std::vector<std::vector<int>> res;\n    for (const auto& sub : test_list) {\n        bool all_divisible = true;\n        for (int ele : sub) {\n            if (ele % K != 0) {\n                all_divisible = false;\n                break;\n            }\n        }\n        if (all_divisible) {\n            res.push_back(sub);\n            double temp_var_7 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n        }\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_tuples({{6, 24, 12}, {7, 9, 6}, {12, 18, 21}}, 6) == \"[(6, 24, 12)]\");\n    assert(find_tuples({{5, 25, 30}, {4, 2, 3}, {7, 8, 9}}, 5) == \"[(5, 25, 30)]\");\n    assert(find_tuples({{7, 9, 16}, {8, 16, 4}, {19, 17, 18}}, 4) == \"[(8, 16, 4)]\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <cassert>\nstd::string find_tuples(const std::vector<std::vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<int>> res;\n    for (const auto& sub : test_list) {\n        bool all_divisible = true;\n        for (int ele : sub) {\n            if (ele % K != 0) {\n                all_divisible = false;\n                break;\n            }\n        }\n        if (all_divisible) {\n            res.push_back(sub);\n        }\n    }\n//begin to write code\n"
    },
    {
        "task_id": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n        n = temp;\n    }\n    return ((m * (m + 1) * (2 * m + 1) / 6.0) + (n - m) * m * (m + 1) / 2.0);\n}\n\n\n",
        "test": "int main() {\n    assert(count_Squares(4,3) == 20);\n    assert(count_Squares(2,2) == 5);\n    assert(count_Squares(1,1) == 1);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of squares in a rectangle.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Squares(4,3) == 20);\n    assert(count_Squares(2,2) == 5);\n    assert(count_Squares(1,1) == 1);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble count_Squares(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < m) {\n        int temp = m;\n        m = n;\n//begin to write code\n"
    },
    {
        "task_id": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool is_Diff(int n) {\n    return (n % 11 == 0);\n}\n\n\n",
        "test": "int main() {\n    assert(is_Diff(12345) == false);\n    assert(is_Diff(1212112) == true);\n    assert(is_Diff(1212) == false);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool is_Diff(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the difference between sum of even and odd digits.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool is_Diff(int n) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_Diff(12345) == false);\n    assert(is_Diff(1212112) == true);\n    assert(is_Diff(1212) == false);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_Diff(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the difference between sum of even and odd digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <bitset>\n\nint countWithOddSetBits(int n) {\n    if (n % 2 != 0) {\n        return (n + 1) / 2;\n    }\n    int count = std::bitset<32>(n).count();\n    int ans = n / 2;\n    if (count % 2 != 0) {\n        ans += 1;\n    }\n    return ans;\n}\n\n\n",
        "test": "int main() {\n    assert(countWithOddSetBits(5) == 3);\n    assert(countWithOddSetBits(10) == 5);\n    assert(countWithOddSetBits(15) == 8);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <bitset>\nint countWithOddSetBits(int n) {\n    if (n % 2 != 0) {\n        return (n + 1) / 2;\n    }\n    int count = std::bitset<32>(n).count();\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find number of integers with odd number of set bits.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <bitset>\nint countWithOddSetBits(int n) {\n    if (n % 2 != 0) {\n        return (n + 1) / 2;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n    }\n    int count = std::bitset<32>(n).count();\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(countWithOddSetBits(5) == 3);\n    assert(countWithOddSetBits(10) == 5);\n    assert(countWithOddSetBits(15) == 8);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <bitset>\nint countWithOddSetBits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find number of integers with odd number of set bits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 != 0) {\n        return (n + 1) / 2;\n    }\n    int count = std::bitset<32>(n).count();\n//begin to write code\n"
    },
    {
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nbool word_len(std::string s) {\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n        if (w.length() % 2 != 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main()\n{\n    assert(word_len(\"Hadoop\") == false);\n    assert(word_len(\"great\") == true);\n    assert(word_len(\"structure\") == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\nbool word_len(std::string s) {\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the length of the word is odd or not.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\nbool word_len(std::string s) {\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(word_len(\"Hadoop\") == false);\n    assert(word_len(\"great\") == true);\n    assert(word_len(\"structure\") == true);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <cassert>\nbool word_len(std::string s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::istringstream iss(s);\n    std::vector<std::string> words;\n    std::string word;\n    while (iss >> word) {\n        words.push_back(word);\n    }\n    for (std::string w : words) {\n//begin to write code\n"
    },
    {
        "task_id": 80,
        "prompt": "Write a function to find the nth tetrahedral number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble tetrahedral_number(int n) {\n    return (n * (n + 1) * (n + 2)) / 6.0;\n}\n\n\n",
        "test": "int main() {\n    assert(tetrahedral_number(5) == 35.0);\n    assert(tetrahedral_number(6) == 56.0);\n    assert(tetrahedral_number(7) == 84.0);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble tetrahedral_number(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nth tetrahedral number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble tetrahedral_number(int n) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(tetrahedral_number(5) == 35.0);\n    assert(tetrahedral_number(6) == 56.0);\n    assert(tetrahedral_number(7) == 84.0);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble tetrahedral_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nth tetrahedral number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 81,
        "prompt": "Write a function to zip the two given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<int, int>> zip_tuples(const vector<int>& test_tup1, const vector<int>& test_tup2) {\n    vector<pair<int, int>> res;\n    int n2 = test_tup2.size();\n    for (size_t i = 0; i < test_tup1.size(); ++i) {\n        res.push_back(make_pair(test_tup1[i], test_tup2[i % n2]));\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert((zip_tuples({7, 8, 4, 5, 9, 10}, {1, 5, 6}) == vector<pair<int, int>>{{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}));\n    assert((zip_tuples({8, 9, 5, 6, 10, 11}, {2, 6, 7}) == vector<pair<int, int>>{{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}));\n    assert((zip_tuples({9, 10, 6, 7, 11, 12}, {3, 7, 8}) == vector<pair<int, int>>{{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> zip_tuples(const vector<int>& test_tup1, const vector<int>& test_tup2) {\n    vector<pair<int, int>> res;\n    int n2 = test_tup2.size();\n    for (size_t i = 0; i < test_tup1.size(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to zip the two given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> zip_tuples(const vector<int>& test_tup1, const vector<int>& test_tup2) {\n    vector<pair<int, int>> res;\n    int n2 = test_tup2.size();\n    for (size_t i = 0; i < test_tup1.size(); ++i) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((zip_tuples({7, 8, 4, 5, 9, 10}, {1, 5, 6}) == vector<pair<int, int>>{{7, 1}, {8, 5}, {4, 6}, {5, 1}, {9, 5}, {10, 6}}));\n    assert((zip_tuples({8, 9, 5, 6, 10, 11}, {2, 6, 7}) == vector<pair<int, int>>{{8, 2}, {9, 6}, {5, 7}, {6, 2}, {10, 6}, {11, 7}}));\n    assert((zip_tuples({9, 10, 6, 7, 11, 12}, {3, 7, 8}) == vector<pair<int, int>>{{9, 3}, {10, 7}, {6, 8}, {7, 3}, {11, 7}, {12, 8}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> zip_tuples(const vector<int>& test_tup1, const vector<int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to zip the two given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<pair<int, int>> res;\n    int n2 = test_tup2.size();\n    for (size_t i = 0; i < test_tup1.size(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 82,
        "prompt": "Write a function to find the volume of a sphere.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_sphere(double r) {\n    double volume = (4.0 / 3.0) * M_PI * r * r * r;\n    return volume;\n}\n\n\n",
        "test": "int main() {\n    assert(std::abs(volume_sphere(10) - 4188.790204786391) < 0.0001);\n    assert(std::abs(volume_sphere(25) - 65449.84694978735) < 0.0001);\n    assert(std::abs(volume_sphere(20) - 33510.32163829113) < 0.0001);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n    double volume = (4.0 / 3.0) * M_PI * r * r * r;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the volume of a sphere.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    double volume = (4.0 / 3.0) * M_PI * r * r * r;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(std::abs(volume_sphere(10) - 4188.790204786391) < 0.0001);\n    assert(std::abs(volume_sphere(25) - 65449.84694978735) < 0.0001);\n    assert(std::abs(volume_sphere(20) - 33510.32163829113) < 0.0001);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_sphere(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double volume = (4.0 / 3.0) * M_PI * r * r * r;\n//begin to write code\n"
    },
    {
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nchar get_Char(std::string strr) {\n    int summ = 0;\n    for (int i = 0; i < strr.length(); ++i) {\n        summ += (strr[i] - 'a' + 1);\n    }\n    if (summ % 26 == 0) {\n        return 'z';\n    } else {\n        summ = summ % 26;\n        return 'a' + summ - 1;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(get_Char(\"abc\") == 'f');\n    assert(get_Char(\"gfg\") == 't');\n    assert(get_Char(\"ab\") == 'c');\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nchar get_Char(std::string strr) {\n    int summ = 0;\n    for (int i = 0; i < strr.length(); ++i) {\n        summ += (strr[i] - 'a' + 1);\n    }\n    if (summ % 26 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the character made by adding all the characters of the given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nchar get_Char(std::string strr) {\n    int summ = 0;\n    for (int i = 0; i < strr.length(); ++i) {\n        summ += (strr[i] - 'a' + 1);\n    }\n    if (summ % 26 == 0) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_Char(\"abc\") == 'f');\n    assert(get_Char(\"gfg\") == 't');\n    assert(get_Char(\"ab\") == 'c');\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nchar get_Char(std::string strr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the character made by adding all the characters of the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int summ = 0;\n    for (int i = 0; i < strr.length(); ++i) {\n        summ += (strr[i] - 'a' + 1);\n    }\n    if (summ % 26 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint sequence(int n) {\n    if (n == 1 || n == 2) {\n        return 1;\n    } else {\n        return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(sequence(10) == 6);\n    assert(sequence(2) == 1);\n    assert(sequence(3) == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint sequence(int n) {\n    if (n == 1 || n == 2) {\n        return 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n-th number in newman conway sequence.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint sequence(int n) {\n    if (n == 1 || n == 2) {\n        return 1;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sequence(10) == 6);\n    assert(sequence(2) == 1);\n    assert(sequence(3) == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint sequence(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n-th number in newman conway sequence.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 1 || n == 2) {\n        return 1;\n//begin to write code\n"
    },
    {
        "task_id": 85,
        "prompt": "Write a function to find the surface area of a sphere.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble surfacearea_sphere(double r) {\n    double surfacearea = 4 * M_PI * r * r;\n    return surfacearea;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(surfacearea_sphere(10) - 1256.6370614359173) < 1e-9);\n    assert(abs(surfacearea_sphere(15) - 2827.4333882308138) < 1e-9);\n    assert(abs(surfacearea_sphere(20) - 5026.548245743669) < 1e-9);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble surfacearea_sphere(double r) {\n    double surfacearea = 4 * M_PI * r * r;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the surface area of a sphere.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble surfacearea_sphere(double r) {\n    double surfacearea = 4 * M_PI * r * r;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(surfacearea_sphere(10) - 1256.6370614359173) < 1e-9);\n    assert(abs(surfacearea_sphere(15) - 2827.4333882308138) < 1e-9);\n    assert(abs(surfacearea_sphere(20) - 5026.548245743669) < 1e-9);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble surfacearea_sphere(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double surfacearea = 4 * M_PI * r * r;\n//begin to write code\n"
    },
    {
        "task_id": 86,
        "prompt": "Write a function to find nth centered hexagonal number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint centered_hexagonal_number(int n) {\n    return 3 * n * (n - 1) + 1;\n}\n\n\n",
        "test": "int main() {\n    assert(centered_hexagonal_number(10) == 271);\n    assert(centered_hexagonal_number(2) == 7);\n    assert(centered_hexagonal_number(9) == 217);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint centered_hexagonal_number(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find nth centered hexagonal number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint centered_hexagonal_number(int n) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(centered_hexagonal_number(10) == 271);\n    assert(centered_hexagonal_number(2) == 7);\n    assert(centered_hexagonal_number(9) == 217);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint centered_hexagonal_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find nth centered hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.",
        "code_str": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, string> merge_dictionaries_three(map<string, string> dict1, map<string, string> dict2, map<string, string> dict3) {\n    map<string, string> merged_dict;\n\n    for (const auto &pair : dict3) {\n        merged_dict[pair.first] = pair.second;\n    }\n    for (const auto &pair : dict2) {\n        merged_dict[pair.first] = pair.second;\n    }\n    for (const auto &pair : dict1) {\n        merged_dict[pair.first] = pair.second;\n    }\n\n    return merged_dict;\n}\n\n\n",
        "test": "int main() {\n    map<string, string> result1 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} }, { {\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"} });\n    map<string, string> expected1 = {{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}};\n    assert(result1 == expected1);\n\n    map<string, string> result2 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} }, { {\"L\", \"lavender\"}, {\"B\", \"Blue\"} });\n    map<string, string> expected2 = {{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}};\n    assert(result2 == expected2);\n\n    map<string, string> result3 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"L\", \"lavender\"}, {\"B\", \"Blue\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} });\n    map<string, string> expected3 = {{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}};\n    assert(result3 == expected3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <map>\n#include <cassert>\nusing namespace std;\nmap<string, string> merge_dictionaries_three(map<string, string> dict1, map<string, string> dict2, map<string, string> dict3) {\n    map<string, string> merged_dict;\n    for (const auto &pair : dict3) {\n        merged_dict[pair.first] = pair.second;\n    }\n    for (const auto &pair : dict2) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to merge three dictionaries into a single expression.",
        "perturbated_codes": "#include <iostream>\n#include <map>\n#include <cassert>\nusing namespace std;\nmap<string, string> merge_dictionaries_three(map<string, string> dict1, map<string, string> dict2, map<string, string> dict3) {\n    map<string, string> merged_dict;\n    for (const auto &pair : dict3) {\n        merged_dict[pair.first] = pair.second;\n    }\n    for (const auto &pair : dict2) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    map<string, string> result1 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} }, { {\"O\", \"Orange\"}, {\"W\", \"White\"}, {\"B\", \"Black\"} });\n    map<string, string> expected1 = {{\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"P\", \"Pink\"}, {\"G\", \"Green\"}, {\"W\", \"White\"}, {\"O\", \"Orange\"}};\n    assert(result1 == expected1);\n\n    map<string, string> result2 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} }, { {\"L\", \"lavender\"}, {\"B\", \"Blue\"} });\n    map<string, string> expected2 = {{\"W\", \"White\"}, {\"P\", \"Pink\"}, {\"B\", \"Black\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}};\n    assert(result2 == expected2);\n\n    map<string, string> result3 = merge_dictionaries_three({ {\"R\", \"Red\"}, {\"B\", \"Black\"}, {\"P\", \"Pink\"} }, { {\"L\", \"lavender\"}, {\"B\", \"Blue\"} }, { {\"G\", \"Green\"}, {\"W\", \"White\"} });\n    map<string, string> expected3 = {{\"B\", \"Black\"}, {\"P\", \"Pink\"}, {\"R\", \"Red\"}, {\"G\", \"Green\"}, {\"L\", \"lavender\"}, {\"W\", \"White\"}};\n    assert(result3 == expected3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nusing namespace std;\nmap<string, string> merge_dictionaries_three(map<string, string> dict1, map<string, string> dict2, map<string, string> dict3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, string> merged_dict;\n    for (const auto &pair : dict3) {\n        merged_dict[pair.first] = pair.second;\n    }\n    for (const auto &pair : dict2) {\n//begin to write code\n"
    },
    {
        "task_id": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.",
        "code_str": "\n#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\n\nstd::map<int, int> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n        freq_count[num]++;\n    }\n    return freq_count;\n}\n\n\n",
        "test": "int main() {\n    // Test case 1\n    std::map<int, int> result1 = freq_count({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30});\n    assert(result1[10] == 4);\n    assert(result1[20] == 4);\n    assert(result1[40] == 2);\n    assert(result1[50] == 2);\n    assert(result1[30] == 1);\n\n    // Test case 2\n    std::map<int, int> result2 = freq_count({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4});\n    assert(result2[1] == 3);\n    assert(result2[2] == 2);\n    assert(result2[3] == 3);\n    assert(result2[4] == 3);\n\n    // Test case 3\n    std::map<int, int> result3 = freq_count({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5});\n    assert(result3[10] == 1);\n    assert(result3[5] == 3);\n    assert(result3[6] == 2);\n    assert(result3[7] == 2);\n    assert(result3[4] == 2);\n    assert(result3[9] == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to get the frequency of the elements in a list.",
        "perturbated_codes": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> list1) {\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test case 1\n    std::map<int, int> result1 = freq_count({10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30});\n    assert(result1[10] == 4);\n    assert(result1[20] == 4);\n    assert(result1[40] == 2);\n    assert(result1[50] == 2);\n    assert(result1[30] == 1);\n\n    // Test case 2\n    std::map<int, int> result2 = freq_count({1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4});\n    assert(result2[1] == 3);\n    assert(result2[2] == 2);\n    assert(result2[3] == 3);\n    assert(result2[4] == 3);\n\n    // Test case 3\n    std::map<int, int> result3 = freq_count({5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5});\n    assert(result3[10] == 1);\n    assert(result3[5] == 3);\n    assert(result3[6] == 2);\n    assert(result3[7] == 2);\n    assert(result3[4] == 2);\n    assert(result3[9] == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <map>\n#include <vector>\n#include <cassert>\nstd::map<int, int> freq_count(std::vector<int> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<int, int> freq_count;\n    for (int num : list1) {\n//begin to write code\n"
    },
    {
        "task_id": 89,
        "prompt": "Write a function to find the closest smaller number than n.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint closest_num(int N) {\n    return (N - 1);\n}\n\n\n",
        "test": "int main() {\n    assert(closest_num(11) == 10);\n    assert(closest_num(7) == 6);\n    assert(closest_num(12) == 11);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint closest_num(int N) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the closest smaller number than n.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint closest_num(int N) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(closest_num(11) == 10);\n    assert(closest_num(7) == 6);\n    assert(closest_num(12) == 11);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint closest_num(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the closest smaller number than n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n            max = i.length();\n        }\n    }\n    return max;\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(len_log({\"python\", \"PHP\", \"bigdata\"}) == 7);\n    assert(len_log({\"a\", \"ab\", \"abc\"}) == 3);\n    assert(len_log({\"small\", \"big\", \"tall\"}) == 5);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the length of the longest word.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(len_log({\"python\", \"PHP\", \"bigdata\"}) == 7);\n    assert(len_log({\"a\", \"ab\", \"abc\"}) == 3);\n    assert(len_log({\"small\", \"big\", \"tall\"}) == 5);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint len_log(const std::vector<std::string>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max = list1[0].length();\n    for (const std::string& i : list1) {\n        if (i.length() > max) {\n//begin to write code\n"
    },
    {
        "task_id": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (auto &s : str1) {\n        if (s.find(sub_str) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ack\") == true);\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"abc\") == false);\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ange\") == true);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (auto &s : str1) {\n        if (s.find(sub_str) != std::string::npos) {\n            return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if a substring is present in a given list of string values.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n    for (auto &s : str1) {\n        if (s.find(sub_str) != std::string::npos) {\n            return true;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ack\") == true);\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"abc\") == false);\n    assert(find_substring({\"red\", \"black\", \"white\", \"green\", \"orange\"}, \"ange\") == true);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nbool find_substring(std::vector<std::string> str1, std::string sub_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a substring is present in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (auto &s : str1) {\n        if (s.find(sub_str) != std::string::npos) {\n            return true;\n//begin to write code\n"
    },
    {
        "task_id": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool is_undulating(const std::string& n) {\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n        if (n[i - 2] != n[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_undulating(\"1212121\") == true);\n    assert(is_undulating(\"1991\") == false);\n    assert(is_undulating(\"121\") == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nbool is_undulating(const std::string& n) {\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the given number is undulating or not.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nbool is_undulating(const std::string& n) {\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_undulating(\"1212121\") == true);\n    assert(is_undulating(\"1991\") == false);\n    assert(is_undulating(\"121\") == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool is_undulating(const std::string& n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given number is undulating or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n.length() <= 2) {\n        return false;\n    }\n    for (size_t i = 2; i < n.length(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n    } else if (b == 1) {\n        return a;\n    } else {\n        return a * power(a, b - 1);\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(power(3, 4) == 81);\n    assert(power(2, 3) == 8);\n    assert(power(5, 5) == 3125);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n    if (b == 0) {\n        return 1;\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    } else if (a == 0) {\n        return 0;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(power(3, 4) == 81);\n    assert(power(2, 3) == 8);\n    assert(power(5, 5) == 3125);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint power(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (b == 0) {\n        return 1;\n    } else if (a == 0) {\n        return 0;\n//begin to write code\n"
    },
    {
        "task_id": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <limits>\n\nstd::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {\n    auto min_elem = std::min_element(test_list.begin(), test_list.end(),\n                                     [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {\n                                         return a.second < b.second;\n                                     });\n    return min_elem->first;\n}\n\n\n",
        "test": "int main() {\n    assert(index_minimum({{\"Rash\", 143}, {\"Manjeet\", 200}, {\"Varsha\", 100}}) == \"Varsha\");\n    assert(index_minimum({{\"Yash\", 185}, {\"Dawood\", 125}, {\"Sanya\", 175}}) == \"Dawood\");\n    assert(index_minimum({{\"Sai\", 345}, {\"Salman\", 145}, {\"Ayesha\", 96}}) == \"Ayesha\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <limits>\nstd::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {\n    auto min_elem = std::min_element(test_list.begin(), test_list.end(),\n                                     [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <limits>\nstd::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {\n    auto min_elem = std::min_element(test_list.begin(), test_list.end(),\n                                     [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {\n                                     double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(index_minimum({{\"Rash\", 143}, {\"Manjeet\", 200}, {\"Varsha\", 100}}) == \"Varsha\");\n    assert(index_minimum({{\"Yash\", 185}, {\"Dawood\", 125}, {\"Sanya\", 175}}) == \"Dawood\");\n    assert(index_minimum({{\"Sai\", 345}, {\"Salman\", 145}, {\"Ayesha\", 96}}) == \"Ayesha\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n#include <limits>\nstd::string index_minimum(const std::vector<std::pair<std::string, int>>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the index minimum value record from the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto min_elem = std::min_element(test_list.begin(), test_list.end(),\n                                     [](const std::pair<std::string, int>& a, const std::pair<std::string, int>& b) {\n//begin to write code\n"
    },
    {
        "task_id": 95,
        "prompt": "Write a python function to find the minimum length of sublist.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\n\nusing namespace std;\n\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n            minLength = v.size();\n        }\n    }\n    return minLength;\n}\n\n\n",
        "test": "int main()\n{\n    vector<vector<int>> test1 {{1}, {1, 2}};\n    assert(Find_Min_Length(test1) == 1);\n\n    vector<vector<int>> test2 {{1, 2}, {1, 2, 3}, {1, 2, 3, 4}};\n    assert(Find_Min_Length(test2) == 2);\n\n    vector<vector<int>> test3 {{3, 3, 3}, {4, 4, 4, 4}};\n    assert(Find_Min_Length(test3) == 3);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the minimum length of sublist.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<vector<int>> test1 {{1}, {1, 2}};\n    assert(Find_Min_Length(test1) == 1);\n\n    vector<vector<int>> test2 {{1, 2}, {1, 2, 3}, {1, 2, 3, 4}};\n    assert(Find_Min_Length(test2) == 2);\n\n    vector<vector<int>> test3 {{3, 3, 3}, {4, 4, 4, 4}};\n    assert(Find_Min_Length(test3) == 3);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint Find_Min_Length(vector<vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minLength = INT_MAX;\n    for (auto& v : lst) {\n        if (v.size() < minLength) {\n//begin to write code\n"
    },
    {
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n            x++;\n        }\n    }\n    return x;\n}\n\n\n",
        "test": "int main() {\n    assert(divisor(15) == 4);\n    assert(divisor(12) == 6);\n    assert(divisor(9) == 3);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the number of divisors of a given integer.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(divisor(15) == 4);\n    assert(divisor(12) == 6);\n    assert(divisor(9) == 3);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint divisor(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int x = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (n % i == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 97,
        "prompt": "Write a function to find frequency count of list of lists.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n    for (auto& num : flat_list) {\n        if (dic_data.find(num) != dic_data.end()) {\n            dic_data[num]++;\n        } else {\n            dic_data[num] = 1;\n        }\n    }\n    return dic_data;\n}\n\n\n",
        "test": "int main() {\n    vector<vector<int>> test1{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}};\n    unordered_map<int, int> result1 = frequency_lists(test1);\n    assert((result1 == unordered_map<int, int>{{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}));\n\n    vector<vector<int>> test2{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};\n    unordered_map<int, int> result2 = frequency_lists(test2);\n    assert((result2 == unordered_map<int, int>{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}));\n\n    vector<vector<int>> test3{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}};\n    unordered_map<int, int> result3 = frequency_lists(test3);\n    assert((result3 == unordered_map<int, int>{{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find frequency count of list of lists.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n        double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<int>> test1{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 8, 9, 5}};\n    unordered_map<int, int> result1 = frequency_lists(test1);\n    assert((result1 == unordered_map<int, int>{{1, 1}, {2, 3}, {3, 1}, {4, 1}, {5, 2}, {6, 1}, {7, 1}, {8, 1}, {9, 1}}));\n\n    vector<vector<int>> test2{{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}};\n    unordered_map<int, int> result2 = frequency_lists(test2);\n    assert((result2 == unordered_map<int, int>{{1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1}, {10, 1}, {11, 1}, {12, 1}}));\n\n    vector<vector<int>> test3{{20, 30, 40, 17}, {18, 16, 14, 13}, {10, 20, 30, 40}};\n    unordered_map<int, int> result3 = frequency_lists(test3);\n    assert((result3 == unordered_map<int, int>{{20, 2}, {30, 2}, {40, 2}, {17, 1}, {18, 1}, {16, 1}, {14, 1}, {13, 1}, {10, 1}}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nunordered_map<int, int> frequency_lists(vector<vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> flat_list;\n    for (auto& sublist : list1) {\n        for (auto& item : sublist) {\n            flat_list.push_back(item);\n        }\n    }\n    unordered_map<int, int> dic_data;\n//begin to write code\n"
    },
    {
        "task_id": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n        total *= x;\n    }\n    return total / numbers.size();\n}\n\n\n",
        "test": "int main() {\n    assert(multiply_num({8, 2, 3, -1, 7}) == -67.2);\n    assert(multiply_num({-10, -20, -30}) == -2000.0);\n    assert(multiply_num({19, 15, 18}) == 1710.0);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n    double total = 1;\n    for (int x : numbers) {\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(multiply_num({8, 2, 3, -1, 7}) == -67.2);\n    assert(multiply_num({-10, -20, -30}) == -2000.0);\n    assert(multiply_num({19, 15, 18}) == 1710.0);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ndouble multiply_num(const std::vector<int>& numbers) {\n\n    /*\n    progame language:cpp\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double total = 1;\n    for (int x : numbers) {\n//begin to write code\n"
    },
    {
        "task_id": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "code_str": "\n#include <iostream>\n#include <bitset>\n#include <cassert>\n\nstd::string decimal_to_binary(int n) {\n    return std::bitset<32>(n).to_string().erase(0, std::bitset<32>(n).to_string().find_first_not_of('0'));\n}\n\n\n",
        "test": "int main() {\n    assert(decimal_to_binary(8) == \"1000\");\n    assert(decimal_to_binary(18) == \"10010\");\n    assert(decimal_to_binary(7) == \"111\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <bitset>\n#include <cassert>\nstd::string decimal_to_binary(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "perturbated_codes": "#include <iostream>\n#include <bitset>\n#include <cassert>\nstd::string decimal_to_binary(int n) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(decimal_to_binary(8) == \"1000\");\n    assert(decimal_to_binary(18) == \"10010\");\n    assert(decimal_to_binary(7) == \"111\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <bitset>\n#include <cassert>\nstd::string decimal_to_binary(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "code_str": "\n#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\n\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n            return i;\n        }\n    }\n    return -1; // Should never reach here for realistic input ranges\n}\n\n\n",
        "test": "int main()\n{\n    assert(next_smallest_palindrome(99) == 101);\n    assert(next_smallest_palindrome(1221) == 1331);\n    assert(next_smallest_palindrome(120) == 121);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "perturbated_codes": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(next_smallest_palindrome(99) == 101);\n    assert(next_smallest_palindrome(1221) == 1331);\n    assert(next_smallest_palindrome(120) == 121);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <climits>\n#include <string>\n#include <cassert>\nint next_smallest_palindrome(int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = num + 1; i < INT_MAX; ++i) {\n        std::string num_str = std::to_string(i);\n        std::string reversed_str = std::string(num_str.rbegin(), num_str.rend());\n        if (num_str == reversed_str) {\n//begin to write code\n"
    },
    {
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n            }\n        }\n    }\n    return arr[k - 1];\n}\n\n\n",
        "test": "int main() {\n    vector<int> arr1 = {12, 3, 5, 7, 19};\n    assert(kth_element(arr1, 5, 2) == 5);\n\n    vector<int> arr2 = {17, 24, 8, 23};\n    assert(kth_element(arr2, 4, 3) == 23);\n\n    vector<int> arr3 = {16, 21, 25, 36, 4};\n    assert(kth_element(arr3, 5, 4) == 25);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the kth element in the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n                double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> arr1 = {12, 3, 5, 7, 19};\n    assert(kth_element(arr1, 5, 2) == 5);\n\n    vector<int> arr2 = {17, 24, 8, 23};\n    assert(kth_element(arr2, 4, 3) == 23);\n\n    vector<int> arr3 = {16, 21, 25, 36, 4};\n    assert(kth_element(arr3, 5, 4) == 25);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint kth_element(vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the kth element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                swap(arr[j], arr[j + 1]);\n//begin to write code\n"
    },
    {
        "task_id": 102,
        "prompt": "Write a function to convert snake case string to camel case string.",
        "code_str": "\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nstd::string snake_to_camel(const std::string& word) {\n    std::vector<std::string> parts;\n    std::string part;\n    std::istringstream tokenStream(word);\n    while (getline(tokenStream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = toupper(part[0]); // Capitalize the first letter\n            parts.push_back(part);\n        } else {\n            parts.push_back(\"_\");\n        }\n    }\n    std::string camelCase;\n    for (const auto& p : parts) {\n        camelCase += p;\n    }\n    return camelCase;\n}\n\n\n",
        "test": "int main() {\n    assert(snake_to_camel(\"python_program\") == \"PythonProgram\");\n    assert(snake_to_camel(\"python_language\") == \"PythonLanguage\");\n    assert(snake_to_camel(\"programming_language\") == \"ProgrammingLanguage\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::vector<std::string> parts;\n    std::string part;\n    std::istringstream tokenStream(word);\n    while (getline(tokenStream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = toupper(part[0]); // Capitalize the first letter\n            parts.push_back(part);\n        } else {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert snake case string to camel case string.",
        "perturbated_codes": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::vector<std::string> parts;\n    std::string part;\n    std::istringstream tokenStream(word);\n    while (getline(tokenStream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = toupper(part[0]); // Capitalize the first letter\n            parts.push_back(part);\n        } else {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(snake_to_camel(\"python_program\") == \"PythonProgram\");\n    assert(snake_to_camel(\"python_language\") == \"PythonLanguage\");\n    assert(snake_to_camel(\"programming_language\") == \"ProgrammingLanguage\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert snake case string to camel case string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> parts;\n    std::string part;\n    std::istringstream tokenStream(word);\n    while (getline(tokenStream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = toupper(part[0]); // Capitalize the first letter\n            parts.push_back(part);\n        } else {\n//begin to write code\n"
    },
    {
        "task_id": 103,
        "prompt": "Write a function to find eulerian number a(n, m).",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nusing namespace std;\n\nint eulerian_num(int n, int m) {\n    if (m >= n || n == 0) {\n        return 0;\n    }\n    if (m == 0) {\n        return 1;\n    }\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m));\n}\n\n\n",
        "test": "int main()\n{\n    assert(eulerian_num(3, 1) == 4);\n    assert(eulerian_num(4, 1) == 11);\n    assert(eulerian_num(5, 3) == 26);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint eulerian_num(int n, int m) {\n    if (m >= n || n == 0) {\n        return 0;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find eulerian number a(n, m).",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint eulerian_num(int n, int m) {\n    if (m >= n || n == 0) {\n        return 0;\n    }\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(eulerian_num(3, 1) == 4);\n    assert(eulerian_num(4, 1) == 11);\n    assert(eulerian_num(5, 3) == 26);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint eulerian_num(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find eulerian number a(n, m).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m >= n || n == 0) {\n        return 0;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n    }\n    return input_list;\n}\n\n\n",
        "test": "int main() {\n    vector<vector<string>> test1 = {{\"green\", \"orange\"}, {\"black\", \"white\"}, {\"white\", \"black\", \"orange\"}};\n    vector<vector<string>> result1 = sort_sublists(test1);\n    assert(result1[0][0] == \"green\" && result1[0][1] == \"orange\");\n    assert(result1[1][0] == \"black\" && result1[1][1] == \"white\");\n    assert(result1[2][0] == \"black\" && result1[2][1] == \"orange\" && result1[2][2] == \"white\");\n\n    vector<vector<string>> test2 = {{\" red \", \"green\"}, {\"blue \", \" black\"}, {\" orange\", \"brown\"}};\n    vector<vector<string>> result2 = sort_sublists(test2);\n    assert(result2[0][0] == \" red \" && result2[0][1] == \"green\");\n    assert(result2[1][0] == \" black\" && result2[1][1] == \"blue \");\n    assert(result2[2][0] == \" orange\" && result2[2][1] == \"brown\");\n\n    vector<vector<string>> test3 = {{\"zilver\", \"gold\"}, {\"magnesium\", \"aluminium\"}, {\"steel\", \"bronze\"}};\n    vector<vector<string>> result3 = sort_sublists(test3);\n    assert(result3[0][0] == \"gold\" && result3[0][1] == \"zilver\");\n    assert(result3[1][0] == \"aluminium\" && result3[1][1] == \"magnesium\");\n    assert(result3[2][0] == \"bronze\" && result3[2][1] == \"steel\");\n\n    cout << \"All tests passed successfully.\" << endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<string>> test1 = {{\"green\", \"orange\"}, {\"black\", \"white\"}, {\"white\", \"black\", \"orange\"}};\n    vector<vector<string>> result1 = sort_sublists(test1);\n    assert(result1[0][0] == \"green\" && result1[0][1] == \"orange\");\n    assert(result1[1][0] == \"black\" && result1[1][1] == \"white\");\n    assert(result1[2][0] == \"black\" && result1[2][1] == \"orange\" && result1[2][2] == \"white\");\n\n    vector<vector<string>> test2 = {{\" red \", \"green\"}, {\"blue \", \" black\"}, {\" orange\", \"brown\"}};\n    vector<vector<string>> result2 = sort_sublists(test2);\n    assert(result2[0][0] == \" red \" && result2[0][1] == \"green\");\n    assert(result2[1][0] == \" black\" && result2[1][1] == \"blue \");\n    assert(result2[2][0] == \" orange\" && result2[2][1] == \"brown\");\n\n    vector<vector<string>> test3 = {{\"zilver\", \"gold\"}, {\"magnesium\", \"aluminium\"}, {\"steel\", \"bronze\"}};\n    vector<vector<string>> result3 = sort_sublists(test3);\n    assert(result3[0][0] == \"gold\" && result3[0][1] == \"zilver\");\n    assert(result3[1][0] == \"aluminium\" && result3[1][1] == \"magnesium\");\n    assert(result3[2][0] == \"bronze\" && result3[2][1] == \"steel\");\n\n    cout << \"All tests passed successfully.\" << endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\nvector<vector<string>> sort_sublists(vector<vector<string>> input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for(auto &sublist : input_list) {\n        sort(sublist.begin(), sublist.end());\n//begin to write code\n"
    },
    {
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <numeric>\n#include <cassert>\n\nint count(const std::vector<bool>& lst) {\n    return std::accumulate(lst.begin(), lst.end(), 0);\n}\n\n\n",
        "test": "int main() {\n    assert(count({true, false, true}) == 2);\n    assert(count({false, false}) == 0);\n    assert(count({true, true, true}) == 3);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nint count(const std::vector<bool>& lst) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count true booleans in the given list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nint count(const std::vector<bool>& lst) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count({true, false, true}) == 2);\n    assert(count({false, false}) == 0);\n    assert(count({true, true, true}) == 3);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <numeric>\n#include <cassert>\nint count(const std::vector<bool>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 106,
        "prompt": "Write a function to add the given list to the given tuples.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int, int> add_lists(std::vector<int> test_list, std::tuple<int, int> test_tup) {\n    int first, second;\n    std::tie(first, second) = test_tup;\n    return std::make_tuple(first, second, test_list[0], test_list[1], test_list[2]);\n}\n\n\n",
        "test": "int main()\n{\n    assert(add_lists({5, 6, 7}, std::make_tuple(9, 10)) == std::make_tuple(9, 10, 5, 6, 7));\n    assert(add_lists({6, 7, 8}, std::make_tuple(10, 11)) == std::make_tuple(10, 11, 6, 7, 8));\n    assert(add_lists({7, 8, 9}, std::make_tuple(11, 12)) == std::make_tuple(11, 12, 7, 8, 9));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int, int> add_lists(std::vector<int> test_list, std::tuple<int, int> test_tup) {\n    int first, second;\n//begin to write code\n",
        "cpp_prompt": "Write a function to add the given list to the given tuples.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int, int> add_lists(std::vector<int> test_list, std::tuple<int, int> test_tup) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    int first, second;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(add_lists({5, 6, 7}, std::make_tuple(9, 10)) == std::make_tuple(9, 10, 5, 6, 7));\n    assert(add_lists({6, 7, 8}, std::make_tuple(10, 11)) == std::make_tuple(10, 11, 6, 7, 8));\n    assert(add_lists({7, 8, 9}, std::make_tuple(11, 12)) == std::make_tuple(11, 12, 7, 8, 9));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int, int> add_lists(std::vector<int> test_list, std::tuple<int, int> test_tup) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add the given list to the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first, second;\n//begin to write code\n"
    },
    {
        "task_id": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Hexadecimal(int L, int R) {\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n                if (k % 16 >= 10) { \n                    count++;  \n                }\n                k = k / 16;  \n            }\n        }\n    }\n    return count;  \n}\n\n\n",
        "test": "int main()\n{\n    assert(count_Hexadecimal(10, 15) == 6);\n    assert(count_Hexadecimal(2, 4) == 0);\n    assert(count_Hexadecimal(15, 16) == 1);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Hexadecimal(int L, int R) {\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count hexadecimal numbers for a given range.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Hexadecimal(int L, int R) {\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_Hexadecimal(10, 15) == 6);\n    assert(count_Hexadecimal(2, 4) == 0);\n    assert(count_Hexadecimal(15, 16) == 1);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Hexadecimal(int L, int R) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count hexadecimal numbers for a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;  \n    for (int i = L; i <= R; i++) { \n        if (i >= 10 && i <= 15) { \n            count++;  \n        } else if (i > 15) { \n            int k = i;  \n            while (k != 0) {  \n//begin to write code\n"
    },
    {
        "task_id": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> merge_sorted_list(vector<int> num1, vector<int> num2, vector<int> num3) {\n    sort(num1.begin(), num1.end());\n    sort(num2.begin(), num2.end());\n    sort(num3.begin(), num3.end());\n    num1.insert(num1.end(), num2.begin(), num2.end());\n    num1.insert(num1.end(), num3.begin(), num3.end());\n    sort(num1.begin(), num1.end());\n    return num1;\n}\n\n\n",
        "test": "int main() {\n    assert(merge_sorted_list({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}) == (vector<int>{4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}));\n    assert(merge_sorted_list({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}) == (vector<int>{1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}));\n    assert(merge_sorted_list({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}) == (vector<int>{1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> merge_sorted_list(vector<int> num1, vector<int> num2, vector<int> num3) {\n    sort(num1.begin(), num1.end());\n    sort(num2.begin(), num2.end());\n    sort(num3.begin(), num3.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> merge_sorted_list(vector<int> num1, vector<int> num2, vector<int> num3) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    sort(num1.begin(), num1.end());\n    sort(num2.begin(), num2.end());\n    sort(num3.begin(), num3.end());\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(merge_sorted_list({25, 24, 15, 4, 5, 29, 110}, {19, 20, 11, 56, 25, 233, 154}, {24, 26, 54, 48}) == (vector<int>{4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233}));\n    assert(merge_sorted_list({1, 3, 5, 6, 8, 9}, {2, 5, 7, 11}, {1, 4, 7, 8, 12}) == (vector<int>{1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12}));\n    assert(merge_sorted_list({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}, {25, 35, 22, 85, 14, 65, 75, 25, 58}, {12, 74, 9, 50, 61, 41}) == (vector<int>{1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> merge_sorted_list(vector<int> num1, vector<int> num2, vector<int> num3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(num1.begin(), num1.end());\n    sort(num2.begin(), num2.end());\n    sort(num3.begin(), num3.end());\n//begin to write code\n"
    },
    {
        "task_id": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint odd_Equivalent(const std::string& s, int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '1') {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(odd_Equivalent(\"011001\", 6) == 3);\n    assert(odd_Equivalent(\"11011\", 5) == 4);\n    assert(odd_Equivalent(\"1010\", 4) == 2);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint odd_Equivalent(const std::string& s, int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '1') {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the count of rotations of a binary string with odd value.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint odd_Equivalent(const std::string& s, int n) {\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '1') {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(odd_Equivalent(\"011001\", 6) == 3);\n    assert(odd_Equivalent(\"11011\", 5) == 4);\n    assert(odd_Equivalent(\"1010\", 4) == 2);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint odd_Equivalent(const std::string& s, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the count of rotations of a binary string with odd value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int i = 0; i < n; ++i) {\n        if (s[i] == '1') {\n//begin to write code\n"
    },
    {
        "task_id": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <utility>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<int, int>> extract_missing(vector<pair<int, int>> test_list, int strt_val, int stop_val) {\n    vector<pair<int, int>> res;\n    for (auto sub : test_list) {\n        if (sub.first > strt_val) {\n            res.push_back(make_pair(strt_val, sub.first));\n            strt_val = sub.second;\n        }\n    }\n    if (strt_val < stop_val) {\n        res.push_back(make_pair(strt_val, stop_val));\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert((extract_missing({{6, 9}, {15, 34}, {48, 70}}, 2, 100) == vector<pair<int, int>>{{2, 6}, {9, 15}, {34, 48}, {70, 100}}));\n    assert((extract_missing({{7, 2}, {15, 19}, {38, 50}}, 5, 60) == vector<pair<int, int>>{{5, 7}, {2, 15}, {19, 38}, {50, 60}}));\n    assert((extract_missing({{7, 2}, {15, 19}, {38, 50}}, 1, 52) == vector<pair<int, int>>{{1, 7}, {2, 15}, {19, 38}, {50, 52}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> extract_missing(vector<pair<int, int>> test_list, int strt_val, int stop_val) {\n    vector<pair<int, int>> res;\n    for (auto sub : test_list) {\n        if (sub.first > strt_val) {\n            res.push_back(make_pair(strt_val, sub.first));\n            strt_val = sub.second;\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> extract_missing(vector<pair<int, int>> test_list, int strt_val, int stop_val) {\n    vector<pair<int, int>> res;\n    for (auto sub : test_list) {\n        if (sub.first > strt_val) {\n            res.push_back(make_pair(strt_val, sub.first));\n            strt_val = sub.second;\n            double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((extract_missing({{6, 9}, {15, 34}, {48, 70}}, 2, 100) == vector<pair<int, int>>{{2, 6}, {9, 15}, {34, 48}, {70, 100}}));\n    assert((extract_missing({{7, 2}, {15, 19}, {38, 50}}, 5, 60) == vector<pair<int, int>>{{5, 7}, {2, 15}, {19, 38}, {50, 60}}));\n    assert((extract_missing({{7, 2}, {15, 19}, {38, 50}}, 1, 52) == vector<pair<int, int>>{{1, 7}, {2, 15}, {19, 38}, {50, 52}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nusing namespace std;\nvector<pair<int, int>> extract_missing(vector<pair<int, int>> test_list, int strt_val, int stop_val) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<pair<int, int>> res;\n    for (auto sub : test_list) {\n        if (sub.first > strt_val) {\n            res.push_back(make_pair(strt_val, sub.first));\n            strt_val = sub.second;\n//begin to write code\n"
    },
    {
        "task_id": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n\nstd::vector<int> common_in_nested_lists(std::vector<std::vector<int>> nestedlist) {\n    std::set<int> result_set;\n    bool first = true;\n\n    for (const auto& list : nestedlist) {\n        std::set<int> current_set(list.begin(), list.end());\n        if (first) {\n            result_set = current_set;\n            first = false;\n        } else {\n            std::set<int> temp;\n            std::set_intersection(result_set.begin(), result_set.end(), current_set.begin(), current_set.end(),\n                                  std::inserter(temp, temp.begin()));\n            result_set = temp;\n        }\n    }\n\n    return std::vector<int>(result_set.begin(), result_set.end());\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> result;\n\n    result = common_in_nested_lists({{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}});\n    assert((result == std::vector<int>{12, 18}));\n\n    result = common_in_nested_lists({{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}});\n    assert((result == std::vector<int>{5, 23}));\n\n    result = common_in_nested_lists({{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}});\n    assert((result == std::vector<int>{4}));\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nstd::vector<int> common_in_nested_lists(std::vector<std::vector<int>> nestedlist) {\n    std::set<int> result_set;\n    bool first = true;\n    for (const auto& list : nestedlist) {\n        std::set<int> current_set(list.begin(), list.end());\n        if (first) {\n            result_set = current_set;\n            first = false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nstd::vector<int> common_in_nested_lists(std::vector<std::vector<int>> nestedlist) {\n    std::set<int> result_set;\n    bool first = true;\n    for (const auto& list : nestedlist) {\n        std::set<int> current_set(list.begin(), list.end());\n        if (first) {\n            result_set = current_set;\n            first = false;\n            double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> result;\n\n    result = common_in_nested_lists({{12, 18, 23, 25, 45}, {7, 12, 18, 24, 28}, {1, 5, 8, 12, 15, 16, 18}});\n    assert((result == std::vector<int>{12, 18}));\n\n    result = common_in_nested_lists({{12, 5, 23, 25, 45}, {7, 11, 5, 23, 28}, {1, 5, 8, 18, 23, 16}});\n    assert((result == std::vector<int>{5, 23}));\n\n    result = common_in_nested_lists({{2, 3, 4, 1}, {4, 5}, {6, 4, 8}, {4, 5}, {6, 8, 4}});\n    assert((result == std::vector<int>{4}));\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nstd::vector<int> common_in_nested_lists(std::vector<std::vector<int>> nestedlist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> result_set;\n    bool first = true;\n    for (const auto& list : nestedlist) {\n        std::set<int> current_set(list.begin(), list.end());\n        if (first) {\n            result_set = current_set;\n            first = false;\n//begin to write code\n"
    },
    {
        "task_id": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter(int diameter, int height) {\n    return 2 * (diameter + height);\n}\n\n\n",
        "test": "int main() {\n    assert(perimeter(2, 4) == 12);\n    assert(perimeter(1, 2) == 6);\n    assert(perimeter(3, 1) == 8);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the perimeter of a cylinder.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\ndouble temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(perimeter(2, 4) == 12);\n    assert(perimeter(1, 2) == 6);\n    assert(perimeter(3, 1) == 8);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter(int diameter, int height) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 113,
        "prompt": "Write a function to check if a string represents an integer or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_integer(const std::string& text) {\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n\n    if (str.empty()) {\n        return false;\n    }\n\n    if (str[0] == '+' || str[0] == '-') {\n        str = str.substr(1);\n    }\n\n    if (str.empty()) {\n        return false;\n    }\n\n    for (char c : str) {\n        if (!isdigit(c)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(!check_integer(\"python\"));\n    assert(check_integer(\"1\"));\n    assert(check_integer(\"12345\"));\n    assert(check_integer(\"   12345   \"));\n    assert(check_integer(\"+123\"));\n    assert(check_integer(\"-123\"));\n    assert(!check_integer(\"+\"));\n    assert(!check_integer(\"-\"));\n    assert(!check_integer(\"12 345\"));\n    assert(!check_integer(\"12a45\"));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_integer(const std::string& text) {\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n    if (str.empty()) {\n        return false;\n    }\n    if (str[0] == '+' || str[0] == '-') {\n        str = str.substr(1);\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if a string represents an integer or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_integer(const std::string& text) {\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n    if (str.empty()) {\n        return false;\n    }\n    if (str[0] == '+' || str[0] == '-') {\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n        str = str.substr(1);\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(!check_integer(\"python\"));\n    assert(check_integer(\"1\"));\n    assert(check_integer(\"12345\"));\n    assert(check_integer(\"   12345   \"));\n    assert(check_integer(\"+123\"));\n    assert(check_integer(\"-123\"));\n    assert(!check_integer(\"+\"));\n    assert(!check_integer(\"-\"));\n    assert(!check_integer(\"12 345\"));\n    assert(!check_integer(\"12a45\"));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_integer(const std::string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a string represents an integer or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string str = text;\n    str.erase(0, str.find_first_not_of(' '));\n    str.erase(str.find_last_not_of(' ') + 1);\n    if (str.empty()) {\n        return false;\n    }\n    if (str[0] == '+' || str[0] == '-') {\n        str = str.substr(1);\n    }\n//begin to write code\n"
    },
    {
        "task_id": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code_str": "#include <vector>\n#include <unordered_map>\n#include <sstream>\n#include <cassert>\n#include <iostream>\n\nusing namespace std;\n\n\nstruct VectorHash {\n    size_t operator()(const vector<int>& v) const {\n        hash<int> hasher;\n        size_t seed = 0;\n        for (int i : v) {\n            seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n        }\n        return seed;\n    }\n};\n\nvector<vector<int>> assign_freq(vector<vector<int>> test_list) {\n    unordered_map<vector<int>,int,VectorHash> counter;\n    for(auto v:test_list)\n    {\n        counter[v] += 1;\n    }\n    \n    vector<vector<int>> ret;\n    for(auto onepair:counter)\n    {\n        vector<int> res = onepair.first;\n        res.push_back(onepair.second);\n        ret.push_back(res);\n    }\n    return ret;\n    \n}",
        "test": "int main() {\n    assert((assign_freq({{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}}) == vector<vector<int>> {{9, 1}, {2, 7, 2} ,{6, 5, 8, 3}}));\n    assert((assign_freq({{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}}) == vector<vector<int>> { {4, 8, 1}, {7, 1, 2},  {9, 2, 1} , {4, 2, 4, 2} }));\n    assert((assign_freq({{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}}) == vector<vector<int>> {{9, 2, 1} , {4, 2, 3, 2},{17, 21, 2},{11, 13, 10, 1}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <unordered_map>\n#include <sstream>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nstruct VectorHash {\n    size_t operator()(const vector<int>& v) const {\n        hash<int> hasher;\n        size_t seed = 0;\n        for (int i : v) {\n            seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n        }\n        return seed;\n    }\n};\nvector<vector<int>> assign_freq(vector<vector<int>> test_list) {\n    unordered_map<vector<int>,int,VectorHash> counter;\n//begin to write code\n",
        "cpp_prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "perturbated_codes": "#include <vector>\n#include <unordered_map>\n#include <sstream>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nstruct VectorHash {\n    size_t operator()(const vector<int>& v) const {\n        hash<int> hasher;\n        size_t seed = 0;\n        for (int i : v) {\n            seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n        }\n        return seed;\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    }\n};\nvector<vector<int>> assign_freq(vector<vector<int>> test_list) {\n    unordered_map<vector<int>,int,VectorHash> counter;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((assign_freq({{6, 5, 8}, {2, 7}, {6, 5, 8}, {6, 5, 8}, {9}, {2, 7}}) == vector<vector<int>> {{9, 1}, {2, 7, 2} ,{6, 5, 8, 3}}));\n    assert((assign_freq({{4, 2, 4}, {7, 1}, {4, 8}, {4, 2, 4}, {9, 2}, {7, 1}}) == vector<vector<int>> { {4, 8, 1}, {7, 1, 2},  {9, 2, 1} , {4, 2, 4, 2} }));\n    assert((assign_freq({{11, 13, 10}, {17, 21}, {4, 2, 3}, {17, 21}, {9, 2}, {4, 2, 3}}) == vector<vector<int>> {{9, 2, 1} , {4, 2, 3, 2},{17, 21, 2},{11, 13, 10, 1}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <unordered_map>\n#include <sstream>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nstruct VectorHash {\n    size_t operator()(const vector<int>& v) const {\n        hash<int> hasher;\n        size_t seed = 0;\n        for (int i : v) {\n            seed ^= hasher(i) + 0x9e3779b9 + (seed << 6) + (seed >> 2);\n        }\n        return seed;\n    }\n};\nvector<vector<int>> assign_freq(vector<vector<int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to assign frequency to each tuple in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<vector<int>,int,VectorHash> counter;\n//begin to write code\n"
    },
    {
        "task_id": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(empty_dict({{},{},{}}) == true);\n    assert(empty_dict({{{1,2}}, {}, {}}) == false);\n    assert(empty_dict({}) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(empty_dict({{},{},{}}) == true);\n    assert(empty_dict({{{1,2}}, {}, {}}) == false);\n    assert(empty_dict({}) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nbool empty_dict(const std::vector<std::map<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& dict : list1) {\n        if (!dict.empty()) return false;\n//begin to write code\n"
    },
    {
        "task_id": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nint tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n        result += std::to_string(num);\n    }\n    return std::stoi(result);\n}\n\n\n",
        "test": "int main() {\n    assert(tuple_to_int({1, 2, 3}) == 123);\n    assert(tuple_to_int({4, 5, 6}) == 456);\n    assert(tuple_to_int({5, 6, 7}) == 567);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nint tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nint tuple_to_int(const std::vector<int>& nums) {\n    std::string result;\n    for (int num : nums) {\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(tuple_to_int({1, 2, 3}) == 123);\n    assert(tuple_to_int({4, 5, 6}) == 456);\n    assert(tuple_to_int({5, 6, 7}) == 567);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nint tuple_to_int(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (int num : nums) {\n//begin to write code\n"
    },
    {
        "task_id": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <sstream>\n\nstd::string list_to_float(std::vector<std::pair<std::string, std::string>> test_list) {\n    std::vector<std::pair<float, float>> res;\n    for (auto &tup : test_list) {\n        float first, second;\n        // Convert first element\n        std::istringstream(tup.first) >> first;\n        // Convert second element\n        std::istringstream(tup.second) >> second;\n        res.push_back({first, second});\n    }\n    std::ostringstream oss;\n    oss << '[';\n    for (size_t i = 0; i < res.size(); ++i) {\n        if (i > 0) oss << \", \";\n        oss << '(' << res[i].first << \", \" << res[i].second << ')';\n    }\n    oss << ']';\n    return oss.str();\n}\n\n\n",
        "test": "int main() {\n    assert(list_to_float({{\"3\", \"4\"}, {\"1\", \"26.45\"}, {\"7.32\", \"8\"}, {\"4\", \"8\"}}) == \"[(3, 4), (1, 26.45), (7.32, 8), (4, 8)]\");\n    assert(list_to_float({{\"4\", \"4\"}, {\"2\", \"27\"}, {\"4.12\", \"9\"}, {\"7\", \"11\"}}) == \"[(4, 4), (2, 27), (4.12, 9), (7, 11)]\");\n    assert(list_to_float({{\"6\", \"78\"}, {\"5\", \"26.45\"}, {\"1.33\", \"4\"}, {\"82\", \"13\"}}) == \"[(6, 78), (5, 26.45), (1.33, 4), (82, 13)]\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <sstream>\nstd::string list_to_float(std::vector<std::pair<std::string, std::string>> test_list) {\n    std::vector<std::pair<float, float>> res;\n    for (auto &tup : test_list) {\n        float first, second;\n        // Convert first element\n        std::istringstream(tup.first) >> first;\n        // Convert second element\n        std::istringstream(tup.second) >> second;\n        res.push_back({first, second});\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <sstream>\nstd::string list_to_float(std::vector<std::pair<std::string, std::string>> test_list) {\n    std::vector<std::pair<float, float>> res;\n    for (auto &tup : test_list) {\n        float first, second;\n        // Convert first element\n        std::istringstream(tup.first) >> first;\n        // Convert second element\n        std::istringstream(tup.second) >> second;\n        res.push_back({first, second});\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(list_to_float({{\"3\", \"4\"}, {\"1\", \"26.45\"}, {\"7.32\", \"8\"}, {\"4\", \"8\"}}) == \"[(3, 4), (1, 26.45), (7.32, 8), (4, 8)]\");\n    assert(list_to_float({{\"4\", \"4\"}, {\"2\", \"27\"}, {\"4.12\", \"9\"}, {\"7\", \"11\"}}) == \"[(4, 4), (2, 27), (4.12, 9), (7, 11)]\");\n    assert(list_to_float({{\"6\", \"78\"}, {\"5\", \"26.45\"}, {\"1.33\", \"4\"}, {\"82\", \"13\"}}) == \"[(6, 78), (5, 26.45), (1.33, 4), (82, 13)]\");\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cctype>\n#include <sstream>\nstd::string list_to_float(std::vector<std::pair<std::string, std::string>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert all possible convertible elements in the list to float.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::pair<float, float>> res;\n    for (auto &tup : test_list) {\n        float first, second;\n        // Convert first element\n        std::istringstream(tup.first) >> first;\n        // Convert second element\n        std::istringstream(tup.second) >> second;\n        res.push_back({first, second});\n//begin to write code\n"
    },
    {
        "task_id": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code_str": "\n#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n    while (iss >> s) {\n        result.push_back(s);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> test1 = string_to_list(\"python programming\");\n    assert((test1.size() == 2) && (test1[0] == \"python\") && (test1[1] == \"programming\"));\n\n    std::vector<std::string> test2 = string_to_list(\"lists tuples strings\");\n    assert((test2.size() == 3) && (test2[0] == \"lists\") && (test2[1] == \"tuples\") && (test2[2] == \"strings\"));\n\n    std::vector<std::string> test3 = string_to_list(\"write a program\");\n    assert((test3.size() == 3) && (test3[0] == \"write\") && (test3[1] == \"a\") && (test3[2] == \"program\"));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n",
        "cpp_prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "perturbated_codes": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\ndouble temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> test1 = string_to_list(\"python programming\");\n    assert((test1.size() == 2) && (test1[0] == \"python\") && (test1[1] == \"programming\"));\n\n    std::vector<std::string> test2 = string_to_list(\"lists tuples strings\");\n    assert((test2.size() == 3) && (test2[0] == \"lists\") && (test2[1] == \"tuples\") && (test2[2] == \"strings\"));\n\n    std::vector<std::string> test3 = string_to_list(\"write a program\");\n    assert((test3.size() == 3) && (test3[0] == \"write\") && (test3[1] == \"a\") && (test3[2] == \"program\"));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <vector>\n#include <cassert>\nstd::vector<std::string> string_to_list(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    std::istringstream iss(str);\n    std::string s;\n//begin to write code\n"
    },
    {
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return XOR;\n}\n\n\n",
        "test": "int main() {\n    assert(search({1, 1, 2, 2, 3}, 5) == 3);\n    assert(search({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11) == 8);\n    assert(search({1, 2, 2, 3, 3, 4, 4}, 7) == 1);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the element that appears only once in a sorted array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(search({1, 1, 2, 2, 3}, 5) == 3);\n    assert(search({1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8}, 11) == 8);\n    assert(search({1, 2, 2, 3, 3, 4, 4}, 7) == 1);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint search(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int XOR = 0;\n    for (int i = 0; i < n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n            result_max = product;\n        }\n    }\n    return result_max;\n}\n\n\n",
        "test": "int main()\n{\n    // Test cases\n    assert(max_product_tuple({{2, 7}, {2, 6}, {1, 8}, {4, 9}}) == 36);\n    assert(max_product_tuple({{10, 20}, {15, 2}, {5, 10}}) == 200);\n    assert(max_product_tuple({{11, 44}, {10, 15}, {20, 5}, {12, 9}}) == 484);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    // Test cases\n    assert(max_product_tuple({{2, 7}, {2, 6}, {1, 8}, {4, 9}}) == 36);\n    assert(max_product_tuple({{10, 20}, {15, 2}, {5, 10}}) == 200);\n    assert(max_product_tuple({{11, 44}, {10, 15}, {20, 5}, {12, 9}}) == 484);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\nint max_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result_max = 0;\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product > result_max) {\n//begin to write code\n"
    },
    {
        "task_id": 121,
        "prompt": "Write a function to find the triplet with sum of the given array",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool check_triplet(const std::vector<int>& A, int n, int sum, int count) {\n    if (count == 3 && sum == 0) {\n        return true;\n    }\n    if (count == 3 || n == 0 || sum < 0) {\n        return false;\n    }\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) || check_triplet(A, n - 1, sum, count);\n}\n\n\n",
        "test": "int main() {\n    assert(check_triplet({2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0) == true);\n    assert(check_triplet({1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0) == false);\n    assert(check_triplet({10, 4, 2, 3, 5}, 5, 15, 0) == true);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_triplet(const std::vector<int>& A, int n, int sum, int count) {\n    if (count == 3 && sum == 0) {\n        return true;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the triplet with sum of the given array",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_triplet(const std::vector<int>& A, int n, int sum, int count) {\n    if (count == 3 && sum == 0) {\n        return true;\n    }\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_triplet({2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0) == true);\n    assert(check_triplet({1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0) == false);\n    assert(check_triplet({10, 4, 2, 3, 5}, 5, 15, 0) == true);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool check_triplet(const std::vector<int>& A, int n, int sum, int count) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (count == 3 && sum == 0) {\n        return true;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 122,
        "prompt": "Write a function to find n\u2019th smart number.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nconst int MAX = 3000;\n\nint smartNumber(int n) {\n    vector<int> primes(MAX, 0);\n    vector<int> result;\n\n    for (int i = 2; i < MAX; i++) {\n        if (primes[i] == 0) {\n            primes[i] = 1;\n            int j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                if (primes[j] + 3 == 0) {\n                    result.push_back(j);\n                }\n                j += i;\n            }\n        }\n    }\n\n    sort(result.begin(), result.end());\n    return result[n - 1];\n}\n\n\n",
        "test": "int main() {\n    assert(smartNumber(1) == 30);\n    assert(smartNumber(50) == 273);\n    assert(smartNumber(1000) == 2664);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nconst int MAX = 3000;\nint smartNumber(int n) {\n    vector<int> primes(MAX, 0);\n    vector<int> result;\n    for (int i = 2; i < MAX; i++) {\n        if (primes[i] == 0) {\n            primes[i] = 1;\n            int j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find n\u2019th smart number.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nconst int MAX = 3000;\nint smartNumber(int n) {\n    vector<int> primes(MAX, 0);\n    vector<int> result;\n    for (int i = 2; i < MAX; i++) {\n        if (primes[i] == 0) {\n            primes[i] = 1;\n            int j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(smartNumber(1) == 30);\n    assert(smartNumber(50) == 273);\n    assert(smartNumber(1000) == 2664);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nconst int MAX = 3000;\nint smartNumber(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find n\u2019th smart number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> primes(MAX, 0);\n    vector<int> result;\n    for (int i = 2; i < MAX; i++) {\n        if (primes[i] == 0) {\n            primes[i] = 1;\n            int j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n//begin to write code\n"
    },
    {
        "task_id": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code_str": "\n#include <iostream>\n#include <set>\n#include <stdexcept>\n#include <cassert>\nusing namespace std;\n\nint amicable_numbers_sum(int limit) {\n    if (limit < 1) {\n        throw invalid_argument(\"Input must be bigger than 0!\");\n    }\n    set<int> amicables;\n    for (int num = 2; num <= limit; num++) {\n        if (amicables.find(num) != amicables.end()) {\n            continue;\n        }\n        int sum_fact = 0;\n        for (int fact = 1; fact < num; fact++) {\n            if (num % fact == 0) {\n                sum_fact += fact;\n            }\n        }\n        int sum_fact2 = 0;\n        for (int fact = 1; fact < sum_fact; fact++) {\n            if (sum_fact % fact == 0) {\n                sum_fact2 += fact;\n            }\n        }\n        if (num == sum_fact2 && num != sum_fact) {\n            amicables.insert(num);\n            amicables.insert(sum_fact);\n        }\n    }\n    int sum = 0;\n    for (int val : amicables) {\n        sum += val;\n    }\n    return sum;\n}\n\n\n\n",
        "test": "int main() {\n    assert(amicable_numbers_sum(999) == 504);\n    assert(amicable_numbers_sum(9999) == 31626);\n    assert(amicable_numbers_sum(99) == 0);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <set>\n#include <stdexcept>\n#include <cassert>\nusing namespace std;\nint amicable_numbers_sum(int limit) {\n    if (limit < 1) {\n        throw invalid_argument(\"Input must be bigger than 0!\");\n    }\n    set<int> amicables;\n    for (int num = 2; num <= limit; num++) {\n        if (amicables.find(num) != amicables.end()) {\n            continue;\n        }\n        int sum_fact = 0;\n        for (int fact = 1; fact < num; fact++) {\n            if (num % fact == 0) {\n                sum_fact += fact;\n            }\n        }\n        int sum_fact2 = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "perturbated_codes": "#include <iostream>\n#include <set>\n#include <stdexcept>\n#include <cassert>\nusing namespace std;\nint amicable_numbers_sum(int limit) {\n    if (limit < 1) {\n        throw invalid_argument(\"Input must be bigger than 0!\");\n    }\n    set<int> amicables;\n    for (int num = 2; num <= limit; num++) {\n        if (amicables.find(num) != amicables.end()) {\n            continue;\n        }\n        int sum_fact = 0;\n        for (int fact = 1; fact < num; fact++) {\n            if (num % fact == 0) {\n                sum_fact += fact;\n            }\n        }\n        int sum_fact2 = 0;\n        double temp_var_7 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(amicable_numbers_sum(999) == 504);\n    assert(amicable_numbers_sum(9999) == 31626);\n    assert(amicable_numbers_sum(99) == 0);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <set>\n#include <stdexcept>\n#include <cassert>\nusing namespace std;\nint amicable_numbers_sum(int limit) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sum all amicable numbers from 1 to a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (limit < 1) {\n        throw invalid_argument(\"Input must be bigger than 0!\");\n    }\n    set<int> amicables;\n    for (int num = 2; num <= limit; num++) {\n        if (amicables.find(num) != amicables.end()) {\n            continue;\n        }\n        int sum_fact = 0;\n        for (int fact = 1; fact < num; fact++) {\n            if (num % fact == 0) {\n                sum_fact += fact;\n            }\n        }\n        int sum_fact2 = 0;\n//begin to write code\n"
    },
    {
        "task_id": 124,
        "prompt": "Write a function to get the angle of a complex number.",
        "code_str": "\n#include <iostream>\n#include <complex>\n#include <cmath>\n#include <cassert>\n\ndouble angle_complex(double a, double b) {\n  std::complex<double> cn(a, b);\n  double angle = std::arg(cn);\n  return angle;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(angle_complex(0, 1) - 1.5707963267948966) < 1e-9);\n    assert(abs(angle_complex(2, 1) - 0.4636476090008061) < 1e-9);\n    assert(abs(angle_complex(0, 2) - 1.5707963267948966) < 1e-9);\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <complex>\n#include <cmath>\n#include <cassert>\ndouble angle_complex(double a, double b) {\n  std::complex<double> cn(a, b);\n//begin to write code\n",
        "cpp_prompt": "Write a function to get the angle of a complex number.",
        "perturbated_codes": "#include <iostream>\n#include <complex>\n#include <cmath>\n#include <cassert>\ndouble angle_complex(double a, double b) {\n  std::complex<double> cn(a, b);\n  []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(angle_complex(0, 1) - 1.5707963267948966) < 1e-9);\n    assert(abs(angle_complex(2, 1) - 0.4636476090008061) < 1e-9);\n    assert(abs(angle_complex(0, 2) - 1.5707963267948966) < 1e-9);\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <complex>\n#include <cmath>\n#include <cassert>\ndouble angle_complex(double a, double b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  std::complex<double> cn(a, b);\n//begin to write code\n"
    },
    {
        "task_id": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <algorithm>\n\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = std::max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n\n",
        "test": "int main() {\n    assert(find_length(\"11000010001\", 11) == 6);\n    assert(find_length(\"10111\", 5) == 1);\n    assert(find_length(\"11011101100101\", 14) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint find_length(const std::string& string, int n) {\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_length(\"11000010001\", 11) == 6);\n    assert(find_length(\"10111\", 5) == 1);\n    assert(find_length(\"11011101100101\", 14) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint find_length(const std::string& string, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int current_sum = 0;\n    int max_sum = 0;\n    for (int i = 0; i < n; ++i) {\n        current_sum += (string[i] == '0' ? 1 : -1);\n        if (current_sum < 0) {\n//begin to write code\n"
    },
    {
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <algorithm>\n\nint sum(int a, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\n",
        "test": "int main()\n{\n    assert(sum(10, 15) == 6);\n    assert(sum(100, 150) == 93);\n    assert(sum(4, 6) == 3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of common divisors of two given numbers.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(sum(10, 15) == 6);\n    assert(sum(100, 150) == 93);\n    assert(sum(4, 6) == 3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nint sum(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i < std::min(a, b); i++) {\n        if (a % i == 0 && b % i == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n    } else if (y == 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(multiply_int(10, 20) == 200);\n    assert(multiply_int(5, 10) == 50);\n    assert(multiply_int(4, 8) == 32);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to multiply two integers without using the * operator in cpp.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(multiply_int(10, 20) == 200);\n    assert(multiply_int(5, 10) == 50);\n    assert(multiply_int(4, 8) == 32);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint multiply_int(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a function to multiply two integers without using the * operator in cpp.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y == 0) {\n        return 0;\n//begin to write code\n"
    },
    {
        "task_id": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\n\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n        if (word.length() > n) {\n            word_len.push_back(word);\n        }\n    }\n    return word_len;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> result;\n\n    result = long_words(3, \"python is a programming language\");\n    assert((result == std::vector<std::string>{\"python\", \"programming\", \"language\"}));\n\n    result = long_words(2, \"writing a program\");\n    assert((result == std::vector<std::string>{\"writing\", \"program\"}));\n\n    result = long_words(5, \"sorting list\");\n    assert((result == std::vector<std::string>{\"sorting\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> result;\n\n    result = long_words(3, \"python is a programming language\");\n    assert((result == std::vector<std::string>{\"python\", \"programming\", \"language\"}));\n\n    result = long_words(2, \"writing a program\");\n    assert((result == std::vector<std::string>{\"writing\", \"program\"}));\n\n    result = long_words(5, \"sorting list\");\n    assert((result == std::vector<std::string>{\"sorting\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cassert>\nstd::vector<std::string> long_words(int n, const std::string &str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> word_len;\n    std::istringstream iss(str);\n    std::string word;\n    while (iss >> word) {\n//begin to write code\n"
    },
    {
        "task_id": 129,
        "prompt": "Write a function to calculate magic square.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <set>\n\nbool magic_square_test(const std::vector<std::vector<int>>& my_matrix) {\n    size_t iSize = my_matrix[0].size();\n    std::vector<int> sum_list;\n    \n    // Sum of each row\n    for (const auto& line : my_matrix) {\n        sum_list.push_back(std::accumulate(line.begin(), line.end(), 0));\n    }\n\n    // Sum of each column\n    for (size_t col = 0; col < iSize; ++col) {\n        int col_sum = 0;\n        for (size_t row = 0; row < iSize; ++row) {\n            col_sum += my_matrix[row][col];\n        }\n        sum_list.push_back(col_sum);\n    }\n\n    // Sum of main diagonal\n    int result1 = 0;\n    for (size_t i = 0; i < iSize; ++i) {\n        result1 += my_matrix[i][i];\n    }\n    sum_list.push_back(result1);\n\n    // Sum of secondary diagonal\n    int result2 = 0;\n    for (int i = iSize - 1; i >= 0; --i) {\n        result2 += my_matrix[i][i];\n    }\n    sum_list.push_back(result2);\n\n    // Check if all sums are the same\n    std::set<int> unique_sums(sum_list.begin(), sum_list.end());\n    return unique_sums.size() == 1;\n}\n\n\n",
        "test": "int main() {\n    assert(magic_square_test({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}) == true);\n    assert(magic_square_test({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}) == true);\n    assert(magic_square_test({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}) == false);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <set>\nbool magic_square_test(const std::vector<std::vector<int>>& my_matrix) {\n    size_t iSize = my_matrix[0].size();\n    std::vector<int> sum_list;\n    // Sum of each row\n    for (const auto& line : my_matrix) {\n        sum_list.push_back(std::accumulate(line.begin(), line.end(), 0));\n    }\n    // Sum of each column\n    for (size_t col = 0; col < iSize; ++col) {\n        int col_sum = 0;\n        for (size_t row = 0; row < iSize; ++row) {\n            col_sum += my_matrix[row][col];\n        }\n        sum_list.push_back(col_sum);\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate magic square.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <set>\nbool magic_square_test(const std::vector<std::vector<int>>& my_matrix) {\n    size_t iSize = my_matrix[0].size();\n    std::vector<int> sum_list;\n    // Sum of each row\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    for (const auto& line : my_matrix) {\n        sum_list.push_back(std::accumulate(line.begin(), line.end(), 0));\n    }\n    // Sum of each column\n    for (size_t col = 0; col < iSize; ++col) {\n        int col_sum = 0;\n        for (size_t row = 0; row < iSize; ++row) {\n            col_sum += my_matrix[row][col];\n        }\n        sum_list.push_back(col_sum);\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(magic_square_test({{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}}) == true);\n    assert(magic_square_test({{2, 7, 6}, {9, 5, 1}, {4, 3, 8}}) == true);\n    assert(magic_square_test({{2, 7, 6}, {9, 5, 1}, {4, 3, 7}}) == false);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n#include <set>\nbool magic_square_test(const std::vector<std::vector<int>>& my_matrix) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate magic square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    size_t iSize = my_matrix[0].size();\n    std::vector<int> sum_list;\n    // Sum of each row\n    for (const auto& line : my_matrix) {\n        sum_list.push_back(std::accumulate(line.begin(), line.end(), 0));\n    }\n    // Sum of each column\n    for (size_t col = 0; col < iSize; ++col) {\n        int col_sum = 0;\n        for (size_t row = 0; row < iSize; ++row) {\n            col_sum += my_matrix[row][col];\n        }\n        sum_list.push_back(col_sum);\n    }\n//begin to write code\n"
    },
    {
        "task_id": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n#include <algorithm>\n\nusing namespace std;\n\npair<int, int> max_occurrences(vector<int> nums) {\n    unordered_map<int, int> dict;\n    for (int num : nums) {\n        dict[num]++;\n    }\n    return *max_element(dict.begin(), dict.end(), \n                        [](const pair<int, int>& a, const pair<int, int>& b) {\n                            return a.second < b.second;\n                        });\n}\n\n\n",
        "test": "int main() {\n    assert(max_occurrences({2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2}) == make_pair(2, 5));\n    assert(max_occurrences({2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18}) == make_pair(16, 2));\n    assert(max_occurrences({10,20,20,30,40,90,80,50,30,20,50,10}) == make_pair(20, 3));\n\n    cout << \"All tests passed.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\npair<int, int> max_occurrences(vector<int> nums) {\n    unordered_map<int, int> dict;\n    for (int num : nums) {\n        dict[num]++;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the item with maximum frequency in a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\npair<int, int> max_occurrences(vector<int> nums) {\n    unordered_map<int, int> dict;\n    for (int num : nums) {\n        dict[num]++;\n    }\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_occurrences({2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2}) == make_pair(2, 5));\n    assert(max_occurrences({2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18}) == make_pair(16, 2));\n    assert(max_occurrences({10,20,20,30,40,90,80,50,30,20,50,10}) == make_pair(20, 3));\n\n    cout << \"All tests passed.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\npair<int, int> max_occurrences(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the item with maximum frequency in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<int, int> dict;\n    for (int num : nums) {\n        dict[num]++;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string reverse_vowels(std::string str1) {\n    std::string vowels = \"\";\n    for (char char1 : str1) {\n        if (std::string(\"aeiouAEIOU\").find(char1) != std::string::npos) {\n            vowels += char1;\n        }\n    }\n    std::string result_string = \"\";\n    size_t vowel_index = vowels.length();\n    for (char char1 : str1) {\n        if (std::string(\"aeiouAEIOU\").find(char1) != std::string::npos) {\n            result_string += vowels[--vowel_index];\n        }\n        else {\n            result_string += char1;\n        }\n    }\n    return result_string;\n}\n\n\n",
        "test": "int main()\n{\n    assert(reverse_vowels(\"Python\") == \"Python\");\n    assert(reverse_vowels(\"USA\") == \"ASU\");\n    assert(reverse_vowels(\"ab\") == \"ab\");\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string reverse_vowels(std::string str1) {\n    std::string vowels = \"\";\n    for (char char1 : str1) {\n        if (std::string(\"aeiouAEIOU\").find(char1) != std::string::npos) {\n            vowels += char1;\n        }\n    }\n    std::string result_string = \"\";\n    size_t vowel_index = vowels.length();\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to reverse only the vowels of a given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string reverse_vowels(std::string str1) {\ndouble temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    std::string vowels = \"\";\n    for (char char1 : str1) {\n        if (std::string(\"aeiouAEIOU\").find(char1) != std::string::npos) {\n            vowels += char1;\n        }\n    }\n    std::string result_string = \"\";\n    size_t vowel_index = vowels.length();\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(reverse_vowels(\"Python\") == \"Python\");\n    assert(reverse_vowels(\"USA\") == \"ASU\");\n    assert(reverse_vowels(\"ab\") == \"ab\");\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string reverse_vowels(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to reverse only the vowels of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string vowels = \"\";\n    for (char char1 : str1) {\n        if (std::string(\"aeiouAEIOU\").find(char1) != std::string::npos) {\n            vowels += char1;\n        }\n    }\n    std::string result_string = \"\";\n    size_t vowel_index = vowels.length();\n//begin to write code\n"
    },
    {
        "task_id": 132,
        "prompt": "Write a function to convert tuple to a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\n\nstring tup_string(char tup1[], int size) {\n    string str = \"\";\n    for (int i = 0; i < size; i++) {\n        str += tup1[i];\n    }\n    return str;\n}\n\n\n",
        "test": "int main()\n{\n    char test1[] = {'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'};\n    assert(tup_string(test1, 9) == \"exercises\");\n\n    char test2[] = {'p','y','t','h','o','n'};\n    assert(tup_string(test2, 6) == \"python\");\n\n    char test3[] = {'p','r','o','g','r','a','m'};\n    assert(tup_string(test3, 7) == \"program\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring tup_string(char tup1[], int size) {\n    string str = \"\";\n    for (int i = 0; i < size; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert tuple to a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring tup_string(char tup1[], int size) {\n    string str = \"\";\n    for (int i = 0; i < size; i++) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    char test1[] = {'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'};\n    assert(tup_string(test1, 9) == \"exercises\");\n\n    char test2[] = {'p','y','t','h','o','n'};\n    assert(tup_string(test2, 6) == \"python\");\n\n    char test3[] = {'p','r','o','g','r','a','m'};\n    assert(tup_string(test3, 7) == \"program\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nstring tup_string(char tup1[], int size) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert tuple to a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    string str = \"\";\n    for (int i = 0; i < size; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    assert(sum_negativenum({2, 4, -6, -9, 11, -12, 14, -5, 17}) == -32);\n    assert(sum_negativenum({10, 15, -14, 13, -18, 12, -20}) == -52);\n    assert(sum_negativenum({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}) == -894);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_negativenum({2, 4, -6, -9, 11, -12, 14, -5, 17}) == -32);\n    assert(sum_negativenum({10, 15, -14, 13, -18, 12, -20}) == -52);\n    assert(sum_negativenum({19, -65, 57, 39, 152, -639, 121, 44, 90, -190}) == -894);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_negativenum(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (auto num : nums) {\n        if (num < 0) {\n//begin to write code\n"
    },
    {
        "task_id": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::string check_last(const std::vector<int>& arr, int n, int p) {\n    int _sum = 0;\n    for (int i = 0; i < n; ++i) {\n        _sum += arr[i];\n    }\n    if (p == 1) {\n        if (_sum % 2 == 0) {\n            return \"ODD\";\n        } else {\n            return \"EVEN\";\n        }\n    }\n    return \"EVEN\";\n}\n\n\n",
        "test": "int main()\n{\n    assert(check_last({5, 7, 10}, 3, 1) == \"ODD\");\n    assert(check_last({2, 3}, 2, 3) == \"EVEN\");\n    assert(check_last({1, 2, 3}, 3, 1) == \"ODD\");\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::string check_last(const std::vector<int>& arr, int n, int p) {\n    int _sum = 0;\n    for (int i = 0; i < n; ++i) {\n        _sum += arr[i];\n    }\n    if (p == 1) {\n        if (_sum % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the last element of given array is even or odd after performing an operation p times.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::string check_last(const std::vector<int>& arr, int n, int p) {\n    int _sum = 0;\n    for (int i = 0; i < n; ++i) {\n        _sum += arr[i];\n    }\n    if (p == 1) {\n        if (_sum % 2 == 0) {\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_last({5, 7, 10}, 3, 1) == \"ODD\");\n    assert(check_last({2, 3}, 2, 3) == \"EVEN\");\n    assert(check_last({1, 2, 3}, 3, 1) == \"ODD\");\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::string check_last(const std::vector<int>& arr, int n, int p) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the last element of given array is even or odd after performing an operation p times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int _sum = 0;\n    for (int i = 0; i < n; ++i) {\n        _sum += arr[i];\n    }\n    if (p == 1) {\n        if (_sum % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 135,
        "prompt": "Write a function to find the nth hexagonal number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint hexagonal_num(int n) {\n    return n * (2 * n - 1);\n}\n\n\n",
        "test": "int main() {\n    assert(hexagonal_num(10) == 190);\n    assert(hexagonal_num(5) == 45);\n    assert(hexagonal_num(7) == 91);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint hexagonal_num(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nth hexagonal number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint hexagonal_num(int n) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(hexagonal_num(10) == 190);\n    assert(hexagonal_num(5) == 45);\n    assert(hexagonal_num(7) == 91);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint hexagonal_num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nth hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 136,
        "prompt": "Write a function to calculate electricity bill.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble cal_electbill(int units) {\n    double amount;\n    int surcharge;\n    if(units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if(units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n    } else if(units <= 200) {\n        amount = 130 + 162.50 + ((units - 100) * 5.26);\n        surcharge = 45;\n    } else {\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);\n        surcharge = 75;\n    }\n    double total = amount + surcharge;\n    return total;\n}\n\n\n",
        "test": "int main()\n{\n    assert(cal_electbill(75) == 246.25);\n    assert(cal_electbill(265) == 1442.75);\n    assert(cal_electbill(100) == 327.5);\n    \n    std::cout << \"All test cases passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble cal_electbill(int units) {\n    double amount;\n    int surcharge;\n    if(units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if(units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate electricity bill.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble cal_electbill(int units) {\n    double amount;\n    int surcharge;\n    if(units < 50) {\n        amount = units * 2.60;\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        surcharge = 25;\n    } else if(units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(cal_electbill(75) == 246.25);\n    assert(cal_electbill(265) == 1442.75);\n    assert(cal_electbill(100) == 327.5);\n    \n    std::cout << \"All test cases passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble cal_electbill(int units) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate electricity bill.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double amount;\n    int surcharge;\n    if(units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if(units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n//begin to write code\n"
    },
    {
        "task_id": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\ndouble zero_count(const std::vector<int>& nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x == 0) {\n            n1 += 1;\n        }\n    }\n    return round(n1 * 100.0 / n) / 100.0;\n}\n\n\n",
        "test": "int main() {\n    assert(zero_count({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) == 0.15);\n    assert(zero_count({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 0.00);\n    assert(zero_count({2, 4, -6, -9, 11, -12, 14, -5, 17}) == 0.00);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ndouble zero_count(const std::vector<int>& nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ndouble zero_count(const std::vector<int>& nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x == 0) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(zero_count({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) == 0.15);\n    assert(zero_count({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 0.00);\n    assert(zero_count({2, 4, -6, -9, 11, -12, 14, -5, 17}) == 0.00);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ndouble zero_count(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the ration of zeroes in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_Sum_Of_Powers_Of_Two(10) == true);\n    assert(is_Sum_Of_Powers_Of_Two(7) == false);\n    assert(is_Sum_Of_Powers_Of_Two(14) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool is_Sum_Of_Powers_Of_Two(int n) {\n    if (n % 2 == 1) {\n        return false;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_Sum_Of_Powers_Of_Two(10) == true);\n    assert(is_Sum_Of_Powers_Of_Two(7) == false);\n    assert(is_Sum_Of_Powers_Of_Two(14) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool is_Sum_Of_Powers_Of_Two(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 == 1) {\n        return false;\n//begin to write code\n"
    },
    {
        "task_id": 139,
        "prompt": "Write a function to find the circumference of a circle.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble circle_circumference(double r) {\n    double perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n\n",
        "test": "int main() {\n    assert(circle_circumference(10) == 62.830000000000005);\n    assert(circle_circumference(5) == 31.415000000000003);\n    assert(circle_circumference(4) == 25.132);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble circle_circumference(double r) {\n    double perimeter = 2 * 3.1415 * r;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the circumference of a circle.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble circle_circumference(double r) {\n    double perimeter = 2 * 3.1415 * r;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(circle_circumference(10) == 62.830000000000005);\n    assert(circle_circumference(5) == 31.415000000000003);\n    assert(circle_circumference(4) == 25.132);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble circle_circumference(double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double perimeter = 2 * 3.1415 * r;\n//begin to write code\n"
    },
    {
        "task_id": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n                temp.insert(ele);\n                res.push_back(ele);\n            }\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(extract_singly({{3, 4, 5}, {4, 5, 7}, {1, 4}}) == std::vector<int>({3, 4, 5, 7, 1}));\n    assert(extract_singly({{1, 2, 3}, {4, 2, 3}, {7, 8}}) == std::vector<int>({1, 2, 3, 4, 7, 8}));\n    assert(extract_singly({{7, 8, 9}, {10, 11, 12}, {10, 11}}) == std::vector<int>({7, 8, 9, 10, 11, 12}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n            double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(extract_singly({{3, 4, 5}, {4, 5, 7}, {1, 4}}) == std::vector<int>({3, 4, 5, 7, 1}));\n    assert(extract_singly({{1, 2, 3}, {4, 2, 3}, {7, 8}}) == std::vector<int>({1, 2, 3, 4, 7, 8}));\n    assert(extract_singly({{7, 8, 9}, {10, 11, 12}, {10, 11}}) == std::vector<int>({7, 8, 9, 10, 11, 12}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nstd::vector<int> extract_singly(const std::vector<std::vector<int>>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract elements that occur singly in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    std::set<int> temp;\n    for (const auto& inner : test_list) {\n        for (int ele : inner) {\n            if (temp.find(ele) == temp.end()) {\n//begin to write code\n"
    },
    {
        "task_id": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> pancake_sort(std::vector<int>& nums) {\n    int arr_len = nums.size();\n    while (arr_len > 1) {\n        auto mi = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + arr_len));\n        std::reverse(nums.begin(), nums.begin() + mi + 1);\n        std::reverse(nums.begin(), nums.begin() + arr_len);\n        arr_len--;\n    }\n    return nums;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> test1 = {15, 79, 25, 38, 69};\n    std::vector<int> test2 = {98, 12, 54, 36, 85};\n    std::vector<int> test3 = {41, 42, 32, 12, 23};\n\n    assert(pancake_sort(test1) == std::vector<int>({15, 25, 38, 69, 79}));\n    assert(pancake_sort(test2) == std::vector<int>({12, 36, 54, 85, 98}));\n    assert(pancake_sort(test3) == std::vector<int>({12, 23, 32, 41, 42}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> pancake_sort(std::vector<int>& nums) {\n    int arr_len = nums.size();\n    while (arr_len > 1) {\n        auto mi = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + arr_len));\n        std::reverse(nums.begin(), nums.begin() + mi + 1);\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a list of elements using pancake sort.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> pancake_sort(std::vector<int>& nums) {\n    int arr_len = nums.size();\n    while (arr_len > 1) {\n        auto mi = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + arr_len));\n        std::reverse(nums.begin(), nums.begin() + mi + 1);\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> test1 = {15, 79, 25, 38, 69};\n    std::vector<int> test2 = {98, 12, 54, 36, 85};\n    std::vector<int> test3 = {41, 42, 32, 12, 23};\n\n    assert(pancake_sort(test1) == std::vector<int>({15, 25, 38, 69, 79}));\n    assert(pancake_sort(test2) == std::vector<int>({12, 36, 54, 85, 98}));\n    assert(pancake_sort(test3) == std::vector<int>({12, 23, 32, 41, 42}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> pancake_sort(std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of elements using pancake sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int arr_len = nums.size();\n    while (arr_len > 1) {\n        auto mi = std::distance(nums.begin(), std::max_element(nums.begin(), nums.begin() + arr_len));\n        std::reverse(nums.begin(), nums.begin() + mi + 1);\n//begin to write code\n"
    },
    {
        "task_id": 142,
        "prompt": "Write a function to count the same pair in three given lists.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(count_samepair({1,2,3,4,5,6,7,8}, {2,2,3,1,2,6,7,9}, {2,1,3,1,2,6,7,9}) == 3);\n    assert(count_samepair({1,2,3,4,5,6,7,8}, {2,2,3,1,2,6,7,8}, {2,1,3,1,2,6,7,8}) == 4);\n    assert(count_samepair({1,2,3,4,2,6,7,8}, {2,2,3,1,2,6,7,8}, {2,1,3,1,2,6,7,8}) == 5);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count the same pair in three given lists.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n        double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_samepair({1,2,3,4,5,6,7,8}, {2,2,3,1,2,6,7,9}, {2,1,3,1,2,6,7,9}) == 3);\n    assert(count_samepair({1,2,3,4,5,6,7,8}, {2,2,3,1,2,6,7,8}, {2,1,3,1,2,6,7,8}) == 4);\n    assert(count_samepair({1,2,3,4,2,6,7,8}, {2,2,3,1,2,6,7,8}, {2,1,3,1,2,6,7,8}) == 5);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_samepair(const std::vector<int>& list1, const std::vector<int>& list2, const std::vector<int>& list3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    for (size_t i = 0; i < list1.size(); ++i) {\n        if (list1[i] == list2[i] && list2[i] == list3[i]) {\n//begin to write code\n"
    },
    {
        "task_id": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <tuple>\n#include <vector>\n\ntemplate <typename... Args>\nint find_lists(const std::tuple<Args...>& input) {\n    return sizeof...(Args);\n}\n\ntemplate <typename T>\nint find_lists(const std::vector<T>& input) {\n    return 1;\n}\n\n\n",
        "test": "int main()\n{\n    using namespace std;\n    vector<int> list1{1, 2, 3, 4};\n    vector<int> list2{5, 6, 7, 8};\n    vector<int> list3{9, 8, 7, 6, 5, 4, 3, 2, 1};\n    vector<int> list4{1, 2};\n    vector<int> list5{3, 4};\n    vector<int> list6{5, 6};\n\n    assert(find_lists(make_tuple(list1, list2)) == 2);\n    assert(find_lists(make_tuple(list4, list5, list6)) == 3);\n    assert(find_lists(list3) == 1);\n\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <tuple>\n#include <vector>\ntemplate <typename... Args>\nint find_lists(const std::tuple<Args...>& input) {\n    return sizeof...(Args);\n}\n//begin to write code\n",
        "cpp_prompt": "Write a function to find number of lists present in the given tuple.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <tuple>\n#include <vector>\ntemplate <typename... Args>\nint find_lists(const std::tuple<Args...>& input) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    return sizeof...(Args);\n}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    using namespace std;\n    vector<int> list1{1, 2, 3, 4};\n    vector<int> list2{5, 6, 7, 8};\n    vector<int> list3{9, 8, 7, 6, 5, 4, 3, 2, 1};\n    vector<int> list4{1, 2};\n    vector<int> list5{3, 4};\n    vector<int> list6{5, 6};\n\n    assert(find_lists(make_tuple(list1, list2)) == 2);\n    assert(find_lists(make_tuple(list4, list5, list6)) == 3);\n    assert(find_lists(list3) == 1);\n\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <tuple>\n#include <vector>\ntemplate <typename... Args>\nint find_lists(const std::tuple<Args...>& input) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find number of lists present in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return sizeof...(Args);\n}\n//begin to write code\n"
    },
    {
        "task_id": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    assert(sum_Pairs({1, 8, 9, 15, 16}, 5) == 74);\n    assert(sum_Pairs({1, 2, 3, 4}, 4) == 10);\n    assert(sum_Pairs({1, 2, 3, 4, 5, 7, 9, 11, 14}, 9) == 188);\n    \n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of absolute differences in all pairs of the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_Pairs({1, 8, 9, 15, 16}, 5) == 74);\n    assert(sum_Pairs({1, 2, 3, 4}, 4) == 10);\n    assert(sum_Pairs({1, 2, 3, 4, 5, 7, 9, 11, 14}, 9) == 188);\n    \n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_Pairs(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = n - 1; i >= 0; --i) {\n//begin to write code\n"
    },
    {
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n        minEle = std::min(minEle, arr[i]);\n        maxEle = std::max(maxEle, arr[i]);\n    }\n    return (maxEle - minEle);\n}\n\n\n",
        "test": "int main()\n{\n    assert(max_Abs_Diff({2, 1, 5, 3}, 4) == 4);\n    assert(max_Abs_Diff({9, 3, 2, 5, 1}, 5) == 8);\n    assert(max_Abs_Diff({3, 2, 1}, 3) == 2);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum difference between any two elements in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n    double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(max_Abs_Diff({2, 1, 5, 3}, 4) == 4);\n    assert(max_Abs_Diff({9, 3, 2, 5, 1}, 5) == 8);\n    assert(max_Abs_Diff({3, 2, 1}, 3) == 2);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nint max_Abs_Diff(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int minEle = arr[0];\n    int maxEle = arr[0];\n    for (int i = 1; i < n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint ascii_value_string(const std::string& str1) {\n    return static_cast<int>(str1[0]);\n}\n\n\n",
        "test": "int main() {\n    assert(ascii_value_string(\"python\") == 112);\n    assert(ascii_value_string(\"Program\") == 80);\n    assert(ascii_value_string(\"Language\") == 76);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nint ascii_value_string(const std::string& str1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the ascii value of total characters in a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nint ascii_value_string(const std::string& str1) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(ascii_value_string(\"python\") == 112);\n    assert(ascii_value_string(\"Program\") == 80);\n    assert(ascii_value_string(\"Language\") == 76);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint ascii_value_string(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the ascii value of total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint max_path_sum(std::vector<std::vector<int>>& tri, int m, int n) {\n    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n                tri[i][j] += tri[i + 1][j + 1];\n            }\n        }\n    }\n    return tri[0][0];\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::vector<int>> tri1{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}};\n    std::vector<std::vector<int>> tri2{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}};\n    std::vector<std::vector<int>> tri3{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}};\n\n    assert(max_path_sum(tri1, 2, 2) == 14);\n    assert(max_path_sum(tri2, 2, 2) == 24);\n    assert(max_path_sum(tri3, 2, 2) == 53);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint max_path_sum(std::vector<std::vector<int>>& tri, int m, int n) {\n    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint max_path_sum(std::vector<std::vector<int>>& tri, int m, int n) {\n    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n                tri[i][j] += tri[i + 1][j];\n            } else {\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::vector<int>> tri1{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}};\n    std::vector<std::vector<int>> tri2{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}};\n    std::vector<std::vector<int>> tri3{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}};\n\n    assert(max_path_sum(tri1, 2, 2) == 14);\n    assert(max_path_sum(tri2, 2, 2) == 24);\n    assert(max_path_sum(tri3, 2, 2) == 53);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint max_path_sum(std::vector<std::vector<int>>& tri, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum total path sum in the given triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = m - 1; i >= 0; --i) {\n        for (int j = 0; j <= i; ++j) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n//begin to write code\n"
    },
    {
        "task_id": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint sum_digits_single(int x) {\n    int ans = 0;\n    while (x) {\n        ans += x % 10;\n        x /= 10;\n    }\n    return ans;\n}\n\nint closest(int x) {\n    int ans = 0;\n    while (ans * 10 + 9 <= x) {\n        ans = ans * 10 + 9;\n    }\n    return ans;\n}\n\nint sum_digits_twoparts(int N) {\n    int A = closest(N);\n    return sum_digits_single(A) + sum_digits_single(N - A);\n}\n\n\n",
        "test": "int main() {\n    assert(sum_digits_twoparts(35) == 17);\n    assert(sum_digits_twoparts(7) == 7);\n    assert(sum_digits_twoparts(100) == 19);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint sum_digits_single(int x) {\n    int ans = 0;\n    while (x) {\n        ans += x % 10;\n        x /= 10;\n    }\n    return ans;\n}\nint closest(int x) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint sum_digits_single(int x) {\n    int ans = 0;\n    while (x) {\n        ans += x % 10;\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n        x /= 10;\n    }\n    return ans;\n}\nint closest(int x) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_digits_twoparts(35) == 17);\n    assert(sum_digits_twoparts(7) == 7);\n    assert(sum_digits_twoparts(100) == 19);\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_digits_single(int x) {\n    int ans = 0;\n    while (x) {\n        ans += x % 10;\n        x /= 10;\n    }\n    return ans;\n}\nint closest(int x) {\n//begin to write code\n"
    },
    {
        "task_id": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                dp[i] = max(dp[i], dp[j] + 1);\n            }\n        }\n        result = max(result, dp[i]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    vector<int> arr1 = {1, 2, 3, 4, 5, 3, 2};\n    vector<int> arr2 = {10, 9, 4, 5, 4, 8, 6};\n    vector<int> arr3 = {1, 2, 3, 2, 3, 7, 2, 1};\n    assert(longest_subseq_with_diff_one(arr1, 7) == 6);\n    assert(longest_subseq_with_diff_one(arr2, 7) == 3);\n    assert(longest_subseq_with_diff_one(arr3, 8) == 7);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n            double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> arr1 = {1, 2, 3, 4, 5, 3, 2};\n    vector<int> arr2 = {10, 9, 4, 5, 4, 8, 6};\n    vector<int> arr3 = {1, 2, 3, 2, 3, 7, 2, 1};\n    assert(longest_subseq_with_diff_one(arr1, 7) == 6);\n    assert(longest_subseq_with_diff_one(arr2, 7) == 3);\n    assert(longest_subseq_with_diff_one(arr3, 8) == 7);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint longest_subseq_with_diff_one(vector<int> &arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n, 1);\n    int result = 1;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n//begin to write code\n"
    },
    {
        "task_id": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool does_Contain_B(int a, int b, int c) {\n    if (a == b) {\n        return true;\n    }\n    if ((b - a) * c > 0 && (b - a) % c == 0) {\n        return true;\n    }\n    return false;\n}\n\n\n",
        "test": "int main()\n{\n    assert(does_Contain_B(1,7,3) == true);\n    assert(does_Contain_B(1,-3,5) == false);\n    assert(does_Contain_B(3,2,5) == false);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool does_Contain_B(int a, int b, int c) {\n    if (a == b) {\n        return true;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find whether the given number is present in the infinite sequence or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool does_Contain_B(int a, int b, int c) {\n    if (a == b) {\n        return true;\n    }\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(does_Contain_B(1,7,3) == true);\n    assert(does_Contain_B(1,-3,5) == false);\n    assert(does_Contain_B(3,2,5) == false);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool does_Contain_B(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find whether the given number is present in the infinite sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a == b) {\n        return true;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n    }\n    return p;\n}\n\nbool is_coprime(int x, int y) {\n    return gcd(x, y) == 1;\n}\n\n\n",
        "test": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(is_coprime(17, 13) == true);\n    assert(is_coprime(15, 21) == false);\n    assert(is_coprime(25, 45) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given number is co-prime or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(is_coprime(17, 13) == true);\n    assert(is_coprime(15, 21) == false);\n    assert(is_coprime(25, 45) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint gcd(int p, int q) {\n    while (q != 0) {\n        int temp = p % q;\n        p = q;\n        q = temp;\n//begin to write code\n"
    },
    {
        "task_id": 152,
        "prompt": "Write a function to sort the given array by using merge sort.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> merge(vector<int>& a, vector<int>& b) {\n    vector<int> c;\n    while (!a.empty() && !b.empty()) {\n        if (a.front() < b.front()) {\n            c.push_back(a.front());\n            a.erase(a.begin());\n        } else {\n            c.push_back(b.front());\n            b.erase(b.begin());\n        }\n    }\n    if (a.empty()) {\n        c.insert(c.end(), b.begin(), b.end());\n    } else {\n        c.insert(c.end(), a.begin(), a.end());\n    }\n    return c;\n}\n\nvector<int> merge_sort(vector<int>& x) {\n    if (x.size() == 0 || x.size() == 1) {\n        return x;\n    } else {\n        int middle = x.size() / 2;\n        vector<int> a(x.begin(), x.begin() + middle);\n        vector<int> b(x.begin() + middle, x.end());\n        a = merge_sort(a);\n        b = merge_sort(b);\n        return merge(a, b);\n    }\n}\n\n\n",
        "test": "int main() {\n    vector<int> test1 = {3, 4, 2, 6, 5, 7, 1, 9};\n    vector<int> test2 = {7, 25, 45, 78, 11, 33, 19};\n    vector<int> test3 = {3, 1, 4, 9, 8};\n    assert(merge_sort(test1) == vector<int>({1, 2, 3, 4, 5, 6, 7, 9}));\n    assert(merge_sort(test2) == vector<int>({7, 11, 19, 25, 33, 45, 78}));\n    assert(merge_sort(test3) == vector<int>({1, 3, 4, 8, 9}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> merge(vector<int>& a, vector<int>& b) {\n    vector<int> c;\n    while (!a.empty() && !b.empty()) {\n        if (a.front() < b.front()) {\n            c.push_back(a.front());\n            a.erase(a.begin());\n        } else {\n            c.push_back(b.front());\n            b.erase(b.begin());\n        }\n    }\n    if (a.empty()) {\n        c.insert(c.end(), b.begin(), b.end());\n    } else {\n        c.insert(c.end(), a.begin(), a.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort the given array by using merge sort.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> merge(vector<int>& a, vector<int>& b) {\n    vector<int> c;\n    while (!a.empty() && !b.empty()) {\n        if (a.front() < b.front()) {\n            c.push_back(a.front());\n            a.erase(a.begin());\n        } else {\n            c.push_back(b.front());\n            b.erase(b.begin());\n        }\n    }\n    if (a.empty()) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        c.insert(c.end(), b.begin(), b.end());\n    } else {\n        c.insert(c.end(), a.begin(), a.end());\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> test1 = {3, 4, 2, 6, 5, 7, 1, 9};\n    vector<int> test2 = {7, 25, 45, 78, 11, 33, 19};\n    vector<int> test3 = {3, 1, 4, 9, 8};\n    assert(merge_sort(test1) == vector<int>({1, 2, 3, 4, 5, 6, 7, 9}));\n    assert(merge_sort(test2) == vector<int>({7, 11, 19, 25, 33, 45, 78}));\n    assert(merge_sort(test3) == vector<int>({1, 3, 4, 8, 9}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> merge(vector<int>& a, vector<int>& b) {\n    vector<int> c;\n    while (!a.empty() && !b.empty()) {\n        if (a.front() < b.front()) {\n            c.push_back(a.front());\n            a.erase(a.begin());\n        } else {\n            c.push_back(b.front());\n            b.erase(b.begin());\n        }\n    }\n    if (a.empty()) {\n        c.insert(c.end(), b.begin(), b.end());\n    } else {\n        c.insert(c.end(), a.begin(), a.end());\n//begin to write code\n"
    },
    {
        "task_id": 153,
        "prompt": "Write a function to find the vertex of a parabola.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <utility> // for std::pair\n\nstd::pair<double, double> parabola_vertex(double a, double b, double c) {\n    return std::make_pair(-b / (2 * a), (4 * a * c - b * b) / (4 * a));\n}\n\n\n",
        "test": "int main() {\n    auto result1 = parabola_vertex(5, 3, 2);\n    assert(result1.first == -0.3 && result1.second == 1.55);\n    \n    auto result2 = parabola_vertex(9, 8, 4);\n    assert(result2.first == -0.4444444444444444 && result2.second == 2.2222222222222223);\n    \n    auto result3 = parabola_vertex(2, 4, 6);\n    assert(result3.first == -1.0 && result3.second == 4.0);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <utility> // for std::pair\nstd::pair<double, double> parabola_vertex(double a, double b, double c) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the vertex of a parabola.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <utility> // for std::pair\nstd::pair<double, double> parabola_vertex(double a, double b, double c) {\ndouble temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    auto result1 = parabola_vertex(5, 3, 2);\n    assert(result1.first == -0.3 && result1.second == 1.55);\n    \n    auto result2 = parabola_vertex(9, 8, 4);\n    assert(result2.first == -0.4444444444444444 && result2.second == 2.2222222222222223);\n    \n    auto result3 = parabola_vertex(2, 4, 6);\n    assert(result3.first == -1.0 && result3.second == 4.0);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <utility> // for std::pair\nstd::pair<double, double> parabola_vertex(double a, double b, double c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the vertex of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n    vector<int> result;\n    for (auto& i : nums) {\n        result.push_back(i[N]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    vector<vector<int>> data1{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}};\n    assert((specified_element(data1, 0) == vector<int>{1, 4, 7}));\n    assert((specified_element(data1, 2) == vector<int>{3, 6, 9}));\n    assert((specified_element(data1, 3) == vector<int>{2, 2, 5}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n    vector<int> result;\n    for (auto& i : nums) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n    vector<int> result;\n    for (auto& i : nums) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<int>> data1{{1, 2, 3, 2}, {4, 5, 6, 2}, {7, 1, 9, 5}};\n    assert((specified_element(data1, 0) == vector<int>{1, 4, 7}));\n    assert((specified_element(data1, 2) == vector<int>{3, 6, 9}));\n    assert((specified_element(data1, 3) == vector<int>{2, 2, 5}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> specified_element(vector<vector<int>>& nums, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (auto& i : nums) {\n//begin to write code\n"
    },
    {
        "task_id": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint even_bit_toggle_number(int n) {\n    int res = 0;\n    int count = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res = res | (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}\n\n\n",
        "test": "int main() {\n    assert(even_bit_toggle_number(10) == 0);\n    assert(even_bit_toggle_number(20) == 30);\n    assert(even_bit_toggle_number(30) == 20);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n    int res = 0;\n    int count = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to toggle all even bits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n    int res = 0;\n    int count = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(even_bit_toggle_number(10) == 0);\n    assert(even_bit_toggle_number(20) == 30);\n    assert(even_bit_toggle_number(30) == 20);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to toggle all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    int count = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n//begin to write code\n"
    },
    {
        "task_id": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        int second = stoi(get<1>(x));\n        result.push_back(make_tuple(first, second));\n    }\n    return result;\n}",
        "test": "int main() {\n    assert((tuple_int_str({{\"333\", \"33\"}, {\"1416\", \"55\"}}) == vector<tuple<int, int>>{{333, 33}, {1416, 55}}));\n    assert((tuple_int_str({{\"999\", \"99\"}, {\"1000\", \"500\"}}) == vector<tuple<int, int>>{{999, 99}, {1000, 500}}));\n    assert((tuple_int_str({{\"666\", \"66\"}, {\"1500\", \"555\"}}) == vector<tuple<int, int>>{{666, 66}, {1500, 555}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((tuple_int_str({{\"333\", \"33\"}, {\"1416\", \"55\"}}) == vector<tuple<int, int>>{{333, 33}, {1416, 55}}));\n    assert((tuple_int_str({{\"999\", \"99\"}, {\"1000\", \"500\"}}) == vector<tuple<int, int>>{{999, 99}, {1000, 500}}));\n    assert((tuple_int_str({{\"666\", \"66\"}, {\"1500\", \"555\"}}) == vector<tuple<int, int>>{{666, 66}, {1500, 555}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> tuple_int_str(const vector<tuple<string, string>>& tuple_str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> result;\n    for (const auto& x : tuple_str) {\n        int first = stoi(get<0>(x));\n//begin to write code\n"
    },
    {
        "task_id": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.",
        "code_str": "\n#include <vector>\n#include <string>\n#include <iostream>\n#include <iterator>\n#include <cassert>\n\ntemplate<typename T>\nstd::vector<std::vector<T>> encode_list(const std::vector<T>& list1) {\n    std::vector<std::vector<T>> result;\n    if (list1.empty()) return result;\n    \n    T current_value = list1[0];\n    int count = 0;\n    \n    for (const T& value : list1) {\n        if (value == current_value) {\n            count++;\n        } else {\n            result.push_back({count, current_value});\n            current_value = value;\n            count = 1;\n        }\n    }\n    \n    result.push_back({count, current_value});\n    return result;\n}\n\nstd::vector<std::vector<char>> encode_list(const std::string& str) {\n    std::vector<std::vector<char>> result;\n    if (str.empty()) return result;\n    \n    char current_char = str[0];\n    int count = 0;\n    \n    for (char ch : str) {\n        if (ch == current_char) {\n            count++;\n        } else {\n            result.push_back({count, current_char});\n            current_char = ch;\n            count = 1;\n        }\n    }\n    \n    result.push_back({count, current_char});\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    // Test cases with integers and floating point numbers\n    std::vector<int> test1 = {1,1,2,3,4,5,1};\n    std::vector<std::vector<int>> encoded1 = encode_list(test1);\n    std::vector<std::vector<int>> expected1 = {{2, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 1}};\n    assert(encoded1 == expected1);\n    \n    std::vector<double> test2 = {1.0, 1.0, 2.0, 3.0, 4.0, 4.3, 5.0, 1.0};\n    std::vector<std::vector<double>> encoded2 = encode_list(test2);\n    std::vector<std::vector<double>> expected2 = {{2, 1.0}, {1, 2.0}, {1, 3.0}, {1, 4.0}, {1, 4.3}, {1, 5.0}, {1, 1.0}};\n    assert(encoded2 == expected2);\n\n    // Test cases with strings\n    std::string test3 = \"automatically\";\n    std::vector<std::vector<char>> encoded3 = encode_list(test3);\n    std::vector<std::vector<char>> expected3 = {{1, 'a'}, {1, 'u'}, {1, 't'}, {1, 'o'}, {1, 'm'}, {1, 'a'}, {1, 't'}, {1, 'i'}, {1, 'c'}, {1, 'a'}, {2, 'l'}, {1, 'y'}};\n    assert(encoded3 == expected3);\n    \n    std::string test4 = \"python\";\n    std::vector<std::vector<char>> encoded4 = encode_list(test4);\n    std::vector<std::vector<char>> expected4 = {{1, 'p'}, {1, 'y'}, {1, 't'}, {1, 'h'}, {1, 'o'}, {1, 'n'}};\n    assert(encoded4 == expected4);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <string>\n#include <iostream>\n#include <iterator>\n#include <cassert>\ntemplate<typename T>\nstd::vector<std::vector<T>> encode_list(const std::vector<T>& list1) {\n    std::vector<std::vector<T>> result;\n    if (list1.empty()) return result;\n    T current_value = list1[0];\n    int count = 0;\n    for (const T& value : list1) {\n        if (value == current_value) {\n            count++;\n        } else {\n            result.push_back({count, current_value});\n            current_value = value;\n            count = 1;\n        }\n    }\n    result.push_back({count, current_value});\n    return result;\n//begin to write code\n",
        "cpp_prompt": "Write a function to reflect the run-length encoding from a list.",
        "perturbated_codes": "#include <vector>\n#include <string>\n#include <iostream>\n#include <iterator>\n#include <cassert>\ntemplate<typename T>\nstd::vector<std::vector<T>> encode_list(const std::vector<T>& list1) {\n    std::vector<std::vector<T>> result;\n    if (list1.empty()) return result;\n    T current_value = list1[0];\n    int count = 0;\n    for (const T& value : list1) {\n        if (value == current_value) {\n            count++;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        } else {\n            result.push_back({count, current_value});\n            current_value = value;\n            count = 1;\n        }\n    }\n    result.push_back({count, current_value});\n    return result;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    // Test cases with integers and floating point numbers\n    std::vector<int> test1 = {1,1,2,3,4,5,1};\n    std::vector<std::vector<int>> encoded1 = encode_list(test1);\n    std::vector<std::vector<int>> expected1 = {{2, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 1}};\n    assert(encoded1 == expected1);\n    \n    std::vector<double> test2 = {1.0, 1.0, 2.0, 3.0, 4.0, 4.3, 5.0, 1.0};\n    std::vector<std::vector<double>> encoded2 = encode_list(test2);\n    std::vector<std::vector<double>> expected2 = {{2, 1.0}, {1, 2.0}, {1, 3.0}, {1, 4.0}, {1, 4.3}, {1, 5.0}, {1, 1.0}};\n    assert(encoded2 == expected2);\n\n    // Test cases with strings\n    std::string test3 = \"automatically\";\n    std::vector<std::vector<char>> encoded3 = encode_list(test3);\n    std::vector<std::vector<char>> expected3 = {{1, 'a'}, {1, 'u'}, {1, 't'}, {1, 'o'}, {1, 'm'}, {1, 'a'}, {1, 't'}, {1, 'i'}, {1, 'c'}, {1, 'a'}, {2, 'l'}, {1, 'y'}};\n    assert(encoded3 == expected3);\n    \n    std::string test4 = \"python\";\n    std::vector<std::vector<char>> encoded4 = encode_list(test4);\n    std::vector<std::vector<char>> expected4 = {{1, 'p'}, {1, 'y'}, {1, 't'}, {1, 'h'}, {1, 'o'}, {1, 'n'}};\n    assert(encoded4 == expected4);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <string>\n#include <iostream>\n#include <iterator>\n#include <cassert>\ntemplate<typename T>\nstd::vector<std::vector<T>> encode_list(const std::vector<T>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to reflect the run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<T>> result;\n    if (list1.empty()) return result;\n    T current_value = list1[0];\n    int count = 0;\n    for (const T& value : list1) {\n        if (value == current_value) {\n            count++;\n        } else {\n            result.push_back({count, current_value});\n            current_value = value;\n            count = 1;\n        }\n    }\n    result.push_back({count, current_value});\n    return result;\n//begin to write code\n"
    },
    {
        "task_id": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nint min_Ops(vector<int> arr, int n, int k) {\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert(min_Ops({2, 2, 2, 2}, 4, 3) == 0);\n    assert(min_Ops({4, 2, 6, 8}, 4, 3) == -1);\n    assert(min_Ops({21, 33, 9, 45, 63}, 5, 6) == 24);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint min_Ops(vector<int> arr, int n, int k) {\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find k number of operations required to make all elements equal.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint min_Ops(vector<int> arr, int n, int k) {\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(min_Ops({2, 2, 2, 2}, 4, 3) == 0);\n    assert(min_Ops({4, 2, 6, 8}, 4, 3) == -1);\n    assert(min_Ops({21, 33, 9, 45, 63}, 5, 6) == 24);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint min_Ops(vector<int> arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max1 = *max_element(arr.begin(), arr.end());\n    int res = 0;\n    for (int i = 0; i < n; ++i) {\n        if ((max1 - arr[i]) % k != 0) {\n            return -1;\n//begin to write code\n"
    },
    {
        "task_id": 159,
        "prompt": "Write a function to print the season for the given month and day.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n\n    if ((month == \"March\") && (days > 19)) {\n        season = \"spring\";\n    } else if ((month == \"June\") && (days > 20)) {\n        season = \"summer\";\n    } else if ((month == \"September\") && (days > 21)) {\n        season = \"autumn\";\n    } else if ((month == \"December\") && (days > 20)) {\n        season = \"winter\";\n    }\n\n    return season;\n}\n\n\n",
        "test": "int main() {\n    assert(month_season(\"January\", 4) == \"winter\");\n    assert(month_season(\"October\", 28) == \"autumn\");\n    assert(month_season(\"June\", 6) == \"spring\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to print the season for the given month and day.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(month_season(\"January\", 4) == \"winter\");\n    assert(month_season(\"October\", 28) == \"autumn\");\n    assert(month_season(\"June\", 6) == \"spring\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string month_season(std::string month, int days) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print the season for the given month and day.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string season;\n    if (month == \"January\" || month == \"February\" || month == \"March\") {\n        season = \"winter\";\n    } else if (month == \"April\" || month == \"May\" || month == \"June\") {\n        season = \"spring\";\n    } else if (month == \"July\" || month == \"August\" || month == \"September\") {\n        season = \"summer\";\n    } else {\n        season = \"autumn\";\n    }\n//begin to write code\n"
    },
    {
        "task_id": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <tuple>\nusing namespace std;\n\ntuple<string, int, string, int> solution(int a, int b, int n) {\n    int i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return make_tuple(\"x = \", i, \", y = \", (n - (i * a)) / b);\n        }\n        i++;\n    }\n    throw \"No solution\";\n}\n\n\n",
        "test": "int main()\n{\n    assert(solution(2, 3, 7) == make_tuple(\"x = \", 2, \", y = \", 1));\n    try {\n        auto result = solution(4, 2, 7);\n        assert(false); // should not reach here, expected to throw\n    } catch (const char* msg) {\n        assert(string(msg) == \"No solution\");\n    }\n    assert(solution(1, 13, 17) == make_tuple(\"x = \", 4, \", y = \", 1));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <tuple>\nusing namespace std;\ntuple<string, int, string, int> solution(int a, int b, int n) {\n    int i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return make_tuple(\"x = \", i, \", y = \", (n - (i * a)) / b);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <tuple>\nusing namespace std;\ntuple<string, int, string, int> solution(int a, int b, int n) {\n    int i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return make_tuple(\"x = \", i, \", y = \", (n - (i * a)) / b);\n            double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(solution(2, 3, 7) == make_tuple(\"x = \", 2, \", y = \", 1));\n    try {\n        auto result = solution(4, 2, 7);\n        assert(false); // should not reach here, expected to throw\n    } catch (const char* msg) {\n        assert(string(msg) == \"No solution\");\n    }\n    assert(solution(1, 13, 17) == make_tuple(\"x = \", 4, \", y = \", 1));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <tuple>\nusing namespace std;\ntuple<string, int, string, int> solution(int a, int b, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find x and y that satisfies ax + by = n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return make_tuple(\"x = \", i, \", y = \", (n - (i * a)) / b);\n//begin to write code\n"
    },
    {
        "task_id": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> remove_elements(std::vector<int> list1, const std::vector<int>& list2) {\n    std::vector<int> result;\n    std::copy_if(list1.begin(), list1.end(), std::back_inserter(result),\n                 [&list2](int x){ return std::find(list2.begin(), list2.end(), x) == list2.end(); });\n    return result;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> result1 = remove_elements({1,2,3,4,5,6,7,8,9,10}, {2,4,6,8});\n    std::vector<int> expected1 = {1, 3, 5, 7, 9, 10};\n    assert(result1 == expected1);\n\n    std::vector<int> result2 = remove_elements({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7});\n    std::vector<int> expected2 = {2, 4, 6, 8, 9, 10};\n    assert(result2 == expected2);\n\n    std::vector<int> result3 = remove_elements({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7});\n    std::vector<int> expected3 = {1, 2, 3, 4, 6, 8, 9, 10};\n    assert(result3 == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> remove_elements(std::vector<int> list1, const std::vector<int>& list2) {\n    std::vector<int> result;\n    std::copy_if(list1.begin(), list1.end(), std::back_inserter(result),\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove all elements from a given list present in another list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> remove_elements(std::vector<int> list1, const std::vector<int>& list2) {\n    std::vector<int> result;\n    std::copy_if(list1.begin(), list1.end(), std::back_inserter(result),\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> result1 = remove_elements({1,2,3,4,5,6,7,8,9,10}, {2,4,6,8});\n    std::vector<int> expected1 = {1, 3, 5, 7, 9, 10};\n    assert(result1 == expected1);\n\n    std::vector<int> result2 = remove_elements({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {1, 3, 5, 7});\n    std::vector<int> expected2 = {2, 4, 6, 8, 9, 10};\n    assert(result2 == expected2);\n\n    std::vector<int> result3 = remove_elements({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, {5, 7});\n    std::vector<int> expected3 = {1, 2, 3, 4, 6, 8, 9, 10};\n    assert(result3 == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> remove_elements(std::vector<int> list1, const std::vector<int>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    std::copy_if(list1.begin(), list1.end(), std::back_inserter(result),\n//begin to write code\n"
    },
    {
        "task_id": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint sum_series(int n) {\n    if (n < 1) {\n        return 0;\n    } else {\n        return n + sum_series(n - 2);\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(sum_series(6) == 12);\n    assert(sum_series(10) == 30);\n    assert(sum_series(9) == 25);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint sum_series(int n) {\n    if (n < 1) {\n        return 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint sum_series(int n) {\n    if (n < 1) {\n        return 0;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_series(6) == 12);\n    assert(sum_series(10) == 30);\n    assert(sum_series(9) == 25);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_series(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < 1) {\n        return 0;\n//begin to write code\n"
    },
    {
        "task_id": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.",
        "code_str": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\ndouble area_polygon(int s, double l) {\n  double area = s * (l * l) / (4 * tan(M_PI / s));\n  return area;\n}\n\n\n",
        "test": "int main()\n{\n    assert(abs(area_polygon(4, 20) - 400.00000000000006) < 1e-9);\n    assert(abs(area_polygon(10, 15) - 1731.1969896610804) < 1e-9);\n    assert(abs(area_polygon(9, 7) - 302.90938549487214) < 1e-9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble area_polygon(int s, double l) {\n  double area = s * (l * l) / (4 * tan(M_PI / s));\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the area of a regular polygon.",
        "perturbated_codes": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble area_polygon(int s, double l) {\n  double area = s * (l * l) / (4 * tan(M_PI / s));\n  double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(abs(area_polygon(4, 20) - 400.00000000000006) < 1e-9);\n    assert(abs(area_polygon(10, 15) - 1731.1969896610804) < 1e-9);\n    assert(abs(area_polygon(9, 7) - 302.90938549487214) < 1e-9);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble area_polygon(int s, double l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the area of a regular polygon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  double area = s * (l * l) / (4 * tan(M_PI / s));\n//begin to write code\n"
    },
    {
        "task_id": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\n\nint divSum(int n) {\n    int sum = 1;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            sum += i + (n / i);\n        }\n        i += 1;\n    }\n    return sum;\n}\n\nbool areEquivalent(int num1, int num2) {\n    return divSum(num1) == divSum(num2);\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(areEquivalent(36, 57) == false);\n    assert(areEquivalent(2, 4) == false);\n    assert(areEquivalent(23, 47) == true);\n\n    cout << \"All tests passed successfully.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint divSum(int n) {\n    int sum = 1;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            sum += i + (n / i);\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the sum of divisors are same or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint divSum(int n) {\n    int sum = 1;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            sum += i + (n / i);\n        }\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(areEquivalent(36, 57) == false);\n    assert(areEquivalent(2, 4) == false);\n    assert(areEquivalent(23, 47) == true);\n\n    cout << \"All tests passed successfully.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cmath>\nusing namespace std;\nint divSum(int n) {\n    int sum = 1;\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            sum += i + (n / i);\n        }\n//begin to write code\n"
    },
    {
        "task_id": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n\n",
        "test": "int main() {\n    assert(count_char_position(\"xbcefg\") == 2);\n    assert(count_char_position(\"ABcED\") == 3);\n    assert(count_char_position(\"AbgdeF\") == 5);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n            double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_char_position(\"xbcefg\") == 2);\n    assert(count_char_position(\"ABcED\") == 3);\n    assert(count_char_position(\"AbgdeF\") == 5);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint count_char_position(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count_chars = 0;\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if ((i == static_cast<size_t>(str1[i] - 'A')) ||\n            (i == static_cast<size_t>(str1[i] - 'a'))) {\n//begin to write code\n"
    },
    {
        "task_id": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n                evenPair += 1;\n            }\n        }\n    }\n    return evenPair;\n}\n\n\n",
        "test": "int main() {\n    assert(find_even_Pair({5, 4, 7, 2, 1}, 5) == 4);\n    assert(find_even_Pair({7, 2, 8, 1, 0, 5, 11}, 7) == 9);\n    assert(find_even_Pair({1, 2, 3}, 3) == 1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the pairs with xor as an even number.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n            double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_even_Pair({5, 4, 7, 2, 1}, 5) == 4);\n    assert(find_even_Pair({7, 2, 8, 1, 0, 5, 11}, 7) == 9);\n    assert(find_even_Pair({1, 2, 3}, 3) == 1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_even_Pair(const std::vector<int>& A, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int evenPair = 0;\n    for (int i = 0; i < N; ++i) {\n        for (int j = i + 1; j < N; ++j) {\n            if ((A[i] ^ A[j]) % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint next_Power_Of_2(int n) {\n    int count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n != 0) {\n        n >>= 1;\n        count++;\n    }\n    return 1 << count;\n}\n\n\n",
        "test": "int main() {\n    assert(next_Power_Of_2(0) == 1);\n    assert(next_Power_Of_2(5) == 8);\n    assert(next_Power_Of_2(17) == 32);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint next_Power_Of_2(int n) {\n    int count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find smallest power of 2 greater than or equal to n.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint next_Power_Of_2(int n) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    int count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(next_Power_Of_2(0) == 1);\n    assert(next_Power_Of_2(5) == 8);\n    assert(next_Power_Of_2(17) == 32);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint next_Power_Of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency(const std::vector<int>& a, int x) {\n    int count = 0;\n    for (int i : a) {\n        if (i == x) count += 1;\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(frequency({1,2,3}, 4) == 0);\n    assert(frequency({1,2,2,3,3,3,4}, 3) == 3);\n    assert(frequency({0,1,2,3,1,2}, 1) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency(const std::vector<int>& a, int x) {\n    int count = 0;\n    for (int i : a) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the frequency of a number in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency(const std::vector<int>& a, int x) {\n    int count = 0;\n    for (int i : a) {\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(frequency({1,2,3}, 4) == 0);\n    assert(frequency({1,2,2,3,3,3,4}, 3) == 3);\n    assert(frequency({0,1,2,3,1,2}, 1) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency(const std::vector<int>& a, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int i : a) {\n//begin to write code\n"
    },
    {
        "task_id": 169,
        "prompt": "Write a function to calculate the nth pell number.",
        "code_str": "#include<cassert>\n#include<iostream>\n\nint get_pell(int n) {\n    if (n <= 2) {\n        return n;\n    }\n    int a = 1;\n    int b = 2;\n    for (int i = 3; i <= n; ++i) {\n        int c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n\n",
        "test": "int main() {\n    assert(get_pell(4) == 12);\n    assert(get_pell(7) == 169);\n    assert(get_pell(8) == 408);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\nint get_pell(int n) {\n    if (n <= 2) {\n        return n;\n    }\n    int a = 1;\n    int b = 2;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the nth pell number.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\nint get_pell(int n) {\ndouble temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    if (n <= 2) {\n        return n;\n    }\n    int a = 1;\n    int b = 2;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_pell(4) == 12);\n    assert(get_pell(7) == 169);\n    assert(get_pell(8) == 408);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\nint get_pell(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the nth pell number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n <= 2) {\n        return n;\n    }\n    int a = 1;\n    int b = 2;\n//begin to write code\n"
    },
    {
        "task_id": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> list1 = {2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12};\n    assert(sum_range_list(list1, 8, 10) == 29);\n    assert(sum_range_list(list1, 5, 7) == 16);\n    assert(sum_range_list(list1, 7, 10) == 38);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> list1 = {2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12};\n    assert(sum_range_list(list1, 8, 10) == 29);\n    assert(sum_range_list(list1, 5, 7) == 16);\n    assert(sum_range_list(list1, 7, 10) == 38);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint sum_range_list(const std::vector<int>& list1, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum_range = 0;\n    for (int i = m; i <= n; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint perimeter_pentagon(int a) {\n    int perimeter = 5 * a;\n    return perimeter;\n}\n\n\n",
        "test": "int main() {\n    assert(perimeter_pentagon(5) == 25);\n    assert(perimeter_pentagon(10) == 50);\n    assert(perimeter_pentagon(15) == 75);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n    int perimeter = 5 * a;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the perimeter of a pentagon.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n    int perimeter = 5 * a;\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(perimeter_pentagon(5) == 25);\n    assert(perimeter_pentagon(10) == 50);\n    assert(perimeter_pentagon(15) == 75);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint perimeter_pentagon(int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = 5 * a;\n//begin to write code\n"
    },
    {
        "task_id": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <string>\n\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_occurance(\"letstdlenstdporstd\") == 3);\n    assert(count_occurance(\"truststdsolensporsd\") == 1);\n    assert(count_occurance(\"makestdsostdworthit\") == 2);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_occurance(\"letstdlenstdporstd\") == 3);\n    assert(count_occurance(\"truststdsolensporsd\") == 1);\n    assert(count_occurance(\"makestdsostdworthit\") == 2);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <string>\nint count_occurance(const std::string &s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (size_t i = 0; i + 2 < s.length(); ++i) {\n        if (s[i] == 's' && s[i + 1] == 't' && s[i + 2] == 'd') {\n//begin to write code\n"
    },
    {
        "task_id": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_splchar(const string& text) {\n    regex pattern(\"[\\\\\\W_]+\");\n    return regex_replace(text, pattern, \"\");\n}",
        "test": "int main() {\n    assert(remove_splchar(\"python  @#&^%$*program123\") == \"pythonprogram123\");\n    assert(remove_splchar(\"python %^$@!^&*()  programming24%$^^()    language\") == \"pythonprogramming24language\");\n    assert(remove_splchar(\"python   ^%&^()(+_)(_^&67)                  program\") == \"python67program\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_splchar(const string& text) {\n    regex pattern(\"[\\\\\\W_]+\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_splchar(const string& text) {\n    regex pattern(\"[\\\\\\W_]+\");\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_splchar(\"python  @#&^%$*program123\") == \"pythonprogram123\");\n    assert(remove_splchar(\"python %^$@!^&*()  programming24%$^^()    language\") == \"pythonprogramming24language\");\n    assert(remove_splchar(\"python   ^%&^()(+_)(_^&67)                  program\") == \"python67program\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_splchar(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove everything except alphanumeric characters from a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"[\\\\\\W_]+\");\n//begin to write code\n"
    },
    {
        "task_id": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code_str": "#include<iostream>\n    \n\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n        result[p.first].push_back(p.second);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((group_keyvalue({{\"yellow\", 1}, {\"blue\", 2}, {\"yellow\", 3}, {\"blue\", 4}, {\"red\", 1}}) == map<string, vector<int>>{{\"yellow\", {1, 3}}, {\"blue\", {2, 4}}, {\"red\", {1}}}));\n    assert((group_keyvalue({{\"python\", 1}, {\"python\", 2}, {\"python\", 3}, {\"python\", 4}, {\"python\", 5}}) == map<string, vector<int>>{{\"python\", {1, 2, 3, 4, 5}}}));\n    assert((group_keyvalue({{\"yellow\", 100}, {\"blue\", 200}, {\"yellow\", 300}, {\"blue\", 400}, {\"red\", 100}}) == map<string, vector<int>>{{\"yellow\", {100, 300}}, {\"blue\", {200, 400}}, {\"red\", {100}}}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "perturbated_codes": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((group_keyvalue({{\"yellow\", 1}, {\"blue\", 2}, {\"yellow\", 3}, {\"blue\", 4}, {\"red\", 1}}) == map<string, vector<int>>{{\"yellow\", {1, 3}}, {\"blue\", {2, 4}}, {\"red\", {1}}}));\n    assert((group_keyvalue({{\"python\", 1}, {\"python\", 2}, {\"python\", 3}, {\"python\", 4}, {\"python\", 5}}) == map<string, vector<int>>{{\"python\", {1, 2, 3, 4, 5}}}));\n    assert((group_keyvalue({{\"yellow\", 100}, {\"blue\", 200}, {\"yellow\", 300}, {\"blue\", 400}, {\"red\", 100}}) == map<string, vector<int>>{{\"yellow\", {100, 300}}, {\"blue\", {200, 400}}, {\"red\", {100}}}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <map>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, vector<int>> group_keyvalue(vector<pair<string, int>> l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, vector<int>> result;\n    for (auto& p : l) {\n//begin to write code\n"
    },
    {
        "task_id": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\n\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n            if (stack.empty() || pchar[stack.top()] != parenthese) {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return stack.empty();\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_valid_parenthese(\"(){}[]\") == true);\n    assert(is_valid_parenthese(\"()[{)}\") == false);\n    assert(is_valid_parenthese(\"()\") == true);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n//begin to write code\n",
        "cpp_prompt": "Write a function to verify validity of a string of parentheses.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n            stack.push(parenthese);\n        } else {\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_valid_parenthese(\"(){}[]\") == true);\n    assert(is_valid_parenthese(\"()[{)}\") == false);\n    assert(is_valid_parenthese(\"()\") == true);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <stack>\n#include <map>\nbool is_valid_parenthese(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to verify validity of a string of parentheses.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::stack<char> stack;\n    std::map<char, char> pchar = {{'(', ')'}, {'{', '}'}, {'[', ']'}};\n    for (char parenthese : str1) {\n        if (pchar.find(parenthese) != pchar.end()) {\n            stack.push(parenthese);\n        } else {\n//begin to write code\n"
    },
    {
        "task_id": 176,
        "prompt": "Write a function to find the perimeter of a triangle.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    return perimeter;\n}\n\n\n",
        "test": "int main() {\n    assert(perimeter_triangle(10, 20, 30) == 60);\n    assert(perimeter_triangle(3, 4, 5) == 12);\n    assert(perimeter_triangle(25, 35, 45) == 105);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the perimeter of a triangle.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n    int perimeter = a + b + c;\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(perimeter_triangle(10, 20, 30) == 60);\n    assert(perimeter_triangle(3, 4, 5) == 12);\n    assert(perimeter_triangle(25, 35, 45) == 105);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint perimeter_triangle(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int perimeter = a + b + c;\n//begin to write code\n"
    },
    {
        "task_id": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\n\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n    } else {\n        return std::make_pair(-1, -1);\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(answer(3, 8) == std::make_pair(3, 6));\n    assert(answer(2, 6) == std::make_pair(2, 4));\n    assert(answer(1, 3) == std::make_pair(1, 2));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find two distinct numbers such that their lcm lies within the given range.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(answer(3, 8) == std::make_pair(3, 6));\n    assert(answer(2, 6) == std::make_pair(2, 4));\n    assert(answer(1, 3) == std::make_pair(1, 2));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <utility> // For std::pair\nstd::pair<int, int> answer(int L, int R) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * L <= R) {\n        return std::make_pair(L, 2 * L);\n//begin to write code\n"
    },
    {
        "task_id": 178,
        "prompt": "Write a function to search some literals strings in a string.",
        "code_str": "#include<iostream>\n    \n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring string_Literals(const vector<string>& patterns, const string& text) {\n    for (const auto& pattern : patterns) {\n        regex re_pattern(pattern);\n        if (regex_search(text, re_pattern)) {\n            return \"Matched!\";\n        } else {\n            return \"Not Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}",
        "test": "int main()\n{\n    assert(string_Literals({\"language\"}, \"python language\") == \"Matched!\");\n    assert(string_Literals({\"program\"}, \"python language\") == \"Not Matched!\");\n    assert(string_Literals({\"python\"}, \"programming language\") == \"Not Matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring string_Literals(const vector<string>& patterns, const string& text) {\n    for (const auto& pattern : patterns) {\n        regex re_pattern(pattern);\n        if (regex_search(text, re_pattern)) {\n            return \"Matched!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function to search some literals strings in a string.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring string_Literals(const vector<string>& patterns, const string& text) {\n    for (const auto& pattern : patterns) {\n        regex re_pattern(pattern);\n        if (regex_search(text, re_pattern)) {\n            return \"Matched!\";\n            double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(string_Literals({\"language\"}, \"python language\") == \"Matched!\");\n    assert(string_Literals({\"program\"}, \"python language\") == \"Not Matched!\");\n    assert(string_Literals({\"python\"}, \"programming language\") == \"Not Matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring string_Literals(const vector<string>& patterns, const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search some literals strings in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& pattern : patterns) {\n        regex re_pattern(pattern);\n        if (regex_search(text, re_pattern)) {\n            return \"Matched!\";\n//begin to write code\n"
    },
    {
        "task_id": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nbool is_num_keith(int x) {\n    vector<int> terms;\n    int temp = x;\n    int n = 0;\n    while (temp > 0) {\n        terms.push_back(temp % 10);\n        temp = temp / 10;\n        n++;\n    }\n    reverse(terms.begin(), terms.end());\n    int next_term = 0;\n    int i = n;\n    while (next_term < x) {\n        next_term = 0;\n        for (int j = 1; j <= n; j++) {\n            next_term += terms[i - j];\n        }\n        if (next_term > x) {\n            break;\n        }\n        terms.push_back(next_term);\n        i++;\n    }\n    return (next_term == x);\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_num_keith(14) == true);\n    assert(is_num_keith(12) == false);\n    assert(is_num_keith(197) == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_num_keith(int x) {\n    vector<int> terms;\n    int temp = x;\n    int n = 0;\n    while (temp > 0) {\n        terms.push_back(temp % 10);\n        temp = temp / 10;\n        n++;\n    }\n    reverse(terms.begin(), terms.end());\n    int next_term = 0;\n    int i = n;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find if the given number is a keith number or not.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_num_keith(int x) {\n    vector<int> terms;\n    int temp = x;\n    int n = 0;\n    while (temp > 0) {\n        terms.push_back(temp % 10);\n        temp = temp / 10;\n        double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n        n++;\n    }\n    reverse(terms.begin(), terms.end());\n    int next_term = 0;\n    int i = n;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_num_keith(14) == true);\n    assert(is_num_keith(12) == false);\n    assert(is_num_keith(197) == true);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_num_keith(int x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find if the given number is a keith number or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> terms;\n    int temp = x;\n    int n = 0;\n    while (temp > 0) {\n        terms.push_back(temp % 10);\n        temp = temp / 10;\n        n++;\n    }\n    reverse(terms.begin(), terms.end());\n    int next_term = 0;\n    int i = n;\n//begin to write code\n"
    },
    {
        "task_id": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "code_str": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\nusing namespace std;\n\n\ndouble distance_lat_long(double slat, double slon, double elat, double elon) {\n    double dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon));\n    return dist;\n}",
        "test": "int main() {\n    assert(abs(distance_lat_long(23.5, 67.5, 25.5, 69.5) - 12179.372041317429) < 0.0001);\n    assert(abs(distance_lat_long(10.5, 20.5, 30.5, 40.5) - 6069.397933300514) < 0.0001);\n    assert(abs(distance_lat_long(10, 20, 30, 40) - 6783.751974994595) < 0.0001);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <cmath>\n#include <cassert>\n#include <iostream>\nusing namespace std;\ndouble distance_lat_long(double slat, double slon, double elat, double elon) {\n    double dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon));\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "perturbated_codes": "#include <cmath>\n#include <cassert>\n#include <iostream>\nusing namespace std;\ndouble distance_lat_long(double slat, double slon, double elat, double elon) {\n    double dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon));\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(distance_lat_long(23.5, 67.5, 25.5, 69.5) - 12179.372041317429) < 0.0001);\n    assert(abs(distance_lat_long(10.5, 20.5, 30.5, 40.5) - 6069.397933300514) < 0.0001);\n    assert(abs(distance_lat_long(10, 20, 30, 40) - 6783.751974994595) < 0.0001);\n}",
        "changed": 1,
        "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\nusing namespace std;\ndouble distance_lat_long(double slat, double slon, double elat, double elon) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate distance between two points using latitude and longitude.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon));\n//begin to write code\n"
    },
    {
        "task_id": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\n\nstd::string common_prefix_util(const std::string& str1, const std::string& str2) {\n    std::string result;\n    int n1 = str1.length();\n    int n2 = str2.length();\n    int i = 0;\n    int j = 0;\n    while (i < n1 && j < n2) {\n        if (str1[i] != str2[j]) {\n            break;\n        }\n        result += str1[i];\n        i++;\n        j++;\n    }\n    return result;\n}\n\nstd::string common_prefix(const std::vector<std::string>& arr, int n) {\n    std::string prefix = arr[0];\n    for (int i = 1; i < n; i++) {\n        prefix = common_prefix_util(prefix, arr[i]);\n    }\n    return prefix;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(common_prefix({\"tablets\", \"tables\", \"taxi\", \"tamarind\"}, 4) == \"ta\");\n    assert(common_prefix({\"apples\", \"ape\", \"april\"}, 3) == \"ap\");\n    assert(common_prefix({\"teens\", \"teenager\", \"teenmar\"}, 3) == \"teen\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\nstd::string common_prefix_util(const std::string& str1, const std::string& str2) {\n    std::string result;\n    int n1 = str1.length();\n    int n2 = str2.length();\n    int i = 0;\n    int j = 0;\n    while (i < n1 && j < n2) {\n        if (str1[i] != str2[j]) {\n            break;\n        }\n        result += str1[i];\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\nstd::string common_prefix_util(const std::string& str1, const std::string& str2) {\n    std::string result;\n    int n1 = str1.length();\n    int n2 = str2.length();\n    int i = 0;\n    int j = 0;\n    while (i < n1 && j < n2) {\n        if (str1[i] != str2[j]) {\n            break;\n        }\n        result += str1[i];\n        double temp_var_8 = 9.9;if (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(common_prefix({\"tablets\", \"tables\", \"taxi\", \"tamarind\"}, 4) == \"ta\");\n    assert(common_prefix({\"apples\", \"ape\", \"april\"}, 3) == \"ap\");\n    assert(common_prefix({\"teens\", \"teenager\", \"teenmar\"}, 3) == \"teen\");\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <vector>\nstd::string common_prefix_util(const std::string& str1, const std::string& str2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest common prefix in the given set of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    int n1 = str1.length();\n    int n2 = str2.length();\n    int i = 0;\n    int j = 0;\n    while (i < n1 && j < n2) {\n        if (str1[i] != str2[j]) {\n            break;\n        }\n        result += str1[i];\n//begin to write code\n"
    },
    {
        "task_id": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\n\nusing namespace std;\n\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n            lowercase_characters.push_back(c);\n        } else if (isdigit(c)) {\n            numerical_characters.push_back(c);\n        } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n            special_characters.push_back(c);\n        }\n    }\n\n    return make_tuple(uppercase_characters, lowercase_characters, numerical_characters, special_characters);\n}\n\n\n",
        "test": "int main() {\n    assert(find_character(\"ThisIsGeeksforGeeks\") == make_tuple(vector<char>{'T', 'I', 'G', 'G'}, vector<char>{'h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'}, vector<char>{}, vector<char>{}));\n    assert(find_character(\"Hithere2\") == make_tuple(vector<char>{'H'}, vector<char>{'i', 't', 'h', 'e', 'r', 'e'}, vector<char>{'2'}, vector<char>{}));\n    assert(find_character(\"HeyFolks32\") == make_tuple(vector<char>{'H', 'F'}, vector<char>{'e', 'y', 'o', 'l', 'k', 's'}, vector<char>{'3', '2'}, vector<char>{}));\n\n    cout << \"All tests passed.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n        double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_character(\"ThisIsGeeksforGeeks\") == make_tuple(vector<char>{'T', 'I', 'G', 'G'}, vector<char>{'h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'}, vector<char>{}, vector<char>{}));\n    assert(find_character(\"Hithere2\") == make_tuple(vector<char>{'H'}, vector<char>{'i', 't', 'h', 'e', 'r', 'e'}, vector<char>{'2'}, vector<char>{}));\n    assert(find_character(\"HeyFolks32\") == make_tuple(vector<char>{'H', 'F'}, vector<char>{'e', 'y', 'o', 'l', 'k', 's'}, vector<char>{'3', '2'}, vector<char>{}));\n\n    cout << \"All tests passed.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <cctype> // For std::isupper, std::islower, std::isdigit\nusing namespace std;\ntuple<vector<char>, vector<char>, vector<char>, vector<char>> find_character(const string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> uppercase_characters;\n    vector<char> lowercase_characters;\n    vector<char> numerical_characters;\n    vector<char> special_characters;\n    for (char c : str) {\n        if (isupper(c)) {\n            uppercase_characters.push_back(c);\n        } else if (islower(c)) {\n//begin to write code\n"
    },
    {
        "task_id": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_pairs({1, 5, 3, 4, 2}, 5, 3) == 2);\n    assert(count_pairs({8, 12, 16, 4, 0, 20}, 6, 4) == 5);\n    assert(count_pairs({2, 4, 1, 3, 4}, 5, 2) == 3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_pairs({1, 5, 3, 4, 2}, 5, 3) == 2);\n    assert(count_pairs({8, 12, 16, 4, 0, 20}, 6, 4) == 5);\n    assert(count_pairs({2, 4, 1, 3, 4}, 5, 2) == 3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_pairs(const std::vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count all the distinct pairs having a difference of k in any array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (abs(arr[i] - arr[j]) == k) {\n//begin to write code\n"
    },
    {
        "task_id": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n        if (x < num) return false;\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(greater_specificnum({220, 330, 500}, 200) == true);\n    assert(greater_specificnum({12, 17, 21}, 20) == false);\n    assert(greater_specificnum({1, 2, 3, 4}, 10) == false);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n        if (x < num) return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool greater_specificnum(const std::vector<int>& list, int num) {\n    for (int x : list) {\n        if (x < num) return false;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(greater_specificnum({220, 330, 500}, 200) == true);\n    assert(greater_specificnum({12, 17, 21}, 20) == false);\n    assert(greater_specificnum({1, 2, 3, 4}, 10) == false);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool greater_specificnum(const std::vector<int>& list, int num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all the values in a list that are greater than a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int x : list) {\n        if (x < num) return false;\n//begin to write code\n"
    },
    {
        "task_id": 185,
        "prompt": "Write a function to find the focus of a parabola.",
        "code_str": "\n#include <iostream>\n#include <utility>\n#include <cassert>\n\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n    return focus;\n}\n\n\n",
        "test": "int main() {\n    assert(parabola_focus(5, 3, 2) == std::make_pair(-0.3, 1.6));\n    assert(parabola_focus(9, 8, 4) == std::make_pair(-0.4444444444444444, 2.25));\n    assert(parabola_focus(2, 4, 6) == std::make_pair(-1.0, 4.125));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the focus of a parabola.",
        "perturbated_codes": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\ndouble temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(parabola_focus(5, 3, 2) == std::make_pair(-0.3, 1.6));\n    assert(parabola_focus(9, 8, 4) == std::make_pair(-0.4444444444444444, 2.25));\n    assert(parabola_focus(2, 4, 6) == std::make_pair(-1.0, 4.125));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <utility>\n#include <cassert>\nstd::pair<double, double> parabola_focus(double a, double b, double c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::pair<double, double> focus = std::make_pair((-b / (2 * a)), ((4 * a * c - b * b + 1) / (4 * a)));\n//begin to write code\n"
    },
    {
        "task_id": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nstring check_literals(string text, vector<string> patterns) {\n    for (auto pattern : patterns) {\n        if (regex_search(text, regex(pattern))) {\n            return \"Matched!\";\n        } else {\n            return \"Not Matched!\";\n        }\n    }\n    return \"Not Matched!\";\n}",
        "test": "int main() {\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"fox\"}) == \"Matched!\");\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"horse\"}) == \"Not Matched!\");\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"lazy\"}) == \"Matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_literals(string text, vector<string> patterns) {\n    for (auto pattern : patterns) {\n        if (regex_search(text, regex(pattern))) {\n            return \"Matched!\";\n        } else {\n//begin to write code\n",
        "cpp_prompt": "Write a function to search some literals strings in a string by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_literals(string text, vector<string> patterns) {\n    for (auto pattern : patterns) {\n        if (regex_search(text, regex(pattern))) {\n            return \"Matched!\";\n            double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n        } else {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"fox\"}) == \"Matched!\");\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"horse\"}) == \"Not Matched!\");\n    assert(check_literals(\"The quick brown fox jumps over the lazy dog.\", {\"lazy\"}) == \"Matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_literals(string text, vector<string> patterns) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search some literals strings in a string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (auto pattern : patterns) {\n        if (regex_search(text, regex(pattern))) {\n            return \"Matched!\";\n        } else {\n//begin to write code\n"
    },
    {
        "task_id": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "code_str": "\n#include <iostream>\n#include <cassert>\nusing namespace std;\n\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n        return 1 + longest_common_subsequence(X, Y, m-1, n-1);\n    } else {\n        return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n));\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4);\n    assert(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) == 3);\n    assert(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4) == 2);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n    if (m == 0 || n == 0) {\n        return 0;\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4);\n    assert(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) == 3);\n    assert(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4) == 2);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint longest_common_subsequence(const string &X, const string &Y, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m-1] == Y[n-1]) {\n//begin to write code\n"
    },
    {
        "task_id": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(prod_Square(25) == false);\n    assert(prod_Square(30) == false);\n    assert(prod_Square(16) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given number can be represented by product of two squares or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n                    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(prod_Square(25) == false);\n    assert(prod_Square(30) == false);\n    assert(prod_Square(16) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool prod_Square(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 2; i <= n; ++i) {\n        if (i * i < (n + 1)) {\n            for (int j = 2; j <= n; ++j) {\n                if ((i * i * j * j) == n) {\n                    return true;\n//begin to write code\n"
    },
    {
        "task_id": 189,
        "prompt": "Write a python function to find the first missing positive number.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint first_Missing_Positive(std::vector<int> arr, int n) {\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= 0 || arr[i] > n) {\n            arr[i] = 1;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        arr[(arr[i] - 1) % n] += n;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= n) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}\n\n\n",
        "test": "int main() {\n    assert(first_Missing_Positive({1, 2, 3, -1, 5}, 5) == 4);\n    assert(first_Missing_Positive({0, -1, -2, 1, 5, 8}, 6) == 2);\n    assert(first_Missing_Positive({0, 1, 2, 5, -8}, 5) == 3);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint first_Missing_Positive(std::vector<int> arr, int n) {\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= 0 || arr[i] > n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first missing positive number.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint first_Missing_Positive(std::vector<int> arr, int n) {\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= 0 || arr[i] > n) {\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first_Missing_Positive({1, 2, 3, -1, 5}, 5) == 4);\n    assert(first_Missing_Positive({0, -1, -2, 1, 5, 8}, 6) == 2);\n    assert(first_Missing_Positive({0, 1, 2, 5, -8}, 5) == 3);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint first_Missing_Positive(std::vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first missing positive number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ptr = 0;\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] == 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr == 0) {\n        return 1;\n    }\n    for (int i = 0; i < n; ++i) {\n        if (arr[i] <= 0 || arr[i] > n) {\n//begin to write code\n"
    },
    {
        "task_id": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Intgral_Points(int x1, int y1, int x2, int y2) {\n    return ((y2 - y1 - 1) * (x2 - x1 - 1));\n}\n\n\n",
        "test": "int main() {\n    assert(count_Intgral_Points(1, 1, 4, 4) == 4);\n    assert(count_Intgral_Points(1, 2, 1, 2) == 1);\n    assert(count_Intgral_Points(4, 2, 6, 4) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Intgral_Points(int x1, int y1, int x2, int y2) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of integral co-ordinates that lie inside a square.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Intgral_Points(int x1, int y1, int x2, int y2) {\ndouble temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Intgral_Points(1, 1, 4, 4) == 4);\n    assert(count_Intgral_Points(1, 2, 1, 2) == 1);\n    assert(count_Intgral_Points(4, 2, 6, 4) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Intgral_Points(int x1, int y1, int x2, int y2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of integral co-ordinates that lie inside a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(!check_monthnumber(\"February\"));\n    assert(check_monthnumber(\"June\"));\n    assert(check_monthnumber(\"April\"));\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(!check_monthnumber(\"February\"));\n    assert(check_monthnumber(\"June\"));\n    assert(check_monthnumber(\"April\"));\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nbool check_monthnumber(std::string monthname3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname3 == \"April\" || monthname3 == \"June\" || monthname3 == \"September\" || monthname3 == \"November\") {\n        return true;\n//begin to write code\n"
    },
    {
        "task_id": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n        }\n        if (isdigit(i)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n\n",
        "test": "int main() {\n    assert(check_String(\"thishasboth29\") == true);\n    assert(check_String(\"python\") == false);\n    assert(check_String(\"string\") == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether a string has atleast one letter and one number.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_String(\"thishasboth29\") == true);\n    assert(check_String(\"python\") == false);\n    assert(check_String(\"string\") == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nbool check_String(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool flag_l = false;\n    bool flag_n = false;\n    for (char i : str) {\n        if (isalpha(i)) {\n            flag_l = true;\n//begin to write code\n"
    },
    {
        "task_id": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\n\nvector<int> remove_tuple(const vector<int>& test_vec) {\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n  return vector<int>(unique_elements.begin(), unique_elements.end());\n}\n\n\n",
        "test": "int main()\n{\n    assert((remove_tuple({1, 3, 5, 2, 3, 5, 1, 1, 3}) == vector<int>{1, 2, 3, 5}));\n    assert((remove_tuple({2, 3, 4, 4, 5, 6, 6, 7, 8, 8}) == vector<int>{2, 3, 4, 5, 6, 7, 8}));\n    assert((remove_tuple({11, 12, 13, 11, 11, 12, 14, 13}) == vector<int>{11, 12, 13, 14}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> remove_tuple(const vector<int>& test_vec) {\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove the duplicates from the given tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> remove_tuple(const vector<int>& test_vec) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((remove_tuple({1, 3, 5, 2, 3, 5, 1, 1, 3}) == vector<int>{1, 2, 3, 5}));\n    assert((remove_tuple({2, 3, 4, 4, 5, 6, 6, 7, 8, 8}) == vector<int>{2, 3, 4, 5, 6, 7, 8}));\n    assert((remove_tuple({11, 12, 13, 11, 11, 12, 14, 13}) == vector<int>{11, 12, 13, 14}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nvector<int> remove_tuple(const vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove the duplicates from the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  set<int> unique_elements(test_vec.begin(), test_vec.end());\n//begin to write code\n"
    },
    {
        "task_id": 194,
        "prompt": "Write a python function to convert octal number to decimal number.",
        "code_str": "#include<cassert>\n#include<iostream>\n\nint octal_To_Decimal(int n) {  \n    int num = n; \n    int dec_value = 0; \n    int base = 1; \n    int temp = num; \n    while (temp) { \n        int last_digit = temp % 10; \n        temp = temp / 10; \n        dec_value += last_digit * base; \n        base = base * 8; \n    } \n    return dec_value; \n}\n\n\n",
        "test": "int main()\n{\n    assert(octal_To_Decimal(25) == 21);\n    assert(octal_To_Decimal(30) == 24);\n    assert(octal_To_Decimal(40) == 32);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\nint octal_To_Decimal(int n) {  \n    int num = n; \n    int dec_value = 0; \n    int base = 1; \n    int temp = num; \n    while (temp) { \n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to convert octal number to decimal number.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\nint octal_To_Decimal(int n) {  \n    int num = n; \n    int dec_value = 0; \n    int base = 1; \n    int temp = num; \n    while (temp) { \n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(octal_To_Decimal(25) == 21);\n    assert(octal_To_Decimal(30) == 24);\n    assert(octal_To_Decimal(40) == 32);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\nint octal_To_Decimal(int n) {  \n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert octal number to decimal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int num = n; \n    int dec_value = 0; \n    int base = 1; \n    int temp = num; \n    while (temp) { \n//begin to write code\n"
    },
    {
        "task_id": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.",
        "code_str": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(first({1,2,3,4,5,6,6}, 6, 6) == 5);\n    assert(first({1,2,2,2,3,2,2,4,2}, 2, 9) == 1);\n    assert(first({1,2,3}, 1, 3) == 0);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first position of an element in a sorted array.",
        "perturbated_codes": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n            double temp_var_8 = 9.9;if (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first({1,2,3,4,5,6,6}, 6, 6) == 5);\n    assert(first({1,2,2,2,3,2,2,4,2}, 2, 9) == 1);\n    assert(first({1,2,3}, 1, 3) == 0);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint first(const std::vector<int>& arr, int x, int n) { \n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int low = 0;\n    int high = n - 1;\n    int res = -1;\n    while (low <= high) {\n        int mid = (low + high) / 2;\n        if (arr[mid] > x) {\n            high = mid - 1;\n//begin to write code\n"
    },
    {
        "task_id": 196,
        "prompt": "Write a function to remove all the tuples with length k.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n            res.push_back(ele);\n        }\n    }\n    return res;\n}",
        "test": "int main()\n{\n    assert(((remove_tuples({{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)) == vector<vector<int>>{{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}));\n    assert(((remove_tuples({{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)) == vector<vector<int>>{{1, 2, 3}, {3, 4, 6, 7}}));\n    assert(((remove_tuples({{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)) == vector<vector<int>>{{4, 3}, {1}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove all the tuples with length k.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(((remove_tuples({{4, 5}, {4}, {8, 6, 7}, {1}, {3, 4, 6, 7}}, 1)) == vector<vector<int>>{{4, 5}, {8, 6, 7}, {3, 4, 6, 7}}));\n    assert(((remove_tuples({{4, 5}, {4, 5}, {6, 7}, {1, 2, 3}, {3, 4, 6, 7}}, 2)) == vector<vector<int>>{{1, 2, 3}, {3, 4, 6, 7}}));\n    assert(((remove_tuples({{1, 4, 4}, {4, 3}, {8, 6, 7}, {1}, {3, 6, 7}}, 3)) == vector<vector<int>>{{4, 3}, {1}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> remove_tuples(vector<vector<int>> test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove all the tuples with length k.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (auto ele : test_list) {\n        if ((int)ele.size() != K) {\n//begin to write code\n"
    },
    {
        "task_id": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n        res.push_back(pow(test_vec1[i], test_vec2[i]));\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert((find_exponentio({10, 4, 5, 6}, {5, 6, 7, 5}) == vector<int>{100000, 4096, 78125, 7776}));\n    assert((find_exponentio({11, 5, 6, 7}, {6, 7, 8, 6}) == vector<int>{1771561, 78125, 1679616, 117649}));\n    assert((find_exponentio({12, 6, 7, 8}, {7, 8, 9, 7}) == vector<int>{35831808, 1679616, 40353607, 2097152}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((find_exponentio({10, 4, 5, 6}, {5, 6, 7, 5}) == vector<int>{100000, 4096, 78125, 7776}));\n    assert((find_exponentio({11, 5, 6, 7}, {6, 7, 8, 6}) == vector<int>{1771561, 78125, 1679616, 117649}));\n    assert((find_exponentio({12, 6, 7, 8}, {7, 8, 9, 7}) == vector<int>{35831808, 1679616, 40353607, 2097152}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nvector<int> find_exponentio(const vector<int>& test_vec1, const vector<int>& test_vec2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the exponentiation of the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> res;\n    for (size_t i = 0; i < test_vec1.size(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble largest_triangle(double a, double b) {\n    if (a < 0 || b < 0) {\n        return -1;\n    }\n    double area = (3 * sqrt(3) * pow(a, 2)) / (4 * b);\n    return area;\n}\n\n\n",
        "test": "int main() {\n    assert(fabs(largest_triangle(4, 2) - 10.392304845413264) < 1e-9);\n    assert(fabs(largest_triangle(5, 7) - 4.639421805988064) < 1e-9);\n    assert(fabs(largest_triangle(9, 1) - 105.2220865598093) < 1e-9);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble largest_triangle(double a, double b) {\n    if (a < 0 || b < 0) {\n        return -1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble largest_triangle(double a, double b) {\n    if (a < 0 || b < 0) {\n        return -1;\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fabs(largest_triangle(4, 2) - 10.392304845413264) < 1e-9);\n    assert(fabs(largest_triangle(5, 7) - 4.639421805988064) < 1e-9);\n    assert(fabs(largest_triangle(9, 1) - 105.2220865598093) < 1e-9);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble largest_triangle(double a, double b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the largest triangle that can be inscribed in an ellipse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a < 0 || b < 0) {\n        return -1;\n//begin to write code\n"
    },
    {
        "task_id": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(highest_Power_of_2(10) == 8);\n    assert(highest_Power_of_2(19) == 16);\n    assert(highest_Power_of_2(32) == 32);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find highest power of 2 less than or equal to given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(highest_Power_of_2(10) == 8);\n    assert(highest_Power_of_2(19) == 16);\n    assert(highest_Power_of_2(32) == 32);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint highest_Power_of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n//begin to write code\n"
    },
    {
        "task_id": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n            max_result.push_back(i);\n        }\n    }\n    return max_result;\n}\n\n\n",
        "test": "int main() {\n    assert((position_max({12,33,23,10,67,89,45,667,23,12,11,10,54}) == std::vector<int>{7}));\n    assert((position_max({1,2,2,2,4,4,4,5,5,5,5}) == std::vector<int>{7,8,9,10}));\n    assert((position_max({2,1,5,6,8,3,4,9,10,11,8,12}) == std::vector<int>{11}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((position_max({12,33,23,10,67,89,45,667,23,12,11,10,54}) == std::vector<int>{7}));\n    assert((position_max({1,2,2,2,4,4,4,5,5,5,5}) == std::vector<int>{7,8,9,10}));\n    assert((position_max({2,1,5,6,8,3,4,9,10,11,8,12}) == std::vector<int>{11}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_max(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_val = *std::max_element(list1.begin(), list1.end());\n    std::vector<int> max_result;\n    for (int i = 0; i < list1.size(); ++i) {\n        if (list1[i] == max_val) {\n//begin to write code\n"
    },
    {
        "task_id": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.",
        "code_str": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool chkList(const std::vector<std::string>& lst) {\n    return std::set<std::string>(lst.begin(), lst.end()).size() == 1;\n}\n\n\n",
        "test": "int main()\n{\n    assert(chkList({\"one\",\"one\",\"one\"}) == true);\n    assert(chkList({\"one\",\"Two\",\"Three\"}) == false);\n    assert(chkList({\"bigdata\",\"python\",\"Django\"}) == false);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool chkList(const std::vector<std::string>& lst) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the elements in a list are same or not.",
        "perturbated_codes": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool chkList(const std::vector<std::string>& lst) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(chkList({\"one\",\"one\",\"one\"}) == true);\n    assert(chkList({\"one\",\"Two\",\"Three\"}) == false);\n    assert(chkList({\"bigdata\",\"python\",\"Django\"}) == false);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool chkList(const std::vector<std::string>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 202,
        "prompt": "Write a function to remove even characters in a string.",
        "code_str": "#include<iostream>\n    \n\n#include <string>\n#include <cassert>\n\nstd::string remove_even(std::string str1) {\n    std::string str2 = \"\";\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 != 0) {\n            str2 += str1[i - 1];\n        }\n    }\n    return str2;\n}\n\n\n",
        "test": "int main() {\n    assert(remove_even(\"python\") == \"pto\");\n    assert(remove_even(\"program\") == \"porm\");\n    assert(remove_even(\"language\") == \"lnug\");\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cassert>\nstd::string remove_even(std::string str1) {\n    std::string str2 = \"\";\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 != 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove even characters in a string.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cassert>\nstd::string remove_even(std::string str1) {\n    std::string str2 = \"\";\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 != 0) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_even(\"python\") == \"pto\");\n    assert(remove_even(\"program\") == \"porm\");\n    assert(remove_even(\"language\") == \"lnug\");\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nstd::string remove_even(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove even characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string str2 = \"\";\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 != 0) {\n//begin to write code\n"
    },
    {
        "task_id": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint hamming_Distance(int n1, int n2) {\n    int x = n1 ^ n2;\n    int setBits = 0;\n    while (x > 0) {\n        setBits += x & 1;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n\n",
        "test": "int main() {\n    assert(hamming_Distance(4, 8) == 2);\n    assert(hamming_Distance(2, 4) == 2);\n    assert(hamming_Distance(1, 2) == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n    int x = n1 ^ n2;\n    int setBits = 0;\n    while (x > 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the hamming distance between given two integers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n    int x = n1 ^ n2;\n    int setBits = 0;\n    while (x > 0) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(hamming_Distance(4, 8) == 2);\n    assert(hamming_Distance(2, 4) == 2);\n    assert(hamming_Distance(1, 2) == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint hamming_Distance(int n1, int n2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int x = n1 ^ n2;\n    int setBits = 0;\n    while (x > 0) {\n//begin to write code\n"
    },
    {
        "task_id": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.",
        "code_str": "\n#include<iostream>\n#include<cassert>\n\nint count(std::string s, char c) {\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert(count(\"abcc\", 'c') == 2);\n    assert(count(\"ababca\", 'a') == 3);\n    assert(count(\"mnmm0pm\", 'm') == 4);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the occurrence of a given character in a string.",
        "perturbated_codes": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count(\"abcc\", 'c') == 2);\n    assert(count(\"ababca\", 'a') == 3);\n    assert(count(\"mnmm0pm\", 'm') == 4);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<cassert>\nint count(std::string s, char c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == c) {\n//begin to write code\n"
    },
    {
        "task_id": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> inversion_elements(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (int num : test_vec) {\n        res.push_back(~num);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert((inversion_elements({7, 8, 9, 1, 10, 7}) == std::vector<int>{-8, -9, -10, -2, -11, -8}));\n    assert((inversion_elements({2, 4, 5, 6, 1, 7}) == std::vector<int>{-3, -5, -6, -7, -2, -8}));\n    assert((inversion_elements({8, 9, 11, 14, 12, 13}) == std::vector<int>{-9, -10, -12, -15, -13, -14}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> inversion_elements(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (int num : test_vec) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> inversion_elements(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (int num : test_vec) {\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((inversion_elements({7, 8, 9, 1, 10, 7}) == std::vector<int>{-8, -9, -10, -2, -11, -8}));\n    assert((inversion_elements({2, 4, 5, 6, 1, 7}) == std::vector<int>{-3, -5, -6, -7, -2, -8}));\n    assert((inversion_elements({8, 9, 11, 14, 12, 13}) == std::vector<int>{-9, -10, -12, -15, -13, -14}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> inversion_elements(const std::vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the inversions of tuple elements in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    for (int num : test_vec) {\n//begin to write code\n"
    },
    {
        "task_id": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\n\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> test1 = {\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"};\n    std::vector<std::string> expected1 = {\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"};\n    assert(concatenate_elements(test1) == expected1);\n\n    std::vector<std::string> test2 = {\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"};\n    std::vector<std::string> expected2 = {\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"};\n    assert(concatenate_elements(test2) == expected2);\n\n    std::vector<std::string> test3 = {\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"};\n    std::vector<std::string> expected3 = {\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"};\n    assert(concatenate_elements(test3) == expected3);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> test1 = {\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"};\n    std::vector<std::string> expected1 = {\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"};\n    assert(concatenate_elements(test1) == expected1);\n\n    std::vector<std::string> test2 = {\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"};\n    std::vector<std::string> expected2 = {\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"};\n    assert(concatenate_elements(test2) == expected2);\n\n    std::vector<std::string> test3 = {\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"};\n    std::vector<std::string> expected3 = {\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"};\n    assert(concatenate_elements(test3) == expected3);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <tuple>\n#include <cassert>\nstd::vector<std::string> concatenate_elements(const std::vector<std::string>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the adjacent element concatenation in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint find_longest_repeating_subseq(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n            } else {\n                dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]);\n            }\n        }\n    }\n    return dp[n][n];\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_longest_repeating_subseq(\"AABEBCDD\") == 3);\n    assert(find_longest_repeating_subseq(\"aabb\") == 2);\n    assert(find_longest_repeating_subseq(\"aab\") == 1);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_longest_repeating_subseq(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n//begin to write code\n",
        "cpp_prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_longest_repeating_subseq(string str) {\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n                double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_longest_repeating_subseq(\"AABEBCDD\") == 3);\n    assert(find_longest_repeating_subseq(\"aabb\") == 2);\n    assert(find_longest_repeating_subseq(\"aab\") == 1);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_longest_repeating_subseq(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = str.length();\n    vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j <= n; ++j) {\n            if (str[i - 1] == str[j - 1] && i != j) {\n                dp[i][j] = 1 + dp[i - 1][j - 1];\n//begin to write code\n"
    },
    {
        "task_id": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n    return regex_search(num, num_fetch);\n}",
        "test": "int main()\n{\n    assert(is_decimal(\"123.11\") == true);\n    assert(is_decimal(\"0.21\") == true);\n    assert(is_decimal(\"123.1214\") == false);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_decimal(\"123.11\") == true);\n    assert(is_decimal(\"0.21\") == true);\n    assert(is_decimal(\"123.1214\") == false);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nbool is_decimal(const string& num) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex num_fetch(R\"(^[0-9]+(\\.[0-9]{1,2})?$)\");\n//begin to write code\n"
    },
    {
        "task_id": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code_str": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n\nusing namespace std;\n\nvector<int> heap_replace(vector<int> heap, int a) {\n    make_heap(heap.begin(), heap.end(),greater<int>());\n    pop_heap(heap.begin(), heap.end());\n    heap.pop_back();\n    heap.push_back(a);\n    sort(heap.begin(),heap.end());\n    return heap;\n}",
        "test": "int main() {\n    vector<int> heap = {25, 44, 68, 21, 39, 23, 89};\n\n    assert(heap_replace(heap, 21) == vector<int>({21, 23, 25, 39 , 44, 68, 89}));\n    assert(heap_replace(heap, 110) == vector<int>({23, 25, 39, 44, 68, 89, 110}));\n    assert(heap_replace(heap, 500) == vector<int>({23, 25, 39, 44, 68, 89, 500}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<int> heap_replace(vector<int> heap, int a) {\n    make_heap(heap.begin(), heap.end(),greater<int>());\n    pop_heap(heap.begin(), heap.end());\n    heap.pop_back();\n//begin to write code\n",
        "cpp_prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "perturbated_codes": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<int> heap_replace(vector<int> heap, int a) {\n    make_heap(heap.begin(), heap.end(),greater<int>());\n    pop_heap(heap.begin(), heap.end());\n    heap.pop_back();\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> heap = {25, 44, 68, 21, 39, 23, 89};\n\n    assert(heap_replace(heap, 21) == vector<int>({21, 23, 25, 39 , 44, 68, 89}));\n    assert(heap_replace(heap, 110) == vector<int>({23, 25, 39, 44, 68, 89, 110}));\n    assert(heap_replace(heap, 500) == vector<int>({23, 25, 39, 44, 68, 89, 500}));\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<int> heap_replace(vector<int> heap, int a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to delete the smallest element from the given heap and then insert a new item.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    make_heap(heap.begin(), heap.end(),greater<int>());\n    pop_heap(heap.begin(), heap.end());\n    heap.pop_back();\n//begin to write code\n"
    },
    {
        "task_id": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code_str": "#include<iostream>\n    \n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\n\nbool is_allowed_specific_char(string str) {\n    regex get_char(\"[^a-zA-Z0-9.]\");\n    return !regex_search(str, get_char);\n}",
        "test": "int main() {\n    assert(is_allowed_specific_char(\"ABCDEFabcdef123450\") == true);\n    assert(is_allowed_specific_char(\"*&%@#!}{\") == false);\n    assert(is_allowed_specific_char(\"HELLOhowareyou98765\") == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\nbool is_allowed_specific_char(string str) {\n    regex get_char(\"[^a-zA-Z0-9.]\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "perturbated_codes": "#include<iostream>\n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\nbool is_allowed_specific_char(string str) {\n    regex get_char(\"[^a-zA-Z0-9.]\");\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_allowed_specific_char(\"ABCDEFabcdef123450\") == true);\n    assert(is_allowed_specific_char(\"*&%@#!}{\") == false);\n    assert(is_allowed_specific_char(\"HELLOhowareyou98765\") == true);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <regex>\n#include <string>\n#include <cassert>\nusing namespace std;\nbool is_allowed_specific_char(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex get_char(\"[^a-zA-Z0-9.]\");\n//begin to write code\n"
    },
    {
        "task_id": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint count_Num(int n) {\n    if (n == 1) {\n        return 1;\n    }\n    int count = pow(2, n - 2);\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Num(2) == 1);\n    assert(count_Num(3) == 2);\n    assert(count_Num(1) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint count_Num(int n) {\n    if (n == 1) {\n        return 1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count numbers whose oth and nth bits are set.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint count_Num(int n) {\n    if (n == 1) {\n        return 1;\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Num(2) == 1);\n    assert(count_Num(3) == 2);\n    assert(count_Num(1) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint count_Num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count numbers whose oth and nth bits are set.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 1) {\n        return 1;\n//begin to write code\n"
    },
    {
        "task_id": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += pow(i, 4);\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    assert(fourth_Power_Sum(2) == 17);\n    assert(fourth_Power_Sum(4) == 354);\n    assert(fourth_Power_Sum(6) == 2275);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of fourth power of n natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fourth_Power_Sum(2) == 17);\n    assert(fourth_Power_Sum(4) == 354);\n    assert(fourth_Power_Sum(6) == 2275);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\nint fourth_Power_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n        std::get<1>(test_tup1) + std::get<1>(test_tup2),\n        std::get<2>(test_tup1) + std::get<2>(test_tup2)\n    );\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert(concatenate_strings(std::make_tuple(\"Manjeet\", \"Nikhil\", \"Akshat\"), std::make_tuple(\" Singh\", \" Meherwal\", \" Garg\")) == std::make_tuple(\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"));\n    assert(concatenate_strings(std::make_tuple(\"Shaik\", \"Ayesha\", \"Sanya\"), std::make_tuple(\" Dawood\", \" Begum\", \" Singh\")) == std::make_tuple(\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"));\n    assert(concatenate_strings(std::make_tuple(\"Harpreet\", \"Priyanka\", \"Muskan\"), std::make_tuple(\"Kour\", \" Agarwal\", \"Sethi\")) == std::make_tuple(\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform the concatenation of two string tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(concatenate_strings(std::make_tuple(\"Manjeet\", \"Nikhil\", \"Akshat\"), std::make_tuple(\" Singh\", \" Meherwal\", \" Garg\")) == std::make_tuple(\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"));\n    assert(concatenate_strings(std::make_tuple(\"Shaik\", \"Ayesha\", \"Sanya\"), std::make_tuple(\" Dawood\", \" Begum\", \" Singh\")) == std::make_tuple(\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"));\n    assert(concatenate_strings(std::make_tuple(\"Harpreet\", \"Priyanka\", \"Muskan\"), std::make_tuple(\"Kour\", \" Agarwal\", \"Sethi\")) == std::make_tuple(\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::string, std::string, std::string> concatenate_strings(const std::tuple<std::string, std::string, std::string>& test_tup1, const std::tuple<std::string, std::string, std::string>& test_tup2)\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the concatenation of two string tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    std::tuple<std::string, std::string, std::string> res(\n        std::get<0>(test_tup1) + std::get<0>(test_tup2),\n//begin to write code\n"
    },
    {
        "task_id": 214,
        "prompt": "Write a function to convert radians to degrees.",
        "code_str": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble degree_radian(double radian) {\n    double degree = radian * (180.0 / M_PI);\n    return degree;\n}\n\n\n",
        "test": "int main() {\n    assert(degree_radian(90) == 5156.620156177409);\n    assert(degree_radian(60) == 3437.746770784939);\n    assert(degree_radian(120) == 6875.493541569878);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert radians to degrees.",
        "perturbated_codes": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    double degree = radian * (180.0 / M_PI);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(degree_radian(90) == 5156.620156177409);\n    assert(degree_radian(60) == 3437.746770784939);\n    assert(degree_radian(120) == 6875.493541569878);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble degree_radian(double radian) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double degree = radian * (180.0 / M_PI);\n//begin to write code\n"
    },
    {
        "task_id": 215,
        "prompt": "Write a function to decode a run-length encoded given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\n\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n            }\n        } else {\n            result.push_back(g[0]);\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(decode_list({{2, 1}, {1, 2}, {1, 3}, {2, 4}, {1, 5}, {1, 1}}) == vector<int>({1, 1, 2, 3, 4, 4, 5, 1}));\n    assert(decode_list({{1, 'a'}, {1, 'u'}, {1, 't'}, {1, 'o'}, {1, 'm'}, {1, 'a'}, {1, 't'}, {1, 'i'},\n                        {1, 'c'}, {1, 'a'}, {2, 'l'}, {1, 'y'}}) == vector<int>({'a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y'}));\n    assert(decode_list({{1, 'p'}, {1, 'y'}, {1, 't'}, {1, 'h'}, {1, 'o'}, {1, 'n'}}) == vector<int>({'p', 'y', 't', 'h', 'o', 'n'}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n",
        "cpp_prompt": "Write a function to decode a run-length encoded given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n                double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(decode_list({{2, 1}, {1, 2}, {1, 3}, {2, 4}, {1, 5}, {1, 1}}) == vector<int>({1, 1, 2, 3, 4, 4, 5, 1}));\n    assert(decode_list({{1, 'a'}, {1, 'u'}, {1, 't'}, {1, 'o'}, {1, 'm'}, {1, 'a'}, {1, 't'}, {1, 'i'},\n                        {1, 'c'}, {1, 'a'}, {2, 'l'}, {1, 'y'}}) == vector<int>({'a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y'}));\n    assert(decode_list({{1, 'p'}, {1, 'y'}, {1, 't'}, {1, 'h'}, {1, 'o'}, {1, 'n'}}) == vector<int>({'p', 'y', 't', 'h', 'o', 'n'}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <typeinfo>\nusing namespace std;\nvector<int> decode_list(const vector<vector<int>>& alist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (const auto& g : alist) {\n        if (g.size() == 2) {\n            for (int i = 0; i < g[0]; ++i) {\n                result.push_back(g[1]);\n//begin to write code\n"
    },
    {
        "task_id": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                exist = false;\n                break;\n            }\n        }\n        if (!exist) break;\n    }\n    return exist;\n}\n\n\n",
        "test": "int main() {\n    assert(check_subset_list<int>({\n        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n    }, {\n        {12, 18, 23, 25, 45}, {7, 11, 19, 24, 28}, {1, 5, 8, 18, 15, 16}\n    }) == false);\n\n    assert(check_subset_list<int>({\n        {2, 3, 1}, {4, 5}, {6, 8}\n    }, {\n        {4, 5}, {6, 8}\n    }) == true);\n\n    assert(check_subset_list<char>({\n        {'a', 'b'}, {'e'}, {'c', 'd'}\n    }, {\n        {'g'}\n    }) == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n                    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_subset_list<int>({\n        {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}\n    }, {\n        {12, 18, 23, 25, 45}, {7, 11, 19, 24, 28}, {1, 5, 8, 18, 15, 16}\n    }) == false);\n\n    assert(check_subset_list<int>({\n        {2, 3, 1}, {4, 5}, {6, 8}\n    }, {\n        {4, 5}, {6, 8}\n    }) == true);\n\n    assert(check_subset_list<char>({\n        {'a', 'b'}, {'e'}, {'c', 'd'}\n    }, {\n        {'g'}\n    }) == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nbool check_subset_list(std::vector<std::vector<T>> list1, std::vector<std::vector<T>> list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool exist = true;\n    for (const auto& sublist : list2) {\n        for (const auto& item : sublist) {\n            bool found = false;\n            for (const auto& l : list1) {\n                if (std::find(l.begin(), l.end(), item) != l.end()) {\n                    found = true;\n                    break;\n//begin to write code\n"
    },
    {
        "task_id": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "code_str": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\n\nchar first_Repeated_Char(string str) \n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n        } else { \n            h[ch] = 0;\n        }\n    }\n    return '\\0';\n}\n\n\n",
        "test": "int main()\n{\n    assert(first_Repeated_Char(\"Google\") == 'o');\n    assert(first_Repeated_Char(\"data\") == 'a');\n    assert(first_Repeated_Char(\"python\") == '\\0');\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\nchar first_Repeated_Char(string str) \n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first repeated character in a given string.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\nchar first_Repeated_Char(string str) \n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n            double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(first_Repeated_Char(\"Google\") == 'o');\n    assert(first_Repeated_Char(\"data\") == 'a');\n    assert(first_Repeated_Char(\"python\") == '\\0');\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<string>\n#include<unordered_map>\nusing namespace std;\nchar first_Repeated_Char(string str) \n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    unordered_map<char, int> h;\n    for (char ch : str) {\n        if (h.find(ch) != h.end()) { \n            return ch;\n//begin to write code\n"
    },
    {
        "task_id": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
        "code_str": "#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <cassert>\n\nusing namespace std;\n\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n\nint min_Operations(int A, int B) {\n    if (A > B) {\n        swap(A, B);\n    }\n    B = B / gcd(A, B);\n    return B - 1;\n}",
        "test": "int main() {\n    assert(min_Operations(2, 4) == 1);\n    assert(min_Operations(4, 10) == 4);\n    assert(min_Operations(1, 4) == 3);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <cassert>\nusing namespace std;\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the minimum operations required to make two numbers equal.",
        "perturbated_codes": "#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <cassert>\nusing namespace std;\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    return a;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(min_Operations(2, 4) == 1);\n    assert(min_Operations(4, 10) == 4);\n    assert(min_Operations(1, 4) == 3);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <algorithm>\n#include <numeric>\n#include <cassert>\nusing namespace std;\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n//begin to write code\n"
    },
    {
        "task_id": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n            res.push_back(test_vec[idx]);\n        }\n    }\n    return std::make_tuple(res);\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> vec1{5, 20, 3, 7, 6, 8};\n    std::vector<int> vec2{4, 5, 6, 1, 2, 7};\n    std::vector<int> vec3{2, 3, 4, 8, 9, 11, 7};\n\n    // Test case 1\n    auto result1 = extract_min_max(vec1, 2);\n    std::vector<int> expected1{3, 5, 8, 20};\n    assert(std::get<0>(result1) == expected1);\n\n    // Test case 2\n    auto result2 = extract_min_max(vec2, 3);\n    std::vector<int> expected2{1, 2, 4, 5, 6, 7};\n    assert(std::get<0>(result2) == expected2);\n\n    // Test case 3\n    auto result3 = extract_min_max(vec3, 4);\n    std::vector<int> expected3{2, 3, 4, 7, 8, 9, 11};\n    assert(std::get<0>(result3) == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> vec1{5, 20, 3, 7, 6, 8};\n    std::vector<int> vec2{4, 5, 6, 1, 2, 7};\n    std::vector<int> vec3{2, 3, 4, 8, 9, 11, 7};\n\n    // Test case 1\n    auto result1 = extract_min_max(vec1, 2);\n    std::vector<int> expected1{3, 5, 8, 20};\n    assert(std::get<0>(result1) == expected1);\n\n    // Test case 2\n    auto result2 = extract_min_max(vec2, 3);\n    std::vector<int> expected2{1, 2, 4, 5, 6, 7};\n    assert(std::get<0>(result2) == expected2);\n\n    // Test case 3\n    auto result3 = extract_min_max(vec3, 4);\n    std::vector<int> expected3{2, 3, 4, 7, 8, 9, 11};\n    assert(std::get<0>(result3) == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <cassert>\nstd::tuple<std::vector<int>> extract_min_max(std::vector<int> test_vec, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract maximum and minimum k elements in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    std::sort(test_vec.begin(), test_vec.end());\n    for (int idx = 0; idx < test_vec.size(); ++idx) {\n        if (idx < K || idx >= test_vec.size() - K) {\n//begin to write code\n"
    },
    {
        "task_id": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code_str": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nstd::string replace_max_specialchar(const std::string& text, int n) {\n    std::regex pattern(\"[ ,.]\");\n    std::string result;\n    int count = 0;\n\n    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (std::regex_match(std::string(1, *it), pattern) && count < n) {\n            result += ':';\n            ++count;\n        } else {\n            result += *it;\n        }\n    }\n\n    return result;\n}",
        "test": "int main() {\n    assert(replace_max_specialchar(\"Python language, Programming language.\", 2) == \"Python:language: Programming language.\");\n    assert(replace_max_specialchar(\"a b c,d e f\", 3) == \"a:b:c:d e f\");\n    assert(replace_max_specialchar(\"ram reshma,ram rahim\", 1) == \"ram:reshma,ram rahim\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nstd::string replace_max_specialchar(const std::string& text, int n) {\n    std::regex pattern(\"[ ,.]\");\n    std::string result;\n    int count = 0;\n    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (std::regex_match(std::string(1, *it), pattern) && count < n) {\n            result += ':';\n//begin to write code\n",
        "cpp_prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nstd::string replace_max_specialchar(const std::string& text, int n) {\n    std::regex pattern(\"[ ,.]\");\n    std::string result;\n    int count = 0;\n    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (std::regex_match(std::string(1, *it), pattern) && count < n) {\n            result += ':';\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(replace_max_specialchar(\"Python language, Programming language.\", 2) == \"Python:language: Programming language.\");\n    assert(replace_max_specialchar(\"a b c,d e f\", 3) == \"a:b:c:d e f\");\n    assert(replace_max_specialchar(\"ram reshma,ram rahim\", 1) == \"ram:reshma,ram rahim\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nstd::string replace_max_specialchar(const std::string& text, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::regex pattern(\"[ ,.]\");\n    std::string result;\n    int count = 0;\n    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (std::regex_match(std::string(1, *it), pattern) && count < n) {\n            result += ':';\n//begin to write code\n"
    },
    {
        "task_id": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main() {\n    assert(first_even({1, 3, 5, 7, 4, 1, 6, 8}) == 4);\n    assert(first_even({2, 3, 4}) == 2);\n    assert(first_even({5, 6, 7}) == 6);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first even number in a given list of numbers.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\nint first_even(const std::vector<int>& nums) {\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first_even({1, 3, 5, 7, 4, 1, 6, 8}) == 4);\n    assert(first_even({2, 3, 4}) == 2);\n    assert(first_even({5, 6, 7}) == 6);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nint first_even(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int num : nums) {\n        if (num % 2 == 0) {\n            return num;\n//begin to write code\n"
    },
    {
        "task_id": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "code_str": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cassert>\n\nusing namespace std;\n// Helper template to check if all types in a tuple are the same\ntemplate <typename... Ts>\nstruct are_all_same;\n\ntemplate <typename T, typename U, typename... Ts>\nstruct are_all_same<T, U, Ts...> {\n    static constexpr bool value = is_same<T, U>::value && are_all_same<U, Ts...>::value;\n};\n\ntemplate <typename T>\nstruct are_all_same<T> : true_type {};\n\n// Function to check if all elements in a tuple have the same data type\ntemplate <typename... Ts>\nbool check_type(const tuple<Ts...>&) {\n    return are_all_same<Ts...>::value;\n}\n",
        "test": "int main()\n{\n    assert(check_type(make_tuple(5, 6, 7, 3, 5, 6)) == true);\n    assert(check_type(make_tuple(1, 2, \"4\")) == false);\n    assert(check_type(make_tuple(3, 2, 1, 4, 5)) == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cassert>\nusing namespace std;\n// Helper template to check if all types in a tuple are the same\ntemplate <typename... Ts>\nstruct are_all_same;\ntemplate <typename T, typename U, typename... Ts>\nstruct are_all_same<T, U, Ts...> {\n    static constexpr bool value = is_same<T, U>::value && are_all_same<U, Ts...>::value;\n};\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "perturbated_codes": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cassert>\nusing namespace std;\n// Helper template to check if all types in a tuple are the same\ntemplate <typename... Ts>\nstruct are_all_same;\ntemplate <typename T, typename U, typename... Ts>\nstruct are_all_same<T, U, Ts...> {\n    static constexpr bool value = is_same<T, U>::value && are_all_same<U, Ts...>::value;\n};\ndouble temp_var_1 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_type(make_tuple(5, 6, 7, 3, 5, 6)) == true);\n    assert(check_type(make_tuple(1, 2, \"4\")) == false);\n    assert(check_type(make_tuple(3, 2, 1, 4, 5)) == true);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cassert>\nusing namespace std;\n// Helper template to check if all types in a tuple are the same\ntemplate <typename... Ts>\nstruct are_all_same;\ntemplate <typename T, typename U, typename... Ts>\nstruct are_all_same<T, U, Ts...> {\n    static constexpr bool value = is_same<T, U>::value && are_all_same<U, Ts...>::value;\n};\n//begin to write code\n"
    },
    {
        "task_id": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint binary_search(const vector<int>& arr, int low, int high, int x) {\n    if (high >= low) {\n        int mid = (low + high) / 2;\n        if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n            return mid;\n        else if (x > arr[mid])\n            return binary_search(arr, mid + 1, high, x);\n        else\n            return binary_search(arr, low, mid - 1, x);\n    }\n    return -1;\n}\nbool is_majority(const vector<int>& arr, int n, int x) {\n    int i = binary_search(arr, 0, n-1, x);\n    if (i == -1)\n        return false;\n    if ((i + n/2) <= (n -1) && arr[i + n/2] == x)\n        return true;\n    else\n        return false;\n}\n\n\n",
        "test": "int main()\n{\n    assert(is_majority({1, 2, 3, 3, 3, 3, 10}, 7, 3) == true);\n    assert(is_majority({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4) == false);\n    assert(is_majority({1, 1, 1, 2, 2}, 5, 1) == true);\n}\n",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint binary_search(const vector<int>& arr, int low, int high, int x) {\n    if (high >= low) {\n        int mid = (low + high) / 2;\n        if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n            return mid;\n        else if (x > arr[mid])\n            return binary_search(arr, mid + 1, high, x);\n        else\n            return binary_search(arr, low, mid - 1, x);\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to check for majority element in the given sorted array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint binary_search(const vector<int>& arr, int low, int high, int x) {\n    if (high >= low) {\n        int mid = (low + high) / 2;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n            return mid;\n        else if (x > arr[mid])\n            return binary_search(arr, mid + 1, high, x);\n        else\n            return binary_search(arr, low, mid - 1, x);\n    }\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(is_majority({1, 2, 3, 3, 3, 3, 10}, 7, 3) == true);\n    assert(is_majority({1, 1, 2, 4, 4, 4, 6, 6}, 8, 4) == false);\n    assert(is_majority({1, 1, 1, 2, 2}, 5, 1) == true);\n}\n",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint binary_search(const vector<int>& arr, int low, int high, int x) {\n    if (high >= low) {\n        int mid = (low + high) / 2;\n        if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n            return mid;\n        else if (x > arr[mid])\n            return binary_search(arr, mid + 1, high, x);\n        else\n            return binary_search(arr, low, mid - 1, x);\n    }\n//begin to write code\n"
    },
    {
        "task_id": 224,
        "prompt": "Write a python function to count set bits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Set_Bits(2) == 1);\n    assert(count_Set_Bits(4) == 1);\n    assert(count_Set_Bits(6) == 2);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count set bits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n    int count = 0;\n    while (n) {\n        count += n & 1;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Set_Bits(2) == 1);\n    assert(count_Set_Bits(4) == 1);\n    assert(count_Set_Bits(6) == 2);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Set_Bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (n) {\n        count += n & 1;\n//begin to write code\n"
    },
    {
        "task_id": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_Min(std::vector<int>& arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n            low = mid + 1; \n        } else {\n            high = mid; \n        }\n    }\n    return arr[high];\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2 = {4, 6, 8};\n    std::vector<int> arr3 = {2, 3, 5, 7, 9};\n\n    assert(find_Min(arr1, 0, 4) == 1);\n    assert(find_Min(arr2, 0, 2) == 4);\n    assert(find_Min(arr3, 0, 4) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Min(std::vector<int>& arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the minimum element in a sorted and rotated array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Min(std::vector<int>& arr, int low, int high) {\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        } else if (arr[mid] > arr[high]) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> arr1 = {1, 2, 3, 4, 5};\n    std::vector<int> arr2 = {4, 6, 8};\n    std::vector<int> arr3 = {2, 3, 5, 7, 9};\n\n    assert(find_Min(arr1, 0, 4) == 1);\n    assert(find_Min(arr2, 0, 2) == 4);\n    assert(find_Min(arr3, 0, 4) == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Min(std::vector<int>& arr, int low, int high) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum element in a sorted and rotated array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (low < high) {\n        int mid = low + (high - low) / 2;   \n        if (arr[mid] == arr[high]) {\n            high -= 1; \n        } else if (arr[mid] > arr[high]) {\n//begin to write code\n"
    },
    {
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert(odd_values_string(\"abcdef\") == \"ace\");\n    assert(odd_values_string(\"python\") == \"pto\");\n    assert(odd_values_string(\"data\") == \"dt\");\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to remove the characters which have odd index values of a given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(odd_values_string(\"abcdef\") == \"ace\");\n    assert(odd_values_string(\"python\") == \"pto\");\n    assert(odd_values_string(\"data\") == \"dt\");\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string odd_values_string(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove the characters which have odd index values of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  std::string result = \"\"; \n  for (int i = 0; i < str.length(); ++i) {\n    if (i % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n\n",
        "test": "int main()\n{\n    assert(min_of_three(10, 20, 0) == 0);\n    assert(min_of_three(19, 15, 18) == 15);\n    assert(min_of_three(-10, -20, -30) == -30);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find minimum of three numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(min_of_three(10, 20, 0) == 0);\n    assert(min_of_three(19, 15, 18) == 15);\n    assert(min_of_three(-10, -20, -30) == -30);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint min_of_three(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n//begin to write code\n"
    },
    {
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nusing namespace std;\n\nbool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\n    int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    int new_num = n & num;\n    return new_num == 0;\n}\n\n\n",
        "test": "int main()\n{\n    assert(all_Bits_Set_In_The_Given_Range(4, 1, 2) == true);\n    assert(all_Bits_Set_In_The_Given_Range(17, 2, 4) == true);\n    assert(all_Bits_Set_In_The_Given_Range(39, 4, 6) == false);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nusing namespace std;\nbool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\n    int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether all the bits are unset in the given range or not.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nusing namespace std;\nbool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\ndouble temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(all_Bits_Set_In_The_Given_Range(4, 1, 2) == true);\n    assert(all_Bits_Set_In_The_Given_Range(17, 2, 4) == true);\n    assert(all_Bits_Set_In_The_Given_Range(39, 4, 6) == false);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nusing namespace std;\nbool all_Bits_Set_In_The_Given_Range(int n, int l, int r) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether all the bits are unset in the given range or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n//begin to write code\n"
    },
    {
        "task_id": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code_str": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> arr1 = {-1, 2, -3, 4, 5, 6, -7, 8, 9};\n    std::vector<int> arr2 = {12, -14, -26, 13, 15};\n    std::vector<int> arr3 = {10, 24, 36, -42, -39, -78, 85};\n\n    assert(re_arrange_array(arr1, 9) == std::vector<int>({-1, -3, -7, 4, 5, 6, 2, 8, 9}));\n    assert(re_arrange_array(arr2, 5) == std::vector<int>({-14, -26, 12, 13, 15}));\n    assert(re_arrange_array(arr3, 7) == std::vector<int>({-42, -39, -78, 10, 24, 36, 85}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n",
        "cpp_prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "perturbated_codes": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> arr1 = {-1, 2, -3, 4, 5, 6, -7, 8, 9};\n    std::vector<int> arr2 = {12, -14, -26, 13, 15};\n    std::vector<int> arr3 = {10, 24, 36, -42, -39, -78, 85};\n\n    assert(re_arrange_array(arr1, 9) == std::vector<int>({-1, -3, -7, 4, 5, 6, 2, 8, 9}));\n    assert(re_arrange_array(arr2, 5) == std::vector<int>({-14, -26, 12, 13, 15}));\n    assert(re_arrange_array(arr3, 7) == std::vector<int>({-42, -39, -78, 10, 24, 36, 85}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> re_arrange_array(std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int j = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n//begin to write code\n"
    },
    {
        "task_id": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string replace_blank(std::string str1, char ch) {\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1[i] = ch;\n        }\n    }\n    return str1;\n}\n\n\n",
        "test": "int main() {\n    assert(replace_blank(\"hello people\", '@') == \"hello@people\");\n    assert(replace_blank(\"python program language\", '$') == \"python$program$language\");\n    assert(replace_blank(\"blank space\", '-') == \"blank-space\");\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_blank(std::string str1, char ch) {\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1[i] = ch;\n//begin to write code\n",
        "cpp_prompt": "Write a function to replace blank spaces with any character in a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_blank(std::string str1, char ch) {\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1[i] = ch;\n            double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(replace_blank(\"hello people\", '@') == \"hello@people\");\n    assert(replace_blank(\"python program language\", '$') == \"python$program$language\");\n    assert(replace_blank(\"blank space\", '-') == \"blank-space\");\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_blank(std::string str1, char ch) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace blank spaces with any character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (size_t i = 0; i < str1.length(); i++) {\n        if (str1[i] == ' ') {\n            str1[i] = ch;\n//begin to write code\n"
    },
    {
        "task_id": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\n\nint max_sum(vector<vector<int>> tri, int n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (int i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (int j = 1; j < i; j++) {\n            if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) {\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1];\n            } else {\n                tri[i][j] = tri[i][j] + tri[i - 1][j];\n            }\n        }\n    }\n    return *max_element(tri[n - 1].begin(), tri[n - 1].end());\n}",
        "test": "int main() {\n    assert(max_sum({{1}, {2, 1}, {3, 3, 2}}, 3) == 6);\n    assert(max_sum({{1}, {1, 2}, {4, 1, 12}}, 3) == 15);\n    assert(max_sum({{2}, {3, 2}, {13, 23, 12}}, 3) == 28);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint max_sum(vector<vector<int>> tri, int n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (int i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (int j = 1; j < i; j++) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint max_sum(vector<vector<int>> tri, int n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (int i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (int j = 1; j < i; j++) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_sum({{1}, {2, 1}, {3, 3, 2}}, 3) == 6);\n    assert(max_sum({{1}, {1, 2}, {4, 1, 12}}, 3) == 15);\n    assert(max_sum({{2}, {3, 2}, {13, 23, 12}}, 3) == 28);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint max_sum(vector<vector<int>> tri, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum in the given right triangle of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (int i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (int j = 1; j < i; j++) {\n//begin to write code\n"
    },
    {
        "task_id": 232,
        "prompt": "Write a function to get the n largest items from a dataset.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\n\nvector<int> larg_nnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end(), greater<int>());\n    vector<int> largest(list1.begin(), list1.begin() + n);\n    return largest;\n}",
        "test": "int main() {\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2) == vector<int>({100, 90}));\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5) == vector<int>({100, 90, 80, 70, 60}));\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3) == vector<int>({100, 90, 80}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\nvector<int> larg_nnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end(), greater<int>());\n//begin to write code\n",
        "cpp_prompt": "Write a function to get the n largest items from a dataset.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\nvector<int> larg_nnum(vector<int> list1, int n) {\n    sort(list1.begin(), list1.end(), greater<int>());\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 2) == vector<int>({100, 90}));\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 5) == vector<int>({100, 90, 80, 70, 60}));\n    assert(larg_nnum({10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100}, 3) == vector<int>({100, 90, 80}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <functional>\nusing namespace std;\nvector<int> larg_nnum(vector<int> list1, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(list1.begin(), list1.end(), greater<int>());\n//begin to write code\n"
    },
    {
        "task_id": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n#include <cmath>\n\ndouble lateralsurface_cylinder(double r, double h) {\n    double lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}\n\n\n",
        "test": "int main() {\n    assert(fabs(lateralsurface_cylinder(10, 5) - 314.15000000000003) < 0.0001);\n    assert(fabs(lateralsurface_cylinder(4, 5) - 125.66000000000001) < 0.0001);\n    assert(fabs(lateralsurface_cylinder(4, 10) - 251.32000000000002) < 0.0001);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n#include <cmath>\ndouble lateralsurface_cylinder(double r, double h) {\n    double lateralsurface = 2 * 3.1415 * r * h;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the lateral surface area of a cylinder.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n#include <cmath>\ndouble lateralsurface_cylinder(double r, double h) {\n    double lateralsurface = 2 * 3.1415 * r * h;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fabs(lateralsurface_cylinder(10, 5) - 314.15000000000003) < 0.0001);\n    assert(fabs(lateralsurface_cylinder(4, 5) - 125.66000000000001) < 0.0001);\n    assert(fabs(lateralsurface_cylinder(4, 10) - 251.32000000000002) < 0.0001);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n#include <cmath>\ndouble lateralsurface_cylinder(double r, double h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double lateralsurface = 2 * 3.1415 * r * h;\n//begin to write code\n"
    },
    {
        "task_id": 234,
        "prompt": "Write a function to find the volume of a cube.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint volume_cube(int l) {\n    int volume = l * l * l;\n    return volume;\n}\n\n\n",
        "test": "int main() {\n    assert(volume_cube(3) == 27);\n    assert(volume_cube(2) == 8);\n    assert(volume_cube(5) == 125);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n    int volume = l * l * l;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the volume of a cube.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n    int volume = l * l * l;\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(volume_cube(3) == 27);\n    assert(volume_cube(2) == 8);\n    assert(volume_cube(5) == 125);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint volume_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int volume = l * l * l;\n//begin to write code\n"
    },
    {
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint even_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    \n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res |= (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    \n    return (n | res);\n}\n\n\n",
        "test": "int main() {\n    assert(even_bit_set_number(10) == 10);\n    assert(even_bit_set_number(20) == 30);\n    assert(even_bit_set_number(30) == 30);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint even_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to set all even bits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint even_bit_set_number(int n) {\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(even_bit_set_number(10) == 10);\n    assert(even_bit_set_number(20) == 30);\n    assert(even_bit_set_number(30) == 30);\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint even_bit_set_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to set all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    int res = 0;\n    int temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n//begin to write code\n"
    },
    {
        "task_id": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint No_of_Triangle(int N, int K) {\n    if (N < K) {\n        return -1;\n    } else {\n        int Tri_up = 0;\n        Tri_up = ((N - K + 1) * (N - K + 2)) / 2;\n        int Tri_down = 0;\n        Tri_down = ((N - 2 * K + 1) * (N - 2 * K + 2)) / 2;\n        return Tri_up + Tri_down;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(No_of_Triangle(4, 2) == 7);\n    assert(No_of_Triangle(4, 3) == 3);\n    assert(No_of_Triangle(1, 3) == -1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint No_of_Triangle(int N, int K) {\n    if (N < K) {\n        return -1;\n    } else {\n        int Tri_up = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint No_of_Triangle(int N, int K) {\n    if (N < K) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n        return -1;\n    } else {\n        int Tri_up = 0;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(No_of_Triangle(4, 2) == 7);\n    assert(No_of_Triangle(4, 3) == 3);\n    assert(No_of_Triangle(1, 3) == -1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint No_of_Triangle(int N, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (N < K) {\n        return -1;\n    } else {\n        int Tri_up = 0;\n//begin to write code\n"
    },
    {
        "task_id": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nmap<pair<int, int>, int> check_occurences(vector<pair<int, int>> test_list) {\n    map<pair<int, int>, int> res;\n    for (auto &p : test_list) {\n        if (p.first > p.second)\n            swap(p.first, p.second);\n        res[{p.first, p.second}]++;\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert((check_occurences({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}) == map<pair<int, int>, int>{{{1, 3}, 2}, {{2, 5}, 2}, {{3, 6}, 1}}));\n    assert((check_occurences({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}) == map<pair<int, int>, int>{{{2, 4}, 2}, {{3, 6}, 2}, {{4, 7}, 1}}));\n    assert((check_occurences({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}) == map<pair<int, int>, int>{{{2, 13}, 1}, {{11, 23}, 1}, {{12, 25}, 2}, {{16, 23}, 1}}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nmap<pair<int, int>, int> check_occurences(vector<pair<int, int>> test_list) {\n    map<pair<int, int>, int> res;\n    for (auto &p : test_list) {\n        if (p.first > p.second)\n//begin to write code\n",
        "cpp_prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nmap<pair<int, int>, int> check_occurences(vector<pair<int, int>> test_list) {\n    map<pair<int, int>, int> res;\n    for (auto &p : test_list) {\n        if (p.first > p.second)\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((check_occurences({{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}) == map<pair<int, int>, int>{{{1, 3}, 2}, {{2, 5}, 2}, {{3, 6}, 1}}));\n    assert((check_occurences({{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}) == map<pair<int, int>, int>{{{2, 4}, 2}, {{3, 6}, 2}, {{4, 7}, 1}}));\n    assert((check_occurences({{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}) == map<pair<int, int>, int>{{{2, 13}, 1}, {{11, 23}, 1}, {{12, 25}, 2}, {{16, 23}, 1}}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nmap<pair<int, int>, int> check_occurences(vector<pair<int, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<pair<int, int>, int> res;\n    for (auto &p : test_list) {\n        if (p.first > p.second)\n//begin to write code\n"
    },
    {
        "task_id": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint number_of_substrings(std::string str) {\n    int str_len = str.length();\n    return (str_len * (str_len + 1)) / 2;\n}\n\n\n",
        "test": "int main() {\n    assert(number_of_substrings(\"abc\") == 6);\n    assert(number_of_substrings(\"abcd\") == 10);\n    assert(number_of_substrings(\"abcde\") == 15);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nint number_of_substrings(std::string str) {\n    int str_len = str.length();\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count number of non-empty substrings of a given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nint number_of_substrings(std::string str) {\ndouble temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    int str_len = str.length();\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(number_of_substrings(\"abc\") == 6);\n    assert(number_of_substrings(\"abcd\") == 10);\n    assert(number_of_substrings(\"abcde\") == 15);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint number_of_substrings(std::string str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count number of non-empty substrings of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int str_len = str.length();\n//begin to write code\n"
    },
    {
        "task_id": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint get_total_number_of_sequences(int m, int n) {\n    vector<vector<int>> T(m+1, vector<int>(n+1, 0));\n    for(int i = 0; i <= m; ++i) {\n        for(int j = 0; j <= n; ++j) {\n            if(i == 0 || j == 0) {\n                T[i][j] = 0;\n            } else if(i < j) {\n                T[i][j] = 0;\n            } else if(j == 1) {\n                T[i][j] = i;\n            } else {\n                T[i][j] = T[i-1][j] + T[i/2][j-1];\n            }\n        }\n    }\n    return T[m][n];\n}\n\n\n",
        "test": "int main() {\n    assert(get_total_number_of_sequences(10, 4) == 4);\n    assert(get_total_number_of_sequences(5, 2) == 6);\n    assert(get_total_number_of_sequences(16, 3) == 84);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint get_total_number_of_sequences(int m, int n) {\n    vector<vector<int>> T(m+1, vector<int>(n+1, 0));\n    for(int i = 0; i <= m; ++i) {\n        for(int j = 0; j <= n; ++j) {\n            if(i == 0 || j == 0) {\n                T[i][j] = 0;\n            } else if(i < j) {\n                T[i][j] = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint get_total_number_of_sequences(int m, int n) {\n    vector<vector<int>> T(m+1, vector<int>(n+1, 0));\n    for(int i = 0; i <= m; ++i) {\n        for(int j = 0; j <= n; ++j) {\n            if(i == 0 || j == 0) {\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n                T[i][j] = 0;\n            } else if(i < j) {\n                T[i][j] = 0;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_total_number_of_sequences(10, 4) == 4);\n    assert(get_total_number_of_sequences(5, 2) == 6);\n    assert(get_total_number_of_sequences(16, 3) == 84);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint get_total_number_of_sequences(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> T(m+1, vector<int>(n+1, 0));\n    for(int i = 0; i <= m; ++i) {\n        for(int j = 0; j <= n; ++j) {\n            if(i == 0 || j == 0) {\n                T[i][j] = 0;\n            } else if(i < j) {\n                T[i][j] = 0;\n//begin to write code\n"
    },
    {
        "task_id": 240,
        "prompt": "Write a function to replace the last element of the list with another list.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n    list1.insert(list1.end(), list2.begin(), list2.end());\n    return list1;\n}",
        "test": "int main()\n{\n    assert((replace_list(vector<int>{1, 3, 5, 7, 9, 10}, vector<int>{2, 4, 6, 8}) == vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8}));\n    assert((replace_list(vector<int>{1, 2, 3, 4, 5}, vector<int>{5, 6, 7, 8}) == vector<int>{1, 2, 3, 4, 5, 6, 7, 8}));\n    assert((replace_list(vector<string>{\"red\", \"blue\", \"green\"}, vector<string>{\"yellow\"}) == vector<string>{\"red\", \"blue\", \"yellow\"}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n//begin to write code\n",
        "cpp_prompt": "Write a function to replace the last element of the list with another list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n    list1.pop_back();\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((replace_list(vector<int>{1, 3, 5, 7, 9, 10}, vector<int>{2, 4, 6, 8}) == vector<int>{1, 3, 5, 7, 9, 2, 4, 6, 8}));\n    assert((replace_list(vector<int>{1, 2, 3, 4, 5}, vector<int>{5, 6, 7, 8}) == vector<int>{1, 2, 3, 4, 5, 6, 7, 8}));\n    assert((replace_list(vector<string>{\"red\", \"blue\", \"green\"}, vector<string>{\"yellow\"}) == vector<string>{\"red\", \"blue\", \"yellow\"}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate<typename T>\nvector<T> replace_list(vector<T> list1, vector<T> list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace the last element of the list with another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.pop_back();\n//begin to write code\n"
    },
    {
        "task_id": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\n\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n        for (size_t j = 0; j < a[i].size(); ++j) {\n            if (a[i][j].size() != b[i][j].size()) return false;\n            for (size_t k = 0; k < a[i][j].size(); ++k) {\n                if (a[i][j][k] != b[i][j][k]) return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<std::vector<std::vector<char>>> result;\n    std::vector<std::vector<std::vector<char>>> expected;\n\n    // Test 1\n    expected = {{{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}}};\n    result = array_3d(6, 4, 3);\n    assert(compare_arrays(result, expected));\n\n    // Test 2\n    expected = {{{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}}};\n    result = array_3d(5, 3, 4);\n    assert(compare_arrays(result, expected));\n\n    // Test 3\n    expected = {{{'*'}, {'*'}}, {{'*'}, {'*'}}, {{'*'}, {'*'}}};\n    result = array_3d(1, 2, 3);\n    assert(compare_arrays(result, expected));\n\n    std::cout << \"All tests passed successfully.\\n\";\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to generate a 3d array having each element as '*'.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<std::vector<std::vector<char>>> result;\n    std::vector<std::vector<std::vector<char>>> expected;\n\n    // Test 1\n    expected = {{{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*', '*'}}};\n    result = array_3d(6, 4, 3);\n    assert(compare_arrays(result, expected));\n\n    // Test 2\n    expected = {{{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}},\n                {{'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}, {'*', '*', '*', '*', '*'}}};\n    result = array_3d(5, 3, 4);\n    assert(compare_arrays(result, expected));\n\n    // Test 3\n    expected = {{{'*'}, {'*'}}, {{'*'}, {'*'}}, {{'*'}, {'*'}}};\n    result = array_3d(1, 2, 3);\n    assert(compare_arrays(result, expected));\n\n    std::cout << \"All tests passed successfully.\\n\";\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nstd::vector<std::vector<std::vector<char>>> array_3d(int m, int n, int o) {\n\n    /*\n    progame language:cpp\n    description:Write a function to generate a 3d array having each element as '*'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<std::vector<char>>> result(o, std::vector<std::vector<char>>(n, std::vector<char>(m, '*')));\n    return result;\n}\nbool compare_arrays(const std::vector<std::vector<std::vector<char>>> &a, const std::vector<std::vector<std::vector<char>>> &b) {\n    if (a.size() != b.size()) return false;\n    for (size_t i = 0; i < a.size(); ++i) {\n        if (a[i].size() != b[i].size()) return false;\n//begin to write code\n"
    },
    {
        "task_id": 242,
        "prompt": "Write a function to count total characters in a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n        total += 1;\n    }\n    return total;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(count_charac(\"python programming\") == 18);\n    assert(count_charac(\"language\") == 8);\n    assert(count_charac(\"words\") == 5);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count total characters in a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n    int total = 0;\n    for (char i : str1) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(count_charac(\"python programming\") == 18);\n    assert(count_charac(\"language\") == 8);\n    assert(count_charac(\"words\") == 5);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint count_charac(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int total = 0;\n    for (char i : str1) {\n//begin to write code\n"
    },
    {
        "task_id": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <set>\n#include <cassert>\n\nusing namespace std;\n\n\ntemplate <typename T>\nvector<pair<T, pair<vector<string>, int>>> sort_on_occurence(vector<pair<T, string>> const lst) {\n    unordered_map<T, vector<string>> counter;\n\n    for (const auto& item : lst) {\n        counter[item.first].push_back(item.second);\n    }\n\n    vector<pair<T, pair<vector<string>, int>>> result;\n    for (const auto& entry : counter) {\n        set<string> unique_strings(entry.second.begin(), entry.second.end());\n        result.emplace_back(entry.first, make_pair(vector<string>(unique_strings.begin(), unique_strings.end()), entry.second.size()));\n    }\n    return result;\n}\n\ntemplate <typename T>\nbool compare_results(const vector<pair<T, pair<vector<string>, int>>>& result, const vector<pair<T, pair<vector<string>, int>>>& expected) {\n    if (result.size() != expected.size()) return false;\n    set<T> result_first_elements;\n    set<T> expected_first_elements;\n\n    for (const auto& res_entry : result) {\n        result_first_elements.insert(res_entry.first);\n    }\n\n    for (const auto& exp_entry : expected) {\n        expected_first_elements.insert(exp_entry.first);\n    }\n\n    if (result_first_elements != expected_first_elements) return false;\n\n    for (const auto& res_entry : result) {\n        bool found = false;\n        for (const auto& exp_entry : expected) {\n            if (res_entry.first == exp_entry.first) {\n                if (res_entry.second.second != exp_entry.second.second) return false;\n\n                set<string> res_set(res_entry.second.first.begin(), res_entry.second.first.end());\n                set<string> exp_set(exp_entry.second.first.begin(), exp_entry.second.first.end());\n\n                if (res_set != exp_set) return false;\n\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n    }\n\n    return true;\n}",
        "test": "int main() {\n    vector<pair<int, pair<vector<string>, int>>> expected1 = {{2, {{\"Bob\"}, 1}},{1, {{\"Cara\" , \"Jake\"}, 2}}};\n    vector<pair<char, pair<vector<string>, int>>> expected2 = {{'a', {{\"ant\",\"arm\"}, 2}} , {'b', {{ \"b\",\"ball\"}, 2}}};\n    vector<pair<int, pair<vector<string>, int>>> expected3 = {{3, {{\"Maze\"}, 1}} , {2, {{\"Mark\", \"Sara\"}, 2}}};\n\n    assert(compare_results(sort_on_occurence<int>({{1, \"Jake\"}, {2, \"Bob\"}, {1, \"Cara\"}}), expected1));\n    assert(compare_results(sort_on_occurence<char>({{'b', \"ball\"}, {'a', \"arm\"}, {'b', \"b\"}, {'a', \"ant\"}}), expected2));\n    assert(compare_results(sort_on_occurence<int>({{2, \"Mark\"}, {3, \"Maze\"}, {2, \"Sara\"}}), expected3));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <set>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<pair<T, pair<vector<string>, int>>> sort_on_occurence(vector<pair<T, string>> const lst) {\n    unordered_map<T, vector<string>> counter;\n    for (const auto& item : lst) {\n        counter[item.first].push_back(item.second);\n    }\n    vector<pair<T, pair<vector<string>, int>>> result;\n    for (const auto& entry : counter) {\n        set<string> unique_strings(entry.second.begin(), entry.second.end());\n        result.emplace_back(entry.first, make_pair(vector<string>(unique_strings.begin(), unique_strings.end()), entry.second.size()));\n    }\n    return result;\n}\ntemplate <typename T>\nbool compare_results(const vector<pair<T, pair<vector<string>, int>>>& result, const vector<pair<T, pair<vector<string>, int>>>& expected) {\n    if (result.size() != expected.size()) return false;\n    set<T> result_first_elements;\n    set<T> expected_first_elements;\n    for (const auto& res_entry : result) {\n        result_first_elements.insert(res_entry.first);\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <set>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<pair<T, pair<vector<string>, int>>> sort_on_occurence(vector<pair<T, string>> const lst) {\n    unordered_map<T, vector<string>> counter;\n    for (const auto& item : lst) {\n    double temp_var_11 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n        counter[item.first].push_back(item.second);\n    }\n    vector<pair<T, pair<vector<string>, int>>> result;\n    for (const auto& entry : counter) {\n        set<string> unique_strings(entry.second.begin(), entry.second.end());\n        result.emplace_back(entry.first, make_pair(vector<string>(unique_strings.begin(), unique_strings.end()), entry.second.size()));\n    }\n    return result;\n}\ntemplate <typename T>\nbool compare_results(const vector<pair<T, pair<vector<string>, int>>>& result, const vector<pair<T, pair<vector<string>, int>>>& expected) {\n    if (result.size() != expected.size()) return false;\n    set<T> result_first_elements;\n    set<T> expected_first_elements;\n    for (const auto& res_entry : result) {\n        result_first_elements.insert(res_entry.first);\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<pair<int, pair<vector<string>, int>>> expected1 = {{2, {{\"Bob\"}, 1}},{1, {{\"Cara\" , \"Jake\"}, 2}}};\n    vector<pair<char, pair<vector<string>, int>>> expected2 = {{'a', {{\"ant\",\"arm\"}, 2}} , {'b', {{ \"b\",\"ball\"}, 2}}};\n    vector<pair<int, pair<vector<string>, int>>> expected3 = {{3, {{\"Maze\"}, 1}} , {2, {{\"Mark\", \"Sara\"}, 2}}};\n\n    assert(compare_results(sort_on_occurence<int>({{1, \"Jake\"}, {2, \"Bob\"}, {1, \"Cara\"}}), expected1));\n    assert(compare_results(sort_on_occurence<char>({{'b', \"ball\"}, {'a', \"arm\"}, {'b', \"b\"}, {'a', \"ant\"}}), expected2));\n    assert(compare_results(sort_on_occurence<int>({{2, \"Mark\"}, {3, \"Maze\"}, {2, \"Sara\"}}), expected3));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <set>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<pair<T, pair<vector<string>, int>>> sort_on_occurence(vector<pair<T, string>> const lst) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given list based on the occurrence of first element of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<T, vector<string>> counter;\n    for (const auto& item : lst) {\n        counter[item.first].push_back(item.second);\n    }\n    vector<pair<T, pair<vector<string>, int>>> result;\n    for (const auto& entry : counter) {\n        set<string> unique_strings(entry.second.begin(), entry.second.end());\n        result.emplace_back(entry.first, make_pair(vector<string>(unique_strings.begin(), unique_strings.end()), entry.second.size()));\n    }\n    return result;\n}\ntemplate <typename T>\nbool compare_results(const vector<pair<T, pair<vector<string>, int>>>& result, const vector<pair<T, pair<vector<string>, int>>>& expected) {\n    if (result.size() != expected.size()) return false;\n    set<T> result_first_elements;\n    set<T> expected_first_elements;\n    for (const auto& res_entry : result) {\n        result_first_elements.insert(res_entry.first);\n//begin to write code\n"
    },
    {
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "code_str": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\n\n",
        "test": "int main()\n{\n    assert(next_Perfect_Square(35) == 36);\n    assert(next_Perfect_Square(6) == 9);\n    assert(next_Perfect_Square(9) == 16);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the next perfect square greater than a given number.",
        "perturbated_codes": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(next_Perfect_Square(35) == 36);\n    assert(next_Perfect_Square(6) == 9);\n    assert(next_Perfect_Square(9) == 16);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint next_Perfect_Square(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int nextN = std::floor(std::sqrt(N)) + 1;\n//begin to write code\n"
    },
    {
        "task_id": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <climits>\n#include <cassert>\nusing namespace std;\n\nint max_sum(vector<int> arr, int n) {\n    vector<int> MSIBS = arr;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n\n    vector<int> MSDBS = arr;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = 1; j < i; ++j) {\n            if (arr[n-i] > arr[n-j] && MSDBS[n-i] < MSDBS[n-j] + arr[n-i]) {\n                MSDBS[n-i] = MSDBS[n-j] + arr[n-i];\n            }\n        }\n    }\n\n    int max_sum = INT_MIN;\n    for (int i = 0; i < n; ++i) {\n        max_sum = max(max_sum, MSIBS[i] + MSDBS[i] - arr[i]);\n    }\n\n    return max_sum;\n}\n\n\n",
        "test": "int main() {\n    assert(max_sum({1, 15, 51, 45, 33, 100, 12, 18, 9}, 9) == 194);\n    assert(max_sum({80, 60, 30, 40, 20, 10}, 6) == 210);\n    assert(max_sum({2, 3, 14, 16, 21, 23, 29, 30}, 8) == 138);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint max_sum(vector<int> arr, int n) {\n    vector<int> MSIBS = arr;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n    vector<int> MSDBS = arr;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint max_sum(vector<int> arr, int n) {\n    vector<int> MSIBS = arr;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n    vector<int> MSDBS = arr;\n    for (int i = 1; i <= n; ++i) {\n    double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_sum({1, 15, 51, 45, 33, 100, 12, 18, 9}, 9) == 194);\n    assert(max_sum({80, 60, 30, 40, 20, 10}, 6) == 210);\n    assert(max_sum({2, 3, 14, 16, 21, 23, 29, 30}, 8) == 138);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <climits>\n#include <cassert>\nusing namespace std;\nint max_sum(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> MSIBS = arr;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n    vector<int> MSDBS = arr;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble babylonian_squareroot(double number) {\n    if (number == 0) {\n        return 0;\n    }\n    double g = number / 2.0;\n    double g2 = g + 1;\n    while (fabs(g - g2) > 1e-9) {\n        double n = number / g;\n        g2 = g;\n        g = (g + n) / 2;\n    }\n    return g;\n}\n\n\n",
        "test": "int main() {\n    assert(fabs(babylonian_squareroot(10) - 3.162277660168379) < 1e-9);\n    assert(fabs(babylonian_squareroot(2) - 1.414213562373095) < 1e-9);\n    assert(fabs(babylonian_squareroot(9) - 3.0) < 1e-9);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble babylonian_squareroot(double number) {\n    if (number == 0) {\n        return 0;\n    }\n    double g = number / 2.0;\n    double g2 = g + 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function for computing square roots using the babylonian method.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble babylonian_squareroot(double number) {\ndouble temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    if (number == 0) {\n        return 0;\n    }\n    double g = number / 2.0;\n    double g2 = g + 1;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fabs(babylonian_squareroot(10) - 3.162277660168379) < 1e-9);\n    assert(fabs(babylonian_squareroot(2) - 1.414213562373095) < 1e-9);\n    assert(fabs(babylonian_squareroot(9) - 3.0) < 1e-9);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble babylonian_squareroot(double number) {\n\n    /*\n    progame language:cpp\n    description:Write a function for computing square roots using the babylonian method.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (number == 0) {\n        return 0;\n    }\n    double g = number / 2.0;\n    double g2 = g + 1;\n//begin to write code\n"
    },
    {
        "task_id": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint lps(string str) {\n    int n = str.size();\n    vector<vector<int>> L(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n                L[i][j] = 2;\n            else if (str[i] == str[j])\n                L[i][j] = L[i + 1][j - 1] + 2;\n            else\n                L[i][j] = max(L[i][j - 1], L[i + 1][j]);\n        }\n    }\n    return L[0][n - 1];\n}\n\n\n",
        "test": "int main() {\n    assert(lps(\"TENS FOR TENS\") == 5);\n    assert(lps(\"CARDIO FOR CARDS\") == 7);\n    assert(lps(\"PART OF THE JOURNEY IS PART\") == 9);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint lps(string str) {\n    int n = str.size();\n    vector<vector<int>> L(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint lps(string str) {\n    int n = str.size();\n    vector<vector<int>> L(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n            double temp_var_7 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(lps(\"TENS FOR TENS\") == 5);\n    assert(lps(\"CARDIO FOR CARDS\") == 7);\n    assert(lps(\"PART OF THE JOURNEY IS PART\") == 9);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint lps(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the longest palindromic subsequence in the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = str.size();\n    vector<vector<int>> L(n, vector<int>(n, 0));\n    for (int i = 0; i < n; i++)\n        L[i][i] = 1;\n    for (int cl = 2; cl <= n; cl++) {\n        for (int i = 0; i < n - cl + 1; i++) {\n            int j = i + cl - 1;\n            if (str[i] == str[j] && cl == 2)\n//begin to write code\n"
    },
    {
        "task_id": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\n// Function definition\ndouble harmonic_sum(int n) {\n    if (n < 2) {\n        return 1;\n    } else {\n        return 1.0 / n + harmonic_sum(n - 1);\n    }\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(fabs(harmonic_sum(7) - 2.5928571428571425) < 1e-9);\n    assert(fabs(harmonic_sum(4) - 2.083333333333333) < 1e-9);\n    assert(fabs(harmonic_sum(19) - 3.547739657143682) < 1e-9);\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <cmath>\n// Function definition\ndouble harmonic_sum(int n) {\n    if (n < 2) {\n        return 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the harmonic sum of n-1.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <cmath>\n// Function definition\ndouble harmonic_sum(int n) {\n    if (n < 2) {\n        return 1;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(fabs(harmonic_sum(7) - 2.5928571428571425) < 1e-9);\n    assert(fabs(harmonic_sum(4) - 2.083333333333333) < 1e-9);\n    assert(fabs(harmonic_sum(19) - 3.547739657143682) < 1e-9);\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\n// Function definition\ndouble harmonic_sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the harmonic sum of n-1.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < 2) {\n        return 1;\n//begin to write code\n"
    },
    {
        "task_id": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n                 [&array_nums1](int num) { return std::find(array_nums1.begin(), array_nums1.end(), num) != array_nums1.end(); });\n    return result;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {1, 2, 4, 8, 9};\n        std::vector<int> expected = {1, 2, 8, 9};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {3, 5, 7, 9};\n        std::vector<int> expected = {3, 5, 7, 9};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {10, 20, 30, 40};\n        std::vector<int> expected = {10};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {1, 2, 4, 8, 9};\n        std::vector<int> expected = {1, 2, 8, 9};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {3, 5, 7, 9};\n        std::vector<int> expected = {3, 5, 7, 9};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    {\n        std::vector<int> nums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        std::vector<int> nums2 = {10, 20, 30, 40};\n        std::vector<int> expected = {10};\n        std::vector<int> result = intersection_array(nums1, nums2);\n        assert(result == expected);\n    }\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> intersection_array(const std::vector<int>& array_nums1, const std::vector<int>& array_nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    std::copy_if(array_nums2.begin(), array_nums2.end(), std::back_inserter(result),\n//begin to write code\n"
    },
    {
        "task_id": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> data = {10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2};\n    assert(count_X(data, 4) == 0);\n    assert(count_X(data, 10) == 3);\n    assert(count_X(data, 8) == 4);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the occcurences of an element in a tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<int>& tup, int x) {\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> data = {10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2};\n    assert(count_X(data, 4) == 0);\n    assert(count_X(data, 10) == 3);\n    assert(count_X(data, 8) == 4);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_X(const std::vector<int>& tup, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int ele : tup) {\n        if (ele == x) {\n//begin to write code\n"
    },
    {
        "task_id": 251,
        "prompt": "Write a function to insert an element before each element of a list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n    std::vector<std::string> new_list;\n    for (auto &elt : list) {\n        new_list.push_back(element);\n        new_list.push_back(elt);\n    }\n    return new_list;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> result;\n    \n    result = insert_element({\"Red\", \"Green\", \"Black\"}, \"c\");\n    assert((result == std::vector<std::string>{\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"}));\n\n    result = insert_element({\"python\", \"java\"}, \"program\");\n    assert((result == std::vector<std::string>{\"program\", \"python\", \"program\", \"java\"}));\n\n    result = insert_element({\"happy\", \"sad\"}, \"laugh\");\n    assert((result == std::vector<std::string>{\"laugh\", \"happy\", \"laugh\", \"sad\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n    std::vector<std::string> new_list;\n    for (auto &elt : list) {\n        new_list.push_back(element);\n//begin to write code\n",
        "cpp_prompt": "Write a function to insert an element before each element of a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n    std::vector<std::string> new_list;\n    for (auto &elt : list) {\n        new_list.push_back(element);\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> result;\n    \n    result = insert_element({\"Red\", \"Green\", \"Black\"}, \"c\");\n    assert((result == std::vector<std::string>{\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\"}));\n\n    result = insert_element({\"python\", \"java\"}, \"program\");\n    assert((result == std::vector<std::string>{\"program\", \"python\", \"program\", \"java\"}));\n\n    result = insert_element({\"happy\", \"sad\"}, \"laugh\");\n    assert((result == std::vector<std::string>{\"laugh\", \"happy\", \"laugh\", \"sad\"}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> insert_element(std::vector<std::string> list, std::string element) {\n\n    /*\n    progame language:cpp\n    description:Write a function to insert an element before each element of a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> new_list;\n    for (auto &elt : list) {\n        new_list.push_back(element);\n//begin to write code\n"
    },
    {
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\n\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    return std::make_pair(std::abs(numbers), std::arg(numbers));\n}\n\n\n",
        "test": "int main() {\n    assert(convert(std::complex<double>(1, 0)) == std::make_pair(1.0, 0.0));\n    assert(convert(std::complex<double>(4, 0)) == std::make_pair(4.0, 0.0));\n    assert(convert(std::complex<double>(5, 0)) == std::make_pair(5.0, 0.0));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to convert complex numbers to polar coordinates.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n    auto result = std::polar(numbers);\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(convert(std::complex<double>(1, 0)) == std::make_pair(1.0, 0.0));\n    assert(convert(std::complex<double>(4, 0)) == std::make_pair(4.0, 0.0));\n    assert(convert(std::complex<double>(5, 0)) == std::make_pair(5.0, 0.0));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <complex>\n#include <cassert>\nstd::pair<double, double> convert(std::complex<double> numbers) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert complex numbers to polar coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto result = std::polar(numbers);\n//begin to write code\n"
    },
    {
        "task_id": 253,
        "prompt": "Write a python function to count integers from a given list.",
        "code_str": "#include <vector>\n#include <iostream>\n#include <memory>\n#include <cassert>\n\nusing namespace std;\n\nclass Base {\npublic:\n    virtual ~Base() = default;\n    virtual bool isInteger() const = 0;\n};\n\nclass DerivedInt : public Base {\npublic:\n    DerivedInt(int value) : value(value) {}\n    bool isInteger() const override {\n        return true;\n    }\nprivate:\n    int value;\n};\n\nclass DerivedDouble : public Base {\npublic:\n    DerivedDouble(double value) : value(value) {}\n    bool isInteger() const override {\n        return false;\n    }\nprivate:\n    double value;\n};\n\nclass DerivedString : public Base {\npublic:\n    DerivedString(const string& value) : value(value) {}\n    bool isInteger() const override {\n        return false;\n    }\nprivate:\n    string value;\n};\n\nint count_integer(const vector<unique_ptr<Base>>& list1) {\n    int ctr = 0;\n    for (const auto& elem : list1) {\n        if (elem->isInteger()) {\n            ctr += 1;\n        }\n    }\n    return ctr;\n}",
        "test": "int main() {\n    vector<unique_ptr<Base>> list1;\n    list1.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list1.push_back(unique_ptr<Base>(new DerivedInt(2)));\n    list1.push_back(unique_ptr<Base>(new DerivedString(\"abc\")));\n    list1.push_back(unique_ptr<Base>(new DerivedDouble(1.2)));\n    assert(count_integer(list1) == 2);\n\n    vector<unique_ptr<Base>> list2;\n    list2.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list2.push_back(unique_ptr<Base>(new DerivedInt(2)));\n    list2.push_back(unique_ptr<Base>(new DerivedInt(3)));\n    assert(count_integer(list2) == 3);\n\n    vector<unique_ptr<Base>> list3;\n    list3.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list3.push_back(unique_ptr<Base>(new DerivedDouble(1.2)));\n    list3.push_back(unique_ptr<Base>(new DerivedInt(4)));\n    list3.push_back(unique_ptr<Base>(new DerivedDouble(5.1)));\n    assert(count_integer(list3) == 2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <iostream>\n#include <memory>\n#include <cassert>\nusing namespace std;\nclass Base {\npublic:\n    virtual ~Base() = default;\n    virtual bool isInteger() const = 0;\n};\nclass DerivedInt : public Base {\npublic:\n    DerivedInt(int value) : value(value) {}\n    bool isInteger() const override {\n        return true;\n    }\nprivate:\n    int value;\n};\nclass DerivedDouble : public Base {\npublic:\n    DerivedDouble(double value) : value(value) {}\n    bool isInteger() const override {\n        return false;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count integers from a given list.",
        "perturbated_codes": "#include <vector>\n#include <iostream>\n#include <memory>\n#include <cassert>\nusing namespace std;\nclass Base {\npublic:\n    virtual ~Base() = default;\n    virtual bool isInteger() const = 0;\n};\nclass DerivedInt : public Base {\npublic:\n    DerivedInt(int value) : value(value) {}\n    bool isInteger() const override {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        return true;\n    }\nprivate:\n    int value;\n};\nclass DerivedDouble : public Base {\npublic:\n    DerivedDouble(double value) : value(value) {}\n    bool isInteger() const override {\n        return false;\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<unique_ptr<Base>> list1;\n    list1.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list1.push_back(unique_ptr<Base>(new DerivedInt(2)));\n    list1.push_back(unique_ptr<Base>(new DerivedString(\"abc\")));\n    list1.push_back(unique_ptr<Base>(new DerivedDouble(1.2)));\n    assert(count_integer(list1) == 2);\n\n    vector<unique_ptr<Base>> list2;\n    list2.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list2.push_back(unique_ptr<Base>(new DerivedInt(2)));\n    list2.push_back(unique_ptr<Base>(new DerivedInt(3)));\n    assert(count_integer(list2) == 3);\n\n    vector<unique_ptr<Base>> list3;\n    list3.push_back(unique_ptr<Base>(new DerivedInt(1)));\n    list3.push_back(unique_ptr<Base>(new DerivedDouble(1.2)));\n    list3.push_back(unique_ptr<Base>(new DerivedInt(4)));\n    list3.push_back(unique_ptr<Base>(new DerivedDouble(5.1)));\n    assert(count_integer(list3) == 2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <iostream>\n#include <memory>\n#include <cassert>\nusing namespace std;\nclass Base {\npublic:\n    virtual ~Base() = default;\n    virtual bool isInteger() const = 0;\n};\nclass DerivedInt : public Base {\npublic:\n    DerivedInt(int value) : value(value) {}\n    bool isInteger() const override {\n        return true;\n    }\nprivate:\n    int value;\n};\nclass DerivedDouble : public Base {\npublic:\n    DerivedDouble(double value) : value(value) {}\n    bool isInteger() const override {\n        return false;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    \n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        result.push_back((*i).str());\n    }\n    \n    return result;\n}",
        "test": "int main()\n{\n    assert((words_ae(\"python programe\") == vector<string>{\"ame\"}));\n    assert((words_ae(\"python programe language\") == vector<string>{\"ame\", \"anguage\"}));\n    assert((words_ae(\"assert statement\") == vector<string>{\"assert\", \"atement\"}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((words_ae(\"python programe\") == vector<string>{\"ame\"}));\n    assert((words_ae(\"python programe language\") == vector<string>{\"ame\", \"anguage\"}));\n    assert((words_ae(\"assert statement\") == vector<string>{\"assert\", \"atement\"}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <string>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> words_ae(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all words starting with 'a' or 'e' in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex re(\"[ae]\\\\\\w+\");\n    vector<string> result;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), re);\n    auto words_end = sregex_iterator();\n//begin to write code\n"
    },
    {
        "task_id": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<std::vector<std::string>> combinations_colors(const std::vector<std::string>& l, int n) {\n    std::vector<std::vector<std::string>> result;\n    std::vector<int> indices(n, 0);\n    int size = l.size();\n\n    while (true) {\n        // Add current combination\n        std::vector<std::string> current;\n        for (int i = 0; i < n; ++i) {\n            current.push_back(l[indices[i]]);\n        }\n        result.push_back(current);\n\n        // Generate next combination\n        int next = n - 1;\n        while (next >= 0 && indices[next] == size - 1) {\n            --next;\n        }\n\n        if (next < 0) {\n            break;\n        }\n\n        int val = indices[next] + 1;\n        for (int i = next; i < n; ++i) {\n            indices[i] = val;\n        }\n    }\n\n    return result;\n}\n\nbool compare_vectors(const std::vector<std::string>& v1, const std::vector<std::string>& v2) {\n    if (v1.size() != v2.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < v1.size(); ++i) {\n        if (v1[i] != v2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<std::string> colors = {\"Red\", \"Green\", \"Blue\"};\n\n    std::vector<std::vector<std::string>> test1 = combinations_colors(colors, 1);\n    std::vector<std::vector<std::string>> expected1 = {{\"Red\"}, {\"Green\"}, {\"Blue\"}};\n    std::vector<std::vector<std::string>> test2 = combinations_colors(colors, 2);\n    std::vector<std::vector<std::string>> expected2 = {{\"Red\", \"Red\"}, {\"Red\", \"Green\"}, \n                                                       {\"Red\", \"Blue\"}, {\"Green\", \"Green\"}, \n                                                       {\"Green\", \"Blue\"}, {\"Blue\", \"Blue\"}};\n    std::vector<std::vector<std::string>> test3 = combinations_colors(colors, 3);\n    std::vector<std::vector<std::string>> expected3 = {{\"Red\", \"Red\", \"Red\"}, {\"Red\", \"Red\", \"Green\"}, {\"Red\", \"Red\", \"Blue\"},\n                                                       {\"Red\", \"Green\", \"Green\"}, {\"Red\", \"Green\", \"Blue\"}, {\"Red\", \"Blue\", \"Blue\"},\n                                                       {\"Green\", \"Green\", \"Green\"}, {\"Green\", \"Green\", \"Blue\"}, {\"Green\", \"Blue\", \"Blue\"},\n                                                       {\"Blue\", \"Blue\", \"Blue\"}};\n\n    // Tests\n    assert(test1.size() == expected1.size() && std::equal(test1.begin(), test1.end(), expected1.begin(), compare_vectors));\n    assert(test2.size() == expected2.size() && std::equal(test2.begin(), test2.end(), expected2.begin(), compare_vectors));\n    assert(test3.size() == expected3.size() && std::equal(test3.begin(), test3.end(), expected3.begin(), compare_vectors));\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<std::vector<std::string>> combinations_colors(const std::vector<std::string>& l, int n) {\n    std::vector<std::vector<std::string>> result;\n    std::vector<int> indices(n, 0);\n    int size = l.size();\n    while (true) {\n        // Add current combination\n        std::vector<std::string> current;\n        for (int i = 0; i < n; ++i) {\n            current.push_back(l[indices[i]]);\n        }\n        result.push_back(current);\n        // Generate next combination\n        int next = n - 1;\n        while (next >= 0 && indices[next] == size - 1) {\n            --next;\n        }\n        if (next < 0) {\n            break;\n//begin to write code\n",
        "cpp_prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<std::vector<std::string>> combinations_colors(const std::vector<std::string>& l, int n) {\n    std::vector<std::vector<std::string>> result;\n    std::vector<int> indices(n, 0);\n    int size = l.size();\n    while (true) {\n        // Add current combination\n        std::vector<std::string> current;\n        for (int i = 0; i < n; ++i) {\n            current.push_back(l[indices[i]]);\n        }\n        result.push_back(current);\n        // Generate next combination\n        int next = n - 1;\n        while (next >= 0 && indices[next] == size - 1) {\n            --next;\n        }\n        if (next < 0) {\n            break;\n            double temp_var_8 = 9.9;if (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<std::string> colors = {\"Red\", \"Green\", \"Blue\"};\n\n    std::vector<std::vector<std::string>> test1 = combinations_colors(colors, 1);\n    std::vector<std::vector<std::string>> expected1 = {{\"Red\"}, {\"Green\"}, {\"Blue\"}};\n    std::vector<std::vector<std::string>> test2 = combinations_colors(colors, 2);\n    std::vector<std::vector<std::string>> expected2 = {{\"Red\", \"Red\"}, {\"Red\", \"Green\"}, \n                                                       {\"Red\", \"Blue\"}, {\"Green\", \"Green\"}, \n                                                       {\"Green\", \"Blue\"}, {\"Blue\", \"Blue\"}};\n    std::vector<std::vector<std::string>> test3 = combinations_colors(colors, 3);\n    std::vector<std::vector<std::string>> expected3 = {{\"Red\", \"Red\", \"Red\"}, {\"Red\", \"Red\", \"Green\"}, {\"Red\", \"Red\", \"Blue\"},\n                                                       {\"Red\", \"Green\", \"Green\"}, {\"Red\", \"Green\", \"Blue\"}, {\"Red\", \"Blue\", \"Blue\"},\n                                                       {\"Green\", \"Green\", \"Green\"}, {\"Green\", \"Green\", \"Blue\"}, {\"Green\", \"Blue\", \"Blue\"},\n                                                       {\"Blue\", \"Blue\", \"Blue\"}};\n\n    // Tests\n    assert(test1.size() == expected1.size() && std::equal(test1.begin(), test1.end(), expected1.begin(), compare_vectors));\n    assert(test2.size() == expected2.size() && std::equal(test2.begin(), test2.end(), expected2.begin(), compare_vectors));\n    assert(test3.size() == expected3.size() && std::equal(test3.begin(), test3.end(), expected3.begin(), compare_vectors));\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<std::vector<std::string>> combinations_colors(const std::vector<std::string>& l, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::vector<std::string>> result;\n    std::vector<int> indices(n, 0);\n    int size = l.size();\n    while (true) {\n        // Add current combination\n        std::vector<std::string> current;\n        for (int i = 0; i < n; ++i) {\n            current.push_back(l[indices[i]]);\n        }\n        result.push_back(current);\n        // Generate next combination\n        int next = n - 1;\n        while (next >= 0 && indices[next] == size - 1) {\n            --next;\n        }\n        if (next < 0) {\n            break;\n//begin to write code\n"
    },
    {
        "task_id": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n        if (is_prime) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n\n",
        "test": "int main()\n{\n    assert(count_Primes_nums(5) == 2);\n    assert(count_Primes_nums(10) == 4);\n    assert(count_Primes_nums(100) == 25);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of prime numbers less than a given non-negative number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_Primes_nums(5) == 2);\n    assert(count_Primes_nums(10) == 4);\n    assert(count_Primes_nums(100) == 25);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Primes_nums(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ctr = 0;\n    for (int num = 0; num < n; ++num) {\n        if (num <= 1) {\n            continue;\n        }\n        bool is_prime = true;\n        for (int i = 2; i < num; ++i) {\n            if (num % i == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 257,
        "prompt": "Write a function to swap two numbers.",
        "code_str": "#include<iostream>\n    \n\n#include <utility>\n#include <cassert>\n\nstd::pair<int, int> swap_numbers(int a, int b) {\n    int temp = a;\n    a = b;\n    b = temp;\n    return {a, b};\n}\n\n\n",
        "test": "int main() {\n    assert(swap_numbers(10, 20) == std::make_pair(20, 10));\n    assert(swap_numbers(15, 17) == std::make_pair(17, 15));\n    assert(swap_numbers(100, 200) == std::make_pair(200, 100));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <utility>\n#include <cassert>\nstd::pair<int, int> swap_numbers(int a, int b) {\n    int temp = a;\n    a = b;\n//begin to write code\n",
        "cpp_prompt": "Write a function to swap two numbers.",
        "perturbated_codes": "#include<iostream>\n#include <utility>\n#include <cassert>\nstd::pair<int, int> swap_numbers(int a, int b) {\n    int temp = a;\n    a = b;\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(swap_numbers(10, 20) == std::make_pair(20, 10));\n    assert(swap_numbers(15, 17) == std::make_pair(17, 15));\n    assert(swap_numbers(100, 200) == std::make_pair(200, 100));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <utility>\n#include <cassert>\nstd::pair<int, int> swap_numbers(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to swap two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int temp = a;\n    a = b;\n//begin to write code\n"
    },
    {
        "task_id": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n            count++;\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_odd({1, 2, 3, 5, 7, 8, 10}) == 4);\n    assert(count_odd({10, 15, 14, 13, -18, 12, -20}) == 2);\n    assert(count_odd({1, 2, 4, 8, 9}) == 2);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_odd({1, 2, 3, 5, 7, 8, 10}) == 4);\n    assert(count_odd({10, 15, 14, 13, -18, 12, -20}) == 2);\n    assert(count_odd({1, 2, 4, 8, 9}) == 2);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint count_odd(const std::vector<int>& array_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find number of odd elements in the given list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (int num : array_nums) {\n        if (num % 2 != 0) {\n//begin to write code\n"
    },
    {
        "task_id": 259,
        "prompt": "Write a function to maximize the given two tuples.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n        int second = max(get<1>(test_tup1[i]), get<1>(test_tup2[i]));\n        res.push_back(make_tuple(first, second));\n    }\n    return res;\n}",
        "test": "int main()\n{\n    assert((maximize_elements({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}) == vector<tuple<int, int>>{{6, 7}, {4, 9}, {2, 9}, {7, 10}}));\n    assert((maximize_elements({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}) == vector<tuple<int, int>>{{7, 8}, {5, 10}, {3, 10}, {8, 11}}));\n    assert((maximize_elements({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}) == vector<tuple<int, int>>{{8, 9}, {6, 11}, {4, 11}, {9, 12}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n",
        "cpp_prompt": "Write a function to maximize the given two tuples.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((maximize_elements({{1, 3}, {4, 5}, {2, 9}, {1, 10}}, {{6, 7}, {3, 9}, {1, 1}, {7, 3}}) == vector<tuple<int, int>>{{6, 7}, {4, 9}, {2, 9}, {7, 10}}));\n    assert((maximize_elements({{2, 4}, {5, 6}, {3, 10}, {2, 11}}, {{7, 8}, {4, 10}, {2, 2}, {8, 4}}) == vector<tuple<int, int>>{{7, 8}, {5, 10}, {3, 10}, {8, 11}}));\n    assert((maximize_elements({{3, 5}, {6, 7}, {4, 11}, {3, 12}}, {{8, 9}, {5, 11}, {3, 3}, {9, 5}}) == vector<tuple<int, int>>{{8, 9}, {6, 11}, {4, 11}, {9, 12}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> maximize_elements(const vector<tuple<int, int>>& test_tup1, const vector<tuple<int, int>>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to maximize the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> res;\n    for(size_t i = 0; i < test_tup1.size(); ++i) {\n        int first = max(get<0>(test_tup1[i]), get<0>(test_tup2[i]));\n//begin to write code\n"
    },
    {
        "task_id": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint newman_prime(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n    }\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2);\n}\n\n\n",
        "test": "int main() {\n    assert(newman_prime(3) == 7);\n    assert(newman_prime(4) == 17);\n    assert(newman_prime(5) == 41);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint newman_prime(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint newman_prime(int n) {\n    if (n == 0 || n == 1) {\n        return 1;\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(newman_prime(3) == 7);\n    assert(newman_prime(4) == 17);\n    assert(newman_prime(5) == 41);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint newman_prime(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0 || n == 1) {\n        return 1;\n//begin to write code\n"
    },
    {
        "task_id": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n    std::get<1>(test_tup1) / std::get<1>(test_tup2),\n    std::get<2>(test_tup1) / std::get<2>(test_tup2),\n    std::get<3>(test_tup1) / std::get<3>(test_tup2));\n}\n\n\n",
        "test": "int main() {\n    assert(division_elements(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(2, 2, 2, 3));\n    assert(division_elements(std::make_tuple(12, 6, 8, 16), std::make_tuple(6, 3, 4, 4)) == std::make_tuple(2, 2, 2, 4));\n    assert(division_elements(std::make_tuple(20, 14, 36, 18), std::make_tuple(5, 7, 6, 9)) == std::make_tuple(4, 2, 6, 2));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(division_elements(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(2, 2, 2, 3));\n    assert(division_elements(std::make_tuple(12, 6, 8, 16), std::make_tuple(6, 3, 4, 4)) == std::make_tuple(2, 2, 2, 4));\n    assert(division_elements(std::make_tuple(20, 14, 36, 18), std::make_tuple(5, 7, 6, 9)) == std::make_tuple(4, 2, 6, 2));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> division_elements(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform mathematical division operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  return std::make_tuple(\n    std::get<0>(test_tup1) / std::get<0>(test_tup2),\n//begin to write code\n"
    },
    {
        "task_id": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <utility>\n\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n    std::vector<T> second_part(list1.begin() + L, list1.end());\n    return {first_part, second_part};\n}\n\n\n",
        "test": "int main()\n{\n    assert(split_two_parts(std::vector<int>({1, 1, 2, 3, 4, 4, 5, 1}), 3) == std::make_pair(std::vector<int>({1, 1, 2}), std::vector<int>({3, 4, 4, 5, 1})));\n    assert(split_two_parts(std::vector<char>({'a', 'b', 'c', 'd'}), 2) == std::make_pair(std::vector<char>({'a', 'b'}), std::vector<char>({'c', 'd'})));\n    assert(split_two_parts(std::vector<char>({'p', 'y', 't', 'h', 'o', 'n'}), 4) == std::make_pair(std::vector<char>({'p', 'y', 't', 'h'}), std::vector<char>({'o', 'n'})));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n",
        "cpp_prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(split_two_parts(std::vector<int>({1, 1, 2, 3, 4, 4, 5, 1}), 3) == std::make_pair(std::vector<int>({1, 1, 2}), std::vector<int>({3, 4, 4, 5, 1})));\n    assert(split_two_parts(std::vector<char>({'a', 'b', 'c', 'd'}), 2) == std::make_pair(std::vector<char>({'a', 'b'}), std::vector<char>({'c', 'd'})));\n    assert(split_two_parts(std::vector<char>({'p', 'y', 't', 'h', 'o', 'n'}), 4) == std::make_pair(std::vector<char>({'p', 'y', 't', 'h'}), std::vector<char>({'o', 'n'})));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <utility>\ntemplate<typename T>\nstd::pair<std::vector<T>, std::vector<T>> split_two_parts(const std::vector<T>& list1, int L) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<T> first_part(list1.begin(), list1.begin() + L);\n//begin to write code\n"
    },
    {
        "task_id": 263,
        "prompt": "Write a function to merge two dictionaries.",
        "code_str": "\n#include <iostream>\n#include <unordered_map>\n#include <cassert>\n\nstd::unordered_map<std::string, int> merge_dict(std::unordered_map<std::string, int> d1, std::unordered_map<std::string, int> d2) {\n    std::unordered_map<std::string, int> d = d1;\n    for (const auto& pair : d2) {\n        d[pair.first] = pair.second;\n    }\n    return d;\n}\n\n\n",
        "test": "int main() {\n    // Test case 1\n    std::unordered_map<std::string, int> d1a{{\"a\", 100}, {\"b\", 200}};\n    std::unordered_map<std::string, int> d2a{{\"x\", 300}, {\"y\", 200}};\n    std::unordered_map<std::string, int> expected1{{\"x\", 300}, {\"y\", 200}, {\"a\", 100}, {\"b\", 200}};\n    assert(merge_dict(d1a, d2a) == expected1);\n\n    // Test case 2\n    std::unordered_map<std::string, int> d1b{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    std::unordered_map<std::string, int> d2b{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    std::unordered_map<std::string, int> expected2{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}, {\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    assert(merge_dict(d1b, d2b) == expected2);\n\n    // Test case 3\n    std::unordered_map<std::string, int> d1c{{\"a\", 10}, {\"b\", 20}};\n    std::unordered_map<std::string, int> d2c{{\"x\", 30}, {\"y\", 40}};\n    std::unordered_map<std::string, int> expected3{{\"x\", 30}, {\"y\", 40}, {\"a\", 10}, {\"b\", 20}};\n    assert(merge_dict(d1c, d2c) == expected3);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nstd::unordered_map<std::string, int> merge_dict(std::unordered_map<std::string, int> d1, std::unordered_map<std::string, int> d2) {\n    std::unordered_map<std::string, int> d = d1;\n    for (const auto& pair : d2) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to merge two dictionaries.",
        "perturbated_codes": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nstd::unordered_map<std::string, int> merge_dict(std::unordered_map<std::string, int> d1, std::unordered_map<std::string, int> d2) {\n    std::unordered_map<std::string, int> d = d1;\n    for (const auto& pair : d2) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test case 1\n    std::unordered_map<std::string, int> d1a{{\"a\", 100}, {\"b\", 200}};\n    std::unordered_map<std::string, int> d2a{{\"x\", 300}, {\"y\", 200}};\n    std::unordered_map<std::string, int> expected1{{\"x\", 300}, {\"y\", 200}, {\"a\", 100}, {\"b\", 200}};\n    assert(merge_dict(d1a, d2a) == expected1);\n\n    // Test case 2\n    std::unordered_map<std::string, int> d1b{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    std::unordered_map<std::string, int> d2b{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    std::unordered_map<std::string, int> expected2{{\"a\", 900}, {\"b\", 900}, {\"d\", 900}, {\"a\", 900}, {\"b\", 900}, {\"d\", 900}};\n    assert(merge_dict(d1b, d2b) == expected2);\n\n    // Test case 3\n    std::unordered_map<std::string, int> d1c{{\"a\", 10}, {\"b\", 20}};\n    std::unordered_map<std::string, int> d2c{{\"x\", 30}, {\"y\", 40}};\n    std::unordered_map<std::string, int> expected3{{\"x\", 30}, {\"y\", 40}, {\"a\", 10}, {\"b\", 20}};\n    assert(merge_dict(d1c, d2c) == expected3);\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nstd::unordered_map<std::string, int> merge_dict(std::unordered_map<std::string, int> d1, std::unordered_map<std::string, int> d2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to merge two dictionaries.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::unordered_map<std::string, int> d = d1;\n    for (const auto& pair : d2) {\n//begin to write code\n"
    },
    {
        "task_id": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <cstdlib>\n\ndouble dog_age(double h_age) {\n    if (h_age < 0) {\n        exit(EXIT_FAILURE);\n    } else if (h_age <= 2) {\n        return h_age * 10.5;\n    } else {\n        return 21 + (h_age - 2) * 4;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(dog_age(12) == 61);\n    assert(dog_age(15) == 73);\n    assert(dog_age(24) == 109);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <cstdlib>\ndouble dog_age(double h_age) {\n    if (h_age < 0) {\n        exit(EXIT_FAILURE);\n    } else if (h_age <= 2) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate a dog's age in dog's years.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <cstdlib>\ndouble dog_age(double h_age) {\n    if (h_age < 0) {\n        exit(EXIT_FAILURE);\n        double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    } else if (h_age <= 2) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(dog_age(12) == 61);\n    assert(dog_age(15) == 73);\n    assert(dog_age(24) == 109);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <cstdlib>\ndouble dog_age(double h_age) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate a dog's age in dog's years.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (h_age < 0) {\n        exit(EXIT_FAILURE);\n    } else if (h_age <= 2) {\n//begin to write code\n"
    },
    {
        "task_id": 265,
        "prompt": "Write a function to split a list for every nth element.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n            result[i].push_back(S[j]);\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((list_split(vector<char>{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3) == vector<vector<char>>{{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}}));\n    assert((list_split(vector<int>{1,2,3,4,5,6,7,8,9,10,11,12,13,14}, 3) == vector<vector<int>>{{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}}));\n    assert((list_split(vector<string>{\"python\",\"java\",\"C\",\"C++\",\"DBMS\",\"SQL\"}, 2) == vector<vector<string>>{{\"python\", \"C\", \"DBMS\"}, {\"java\", \"C++\", \"SQL\"}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to split a list for every nth element.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((list_split(vector<char>{'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'}, 3) == vector<vector<char>>{{'a', 'd', 'g', 'j', 'm'}, {'b', 'e', 'h', 'k', 'n'}, {'c', 'f', 'i', 'l'}}));\n    assert((list_split(vector<int>{1,2,3,4,5,6,7,8,9,10,11,12,13,14}, 3) == vector<vector<int>>{{1, 4, 7, 10, 13}, {2, 5, 8, 11, 14}, {3, 6, 9, 12}}));\n    assert((list_split(vector<string>{\"python\",\"java\",\"C\",\"C++\",\"DBMS\",\"SQL\"}, 2) == vector<vector<string>>{{\"python\", \"C\", \"DBMS\"}, {\"java\", \"C++\", \"SQL\"}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\ntemplate <typename T>\nvector<vector<T>> list_split(vector<T> S, int step) {\n\n    /*\n    progame language:cpp\n    description:Write a function to split a list for every nth element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<T>> result(step);\n    for (int i = 0; i < step; ++i) {\n        for (int j = i; j < S.size(); j += step) {\n//begin to write code\n"
    },
    {
        "task_id": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint lateralsurface_cube(int l) {\n    int LSA = 4 * (l * l);\n    return LSA;\n}\n\n\n",
        "test": "int main() {\n    assert(lateralsurface_cube(5) == 100);\n    assert(lateralsurface_cube(9) == 324);\n    assert(lateralsurface_cube(10) == 400);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint lateralsurface_cube(int l) {\n    int LSA = 4 * (l * l);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the lateral surface area of a cube.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint lateralsurface_cube(int l) {\n    int LSA = 4 * (l * l);\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(lateralsurface_cube(5) == 100);\n    assert(lateralsurface_cube(9) == 324);\n    assert(lateralsurface_cube(10) == 400);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint lateralsurface_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int LSA = 4 * (l * l);\n//begin to write code\n"
    },
    {
        "task_id": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int n) {\n    return n * (4 * n * n - 1) / 3;\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(square_Sum(2) == 10);\n    assert(square_Sum(3) == 35);\n    assert(square_Sum(4) == 84);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of squares of first n odd natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int n) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(square_Sum(2) == 10);\n    assert(square_Sum(3) == 35);\n    assert(square_Sum(4) == 84);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint square_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 268,
        "prompt": "Write a function to find the n'th star number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// Function Definition\nint find_star_num(int n) {\n    return (6 * n * (n - 1) + 1);\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(find_star_num(3) == 37);\n    assert(find_star_num(4) == 73);\n    assert(find_star_num(5) == 121);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// Function Definition\nint find_star_num(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n'th star number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// Function Definition\nint find_star_num(int n) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(find_star_num(3) == 37);\n    assert(find_star_num(4) == 73);\n    assert(find_star_num(5) == 121);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// Function Definition\nint find_star_num(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n'th star number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 269,
        "prompt": "Write a function to find the ascii value of a character.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint ascii_value(char k) {\n  return int(k);\n}\n\n\n",
        "test": "int main() {\n    assert(ascii_value('A') == 65);\n    assert(ascii_value('R') == 82);\n    assert(ascii_value('S') == 83);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the ascii value of a character.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(ascii_value('A') == 65);\n    assert(ascii_value('R') == 82);\n    assert(ascii_value('S') == 83);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint ascii_value(char k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the ascii value of a character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <vector>\n\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n\n",
        "test": "int main()\n{\n    assert(sum_even_and_even_index({5, 6, 12, 1, 18, 8}, 6) == 30);\n    assert(sum_even_and_even_index({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10) == 26);\n    assert(sum_even_and_even_index({5, 6, 12, 1}, 4) == 12);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of even numbers at even positions.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(sum_even_and_even_index({5, 6, 12, 1, 18, 8}, 6) == 30);\n    assert(sum_even_and_even_index({3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10) == 26);\n    assert(sum_even_and_even_index({5, 6, 12, 1}, 4) == 12);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <vector>\nint sum_even_and_even_index(const std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 0; i < n; i += 2) {\n        if (arr[i] % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint even_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int j = 2 * i;\n        sum += j * j * j * j * j;\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(even_Power_Sum(2) == 1056);\n    assert(even_Power_Sum(3) == 8832);\n    assert(even_Power_Sum(1) == 32);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint even_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of fifth power of first n even natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint even_Power_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(even_Power_Sum(2) == 1056);\n    assert(even_Power_Sum(3) == 8832);\n    assert(even_Power_Sum(1) == 32);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint even_Power_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of fifth power of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> rear_extract(vector<tuple<int, string, int>> test_list) {\n    vector<int> res;\n    for (auto& lis : test_list) {\n        res.push_back(get<2>(lis));\n    }\n    return res;\n}",
        "test": "int main()\n{\n    assert((rear_extract({{1, \"Rash\", 21}, {2, \"Varsha\", 20}, {3, \"Kil\", 19}}) == vector<int>{21, 20, 19}));\n    assert((rear_extract({{1, \"Sai\", 36}, {2, \"Ayesha\", 25}, {3, \"Salman\", 45}}) == vector<int>{36, 25, 45}));\n    assert((rear_extract({{1, \"Sudeep\", 14}, {2, \"Vandana\", 36}, {3, \"Dawood\", 56}}) == vector<int>{14, 36, 56}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<int> rear_extract(vector<tuple<int, string, int>> test_list) {\n    vector<int> res;\n    for (auto& lis : test_list) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<int> rear_extract(vector<tuple<int, string, int>> test_list) {\n    vector<int> res;\n    for (auto& lis : test_list) {\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((rear_extract({{1, \"Rash\", 21}, {2, \"Varsha\", 20}, {3, \"Kil\", 19}}) == vector<int>{21, 20, 19}));\n    assert((rear_extract({{1, \"Sai\", 36}, {2, \"Ayesha\", 25}, {3, \"Salman\", 45}}) == vector<int>{36, 25, 45}));\n    assert((rear_extract({{1, \"Sudeep\", 14}, {2, \"Vandana\", 36}, {3, \"Dawood\", 56}}) == vector<int>{14, 36, 56}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<int> rear_extract(vector<tuple<int, string, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perfom the rear element extraction from list of tuples records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> res;\n    for (auto& lis : test_list) {\n//begin to write code\n"
    },
    {
        "task_id": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code_str": "\n#include <iostream>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n                           std::get<1>(test_tup1) - std::get<1>(test_tup2),\n                           std::get<2>(test_tup1) - std::get<2>(test_tup2));\n}\n\n\n",
        "test": "int main() {\n    assert(substract_elements(std::make_tuple(10, 4, 5), std::make_tuple(2, 5, 18)) == std::make_tuple(8, -1, -13));\n    assert(substract_elements(std::make_tuple(11, 2, 3), std::make_tuple(24, 45, 16)) == std::make_tuple(-13, -43, -13));\n    assert(substract_elements(std::make_tuple(7, 18, 9), std::make_tuple(10, 11, 12)) == std::make_tuple(-3, 7, -3));\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n//begin to write code\n",
        "cpp_prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "perturbated_codes": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(substract_elements(std::make_tuple(10, 4, 5), std::make_tuple(2, 5, 18)) == std::make_tuple(8, -1, -13));\n    assert(substract_elements(std::make_tuple(11, 2, 3), std::make_tuple(24, 45, 16)) == std::make_tuple(-13, -43, -13));\n    assert(substract_elements(std::make_tuple(7, 18, 9), std::make_tuple(10, 11, 12)) == std::make_tuple(-3, 7, -3));\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int> substract_elements(const std::tuple<int, int, int>& test_tup1, const std::tuple<int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(std::get<0>(test_tup1) - std::get<0>(test_tup2),\n//begin to write code\n"
    },
    {
        "task_id": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.",
        "code_str": "#include<cassert>\n#include <iostream>\n\nint even_binomial_Coeff_Sum(int n) {\n    return (1 << (n - 1));\n}\n\n\n",
        "test": "int main() {\n    assert(even_binomial_Coeff_Sum(4) == 8);\n    assert(even_binomial_Coeff_Sum(6) == 32);\n    assert(even_binomial_Coeff_Sum(2) == 2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\nint even_binomial_Coeff_Sum(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find sum of even index binomial coefficients.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\nint even_binomial_Coeff_Sum(int n) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(even_binomial_Coeff_Sum(4) == 8);\n    assert(even_binomial_Coeff_Sum(6) == 32);\n    assert(even_binomial_Coeff_Sum(2) == 2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\nint even_binomial_Coeff_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find sum of even index binomial coefficients.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath> // for ceil\nusing namespace std;\n\nint get_Position(vector<int>& a, int n, int m) {\n    for (int i = 0; i < n; ++i) {\n        a[i] = (a[i] / m + (a[i] % m != 0));\n    }\n    int result = -1, maxx = -1;\n    for (int i = n - 1; i >= 0; --i) {\n        if (maxx < a[i]) {\n            maxx = a[i];\n            result = i;\n        }\n    }\n    return result + 1;\n}\n\n\n",
        "test": "int main() {\n    vector<int> arr1 = {2, 5, 4};\n    vector<int> arr2 = {4, 3};\n    vector<int> arr3 = {1, 2, 3, 4};\n    assert(get_Position(arr1, 3, 2) == 2);\n    assert(get_Position(arr2, 2, 2) == 2);\n    assert(get_Position(arr3, 4, 1) == 4);\n\n    cout << \"All test cases passed!\" << endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath> // for ceil\nusing namespace std;\nint get_Position(vector<int>& a, int n, int m) {\n    for (int i = 0; i < n; ++i) {\n        a[i] = (a[i] / m + (a[i] % m != 0));\n    }\n    int result = -1, maxx = -1;\n    for (int i = n - 1; i >= 0; --i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the position of the last removed element from the given array.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath> // for ceil\nusing namespace std;\nint get_Position(vector<int>& a, int n, int m) {\n    for (int i = 0; i < n; ++i) {\n        a[i] = (a[i] / m + (a[i] % m != 0));\n    }\n    int result = -1, maxx = -1;\n    for (int i = n - 1; i >= 0; --i) {\n    double temp_var_7 = 9.9;while (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> arr1 = {2, 5, 4};\n    vector<int> arr2 = {4, 3};\n    vector<int> arr3 = {1, 2, 3, 4};\n    assert(get_Position(arr1, 3, 2) == 2);\n    assert(get_Position(arr2, 2, 2) == 2);\n    assert(get_Position(arr3, 4, 1) == 4);\n\n    cout << \"All test cases passed!\" << endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath> // for ceil\nusing namespace std;\nint get_Position(vector<int>& a, int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the position of the last removed element from the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < n; ++i) {\n        a[i] = (a[i] / m + (a[i] % m != 0));\n    }\n    int result = -1, maxx = -1;\n    for (int i = n - 1; i >= 0; --i) {\n//begin to write code\n"
    },
    {
        "task_id": 276,
        "prompt": "Write a function to find the volume of a cylinder.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n#include <cmath>\n\ndouble volume_cylinder(double r, double h) {\n    double volume = 3.1415 * r * r * h;\n    return volume;\n}\n\n\n",
        "test": "int main() {\n    assert(fabs(volume_cylinder(10, 5) - 1570.7500000000002) < 1e-9);\n    assert(fabs(volume_cylinder(4, 5) - 251.32000000000002) < 1e-9);\n    assert(fabs(volume_cylinder(4, 10) - 502.64000000000004) < 1e-9);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n#include <cmath>\ndouble volume_cylinder(double r, double h) {\n    double volume = 3.1415 * r * r * h;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the volume of a cylinder.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n#include <cmath>\ndouble volume_cylinder(double r, double h) {\n    double volume = 3.1415 * r * r * h;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fabs(volume_cylinder(10, 5) - 1570.7500000000002) < 1e-9);\n    assert(fabs(volume_cylinder(4, 5) - 251.32000000000002) < 1e-9);\n    assert(fabs(volume_cylinder(4, 10) - 502.64000000000004) < 1e-9);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n#include <cmath>\ndouble volume_cylinder(double r, double h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double volume = 3.1415 * r * r * h;\n//begin to write code\n"
    },
    {
        "task_id": 277,
        "prompt": "Write a function to filter a dictionary based on values.",
        "code_str": "#include<iostream>\n    \n\n#include <map>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n            result[pair.first] = pair.second;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    map<string, int> test1 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result1 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}};\n    assert(dict_filter(test1, 170) == result1);\n\n    map<string, int> test2 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result2 = {{\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}};\n    assert(dict_filter(test2, 180) == result2);\n\n    map<string, int> test3 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result3 = {{\"Pierre Cox\", 190}};\n    assert(dict_filter(test3, 190) == result3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to filter a dictionary based on values.",
        "perturbated_codes": "#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    map<string, int> test1 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result1 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}};\n    assert(dict_filter(test1, 170) == result1);\n\n    map<string, int> test2 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result2 = {{\"Alden Cantrell\", 180}, {\"Pierre Cox\", 190}};\n    assert(dict_filter(test2, 180) == result2);\n\n    map<string, int> test3 = {{\"Cierra Vega\", 175}, {\"Alden Cantrell\", 180}, {\"Kierra Gentry\", 165}, {\"Pierre Cox\", 190}};\n    map<string, int> result3 = {{\"Pierre Cox\", 190}};\n    assert(dict_filter(test3, 190) == result3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <map>\n#include <string>\n#include <cassert>\nusing namespace std;\nmap<string, int> dict_filter(const map<string, int>& input_dict, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter a dictionary based on values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, int> result;\n    for (auto const& pair : input_dict) {\n        if (pair.second >= n) {\n//begin to write code\n"
    },
    {
        "task_id": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code_str": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\n#include <type_traits>\n\nusing namespace std;\n\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, true_type) {\n    return 0;\n}\n\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, false_type) {\n    return 1 + count_first_elements_helper<Index + 1>(t, is_same<typename decay<typename tuple_element<Index + 1, Tuple>::type>::type, vector<int>>());\n}\ntemplate <typename... Args>\nint count_first_elements(const tuple<Args...>& t) {\n    return count_first_elements_helper<0>(t, is_same<typename decay<typename tuple_element<0, tuple<Args...>>::type>::type, vector<int>>());\n}",
        "test": "int main() {\n    assert(count_first_elements(make_tuple(1, 5, 7, vector<int>{4, 6}, 10)) == 3);\n    assert(count_first_elements(make_tuple(2, 9, vector<int>{5, 7}, 11)) == 2);\n    assert(count_first_elements(make_tuple(11, 15, 5, 8, vector<int>{2, 3}, 8)) == 4);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\n#include <type_traits>\nusing namespace std;\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, true_type) {\n    return 0;\n}\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, false_type) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "perturbated_codes": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\n#include <type_traits>\nusing namespace std;\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, true_type) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return 0;\n}\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, false_type) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_first_elements(make_tuple(1, 5, 7, vector<int>{4, 6}, 10)) == 3);\n    assert(count_first_elements(make_tuple(2, 9, vector<int>{5, 7}, 11)) == 2);\n    assert(count_first_elements(make_tuple(11, 15, 5, 8, vector<int>{2, 3}, 8)) == 4);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\n#include <type_traits>\nusing namespace std;\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, true_type) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the element count that occurs before the record in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return 0;\n}\ntemplate <size_t Index, typename Tuple>\nint count_first_elements_helper(const Tuple& t, false_type) {\n//begin to write code\n"
    },
    {
        "task_id": 279,
        "prompt": "Write a function to find the nth decagonal number.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint is_num_decagonal(int n) {\n    return 4 * n * n - 3 * n;\n}\n\n\n",
        "test": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(is_num_decagonal(3) == 27);\n    assert(is_num_decagonal(7) == 175);\n    assert(is_num_decagonal(10) == 370);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint is_num_decagonal(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nth decagonal number.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint is_num_decagonal(int n) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(is_num_decagonal(3) == 27);\n    assert(is_num_decagonal(7) == 175);\n    assert(is_num_decagonal(10) == 370);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint is_num_decagonal(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nth decagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n        }\n        pos++;\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    int pos;\n    assert((sequential_search({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31, pos) && pos == 3));\n    assert((sequential_search({12, 32, 45, 62, 35, 47, 44, 61}, 61, pos) && pos == 7)); \n    assert((sequential_search({9, 10, 17, 19, 22, 39, 48, 56}, 48, pos) && pos == 6));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to search an element in the given array by using sequential search.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    int pos;\n    assert((sequential_search({11, 23, 58, 31, 56, 77, 43, 12, 65, 19}, 31, pos) && pos == 3));\n    assert((sequential_search({12, 32, 45, 62, 35, 47, 44, 61}, 61, pos) && pos == 7)); \n    assert((sequential_search({9, 10, 17, 19, 22, 39, 48, 56}, 48, pos) && pos == 6));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool sequential_search(const std::vector<int>& dlist, int item, int& pos) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    pos = 0;\n    while (pos < dlist.size()) {\n        if (dlist[pos] == item) {\n            return true;\n//begin to write code\n"
    },
    {
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\n\nbool all_unique(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n        return false;\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(all_unique({1, 2, 3}) == true);\n    assert(all_unique({1, 2, 1, 2}) == false);\n    assert(all_unique({1, 2, 3, 4, 5}) == true);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_unique(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check if the elements of a given list are unique or not.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_unique(const std::vector<int>& test_list) {\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(all_unique({1, 2, 3}) == true);\n    assert(all_unique({1, 2, 1, 2}) == false);\n    assert(all_unique({1, 2, 3, 4, 5}) == true);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nbool all_unique(const std::vector<int>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<int> unique_elements(test_list.begin(), test_list.end());\n    if (test_list.size() > unique_elements.size()) {\n//begin to write code\n"
    },
    {
        "task_id": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] - nums2[i]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> result;\n    \n    result = sub_list({1, 2, 3}, {4, 5, 6});\n    assert((result == std::vector<int>{-3, -3, -3}));\n    \n    result = sub_list({1, 2}, {3, 4});\n    assert((result == std::vector<int>{-2, -2}));\n    \n    result = sub_list({90, 120}, {50, 70});\n    assert((result == std::vector<int>{40, 50}));\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to substaract two lists using map and lambda function.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> result;\n    \n    result = sub_list({1, 2, 3}, {4, 5, 6});\n    assert((result == std::vector<int>{-3, -3, -3}));\n    \n    result = sub_list({1, 2}, {3, 4});\n    assert((result == std::vector<int>{-2, -2}));\n    \n    result = sub_list({90, 120}, {50, 70});\n    assert((result == std::vector<int>{40, 50}));\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> sub_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to substaract two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp /= 10;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(validate(1234) == true);\n    assert(validate(51241) == false);\n    assert(validate(321) == true);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n            double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(validate(1234) == true);\n    assert(validate(51241) == false);\n    assert(validate(321) == true);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool validate(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < 10; i++) {\n        int temp = n;\n        int count = 0;\n        while (temp) {\n            if (temp % 10 == i) {\n                count++;\n            }\n//begin to write code\n"
    },
    {
        "task_id": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(check_element<std::string>({\"green\", \"orange\", \"black\", \"white\"}, \"blue\") == false);\n    assert(check_element<int>({1, 2, 3, 4}, 7) == false);\n    assert(check_element<std::string>({\"green\", \"green\", \"green\", \"green\"}, \"green\") == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n    for (const T& item : list) {\n        if (item != element) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_element<std::string>({\"green\", \"orange\", \"black\", \"white\"}, \"blue\") == false);\n    assert(check_element<int>({1, 2, 3, 4}, 7) == false);\n    assert(check_element<std::string>({\"green\", \"green\", \"green\", \"green\"}, \"green\") == true);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nbool check_element(const std::vector<T>& list, const T& element) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether all items of a list are equal to a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const T& item : list) {\n        if (item != element) {\n//begin to write code\n"
    },
    {
        "task_id": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring text_match_two_three(const string& text) {\n    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}",
        "test": "int main() {\n    assert(text_match_two_three(\"ac\") == \"Not matched!\");\n    assert(text_match_two_three(\"dc\") == \"Not matched!\");\n    assert(text_match_two_three(\"abbbba\") == \"Found a match!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_two_three(const string& text) {\n    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_two_three(const string& text) {\n    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(text_match_two_three(\"ac\") == \"Not matched!\");\n    assert(text_match_two_three(\"dc\") == \"Not matched!\");\n    assert(text_match_two_three(\"abbbba\") == \"Found a match!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_two_three(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function that matches a string that has an a followed by two to three 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"ab{2,3}\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n"
    },
    {
        "task_id": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    for (int i = 0; i < n * k; ++i) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n        if (max_ending_here < 0) {\n            max_ending_here = 0;\n        }\n    }\n    return max_so_far;\n}\n\n\n",
        "test": "int main()\n{\n    assert(max_sub_array_sum_repeated({10, 20, -30, -1}, 4, 3) == 30);\n    assert(max_sub_array_sum_repeated({-1, 10, 20}, 3, 2) == 59);\n    assert(max_sub_array_sum_repeated({-1, -2, -3}, 3, 3) == -1);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    for (int i = 0; i < n * k; ++i) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    for (int i = 0; i < n * k; ++i) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n            double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(max_sub_array_sum_repeated({10, 20, -30, -1}, 4, 3) == 30);\n    assert(max_sub_array_sum_repeated({-1, 10, 20}, 3, 2) == 59);\n    assert(max_sub_array_sum_repeated({-1, -2, -3}, 3, 3) == -1);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sub_array_sum_repeated(vector<int> a, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_so_far = -2147483648;\n    int max_ending_here = 0;\n    for (int i = 0; i < n * k; ++i) {\n        max_ending_here = max_ending_here + a[i % n];\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n//begin to write code\n"
    },
    {
        "task_id": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nint square_Sum(int n) {\n    return int(2*n*(n+1)*(2*n+1)/3);\n}\n\n\n",
        "test": "int main() {\n    assert(square_Sum(2) == 20);\n    assert(square_Sum(3) == 56);\n    assert(square_Sum(4) == 120);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nint square_Sum(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of squares of first n even natural numbers.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nint square_Sum(int n) {\ndouble temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(square_Sum(2) == 20);\n    assert(square_Sum(3) == 56);\n    assert(square_Sum(4) == 120);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nint square_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of squares of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint modular_inverse(const std::vector<int>& arr, int N, int P) {\n    int current_element = 0;\n    for (int i = 0; i < N; ++i) {\n        if ((arr[i] * arr[i]) % P == 1) {\n            current_element++;\n        }\n    }\n    return current_element;\n}\n\n\n",
        "test": "int main() {\n    assert(modular_inverse({1, 6, 4, 5}, 4, 7) == 2);\n    assert(modular_inverse({1, 3, 8, 12, 12}, 5, 13) == 3);\n    assert(modular_inverse({2, 3, 4, 5}, 4, 6) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint modular_inverse(const std::vector<int>& arr, int N, int P) {\n    int current_element = 0;\n    for (int i = 0; i < N; ++i) {\n        if ((arr[i] * arr[i]) % P == 1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint modular_inverse(const std::vector<int>& arr, int N, int P) {\n    int current_element = 0;\n    for (int i = 0; i < N; ++i) {\n        if ((arr[i] * arr[i]) % P == 1) {\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(modular_inverse({1, 6, 4, 5}, 4, 7) == 2);\n    assert(modular_inverse({1, 3, 8, 12, 12}, 5, 13) == 3);\n    assert(modular_inverse({2, 3, 4, 5}, 4, 6) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint modular_inverse(const std::vector<int>& arr, int N, int P) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int current_element = 0;\n    for (int i = 0; i < N; ++i) {\n        if ((arr[i] * arr[i]) % P == 1) {\n//begin to write code\n"
    },
    {
        "task_id": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\nusing namespace std;\n\nint odd_Days(int N) {\n    int hund1 = N / 100;\n    int hund4 = N / 400;\n    int leap = N >> 2;\n    int ordd = N - leap;\n    if (hund1) {\n        ordd += hund1;\n        leap -= hund1;\n    }\n    if (hund4) {\n        ordd -= hund4;\n        leap += hund4;\n    }\n    int days = ordd + leap * 2;\n    int odd = days % 7;\n    return odd;\n}\n\n\n",
        "test": "int main() {\n    assert(odd_Days(100) == 5);\n    assert(odd_Days(50) == 6);\n    assert(odd_Days(75) == 2);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint odd_Days(int N) {\n    int hund1 = N / 100;\n    int hund4 = N / 400;\n    int leap = N >> 2;\n    int ordd = N - leap;\n    if (hund1) {\n        ordd += hund1;\n        leap -= hund1;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to calculate the number of odd days in a given year.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint odd_Days(int N) {\n    int hund1 = N / 100;\n    int hund4 = N / 400;\n    int leap = N >> 2;\n    int ordd = N - leap;\n    if (hund1) {\n        ordd += hund1;\n        leap -= hund1;\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(odd_Days(100) == 5);\n    assert(odd_Days(50) == 6);\n    assert(odd_Days(75) == 2);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\nusing namespace std;\nint odd_Days(int N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to calculate the number of odd days in a given year.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int hund1 = N / 100;\n    int hund4 = N / 400;\n    int leap = N >> 2;\n    int ordd = N - leap;\n    if (hund1) {\n        ordd += hund1;\n        leap -= hund1;\n//begin to write code\n"
    },
    {
        "task_id": 290,
        "prompt": "Write a function to find the list of lists with maximum length.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n            max_length = x.size();\n            max_list = x;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n",
        "test": "int main() {\n    assert(max_length({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(3, std::vector<int>{13, 15, 17}));\n    assert(max_length({{1}, {5, 7}, {10, 12, 14, 15}}) == std::make_pair(4, std::vector<int>{10, 12, 14, 15}));\n    assert(max_length({{5}, {15, 20, 25}}) == std::make_pair(3, std::vector<int>{15, 20, 25}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the list of lists with maximum length.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_length({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(3, std::vector<int>{13, 15, 17}));\n    assert(max_length({{1}, {5, 7}, {10, 12, 14, 15}}) == std::make_pair(4, std::vector<int>{10, 12, 14, 15}));\n    assert(max_length({{5}, {15, 20, 25}}) == std::make_pair(3, std::vector<int>{15, 20, 25}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nstd::pair<int, std::vector<int>> max_length(const std::vector<std::vector<int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& x : list1) {\n        if (x.size() > max_length) {\n//begin to write code\n"
    },
    {
        "task_id": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint count_no_of_ways(int n, int k) {\n    vector<int> dp(n + 1, 0);\n    const int mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n    for (int i = 3; i <= n; ++i) {\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;\n    }\n    return dp[n];\n}\n\n\n",
        "test": "int main() {\n    assert(count_no_of_ways(2, 4) == 16);\n    assert(count_no_of_ways(3, 2) == 6);\n    assert(count_no_of_ways(4, 4) == 228);\n    cout << \"All test cases passed.\" << endl;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint count_no_of_ways(int n, int k) {\n    vector<int> dp(n + 1, 0);\n    const int mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint count_no_of_ways(int n, int k) {\n    vector<int> dp(n + 1, 0);\n    const int mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_no_of_ways(2, 4) == 16);\n    assert(count_no_of_ways(3, 2) == 6);\n    assert(count_no_of_ways(4, 4) == 228);\n    cout << \"All test cases passed.\" << endl;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint count_no_of_ways(int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n + 1, 0);\n    const int mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n//begin to write code\n"
    },
    {
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, int m) {\n    int q = n / m;\n    return q;\n}\n\n\n",
        "test": "int main() {\n    assert(find(10, 3) == 3);\n    assert(find(4, 2) == 2);\n    assert(find(20, 5) == 4);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int q = n / m;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find quotient of two numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int q = n / m;\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find(10, 3) == 3);\n    assert(find(4, 2) == 2);\n    assert(find(20, 5) == 4);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int q = n / m;\n//begin to write code\n"
    },
    {
        "task_id": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble otherside_rightangle(double w, double h) {\n    double s = std::sqrt((w * w) + (h * h));\n    return s;\n}\n\n\n",
        "test": "int main() {\n    assert(otherside_rightangle(7, 8) == 10.63014581273465);\n    assert(otherside_rightangle(3, 4) == 5);\n    assert(otherside_rightangle(7, 15) == 16.55294535724685);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble otherside_rightangle(double w, double h) {\n    double s = std::sqrt((w * w) + (h * h));\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the third side of a right angled triangle.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble otherside_rightangle(double w, double h) {\n    double s = std::sqrt((w * w) + (h * h));\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(otherside_rightangle(7, 8) == 10.63014581273465);\n    assert(otherside_rightangle(3, 4) == 5);\n    assert(otherside_rightangle(7, 15) == 16.55294535724685);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble otherside_rightangle(double w, double h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third side of a right angled triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double s = std::sqrt((w * w) + (h * h));\n//begin to write code\n"
    },
    {
        "task_id": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nint max_val(const vector<int>& listval) {\n    return *max_element(listval.begin(), listval.end());\n}\n\n\n",
        "test": "int main() {\n    assert(max_val({3, 2, 4, 5}) == 5);\n    assert(max_val({15, 20, 25}) == 25);\n    assert(max_val({30, 20, 40, 50}) == 50);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_val({3, 2, 4, 5}) == 5);\n    assert(max_val({15, 20, 25}) == 25);\n    assert(max_val({30, 20, 40, 50}) == 50);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <algorithm>\n#include <limits>\nusing namespace std;\nint max_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\n\nint sum_div(int number) {\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (number % i == 0) {\n            divisors.push_back(i);\n        }\n    }\n    return std::accumulate(divisors.begin(), divisors.end(), 0);\n}\n\n\n",
        "test": "int main() {\n    assert(sum_div(8) == 7);\n    assert(sum_div(12) == 16);\n    assert(sum_div(7) == 1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_div(int number) {\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (number % i == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to return the sum of all divisors of a number.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_div(int number) {\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (number % i == 0) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_div(8) == 7);\n    assert(sum_div(12) == 16);\n    assert(sum_div(7) == 1);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <numeric>\nint sum_div(int number) {\n\n    /*\n    progame language:cpp\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> divisors = {1};\n    for (int i = 2; i < number; ++i) {\n        if (number % i == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count++;\n            }\n        }\n    }\n    return inv_count;\n}\n\n\n",
        "test": "int main()\n{\n    assert(get_Inv_Count({1, 20, 6, 4, 5}, 5) == 5);\n    assert(get_Inv_Count({1, 2, 1}, 3) == 1);\n    assert(get_Inv_Count({1, 2, 5, 6, 1}, 5) == 3);\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count inversions in an array.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(get_Inv_Count({1, 20, 6, 4, 5}, 5) == 5);\n    assert(get_Inv_Count({1, 2, 1}, 3) == 1);\n    assert(get_Inv_Count({1, 2, 5, 6, 1}, 5) == 3);\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\nusing namespace std;\nint get_Inv_Count(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int inv_count = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n//begin to write code\n"
    },
    {
        "task_id": 297,
        "prompt": "Write a function to flatten a given nested list structure.",
        "code_str": "#include <vector>\n#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_vector() const = 0;\n    virtual int get_int() const = 0;\n    virtual const vector<Variant*>& get_vector() const = 0;\n};\n\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    bool is_int() const override { return true; }\n    bool is_vector() const override { return false; }\n    int get_int() const override { return value; }\n    const vector<Variant*>& get_vector() const override { throw runtime_error(\"Not a vector\"); }\nprivate:\n    int value;\n};\n\nclass VectorVariant : public Variant {\npublic:\n    VectorVariant(const vector<Variant*>& value) : value(value) {}\n    bool is_int() const override { return false; }\n    bool is_vector() const override { return true; }\n    int get_int() const override { throw runtime_error(\"Not an int\"); }\n    const vector<Variant*>& get_vector() const override { return value; }\nprivate:\n    vector<Variant*> value;\n};\n\nvoid flatten_list(const vector<Variant*>& list1, vector<int>& result_list) {\n    for (const auto& element : list1) {\n        if (element->is_int()) {\n            result_list.push_back(element->get_int());\n        } else if (element->is_vector()) {\n            flatten_list(element->get_vector(), result_list);\n        }\n    }\n}\n\n\nvector<int> flatten_list(const vector<Variant*>& list1) {\n    vector<int> result_list;\n    flatten_list(list1, result_list);\n    return result_list;\n}\n\n\nvector<Variant*> create_variant_list(const vector<vector<int>>& input) {\n    vector<Variant*> result;\n    for (const auto& vec : input) {\n        if(vec.size()==1)\n        {\n            result.push_back(new IntVariant(vec[0]));\n        }\n        else\n        {\n            vector<Variant*> tmp;\n            for(auto v:vec)\n            {\n                tmp.push_back(new IntVariant(v));\n            }\n            result.push_back(new VectorVariant(tmp));\n        }\n    }\n    return result;\n}",
        "test": "int main() {\n    vector<Variant*> list1;\n    vector<vector<int>> test1 = {{0},{10},{20,30},{40},{50},{60,70,80},{90,100,110,120}};\n    list1 = create_variant_list(test1);\n    assert(flatten_list(list1) == (vector<int>{0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120}));\n    vector<vector<int>> test2 = {{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}};\n    vector<vector<int>> test3 = {{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}};\n\n    vector<Variant*> list2 = create_variant_list(test2);\n    vector<Variant*> list3 = create_variant_list(test3);\n\n    assert(flatten_list(list2) == (vector<int>{10, 20, 40, 30, 56, 25, 10, 20, 33, 40}));\n    assert(flatten_list(list3) == (vector<int>{1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}));\n\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <iostream>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_vector() const = 0;\n    virtual int get_int() const = 0;\n    virtual const vector<Variant*>& get_vector() const = 0;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    bool is_int() const override { return true; }\n    bool is_vector() const override { return false; }\n    int get_int() const override { return value; }\n    const vector<Variant*>& get_vector() const override { throw runtime_error(\"Not a vector\"); }\nprivate:\n    int value;\n};\nclass VectorVariant : public Variant {\npublic:\n    VectorVariant(const vector<Variant*>& value) : value(value) {}\n    bool is_int() const override { return false; }\n    bool is_vector() const override { return true; }\n    int get_int() const override { throw runtime_error(\"Not an int\"); }\n    const vector<Variant*>& get_vector() const override { return value; }\nprivate:\n    vector<Variant*> value;\n};\nvoid flatten_list(const vector<Variant*>& list1, vector<int>& result_list) {\n    for (const auto& element : list1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to flatten a given nested list structure.",
        "perturbated_codes": "#include <vector>\n#include <iostream>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_vector() const = 0;\n    virtual int get_int() const = 0;\n    virtual const vector<Variant*>& get_vector() const = 0;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    bool is_int() const override { return true; }\n    bool is_vector() const override { return false; }\n    int get_int() const override { return value; }\n    const vector<Variant*>& get_vector() const override { throw runtime_error(\"Not a vector\"); }\nprivate:\n    int value;\n};\nclass VectorVariant : public Variant {\npublic:\n    VectorVariant(const vector<Variant*>& value) : value(value) {}\n    bool is_int() const override { return false; }\n    bool is_vector() const override { return true; }\n    int get_int() const override { throw runtime_error(\"Not an int\"); }\n    const vector<Variant*>& get_vector() const override { return value; }\nprivate:\n    vector<Variant*> value;\n};\nvoid flatten_list(const vector<Variant*>& list1, vector<int>& result_list) {\n    for (const auto& element : list1) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<Variant*> list1;\n    vector<vector<int>> test1 = {{0},{10},{20,30},{40},{50},{60,70,80},{90,100,110,120}};\n    list1 = create_variant_list(test1);\n    assert(flatten_list(list1) == (vector<int>{0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120}));\n    vector<vector<int>> test2 = {{10, 20}, {40}, {30, 56, 25}, {10, 20}, {33}, {40}};\n    vector<vector<int>> test3 = {{1, 2, 3}, {4, 5, 6}, {10, 11, 12}, {7, 8, 9}};\n\n    vector<Variant*> list2 = create_variant_list(test2);\n    vector<Variant*> list3 = create_variant_list(test3);\n\n    assert(flatten_list(list2) == (vector<int>{10, 20, 40, 30, 56, 25, 10, 20, 33, 40}));\n    assert(flatten_list(list3) == (vector<int>{1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9}));\n\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_vector() const = 0;\n    virtual int get_int() const = 0;\n    virtual const vector<Variant*>& get_vector() const = 0;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    bool is_int() const override { return true; }\n    bool is_vector() const override { return false; }\n    int get_int() const override { return value; }\n    const vector<Variant*>& get_vector() const override { throw runtime_error(\"Not a vector\"); }\nprivate:\n    int value;\n};\nclass VectorVariant : public Variant {\npublic:\n    VectorVariant(const vector<Variant*>& value) : value(value) {}\n    bool is_int() const override { return false; }\n    bool is_vector() const override { return true; }\n    int get_int() const override { throw runtime_error(\"Not an int\"); }\n    const vector<Variant*>& get_vector() const override { return value; }\nprivate:\n    vector<Variant*> value;\n};\nvoid flatten_list(const vector<Variant*>& list1, vector<int>& result_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to flatten a given nested list structure.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& element : list1) {\n//begin to write code\n"
    },
    {
        "task_id": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\n\nusing namespace std;\n\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (find(l1.begin(), l1.end(), n) != l1.end()) {\n                temp.push_back(n);\n            }\n        }\n        result.push_back(temp);\n    }\n    return result;\n}",
        "test": "int main() {\n    assert((intersection_nested_lists(vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}),\n                                      vector<vector<int>>({{12, 18, 23, 25, 45}, {7, 11, 19, 24, 28}, {1, 5, 8, 18, 15, 16}}))\n            == vector<vector<int>>({{12}, {7, 11}, {1, 5, 8}})));\n\n    assert((intersection_nested_lists(vector<int>({2, 3, 1}), \n                                      vector<vector<int>>({{4, 5}, {6, 8}}))\n            == vector<vector<int>>({{}, {}})));\n\n    assert((intersection_nested_lists(vector<string>({\"john\",\"amal\",\"joel\",\"george\"}),\n                                      vector<vector<string>>({{\"john\"}, {\"jack\",\"john\",\"mary\"}, {\"howard\",\"john\"}, {\"jude\"}}))\n            == vector<vector<string>>({{\"john\"}, {\"john\"}, {\"john\"}, {}})));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (find(l1.begin(), l1.end(), n) != l1.end()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the nested list elements which are present in another list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (find(l1.begin(), l1.end(), n) != l1.end()) {\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((intersection_nested_lists(vector<int>({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}),\n                                      vector<vector<int>>({{12, 18, 23, 25, 45}, {7, 11, 19, 24, 28}, {1, 5, 8, 18, 15, 16}}))\n            == vector<vector<int>>({{12}, {7, 11}, {1, 5, 8}})));\n\n    assert((intersection_nested_lists(vector<int>({2, 3, 1}), \n                                      vector<vector<int>>({{4, 5}, {6, 8}}))\n            == vector<vector<int>>({{}, {}})));\n\n    assert((intersection_nested_lists(vector<string>({\"john\",\"amal\",\"joel\",\"george\"}),\n                                      vector<vector<string>>({{\"john\"}, {\"jack\",\"john\",\"mary\"}, {\"howard\",\"john\"}, {\"jude\"}}))\n            == vector<vector<string>>({{\"john\"}, {\"john\"}, {\"john\"}, {}})));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<vector<T>> intersection_nested_lists(const vector<T>& l1, const vector<vector<T>>& l2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<T>> result;\n    for (const auto& lst : l2) {\n        vector<T> temp;\n        for (const auto& n : lst) {\n            if (find(l1.begin(), l1.end(), n) != l1.end()) {\n//begin to write code\n"
    },
    {
        "task_id": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cassert>\n\nusing namespace std;\n\npair<string, int> max_aggregate(const vector<pair<string, int>>& stdata) {\n    map<string, int> temp;\n    for (const auto& item : stdata) {\n        temp[item.first] += item.second;\n    }\n    pair<string, int> max_item = *temp.begin();\n    for (const auto& item : temp) {\n        if (item.second > max_item.second) {\n            max_item = item;\n        }\n    }\n    return max_item;\n}\n\nbool compare(pair<string,int> r1,pair<string,int>r2)\n{\n    return r1.first == r2.first && r1.second == r2.second;\n}",
        "test": "int main() {\n    assert(compare(max_aggregate({{\"Juan Whelan\", 90}, {\"Sabah Colley\", 88}, {\"Peter Nichols\", 7}, {\"Juan Whelan\", 122}, {\"Sabah Colley\", 84}}),make_pair(\"Juan Whelan\", 212)));\n    assert(compare(max_aggregate({{\"Juan Whelan\", 50}, {\"Sabah Colley\", 48}, {\"Peter Nichols\", 37}, {\"Juan Whelan\", 22}, {\"Sabah Colley\", 14}}),make_pair(\"Juan Whelan\", 72)));\n    assert(compare(max_aggregate({{\"Juan Whelan\", 10}, {\"Sabah Colley\", 20}, {\"Peter Nichols\", 30}, {\"Juan Whelan\", 40}, {\"Sabah Colley\", 50}}),make_pair(\"Sabah Colley\", 70)));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cassert>\nusing namespace std;\npair<string, int> max_aggregate(const vector<pair<string, int>>& stdata) {\n    map<string, int> temp;\n    for (const auto& item : stdata) {\n        temp[item.first] += item.second;\n    }\n    pair<string, int> max_item = *temp.begin();\n    for (const auto& item : temp) {\n        if (item.second > max_item.second) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cassert>\nusing namespace std;\npair<string, int> max_aggregate(const vector<pair<string, int>>& stdata) {\n    map<string, int> temp;\n    for (const auto& item : stdata) {\n        temp[item.first] += item.second;\n    }\n    pair<string, int> max_item = *temp.begin();\n    for (const auto& item : temp) {\n        if (item.second > max_item.second) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(compare(max_aggregate({{\"Juan Whelan\", 90}, {\"Sabah Colley\", 88}, {\"Peter Nichols\", 7}, {\"Juan Whelan\", 122}, {\"Sabah Colley\", 84}}),make_pair(\"Juan Whelan\", 212)));\n    assert(compare(max_aggregate({{\"Juan Whelan\", 50}, {\"Sabah Colley\", 48}, {\"Peter Nichols\", 37}, {\"Juan Whelan\", 22}, {\"Sabah Colley\", 14}}),make_pair(\"Juan Whelan\", 72)));\n    assert(compare(max_aggregate({{\"Juan Whelan\", 10}, {\"Sabah Colley\", 20}, {\"Peter Nichols\", 30}, {\"Juan Whelan\", 40}, {\"Sabah Colley\", 50}}),make_pair(\"Sabah Colley\", 70)));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <cassert>\nusing namespace std;\npair<string, int> max_aggregate(const vector<pair<string, int>>& stdata) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the maximum aggregate from the list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<string, int> temp;\n    for (const auto& item : stdata) {\n        temp[item.first] += item.second;\n    }\n    pair<string, int> max_item = *temp.begin();\n    for (const auto& item : temp) {\n        if (item.second > max_item.second) {\n//begin to write code\n"
    },
    {
        "task_id": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble count_binary_seq(int n) {\n    double nCr = 1;\n    double res = 1;\n    for(int r = 1; r <= n; ++r) {\n        nCr = (nCr * (n + 1 - r)) / r;\n        res += nCr * nCr;\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(count_binary_seq(1) == 2.0);\n    assert(count_binary_seq(2) == 6.0);\n    assert(count_binary_seq(3) == 20.0);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble count_binary_seq(int n) {\n    double nCr = 1;\n    double res = 1;\n    for(int r = 1; r <= n; ++r) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble count_binary_seq(int n) {\n    double nCr = 1;\n    double res = 1;\n    for(int r = 1; r <= n; ++r) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_binary_seq(1) == 2.0);\n    assert(count_binary_seq(2) == 6.0);\n    assert(count_binary_seq(3) == 20.0);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble count_binary_seq(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double nCr = 1;\n    double res = 1;\n    for(int r = 1; r <= n; ++r) {\n//begin to write code\n"
    },
    {
        "task_id": 301,
        "prompt": "Write a function to find the depth of a dictionary.",
        "code_str": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\n\nusing namespace std;\n\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n};\n\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    int get_int() const {\n        return this->value;\n    }\nprivate:\n    int value;\n};\n\nclass MapVariant : public Variant {\npublic:\n    MapVariant(const std::unordered_map<char, Variant*>& map) : map(map) {}\n    const std::unordered_map<char, Variant*>& get_map() const {\n        return this->map;\n    }\nprivate:\n    std::unordered_map<char, Variant*> map;\n};\n\nint dict_depth(const Variant* variant) {\n    if (variant == nullptr) {\n        return 0;\n    }\n\n    if (const IntVariant* intVariant = dynamic_cast<const IntVariant*>(variant)) {\n        return 0;\n    } else if (const MapVariant* mapVariant = dynamic_cast<const MapVariant*>(variant)) {\n        int max_depth = 0;\n        const auto& map = mapVariant->get_map();\n        for (const auto& pair : map) {\n            int onedepth = dict_depth(pair.second);\n            if (onedepth > max_depth) {\n                max_depth = onedepth;\n            }\n        }\n        return max_depth + 1;\n    }\n    return 0;\n}",
        "test": "int main() {\n    // Test case 1\n    unordered_map<char, Variant*> map1;\n    map1['a'] = new IntVariant(1);\n    unordered_map<char, Variant*> nestedMap1;\n    nestedMap1['d'] = new MapVariant({});\n    unordered_map<char, Variant*> nestedMap2;\n    nestedMap2['c'] = new MapVariant(nestedMap1);\n    map1['b'] = new MapVariant(nestedMap2);\n    assert(dict_depth(new MapVariant(map1)) == 4);\n\n    // Test case 2\n    unordered_map<char, Variant*> map2;\n    map2['a'] = new IntVariant(1);\n    unordered_map<char, Variant*> nestedMap3;\n    nestedMap3['c'] = new IntVariant('p');\n    map2['b'] = new MapVariant(nestedMap3);\n    assert(dict_depth(new MapVariant(map2)) == 2);\n\n    // Test case 3\n    unordered_map<char, Variant*> map3;\n    map3['1'] = new IntVariant('S');\n    unordered_map<char, Variant*> nestedMap4;\n    nestedMap4['4'] = new IntVariant('M');\n    unordered_map<char, Variant*> nestedMap5;\n    nestedMap5['3'] = new MapVariant(nestedMap4);\n    map3['2'] = new MapVariant(nestedMap5);\n    assert(dict_depth(new MapVariant(map3)) == 3);\n\n    // Clean up\n    for (auto& pair : map1) {\n        delete pair.second;\n    }\n    for (auto& pair : map2) {\n        delete pair.second;\n    }\n    for (auto& pair : map3) {\n        delete pair.second;\n    }\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    int get_int() const {\n        return this->value;\n    }\nprivate:\n    int value;\n};\nclass MapVariant : public Variant {\npublic:\n    MapVariant(const std::unordered_map<char, Variant*>& map) : map(map) {}\n    const std::unordered_map<char, Variant*>& get_map() const {\n        return this->map;\n    }\nprivate:\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the depth of a dictionary.",
        "perturbated_codes": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    int get_int() const {\n        return this->value;\n        double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    }\nprivate:\n    int value;\n};\nclass MapVariant : public Variant {\npublic:\n    MapVariant(const std::unordered_map<char, Variant*>& map) : map(map) {}\n    const std::unordered_map<char, Variant*>& get_map() const {\n        return this->map;\n    }\nprivate:\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test case 1\n    unordered_map<char, Variant*> map1;\n    map1['a'] = new IntVariant(1);\n    unordered_map<char, Variant*> nestedMap1;\n    nestedMap1['d'] = new MapVariant({});\n    unordered_map<char, Variant*> nestedMap2;\n    nestedMap2['c'] = new MapVariant(nestedMap1);\n    map1['b'] = new MapVariant(nestedMap2);\n    assert(dict_depth(new MapVariant(map1)) == 4);\n\n    // Test case 2\n    unordered_map<char, Variant*> map2;\n    map2['a'] = new IntVariant(1);\n    unordered_map<char, Variant*> nestedMap3;\n    nestedMap3['c'] = new IntVariant('p');\n    map2['b'] = new MapVariant(nestedMap3);\n    assert(dict_depth(new MapVariant(map2)) == 2);\n\n    // Test case 3\n    unordered_map<char, Variant*> map3;\n    map3['1'] = new IntVariant('S');\n    unordered_map<char, Variant*> nestedMap4;\n    nestedMap4['4'] = new IntVariant('M');\n    unordered_map<char, Variant*> nestedMap5;\n    nestedMap5['3'] = new MapVariant(nestedMap4);\n    map3['2'] = new MapVariant(nestedMap5);\n    assert(dict_depth(new MapVariant(map3)) == 3);\n\n    // Clean up\n    for (auto& pair : map1) {\n        delete pair.second;\n    }\n    for (auto& pair : map2) {\n        delete pair.second;\n    }\n    for (auto& pair : map3) {\n        delete pair.second;\n    }\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <unordered_map>\n#include <cassert>\nusing namespace std;\nclass Variant {\npublic:\n    virtual ~Variant() = default;\n};\nclass IntVariant : public Variant {\npublic:\n    IntVariant(int value) : value(value) {}\n    int get_int() const {\n        return this->value;\n    }\nprivate:\n    int value;\n};\nclass MapVariant : public Variant {\npublic:\n    MapVariant(const std::unordered_map<char, Variant*>& map) : map(map) {}\n    const std::unordered_map<char, Variant*>& get_map() const {\n        return this->map;\n    }\nprivate:\n//begin to write code\n"
    },
    {
        "task_id": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint set_Bit_Number(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int msb = 0;\n    n = n / 2;\n    while (n > 0) {\n        n = n / 2;\n        msb++;\n    }\n    return (1 << msb);\n}\n\n\n",
        "test": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(set_Bit_Number(6) == 4);\n    assert(set_Bit_Number(10) == 8);\n    assert(set_Bit_Number(18) == 16);\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint set_Bit_Number(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int msb = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the most significant bit number which is also a set bit.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint set_Bit_Number(int n) {\n    if (n == 0) {\n        return 0;\n    }\n    int msb = 0;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(set_Bit_Number(6) == 4);\n    assert(set_Bit_Number(10) == 8);\n    assert(set_Bit_Number(18) == 16);\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint set_Bit_Number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the most significant bit number which is also a set bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0) {\n        return 0;\n    }\n    int msb = 0;\n//begin to write code\n"
    },
    {
        "task_id": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
        "code_str": "#include<iostream>\n    \n\n#include <limits>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nbool solve(int a[], int n) {\n    int mx = numeric_limits<int>::min();\n    for (int j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n        }\n        mx = max(mx, a[j - 1]);\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    int arr1[] = {1, 0, 2};\n    assert(solve(arr1, 3) == true);\n\n    int arr2[] = {1, 2, 0};\n    assert(solve(arr2, 3) == false);\n\n    int arr3[] = {1, 2, 1};\n    assert(solve(arr3, 3) == true);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <limits>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool solve(int a[], int n) {\n    int mx = numeric_limits<int>::min();\n    for (int j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the count of inversion of two types are same or not.",
        "perturbated_codes": "#include<iostream>\n#include <limits>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool solve(int a[], int n) {\n    int mx = numeric_limits<int>::min();\n    for (int j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n            double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    int arr1[] = {1, 0, 2};\n    assert(solve(arr1, 3) == true);\n\n    int arr2[] = {1, 2, 0};\n    assert(solve(arr2, 3) == false);\n\n    int arr3[] = {1, 2, 1};\n    assert(solve(arr3, 3) == true);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <limits>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool solve(int a[], int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the count of inversion of two types are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mx = numeric_limits<int>::min();\n    for (int j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n//begin to write code\n"
    },
    {
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_Element(const std::vector<int>& arr, const std::vector<std::pair<int, int>>& ranges, int rotations, int index) {\n    for (int i = rotations - 1; i >= 0; --i) {\n        int left = ranges[i].first;\n        int right = ranges[i].second;\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n            } else {\n                index = index - 1;\n            }\n        }\n    }\n    return arr[index];\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(find_Element({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1) == 3);\n    assert(find_Element({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2) == 3);\n    assert(find_Element({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Element(const std::vector<int>& arr, const std::vector<std::pair<int, int>>& ranges, int rotations, int index) {\n    for (int i = rotations - 1; i >= 0; --i) {\n        int left = ranges[i].first;\n        int right = ranges[i].second;\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find element at a given index after number of rotations.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Element(const std::vector<int>& arr, const std::vector<std::pair<int, int>>& ranges, int rotations, int index) {\n    for (int i = rotations - 1; i >= 0; --i) {\n        int left = ranges[i].first;\n        int right = ranges[i].second;\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n                double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(find_Element({1, 2, 3, 4, 5}, {{0, 2}, {0, 3}}, 2, 1) == 3);\n    assert(find_Element({1, 2, 3, 4}, {{0, 1}, {0, 2}}, 1, 2) == 3);\n    assert(find_Element({1, 2, 3, 4, 5, 6}, {{0, 1}, {0, 2}}, 1, 1) == 1);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_Element(const std::vector<int>& arr, const std::vector<std::pair<int, int>>& ranges, int rotations, int index) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find element at a given index after number of rotations.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = rotations - 1; i >= 0; --i) {\n        int left = ranges[i].first;\n        int right = ranges[i].second;\n        if (left <= index && right >= index) {\n            if (index == left) {\n                index = right;\n//begin to write code\n"
    },
    {
        "task_id": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\npair<string, string> start_withp(vector<string> words) {\n    regex pattern(\"(P\\\\\\w+)\\\\\\W(P\\\\\\w+)\");\n    for (const auto &w : words) {\n        smatch match;\n        if (regex_search(w, match, pattern)) {\n            return {match[1], match[2]};\n        }\n    }\n    return {};\n}\n\nbool compare(pair<string,string> r1,pair<string,string> r2)\n{\n    return r1.first == r2.first && r1.second == r2.second;\n}",
        "test": "int main()\n{\n    assert(compare(start_withp({\"Python PHP\", \"Java JavaScript\", \"c c++\"}),make_pair(\"Python\", \"PHP\")));\n    assert(compare(start_withp({\"Python Programming\", \"Java Programming\"}),make_pair(\"Python\", \"Programming\")));\n    assert(compare(start_withp({\"Pqrst Pqr\", \"qrstuv\"}) , make_pair(\"Pqrst\", \"Pqr\")));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\npair<string, string> start_withp(vector<string> words) {\n    regex pattern(\"(P\\\\\\w+)\\\\\\W(P\\\\\\w+)\");\n    for (const auto &w : words) {\n        smatch match;\n        if (regex_search(w, match, pattern)) {\n            return {match[1], match[2]};\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\npair<string, string> start_withp(vector<string> words) {\n    regex pattern(\"(P\\\\\\w+)\\\\\\W(P\\\\\\w+)\");\n    for (const auto &w : words) {\n        smatch match;\n        if (regex_search(w, match, pattern)) {\n            return {match[1], match[2]};\n        }\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(compare(start_withp({\"Python PHP\", \"Java JavaScript\", \"c c++\"}),make_pair(\"Python\", \"PHP\")));\n    assert(compare(start_withp({\"Python Programming\", \"Java Programming\"}),make_pair(\"Python\", \"Programming\")));\n    assert(compare(start_withp({\"Pqrst Pqr\", \"qrstuv\"}) , make_pair(\"Pqrst\", \"Pqr\")));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\npair<string, string> start_withp(vector<string> words) {\n\n    /*\n    progame language:cpp\n    description:Write a function to match two words from a list of words starting with letter 'p'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"(P\\\\\\w+)\\\\\\W(P\\\\\\w+)\");\n    for (const auto &w : words) {\n        smatch match;\n        if (regex_search(w, match, pattern)) {\n            return {match[1], match[2]};\n        }\n//begin to write code\n"
    },
    {
        "task_id": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint max_sum_increasing_subseq(vector<int> a, int n, int index, int k) {\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; ++i) {\n        if (a[i] > a[0]) {\n            dp[0][i] = a[i] + a[0];\n        } else {\n            dp[0][i] = a[i];\n        }\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (a[j] > a[i] && j > i) {\n                if (dp[i - 1][i] + a[j] > dp[i - 1][j]) {\n                    dp[i][j] = dp[i - 1][i] + a[j];\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[index][k];\n}\n\n\n",
        "test": "int main()\n{\n    assert(max_sum_increasing_subseq({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6) == 11);\n    assert(max_sum_increasing_subseq({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5) == 7);\n    assert(max_sum_increasing_subseq({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4) == 71);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sum_increasing_subseq(vector<int> a, int n, int index, int k) {\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; ++i) {\n        if (a[i] > a[0]) {\n            dp[0][i] = a[i] + a[0];\n        } else {\n            dp[0][i] = a[i];\n        }\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (a[j] > a[i] && j > i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sum_increasing_subseq(vector<int> a, int n, int index, int k) {\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; ++i) {\n        if (a[i] > a[0]) {\n            dp[0][i] = a[i] + a[0];\n        } else {\n            dp[0][i] = a[i];\n        }\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (a[j] > a[i] && j > i) {\n            double temp_var_8 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(max_sum_increasing_subseq({1, 101, 2, 3, 100, 4, 5}, 7, 4, 6) == 11);\n    assert(max_sum_increasing_subseq({1, 101, 2, 3, 100, 4, 5}, 7, 2, 5) == 7);\n    assert(max_sum_increasing_subseq({11, 15, 19, 21, 26, 28, 31}, 7, 2, 4) == 71);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_sum_increasing_subseq(vector<int> a, int n, int index, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> dp(n, vector<int>(n, 0));\n    for (int i = 0; i < n; ++i) {\n        if (a[i] > a[0]) {\n            dp[0][i] = a[i] + a[0];\n        } else {\n            dp[0][i] = a[i];\n        }\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < n; ++j) {\n            if (a[j] > a[i] && j > i) {\n//begin to write code\n"
    },
    {
        "task_id": 307,
        "prompt": "Write a function to get a colon of a tuple.",
        "code_str": "\n#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\n\nstd::tuple<std::string, int, std::vector<int>, bool> colon_tuplex(std::tuple<std::string, int, std::vector<int>, bool> tuplex, int m, int n) {\n    std::tuple<std::string, int, std::vector<int>, bool> tuplex_colon = tuplex;\n    std::get<2>(tuplex_colon).push_back(n);\n    return tuplex_colon;\n}\n\n\n",
        "test": "int main() {\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 50) == std::make_tuple(\"HELLO\", 5, std::vector<int>{50}, true));\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 100) == std::make_tuple(\"HELLO\", 5, std::vector<int>{100}, true));\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 500) == std::make_tuple(\"HELLO\", 5, std::vector<int>{500}, true));\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\nstd::tuple<std::string, int, std::vector<int>, bool> colon_tuplex(std::tuple<std::string, int, std::vector<int>, bool> tuplex, int m, int n) {\n    std::tuple<std::string, int, std::vector<int>, bool> tuplex_colon = tuplex;\n//begin to write code\n",
        "cpp_prompt": "Write a function to get a colon of a tuple.",
        "perturbated_codes": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\nstd::tuple<std::string, int, std::vector<int>, bool> colon_tuplex(std::tuple<std::string, int, std::vector<int>, bool> tuplex, int m, int n) {\ndouble temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    std::tuple<std::string, int, std::vector<int>, bool> tuplex_colon = tuplex;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 50) == std::make_tuple(\"HELLO\", 5, std::vector<int>{50}, true));\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 100) == std::make_tuple(\"HELLO\", 5, std::vector<int>{100}, true));\n    assert(colon_tuplex(std::make_tuple(\"HELLO\", 5, std::vector<int>{}, true), 2, 500) == std::make_tuple(\"HELLO\", 5, std::vector<int>{500}, true));\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <vector>\n#include <cassert>\nstd::tuple<std::string, int, std::vector<int>, bool> colon_tuplex(std::tuple<std::string, int, std::vector<int>, bool> tuplex, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get a colon of a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::tuple<std::string, int, std::vector<int>, bool> tuplex_colon = tuplex;\n//begin to write code\n"
    },
    {
        "task_id": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> large_product(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n        }\n    }\n    std::sort(products.begin(), products.end(), std::greater<int>());\n    std::vector<int> result(products.begin(), products.begin() + N);\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3) == std::vector<int>({60, 54, 50}));\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4) == std::vector<int>({60, 54, 50, 48}));\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5) == std::vector<int>({60, 54, 50, 48, 45}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> large_product(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the specified number of largest products from two given lists.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> large_product(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n            double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 3) == std::vector<int>({60, 54, 50}));\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 4) == std::vector<int>({60, 54, 50, 48}));\n    assert(large_product({1, 2, 3, 4, 5, 6}, {3, 6, 8, 9, 10, 6}, 5) == std::vector<int>({60, 54, 50, 48, 45}));\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> large_product(const std::vector<int>& nums1, const std::vector<int>& nums2, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the specified number of largest products from two given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> products;\n    for (int x : nums1) {\n        for (int y : nums2) {\n            products.push_back(x * y);\n//begin to write code\n"
    },
    {
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(maximum(5,10) == 10);\n    assert(maximum(-1,-2) == -1);\n    assert(maximum(9,7) == 9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum of two numbers.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n    if (a >= b) {\n        return a;\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(maximum(5,10) == 10);\n    assert(maximum(-1,-2) == -1);\n    assert(maximum(9,7) == 9);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint maximum(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a >= b) {\n        return a;\n//begin to write code\n"
    },
    {
        "task_id": 310,
        "prompt": "Write a function to convert a given string to a tuple.",
        "code_str": "#include<iostream>\n    \n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\n\nvector<char> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n        {\n            ret.push_back(v);\n        }\n        \n    }\n    return ret;\n}",
        "test": "int main()\n{\n    assert((string_to_tuple(\"python 3.0\") == vector<char>{'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'}));\n    assert((string_to_tuple(\"item1\") == vector<char>{'i', 't', 'e', 'm', '1'}));\n    assert((string_to_tuple(\"15.10\") == vector<char>{'1', '5', '.', '1', '0'}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert a given string to a tuple.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> string_to_tuple(const string &str1) {\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((string_to_tuple(\"python 3.0\") == vector<char>{'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'}));\n    assert((string_to_tuple(\"item1\") == vector<char>{'i', 't', 'e', 'm', '1'}));\n    assert((string_to_tuple(\"15.10\") == vector<char>{'1', '5', '.', '1', '0'}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\n#include <vector>\n#include <cctype>\nusing namespace std;\nvector<char> string_to_tuple(const string &str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<char> ret;\n    for(char v:str1)\n    {   \n        if(!isspace(v))\n//begin to write code\n"
    },
    {
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.",
        "code_str": "#include<cassert>\n#include<iostream>\n\nint set_left_most_unset_bit(int n) {\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    int pos = 0, temp = n, count = 0;\n    while (temp) {\n        if (!(temp & 1)) {\n            pos = count;\n        }\n        count++;\n        temp >>= 1;\n    }\n    return (n | (1 << pos));\n}\n\n\n",
        "test": "int main() {\n    assert(set_left_most_unset_bit(10) == 14);\n    assert(set_left_most_unset_bit(12) == 14);\n    assert(set_left_most_unset_bit(15) == 15);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\nint set_left_most_unset_bit(int n) {\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    int pos = 0, temp = n, count = 0;\n    while (temp) {\n        if (!(temp & 1)) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to set the left most unset bit.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\nint set_left_most_unset_bit(int n) {\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    int pos = 0, temp = n, count = 0;\n    while (temp) {\n        if (!(temp & 1)) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(set_left_most_unset_bit(10) == 14);\n    assert(set_left_most_unset_bit(12) == 14);\n    assert(set_left_most_unset_bit(15) == 15);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\nint set_left_most_unset_bit(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to set the left most unset bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    int pos = 0, temp = n, count = 0;\n    while (temp) {\n        if (!(temp & 1)) {\n//begin to write code\n"
    },
    {
        "task_id": 312,
        "prompt": "Write a function to find the volume of a cone.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble volume_cone(double r, double h) {\n    double volume = (1.0/3) * M_PI * r * r * h;\n    return volume;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(volume_cone(5, 12) - 314.15926535897927) < 1e-9);\n    assert(abs(volume_cone(10, 15) - 1570.7963267948965) < 1e-9);\n    assert(abs(volume_cone(19, 17) - 6426.651371693521) < 1e-9);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_cone(double r, double h) {\n    double volume = (1.0/3) * M_PI * r * r * h;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the volume of a cone.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_cone(double r, double h) {\ndouble temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    double volume = (1.0/3) * M_PI * r * r * h;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(volume_cone(5, 12) - 314.15926535897927) < 1e-9);\n    assert(abs(volume_cone(10, 15) - 1570.7963267948965) < 1e-9);\n    assert(abs(volume_cone(19, 17) - 6426.651371693521) < 1e-9);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble volume_cone(double r, double h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cone.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double volume = (1.0/3) * M_PI * r * r * h;\n//begin to write code\n"
    },
    {
        "task_id": 313,
        "prompt": "Write a python function to print positive numbers in a list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n            result.push_back(num);\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    {\n        std::vector<int> result = pos_nos({-1, -2, 1, 2});\n        std::vector<int> expected = {1, 2};\n        assert(result == expected);\n    }\n\n    {\n        std::vector<int> result = pos_nos({3, 4, -5});\n        std::vector<int> expected = {3, 4};\n        assert(result == expected);\n    }\n\n    {\n        std::vector<int> result = pos_nos({-2, -3, 1});\n        std::vector<int> expected = {1};\n        assert(result == expected);\n    }\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to print positive numbers in a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    {\n        std::vector<int> result = pos_nos({-1, -2, 1, 2});\n        std::vector<int> expected = {1, 2};\n        assert(result == expected);\n    }\n\n    {\n        std::vector<int> result = pos_nos({3, 4, -5});\n        std::vector<int> expected = {3, 4};\n        assert(result == expected);\n    }\n\n    {\n        std::vector<int> result = pos_nos({-2, -3, 1});\n        std::vector<int> expected = {1};\n        assert(result == expected);\n    }\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> pos_nos(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (int num : list1) {\n        if (num >= 0) {\n//begin to write code\n"
    },
    {
        "task_id": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_sum_rectangular_grid(vector<vector<int>>& grid, int n) {\n    int incl = max(grid[0][0], grid[1][0]);\n    int excl = 0;\n    for (int i = 1; i < n; ++i) {\n        int excl_new = max(excl, incl);\n        incl = excl + max(grid[0][i], grid[1][i]);\n        excl = excl_new;\n    }\n    return max(excl, incl);\n}\n\n\n",
        "test": "int main()\n{\n    vector<vector<int>> grid1 = {{1, 4, 5}, {2, 0, 0}};\n    vector<vector<int>> grid2 = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};\n    vector<vector<int>> grid3 = {{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}};\n\n    assert(max_sum_rectangular_grid(grid1, 3) == 7);\n    assert(max_sum_rectangular_grid(grid2, 5) == 24);\n    assert(max_sum_rectangular_grid(grid3, 5) == 81);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_sum_rectangular_grid(vector<vector<int>>& grid, int n) {\n    int incl = max(grid[0][0], grid[1][0]);\n    int excl = 0;\n    for (int i = 1; i < n; ++i) {\n        int excl_new = max(excl, incl);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_sum_rectangular_grid(vector<vector<int>>& grid, int n) {\n    int incl = max(grid[0][0], grid[1][0]);\n    int excl = 0;\n    for (int i = 1; i < n; ++i) {\n        int excl_new = max(excl, incl);\n        double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<vector<int>> grid1 = {{1, 4, 5}, {2, 0, 0}};\n    vector<vector<int>> grid2 = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}};\n    vector<vector<int>> grid3 = {{7, 9, 11, 15, 19}, {21, 25, 28, 31, 32}};\n\n    assert(max_sum_rectangular_grid(grid1, 3) == 7);\n    assert(max_sum_rectangular_grid(grid2, 5) == 24);\n    assert(max_sum_rectangular_grid(grid3, 5) == 81);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_sum_rectangular_grid(vector<vector<int>>& grid, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int incl = max(grid[0][0], grid[1][0]);\n    int excl = 0;\n    for (int i = 1; i < n; ++i) {\n        int excl_new = max(excl, incl);\n//begin to write code\n"
    },
    {
        "task_id": 315,
        "prompt": "Write a python function to find the first maximum length of even word.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string find_Max_Len_Even(const std::string& str) {\n    int n = str.length();\n    int i = 0;\n    int currlen = 0;\n    int maxlen = 0;\n    int st = -1;\n\n    while (i < n) {\n        if (str[i] == ' ') {\n            if (currlen % 2 == 0) {\n                if (maxlen < currlen) {\n                    maxlen = currlen;\n                    st = i - currlen;\n                }\n            }\n            currlen = 0;\n        } else {\n            currlen += 1;\n        }\n        i += 1;\n    }\n\n    if (currlen % 2 == 0) {\n        if (maxlen < currlen) {\n            maxlen = currlen;\n            st = i - currlen;\n        }\n    }\n    \n    if (st == -1) {\n        return \"-1\";\n    }\n\n    return str.substr(st, maxlen);\n}\n\n\n",
        "test": "int main() {\n    assert(find_Max_Len_Even(\"python language\") == \"language\");\n    assert(find_Max_Len_Even(\"maximum even length\") == \"length\");\n    assert(find_Max_Len_Even(\"eve\") == \"-1\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_Max_Len_Even(const std::string& str) {\n    int n = str.length();\n    int i = 0;\n    int currlen = 0;\n    int maxlen = 0;\n    int st = -1;\n    while (i < n) {\n        if (str[i] == ' ') {\n            if (currlen % 2 == 0) {\n                if (maxlen < currlen) {\n                    maxlen = currlen;\n                    st = i - currlen;\n                }\n            }\n            currlen = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first maximum length of even word.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_Max_Len_Even(const std::string& str) {\n    int n = str.length();\n    int i = 0;\n    int currlen = 0;\n    int maxlen = 0;\n    int st = -1;\n    while (i < n) {\n        if (str[i] == ' ') {\n            if (currlen % 2 == 0) {\n                if (maxlen < currlen) {\n                    maxlen = currlen;\n                    st = i - currlen;\n                }\n            }\n            currlen = 0;\n            double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_Max_Len_Even(\"python language\") == \"language\");\n    assert(find_Max_Len_Even(\"maximum even length\") == \"length\");\n    assert(find_Max_Len_Even(\"eve\") == \"-1\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_Max_Len_Even(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first maximum length of even word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = str.length();\n    int i = 0;\n    int currlen = 0;\n    int maxlen = 0;\n    int st = -1;\n    while (i < n) {\n        if (str[i] == ' ') {\n            if (currlen % 2 == 0) {\n                if (maxlen < currlen) {\n                    maxlen = currlen;\n                    st = i - currlen;\n                }\n            }\n            currlen = 0;\n//begin to write code\n"
    },
    {
        "task_id": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_last_occurrence(const std::vector<int>& A, int x) {\n    int left = 0;\n    int right = A.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            left = mid + 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_last_occurrence({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 3);\n    assert(find_last_occurrence({2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9) == 9);\n    assert(find_last_occurrence({2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6) == 6);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_last_occurrence(const std::vector<int>& A, int x) {\n    int left = 0;\n    int right = A.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_last_occurrence(const std::vector<int>& A, int x) {\n    int left = 0;\n    int right = A.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n            double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_last_occurrence({2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 3);\n    assert(find_last_occurrence({2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9) == 9);\n    assert(find_last_occurrence({2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6) == 6);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_last_occurrence(const std::vector<int>& A, int x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the index of the last occurrence of a given number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int left = 0;\n    int right = A.size() - 1;\n    int result = -1;\n    while (left <= right) {\n        int mid = (left + right) / 2;\n        if (x == A[mid]) {\n            result = mid;\n//begin to write code\n"
    },
    {
        "task_id": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\n// \u57fa\u7c7b\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual Element* clone() const = 0;\n    virtual void print() const = 0;\n    virtual bool isSameType(const Element& other) const = 0;\n    virtual bool isInt() const = 0;\n    virtual bool isChar() const = 0;\n    virtual int getIntValue() const = 0;\n    virtual char getCharValue() const = 0;\n};\n\n// \u5904\u7406 char \u7c7b\u578b\u7684\u5b50\u7c7b\nclass CharElement : public Element {\npublic:\n    CharElement(char value) : value_(value) {}\n    Element* clone() const override {\n        return new CharElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Char: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isChar();\n    }\n    bool isInt() const override { return false; }\n    bool isChar() const override { return true; }\n    int getIntValue() const override {\n         return 0; \n    }\n    char getCharValue() const override { return value_; }\nprivate:\n    char value_;\n};\n\n// \u5904\u7406 int \u7c7b\u578b\u7684\u5b50\u7c7b\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    Element* clone() const override {\n        return new IntElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Int: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isInt();\n    }\n    bool isInt() const override { return true; }\n    bool isChar() const override { return false; }\n    int getIntValue() const override { return value_; }\n    char getCharValue() const override { \n       return 0; \n   }\nprivate:\n    int value_;\n};\n\n// \u51fd\u6570\u63a5\u53d7\u4e00\u4e2a\u5305\u542b\u4e0d\u540c\u7c7b\u578b\u5143\u7d20\u7684 vector\nstd::vector<Element*> modified_encode(const std::vector<Element*>& elements) {\n    std::vector<Element*> result;\n    size_t i = 0;\n    while (i < elements.size()) {\n        size_t count = 1;\n        while (i + count < elements.size() && elements[i]->isSameType(*elements[i + count]) &&\n               ((elements[i]->isInt() && elements[i]->getIntValue() == elements[i + count]->getIntValue()) ||\n                (elements[i]->isChar() && elements[i]->getCharValue() == elements[i + count]->getCharValue()))) {\n            ++count;\n        }\n        if (count > 1) {\n            if (elements[i]->isInt()) {\n                result.push_back(new IntElement(count));\n                result.push_back(new IntElement(elements[i]->getIntValue()));\n            } else if (elements[i]->isChar()) {\n                result.push_back(new IntElement(count));\n                result.push_back(new CharElement(elements[i]->getCharValue()));\n            }\n        } else {\n            result.push_back(elements[i]->clone());\n        }\n        i += count;\n    }\n    return result;\n}\n\n// \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a vector\nbool compareVectors(const std::vector<Element*>& vec1, const std::vector<Element*>& vec2) {\n    if (vec1.size() != vec2.size()) return false;\n    for (size_t i = 0; i < vec1.size(); ++i) {\n        if (vec1[i]->isInt() && vec2[i]->isInt()) {\n            if (vec1[i]->getIntValue() != vec2[i]->getIntValue()) return false;\n        } else if (vec1[i]->isChar() && vec2[i]->isChar()) {\n            if (vec1[i]->getCharValue() != vec2[i]->getCharValue()) return false;\n        } else {\n            return false;\n        }\n    }\n    return true;\n}\n\n// \u8f85\u52a9\u51fd\u6570\uff0c\u7528\u4e8e\u6253\u5370 vector\nvoid printVector(const std::vector<Element*>& vec) {\n    for (const auto& element : vec) {\n        element->print();\n    }\n}",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b 1\n    std::vector<Element*> elements1;\n    elements1.push_back(new IntElement(1));\n    elements1.push_back(new IntElement(1));\n    elements1.push_back(new IntElement(2));\n    elements1.push_back(new IntElement(3));\n    elements1.push_back(new IntElement(4));\n    elements1.push_back(new IntElement(4));\n    elements1.push_back(new IntElement(5));\n    elements1.push_back(new IntElement(1));\n\n    std::vector<Element*> expected1;\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(1));\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(3));\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(4));\n    expected1.push_back(new IntElement(5));\n    expected1.push_back(new IntElement(1));\n\n    auto result1 = modified_encode(elements1);\n    assert(compareVectors(result1, expected1));\n\n    // \u6d4b\u8bd5\u7528\u4f8b 2\n    std::vector<Element*> elements2;\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('u'));\n    elements2.push_back(new CharElement('t'));\n    elements2.push_back(new CharElement('o'));\n    elements2.push_back(new CharElement('m'));\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('t'));\n    elements2.push_back(new CharElement('i'));\n    elements2.push_back(new CharElement('c'));\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('l'));\n    elements2.push_back(new CharElement('l'));\n    elements2.push_back(new CharElement('y'));\n\n    std::vector<Element*> expected2;\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new CharElement('u'));\n    expected2.push_back(new CharElement('t'));\n    expected2.push_back(new CharElement('o'));\n    expected2.push_back(new CharElement('m'));\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new CharElement('t'));\n    expected2.push_back(new CharElement('i'));\n    expected2.push_back(new CharElement('c'));\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new IntElement(2));\n    expected2.push_back(new CharElement('l'));\n    expected2.push_back(new CharElement('y'));\n\n    auto result2 = modified_encode(elements2);\n    assert(compareVectors(result2, expected2));\n\n    // \u6d4b\u8bd5\u7528\u4f8b 3\n    std::vector<Element*> elements3;\n    elements3.push_back(new CharElement('p'));\n    elements3.push_back(new CharElement('y'));\n    elements3.push_back(new CharElement('t'));\n    elements3.push_back(new CharElement('h'));\n    elements3.push_back(new CharElement('o'));\n    elements3.push_back(new CharElement('n'));\n\n    std::vector<Element*> expected3;\n    expected3.push_back(new CharElement('p'));\n    expected3.push_back(new CharElement('y'));\n    expected3.push_back(new CharElement('t'));\n    expected3.push_back(new CharElement('h'));\n    expected3.push_back(new CharElement('o'));\n    expected3.push_back(new CharElement('n'));\n\n    auto result3 = modified_encode(elements3);\n    assert(compareVectors(result3, expected3));\n\n    // \u91ca\u653e\u5185\u5b58\n    for (auto& element : elements1) delete element;\n    for (auto& element : expected1) delete element;\n    for (auto& element : result1) delete element;\n    for (auto& element : elements2) delete element;\n    for (auto& element : expected2) delete element;\n    for (auto& element : result2) delete element;\n    for (auto& element : elements3) delete element;\n    for (auto& element : expected3) delete element;\n    for (auto& element : result3) delete element;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u57fa\u7c7b\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual Element* clone() const = 0;\n    virtual void print() const = 0;\n    virtual bool isSameType(const Element& other) const = 0;\n    virtual bool isInt() const = 0;\n    virtual bool isChar() const = 0;\n    virtual int getIntValue() const = 0;\n    virtual char getCharValue() const = 0;\n};\n// \u5904\u7406 char \u7c7b\u578b\u7684\u5b50\u7c7b\nclass CharElement : public Element {\npublic:\n    CharElement(char value) : value_(value) {}\n    Element* clone() const override {\n        return new CharElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Char: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isChar();\n    }\n    bool isInt() const override { return false; }\n    bool isChar() const override { return true; }\n    int getIntValue() const override {\n         return 0; \n    }\n    char getCharValue() const override { return value_; }\nprivate:\n    char value_;\n};\n// \u5904\u7406 int \u7c7b\u578b\u7684\u5b50\u7c7b\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    Element* clone() const override {\n        return new IntElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Int: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isInt();\n    }\n    bool isInt() const override { return true; }\n    bool isChar() const override { return false; }\n    int getIntValue() const override { return value_; }\n    char getCharValue() const override { \n//begin to write code\n",
        "cpp_prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u57fa\u7c7b\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual Element* clone() const = 0;\n    virtual void print() const = 0;\n    virtual bool isSameType(const Element& other) const = 0;\n    virtual bool isInt() const = 0;\n    virtual bool isChar() const = 0;\n    virtual int getIntValue() const = 0;\n    virtual char getCharValue() const = 0;\n};\n// \u5904\u7406 char \u7c7b\u578b\u7684\u5b50\u7c7b\nclass CharElement : public Element {\npublic:\n    CharElement(char value) : value_(value) {}\n    Element* clone() const override {\n        return new CharElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Char: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isChar();\n    }\n    bool isInt() const override { return false; }\n    bool isChar() const override { return true; }\n    int getIntValue() const override {\n         return 0; \n    }\n    char getCharValue() const override { return value_; }\nprivate:\n    char value_;\n};\n// \u5904\u7406 int \u7c7b\u578b\u7684\u5b50\u7c7b\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    Element* clone() const override {\n        return new IntElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Int: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isInt();\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    bool isInt() const override { return true; }\n    bool isChar() const override { return false; }\n    int getIntValue() const override { return value_; }\n    char getCharValue() const override { \n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b 1\n    std::vector<Element*> elements1;\n    elements1.push_back(new IntElement(1));\n    elements1.push_back(new IntElement(1));\n    elements1.push_back(new IntElement(2));\n    elements1.push_back(new IntElement(3));\n    elements1.push_back(new IntElement(4));\n    elements1.push_back(new IntElement(4));\n    elements1.push_back(new IntElement(5));\n    elements1.push_back(new IntElement(1));\n\n    std::vector<Element*> expected1;\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(1));\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(3));\n    expected1.push_back(new IntElement(2));\n    expected1.push_back(new IntElement(4));\n    expected1.push_back(new IntElement(5));\n    expected1.push_back(new IntElement(1));\n\n    auto result1 = modified_encode(elements1);\n    assert(compareVectors(result1, expected1));\n\n    // \u6d4b\u8bd5\u7528\u4f8b 2\n    std::vector<Element*> elements2;\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('u'));\n    elements2.push_back(new CharElement('t'));\n    elements2.push_back(new CharElement('o'));\n    elements2.push_back(new CharElement('m'));\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('t'));\n    elements2.push_back(new CharElement('i'));\n    elements2.push_back(new CharElement('c'));\n    elements2.push_back(new CharElement('a'));\n    elements2.push_back(new CharElement('l'));\n    elements2.push_back(new CharElement('l'));\n    elements2.push_back(new CharElement('y'));\n\n    std::vector<Element*> expected2;\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new CharElement('u'));\n    expected2.push_back(new CharElement('t'));\n    expected2.push_back(new CharElement('o'));\n    expected2.push_back(new CharElement('m'));\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new CharElement('t'));\n    expected2.push_back(new CharElement('i'));\n    expected2.push_back(new CharElement('c'));\n    expected2.push_back(new CharElement('a'));\n    expected2.push_back(new IntElement(2));\n    expected2.push_back(new CharElement('l'));\n    expected2.push_back(new CharElement('y'));\n\n    auto result2 = modified_encode(elements2);\n    assert(compareVectors(result2, expected2));\n\n    // \u6d4b\u8bd5\u7528\u4f8b 3\n    std::vector<Element*> elements3;\n    elements3.push_back(new CharElement('p'));\n    elements3.push_back(new CharElement('y'));\n    elements3.push_back(new CharElement('t'));\n    elements3.push_back(new CharElement('h'));\n    elements3.push_back(new CharElement('o'));\n    elements3.push_back(new CharElement('n'));\n\n    std::vector<Element*> expected3;\n    expected3.push_back(new CharElement('p'));\n    expected3.push_back(new CharElement('y'));\n    expected3.push_back(new CharElement('t'));\n    expected3.push_back(new CharElement('h'));\n    expected3.push_back(new CharElement('o'));\n    expected3.push_back(new CharElement('n'));\n\n    auto result3 = modified_encode(elements3);\n    assert(compareVectors(result3, expected3));\n\n    // \u91ca\u653e\u5185\u5b58\n    for (auto& element : elements1) delete element;\n    for (auto& element : expected1) delete element;\n    for (auto& element : result1) delete element;\n    for (auto& element : elements2) delete element;\n    for (auto& element : expected2) delete element;\n    for (auto& element : result2) delete element;\n    for (auto& element : elements3) delete element;\n    for (auto& element : expected3) delete element;\n    for (auto& element : result3) delete element;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n// \u57fa\u7c7b\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual Element* clone() const = 0;\n    virtual void print() const = 0;\n    virtual bool isSameType(const Element& other) const = 0;\n    virtual bool isInt() const = 0;\n    virtual bool isChar() const = 0;\n    virtual int getIntValue() const = 0;\n    virtual char getCharValue() const = 0;\n};\n// \u5904\u7406 char \u7c7b\u578b\u7684\u5b50\u7c7b\nclass CharElement : public Element {\npublic:\n    CharElement(char value) : value_(value) {}\n    Element* clone() const override {\n        return new CharElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Char: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isChar();\n    }\n    bool isInt() const override { return false; }\n    bool isChar() const override { return true; }\n    int getIntValue() const override {\n         return 0; \n    }\n    char getCharValue() const override { return value_; }\nprivate:\n    char value_;\n};\n// \u5904\u7406 int \u7c7b\u578b\u7684\u5b50\u7c7b\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    Element* clone() const override {\n        return new IntElement(*this);\n    }\n    void print() const override {\n        std::cout << \"Int: \" << value_ << std::endl;\n    }\n    bool isSameType(const Element& other) const override {\n        return other.isInt();\n    }\n    bool isInt() const override { return true; }\n    bool isChar() const override { return false; }\n    int getIntValue() const override { return value_; }\n    char getCharValue() const override { \n//begin to write code\n"
    },
    {
        "task_id": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n            maxvalue = max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n\n",
        "test": "int main() {\n    assert(max_volume(8) == 18);\n    assert(max_volume(4) == 2);\n    assert(max_volume(1) == 0);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum volume of a cuboid with given sum of sides.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_volume(8) == 18);\n    assert(max_volume(4) == 2);\n    assert(max_volume(1) == 0);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nint max_volume(int s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxvalue = 0;\n    for(int i = 1; i < s; ++i) {\n        for(int j = 1; j < s; ++j) {\n            int k = s - i - j;\n//begin to write code\n"
    },
    {
        "task_id": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        words.push_back((*i).str());\n    }\n    return words;\n}",
        "test": "int main() {\n    vector<string> result1 = find_long_word(\"Please move back to strem\");\n    assert((result1.size() == 1) && (result1[0] == \"strem\"));\n\n    vector<string> result2 = find_long_word(\"4K Ultra HD streaming player\");\n    assert((result2.size() == 1) && (result2[0] == \"Ultra\"));\n\n    vector<string> result3 = find_long_word(\"Streaming Media Player\");\n    assert((result3.size() == 1) && (result3[0] == \"Media\"));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<string> result1 = find_long_word(\"Please move back to strem\");\n    assert((result1.size() == 1) && (result1[0] == \"strem\"));\n\n    vector<string> result2 = find_long_word(\"4K Ultra HD streaming player\");\n    assert((result2.size() == 1) && (result2[0] == \"Ultra\"));\n\n    vector<string> result3 = find_long_word(\"Streaming Media Player\");\n    assert((result3.size() == 1) && (result3[0] == \"Media\"));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<string> find_long_word(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex word_regex(R\"(\\b\\w{5}\\b)\");\n    vector<string> words;\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n//begin to write code\n"
    },
    {
        "task_id": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint sum_difference(int n) {\n    int sumofsquares = 0;\n    int squareofsum = 0;\n    for (int num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n        squareofsum += num;\n    }\n    squareofsum = squareofsum * squareofsum;\n    return squareofsum - sumofsquares;\n}\n\n\n",
        "test": "int main() {\n    assert(sum_difference(12) == 5434);\n    assert(sum_difference(20) == 41230);\n    assert(sum_difference(54) == 2151270);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint sum_difference(int n) {\n    int sumofsquares = 0;\n    int squareofsum = 0;\n    for (int num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint sum_difference(int n) {\n    int sumofsquares = 0;\n    int squareofsum = 0;\n    for (int num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_difference(12) == 5434);\n    assert(sum_difference(20) == 41230);\n    assert(sum_difference(54) == 2151270);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_difference(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sumofsquares = 0;\n    int squareofsum = 0;\n    for (int num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n//begin to write code\n"
    },
    {
        "task_id": 321,
        "prompt": "Write a function to find the demlo number for the given number.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string find_demlo(const std::string& s) {\n    int l = s.size();\n    std::string res = \"\";\n    for (int i = 1; i <= l; ++i) {\n        res += std::to_string(i);\n    }\n    for (int i = l-1; i > 0; --i) {\n        res += std::to_string(i);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(find_demlo(\"111111\") == \"12345654321\");\n    assert(find_demlo(\"1111\") == \"1234321\");\n    assert(find_demlo(\"13333122222\") == \"123456789101110987654321\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_demlo(const std::string& s) {\n    int l = s.size();\n    std::string res = \"\";\n    for (int i = 1; i <= l; ++i) {\n        res += std::to_string(i);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the demlo number for the given number.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_demlo(const std::string& s) {\n    int l = s.size();\n    std::string res = \"\";\n    for (int i = 1; i <= l; ++i) {\n        res += std::to_string(i);\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_demlo(\"111111\") == \"12345654321\");\n    assert(find_demlo(\"1111\") == \"1234321\");\n    assert(find_demlo(\"13333122222\") == \"123456789101110987654321\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string find_demlo(const std::string& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the demlo number for the given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = s.size();\n    std::string res = \"\";\n    for (int i = 1; i <= l; ++i) {\n        res += std::to_string(i);\n//begin to write code\n"
    },
    {
        "task_id": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n            min_result.push_back(i);\n        }\n    }\n    return min_result;\n}\n\n\n",
        "test": "int main() {\n    assert((position_min({12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54}) == std::vector<int>{3, 11}));\n    assert((position_min({1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5}) == std::vector<int>{0}));\n    assert((position_min({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}) == std::vector<int>{1}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((position_min({12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54}) == std::vector<int>{3, 11}));\n    assert((position_min({1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5}) == std::vector<int>{0}));\n    assert((position_min({2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12}) == std::vector<int>{1}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<int> position_min(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = *std::min_element(list1.begin(), list1.end());\n    std::vector<int> min_result;\n    for (int i = 0; i < list1.size(); i++) {\n        if (list1[i] == min_val) {\n//begin to write code\n"
    },
    {
        "task_id": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nvoid right_rotate(std::vector<int>& arr, int n, int out_of_place, int cur) {\n    int temp = arr[cur];\n    for (int i = cur; i > out_of_place; --i) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n}\n\nstd::vector<int> re_arrange(std::vector<int>& arr, int n) {\n    int out_of_place = -1;\n    for (int index = 0; index < n; ++index) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) ||\n                (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                right_rotate(arr, n, out_of_place, index);\n                if (index - out_of_place > 2) {\n                    out_of_place += 2;\n                } else {\n                    out_of_place = -1;\n                }\n            }\n        }\n        if (out_of_place == -1) {\n            if ((arr[index] >= 0 && index % 2 == 0) ||\n                (arr[index] < 0 && index % 2 == 1)) {\n                out_of_place = index;\n            }\n        }\n    }\n    return arr;\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<int> arr1 = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8};\n    std::vector<int> arr2 = {1, 2, 3, -4, -1, 4};\n    std::vector<int> arr3 = {4, 7, 9, 77, -4, 5, -3, -9};\n    assert(re_arrange(arr1, 10) == std::vector<int>({-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}));\n    assert(re_arrange(arr2, 6) == std::vector<int>({-4, 1, -1, 2, 3, 4}));\n    assert(re_arrange(arr3, 8) == std::vector<int>({-4, 4, -3, 7, -9, 9, 77, 5}));\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid right_rotate(std::vector<int>& arr, int n, int out_of_place, int cur) {\n    int temp = arr[cur];\n    for (int i = cur; i > out_of_place; --i) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n}\nstd::vector<int> re_arrange(std::vector<int>& arr, int n) {\n    int out_of_place = -1;\n    for (int index = 0; index < n; ++index) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) ||\n                (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                right_rotate(arr, n, out_of_place, index);\n                if (index - out_of_place > 2) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid right_rotate(std::vector<int>& arr, int n, int out_of_place, int cur) {\n    int temp = arr[cur];\n    double temp_var_8 = 9.9;while (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n    for (int i = cur; i > out_of_place; --i) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n}\nstd::vector<int> re_arrange(std::vector<int>& arr, int n) {\n    int out_of_place = -1;\n    for (int index = 0; index < n; ++index) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) ||\n                (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                right_rotate(arr, n, out_of_place, index);\n                if (index - out_of_place > 2) {\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<int> arr1 = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8};\n    std::vector<int> arr2 = {1, 2, 3, -4, -1, 4};\n    std::vector<int> arr3 = {4, 7, 9, 77, -4, 5, -3, -9};\n    assert(re_arrange(arr1, 10) == std::vector<int>({-5, 5, -2, 2, -8, 4, 7, 1, 8, 0}));\n    assert(re_arrange(arr2, 6) == std::vector<int>({-4, 1, -1, 2, 3, 4}));\n    assert(re_arrange(arr3, 8) == std::vector<int>({-4, 4, -3, 7, -9, 9, 77, 5}));\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid right_rotate(std::vector<int>& arr, int n, int out_of_place, int cur) {\n    int temp = arr[cur];\n    for (int i = cur; i > out_of_place; --i) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n}\nstd::vector<int> re_arrange(std::vector<int>& arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to re-arrange the given array in alternating positive and negative items.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int out_of_place = -1;\n    for (int index = 0; index < n; ++index) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) ||\n                (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                right_rotate(arr, n, out_of_place, index);\n                if (index - out_of_place > 2) {\n//begin to write code\n"
    },
    {
        "task_id": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n        } else {\n            sum2 += test_vector[idx];\n        }\n    }\n    return {sum1, sum2};\n}\n\n\n",
        "test": "int main() {\n    assert(sum_of_alternates({5, 6, 3, 6, 10, 34}) == std::make_pair(46, 18));\n    assert(sum_of_alternates({1, 2, 3, 4, 5}) == std::make_pair(6, 9));\n    assert(sum_of_alternates({6, 7, 8, 9, 4, 5}) == std::make_pair(21, 18));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n            double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_of_alternates({5, 6, 3, 6, 10, 34}) == std::make_pair(46, 18));\n    assert(sum_of_alternates({1, 2, 3, 4, 5}) == std::make_pair(6, 9));\n    assert(sum_of_alternates({6, 7, 8, 9, 4, 5}) == std::make_pair(21, 18));\n    \n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::pair<int, int> sum_of_alternates(const std::vector<int>& test_vector) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the sum of alternate chains of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum1 = 0;\n    int sum2 = 0;\n    for (size_t idx = 0; idx < test_vector.size(); ++idx) {\n        if (idx % 2 == 1) {\n            sum1 += test_vector[idx];\n//begin to write code\n"
    },
    {
        "task_id": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\n\nint get_Min_Squares(int n) {\n    if (n <= 3) {\n        return n;\n    }\n    int res = n;\n    for (int x = 1; x <= n; ++x) {\n        int temp = x * x;\n        if (temp > n) {\n            break;\n        } else {\n            res = std::min(res, 1 + get_Min_Squares(n - temp));\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(get_Min_Squares(6) == 3);\n    assert(get_Min_Squares(2) == 2);\n    assert(get_Min_Squares(4) == 1);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\nint get_Min_Squares(int n) {\n    if (n <= 3) {\n        return n;\n    }\n    int res = n;\n    for (int x = 1; x <= n; ++x) {\n        int temp = x * x;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the minimum number of squares whose sum is equal to a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\nint get_Min_Squares(int n) {\n    if (n <= 3) {\n        return n;\n    }\n    int res = n;\n    for (int x = 1; x <= n; ++x) {\n        int temp = x * x;\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_Min_Squares(6) == 3);\n    assert(get_Min_Squares(2) == 2);\n    assert(get_Min_Squares(4) == 1);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <algorithm>\n#include <cassert>\nint get_Min_Squares(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum number of squares whose sum is equal to a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n <= 3) {\n        return n;\n    }\n    int res = n;\n    for (int x = 1; x <= n; ++x) {\n        int temp = x * x;\n//begin to write code\n"
    },
    {
        "task_id": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code_str": "#include <iostream>\n#include <sstream>\n#include <unordered_map>\n#include <cassert>\n#include <vector>\nusing namespace std;\n\nstring most_occurrences(vector<string> test_list) {\n    unordered_map<string, int> temp;\n    for (auto& sub : test_list) {\n        stringstream ss(sub);\n        string wrd;\n        while (ss >> wrd) {\n            temp[wrd]++;\n        }\n    }\n    string res = \"\";\n    int max_count = 0;\n    for (auto& pair : temp) {\n        if (pair.second > max_count) {\n            max_count = pair.second;\n            res = pair.first;\n        }\n    }\n    return res;\n}",
        "test": "int main() {\n    assert(most_occurrences({\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"}) == \"UTS\");\n    assert(most_occurrences({\"Its been a great year\", \"this year is so worse\", \"this year is okay\"}) == \"year\");\n    assert(most_occurrences({\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"}) == \"can\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <sstream>\n#include <unordered_map>\n#include <cassert>\n#include <vector>\nusing namespace std;\nstring most_occurrences(vector<string> test_list) {\n    unordered_map<string, int> temp;\n    for (auto& sub : test_list) {\n        stringstream ss(sub);\n        string wrd;\n        while (ss >> wrd) {\n            temp[wrd]++;\n        }\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "perturbated_codes": "#include <iostream>\n#include <sstream>\n#include <unordered_map>\n#include <cassert>\n#include <vector>\nusing namespace std;\nstring most_occurrences(vector<string> test_list) {\n    unordered_map<string, int> temp;\n    for (auto& sub : test_list) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        stringstream ss(sub);\n        string wrd;\n        while (ss >> wrd) {\n            temp[wrd]++;\n        }\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(most_occurrences({\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"}) == \"UTS\");\n    assert(most_occurrences({\"Its been a great year\", \"this year is so worse\", \"this year is okay\"}) == \"year\");\n    assert(most_occurrences({\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"}) == \"can\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <unordered_map>\n#include <cassert>\n#include <vector>\nusing namespace std;\nstring most_occurrences(vector<string> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unordered_map<string, int> temp;\n    for (auto& sub : test_list) {\n        stringstream ss(sub);\n        string wrd;\n        while (ss >> wrd) {\n            temp[wrd]++;\n        }\n    }\n//begin to write code\n"
    },
    {
        "task_id": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <assert.h>\n\nbool check_isosceles(int x, int y, int z) {\n    if (x == y || y == z || z == x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(check_isosceles(6, 8, 12) == false);\n    assert(check_isosceles(6, 6, 12) == true);\n    assert(check_isosceles(6, 16, 20) == false);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <assert.h>\nbool check_isosceles(int x, int y, int z) {\n    if (x == y || y == z || z == x) {\n        return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to print check if the triangle is isosceles or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <assert.h>\nbool check_isosceles(int x, int y, int z) {\n    if (x == y || y == z || z == x) {\n        return true;\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_isosceles(6, 8, 12) == false);\n    assert(check_isosceles(6, 6, 12) == true);\n    assert(check_isosceles(6, 16, 20) == false);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <assert.h>\nbool check_isosceles(int x, int y, int z) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print check if the triangle is isosceles or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x == y || y == z || z == x) {\n        return true;\n//begin to write code\n"
    },
    {
        "task_id": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n    result.insert(result.end(), list1.begin(), list1.begin() + n);\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4) == vector<int>{4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}));\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2) == vector<int>{3, 4, 5, 6, 7, 8, 9, 10, 1, 2}));\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2) == vector<int>{6, 7, 8, 9, 10, 1, 2}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\ndouble temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 3, 4) == vector<int>{4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4}));\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 2, 2) == vector<int>{3, 4, 5, 6, 7, 8, 9, 10, 1, 2}));\n    assert((rotate_left({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}, 5, 2) == vector<int>{6, 7, 8, 9, 10, 1, 2}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> rotate_left(vector<int> list1, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to rotate a given list by specified number of items to the left direction.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    result.insert(result.end(), list1.begin() + m, list1.end());\n//begin to write code\n"
    },
    {
        "task_id": 329,
        "prompt": "Write a python function to count negative numbers in a list.",
        "code_str": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n            neg_count += 1;\n        }\n    }\n    return neg_count;\n}\n\n\n",
        "test": "int main() {\n    assert(neg_count({-1, -2, 3, -4, -5}) == 4);\n    assert(neg_count({1, 2, 3}) == 0);\n    assert(neg_count({1, 2, -3, -10, 20}) == 2);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count negative numbers in a list.",
        "perturbated_codes": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(neg_count({-1, -2, 3, -4, -5}) == 4);\n    assert(neg_count({1, 2, 3}) == 0);\n    assert(neg_count({1, 2, -3, -10, 20}) == 2);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\nint neg_count(const std::vector<int>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int neg_count = 0;\n    for (int num : list) {\n        if (num <= 0) {\n//begin to write code\n"
    },
    {
        "task_id": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code_str": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n\n    vector<string> matches;\n    for (sregex_iterator i = words_begin; i != words_end; ++i) {\n        matches.push_back((*i).str());\n    }\n    return matches;\n}",
        "test": "int main()\n{\n    assert((find_char(\"For the four consumer complaints contact manager AKR reddy\") == vector<string>{\"For\", \"the\", \"four\", \"AKR\", \"reddy\"}));\n    assert((find_char(\"Certain service are subject to change MSR\") == vector<string>{\"are\", \"MSR\"}));\n    assert((find_char(\"Third party legal desclaimers\") == vector<string>{\"Third\", \"party\", \"legal\"}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((find_char(\"For the four consumer complaints contact manager AKR reddy\") == vector<string>{\"For\", \"the\", \"four\", \"AKR\", \"reddy\"}));\n    assert((find_char(\"Certain service are subject to change MSR\") == vector<string>{\"are\", \"MSR\"}));\n    assert((find_char(\"Third party legal desclaimers\") == vector<string>{\"Third\", \"party\", \"legal\"}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <cassert>\nusing namespace std;\nvector<string> find_char(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex word_regex(R\"(\\b\\w{3,5}\\b)\");\n    auto words_begin = sregex_iterator(text.begin(), text.end(), word_regex);\n    auto words_end = sregex_iterator();\n    vector<string> matches;\n//begin to write code\n"
    },
    {
        "task_id": 331,
        "prompt": "Write a python function to count unset bits of a given number.",
        "code_str": "#include<cassert>\n#include <iostream>\n\nint count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n            count += 1;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_unset_bits(2) == 1);\n    assert(count_unset_bits(4) == 2);\n    assert(count_unset_bits(6) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\nint count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count unset bits of a given number.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\nint count_unset_bits(int n) {\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_unset_bits(2) == 1);\n    assert(count_unset_bits(4) == 2);\n    assert(count_unset_bits(6) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\nint count_unset_bits(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    int x = 1;\n    while(x < n + 1) {\n        if ((x & n) == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 332,
        "prompt": "Write a function to count character frequency of a given string.",
        "code_str": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n\n",
        "test": "int main() {\n    std::map<char, int> result;\n\n    result = char_frequency(\"python\");\n    assert(result['p'] == 1 && result['y'] == 1 && result['t'] == 1 && result['h'] == 1 && result['o'] == 1 && result['n'] == 1);\n    \n    result = char_frequency(\"program\");\n    assert(result['p'] == 1 && result['r'] == 2 && result['o'] == 1 && result['g'] == 1 && result['a'] == 1 && result['m'] == 1);\n    \n    result = char_frequency(\"language\");\n    assert(result['l'] == 1 && result['a'] == 2 && result['n'] == 1 && result['g'] == 2 && result['u'] == 1 && result['e'] == 1);\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to count character frequency of a given string.",
        "perturbated_codes": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n            double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::map<char, int> result;\n\n    result = char_frequency(\"python\");\n    assert(result['p'] == 1 && result['y'] == 1 && result['t'] == 1 && result['h'] == 1 && result['o'] == 1 && result['n'] == 1);\n    \n    result = char_frequency(\"program\");\n    assert(result['p'] == 1 && result['r'] == 2 && result['o'] == 1 && result['g'] == 1 && result['a'] == 1 && result['m'] == 1);\n    \n    result = char_frequency(\"language\");\n    assert(result['l'] == 1 && result['a'] == 2 && result['n'] == 1 && result['g'] == 2 && result['u'] == 1 && result['e'] == 1);\n\n    std::cout << \"All tests passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<char, int> char_frequency(std::string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<char, int> dict;\n    for (char n : str1) {\n        if (dict.find(n) != dict.end()) {\n            dict[n] += 1;\n//begin to write code\n"
    },
    {
        "task_id": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\n// Sorting function based on the second element of the pairs\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n        return a.second < b.second;\n    });\n}\n\n\n",
        "test": "int main()\n{\n    vector<pair<string, int>> vec1 = {{\"a\", 10}, {\"b\", 5}, {\"c\", 20}, {\"d\", 15}};\n    vector<pair<string, int>> vec2 = {{\"452\", 10}, {\"256\", 5}, {\"100\", 20}, {\"135\", 15}};\n    vector<pair<string, int>> vec3 = {{\"rishi\", 10}, {\"akhil\", 5}, {\"ramya\", 20}, {\"gaur\", 15}};\n\n    Sort(vec1);\n    Sort(vec2);\n    Sort(vec3);\n\n    assert((vec1 == vector<pair<string, int>>{{\"b\", 5}, {\"a\", 10}, {\"d\", 15}, {\"c\", 20}}));\n    assert((vec2 == vector<pair<string, int>>{{\"256\", 5}, {\"452\", 10}, {\"135\", 15}, {\"100\", 20}}));\n    assert((vec3 == vector<pair<string, int>>{{\"akhil\", 5}, {\"rishi\", 10}, {\"gaur\", 15}, {\"ramya\", 20}}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to sort a list according to the second element in sublist.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<pair<string, int>> vec1 = {{\"a\", 10}, {\"b\", 5}, {\"c\", 20}, {\"d\", 15}};\n    vector<pair<string, int>> vec2 = {{\"452\", 10}, {\"256\", 5}, {\"100\", 20}, {\"135\", 15}};\n    vector<pair<string, int>> vec3 = {{\"rishi\", 10}, {\"akhil\", 5}, {\"ramya\", 20}, {\"gaur\", 15}};\n\n    Sort(vec1);\n    Sort(vec2);\n    Sort(vec3);\n\n    assert((vec1 == vector<pair<string, int>>{{\"b\", 5}, {\"a\", 10}, {\"d\", 15}, {\"c\", 20}}));\n    assert((vec2 == vector<pair<string, int>>{{\"256\", 5}, {\"452\", 10}, {\"135\", 15}, {\"100\", 20}}));\n    assert((vec3 == vector<pair<string, int>>{{\"akhil\", 5}, {\"rishi\", 10}, {\"gaur\", 15}, {\"ramya\", 20}}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n// Sorting function based on the second element of the pairs\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\nvoid Sort(vector<pair<string, int>>& sub_li) {\n    sort(sub_li.begin(), sub_li.end(), [](const pair<string, int>& a, const pair<string, int>& b) {\n//begin to write code\n"
    },
    {
        "task_id": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(check_Validity(1, 2, 3) == false);\n    assert(check_Validity(2, 3, 5) == false);\n    assert(check_Validity(7, 10, 5) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the triangle is valid or not if sides are given.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_Validity(1, 2, 3) == false);\n    assert(check_Validity(2, 3, 5) == false);\n    assert(check_Validity(7, 10, 5) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_Validity(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n        return false;\n//begin to write code\n"
    },
    {
        "task_id": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n\n",
        "test": "int main() {\n    assert(ap_sum(1,5,2) == 25);\n    assert(ap_sum(2,6,4) == 72);\n    assert(ap_sum(1,4,5) == 34);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the sum of arithmetic progression.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\ndouble temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(ap_sum(1,5,2) == 25);\n    assert(ap_sum(2,6,4) == 72);\n    assert(ap_sum(1,4,5) == 34);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint ap_sum(int a, int n, int d) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int total = (n * (2 * a + (n - 1) * d)) / 2;\n//begin to write code\n"
    },
    {
        "task_id": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(check_monthnum(\"February\") == true);\n    assert(check_monthnum(\"January\") == false);\n    assert(check_monthnum(\"March\") == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n    if (monthname1 == \"February\") {\n        return true;\n        double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_monthnum(\"February\") == true);\n    assert(check_monthnum(\"January\") == false);\n    assert(check_monthnum(\"March\") == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_monthnum(std::string monthname1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month name contains 28 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname1 == \"February\") {\n        return true;\n//begin to write code\n"
    },
    {
        "task_id": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring text_match_word(string text) {\n    regex pattern(\"\\\\\\w+\\\\\\S*$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}",
        "test": "int main()\n{\n    assert(text_match_word(\"python.\") == \"Found a match!\");\n    assert(text_match_word(\"  lang  .\") == \"Not matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_word(string text) {\n    regex pattern(\"\\\\\\w+\\\\\\S*$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_word(string text) {\n    regex pattern(\"\\\\\\w+\\\\\\S*$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n        double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(text_match_word(\"python.\") == \"Found a match!\");\n    assert(text_match_word(\"  lang  .\") == \"Not matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_word(string text) {\n\n    /*\n    progame language:cpp\n    description:Write a function that matches a word at the end of a string, with optional punctuation.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"\\\\\\w+\\\\\\S*$\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n"
    },
    {
        "task_id": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool check_Equality(const std::string& s) {\n    return s.front() == s.back();\n}\n\nint count_Substring_With_Equal_Ends(const std::string& s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n        for (int j = 1; j <= n - i; ++j) {\n            if (check_Equality(s.substr(i, j))) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Substring_With_Equal_Ends(\"aba\") == 4);\n    assert(count_Substring_With_Equal_Ends(\"abcab\") == 7);\n    assert(count_Substring_With_Equal_Ends(\"abc\") == 3);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string& s) {\n    return s.front() == s.back();\n}\nint count_Substring_With_Equal_Ends(const std::string& s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of substrings with same first and last characters.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string& s) {\n    return s.front() == s.back();\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n}\nint count_Substring_With_Equal_Ends(const std::string& s) {\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Substring_With_Equal_Ends(\"aba\") == 4);\n    assert(count_Substring_With_Equal_Ends(\"abcab\") == 7);\n    assert(count_Substring_With_Equal_Ends(\"abc\") == 3);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool check_Equality(const std::string& s) {\n    return s.front() == s.back();\n}\nint count_Substring_With_Equal_Ends(const std::string& s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of substrings with same first and last characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    int n = s.length();\n    for (int i = 0; i < n; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint find_Divisor(int x, int y) {\n    if (x == y) {\n        return y;\n    }\n    return 2;\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(find_Divisor(2, 2) == 2);\n    assert(find_Divisor(2, 5) == 2);\n    assert(find_Divisor(5, 10) == 2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Divisor(int x, int y) {\n    if (x == y) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum occuring divisor in an interval.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Divisor(int x, int y) {\n    if (x == y) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(find_Divisor(2, 2) == 2);\n    assert(find_Divisor(2, 5) == 2);\n    assert(find_Divisor(5, 10) == 2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint find_Divisor(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum occuring divisor in an interval.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x == y) {\n//begin to write code\n"
    },
    {
        "task_id": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n\n// Function definition\nint sum_three_smallest_nums(std::vector<int> lst) {\n    std::vector<int> positive_nums;\n    for (int x : lst) {\n        if (x > 0) {\n            positive_nums.push_back(x);\n        }\n    }\n    std::sort(positive_nums.begin(), positive_nums.end());\n    if (positive_nums.size() < 3) {\n        return std::accumulate(positive_nums.begin(), positive_nums.end(), 0);\n    }\n    return std::accumulate(positive_nums.begin(), positive_nums.begin() + 3, 0);\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(sum_three_smallest_nums({10, 20, 30, 40, 50, 60, 7}) == 37);\n    assert(sum_three_smallest_nums({1, 2, 3, 4, 5}) == 6);\n    assert(sum_three_smallest_nums({0, 1, 2, 3, 4, 5}) == 6);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// Function definition\nint sum_three_smallest_nums(std::vector<int> lst) {\n    std::vector<int> positive_nums;\n    for (int x : lst) {\n        if (x > 0) {\n            positive_nums.push_back(x);\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// Function definition\nint sum_three_smallest_nums(std::vector<int> lst) {\n    std::vector<int> positive_nums;\n    for (int x : lst) {\n        if (x > 0) {\n            positive_nums.push_back(x);\n        }\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(sum_three_smallest_nums({10, 20, 30, 40, 50, 60, 7}) == 37);\n    assert(sum_three_smallest_nums({1, 2, 3, 4, 5}) == 6);\n    assert(sum_three_smallest_nums({0, 1, 2, 3, 4, 5}) == 6);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n// Function definition\nint sum_three_smallest_nums(std::vector<int> lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of the three lowest positive numbers from a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> positive_nums;\n    for (int x : lst) {\n        if (x > 0) {\n            positive_nums.push_back(x);\n        }\n//begin to write code\n"
    },
    {
        "task_id": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.",
        "code_str": "#include<iostream>\n    \n\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<int> t(s.begin(), s.end());\n    sort(t.begin(), t.end());\n    return t;\n}\n\n\n",
        "test": "int main() {\n    assert((set_to_tuple({1, 2, 3, 4, 5}) == vector<int>{1, 2, 3, 4, 5}));\n    assert((set_to_tuple({6, 7, 8, 9, 10, 11}) == vector<int>{6, 7, 8, 9, 10, 11}));\n    assert((set_to_tuple({12, 13, 14, 15, 16}) == vector<int>{12, 13, 14, 15, 16}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n    vector<int> t(s.begin(), s.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert the given set into ordered tuples.",
        "perturbated_codes": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    vector<int> t(s.begin(), s.end());\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((set_to_tuple({1, 2, 3, 4, 5}) == vector<int>{1, 2, 3, 4, 5}));\n    assert((set_to_tuple({6, 7, 8, 9, 10, 11}) == vector<int>{6, 7, 8, 9, 10, 11}));\n    assert((set_to_tuple({12, 13, 14, 15, 16}) == vector<int>{12, 13, 14, 15, 16}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> set_to_tuple(const set<int>& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> t(s.begin(), s.end());\n//begin to write code\n"
    },
    {
        "task_id": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cassert>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int value;\n    int list_num;\n    int index;\n\n    Node(int value, int list_num, int index) : value(value), list_num(list_num), index(index) {}\n\n    bool operator<(const Node& other) const {\n        return value > other.value; // Use greater to simulate min heap in priority queue\n    }\n};\n\npair<int, int> find_minimum_range(vector<vector<int>>& lists) {\n    int high = numeric_limits<int>::min();\n    pair<int, int> p = make_pair(0, numeric_limits<int>::max());\n    priority_queue<Node> pq;\n\n    for (int i = 0; i < lists.size(); ++i) {\n        pq.push(Node(lists[i][0], i, 0));\n        high = max(high, lists[i][0]);\n    }\n\n    while (!pq.empty()) {\n        Node top = pq.top();\n        pq.pop();\n        int low = top.value;\n        int i = top.list_num;\n        int j = top.index;\n\n        if (high - low < p.second - p.first) {\n            p = make_pair(low, high);\n        }\n        \n        if (j == lists[i].size() - 1) {\n            return p;\n        }\n\n        pq.push(Node(lists[i][j + 1], i, j + 1));\n        high = max(high, lists[i][j + 1]);\n    }\n\n    return p;\n}\n\n\n",
        "test": "int main() {\n    vector<vector<int>> list1{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}};\n    vector<vector<int>> list2{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}};\n    vector<vector<int>> list3{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}};\n\n    assert(find_minimum_range(list1) == make_pair(4, 6));\n    assert(find_minimum_range(list2) == make_pair(4, 7));\n    assert(find_minimum_range(list3) == make_pair(5, 7));\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int value;\n    int list_num;\n    int index;\n    Node(int value, int list_num, int index) : value(value), list_num(list_num), index(index) {}\n    bool operator<(const Node& other) const {\n        return value > other.value; // Use greater to simulate min heap in priority queue\n    }\n};\npair<int, int> find_minimum_range(vector<vector<int>>& lists) {\n    int high = numeric_limits<int>::min();\n    pair<int, int> p = make_pair(0, numeric_limits<int>::max());\n    priority_queue<Node> pq;\n    for (int i = 0; i < lists.size(); ++i) {\n        pq.push(Node(lists[i][0], i, 0));\n        high = max(high, lists[i][0]);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int value;\n    int list_num;\n    int index;\n    Node(int value, int list_num, int index) : value(value), list_num(list_num), index(index) {}\n    bool operator<(const Node& other) const {\n    double temp_var_10 = 9.9;if (temp_var_10 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_10 = temp_var_10 + 1;}\n        return value > other.value; // Use greater to simulate min heap in priority queue\n    }\n};\npair<int, int> find_minimum_range(vector<vector<int>>& lists) {\n    int high = numeric_limits<int>::min();\n    pair<int, int> p = make_pair(0, numeric_limits<int>::max());\n    priority_queue<Node> pq;\n    for (int i = 0; i < lists.size(); ++i) {\n        pq.push(Node(lists[i][0], i, 0));\n        high = max(high, lists[i][0]);\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<vector<int>> list1{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}};\n    vector<vector<int>> list2{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}};\n    vector<vector<int>> list3{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}};\n\n    assert(find_minimum_range(list1) == make_pair(4, 6));\n    assert(find_minimum_range(list2) == make_pair(4, 7));\n    assert(find_minimum_range(list3) == make_pair(5, 7));\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <limits>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int value;\n    int list_num;\n    int index;\n    Node(int value, int list_num, int index) : value(value), list_num(list_num), index(index) {}\n    bool operator<(const Node& other) const {\n        return value > other.value; // Use greater to simulate min heap in priority queue\n    }\n};\npair<int, int> find_minimum_range(vector<vector<int>>& lists) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int high = numeric_limits<int>::min();\n    pair<int, int> p = make_pair(0, numeric_limits<int>::max());\n    priority_queue<Node> pq;\n    for (int i = 0; i < lists.size(); ++i) {\n        pq.push(Node(lists[i][0], i, 0));\n        high = max(high, lists[i][0]);\n//begin to write code\n"
    },
    {
        "task_id": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.",
        "code_str": "\n#include <iostream>\n#include <cctype>\n#include <cassert>\n\nstd::pair<int, int> dig_let(const std::string& s) {\n    int d = 0, l = 0;\n    for (char c : s) {\n        if (isdigit(c)) {\n            d++;\n        } else if (isalpha(c)) {\n            l++;\n        }\n    }\n    return std::make_pair(l, d);\n}\n\n\n",
        "test": "int main() {\n    assert(dig_let(\"python\") == std::make_pair(6, 0));\n    assert(dig_let(\"program\") == std::make_pair(7, 0));\n    assert(dig_let(\"python3.0\") == std::make_pair(6, 2));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cctype>\n#include <cassert>\nstd::pair<int, int> dig_let(const std::string& s) {\n    int d = 0, l = 0;\n    for (char c : s) {\n        if (isdigit(c)) {\n            d++;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the number of digits and letters in a string.",
        "perturbated_codes": "#include <iostream>\n#include <cctype>\n#include <cassert>\nstd::pair<int, int> dig_let(const std::string& s) {\n    int d = 0, l = 0;\n    for (char c : s) {\n        if (isdigit(c)) {\n            d++;\n            double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(dig_let(\"python\") == std::make_pair(6, 0));\n    assert(dig_let(\"program\") == std::make_pair(7, 0));\n    assert(dig_let(\"python3.0\") == std::make_pair(6, 2));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cctype>\n#include <cassert>\nstd::pair<int, int> dig_let(const std::string& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the number of digits and letters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int d = 0, l = 0;\n    for (char c : s) {\n        if (isdigit(c)) {\n            d++;\n//begin to write code\n"
    },
    {
        "task_id": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.",
        "code_str": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nint count_Odd_Squares(int n, int m) {\n    return int(std::sqrt(m)) - int(std::sqrt(n-1));\n}\n\n\n",
        "test": "int main()\n{\n    assert(count_Odd_Squares(5, 100) == 8);\n    assert(count_Odd_Squares(8, 65) == 6);\n    assert(count_Odd_Squares(2, 5) == 1);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint count_Odd_Squares(int n, int m) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find number of elements with odd factors in a given range.",
        "perturbated_codes": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint count_Odd_Squares(int n, int m) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_Odd_Squares(5, 100) == 8);\n    assert(count_Odd_Squares(8, 65) == 6);\n    assert(count_Odd_Squares(2, 5) == 1);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nint count_Odd_Squares(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find number of elements with odd factors in a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n        result.push_back(nums[i] - nums[i-1]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert(diff_consecutivenums({1, 1, 3, 4, 4, 5, 6, 7}) == vector<int>({0, 2, 1, 0, 1, 1, 1}));\n    assert(diff_consecutivenums({4, 5, 8, 9, 6, 10}) == vector<int>({1, 3, 1, -3, 4}));\n    assert(diff_consecutivenums({0, 1, 2, 3, 4, 4, 4, 4, 5, 7}) == vector<int>({1, 1, 1, 1, 0, 0, 0, 1, 2}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(diff_consecutivenums({1, 1, 3, 4, 4, 5, 6, 7}) == vector<int>({0, 2, 1, 0, 1, 1, 1}));\n    assert(diff_consecutivenums({4, 5, 8, 9, 6, 10}) == vector<int>({1, 3, 1, -3, 4}));\n    assert(diff_consecutivenums({0, 1, 2, 3, 4, 4, 4, 4, 5, 7}) == vector<int>({1, 1, 1, 1, 0, 0, 0, 1, 2}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> diff_consecutivenums(const vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> result;\n    for (int i = 1; i < nums.size(); i++) {\n//begin to write code\n"
    },
    {
        "task_id": 346,
        "prompt": "Write a function to find entringer number e(n, k).",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint zigzag(int n, int k) {\n    if (n == 0 && k == 0) {\n        return 1;\n    }\n    if (k == 0) {\n        return 0;\n    }\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}\n\n\n",
        "test": "int main() {\n    assert(zigzag(4, 3) == 5);\n    assert(zigzag(4, 2) == 4);\n    assert(zigzag(3, 1) == 1);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint zigzag(int n, int k) {\n    if (n == 0 && k == 0) {\n        return 1;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find entringer number e(n, k).",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint zigzag(int n, int k) {\n    if (n == 0 && k == 0) {\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n        return 1;\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(zigzag(4, 3) == 5);\n    assert(zigzag(4, 2) == 4);\n    assert(zigzag(3, 1) == 1);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint zigzag(int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find entringer number e(n, k).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0 && k == 0) {\n        return 1;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n        n = temp;\n    }\n    return n * (n + 1) * (3 * m - n + 1) / 6;\n}\n\n\n",
        "test": "int main()\n{\n    assert(count_Squares(4, 3) == 20);\n    assert(count_Squares(1, 2) == 2);\n    assert(count_Squares(2, 2) == 5);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of squares in a rectangle.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Squares(int m, int n) {\n    if (n < m) {\n        int temp = m;\n        m = n;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_Squares(4, 3) == 20);\n    assert(count_Squares(1, 2) == 2);\n    assert(count_Squares(2, 2) == 5);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Squares(int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < m) {\n        int temp = m;\n        m = n;\n//begin to write code\n"
    },
    {
        "task_id": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint bin_coff(int n, int r) {\n    int val = 1;\n    if (r > (n - r)) {\n        r = n - r;\n    }\n    for (int i = 0; i < r; ++i) {\n        val *= (n - i);\n        val /= (i + 1);\n    }\n    return val;\n}\n\nint find_ways(int M) {\n    int n = M / 2;\n    int a = bin_coff(2 * n, n);\n    int b = a / (n + 1);\n    return b;\n}\n\n\n",
        "test": "int main() {\n    assert(find_ways(4) == 2);\n    assert(find_ways(6) == 5);\n    assert(find_ways(8) == 14);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint bin_coff(int n, int r) {\n    int val = 1;\n    if (r > (n - r)) {\n        r = n - r;\n    }\n    for (int i = 0; i < r; ++i) {\n        val *= (n - i);\n        val /= (i + 1);\n//begin to write code\n",
        "cpp_prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint bin_coff(int n, int r) {\n    int val = 1;\n    if (r > (n - r)) {\n        r = n - r;\n    }\n    for (int i = 0; i < r; ++i) {\n        val *= (n - i);\n        val /= (i + 1);\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_ways(4) == 2);\n    assert(find_ways(6) == 5);\n    assert(find_ways(8) == 14);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint bin_coff(int n, int r) {\n    int val = 1;\n    if (r > (n - r)) {\n        r = n - r;\n    }\n    for (int i = 0; i < r; ++i) {\n        val *= (n - i);\n        val /= (i + 1);\n//begin to write code\n"
    },
    {
        "task_id": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.",
        "code_str": "\n#include <string>\n#include <set>\n#include <iostream>\n#include <cassert>\n\nstd::string check(const std::string& string) {\n    std::set<char> p(string.begin(), string.end());\n    std::set<char> s = {'0', '1'};\n    if (s == p || p == std::set<char>{'0'} || p == std::set<char>{'1'}) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(check(\"01010101010\") == \"Yes\");\n    assert(check(\"name0\") == \"No\");\n    assert(check(\"101\") == \"Yes\");\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <string>\n#include <set>\n#include <iostream>\n#include <cassert>\nstd::string check(const std::string& string) {\n    std::set<char> p(string.begin(), string.end());\n    std::set<char> s = {'0', '1'};\n    if (s == p || p == std::set<char>{'0'} || p == std::set<char>{'1'}) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given string is a binary string or not.",
        "perturbated_codes": "#include <string>\n#include <set>\n#include <iostream>\n#include <cassert>\nstd::string check(const std::string& string) {\n    std::set<char> p(string.begin(), string.end());\n    std::set<char> s = {'0', '1'};\n    if (s == p || p == std::set<char>{'0'} || p == std::set<char>{'1'}) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check(\"01010101010\") == \"Yes\");\n    assert(check(\"name0\") == \"No\");\n    assert(check(\"101\") == \"Yes\");\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <string>\n#include <set>\n#include <iostream>\n#include <cassert>\nstd::string check(const std::string& string) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given string is a binary string or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<char> p(string.begin(), string.end());\n    std::set<char> s = {'0', '1'};\n    if (s == p || p == std::set<char>{'0'} || p == std::set<char>{'1'}) {\n//begin to write code\n"
    },
    {
        "task_id": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\n\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n    for (int i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n    return n - maxOcc;\n}\n\n\n",
        "test": "int main() {\n    assert(minimum_Length(\"mnm\") == 1);\n    assert(minimum_Length(\"abcda\") == 3);\n    assert(minimum_Length(\"abcb\") == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to minimize the length of the string by removing occurrence of only one character.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n    double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(minimum_Length(\"mnm\") == 1);\n    assert(minimum_Length(\"abcda\") == 3);\n    assert(minimum_Length(\"abcb\") == 2);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <vector>\n#include <cassert>\nint minimum_Length(std::string s) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int maxOcc = 0;\n    int n = s.length();\n    std::vector<int> arr(26, 0);\n    for (int i = 0; i < n; i++) {\n        arr[s[i] - 'a']++;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\n\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    for (int i = 0; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        if (count_map[arr[i]] == k) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main()\n{\n    assert(first_Element({0,1,2,3,4,5}, 6, 1) == 0);\n    assert(first_Element({1,2,1,3,4}, 5, 2) == 1);\n    assert(first_Element({2,3,4,3,5,7,1,2,3,5}, 10, 2) == 2);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    for (int i = 0; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first element occurring k times in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n    std::map<int, int> count_map;\n    for (int i = 0; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(first_Element({0,1,2,3,4,5}, 6, 1) == 0);\n    assert(first_Element({1,2,1,3,4}, 5, 2) == 1);\n    assert(first_Element({2,3,4,3,5,7,1,2,3,5}, 10, 2) == 2);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <cassert>\nint first_Element(const std::vector<int>& arr, int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<int, int> count_map;\n    for (int i = 0; i < n; ++i) {\n        if (count_map.find(arr[i]) != count_map.end()) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n//begin to write code\n"
    },
    {
        "task_id": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nbool unique_Characters(std::string str) {\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = i + 1; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    assert(unique_Characters(\"aba\") == false);\n    assert(unique_Characters(\"abc\") == true);\n    assert(unique_Characters(\"abab\") == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nbool unique_Characters(std::string str) {\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = i + 1; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                return false;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether all the characters in a given string are unique.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nbool unique_Characters(std::string str) {\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = i + 1; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                return false;\n                double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(unique_Characters(\"aba\") == false);\n    assert(unique_Characters(\"abc\") == true);\n    assert(unique_Characters(\"abab\") == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nbool unique_Characters(std::string str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether all the characters in a given string are unique.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (int i = 0; i < str.length(); i++) {\n        for (int j = i + 1; j < str.length(); j++) {\n            if (str[i] == str[j]) {\n                return false;\n//begin to write code\n"
    },
    {
        "task_id": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n    }\n    return list1;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::vector<int>> test1 = {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}};\n    std::vector<std::vector<int>> expected1 = {{2, 3}, {4, 5}, {1, 1}};\n    assert(remove_column(test1, 0) == expected1);\n\n    std::vector<std::vector<int>> test2 = {{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}};\n    std::vector<std::vector<int>> expected2 = {{1, 2}, {-2, 4}, {1, -1}};\n    assert(remove_column(test2, 2) == expected2);\n    \n    std::vector<std::vector<int>> test3 = {{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}};\n    std::vector<std::vector<int>> expected3 = {{3}, {7}, {3}, {15, 17}, {7}, {11}};\n    assert(remove_column(test3, 0) == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove a specified column from a given nested list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::vector<int>> test1 = {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}};\n    std::vector<std::vector<int>> expected1 = {{2, 3}, {4, 5}, {1, 1}};\n    assert(remove_column(test1, 0) == expected1);\n\n    std::vector<std::vector<int>> test2 = {{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}};\n    std::vector<std::vector<int>> expected2 = {{1, 2}, {-2, 4}, {1, -1}};\n    assert(remove_column(test2, 2) == expected2);\n    \n    std::vector<std::vector<int>> test3 = {{1, 3}, {5, 7}, {1, 3}, {13, 15, 17}, {5, 7}, {9, 11}};\n    std::vector<std::vector<int>> expected3 = {{3}, {7}, {3}, {15, 17}, {7}, {11}};\n    assert(remove_column(test3, 0) == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<std::vector<int>> remove_column(std::vector<std::vector<int>>& list1, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove a specified column from a given nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (auto& row : list1) {\n        row.erase(row.begin() + n);\n//begin to write code\n"
    },
    {
        "task_id": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.",
        "code_str": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n    int tn = a + (n - 1) * d;\n    return tn;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(tn_ap(1, 5, 2) == 9);\n    assert(tn_ap(2, 6, 4) == 22);\n    assert(tn_ap(1, 4, 5) == 16);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find t-nth term of arithemetic progression.",
        "perturbated_codes": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\ndouble temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(tn_ap(1, 5, 2) == 9);\n    assert(tn_ap(2, 6, 4) == 22);\n    assert(tn_ap(1, 4, 5) == 16);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint tn_ap(int a, int n, int d) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find t-nth term of arithemetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Rectangles(int radius) {\n    int rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n    for (int a = 1; a < 2 * radius; a++) {\n        for (int b = 1; b < 2 * radius; b++) {\n            int diagnalLengthSquare = (a * a + b * b);\n            if (diagnalLengthSquare <= diameterSquare) {\n                rectangles += 1;\n            }\n        }\n    }\n    return rectangles;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Rectangles(2) == 8);\n    assert(count_Rectangles(1) == 1);\n    assert(count_Rectangles(0) == 0);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Rectangles(int radius) {\n    int rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n    for (int a = 1; a < 2 * radius; a++) {\n        for (int b = 1; b < 2 * radius; b++) {\n            int diagnalLengthSquare = (a * a + b * b);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of rectangles in a circle of radius r.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Rectangles(int radius) {\n    int rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n    for (int a = 1; a < 2 * radius; a++) {\n        for (int b = 1; b < 2 * radius; b++) {\n            int diagnalLengthSquare = (a * a + b * b);\n            double temp_var_8 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Rectangles(2) == 8);\n    assert(count_Rectangles(1) == 1);\n    assert(count_Rectangles(0) == 0);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Rectangles(int radius) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of rectangles in a circle of radius r.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int rectangles = 0;\n    int diameter = 2 * radius;\n    int diameterSquare = diameter * diameter;\n    for (int a = 1; a < 2 * radius; a++) {\n        for (int b = 1; b < 2 * radius; b++) {\n            int diagnalLengthSquare = (a * a + b * b);\n//begin to write code\n"
    },
    {
        "task_id": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n    int c = 180 - (a + b);\n    return c;\n}\n\n\n",
        "test": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(find_angle(47, 89) == 44);\n    assert(find_angle(45, 95) == 40);\n    assert(find_angle(50, 40) == 90);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the third angle of a triangle using two angles.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(find_angle(47, 89) == 44);\n    assert(find_angle(45, 95) == 40);\n    assert(find_angle(50, 40) == 90);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_angle(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\n\nint find_max(const std::vector<std::vector<int>>& test_list) {\n    int res = 0;\n    for (const auto& sublist : test_list) {\n        for (int num : sublist) {\n            res = std::max(res, num);\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(find_max({{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}}) == 10);\n    assert(find_max({{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}}) == 11);\n    assert(find_max({{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}}) == 12);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nint find_max(const std::vector<std::vector<int>>& test_list) {\n    int res = 0;\n    for (const auto& sublist : test_list) {\n        for (int num : sublist) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum element of all the given tuple records.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nint find_max(const std::vector<std::vector<int>>& test_list) {\n    int res = 0;\n    for (const auto& sublist : test_list) {\n        for (int num : sublist) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_max({{2, 4}, {6, 7}, {5, 1}, {6, 10}, {8, 7}}) == 10);\n    assert(find_max({{3, 5}, {7, 8}, {6, 2}, {7, 11}, {9, 8}}) == 11);\n    assert(find_max({{4, 6}, {8, 9}, {7, 3}, {8, 12}, {10, 9}}) == 12);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nint find_max(const std::vector<std::vector<int>>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum element of all the given tuple records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (const auto& sublist : test_list) {\n        for (int num : sublist) {\n//begin to write code\n"
    },
    {
        "task_id": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n        result.push_back(nums1[i] % nums2[i]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(moddiv_list({4, 5, 6}, {1, 2, 3}) == std::vector<int>({0, 1, 0}));\n    assert(moddiv_list({3, 2}, {1, 4}) == std::vector<int>({0, 2}));\n    assert(moddiv_list({90, 120}, {50, 70}) == std::vector<int>({40, 50}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(moddiv_list({4, 5, 6}, {1, 2, 3}) == std::vector<int>({0, 1, 0}));\n    assert(moddiv_list({3, 2}, {1, 4}) == std::vector<int>({0, 2}));\n    assert(moddiv_list({90, 120}, {50, 70}) == std::vector<int>({40, 50}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> moddiv_list(const std::vector<int>& nums1, const std::vector<int>& nums2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find modulo division of two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums1.size(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "code_str": "\n#include<iostream>\n#include<string>\n#include<cassert>\n\nstd::string Check_Solution(int a, int b, int c) {\n    if (2 * b * b == 9 * a * c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(Check_Solution(1, 3, 2) == \"Yes\");\n    assert(Check_Solution(1, 2, 3) == \"No\");\n    assert(Check_Solution(1, -5, 6) == \"No\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<string>\n#include<cassert>\nstd::string Check_Solution(int a, int b, int c) {\n    if (2 * b * b == 9 * a * c) {\n        return \"Yes\";\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether one root of the quadratic equation is twice of the other or not.",
        "perturbated_codes": "#include<iostream>\n#include<string>\n#include<cassert>\nstd::string Check_Solution(int a, int b, int c) {\n    if (2 * b * b == 9 * a * c) {\n        return \"Yes\";\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(Check_Solution(1, 3, 2) == \"Yes\");\n    assert(Check_Solution(1, 2, 3) == \"No\");\n    assert(Check_Solution(1, -5, 6) == \"No\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<string>\n#include<cassert>\nstd::string Check_Solution(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * b * b == 9 * a * c) {\n        return \"Yes\";\n//begin to write code\n"
    },
    {
        "task_id": 360,
        "prompt": "Write a function to find the n\u2019th carol number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nlong long get_carol(int n) {\n    long long result = pow(2, n) - 1;\n    return result * result - 2;\n}\n\n\n",
        "test": "int main() {\n    assert(get_carol(2) == 7);\n    assert(get_carol(4) == 223);\n    assert(get_carol(5) == 959);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nlong long get_carol(int n) {\n    long long result = pow(2, n) - 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n\u2019th carol number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nlong long get_carol(int n) {\n    long long result = pow(2, n) - 1;\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_carol(2) == 7);\n    assert(get_carol(4) == 223);\n    assert(get_carol(5) == 959);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nlong long get_carol(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n\u2019th carol number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    long long result = pow(2, n) - 1;\n//begin to write code\n"
    },
    {
        "task_id": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\n\ntemplate<typename T>\nvector<T> remove_empty(vector<T> list1) {\n    vector<T> result;\n    for (auto& item : list1) {\n        if (!item.empty()) result.push_back(item);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((remove_empty<vector<int>>({{}, {}, {}, {'R', 'e', 'd'}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}, {}, {}}) == vector<vector<int>>{{'R', 'e', 'd'}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}}));\n    assert((remove_empty<vector<int>>({{}, {}, {}, {}, {}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}, {}, {}}) == vector<vector<int>>{{'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}}));\n    assert((remove_empty<vector<int>>({{}, {}, {}, {'P', 'y', 't', 'h', 'o', 'n'}, {}, {}, {'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'}, {'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e'}, {}, {}, {}, {}, {}}) == vector<vector<int>>{{'P', 'y', 't', 'h', 'o', 'n'}, {'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'}, {'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e'}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<T> remove_empty(vector<T> list1) {\n    vector<T> result;\n    for (auto& item : list1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove empty lists from a given list of lists.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<T> remove_empty(vector<T> list1) {\n    vector<T> result;\n    for (auto& item : list1) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((remove_empty<vector<int>>({{}, {}, {}, {'R', 'e', 'd'}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}, {}, {}}) == vector<vector<int>>{{'R', 'e', 'd'}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}}));\n    assert((remove_empty<vector<int>>({{}, {}, {}, {}, {}, {'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}, {}, {}}) == vector<vector<int>>{{'G', 'r', 'e', 'e', 'n'}, {1,2}, {'B', 'l', 'u', 'e'}}));\n    assert((remove_empty<vector<int>>({{}, {}, {}, {'P', 'y', 't', 'h', 'o', 'n'}, {}, {}, {'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'}, {'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e'}, {}, {}, {}, {}, {}}) == vector<vector<int>>{{'P', 'y', 't', 'h', 'o', 'n'}, {'p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'}, {'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e'}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T>\nvector<T> remove_empty(vector<T> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove empty lists from a given list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<T> result;\n    for (auto& item : list1) {\n//begin to write code\n"
    },
    {
        "task_id": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(max_occurrences({1, 2, 3, 1, 2, 3, 12, 4, 2}) == 2);\n    assert(max_occurrences({1, 2, 6, 7, 0, 1, 0, 1, 0}) == 1);\n    assert(max_occurrences({1, 2, 3, 1, 2, 4, 1}) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the item with maximum occurrences in a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_occurrences({1, 2, 3, 1, 2, 3, 12, 4, 2}) == 2);\n    assert(max_occurrences({1, 2, 6, 7, 0, 1, 0, 1, 0}) == 1);\n    assert(max_occurrences({1, 2, 3, 1, 2, 4, 1}) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_occurrences(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_val = 0;\n    int result = nums[0];\n    for (int i : nums) {\n        int occu = count(nums.begin(), nums.end(), i);\n        if (occu > max_val) {\n//begin to write code\n"
    },
    {
        "task_id": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int, int>> add_K_element(vector<tuple<int, int, int>> test_list, int K) {\n    vector<tuple<int, int, int>> res;\n    for (auto &sub : test_list) {\n        int a, b, c;\n        tie(a, b, c) = sub;\n        res.push_back(make_tuple(a + K, b + K, c + K));\n    }\n    return res;\n}",
        "test": "int main()\n{\n    assert((add_K_element({{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4) == vector<tuple<int, int, int>>{{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}));\n    assert((add_K_element({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8) == vector<tuple<int, int, int>>{{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}));\n    assert((add_K_element({{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9) == vector<tuple<int, int, int>>{{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int, int>> add_K_element(vector<tuple<int, int, int>> test_list, int K) {\n    vector<tuple<int, int, int>> res;\n    for (auto &sub : test_list) {\n        int a, b, c;\n//begin to write code\n",
        "cpp_prompt": "Write a function to add the k elements to each element in the tuple.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int, int>> add_K_element(vector<tuple<int, int, int>> test_list, int K) {\n    vector<tuple<int, int, int>> res;\n    for (auto &sub : test_list) {\n        int a, b, c;\n        double temp_var_8 = 9.9;while (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((add_K_element({{1, 3, 4}, {2, 4, 6}, {3, 8, 1}}, 4) == vector<tuple<int, int, int>>{{5, 7, 8}, {6, 8, 10}, {7, 12, 5}}));\n    assert((add_K_element({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 8) == vector<tuple<int, int, int>>{{9, 10, 11}, {12, 13, 14}, {15, 16, 17}}));\n    assert((add_K_element({{11, 12, 13}, {14, 15, 16}, {17, 18, 19}}, 9) == vector<tuple<int, int, int>>{{20, 21, 22}, {23, 24, 25}, {26, 27, 28}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int, int>> add_K_element(vector<tuple<int, int, int>> test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add the k elements to each element in the tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int, int>> res;\n    for (auto &sub : test_list) {\n        int a, b, c;\n//begin to write code\n"
    },
    {
        "task_id": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code_str": "#include<iostream>\n    \n\n#include <string>\n#include <cassert>\nusing namespace std;\n\nchar make_flip(char ch) {\n    return ch == '0' ? '1' : '0';\n}\n\nint get_flip_with_starting_charcter(string str, char expected) {\n    int flip_count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] != expected) {\n            flip_count++;\n        }\n        expected = make_flip(expected);\n    }\n    return flip_count;\n}\n\nint min_flip_to_make_string_alternate(string str) {\n    return min(get_flip_with_starting_charcter(str, '0'), get_flip_with_starting_charcter(str, '1'));\n}\n\n\n",
        "test": "int main()\n{\n    assert(min_flip_to_make_string_alternate(\"0001010111\") == 2);\n    assert(min_flip_to_make_string_alternate(\"001\") == 1);\n    assert(min_flip_to_make_string_alternate(\"010111011\") == 2);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nchar make_flip(char ch) {\n    return ch == '0' ? '1' : '0';\n}\nint get_flip_with_starting_charcter(string str, char expected) {\n    int flip_count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] != expected) {\n            flip_count++;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nchar make_flip(char ch) {\n    return ch == '0' ? '1' : '0';\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n}\nint get_flip_with_starting_charcter(string str, char expected) {\n    int flip_count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] != expected) {\n            flip_count++;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(min_flip_to_make_string_alternate(\"0001010111\") == 2);\n    assert(min_flip_to_make_string_alternate(\"001\") == 1);\n    assert(min_flip_to_make_string_alternate(\"010111011\") == 2);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nchar make_flip(char ch) {\n    return ch == '0' ? '1' : '0';\n}\nint get_flip_with_starting_charcter(string str, char expected) {\n    int flip_count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] != expected) {\n            flip_count++;\n//begin to write code\n"
    },
    {
        "task_id": 365,
        "prompt": "Write a python function to count the number of digits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        count += 1;\n    }\n    return count;\n}\n\n\n",
        "test": "int main()\n{\n    assert(count_Digit(12345) == 5);\n    assert(count_Digit(11223305) == 8);\n    assert(count_Digit(4123459) == 7);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the number of digits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint count_Digit(int n) {\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_Digit(12345) == 5);\n    assert(count_Digit(11223305) == 8);\n    assert(count_Digit(4123459) == 7);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint count_Digit(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    while (n != 0) {\n        n /= 10;\n//begin to write code\n"
    },
    {
        "task_id": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\n\nusing namespace std;\n\nint adjacent_num_product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n        max_product = max(max_product, list_nums[i] * list_nums[i + 1]);\n    }\n    return max_product;\n}\n\n\n",
        "test": "int main()\n{\n    assert(adjacent_num_product({1, 2, 3, 4, 5, 6}) == 30);\n    assert(adjacent_num_product({1, 2, 3, 4, 5}) == 20);\n    assert(adjacent_num_product({2, 3}) == 6);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<int>& list_nums) {\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n    double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(adjacent_num_product({1, 2, 3, 4, 5, 6}) == 30);\n    assert(adjacent_num_product({1, 2, 3, 4, 5}) == 20);\n    assert(adjacent_num_product({2, 3}) == 6);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <climits>\nusing namespace std;\nint adjacent_num_product(const vector<int>& list_nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_product = INT_MIN;\n    for (size_t i = 0; i < list_nums.size() - 1; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\n\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n}\n\nbool is_tree_balanced(Node* root) {\n    if (root == nullptr) {\n        return true;\n    }\n\n    int lh = get_height(root->left);\n    int rh = get_height(root->right);\n\n    if (abs(lh - rh) <= 1 && is_tree_balanced(root->left) && is_tree_balanced(root->right)) {\n        return true;\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    Node* root = new Node(1);\n    root->left = new Node(2);\n    root->right = new Node(3);\n    root->left->left = new Node(4);\n    root->left->right = new Node(5);\n    root->left->left->left = new Node(8);\n\n    Node* root1 = new Node(1);\n    root1->left = new Node(2);\n    root1->right = new Node(3);\n    root1->left->left = new Node(4);\n    root1->left->right = new Node(5);\n    root1->right->left = new Node(6);\n    root1->left->left->left = new Node(7);\n\n    Node* root2 = new Node(1);\n    root2->left = new Node(2);\n    root2->right = new Node(3);\n    root2->left->left = new Node(4);\n    root2->left->right = new Node(5);\n    root2->left->left->left = new Node(7);\n\n    assert(is_tree_balanced(root) == false);\n    assert(is_tree_balanced(root1) == true);\n    assert(is_tree_balanced(root2) == false);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if a binary tree is balanced or not.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    return max(get_height(root->left), get_height(root->right)) + 1;\n//begin to write code",
        "perturbated_cases": "int main() {\n    Node* root = new Node(1);\n    root->left = new Node(2);\n    root->right = new Node(3);\n    root->left->left = new Node(4);\n    root->left->right = new Node(5);\n    root->left->left->left = new Node(8);\n\n    Node* root1 = new Node(1);\n    root1->left = new Node(2);\n    root1->right = new Node(3);\n    root1->left->left = new Node(4);\n    root1->left->right = new Node(5);\n    root1->right->left = new Node(6);\n    root1->left->left->left = new Node(7);\n\n    Node* root2 = new Node(1);\n    root2->left = new Node(2);\n    root2->right = new Node(3);\n    root2->left->left = new Node(4);\n    root2->left->right = new Node(5);\n    root2->left->left->left = new Node(7);\n\n    assert(is_tree_balanced(root) == false);\n    assert(is_tree_balanced(root1) == true);\n    assert(is_tree_balanced(root2) == false);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\nclass Node {\npublic:\n    int data;\n    Node* left;\n    Node* right;\n    Node(int value) : data(value), left(nullptr), right(nullptr) {}\n};\nint get_height(Node* root) {\n    if (root == nullptr) {\n        return 0;\n    }\n    return max(get_height(root->left), get_height(root->right)) + 1;\n//begin to write code\n"
    },
    {
        "task_id": 368,
        "prompt": "Write a function to repeat the given tuple n times.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\nvector<tuple<int, int>> repeat_tuples(tuple<int, int> test_tup, int N) {\n    vector<tuple<int, int>> res(N, test_tup);\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert((repeat_tuples(make_tuple(1, 3), 4) == vector<tuple<int, int>>{make_tuple(1, 3), make_tuple(1, 3), make_tuple(1, 3), make_tuple(1, 3)}));\n    assert((repeat_tuples(make_tuple(1, 2), 3) == vector<tuple<int, int>>{make_tuple(1, 2), make_tuple(1, 2), make_tuple(1, 2)}));\n    assert((repeat_tuples(make_tuple(3, 4), 5) == vector<tuple<int, int>>{make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4)}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> repeat_tuples(tuple<int, int> test_tup, int N) {\n    vector<tuple<int, int>> res(N, test_tup);\n//begin to write code\n",
        "cpp_prompt": "Write a function to repeat the given tuple n times.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> repeat_tuples(tuple<int, int> test_tup, int N) {\ndouble temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n    vector<tuple<int, int>> res(N, test_tup);\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((repeat_tuples(make_tuple(1, 3), 4) == vector<tuple<int, int>>{make_tuple(1, 3), make_tuple(1, 3), make_tuple(1, 3), make_tuple(1, 3)}));\n    assert((repeat_tuples(make_tuple(1, 2), 3) == vector<tuple<int, int>>{make_tuple(1, 2), make_tuple(1, 2), make_tuple(1, 2)}));\n    assert((repeat_tuples(make_tuple(3, 4), 5) == vector<tuple<int, int>>{make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4), make_tuple(3, 4)}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nusing namespace std;\nvector<tuple<int, int>> repeat_tuples(tuple<int, int> test_tup, int N) {\n\n    /*\n    progame language:cpp\n    description:Write a function to repeat the given tuple n times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<tuple<int, int>> res(N, test_tup);\n//begin to write code\n"
    },
    {
        "task_id": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n    return LSA;\n}\n\n\n",
        "test": "int main() {\n    assert(lateralsurface_cuboid(8, 5, 6) == 156);\n    assert(lateralsurface_cuboid(7, 9, 10) == 320);\n    assert(lateralsurface_cuboid(10, 20, 30) == 1800);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the lateral surface area of cuboid",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n    int LSA = 2 * h * (l + w);\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(lateralsurface_cuboid(8, 5, 6) == 156);\n    assert(lateralsurface_cuboid(7, 9, 10) == 320);\n    assert(lateralsurface_cuboid(10, 20, 30) == 1800);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint lateralsurface_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int LSA = 2 * h * (l + w);\n//begin to write code\n"
    },
    {
        "task_id": 370,
        "prompt": "Write a function to sort a tuple by its float element.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n    });\n    return items;\n}\n\n\n",
        "test": "int main()\n{\n    vector<pair<string, string>> items1 = {{\"item1\", \"12.20\"}, {\"item2\", \"15.10\"}, {\"item3\", \"24.5\"}};\n    vector<pair<string, string>> sorted_items1 = float_sort(items1);\n    assert((sorted_items1 == vector<pair<string, string>>{{\"item3\", \"24.5\"}, {\"item2\", \"15.10\"}, {\"item1\", \"12.20\"}}));\n\n    vector<pair<string, string>> items2 = {{\"item1\", \"15\"}, {\"item2\", \"10\"}, {\"item3\", \"20\"}};\n    vector<pair<string, string>> sorted_items2 = float_sort(items2);\n    assert((sorted_items2 == vector<pair<string, string>>{{\"item3\", \"20\"}, {\"item1\", \"15\"}, {\"item2\", \"10\"}}));\n\n    vector<pair<string, string>> items3 = {{\"item1\", \"5\"}, {\"item2\", \"10\"}, {\"item3\", \"14\"}};\n    vector<pair<string, string>> sorted_items3 = float_sort(items3);\n    assert((sorted_items3 == vector<pair<string, string>>{{\"item3\", \"14\"}, {\"item2\", \"10\"}, {\"item1\", \"5\"}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a tuple by its float element.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<pair<string, string>> items1 = {{\"item1\", \"12.20\"}, {\"item2\", \"15.10\"}, {\"item3\", \"24.5\"}};\n    vector<pair<string, string>> sorted_items1 = float_sort(items1);\n    assert((sorted_items1 == vector<pair<string, string>>{{\"item3\", \"24.5\"}, {\"item2\", \"15.10\"}, {\"item1\", \"12.20\"}}));\n\n    vector<pair<string, string>> items2 = {{\"item1\", \"15\"}, {\"item2\", \"10\"}, {\"item3\", \"20\"}};\n    vector<pair<string, string>> sorted_items2 = float_sort(items2);\n    assert((sorted_items2 == vector<pair<string, string>>{{\"item3\", \"20\"}, {\"item1\", \"15\"}, {\"item2\", \"10\"}}));\n\n    vector<pair<string, string>> items3 = {{\"item1\", \"5\"}, {\"item2\", \"10\"}, {\"item3\", \"14\"}};\n    vector<pair<string, string>> sorted_items3 = float_sort(items3);\n    assert((sorted_items3 == vector<pair<string, string>>{{\"item3\", \"14\"}, {\"item2\", \"10\"}, {\"item1\", \"5\"}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<pair<string, string>> float_sort(vector<pair<string, string>>& items) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a tuple by its float element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(items.begin(), items.end(), [](const pair<string, string>& a, const pair<string, string>& b) {\n        return stof(a.second) > stof(b.second);\n//begin to write code\n"
    },
    {
        "task_id": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint smallest_missing(const std::vector<int>& A, int left_element, int right_element) {\n    if (left_element > right_element) {\n        return left_element;\n    }\n    int mid = left_element + (right_element - left_element) / 2;\n    if (A[mid] == mid) {\n        return smallest_missing(A, mid + 1, right_element);\n    } else {\n        return smallest_missing(A, left_element, mid - 1);\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(smallest_missing({0, 1, 2, 3, 4, 5, 6}, 0, 6) == 7);\n    assert(smallest_missing({0, 1, 2, 6, 9, 11, 15}, 0, 6) == 3);\n    assert(smallest_missing({1, 2, 3, 4, 6, 9, 11, 15}, 0, 7) == 0);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint smallest_missing(const std::vector<int>& A, int left_element, int right_element) {\n    if (left_element > right_element) {\n        return left_element;\n    }\n    int mid = left_element + (right_element - left_element) / 2;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the smallest missing element in a sorted array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint smallest_missing(const std::vector<int>& A, int left_element, int right_element) {\n    if (left_element > right_element) {\n        return left_element;\n    }\n    double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    int mid = left_element + (right_element - left_element) / 2;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(smallest_missing({0, 1, 2, 3, 4, 5, 6}, 0, 6) == 7);\n    assert(smallest_missing({0, 1, 2, 6, 9, 11, 15}, 0, 6) == 3);\n    assert(smallest_missing({1, 2, 3, 4, 6, 9, 11, 15}, 0, 7) == 0);\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint smallest_missing(const std::vector<int>& A, int left_element, int right_element) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the smallest missing element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (left_element > right_element) {\n        return left_element;\n    }\n    int mid = left_element + (right_element - left_element) / 2;\n//begin to write code\n"
    },
    {
        "task_id": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<int> heap_assending(vector<int> nums) {\n    make_heap(nums.begin(), nums.end());\n    sort_heap(nums.begin(), nums.end());\n    return nums;\n}",
        "test": "int main() {\n    assert(heap_assending({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}) == vector<int>({1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}));\n    assert(heap_assending({25, 35, 22, 85, 14, 65, 75, 25, 58}) == vector<int>({14, 22, 25, 25, 35, 58, 65, 75, 85}));\n    assert(heap_assending({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}) == vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> heap_assending(vector<int> nums) {\n    make_heap(nums.begin(), nums.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> heap_assending(vector<int> nums) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    make_heap(nums.begin(), nums.end());\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(heap_assending({18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}) == vector<int>({1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}));\n    assert(heap_assending({25, 35, 22, 85, 14, 65, 75, 25, 58}) == vector<int>({14, 22, 25, 25, 35, 58, 65, 75, 85}));\n    assert(heap_assending({1, 3, 5, 7, 9, 2, 4, 6, 8, 0}) == vector<int>({0, 1, 2, 3, 4, 5, 6, 7, 8, 9}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<int> heap_assending(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    make_heap(nums.begin(), nums.end());\n//begin to write code\n"
    },
    {
        "task_id": 373,
        "prompt": "Write a function to find the volume of a cuboid.",
        "code_str": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n    return l * w * h;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(volume_cuboid(1, 2, 3) == 6);\n    assert(volume_cuboid(5, 7, 9) == 315);\n    assert(volume_cuboid(10, 15, 21) == 3150);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the volume of a cuboid.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\ndouble temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(volume_cuboid(1, 2, 3) == 6);\n    assert(volume_cuboid(5, 7, 9) == 315);\n    assert(volume_cuboid(10, 15, 21) == 3150);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint volume_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the volume of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nvector<string> permute_string(string str) {\n    if (str.length() == 0) {\n        return vector<string> {\"\"};\n    }\n    vector<string> prev_list = permute_string(str.substr(1));\n    vector<string> next_list;\n    for (int i = 0; i < prev_list.size(); i++) {\n        for (size_t j = 0; j <= str.length() - 1; j++) {\n            string new_str = prev_list[i].substr(0, j) + str[0] + prev_list[i].substr(j);\n            if (find(next_list.begin(), next_list.end(), new_str) == next_list.end()) {\n                next_list.push_back(new_str);\n            }\n        }\n    }\n    return next_list;\n}\n\n\n",
        "test": "int main() {\n    assert((permute_string(\"ab\") == vector<string>{\"ab\", \"ba\"}));\n    assert((permute_string(\"abc\") == vector<string>{\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"}));\n    assert((permute_string(\"abcd\") == vector<string>{\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \n                                                     \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \n                                                     \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> permute_string(string str) {\n    if (str.length() == 0) {\n        return vector<string> {\"\"};\n    }\n    vector<string> prev_list = permute_string(str.substr(1));\n    vector<string> next_list;\n    for (int i = 0; i < prev_list.size(); i++) {\n        for (size_t j = 0; j <= str.length() - 1; j++) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to print all permutations of a given string including duplicates.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> permute_string(string str) {\n    if (str.length() == 0) {\n        return vector<string> {\"\"};\n    }\n    vector<string> prev_list = permute_string(str.substr(1));\n    vector<string> next_list;\n    for (int i = 0; i < prev_list.size(); i++) {\n        for (size_t j = 0; j <= str.length() - 1; j++) {\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((permute_string(\"ab\") == vector<string>{\"ab\", \"ba\"}));\n    assert((permute_string(\"abc\") == vector<string>{\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"}));\n    assert((permute_string(\"abcd\") == vector<string>{\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \n                                                     \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \n                                                     \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> permute_string(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to print all permutations of a given string including duplicates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (str.length() == 0) {\n        return vector<string> {\"\"};\n    }\n    vector<string> prev_list = permute_string(str.substr(1));\n    vector<string> next_list;\n    for (int i = 0; i < prev_list.size(); i++) {\n        for (size_t j = 0; j <= str.length() - 1; j++) {\n//begin to write code\n"
    },
    {
        "task_id": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint round_num(int n, int m) {\n    int a = (n / m) * m;\n    int b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n\n",
        "test": "int main() {\n    assert(round_num(4722, 10) == 4720);\n    assert(round_num(1111, 5) == 1110);\n    assert(round_num(219, 2) == 218);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint round_num(int n, int m) {\n    int a = (n / m) * m;\n//begin to write code\n",
        "cpp_prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint round_num(int n, int m) {\n    int a = (n / m) * m;\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(round_num(4722, 10) == 4720);\n    assert(round_num(1111, 5) == 1110);\n    assert(round_num(219, 2) == 218);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint round_num(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int a = (n / m) * m;\n//begin to write code\n"
    },
    {
        "task_id": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <set>\n#include <tuple>\n#include <cassert>\n#include <typeinfo>\n#include <string>\n#include <stdexcept>\n\nusing namespace std;\n\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_string() const = 0;\n    virtual int get_int() const = 0;\n    virtual string get_string() const = 0;\n};\n\n// \u6d3e\u751f\u7c7b IntElement\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    bool is_int() const override {\n        return true;\n    }\n    bool is_string() const override {\n        return false;\n    }\n    int get_int() const override {\n        return value_;\n    }\n    string get_string() const override {\n        throw runtime_error(\"Not a string\");\n    }\nprivate:\n    int value_;\n};\n\n// \u6d3e\u751f\u7c7b StringElement\nclass StringElement : public Element {\npublic:\n    StringElement(const string& value) : value_(value) {}\n    bool is_int() const override {\n        return false;\n    }\n    bool is_string() const override {\n        return true;\n    }\n    int get_int() const override {\n        throw runtime_error(\"Not an integer\");\n    }\n    string get_string() const override {\n        return value_;\n    }\nprivate:\n    string value_;\n};\n\nstruct ElementComparator {\n    bool operator()(const Element* lhs, const Element* rhs) const {\n        if (lhs->is_int() && rhs->is_int()) {\n            return lhs->get_int() < rhs->get_int();\n        } else if (lhs->is_string() && rhs->is_string()) {\n            return lhs->get_string() < rhs->get_string();\n        }\n        return false;\n    }\n};\n\nvector<Element*> remove_replica(const vector<Element*>& test_tup) {\n    vector<Element*> res;\n    set<Element*, ElementComparator> check;\n    for (auto& item : test_tup) {\n        if (item->is_int()) {\n            IntElement temp(item->get_int());\n            if (check.find(&temp) != check.end()) {\n                res.push_back(new StringElement(\"MSP\"));\n            } else {\n                Element* new_elem = new IntElement(item->get_int());\n                res.push_back(new_elem);\n                check.insert(new_elem);\n            }\n        } else if (item->is_string()) {\n            StringElement temp(item->get_string());\n            if (check.find(&temp) != check.end()) {\n                res.push_back(new StringElement(\"MSP\"));\n            } else {\n                Element* new_elem = new StringElement(item->get_string());\n                res.push_back(new_elem);\n                check.insert(new_elem);\n            }\n        }\n    }\n    return res;\n}\n\nbool compare(const vector<Element*>& r1, const vector<Element*>& r2) {\n    if (r1.size() != r2.size()) {\n        return false;\n    }\n    for (size_t i = 0; i < r1.size(); i++) {\n        if (r1[i]->is_int() != r2[i]->is_int()) {\n            return false;\n        }\n        if (r1[i]->is_int()) {\n            if (r1[i]->get_int() != r2[i]->get_int()) {\n                return false;\n            }\n        } else {\n            if (r1[i]->get_string() != r2[i]->get_string()) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
        "test": "int main() {\n    // Test Case 1\n    vector<Element*> test_tup1;\n    test_tup1.push_back(new IntElement(1));\n    test_tup1.push_back(new IntElement(1));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(5));\n    test_tup1.push_back(new IntElement(5));\n    test_tup1.push_back(new IntElement(6));\n    test_tup1.push_back(new IntElement(7));\n    test_tup1.push_back(new IntElement(7));\n\n    vector<Element*> expected1;\n    expected1.push_back(new IntElement(1));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(4));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(5));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(6));\n    expected1.push_back(new IntElement(7));\n    expected1.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result1 = remove_replica(test_tup1);\n    assert(compare(result1, expected1));\n\n    // Clean up\n    for (auto& elem : test_tup1) {\n        delete elem;\n    }\n    for (auto& elem : expected1) {\n        delete elem;\n    }\n    for (auto& elem : result1) {\n        delete elem;\n    }\n\n    // Test Case 2\n    vector<Element*> test_tup2;\n    test_tup2.push_back(new IntElement(2));\n    test_tup2.push_back(new IntElement(3));\n    test_tup2.push_back(new IntElement(4));\n    test_tup2.push_back(new IntElement(4));\n    test_tup2.push_back(new IntElement(5));\n    test_tup2.push_back(new IntElement(6));\n    test_tup2.push_back(new IntElement(6));\n    test_tup2.push_back(new IntElement(7));\n    test_tup2.push_back(new IntElement(8));\n    test_tup2.push_back(new IntElement(9));\n    test_tup2.push_back(new IntElement(9));\n\n    vector<Element*> expected2;\n    expected2.push_back(new IntElement(2));\n    expected2.push_back(new IntElement(3));\n    expected2.push_back(new IntElement(4));\n    expected2.push_back(new StringElement(\"MSP\"));\n    expected2.push_back(new IntElement(5));\n    expected2.push_back(new IntElement(6));\n    expected2.push_back(new StringElement(\"MSP\"));\n    expected2.push_back(new IntElement(7));\n    expected2.push_back(new IntElement(8));\n    expected2.push_back(new IntElement(9));\n    expected2.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result2 = remove_replica(test_tup2);\n    assert(compare(result2, expected2));\n\n    // Clean up\n    for (auto& elem : test_tup2) {\n        delete elem;\n    }\n    for (auto& elem : expected2) {\n        delete elem;\n    }\n    for (auto& elem : result2) {\n        delete elem;\n    }\n\n    // Test Case 3\n    vector<Element*> test_tup3;\n    test_tup3.push_back(new IntElement(2));\n    test_tup3.push_back(new IntElement(2));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(4));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(7));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(6));\n    test_tup3.push_back(new IntElement(7));\n    test_tup3.push_back(new IntElement(7));\n\n    vector<Element*> expected3;\n    expected3.push_back(new IntElement(2));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(5));\n    expected3.push_back(new IntElement(4));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(7));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(6));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result3 = remove_replica(test_tup3);\n    assert(compare(result3, expected3));\n\n    // Clean up\n    for (auto& elem : test_tup3) {\n        delete elem;\n    }\n    for (auto& elem : expected3) {\n        delete elem;\n    }\n    for (auto& elem : result3) {\n        delete elem;\n    }\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <tuple>\n#include <cassert>\n#include <typeinfo>\n#include <string>\n#include <stdexcept>\nusing namespace std;\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_string() const = 0;\n    virtual int get_int() const = 0;\n    virtual string get_string() const = 0;\n};\n// \u6d3e\u751f\u7c7b IntElement\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    bool is_int() const override {\n        return true;\n    }\n    bool is_string() const override {\n        return false;\n    }\n    int get_int() const override {\n        return value_;\n    }\n    string get_string() const override {\n        throw runtime_error(\"Not a string\");\n    }\nprivate:\n    int value_;\n};\n// \u6d3e\u751f\u7c7b StringElement\nclass StringElement : public Element {\npublic:\n    StringElement(const string& value) : value_(value) {}\n    bool is_int() const override {\n        return false;\n    }\n    bool is_string() const override {\n        return true;\n    }\n    int get_int() const override {\n        throw runtime_error(\"Not an integer\");\n    }\n    string get_string() const override {\n        return value_;\n    }\nprivate:\n    string value_;\n};\nstruct ElementComparator {\n    bool operator()(const Element* lhs, const Element* rhs) const {\n        if (lhs->is_int() && rhs->is_int()) {\n            return lhs->get_int() < rhs->get_int();\n        } else if (lhs->is_string() && rhs->is_string()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <tuple>\n#include <cassert>\n#include <typeinfo>\n#include <string>\n#include <stdexcept>\nusing namespace std;\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_string() const = 0;\n    virtual int get_int() const = 0;\n    virtual string get_string() const = 0;\n};\n// \u6d3e\u751f\u7c7b IntElement\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    bool is_int() const override {\n        return true;\n    }\n    bool is_string() const override {\n        return false;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    int get_int() const override {\n        return value_;\n    }\n    string get_string() const override {\n        throw runtime_error(\"Not a string\");\n    }\nprivate:\n    int value_;\n};\n// \u6d3e\u751f\u7c7b StringElement\nclass StringElement : public Element {\npublic:\n    StringElement(const string& value) : value_(value) {}\n    bool is_int() const override {\n        return false;\n    }\n    bool is_string() const override {\n        return true;\n    }\n    int get_int() const override {\n        throw runtime_error(\"Not an integer\");\n    }\n    string get_string() const override {\n        return value_;\n    }\nprivate:\n    string value_;\n};\nstruct ElementComparator {\n    bool operator()(const Element* lhs, const Element* rhs) const {\n        if (lhs->is_int() && rhs->is_int()) {\n            return lhs->get_int() < rhs->get_int();\n        } else if (lhs->is_string() && rhs->is_string()) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test Case 1\n    vector<Element*> test_tup1;\n    test_tup1.push_back(new IntElement(1));\n    test_tup1.push_back(new IntElement(1));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(4));\n    test_tup1.push_back(new IntElement(5));\n    test_tup1.push_back(new IntElement(5));\n    test_tup1.push_back(new IntElement(6));\n    test_tup1.push_back(new IntElement(7));\n    test_tup1.push_back(new IntElement(7));\n\n    vector<Element*> expected1;\n    expected1.push_back(new IntElement(1));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(4));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(5));\n    expected1.push_back(new StringElement(\"MSP\"));\n    expected1.push_back(new IntElement(6));\n    expected1.push_back(new IntElement(7));\n    expected1.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result1 = remove_replica(test_tup1);\n    assert(compare(result1, expected1));\n\n    // Clean up\n    for (auto& elem : test_tup1) {\n        delete elem;\n    }\n    for (auto& elem : expected1) {\n        delete elem;\n    }\n    for (auto& elem : result1) {\n        delete elem;\n    }\n\n    // Test Case 2\n    vector<Element*> test_tup2;\n    test_tup2.push_back(new IntElement(2));\n    test_tup2.push_back(new IntElement(3));\n    test_tup2.push_back(new IntElement(4));\n    test_tup2.push_back(new IntElement(4));\n    test_tup2.push_back(new IntElement(5));\n    test_tup2.push_back(new IntElement(6));\n    test_tup2.push_back(new IntElement(6));\n    test_tup2.push_back(new IntElement(7));\n    test_tup2.push_back(new IntElement(8));\n    test_tup2.push_back(new IntElement(9));\n    test_tup2.push_back(new IntElement(9));\n\n    vector<Element*> expected2;\n    expected2.push_back(new IntElement(2));\n    expected2.push_back(new IntElement(3));\n    expected2.push_back(new IntElement(4));\n    expected2.push_back(new StringElement(\"MSP\"));\n    expected2.push_back(new IntElement(5));\n    expected2.push_back(new IntElement(6));\n    expected2.push_back(new StringElement(\"MSP\"));\n    expected2.push_back(new IntElement(7));\n    expected2.push_back(new IntElement(8));\n    expected2.push_back(new IntElement(9));\n    expected2.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result2 = remove_replica(test_tup2);\n    assert(compare(result2, expected2));\n\n    // Clean up\n    for (auto& elem : test_tup2) {\n        delete elem;\n    }\n    for (auto& elem : expected2) {\n        delete elem;\n    }\n    for (auto& elem : result2) {\n        delete elem;\n    }\n\n    // Test Case 3\n    vector<Element*> test_tup3;\n    test_tup3.push_back(new IntElement(2));\n    test_tup3.push_back(new IntElement(2));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(4));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(7));\n    test_tup3.push_back(new IntElement(5));\n    test_tup3.push_back(new IntElement(6));\n    test_tup3.push_back(new IntElement(7));\n    test_tup3.push_back(new IntElement(7));\n\n    vector<Element*> expected3;\n    expected3.push_back(new IntElement(2));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(5));\n    expected3.push_back(new IntElement(4));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(7));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new IntElement(6));\n    expected3.push_back(new StringElement(\"MSP\"));\n    expected3.push_back(new StringElement(\"MSP\"));\n\n    vector<Element*> result3 = remove_replica(test_tup3);\n    assert(compare(result3, expected3));\n\n    // Clean up\n    for (auto& elem : test_tup3) {\n        delete elem;\n    }\n    for (auto& elem : expected3) {\n        delete elem;\n    }\n    for (auto& elem : result3) {\n        delete elem;\n    }\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <tuple>\n#include <cassert>\n#include <typeinfo>\n#include <string>\n#include <stdexcept>\nusing namespace std;\nclass Element {\npublic:\n    virtual ~Element() = default;\n    virtual bool is_int() const = 0;\n    virtual bool is_string() const = 0;\n    virtual int get_int() const = 0;\n    virtual string get_string() const = 0;\n};\n// \u6d3e\u751f\u7c7b IntElement\nclass IntElement : public Element {\npublic:\n    IntElement(int value) : value_(value) {}\n    bool is_int() const override {\n        return true;\n    }\n    bool is_string() const override {\n        return false;\n    }\n    int get_int() const override {\n        return value_;\n    }\n    string get_string() const override {\n        throw runtime_error(\"Not a string\");\n    }\nprivate:\n    int value_;\n};\n// \u6d3e\u751f\u7c7b StringElement\nclass StringElement : public Element {\npublic:\n    StringElement(const string& value) : value_(value) {}\n    bool is_int() const override {\n        return false;\n    }\n    bool is_string() const override {\n        return true;\n    }\n    int get_int() const override {\n        throw runtime_error(\"Not an integer\");\n    }\n    string get_string() const override {\n        return value_;\n    }\nprivate:\n    string value_;\n};\nstruct ElementComparator {\n    bool operator()(const Element* lhs, const Element* rhs) const {\n        if (lhs->is_int() && rhs->is_int()) {\n            return lhs->get_int() < rhs->get_int();\n        } else if (lhs->is_string() && rhs->is_string()) {\n//begin to write code\n"
    },
    {
        "task_id": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n    return s;\n}\n\n\n",
        "test": "int main()\n{\n    assert(remove_Char(\"aba\", 'a') == \"b\");\n    assert(remove_Char(\"toggle\", 'g') == \"tole\");\n    assert(remove_Char(\"aabbc\", 'b') == \"aac\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to remove all occurrences of a character in a given string.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char c) {\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(remove_Char(\"aba\", 'a') == \"b\");\n    assert(remove_Char(\"toggle\", 'g') == \"tole\");\n    assert(remove_Char(\"aabbc\", 'b') == \"aac\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <algorithm>\nstd::string remove_Char(std::string s, char c) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    s.erase(std::remove(s.begin(), s.end(), c), s.end());\n//begin to write code\n"
    },
    {
        "task_id": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.",
        "code_str": "\n#include <vector>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n        test_list.insert(test_list.begin(), last);\n    }\n    return test_list;\n}\n\n\n",
        "test": "int main()\n{\n    assert((move_first({1, 2, 3, 4}) == std::vector<int>{4, 1, 2, 3}));\n    assert((move_first({0, 1, 2, 3}) == std::vector<int>{3, 0, 1, 2}));\n    assert((move_first({9, 8, 7, 1}) == std::vector<int>{1, 9, 8, 7}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to shift last element to first position in the given list.",
        "perturbated_codes": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((move_first({1, 2, 3, 4}) == std::vector<int>{4, 1, 2, 3}));\n    assert((move_first({0, 1, 2, 3}) == std::vector<int>{3, 0, 1, 2}));\n    assert((move_first({9, 8, 7, 1}) == std::vector<int>{1, 9, 8, 7}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <cassert>\n#include <iostream>\nstd::vector<int> move_first(std::vector<int> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!test_list.empty()) {\n        int last = test_list.back();\n        test_list.pop_back();\n//begin to write code\n"
    },
    {
        "task_id": 379,
        "prompt": "Write a function to find the surface area of a cuboid.",
        "code_str": "#include<cassert>\n#include<iostream>\n#include<assert.h>\n\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n\n",
        "test": "int main() {\n    assert(surfacearea_cuboid(1, 2, 3) == 22);\n    assert(surfacearea_cuboid(5, 7, 9) == 286);\n    assert(surfacearea_cuboid(10, 15, 21) == 1350);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the surface area of a cuboid.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(surfacearea_cuboid(1, 2, 3) == 22);\n    assert(surfacearea_cuboid(5, 7, 9) == 286);\n    assert(surfacearea_cuboid(10, 15, 21) == 1350);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\n#include<assert.h>\nint surfacearea_cuboid(int l, int w, int h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int SA = 2 * (l * w + l * h + w * h);\n//begin to write code\n"
    },
    {
        "task_id": 380,
        "prompt": "Write a function to generate a two-dimensional array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nvector<vector<int>> multi_list(int rownum, int colnum) {\n    vector<vector<int>> multi_list(rownum, vector<int>(colnum, 0));\n    for (int row = 0; row < rownum; ++row) {\n        for (int col = 0; col < colnum; ++col) {\n            multi_list[row][col] = row * col;\n        }\n    }\n    return multi_list;\n}\n\n\n",
        "test": "int main() {\n    assert((multi_list(3, 4) == vector<vector<int>>{{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}));\n    assert((multi_list(5, 7) == vector<vector<int>>{{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}));\n    assert((multi_list(10, 15) == vector<vector<int>>{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> multi_list(int rownum, int colnum) {\n    vector<vector<int>> multi_list(rownum, vector<int>(colnum, 0));\n    for (int row = 0; row < rownum; ++row) {\n        for (int col = 0; col < colnum; ++col) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to generate a two-dimensional array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> multi_list(int rownum, int colnum) {\n    vector<vector<int>> multi_list(rownum, vector<int>(colnum, 0));\n    for (int row = 0; row < rownum; ++row) {\n        for (int col = 0; col < colnum; ++col) {\n        double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((multi_list(3, 4) == vector<vector<int>>{{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}}));\n    assert((multi_list(5, 7) == vector<vector<int>>{{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}}));\n    assert((multi_list(10, 15) == vector<vector<int>>{{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<vector<int>> multi_list(int rownum, int colnum) {\n\n    /*\n    progame language:cpp\n    description:Write a function to generate a two-dimensional array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> multi_list(rownum, vector<int>(colnum, 0));\n    for (int row = 0; row < rownum; ++row) {\n        for (int col = 0; col < colnum; ++col) {\n//begin to write code\n"
    },
    {
        "task_id": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\ntypedef tuple<string, int, int> TupleType;\n\n// Function to sort a vector of tuples based on the specified index within the inner tuples\nvector<TupleType> index_on_inner_list(vector<TupleType> list_data, int index_no) {\n    sort(list_data.begin(), list_data.end(), [index_no](const TupleType &a, const TupleType &b) {\n        if (index_no == 0) return get<0>(a) < get<0>(b);\n        else if (index_no == 1) return get<1>(a) < get<1>(b);\n        else return get<2>(a) < get<2>(b);\n    });\n    return list_data;\n}\n\n\n",
        "test": "int main() {\n    vector<TupleType> data = {make_tuple(\"Greyson Fulton\", 98, 99), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Beau Turnbull\", 94, 98)};\n    assert(index_on_inner_list(data, 0) == vector<TupleType>({make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Greyson Fulton\", 98, 99), make_tuple(\"Wyatt Knott\", 91, 94)}));\n    assert(index_on_inner_list(data, 1) == vector<TupleType>({make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Greyson Fulton\", 98, 99)}));\n    assert(index_on_inner_list(data, 2) == vector<TupleType>({make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Greyson Fulton\", 98, 99)}));\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\ntypedef tuple<string, int, int> TupleType;\n// Function to sort a vector of tuples based on the specified index within the inner tuples\nvector<TupleType> index_on_inner_list(vector<TupleType> list_data, int index_no) {\n    sort(list_data.begin(), list_data.end(), [index_no](const TupleType &a, const TupleType &b) {\n        if (index_no == 0) return get<0>(a) < get<0>(b);\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\ntypedef tuple<string, int, int> TupleType;\n// Function to sort a vector of tuples based on the specified index within the inner tuples\nvector<TupleType> index_on_inner_list(vector<TupleType> list_data, int index_no) {\n    sort(list_data.begin(), list_data.end(), [index_no](const TupleType &a, const TupleType &b) {\n        if (index_no == 0) return get<0>(a) < get<0>(b);\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<TupleType> data = {make_tuple(\"Greyson Fulton\", 98, 99), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Beau Turnbull\", 94, 98)};\n    assert(index_on_inner_list(data, 0) == vector<TupleType>({make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Greyson Fulton\", 98, 99), make_tuple(\"Wyatt Knott\", 91, 94)}));\n    assert(index_on_inner_list(data, 1) == vector<TupleType>({make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Greyson Fulton\", 98, 99)}));\n    assert(index_on_inner_list(data, 2) == vector<TupleType>({make_tuple(\"Wyatt Knott\", 91, 94), make_tuple(\"Brady Kent\", 97, 96), make_tuple(\"Beau Turnbull\", 94, 98), make_tuple(\"Greyson Fulton\", 98, 99)}));\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\ntypedef tuple<string, int, int> TupleType;\n// Function to sort a vector of tuples based on the specified index within the inner tuples\nvector<TupleType> index_on_inner_list(vector<TupleType> list_data, int index_no) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sort(list_data.begin(), list_data.end(), [index_no](const TupleType &a, const TupleType &b) {\n        if (index_no == 0) return get<0>(a) < get<0>(b);\n//begin to write code\n"
    },
    {
        "task_id": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint find_rotation_count(const vector<int>& A) {\n    int left = 0, right = A.size() - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        int mid = (left + right) / 2;\n        int next = (mid + 1) % A.size();\n        int prev = (mid - 1 + A.size()) % A.size();\n        if (A[mid] <= A[next] && A[mid] <= A[prev]) {\n            return mid;\n        } else if (A[mid] <= A[right]) {\n            right = mid - 1;\n        } else if (A[mid] >= A[left]) {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_rotation_count({8, 9, 10, 1, 2, 3, 4, 5, 6, 7}) == 3);\n    assert(find_rotation_count({8, 9, 10, 2, 5, 6}) == 3);\n    assert(find_rotation_count({2, 5, 6, 8, 9, 10}) == 0);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_rotation_count(const vector<int>& A) {\n    int left = 0, right = A.size() - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        int mid = (left + right) / 2;\n        int next = (mid + 1) % A.size();\n        int prev = (mid - 1 + A.size()) % A.size();\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_rotation_count(const vector<int>& A) {\n    int left = 0, right = A.size() - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        int mid = (left + right) / 2;\n        int next = (mid + 1) % A.size();\n        int prev = (mid - 1 + A.size()) % A.size();\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_rotation_count({8, 9, 10, 1, 2, 3, 4, 5, 6, 7}) == 3);\n    assert(find_rotation_count({8, 9, 10, 2, 5, 6}) == 3);\n    assert(find_rotation_count({2, 5, 6, 8, 9, 10}) == 0);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint find_rotation_count(const vector<int>& A) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the number of rotations in a circularly sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int left = 0, right = A.size() - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        int mid = (left + right) / 2;\n        int next = (mid + 1) % A.size();\n        int prev = (mid - 1 + A.size()) % A.size();\n//begin to write code\n"
    },
    {
        "task_id": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint even_bit_toggle_number(int n) {\n    int res = 0, count = 0, temp = n;\n    while(temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}\n\n\n",
        "test": "int main()\n{\n    assert(even_bit_toggle_number(10) == 15);\n    assert(even_bit_toggle_number(20) == 1);\n    assert(even_bit_toggle_number(30) == 11);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n    int res = 0, count = 0, temp = n;\n    while(temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to toggle all odd bits of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n    int res = 0, count = 0, temp = n;\n    while(temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(even_bit_toggle_number(10) == 15);\n    assert(even_bit_toggle_number(20) == 1);\n    assert(even_bit_toggle_number(30) == 11);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint even_bit_toggle_number(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to toggle all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0, count = 0, temp = n;\n    while(temp > 0) {\n        if (count % 2 == 0) {\n            res = res | (1 << count);\n//begin to write code\n"
    },
    {
        "task_id": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n",
        "test": "int main() {\n    assert(frequency_Of_Smallest(5, {1, 2, 3, 4, 3}) == 1);\n    assert(frequency_Of_Smallest(7, {3, 1, 2, 5, 6, 2, 3}) == 1);\n    assert(frequency_Of_Smallest(7, {3, 3, 6, 3, 7, 4, 9}) == 3);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the frequency of the smallest value in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(frequency_Of_Smallest(5, {1, 2, 3, 4, 3}) == 1);\n    assert(frequency_Of_Smallest(7, {3, 1, 2, 5, 6, 2, 3}) == 1);\n    assert(frequency_Of_Smallest(7, {3, 3, 6, 3, 7, 4, 9}) == 3);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Smallest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n//begin to write code\n"
    },
    {
        "task_id": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n// \u51fd\u6570\u5b9a\u4e49\nint get_perrin(int n) {\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 2;\n    }\n    return get_perrin(n - 2) + get_perrin(n - 3);\n}\n\n\n",
        "test": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(get_perrin(9) == 12);\n    assert(get_perrin(4) == 2);\n    assert(get_perrin(6) == 5);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint get_perrin(int n) {\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n'th perrin number using recursion.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint get_perrin(int n) {\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n    double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(get_perrin(9) == 12);\n    assert(get_perrin(4) == 2);\n    assert(get_perrin(6) == 5);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n// \u51fd\u6570\u5b9a\u4e49\nint get_perrin(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n'th perrin number using recursion.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n//begin to write code\n"
    },
    {
        "task_id": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nint swap_count(const std::string& s) {\n    const char* chars = s.c_str();\n    int count_left = 0;\n    int count_right = 0;\n    int swap = 0;\n    int imbalance = 0; \n    for (size_t i = 0; i < s.length(); i++) {\n        if (chars[i] == '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n                swap += imbalance;\n                imbalance -= 1;\n            }\n        } else if (chars[i] == ']') {\n            count_right += 1;\n            imbalance = count_right - count_left;\n        }\n    }\n    return swap;\n}\n\n\n",
        "test": "int main() {\n    assert(swap_count(\"[]][][\") == 2);\n    assert(swap_count(\"[[][]]\") == 0);\n    assert(swap_count(\"[[][]]][\") == 1);\n    std::cout << \"All test cases passed\" << std::endl;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nint swap_count(const std::string& s) {\n    const char* chars = s.c_str();\n    int count_left = 0;\n    int count_right = 0;\n    int swap = 0;\n    int imbalance = 0; \n    for (size_t i = 0; i < s.length(); i++) {\n        if (chars[i] == '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nint swap_count(const std::string& s) {\n    const char* chars = s.c_str();\n    int count_left = 0;\n    int count_right = 0;\n    int swap = 0;\n    int imbalance = 0; \n    for (size_t i = 0; i < s.length(); i++) {\n        if (chars[i] == '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n            double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(swap_count(\"[]][][\") == 2);\n    assert(swap_count(\"[[][]]\") == 0);\n    assert(swap_count(\"[[][]]][\") == 1);\n    std::cout << \"All test cases passed\" << std::endl;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nint swap_count(const std::string& s) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const char* chars = s.c_str();\n    int count_left = 0;\n    int count_right = 0;\n    int swap = 0;\n    int imbalance = 0; \n    for (size_t i = 0; i < s.length(); i++) {\n        if (chars[i] == '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n//begin to write code\n"
    },
    {
        "task_id": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n        last_char == 'C' || last_char == 'E') {\n        return \"Even\";\n    } else {\n        return \"Odd\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(even_or_odd(\"AB3454D\") == \"Odd\");\n    assert(even_or_odd(\"ABC\") == \"Even\");\n    assert(even_or_odd(\"AAD\") == \"Odd\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the hexadecimal number is even or odd.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string even_or_odd(const std::string& N) {\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(even_or_odd(\"AB3454D\") == \"Odd\");\n    assert(even_or_odd(\"ABC\") == \"Even\");\n    assert(even_or_odd(\"AAD\") == \"Odd\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string even_or_odd(const std::string& N) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the hexadecimal number is even or odd.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int l = N.length();\n    char last_char = N[l - 1];\n    if (last_char == '0' || last_char == '2' ||\n        last_char == '4' || last_char == '6' ||\n        last_char == '8' || last_char == 'A' ||\n//begin to write code\n"
    },
    {
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code_str": "#include<cassert>\n#include <iostream>\n\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(highest_Power_of_2(10) == 8);\n    assert(highest_Power_of_2(19) == 16);\n    assert(highest_Power_of_2(32) == 32);\n    \n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the highest power of 2 that is less than or equal to n.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n        double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    // \u6d4b\u8bd5\u7528\u4f8b\n    assert(highest_Power_of_2(10) == 8);\n    assert(highest_Power_of_2(19) == 16);\n    assert(highest_Power_of_2(32) == 32);\n    \n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n// \u51fd\u6570\u5b9a\u4e49\nint highest_Power_of_2(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (int i = n; i > 0; i--) {\n        if ((i & (i - 1)) == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 389,
        "prompt": "Write a function to find the n'th lucas number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(find_lucas(9) == 76);\n    assert(find_lucas(4) == 7);\n    assert(find_lucas(3) == 4);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n    if (n == 0) {\n        return 2;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the n'th lucas number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    if (n == 0) {\n        return 2;\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(find_lucas(9) == 76);\n    assert(find_lucas(4) == 7);\n    assert(find_lucas(3) == 4);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint find_lucas(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n == 0) {\n        return 2;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\ntemplate <typename T>\nstd::vector<std::string> add_string(const std::vector<T>& list, const std::string& format) {\n    std::vector<std::string> result;\n    for (const auto& item : list) {\n        result.push_back(format + std::to_string(item));\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((add_string(std::vector<int>{1, 2, 3, 4}, \"temp\") == std::vector<std::string>{\"temp1\", \"temp2\", \"temp3\", \"temp4\"}));\n    assert((add_string(std::vector<char>{'a', 'b', 'c', 'd'}, \"python\") == std::vector<std::string>{\"python97\", \"python98\", \"python99\", \"python100\"}));\n    assert((add_string(std::vector<int>{5, 6, 7, 8}, \"string\") == std::vector<std::string>{\"string5\", \"string6\", \"string7\", \"string8\"}));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nstd::vector<std::string> add_string(const std::vector<T>& list, const std::string& format) {\n    std::vector<std::string> result;\n    for (const auto& item : list) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nstd::vector<std::string> add_string(const std::vector<T>& list, const std::string& format) {\n    std::vector<std::string> result;\n    for (const auto& item : list) {\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((add_string(std::vector<int>{1, 2, 3, 4}, \"temp\") == std::vector<std::string>{\"temp1\", \"temp2\", \"temp3\", \"temp4\"}));\n    assert((add_string(std::vector<char>{'a', 'b', 'c', 'd'}, \"python\") == std::vector<std::string>{\"python97\", \"python98\", \"python99\", \"python100\"}));\n    assert((add_string(std::vector<int>{5, 6, 7, 8}, \"string\") == std::vector<std::string>{\"string5\", \"string6\", \"string7\", \"string8\"}));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\ntemplate <typename T>\nstd::vector<std::string> add_string(const std::vector<T>& list, const std::string& format) {\n\n    /*\n    progame language:cpp\n    description:Write a function to insert a given string at the beginning of all items in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    for (const auto& item : list) {\n//begin to write code\n"
    },
    {
        "task_id": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n#include <cassert>\n\nstd::vector<std::map<std::string, std::map<std::string, int>>> convert_list_dictionary(const std::vector<std::string> &l1, const std::vector<std::string> &l2, const std::vector<int> &l3) {\n    std::vector<std::map<std::string, std::map<std::string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n        result.push_back({{l1[i], {{l2[i], l3[i]}}}});\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((convert_list_dictionary({\"S001\", \"S002\", \"S003\", \"S004\"}, {\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"}, {85, 98, 89, 92}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"S001\", {{\"Adina Park\", 85}}}}, {{\"S002\", {{\"Leyton Marsh\", 98}}}}, {{\"S003\", {{\"Duncan Boyle\", 89}}}}, {{\"S004\", {{\"Saim Richards\", 92}}}}}));\n    assert((convert_list_dictionary({\"abc\", \"def\", \"ghi\", \"jkl\"}, {\"python\", \"program\", \"language\", \"programs\"}, {100, 200, 300, 400}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"abc\", {{\"python\", 100}}}}, {{\"def\", {{\"program\", 200}}}}, {{\"ghi\", {{\"language\", 300}}}}, {{\"jkl\", {{\"programs\", 400}}}}}));\n    assert((convert_list_dictionary({\"A1\", \"A2\", \"A3\", \"A4\"}, {\"java\", \"C\", \"C++\", \"DBMS\"}, {10, 20, 30, 40}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"A1\", {{\"java\", 10}}}}, {{\"A2\", {{\"C\", 20}}}}, {{\"A3\", {{\"C++\", 30}}}}, {{\"A4\", {{\"DBMS\", 40}}}}}));\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n#include <cassert>\nstd::vector<std::map<std::string, std::map<std::string, int>>> convert_list_dictionary(const std::vector<std::string> &l1, const std::vector<std::string> &l2, const std::vector<int> &l3) {\n    std::vector<std::map<std::string, std::map<std::string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert more than one list to nested dictionary.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n#include <cassert>\nstd::vector<std::map<std::string, std::map<std::string, int>>> convert_list_dictionary(const std::vector<std::string> &l1, const std::vector<std::string> &l2, const std::vector<int> &l3) {\n    std::vector<std::map<std::string, std::map<std::string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((convert_list_dictionary({\"S001\", \"S002\", \"S003\", \"S004\"}, {\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"}, {85, 98, 89, 92}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"S001\", {{\"Adina Park\", 85}}}}, {{\"S002\", {{\"Leyton Marsh\", 98}}}}, {{\"S003\", {{\"Duncan Boyle\", 89}}}}, {{\"S004\", {{\"Saim Richards\", 92}}}}}));\n    assert((convert_list_dictionary({\"abc\", \"def\", \"ghi\", \"jkl\"}, {\"python\", \"program\", \"language\", \"programs\"}, {100, 200, 300, 400}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"abc\", {{\"python\", 100}}}}, {{\"def\", {{\"program\", 200}}}}, {{\"ghi\", {{\"language\", 300}}}}, {{\"jkl\", {{\"programs\", 400}}}}}));\n    assert((convert_list_dictionary({\"A1\", \"A2\", \"A3\", \"A4\"}, {\"java\", \"C\", \"C++\", \"DBMS\"}, {10, 20, 30, 40}) == \n           std::vector<std::map<std::string, std::map<std::string, int>>>{{{\"A1\", {{\"java\", 10}}}}, {{\"A2\", {{\"C\", 20}}}}, {{\"A3\", {{\"C++\", 30}}}}, {{\"A4\", {{\"DBMS\", 40}}}}}));\n\n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n#include <cassert>\nstd::vector<std::map<std::string, std::map<std::string, int>>> convert_list_dictionary(const std::vector<std::string> &l1, const std::vector<std::string> &l2, const std::vector<int> &l3) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert more than one list to nested dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::map<std::string, std::map<std::string, int>>> result;\n    for (size_t i = 0; i < l1.size(); ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint get_max_sum(int n) {\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n\n    for (int i = 2; i <= n; ++i) {\n        res.push_back(std::max(i, res[i / 2] + res[i / 3] + res[i / 4] + res[i / 5]));\n    }\n\n    return res[n];\n}\n\n\n",
        "test": "int main() {\n    assert(get_max_sum(60) == 106);\n    assert(get_max_sum(10) == 12);\n    assert(get_max_sum(2) == 2);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint get_max_sum(int n) {\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint get_max_sum(int n) {\n    std::vector<int> res;\n    res.push_back(0);\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    res.push_back(1);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(get_max_sum(60) == 106);\n    assert(get_max_sum(10) == 12);\n    assert(get_max_sum(2) == 2);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint get_max_sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    res.push_back(0);\n    res.push_back(1);\n//begin to write code\n"
    },
    {
        "task_id": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.",
        "code_str": "\n#include <vector>\n#include <iostream>\n#include <cassert>\n\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n            max_length = vec.size();\n            max_list = vec;\n        }\n    }\n    return {max_length, max_list};\n}\n\n\n",
        "test": "int main()\n{\n    assert(max_length_list({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(3, std::vector<int>{13, 15, 17}));\n    assert(max_length_list({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}) == std::make_pair(5, std::vector<int>{1, 2, 3, 4, 5}));\n    assert(max_length_list({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}) == std::make_pair(4, std::vector<int>{6, 7, 8, 9}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the list with maximum length using lambda function.",
        "perturbated_codes": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(max_length_list({{0}, {1, 3}, {5, 7}, {9, 11}, {13, 15, 17}}) == std::make_pair(3, std::vector<int>{13, 15, 17}));\n    assert(max_length_list({{1, 2, 3, 4, 5}, {1, 2, 3, 4}, {1, 2, 3}, {1, 2}, {1}}) == std::make_pair(5, std::vector<int>{1, 2, 3, 4, 5}));\n    assert(max_length_list({{3, 4, 5}, {6, 7, 8, 9}, {10, 11, 12}}) == std::make_pair(4, std::vector<int>{6, 7, 8, 9}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <iostream>\n#include <cassert>\nstd::pair<int, std::vector<int>> max_length_list(const std::vector<std::vector<int>>& input_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the list with maximum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max_length = 0;\n    std::vector<int> max_list;\n    for (const auto& vec : input_list) {\n        if (vec.size() > max_length) {\n//begin to write code\n"
    },
    {
        "task_id": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.",
        "code_str": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\n\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n            break;\n        }\n        temp.insert(ele);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(check_distinct({1, 4, 5, 6, 1, 4}) == false);\n    assert(check_distinct({1, 4, 5, 6}) == true);\n    assert(check_distinct({2, 3, 4, 5, 6}) == true);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if given tuple is distinct or not.",
        "perturbated_codes": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n            double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_distinct({1, 4, 5, 6, 1, 4}) == false);\n    assert(check_distinct({1, 4, 5, 6}) == true);\n    assert(check_distinct({2, 3, 4, 5, 6}) == true);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <cassert>\nbool check_distinct(std::vector<int> test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if given tuple is distinct or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    bool res = true;\n    std::set<int> temp;\n    for (int ele : test_vec) {\n        if (temp.find(ele) != temp.end()) {\n            res = false;\n//begin to write code\n"
    },
    {
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\n\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n        }\n    }\n    for (char c : char_order) {\n        if (ctr[c] == 1) {\n            return c;\n        }\n    }\n    return '\\0'; // using '\\0' to denote no non-repeating character found, similar to None in Python\n}\n\n\n",
        "test": "int main() {\n    assert(first_non_repeating_character(\"abcabc\") == '\\0');\n    assert(first_non_repeating_character(\"abc\") == 'a');\n    assert(first_non_repeating_character(\"ababc\") == 'c');\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first non-repeated character in a given string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first_non_repeating_character(\"abcabc\") == '\\0');\n    assert(first_non_repeating_character(\"abc\") == 'a');\n    assert(first_non_repeating_character(\"ababc\") == 'c');\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n#include <cassert>\nchar first_non_repeating_character(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first non-repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<char> char_order;\n    std::map<char, int> ctr;\n    for (char c : str1) {\n        if (ctr.find(c) != ctr.end()) {\n            ctr[c] += 1;\n        } else {\n            ctr[c] = 1;\n            char_order.push_back(c);\n//begin to write code\n"
    },
    {
        "task_id": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nstring check_char(string str) {\n    int p1 = 0;\n    int p2 = str.size() -1 ;\n    if(str[p1] == str[p2])\n    {\n        return \"Valid\";\n    }\n    return \"Invalid\";\n}",
        "test": "int main()\n{\n    assert(check_char(\"abba\") == \"Valid\");\n    assert(check_char(\"a\") == \"Valid\");\n    assert(check_char(\"abcd\") == \"Invalid\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_char(string str) {\n    int p1 = 0;\n    int p2 = str.size() -1 ;\n    if(str[p1] == str[p2])\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_char(string str) {\n    int p1 = 0;\n    int p2 = str.size() -1 ;\n    if(str[p1] == str[p2])\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_char(\"abba\") == \"Valid\");\n    assert(check_char(\"a\") == \"Valid\");\n    assert(check_char(\"abcd\") == \"Invalid\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring check_char(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int p1 = 0;\n    int p2 = str.size() -1 ;\n    if(str[p1] == str[p2])\n//begin to write code\n"
    },
    {
        "task_id": 397,
        "prompt": "Write a function to find the median of three specific numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint median_numbers(int a, int b, int c) {\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\n\n",
        "test": "int main() {\n    assert(median_numbers(25, 55, 65) == 55);\n    assert(median_numbers(20, 10, 30) == 20);\n    assert(median_numbers(15, 45, 75) == 45);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint median_numbers(int a, int b, int c) {\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the median of three specific numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint median_numbers(int a, int b, int c) {\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(median_numbers(25, 55, 65) == 55);\n    assert(median_numbers(20, 10, 30) == 20);\n    assert(median_numbers(15, 45, 75) == 45);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint median_numbers(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the median of three specific numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n//begin to write code\n"
    },
    {
        "task_id": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\n\nusing namespace std;\n\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n                result += c - '0';\n            }\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(sum_of_digits({10, 2, 56}) == 14);\n    assert(sum_of_digits({10, 20, 4, 5, 70}) == 19);\n    assert(sum_of_digits({10, 20, -4, 5, -70}) == 19);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n            double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_of_digits({10, 2, 56}) == 14);\n    assert(sum_of_digits({10, 20, 4, 5, 70}) == 19);\n    assert(sum_of_digits({10, 20, -4, 5, -70}) == 19);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n#include <cctype>\nusing namespace std;\nint sum_of_digits(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to compute the sum of digits of each number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result = 0;\n    for (int n : nums) {\n        string numStr = to_string(n);\n        for (char c : numStr) {\n            if (isdigit(c)) {\n//begin to write code\n"
    },
    {
        "task_id": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\n\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n        std::get<2>(test_tup1) ^ std::get<2>(test_tup2),\n        std::get<3>(test_tup1) ^ std::get<3>(test_tup2)\n    );\n}\n\n\n",
        "test": "int main() {\n    assert(bitwise_xor(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(15, 6, 5, 10));\n    assert(bitwise_xor(std::make_tuple(11, 5, 7, 10), std::make_tuple(6, 3, 4, 4)) == std::make_tuple(13, 6, 3, 14));\n    assert(bitwise_xor(std::make_tuple(12, 6, 8, 11), std::make_tuple(7, 4, 5, 6)) == std::make_tuple(11, 2, 13, 13));\n    \n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(bitwise_xor(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(15, 6, 5, 10));\n    assert(bitwise_xor(std::make_tuple(11, 5, 7, 10), std::make_tuple(6, 3, 4, 4)) == std::make_tuple(13, 6, 3, 14));\n    assert(bitwise_xor(std::make_tuple(12, 6, 8, 11), std::make_tuple(7, 4, 5, 6)) == std::make_tuple(11, 2, 13, 13));\n    \n    std::cout << \"All tests passed successfully!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <tuple>\nstd::tuple<int, int, int, int> bitwise_xor(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup1) ^ std::get<0>(test_tup2),\n        std::get<1>(test_tup1) ^ std::get<1>(test_tup2),\n//begin to write code\n"
    },
    {
        "task_id": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <cassert>\n\nint extract_freq(const std::vector<std::pair<int, int>>& test_list) {\n    std::set<std::pair<int, int>> unique_tuples;\n    for (const auto& sub : test_list) {\n        if (sub.first <= sub.second) {\n            unique_tuples.insert(sub);\n        } else {\n            unique_tuples.insert({sub.second, sub.first});\n        }\n    }\n    return unique_tuples.size();\n}\n\n\n",
        "test": "int main() {\n    assert(extract_freq({{3, 4}, {1, 2}, {4, 3}, {5, 6}}) == 3);\n    assert(extract_freq({{4, 15}, {2, 3}, {5, 4}, {6, 7}}) == 4);\n    assert(extract_freq({{5, 16}, {2, 3}, {6, 5}, {6, 9}}) == 4);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <cassert>\nint extract_freq(const std::vector<std::pair<int, int>>& test_list) {\n    std::set<std::pair<int, int>> unique_tuples;\n    for (const auto& sub : test_list) {\n        if (sub.first <= sub.second) {\n            unique_tuples.insert(sub);\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <cassert>\nint extract_freq(const std::vector<std::pair<int, int>>& test_list) {\n    std::set<std::pair<int, int>> unique_tuples;\n    for (const auto& sub : test_list) {\n        if (sub.first <= sub.second) {\n            unique_tuples.insert(sub);\n            double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(extract_freq({{3, 4}, {1, 2}, {4, 3}, {5, 6}}) == 3);\n    assert(extract_freq({{4, 15}, {2, 3}, {5, 4}, {6, 7}}) == 4);\n    assert(extract_freq({{5, 16}, {2, 3}, {6, 5}, {6, 9}}) == 4);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n#include <cassert>\nint extract_freq(const std::vector<std::pair<int, int>>& test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<std::pair<int, int>> unique_tuples;\n    for (const auto& sub : test_list) {\n        if (sub.first <= sub.second) {\n            unique_tuples.insert(sub);\n//begin to write code\n"
    },
    {
        "task_id": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code_str": "#include<iostream>\n    \n\n#include <tuple>\n#include <cassert>\n\nusing namespace std;\n\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> add_nested_tuples(\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup1,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup2) \n{\n    tuple<int, int> res1 = make_tuple(get<0>(get<0>(test_tup1)) + get<0>(get<0>(test_tup2)), get<1>(get<0>(test_tup1)) + get<1>(get<0>(test_tup2)));\n    tuple<int, int> res2 = make_tuple(get<0>(get<1>(test_tup1)) + get<0>(get<1>(test_tup2)), get<1>(get<1>(test_tup1)) + get<1>(get<1>(test_tup2)));\n    tuple<int, int> res3 = make_tuple(get<0>(get<2>(test_tup1)) + get<0>(get<2>(test_tup2)), get<1>(get<2>(test_tup1)) + get<1>(get<2>(test_tup2)));\n    tuple<int, int> res4 = make_tuple(get<0>(get<3>(test_tup1)) + get<0>(get<3>(test_tup2)), get<1>(get<3>(test_tup1)) + get<1>(get<3>(test_tup2)));\n\n    return make_tuple(res1, res2, res3, res4);\n}\n\n\n",
        "test": "int main()\n{\n    assert(add_nested_tuples(make_tuple(make_tuple(1, 3), make_tuple(4, 5), make_tuple(2, 9), make_tuple(1, 10)),\n                             make_tuple(make_tuple(6, 7), make_tuple(3, 9), make_tuple(1, 1), make_tuple(7, 3))) == \n           make_tuple(make_tuple(7, 10), make_tuple(7, 14), make_tuple(3, 10), make_tuple(8, 13)));\n\n    assert(add_nested_tuples(make_tuple(make_tuple(2, 4), make_tuple(5, 6), make_tuple(3, 10), make_tuple(2, 11)),\n                             make_tuple(make_tuple(7, 8), make_tuple(4, 10), make_tuple(2, 2), make_tuple(8, 4))) == \n           make_tuple(make_tuple(9, 12), make_tuple(9, 16), make_tuple(5, 12), make_tuple(10, 15)));\n\n    assert(add_nested_tuples(make_tuple(make_tuple(3, 5), make_tuple(6, 7), make_tuple(4, 11), make_tuple(3, 12)),\n                             make_tuple(make_tuple(8, 9), make_tuple(5, 11), make_tuple(3, 3), make_tuple(9, 5))) == \n           make_tuple(make_tuple(11, 14), make_tuple(11, 18), make_tuple(7, 14), make_tuple(12, 17)));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> add_nested_tuples(\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup1,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup2) \n{\n    tuple<int, int> res1 = make_tuple(get<0>(get<0>(test_tup1)) + get<0>(get<0>(test_tup2)), get<1>(get<0>(test_tup1)) + get<1>(get<0>(test_tup2)));\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "perturbated_codes": "#include<iostream>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> add_nested_tuples(\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup1,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup2) \n{\n    tuple<int, int> res1 = make_tuple(get<0>(get<0>(test_tup1)) + get<0>(get<0>(test_tup2)), get<1>(get<0>(test_tup1)) + get<1>(get<0>(test_tup2)));\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(add_nested_tuples(make_tuple(make_tuple(1, 3), make_tuple(4, 5), make_tuple(2, 9), make_tuple(1, 10)),\n                             make_tuple(make_tuple(6, 7), make_tuple(3, 9), make_tuple(1, 1), make_tuple(7, 3))) == \n           make_tuple(make_tuple(7, 10), make_tuple(7, 14), make_tuple(3, 10), make_tuple(8, 13)));\n\n    assert(add_nested_tuples(make_tuple(make_tuple(2, 4), make_tuple(5, 6), make_tuple(3, 10), make_tuple(2, 11)),\n                             make_tuple(make_tuple(7, 8), make_tuple(4, 10), make_tuple(2, 2), make_tuple(8, 4))) == \n           make_tuple(make_tuple(9, 12), make_tuple(9, 16), make_tuple(5, 12), make_tuple(10, 15)));\n\n    assert(add_nested_tuples(make_tuple(make_tuple(3, 5), make_tuple(6, 7), make_tuple(4, 11), make_tuple(3, 12)),\n                             make_tuple(make_tuple(8, 9), make_tuple(5, 11), make_tuple(3, 3), make_tuple(9, 5))) == \n           make_tuple(make_tuple(11, 14), make_tuple(11, 18), make_tuple(7, 14), make_tuple(12, 17)));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> add_nested_tuples(\n\n    /*\n    progame language:cpp\n    description:Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup1,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> test_tup2) \n{\n    tuple<int, int> res1 = make_tuple(get<0>(get<0>(test_tup1)) + get<0>(get<0>(test_tup2)), get<1>(get<0>(test_tup1)) + get<1>(get<0>(test_tup2)));\n//begin to write code\n"
    },
    {
        "task_id": 402,
        "prompt": "Write a function to compute the value of ncr%p.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nint ncr_modp(int n, int r, int p) {\n    std::vector<int> C(r + 1, 0);\n    C[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = std::min(i, r); j > 0; --j) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}\n\n\n",
        "test": "int main()\n{\n    assert(ncr_modp(10, 2, 13) == 6);\n    assert(ncr_modp(15, 12, 43) == 25);\n    assert(ncr_modp(17, 9, 18) == 10);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nint ncr_modp(int n, int r, int p) {\n    std::vector<int> C(r + 1, 0);\n    C[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = std::min(i, r); j > 0; --j) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to compute the value of ncr%p.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nint ncr_modp(int n, int r, int p) {\n    std::vector<int> C(r + 1, 0);\n    C[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = std::min(i, r); j > 0; --j) {\n        double temp_var_7 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(ncr_modp(10, 2, 13) == 6);\n    assert(ncr_modp(15, 12, 43) == 25);\n    assert(ncr_modp(17, 9, 18) == 10);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nint ncr_modp(int n, int r, int p) {\n\n    /*\n    progame language:cpp\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> C(r + 1, 0);\n    C[0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        for (int j = std::min(i, r); j > 0; --j) {\n//begin to write code\n"
    },
    {
        "task_id": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.",
        "code_str": "#include<iostream>\n    \n#include <regex>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n\n    if (url.empty()) {\n        return false;\n    }\n\n    return regex_search(url, pattern);\n}",
        "test": "int main() {\n    assert(is_valid_URL(\"https://www.google.com\") == true);\n    assert(is_valid_URL(\"https:/www.gmail.com\") == false);\n    assert(is_valid_URL(\"https:// www.redit.com\") == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if a url is valid or not using regex.",
        "perturbated_codes": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_valid_URL(\"https://www.google.com\") == true);\n    assert(is_valid_URL(\"https:/www.gmail.com\") == false);\n    assert(is_valid_URL(\"https:// www.redit.com\") == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <regex>\n#include <cassert>\n#include <string>\nusing namespace std;\nbool is_valid_URL(string url) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if a url is valid or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"((http|https)://)(www.)?[a-zA-Z0-9@:%._\\\\+~#?&//=]{2,256}\\\\.[a-z]{2,6}([-a-zA-Z0-9@:%._\\\\+~#?&//=]*)\");\n    if (url.empty()) {\n//begin to write code\n"
    },
    {
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "code_str": "#include<iostream>\n    \n#include<cassert>\n#include <assert.h>\n\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(minimum(1, 2) == 1);\n    assert(minimum(-5, -4) == -5);\n    assert(minimum(0, 0) == 0);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the minimum of two numbers.",
        "perturbated_codes": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(int a, int b) {\n    if (a <= b) {\n        return a;\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(minimum(1, 2) == 1);\n    assert(minimum(-5, -4) == -5);\n    assert(minimum(0, 0) == 0);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<cassert>\n#include <assert.h>\n//\u51fd\u6570\u5b9a\u4e49\nint minimum(int a, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a <= b) {\n        return a;\n//begin to write code\n"
    },
    {
        "task_id": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "code_str": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cstddef>\n#include <cassert>\n\nusing namespace std;\n\nusing MyTuple = tuple<char, int, char, char, char, char, char, char, char, char>;\n\ntemplate<typename T, size_t I = 0>\nbool check_tuplex(const MyTuple& t, const T& value) {\n    if constexpr (I == tuple_size<MyTuple>::value) {\n        return false;\n    } else {\n        return get<I>(t) == value || check_tuplex<T, I + 1>(t, value);\n    }\n}",
        "test": "int main()\n{\n    MyTuple myTuple = make_tuple('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e');\n\n    assert(check_tuplex(myTuple, 'r') == true);\n    assert(check_tuplex(myTuple, '5') == false);\n    assert(check_tuplex(myTuple, 3) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cstddef>\n#include <cassert>\nusing namespace std;\nusing MyTuple = tuple<char, int, char, char, char, char, char, char, char, char>;\ntemplate<typename T, size_t I = 0>\nbool check_tuplex(const MyTuple& t, const T& value) {\n    if constexpr (I == tuple_size<MyTuple>::value) {\n        return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether an element exists within a tuple.",
        "perturbated_codes": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cstddef>\n#include <cassert>\nusing namespace std;\nusing MyTuple = tuple<char, int, char, char, char, char, char, char, char, char>;\ntemplate<typename T, size_t I = 0>\nbool check_tuplex(const MyTuple& t, const T& value) {\n    if constexpr (I == tuple_size<MyTuple>::value) {\n        return false;\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    MyTuple myTuple = make_tuple('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e');\n\n    assert(check_tuplex(myTuple, 'r') == true);\n    assert(check_tuplex(myTuple, '5') == false);\n    assert(check_tuplex(myTuple, 3) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <tuple>\n#include <type_traits>\n#include <cstddef>\n#include <cassert>\nusing namespace std;\nusing MyTuple = tuple<char, int, char, char, char, char, char, char, char, char>;\ntemplate<typename T, size_t I = 0>\nbool check_tuplex(const MyTuple& t, const T& value) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether an element exists within a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if constexpr (I == tuple_size<MyTuple>::value) {\n        return false;\n//begin to write code\n"
    },
    {
        "task_id": 406,
        "prompt": "Write a python function to find the parity of a given number.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n\nstd::string find_Parity(unsigned int x) {\n    unsigned int y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    y = y ^ (y >> 16);\n    if (y & 1) {\n        return \"Odd Parity\";\n    }\n    return \"Even Parity\";\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_Parity(12) == \"Even Parity\");\n    assert(find_Parity(7) == \"Odd Parity\");\n    assert(find_Parity(10) == \"Even Parity\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string find_Parity(unsigned int x) {\n    unsigned int y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the parity of a given number.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string find_Parity(unsigned int x) {\n    unsigned int y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_Parity(12) == \"Even Parity\");\n    assert(find_Parity(7) == \"Odd Parity\");\n    assert(find_Parity(10) == \"Even Parity\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\nstd::string find_Parity(unsigned int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the parity of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    unsigned int y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n//begin to write code\n"
    },
    {
        "task_id": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code_str": "#include<iostream>\n    \n\n#include <string>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nint rearrange_bigger(int n) {\n    string nums = to_string(n);\n    for (int i = nums.size() - 2; i >= 0; --i) {\n        if (nums[i] < nums[i+1]) {\n            string z = nums.substr(i);\n            char y = *min_element(z.begin() + 1, z.end(), [first = z[0]](char a, char b) { return a > first && (b > first ? a < b : true); });\n            z.erase(remove(z.begin(), z.end(), y), z.end());\n            sort(z.begin(), z.end());\n            nums = nums.substr(0, i) + y + z;\n            return stoi(nums);\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(rearrange_bigger(12) == 21);\n    assert(rearrange_bigger(10) == false);\n    assert(rearrange_bigger(102) == 120);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint rearrange_bigger(int n) {\n    string nums = to_string(n);\n    for (int i = nums.size() - 2; i >= 0; --i) {\n        if (nums[i] < nums[i+1]) {\n            string z = nums.substr(i);\n            char y = *min_element(z.begin() + 1, z.end(), [first = z[0]](char a, char b) { return a > first && (b > first ? a < b : true); });\n            z.erase(remove(z.begin(), z.end(), y), z.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint rearrange_bigger(int n) {\n    string nums = to_string(n);\n    for (int i = nums.size() - 2; i >= 0; --i) {\n        if (nums[i] < nums[i+1]) {\n            string z = nums.substr(i);\n            char y = *min_element(z.begin() + 1, z.end(), [first = z[0]](char a, char b) { return a > first && (b > first ? a < b : true); });\n            z.erase(remove(z.begin(), z.end(), y), z.end());\n            double temp_var_8 = 9.9;if (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(rearrange_bigger(12) == 21);\n    assert(rearrange_bigger(10) == false);\n    assert(rearrange_bigger(102) == 120);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint rearrange_bigger(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to create the next bigger number by rearranging the digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    string nums = to_string(n);\n    for (int i = nums.size() - 2; i >= 0; --i) {\n        if (nums[i] < nums[i+1]) {\n            string z = nums.substr(i);\n            char y = *min_element(z.begin() + 1, z.end(), [first = z[0]](char a, char b) { return a > first && (b > first ? a < b : true); });\n            z.erase(remove(z.begin(), z.end(), y), z.end());\n//begin to write code\n"
    },
    {
        "task_id": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code_str": "#include <vector>\n#include <queue>\n#include <cassert>\n#include <iostream>\n\nusing namespace std;\n\nvector<vector<int>> k_smallest_pairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    auto comp = [&](const pair<int, int>& a, const pair<int, int>& b) {\n        if(nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second])\n        {\n            return true;\n        }\n        else if(nums1[a.first] + nums2[a.second] == nums1[b.first] + nums2[b.second])\n        {\n            return nums1[a.first] > nums1[b.first];\n        }\n        else\n        {\n            return false;\n        }\n    };\n    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> pq(comp);\n    vector<vector<int>> pairs;\n\n    if (nums1.empty() || nums2.empty() || k <= 0) return pairs;\n    \n    for (int i = 0; i < min((int)nums1.size(), k); ++i) {\n        pq.push({i, 0});\n    }\n\n    while (k-- > 0 && !pq.empty()) {\n        auto cur = pq.top();\n        pq.pop();\n        pairs.push_back({nums1[cur.first], nums2[cur.second]});\n        if (cur.second + 1 < nums2.size()) {\n            pq.push({cur.first, cur.second + 1});\n        }\n    }\n    return pairs;\n}",
        "test": "int main() {\n    vector<int> nums1_a{1, 3, 7}, nums2_a{2, 4, 6};\n    assert((k_smallest_pairs(nums1_a, nums2_a, 2) == vector<vector<int>>{{1, 2}, {1, 4}}));\n    assert((k_smallest_pairs(nums1_a, nums2_a, 1) == vector<vector<int>>{{1, 2}}));\n    assert((k_smallest_pairs(nums1_a, nums2_a, 7) == vector<vector<int>>{{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <queue>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<vector<int>> k_smallest_pairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    auto comp = [&](const pair<int, int>& a, const pair<int, int>& b) {\n        if(nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second])\n        {\n            return true;\n        }\n        else if(nums1[a.first] + nums2[a.second] == nums1[b.first] + nums2[b.second])\n        {\n            return nums1[a.first] > nums1[b.first];\n        }\n        else\n        {\n            return false;\n        }\n    };\n//begin to write code\n",
        "cpp_prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "perturbated_codes": "#include <vector>\n#include <queue>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<vector<int>> k_smallest_pairs(vector<int>& nums1, vector<int>& nums2, int k) {\n    auto comp = [&](const pair<int, int>& a, const pair<int, int>& b) {\n        if(nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second])\n        {\n            return true;\n        }\n        else if(nums1[a.first] + nums2[a.second] == nums1[b.first] + nums2[b.second])\n        {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n            return nums1[a.first] > nums1[b.first];\n        }\n        else\n        {\n            return false;\n        }\n    };\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> nums1_a{1, 3, 7}, nums2_a{2, 4, 6};\n    assert((k_smallest_pairs(nums1_a, nums2_a, 2) == vector<vector<int>>{{1, 2}, {1, 4}}));\n    assert((k_smallest_pairs(nums1_a, nums2_a, 1) == vector<vector<int>>{{1, 2}}));\n    assert((k_smallest_pairs(nums1_a, nums2_a, 7) == vector<vector<int>>{{1, 2}, {1, 4}, {3, 2}, {1, 6}, {3, 4}, {3, 6}, {7, 2}}));\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <queue>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<vector<int>> k_smallest_pairs(vector<int>& nums1, vector<int>& nums2, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto comp = [&](const pair<int, int>& a, const pair<int, int>& b) {\n        if(nums1[a.first] + nums2[a.second] > nums1[b.first] + nums2[b.second])\n        {\n            return true;\n        }\n        else if(nums1[a.first] + nums2[a.second] == nums1[b.first] + nums2[b.second])\n        {\n            return nums1[a.first] > nums1[b.first];\n        }\n        else\n        {\n            return false;\n        }\n    };\n//begin to write code\n"
    },
    {
        "task_id": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\n\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n            result_min = product;\n        }\n    }\n    return result_min;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::pair<int, int>> test1 = {{2, 7}, {2, 6}, {1, 8}, {4, 9}};\n    std::vector<std::pair<int, int>> test2 = {{10, 20}, {15, 2}, {5, 10}};\n    std::vector<std::pair<int, int>> test3 = {{11, 44}, {10, 15}, {20, 5}, {12, 9}};\n    \n    assert(min_product_tuple(test1) == 8);\n    assert(min_product_tuple(test2) == 30);\n    assert(min_product_tuple(test3) == 100);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::pair<int, int>> test1 = {{2, 7}, {2, 6}, {1, 8}, {4, 9}};\n    std::vector<std::pair<int, int>> test2 = {{10, 20}, {15, 2}, {5, 10}};\n    std::vector<std::pair<int, int>> test3 = {{11, 44}, {10, 15}, {20, 5}, {12, 9}};\n    \n    assert(min_product_tuple(test1) == 8);\n    assert(min_product_tuple(test2) == 30);\n    assert(min_product_tuple(test3) == 100);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <cstdlib> // for abs()\nint min_product_tuple(const std::vector<std::pair<int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int result_min = std::numeric_limits<int>::max();\n    for (const auto& p : list1) {\n        int product = std::abs(p.first * p.second);\n        if (product < result_min) {\n//begin to write code\n"
    },
    {
        "task_id": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\n\nusing namespace std;\n\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n            min_val = value;\n        }\n    }\n    return min_val;\n}\n\n\n",
        "test": "int main() {\n    vector<int> list1 = {3, 2, 4, 5};\n    vector<int> list2 = {15, 20, 25};\n    vector<int> list3 = {30, 20, 40, 50};\n\n    assert(min_val(list1) == 2);\n    assert(min_val(list2) == 15);\n    assert(min_val(list3) == 20);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> list1 = {3, 2, 4, 5};\n    vector<int> list2 = {15, 20, 25};\n    vector<int> list3 = {30, 20, 40, 50};\n\n    assert(min_val(list1) == 2);\n    assert(min_val(list2) == 15);\n    assert(min_val(list3) == 20);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <limits>\n#include <typeinfo>\n#include <cassert>\nusing namespace std;\nint min_val(const vector<int>& listval) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int min_val = numeric_limits<int>::max();\n    for (int value : listval) {\n        if (value < min_val) {\n//begin to write code\n"
    },
    {
        "task_id": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code_str": "\n#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\n\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n            part[0] = std::toupper(part[0]);\n            result += part;\n        }\n    }\n\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(snake_to_camel(\"android_tv\") == \"AndroidTv\");\n    assert(snake_to_camel(\"google_pixel\") == \"GooglePixel\");\n    assert(snake_to_camel(\"apple_watch\") == \"AppleWatch\");\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(snake_to_camel(\"android_tv\") == \"AndroidTv\");\n    assert(snake_to_camel(\"google_pixel\") == \"GooglePixel\");\n    assert(snake_to_camel(\"apple_watch\") == \"AppleWatch\");\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <sstream>\n#include <cctype>\n#include <cassert>\nstd::string snake_to_camel(const std::string& word) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given snake case string to camel case string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::istringstream stream(word);\n    std::string part;\n    std::string result;\n    while (std::getline(stream, part, '_')) {\n        if (!part.empty()) {\n//begin to write code\n"
    },
    {
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n        } else {\n            ++it;\n        }\n    }\n    return l;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    {\n        std::vector<int> test = {1, 2, 3};\n        std::vector<int> expected = {2};\n        assert(remove_odd(test) == expected);\n    }\n    {\n        std::vector<int> test = {2, 4, 6};\n        std::vector<int> expected = {2, 4, 6};\n        assert(remove_odd(test) == expected);\n    }\n    {\n        std::vector<int> test = {10, 20, 3};\n        std::vector<int> expected = {10, 20};\n        assert(remove_odd(test) == expected);\n    }\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to remove odd numbers from a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n            double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    {\n        std::vector<int> test = {1, 2, 3};\n        std::vector<int> expected = {2};\n        assert(remove_odd(test) == expected);\n    }\n    {\n        std::vector<int> test = {2, 4, 6};\n        std::vector<int> expected = {2, 4, 6};\n        assert(remove_odd(test) == expected);\n    }\n    {\n        std::vector<int> test = {10, 20, 3};\n        std::vector<int> expected = {10, 20};\n        assert(remove_odd(test) == expected);\n    }\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> remove_odd(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    auto it = l.begin();\n    while (it != l.end()) {\n        if (*it % 2 != 0) {\n            it = l.erase(it);\n//begin to write code\n"
    },
    {
        "task_id": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "code_str": "#include<iostream>\n    \n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <string>\n\nusing namespace std;\n\ntemplate<typename T, size_t N>\nstruct TupleElement {\n    using type = typename tuple_element<N, tuple<T, int, int>>::type;\n};\n\ntemplate<typename T, size_t N>\nvector<typename TupleElement<T, N>::type> extract_nth_element(const vector<tuple<T, int, int>>& list1) {\n    vector<typename TupleElement<T, N>::type> result;\n    for (const auto& item : list1) {\n        result.push_back(get<N>(item));\n    }\n    return result;\n}",
        "test": "int main() {\n    vector<tuple<string, int, int>> test_data1 = {\n        make_tuple(\"Greyson Fulton\", 98, 99),\n        make_tuple(\"Brady Kent\", 97, 96),\n        make_tuple(\"Wyatt Knott\", 91, 94),\n        make_tuple(\"Beau Turnbull\", 94, 98)\n    };\n\n    vector<string> expected1 = {\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"};\n    assert((extract_nth_element<string, 0>(test_data1) == expected1));\n\n    vector<int> expected2 = {99, 96, 94, 98};\n    assert((extract_nth_element<string, 2>(test_data1) == expected2));\n\n    vector<int> expected3 = {98, 97, 91, 94};\n    assert((extract_nth_element<string, 1>(test_data1) == expected3));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T, size_t N>\nstruct TupleElement {\n    using type = typename tuple_element<N, tuple<T, int, int>>::type;\n};\ntemplate<typename T, size_t N>\nvector<typename TupleElement<T, N>::type> extract_nth_element(const vector<tuple<T, int, int>>& list1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the nth element from a given list of tuples.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T, size_t N>\nstruct TupleElement {\n    using type = typename tuple_element<N, tuple<T, int, int>>::type;\n};\ntemplate<typename T, size_t N>\nvector<typename TupleElement<T, N>::type> extract_nth_element(const vector<tuple<T, int, int>>& list1) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<tuple<string, int, int>> test_data1 = {\n        make_tuple(\"Greyson Fulton\", 98, 99),\n        make_tuple(\"Brady Kent\", 97, 96),\n        make_tuple(\"Wyatt Knott\", 91, 94),\n        make_tuple(\"Beau Turnbull\", 94, 98)\n    };\n\n    vector<string> expected1 = {\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"};\n    assert((extract_nth_element<string, 0>(test_data1) == expected1));\n\n    vector<int> expected2 = {99, 96, 94, 98};\n    assert((extract_nth_element<string, 2>(test_data1) == expected2));\n\n    vector<int> expected3 = {98, 97, 91, 94};\n    assert((extract_nth_element<string, 1>(test_data1) == expected3));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n#include <string>\nusing namespace std;\ntemplate<typename T, size_t N>\nstruct TupleElement {\n    using type = typename tuple_element<N, tuple<T, int, int>>::type;\n};\ntemplate<typename T, size_t N>\nvector<typename TupleElement<T, N>::type> extract_nth_element(const vector<tuple<T, int, int>>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the nth element from a given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(overlapping({1, 2, 3, 4, 5}, {6, 7, 8, 9}) == false);\n    assert(overlapping({1, 2, 3}, {4, 5, 6}) == false);\n    assert(overlapping({1, 4, 5}, {1, 4, 5}) == true);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the value exists in a sequence or not.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n            double temp_var_7 = 9.9;while (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(overlapping({1, 2, 3, 4, 5}, {6, 7, 8, 9}) == false);\n    assert(overlapping({1, 2, 3}, {4, 5, 6}) == false);\n    assert(overlapping({1, 4, 5}, {1, 4, 5}) == true);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool overlapping(const std::vector<int>& list1, const std::vector<int>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int c = list1.size();\n    int d = list2.size();\n    for (int i = 0; i < c; i++) {\n        for (int j = 0; j < d; j++) {\n            if (list1[i] == list2[j]) {\n//begin to write code\n"
    },
    {
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\npair<int, int> max_Product(const vector<int>& arr) {\n    int arr_len = arr.size();\n    if (arr_len < 2) {\n        throw \"No pairs exists\";\n    }\n    int x = arr[0];\n    int y = arr[1];\n    for (int i = 0; i < arr_len; i++) {\n        for (int j = i + 1; j < arr_len; j++) {\n            if (arr[i] * arr[j] > x * y) {\n                x = arr[i];\n                y = arr[j];\n            }\n        }\n    }\n    return make_pair(x, y);\n}\n\n\n",
        "test": "int main()\n{\n    assert(max_Product({1,2,3,4,7,0,8,4}) == make_pair(7,8));\n    assert(max_Product({0,-1,-2,-4,5,0,-6}) == make_pair(-4,-6));\n    assert(max_Product({1,2,3}) == make_pair(2,3));\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\npair<int, int> max_Product(const vector<int>& arr) {\n    int arr_len = arr.size();\n    if (arr_len < 2) {\n        throw \"No pairs exists\";\n    }\n    int x = arr[0];\n    int y = arr[1];\n    for (int i = 0; i < arr_len; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find a pair with highest product from a given array of integers.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\npair<int, int> max_Product(const vector<int>& arr) {\n    int arr_len = arr.size();\n    if (arr_len < 2) {\n        throw \"No pairs exists\";\n    }\n    int x = arr[0];\n    int y = arr[1];\n    for (int i = 0; i < arr_len; i++) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(max_Product({1,2,3,4,7,0,8,4}) == make_pair(7,8));\n    assert(max_Product({0,-1,-2,-4,5,0,-6}) == make_pair(-4,-6));\n    assert(max_Product({1,2,3}) == make_pair(2,3));\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\npair<int, int> max_Product(const vector<int>& arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find a pair with highest product from a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int arr_len = arr.size();\n    if (arr_len < 2) {\n        throw \"No pairs exists\";\n    }\n    int x = arr[0];\n    int y = arr[1];\n    for (int i = 0; i < arr_len; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint breakSum(int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; ++i) {\n        dp[i] = max(dp[i / 2] + dp[i / 3] + dp[i / 4], i);\n    }\n    return dp[n];\n}\n\n\n",
        "test": "int main()\n{\n    assert(breakSum(12) == 13);\n    assert(breakSum(24) == 27);\n    assert(breakSum(23) == 23);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint breakSum(int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint breakSum(int n) {\n    vector<int> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 1;\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(breakSum(12) == 13);\n    assert(breakSum(24) == 27);\n    assert(breakSum(23) == 23);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint breakSum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> dp(n + 1, 0);\n    dp[0] = 0;\n    dp[1] = 1;\n//begin to write code\n"
    },
    {
        "task_id": 417,
        "prompt": "Write a function to find common first element in given list of tuple.",
        "code_str": "#include <vector>\n#include <tuple>\n#include <map>\n#include <cassert>\n#include <iostream>\nusing namespace std;\n\nvector<tuple<char, string>> group_tuples(vector<tuple<char, char>> input) {\n    map<char, vector<char>> out;\n    for (auto& elem : input) {\n        char key = get<0>(elem);\n        char value = get<1>(elem);\n        out[key].push_back(value);\n    }\n    \n    vector<tuple<char, string>> result;\n    for (auto& pair : out) {\n        string values(pair.second.begin(), pair.second.end());\n        result.emplace_back(make_tuple(pair.first, values));\n    }\n    \n    return result;\n}",
        "test": "int main()\n{\n    assert((group_tuples({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}) == vector<tuple<char, string>>{ {'w', \"t\"}, {'x', \"yz\"}}));\n    assert((group_tuples({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}) == vector<tuple<char, string>>{{'a', \"bc\"}, {'d', \"e\"}}));\n    assert((group_tuples({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}) == vector<tuple<char, string>>{{'f', \"gg\"}, {'h', \"i\"}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <tuple>\n#include <map>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<tuple<char, string>> group_tuples(vector<tuple<char, char>> input) {\n    map<char, vector<char>> out;\n    for (auto& elem : input) {\n        char key = get<0>(elem);\n        char value = get<1>(elem);\n        out[key].push_back(value);\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find common first element in given list of tuple.",
        "perturbated_codes": "#include <vector>\n#include <tuple>\n#include <map>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<tuple<char, string>> group_tuples(vector<tuple<char, char>> input) {\n    map<char, vector<char>> out;\n    for (auto& elem : input) {\n        char key = get<0>(elem);\n        char value = get<1>(elem);\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n        out[key].push_back(value);\n    }\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((group_tuples({{'x', 'y'}, {'x', 'z'}, {'w', 't'}}) == vector<tuple<char, string>>{ {'w', \"t\"}, {'x', \"yz\"}}));\n    assert((group_tuples({{'a', 'b'}, {'a', 'c'}, {'d', 'e'}}) == vector<tuple<char, string>>{{'a', \"bc\"}, {'d', \"e\"}}));\n    assert((group_tuples({{'f', 'g'}, {'f', 'g'}, {'h', 'i'}}) == vector<tuple<char, string>>{{'f', \"gg\"}, {'h', \"i\"}}));\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <tuple>\n#include <map>\n#include <cassert>\n#include <iostream>\nusing namespace std;\nvector<tuple<char, string>> group_tuples(vector<tuple<char, char>> input) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find common first element in given list of tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    map<char, vector<char>> out;\n    for (auto& elem : input) {\n        char key = get<0>(elem);\n        char value = get<1>(elem);\n        out[key].push_back(value);\n    }\n//begin to write code\n"
    },
    {
        "task_id": 418,
        "prompt": "Write a python function to find the sublist having maximum length.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n        return a.size() < b.size();\n    });\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<char> test1 = Find_Max(std::vector<std::vector<char>>{{'A'}, {'A','B'}, {'A','B','C'}});\n    std::vector<int> test2 = Find_Max(std::vector<std::vector<int>>{{1}, {1,2}, {1,2,3}});\n    std::vector<int> test3 = Find_Max(std::vector<std::vector<int>>{{1,1}, {1,2,3}, {1,5,6,1}});\n    \n    std::vector<char> expected1{'A','B','C'};\n    std::vector<int> expected2{1,2,3};\n    std::vector<int> expected3{1,5,6,1};\n\n    assert(test1 == expected1);\n    assert(test2 == expected2);\n    assert(test3 == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sublist having maximum length.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<char> test1 = Find_Max(std::vector<std::vector<char>>{{'A'}, {'A','B'}, {'A','B','C'}});\n    std::vector<int> test2 = Find_Max(std::vector<std::vector<int>>{{1}, {1,2}, {1,2,3}});\n    std::vector<int> test3 = Find_Max(std::vector<std::vector<int>>{{1,1}, {1,2,3}, {1,5,6,1}});\n    \n    std::vector<char> expected1{'A','B','C'};\n    std::vector<int> expected2{1,2,3};\n    std::vector<int> expected3{1,5,6,1};\n\n    assert(test1 == expected1);\n    assert(test2 == expected2);\n    assert(test3 == expected3);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\ntemplate<typename T>\nstd::vector<T> Find_Max(std::vector<std::vector<T>> lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return *std::max_element(lst.begin(), lst.end(), [](const std::vector<T>& a, const std::vector<T>& b){\n//begin to write code\n"
    },
    {
        "task_id": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\n\nint round_and_sum(const std::vector<double>& list1) {\n    int length = list1.size();\n    int rounded_sum = std::accumulate(list1.begin(), list1.end(), 0, [](int acc, double val) {\n        return acc + std::round(val);\n    }) * length;\n    return rounded_sum;\n}\n\n\n",
        "test": "int main()\n{\n    assert(round_and_sum({22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50}) == 243);\n    assert(round_and_sum({5, 2, 9, 24.3, 29}) == 345);\n    assert(round_and_sum({25.0, 56.7, 89.2}) == 513);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\nint round_and_sum(const std::vector<double>& list1) {\n    int length = list1.size();\n    int rounded_sum = std::accumulate(list1.begin(), list1.end(), 0, [](int acc, double val) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\nint round_and_sum(const std::vector<double>& list1) {\n    int length = list1.size();\n    int rounded_sum = std::accumulate(list1.begin(), list1.end(), 0, [](int acc, double val) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(round_and_sum({22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50}) == 243);\n    assert(round_and_sum({5, 2, 9, 24.3, 29}) == 345);\n    assert(round_and_sum({25.0, 56.7, 89.2}) == 513);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\nint round_and_sum(const std::vector<double>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int length = list1.size();\n    int rounded_sum = std::accumulate(list1.begin(), list1.end(), 0, [](int acc, double val) {\n//begin to write code\n"
    },
    {
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "code_str": "#include<cassert>\n#include<iostream>\n\n//\u51fd\u6570\u5b9a\u4e49\nint cube_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += (2*i)*(2*i)*(2*i);\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(cube_Sum(2) == 72);\n    assert(cube_Sum(3) == 288);\n    assert(cube_Sum(4) == 800);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include<iostream>\n//\u51fd\u6570\u5b9a\u4e49\nint cube_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the cube sum of first n even natural numbers.",
        "perturbated_codes": "#include<cassert>\n#include<iostream>\n//\u51fd\u6570\u5b9a\u4e49\nint cube_Sum(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(cube_Sum(2) == 72);\n    assert(cube_Sum(3) == 288);\n    assert(cube_Sum(4) == 800);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include<iostream>\n//\u51fd\u6570\u5b9a\u4e49\nint cube_Sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the cube sum of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "code_str": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <sstream>\n#include <tuple>\nusing namespace std;\n\n// Helper function to concatenate elements of the tuple\ntemplate<size_t Index, typename... Args>\nvoid concatenate_tuple_helper(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if (Index != 0) {\n        oss << delim;\n    }\n    oss << get<Index>(test_tup);\n}\n\n// Recursive function to iterate over the tuple\ntemplate<size_t Index, typename... Args>\nvoid iterate_tuple(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if constexpr (Index == sizeof...(Args)) {\n        return;\n    } else {\n        concatenate_tuple_helper<Index>(oss, delim, test_tup);\n        iterate_tuple<Index + 1>(oss, delim, test_tup);\n    }\n}\n\n// Main function to concatenate tuple elements\ntemplate<typename... Args>\nstring concatenate_tuple(const tuple<Args...>& test_tup) {\n    ostringstream oss;\n    string delim = \"-\";\n    iterate_tuple<0>(oss, delim, test_tup);\n    return oss.str();\n}",
        "test": "int main() {\n    assert(concatenate_tuple(make_tuple(\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\");\n    assert(concatenate_tuple(make_tuple(\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\");\n    assert(concatenate_tuple(make_tuple(\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <sstream>\n#include <tuple>\nusing namespace std;\n// Helper function to concatenate elements of the tuple\ntemplate<size_t Index, typename... Args>\nvoid concatenate_tuple_helper(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if (Index != 0) {\n        oss << delim;\n    }\n    oss << get<Index>(test_tup);\n}\n// Recursive function to iterate over the tuple\ntemplate<size_t Index, typename... Args>\nvoid iterate_tuple(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if constexpr (Index == sizeof...(Args)) {\n        return;\n//begin to write code\n",
        "cpp_prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <sstream>\n#include <tuple>\nusing namespace std;\n// Helper function to concatenate elements of the tuple\ntemplate<size_t Index, typename... Args>\nvoid concatenate_tuple_helper(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if (Index != 0) {\n        oss << delim;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    oss << get<Index>(test_tup);\n}\n// Recursive function to iterate over the tuple\ntemplate<size_t Index, typename... Args>\nvoid iterate_tuple(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if constexpr (Index == sizeof...(Args)) {\n        return;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(concatenate_tuple(make_tuple(\"ID\", \"is\", 4, \"UTS\")) == \"ID-is-4-UTS\");\n    assert(concatenate_tuple(make_tuple(\"QWE\", \"is\", 4, \"RTY\")) == \"QWE-is-4-RTY\");\n    assert(concatenate_tuple(make_tuple(\"ZEN\", \"is\", 4, \"OP\")) == \"ZEN-is-4-OP\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <sstream>\n#include <tuple>\nusing namespace std;\n// Helper function to concatenate elements of the tuple\ntemplate<size_t Index, typename... Args>\nvoid concatenate_tuple_helper(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n\n    /*\n    progame language:cpp\n    description:Write a function to concatenate each element of tuple by the delimiter.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (Index != 0) {\n        oss << delim;\n    }\n    oss << get<Index>(test_tup);\n}\n// Recursive function to iterate over the tuple\ntemplate<size_t Index, typename... Args>\nvoid iterate_tuple(ostringstream& oss, const string& delim, const tuple<Args...>& test_tup) {\n    if constexpr (Index == sizeof...(Args)) {\n        return;\n//begin to write code\n"
    },
    {
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n        sum += i * i * i;\n    }\n    return round(sum / n * 1000000) / 1000000;\n}\n\n\n",
        "test": "int main() {\n    assert(find_Average_Of_Cube(2) == 4.5);\n    assert(find_Average_Of_Cube(3) == 12);\n    assert(find_Average_Of_Cube(1) == 1);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the average of cubes of first n natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_Average_Of_Cube(2) == 4.5);\n    assert(find_Average_Of_Cube(3) == 12);\n    assert(find_Average_Of_Cube(1) == 1);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble find_Average_Of_Cube(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double sum = 0;\n    for (int i = 1; i <= n; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 423,
        "prompt": "Write a function to solve gold mine problem.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\n\nint get_maxgold(vector<vector<int>> gold, int m, int n) {\n    vector<vector<int>> goldTable(m, vector<int>(n, 0));   \n    for (int col = n-1; col >= 0; col--) { \n        for (int row = 0; row < m; row++) { \n            int right = (col == n-1) ? 0 : goldTable[row][col+1];\n            int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + max({right, right_up, right_down});\n        }\n    }\n    int res = goldTable[0][0];\n    for (int i = 1; i < m; i++) {\n        res = max(res, goldTable[i][0]);\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert(get_maxgold({{1, 3, 1, 5},{2, 2, 4, 1},{5, 0, 2, 3},{0, 6, 1, 2}}, 4, 4) == 16);\n    assert(get_maxgold({{10, 20}, {30, 40}}, 2, 2) == 70);\n    assert(get_maxgold({{4, 9}, {3, 7}}, 2, 2) == 13);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint get_maxgold(vector<vector<int>> gold, int m, int n) {\n    vector<vector<int>> goldTable(m, vector<int>(n, 0));   \n    for (int col = n-1; col >= 0; col--) { \n        for (int row = 0; row < m; row++) { \n            int right = (col == n-1) ? 0 : goldTable[row][col+1];\n            int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + max({right, right_up, right_down});\n//begin to write code\n",
        "cpp_prompt": "Write a function to solve gold mine problem.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint get_maxgold(vector<vector<int>> gold, int m, int n) {\n    vector<vector<int>> goldTable(m, vector<int>(n, 0));   \n    for (int col = n-1; col >= 0; col--) { \n        for (int row = 0; row < m; row++) { \n            int right = (col == n-1) ? 0 : goldTable[row][col+1];\n            int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + max({right, right_up, right_down});\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(get_maxgold({{1, 3, 1, 5},{2, 2, 4, 1},{5, 0, 2, 3},{0, 6, 1, 2}}, 4, 4) == 16);\n    assert(get_maxgold({{10, 20}, {30, 40}}, 2, 2) == 70);\n    assert(get_maxgold({{4, 9}, {3, 7}}, 2, 2) == 13);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <algorithm>\nusing namespace std;\nint get_maxgold(vector<vector<int>> gold, int m, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to solve gold mine problem.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> goldTable(m, vector<int>(n, 0));   \n    for (int col = n-1; col >= 0; col--) { \n        for (int row = 0; row < m; row++) { \n            int right = (col == n-1) ? 0 : goldTable[row][col+1];\n            int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + max({right, right_up, right_down});\n//begin to write code\n"
    },
    {
        "task_id": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n        res.push_back(sub[sub.length() - 1]);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert((extract_rear({\"Mers\", \"for\", \"Vers\"}) == std::vector<char>{'s', 'r', 's'}));\n    assert((extract_rear({\"Avenge\", \"for\", \"People\"}) == std::vector<char>{'e', 'r', 'e'}));\n    assert((extract_rear({\"Gotta\", \"get\", \"go\"}) == std::vector<char>{'a', 't', 'o'}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((extract_rear({\"Mers\", \"for\", \"Vers\"}) == std::vector<char>{'s', 'r', 's'}));\n    assert((extract_rear({\"Avenge\", \"for\", \"People\"}) == std::vector<char>{'e', 'r', 'e'}));\n    assert((extract_rear({\"Gotta\", \"get\", \"go\"}) == std::vector<char>{'a', 't', 'o'}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<char> extract_rear(std::vector<std::string> test_tuple) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract only the rear index element of each string in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<char> res;\n    for (const std::string& sub : test_tuple) {\n//begin to write code\n"
    },
    {
        "task_id": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "code_str": "\n#include<iostream>\n#include<vector>\n#include<cassert>\n\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n                ctr++;\n                break;\n            }\n        }\n    }\n    return ctr;\n}\n\n\n",
        "test": "int main()\n{\n    assert(count_element_in_list(std::vector<std::vector<int>>{{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1) == 3);\n    assert(count_element_in_list(std::vector<std::vector<char>>{{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A') == 3);\n    assert(count_element_in_list(std::vector<std::vector<char>>{{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E') == 1);\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count the number of sublists containing a particular element.",
        "perturbated_codes": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(count_element_in_list(std::vector<std::vector<int>>{{1, 3}, {5, 7}, {1, 11}, {1, 15, 7}}, 1) == 3);\n    assert(count_element_in_list(std::vector<std::vector<char>>{{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'A') == 3);\n    assert(count_element_in_list(std::vector<std::vector<char>>{{'A', 'B'}, {'A', 'C'}, {'A', 'D', 'E'}, {'B', 'C', 'D'}}, 'E') == 1);\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<vector>\n#include<cassert>\ntemplate<typename T>\nint count_element_in_list(const std::vector<std::vector<T>>& list1, T x) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int ctr = 0;\n    for (const auto& sublist : list1) {\n        for (const auto& element : sublist) {\n            if (element == x) {\n//begin to write code\n"
    },
    {
        "task_id": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    return x % 2 != 0; \n    });\n    return odd_nums;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> test1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> result1 = filter_oddnumbers(test1);\n    std::vector<int> expected1 = {1, 3, 5, 7, 9};\n    assert(result1 == expected1);\n\n    std::vector<int> test2 = {10, 20, 45, 67, 84, 93};\n    std::vector<int> result2 = filter_oddnumbers(test2);\n    std::vector<int> expected2 = {45, 67, 93};\n    assert(result2 == expected2);\n\n    std::vector<int> test3 = {5, 7, 9, 8, 6, 4, 3};\n    std::vector<int> result3 = filter_oddnumbers(test3);\n    std::vector<int> expected3 = {5, 7, 9, 3};\n    assert(result3 == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n",
        "cpp_prompt": "Write a function to filter odd numbers using lambda function.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> test1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n    std::vector<int> result1 = filter_oddnumbers(test1);\n    std::vector<int> expected1 = {1, 3, 5, 7, 9};\n    assert(result1 == expected1);\n\n    std::vector<int> test2 = {10, 20, 45, 67, 84, 93};\n    std::vector<int> result2 = filter_oddnumbers(test2);\n    std::vector<int> expected2 = {45, 67, 93};\n    assert(result2 == expected2);\n\n    std::vector<int> test3 = {5, 7, 9, 8, 6, 4, 3};\n    std::vector<int> result3 = filter_oddnumbers(test3);\n    std::vector<int> expected3 = {5, 7, 9, 3};\n    assert(result3 == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nstd::vector<int> filter_oddnumbers(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> odd_nums;\n    std::copy_if(nums.begin(), nums.end(), std::back_inserter(odd_nums), [](int x){ \n//begin to write code\n"
    },
    {
        "task_id": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code_str": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring change_date_format(const string &dt) {\n    regex pattern(R\"((\\d{4})-(\\d{1,2})-(\\d{1,2}))\");\n    return regex_replace(dt, pattern, \"$3-$2-$1\");\n}",
        "test": "int main() {\n    assert(change_date_format(\"2026-01-02\") == \"02-01-2026\");\n    assert(change_date_format(\"2020-11-13\") == \"13-11-2020\");\n    assert(change_date_format(\"2021-04-26\") == \"26-04-2021\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring change_date_format(const string &dt) {\n    regex pattern(R\"((\\d{4})-(\\d{1,2})-(\\d{1,2}))\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring change_date_format(const string &dt) {\ndouble temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    regex pattern(R\"((\\d{4})-(\\d{1,2})-(\\d{1,2}))\");\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(change_date_format(\"2026-01-02\") == \"02-01-2026\");\n    assert(change_date_format(\"2020-11-13\") == \"13-11-2020\");\n    assert(change_date_format(\"2021-04-26\") == \"26-04-2021\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring change_date_format(const string &dt) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(R\"((\\d{4})-(\\d{1,2})-(\\d{1,2}))\");\n//begin to write code\n"
    },
    {
        "task_id": 428,
        "prompt": "Write a function to sort the given array by using shell sort.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n            my_list[j] = current_item;\n        }\n        gap /= 2;\n    }\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> list1 = {12, 23, 4, 5, 3, 2, 12, 81, 56, 95};\n    shell_sort(list1);\n    assert(list1 == std::vector<int>({2, 3, 4, 5, 12, 12, 23, 56, 81, 95}));\n\n    std::vector<int> list2 = {24, 22, 39, 34, 87, 73, 68};\n    shell_sort(list2);\n    assert(list2 == std::vector<int>({22, 24, 34, 39, 68, 73, 87}));\n\n    std::vector<int> list3 = {32, 30, 16, 96, 82, 83, 74};\n    shell_sort(list3);\n    assert(list3 == std::vector<int>({16, 30, 32, 74, 82, 83, 96}));\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort the given array by using shell sort.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> list1 = {12, 23, 4, 5, 3, 2, 12, 81, 56, 95};\n    shell_sort(list1);\n    assert(list1 == std::vector<int>({2, 3, 4, 5, 12, 12, 23, 56, 81, 95}));\n\n    std::vector<int> list2 = {24, 22, 39, 34, 87, 73, 68};\n    shell_sort(list2);\n    assert(list2 == std::vector<int>({22, 24, 34, 39, 68, 73, 87}));\n\n    std::vector<int> list3 = {32, 30, 16, 96, 82, 83, 74};\n    shell_sort(list3);\n    assert(list3 == std::vector<int>({16, 30, 32, 74, 82, 83, 96}));\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nvoid shell_sort(std::vector<int>& my_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int gap = my_list.size() / 2;\n    while (gap > 0) {\n        for (int i = gap; i < my_list.size(); i++) {\n            int current_item = my_list[i];\n            int j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n//begin to write code\n"
    },
    {
        "task_id": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\n\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n        std::get<2>(test_tup1) & std::get<2>(test_tup2),\n        std::get<3>(test_tup1) & std::get<3>(test_tup2)\n    );\n}\n\n\n",
        "test": "int main() {\n    assert(and_tuples(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(0, 0, 2, 1));\n    assert(and_tuples(std::make_tuple(1, 2, 3, 4), std::make_tuple(5, 6, 7, 8)) == std::make_tuple(1, 2, 3, 0));\n    assert(and_tuples(std::make_tuple(8, 9, 11, 12), std::make_tuple(7, 13, 14, 17)) == std::make_tuple(0, 9, 10, 0));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(and_tuples(std::make_tuple(10, 4, 6, 9), std::make_tuple(5, 2, 3, 3)) == std::make_tuple(0, 0, 2, 1));\n    assert(and_tuples(std::make_tuple(1, 2, 3, 4), std::make_tuple(5, 6, 7, 8)) == std::make_tuple(1, 2, 3, 0));\n    assert(and_tuples(std::make_tuple(8, 9, 11, 12), std::make_tuple(7, 13, 14, 17)) == std::make_tuple(0, 9, 10, 0));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <tuple>\n#include <cassert>\nstd::tuple<int, int, int, int> and_tuples(const std::tuple<int, int, int, int>& test_tup1, const std::tuple<int, int, int, int>& test_tup2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract the elementwise and tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return std::make_tuple(\n        std::get<0>(test_tup1) & std::get<0>(test_tup2),\n        std::get<1>(test_tup1) & std::get<1>(test_tup2),\n//begin to write code\n"
    },
    {
        "task_id": 430,
        "prompt": "Write a function to find the directrix of a parabola.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint parabola_directrix(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n    return directrix;\n}\n\n\n",
        "test": "int main() {\n    assert(parabola_directrix(5, 3, 2) == -198);\n    assert(parabola_directrix(9, 8, 4) == -2336);\n    assert(parabola_directrix(2, 4, 6) == -130);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint parabola_directrix(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the directrix of a parabola.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint parabola_directrix(int a, int b, int c) {\n    int directrix = c - ((b * b) + 1) * 4 * a;\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(parabola_directrix(5, 3, 2) == -198);\n    assert(parabola_directrix(9, 8, 4) == -2336);\n    assert(parabola_directrix(2, 4, 6) == -130);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint parabola_directrix(int a, int b, int c) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the directrix of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int directrix = c - ((b * b) + 1) * 4 * a;\n//begin to write code\n"
    },
    {
        "task_id": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\n",
        "test": "int main() {\n    assert(common_element(std::vector<int>{1, 2, 3, 4, 5}, std::vector<int>{5, 6, 7, 8, 9}) == true);\n    assert(common_element(std::vector<int>{1, 2, 3, 4, 5}, std::vector<int>{6, 7, 8, 9}) == false);\n    assert(common_element(std::vector<char>{'a', 'b', 'c'}, std::vector<char>{'d', 'b', 'e'}) == true);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n",
        "cpp_prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n            double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(common_element(std::vector<int>{1, 2, 3, 4, 5}, std::vector<int>{5, 6, 7, 8, 9}) == true);\n    assert(common_element(std::vector<int>{1, 2, 3, 4, 5}, std::vector<int>{6, 7, 8, 9}) == false);\n    assert(common_element(std::vector<char>{'a', 'b', 'c'}, std::vector<char>{'d', 'b', 'e'}) == true);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\ntemplate <typename T>\nbool common_element(const std::vector<T>& list1, const std::vector<T>& list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function that takes two lists and returns true if they have at least one common element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& x : list1) {\n        for (const auto& y : list2) {\n            if (x == y) {\n//begin to write code\n"
    },
    {
        "task_id": 432,
        "prompt": "Write a function to find the median of a trapezium.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n    return median;\n}\n\n\n",
        "test": "int main() {\n    assert(median_trapezium(15, 25, 35) == 20);\n    assert(median_trapezium(10, 20, 30) == 15);\n    assert(median_trapezium(6, 9, 4) == 7.5);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the median of a trapezium.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\ndouble temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    double median = 0.5 * (base1 + base2);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(median_trapezium(15, 25, 35) == 20);\n    assert(median_trapezium(10, 20, 30) == 15);\n    assert(median_trapezium(6, 9, 4) == 7.5);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\ndouble median_trapezium(double base1, double base2, double height) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double median = 0.5 * (base1 + base2);\n//begin to write code\n"
    },
    {
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::string check_greater(std::vector<int> arr, int number) {\n    std::sort(arr.begin(), arr.end());\n    if (number > arr.back()) {\n        return \"Yes, the entered number is greater than those in the array\";\n    } else {\n        return \"No, entered number is less than those in the array\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(check_greater({1, 2, 3, 4, 5}, 4) == \"No, entered number is less than those in the array\");\n    assert(check_greater({2, 3, 4, 5, 6}, 8) == \"Yes, the entered number is greater than those in the array\");\n    assert(check_greater({9, 7, 4, 8, 6, 1}, 11) == \"Yes, the entered number is greater than those in the array\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::string check_greater(std::vector<int> arr, int number) {\n    std::sort(arr.begin(), arr.end());\n    if (number > arr.back()) {\n        return \"Yes, the entered number is greater than those in the array\";\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::string check_greater(std::vector<int> arr, int number) {\n    std::sort(arr.begin(), arr.end());\n    if (number > arr.back()) {\n        return \"Yes, the entered number is greater than those in the array\";\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_greater({1, 2, 3, 4, 5}, 4) == \"No, entered number is less than those in the array\");\n    assert(check_greater({2, 3, 4, 5, 6}, 8) == \"Yes, the entered number is greater than those in the array\");\n    assert(check_greater({9, 7, 4, 8, 6, 1}, 11) == \"Yes, the entered number is greater than those in the array\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::string check_greater(std::vector<int> arr, int number) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the entered number is greater than the elements of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(arr.begin(), arr.end());\n    if (number > arr.back()) {\n        return \"Yes, the entered number is greater than those in the array\";\n//begin to write code\n"
    },
    {
        "task_id": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "code_str": "#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring text_match_one(string text) {\n    regex pattern(\"ab+?\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}",
        "test": "int main()\n{\n    assert(text_match_one(\"ac\") == \"Not matched!\");\n    assert(text_match_one(\"dc\") == \"Not matched!\");\n    assert(text_match_one(\"abba\") == \"Found a match!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_one(string text) {\n    regex pattern(\"ab+?\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_one(string text) {\n    regex pattern(\"ab+?\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(text_match_one(\"ac\") == \"Not matched!\");\n    assert(text_match_one(\"dc\") == \"Not matched!\");\n    assert(text_match_one(\"abba\") == \"Found a match!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_one(string text) {\n\n    /*\n    progame language:cpp\n    description:Write a function that matches a string that has an a followed by one or more b's.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"ab+?\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n"
    },
    {
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint last_Digit(int n) {\n    return n % 10;\n}\n\n\n",
        "test": "int main() {\n    assert(last_Digit(123) == 3);\n    assert(last_Digit(25) == 5);\n    assert(last_Digit(30) == 0);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint last_Digit(int n) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the last digit of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint last_Digit(int n) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(last_Digit(123) == 3);\n    assert(last_Digit(25) == 5);\n    assert(last_Digit(30) == 0);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint last_Digit(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 436,
        "prompt": "Write a python function to print negative numbers in a list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n            negatives.push_back(num);\n        }\n    }\n    return negatives;\n}\n\n\n",
        "test": "int main() {\n    assert((neg_nos({-1, 4, 5, -6}) == std::vector<int>{-1, -6}));\n    assert((neg_nos({-1, -2, 3, 4}) == std::vector<int>{-1, -2}));\n    assert((neg_nos({-7, -6, 8, 9}) == std::vector<int>{-7, -6}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to print negative numbers in a list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((neg_nos({-1, 4, 5, -6}) == std::vector<int>{-1, -6}));\n    assert((neg_nos({-1, -2, 3, 4}) == std::vector<int>{-1, -2}));\n    assert((neg_nos({-7, -6, 8, 9}) == std::vector<int>{-7, -6}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> neg_nos(const std::vector<int>& list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to print negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> negatives;\n    for (int num : list1) {\n        if (num < 0) {\n//begin to write code\n"
    },
    {
        "task_id": 437,
        "prompt": "Write a function to remove odd characters in a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string remove_odd(const std::string& str1) {\n    std::string str2;\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 == 0) {\n            str2 += str1[i - 1];\n        }\n    }\n    return str2;\n}\n\n\n",
        "test": "int main() {\n    assert(remove_odd(\"python\") == \"yhn\");\n    assert(remove_odd(\"program\") == \"rga\");\n    assert(remove_odd(\"language\") == \"agae\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string remove_odd(const std::string& str1) {\n    std::string str2;\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 == 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove odd characters in a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string remove_odd(const std::string& str1) {\n    std::string str2;\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 == 0) {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_odd(\"python\") == \"yhn\");\n    assert(remove_odd(\"program\") == \"rga\");\n    assert(remove_odd(\"language\") == \"agae\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string remove_odd(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove odd characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string str2;\n    for (int i = 1; i <= str1.length(); ++i) {\n        if (i % 2 == 0) {\n//begin to write code\n"
    },
    {
        "task_id": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n                res += 1;\n            }\n        }\n    }\n    return res;\n}",
        "test": "int main()\n{\n    vector<pair<int, int>> test_list1 = {{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}};\n    vector<pair<int, int>> test_list2 = {{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}};\n    vector<pair<int, int>> test_list3 = {{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}};\n\n    assert(count_bidirectional(test_list1) == 3);\n    assert(count_bidirectional(test_list2) == 2);\n    assert(count_bidirectional(test_list3) == 4);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to count bidirectional tuple pairs.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<pair<int, int>> test_list1 = {{5, 6}, {1, 2}, {6, 5}, {9, 1}, {6, 5}, {2, 1}};\n    vector<pair<int, int>> test_list2 = {{5, 6}, {1, 3}, {6, 5}, {9, 1}, {6, 5}, {2, 1}};\n    vector<pair<int, int>> test_list3 = {{5, 6}, {1, 2}, {6, 5}, {9, 2}, {6, 5}, {2, 1}};\n\n    assert(count_bidirectional(test_list1) == 3);\n    assert(count_bidirectional(test_list2) == 2);\n    assert(count_bidirectional(test_list3) == 4);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint count_bidirectional(vector<pair<int, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to count bidirectional tuple pairs.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int res = 0;\n    for (size_t idx = 0; idx < test_list.size(); ++idx) {\n        for (size_t iidx = idx + 1; iidx < test_list.size(); ++iidx) {\n            if (test_list[iidx].first == test_list[idx].second && test_list[idx].second == test_list[iidx].first) {\n//begin to write code\n"
    },
    {
        "task_id": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n    }\n    int x;\n    ss >> x;\n    return x;\n}\n\n\n",
        "test": "int main() {\n    assert(multiple_to_single({11, 33, 50}) == 113350);\n    assert(multiple_to_single({-1, 2, 3, 4, 5, 6}) == -123456);\n    assert(multiple_to_single({10, 15, 20, 25}) == 10152025);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(multiple_to_single({11, 33, 50}) == 113350);\n    assert(multiple_to_single({-1, 2, 3, 4, 5, 6}) == -123456);\n    assert(multiple_to_single({10, 15, 20, 25}) == 10152025);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\nint multiple_to_single(const std::vector<int>& L) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert a list of multiple integers into a single integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::stringstream ss;\n    for (int num : L) {\n        ss << num;\n//begin to write code\n"
    },
    {
        "task_id": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "code_str": "\n#include <iostream>\n#include <regex>\n#include <tuple>\n#include <cassert>\nusing namespace std;\n\ntuple<int, int, string> find_adverb_position(const string& text) {\n    regex pattern(\"\\\\w+ly\");\n    smatch match;\n    if (regex_search(text, match, pattern)) {\n        return {match.position(0), match.position(0) + match.length(0), match.str(0)};\n    }\n    return {-1, -1, \"\"}; // if no adverb found\n}\n\n\n",
        "test": "int main() {\n    assert(find_adverb_position(\"clearly!! we can see the sky\") == make_tuple(0, 7, \"clearly\"));\n    assert(find_adverb_position(\"seriously!! there are many roses\") == make_tuple(0, 9, \"seriously\"));\n    assert(find_adverb_position(\"unfortunately!! sita is going to home\") == make_tuple(0, 13, \"unfortunately\"));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<int, int, string> find_adverb_position(const string& text) {\n    regex pattern(\"\\\\w+ly\");\n    smatch match;\n    if (regex_search(text, match, pattern)) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<int, int, string> find_adverb_position(const string& text) {\n    regex pattern(\"\\\\w+ly\");\n    smatch match;\n    if (regex_search(text, match, pattern)) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_adverb_position(\"clearly!! we can see the sky\") == make_tuple(0, 7, \"clearly\"));\n    assert(find_adverb_position(\"seriously!! there are many roses\") == make_tuple(0, 9, \"seriously\"));\n    assert(find_adverb_position(\"unfortunately!! sita is going to home\") == make_tuple(0, 13, \"unfortunately\"));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <tuple>\n#include <cassert>\nusing namespace std;\ntuple<int, int, string> find_adverb_position(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all adverbs and their positions in a given sentence.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"\\\\w+ly\");\n    smatch match;\n    if (regex_search(text, match, pattern)) {\n//begin to write code\n"
    },
    {
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n    int surfacearea = 6 * l * l;\n    return surfacearea;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(surfacearea_cube(5) == 150);\n    assert(surfacearea_cube(3) == 54);\n    assert(surfacearea_cube(10) == 600);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the surface area of a cube.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\ndouble temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(surfacearea_cube(5) == 150);\n    assert(surfacearea_cube(3) == 54);\n    assert(surfacearea_cube(10) == 600);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint surfacearea_cube(int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n#include <cmath>\nusing namespace std;\n\ndouble positive_count(vector<int> nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x > 0) {\n            n1 += 1;\n        }\n    }\n    return round(n1 * 100.0 / n) / 100.0;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(positive_count({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) - 0.54) < 1e-9);\n    assert(abs(positive_count({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) - 0.69) < 1e-9);\n    assert(abs(positive_count({2, 4, -6, -9, 11, -12, 14, -5, 17}) - 0.56) < 1e-9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <cmath>\nusing namespace std;\ndouble positive_count(vector<int> nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x > 0) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <cmath>\nusing namespace std;\ndouble positive_count(vector<int> nums) {\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x > 0) {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(positive_count({0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) - 0.54) < 1e-9);\n    assert(abs(positive_count({2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) - 0.69) < 1e-9);\n    assert(abs(positive_count({2, 4, -6, -9, 11, -12, 14, -5, 17}) - 0.56) < 1e-9);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\n#include <cmath>\nusing namespace std;\ndouble positive_count(vector<int> nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the ration of positive numbers in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = nums.size();\n    int n1 = 0;\n    for (int x : nums) {\n        if (x > 0) {\n//begin to write code\n"
    },
    {
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint largest_neg(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n        if (x < max) {\n            max = x;\n        }\n    }\n    return max;\n}\n\n\n",
        "test": "int main() {\n    assert(largest_neg({1, 2, 3, -4, -6}) == -6);\n    assert(largest_neg({1, 2, 3, -8, -9}) == -9);\n    assert(largest_neg({1, 2, 3, 4, -1}) == -1);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint largest_neg(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n        if (x < max) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the largest negative number from the given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint largest_neg(std::vector<int> list1) {\n    int max = list1[0];\n    for (int x : list1) {\n        if (x < max) {\n        double temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(largest_neg({1, 2, 3, -4, -6}) == -6);\n    assert(largest_neg({1, 2, 3, -8, -9}) == -9);\n    assert(largest_neg({1, 2, 3, 4, -1}) == -1);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint largest_neg(std::vector<int> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int max = list1[0];\n    for (int x : list1) {\n        if (x < max) {\n//begin to write code\n"
    },
    {
        "task_id": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "code_str": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n            tmp.push_back(ele[i]);\n        }\n        res.push_back(tmp);\n    }\n    return res;\n}",
        "test": "int main() {\n    assert((trim_tuple({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2) == vector<vector<int>>{{2},{9},{2},{2}}));\n    assert((trim_tuple({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1) == vector<vector<int>>{{3,2,1},{4,9,2},{1,2,3},{8,2,1}}));\n    assert((trim_tuple({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1) == vector<vector<int>> {{8,4}, {8,12},{1,7},{6,9}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n",
        "cpp_prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n        double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((trim_tuple({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 2) == vector<vector<int>>{{2},{9},{2},{2}}));\n    assert((trim_tuple({{5, 3, 2, 1, 4}, {3, 4, 9, 2, 1}, {9, 1, 2, 3, 5}, {4, 8, 2, 1, 7}}, 1) == vector<vector<int>>{{3,2,1},{4,9,2},{1,2,3},{8,2,1}}));\n    assert((trim_tuple({{7, 8, 4, 9}, {11, 8, 12, 4}, {4, 1, 7, 8}, {3, 6, 9, 7}}, 1) == vector<vector<int>> {{8,4}, {8,12},{1,7},{6,9}}));\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\n#include <string>\n#include <sstream>\nusing namespace std;\nvector<vector<int>> trim_tuple(const vector<vector<int>>& test_list, int K) {\n\n    /*\n    progame language:cpp\n    description:Write a function to trim each tuple by k in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> res;\n    for (const auto& ele : test_list) {\n        vector<int> tmp;\n        for(int i = K ;i <= ele.size() - K - 1; i++)\n        {\n//begin to write code\n"
    },
    {
        "task_id": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code_str": "#include<iostream>\n    \n#include <cassert>\n#include <tuple>\n#include <vector>\nusing namespace std;\n\n// Helper function to perform index-wise multiplication\ntemplate<size_t I>\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication_helper(\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> res)\n{\n    auto tup1 = get<I - 1>(test_tup1);\n    auto tup2 = get<I - 1>(test_tup2);\n    get<I - 1>(res) = make_tuple(get<0>(tup1) * get<0>(tup2), get<1>(tup1) * get<1>(tup2));\n    return index_multiplication_helper<I - 1>(test_tup1, test_tup2, res);\n}\n\n// Base case for the recursion\ntemplate<>\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication_helper<0>(\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> res)\n{\n    return res;\n}\n\n// Main function to perform index-wise multiplication\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication(\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2)\n{\n    return index_multiplication_helper<4>(test_tup1, test_tup2, tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>());\n}",
        "test": "int main()\n{\n    assert(index_multiplication(make_tuple(make_tuple(1, 3), make_tuple(4, 5), make_tuple(2, 9), make_tuple(1, 10)),\n                                make_tuple(make_tuple(6, 7), make_tuple(3, 9), make_tuple(1, 1), make_tuple(7, 3)))\n           == make_tuple(make_tuple(6, 21), make_tuple(12, 45), make_tuple(2, 9), make_tuple(7, 30)));\n\n    assert(index_multiplication(make_tuple(make_tuple(2, 4), make_tuple(5, 6), make_tuple(3, 10), make_tuple(2, 11)),\n                                make_tuple(make_tuple(7, 8), make_tuple(4, 10), make_tuple(2, 2), make_tuple(8, 4)))\n           == make_tuple(make_tuple(14, 32), make_tuple(20, 60), make_tuple(6, 20), make_tuple(16, 44)));\n\n    assert(index_multiplication(make_tuple(make_tuple(3, 5), make_tuple(6, 7), make_tuple(4, 11), make_tuple(3, 12)),\n                                make_tuple(make_tuple(8, 9), make_tuple(5, 11), make_tuple(3, 3), make_tuple(9, 5)))\n           == make_tuple(make_tuple(24, 45), make_tuple(30, 77), make_tuple(12, 33), make_tuple(27, 60)));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n#include <tuple>\n#include <vector>\nusing namespace std;\n// Helper function to perform index-wise multiplication\ntemplate<size_t I>\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication_helper(\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> res)\n{\n    auto tup1 = get<I - 1>(test_tup1);\n    auto tup2 = get<I - 1>(test_tup2);\n    get<I - 1>(res) = make_tuple(get<0>(tup1) * get<0>(tup2), get<1>(tup1) * get<1>(tup2));\n    return index_multiplication_helper<I - 1>(test_tup1, test_tup2, res);\n}\n// Base case for the recursion\ntemplate<>\n//begin to write code\n",
        "cpp_prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n#include <tuple>\n#include <vector>\nusing namespace std;\n// Helper function to perform index-wise multiplication\ntemplate<size_t I>\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication_helper(\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> res)\n{\n    auto tup1 = get<I - 1>(test_tup1);\n    auto tup2 = get<I - 1>(test_tup2);\n    get<I - 1>(res) = make_tuple(get<0>(tup1) * get<0>(tup2), get<1>(tup1) * get<1>(tup2));\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    return index_multiplication_helper<I - 1>(test_tup1, test_tup2, res);\n}\n// Base case for the recursion\ntemplate<>\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(index_multiplication(make_tuple(make_tuple(1, 3), make_tuple(4, 5), make_tuple(2, 9), make_tuple(1, 10)),\n                                make_tuple(make_tuple(6, 7), make_tuple(3, 9), make_tuple(1, 1), make_tuple(7, 3)))\n           == make_tuple(make_tuple(6, 21), make_tuple(12, 45), make_tuple(2, 9), make_tuple(7, 30)));\n\n    assert(index_multiplication(make_tuple(make_tuple(2, 4), make_tuple(5, 6), make_tuple(3, 10), make_tuple(2, 11)),\n                                make_tuple(make_tuple(7, 8), make_tuple(4, 10), make_tuple(2, 2), make_tuple(8, 4)))\n           == make_tuple(make_tuple(14, 32), make_tuple(20, 60), make_tuple(6, 20), make_tuple(16, 44)));\n\n    assert(index_multiplication(make_tuple(make_tuple(3, 5), make_tuple(6, 7), make_tuple(4, 11), make_tuple(3, 12)),\n                                make_tuple(make_tuple(8, 9), make_tuple(5, 11), make_tuple(3, 3), make_tuple(9, 5)))\n           == make_tuple(make_tuple(24, 45), make_tuple(30, 77), make_tuple(12, 33), make_tuple(27, 60)));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n#include <tuple>\n#include <vector>\nusing namespace std;\n// Helper function to perform index-wise multiplication\ntemplate<size_t I>\ntuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> index_multiplication_helper(\n\n    /*\n    progame language:cpp\n    description:Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup1,\n    const tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>>& test_tup2,\n    tuple<tuple<int, int>, tuple<int, int>, tuple<int, int>, tuple<int, int>> res)\n{\n    auto tup1 = get<I - 1>(test_tup1);\n    auto tup2 = get<I - 1>(test_tup2);\n    get<I - 1>(res) = make_tuple(get<0>(tup1) * get<0>(tup2), get<1>(tup1) * get<1>(tup2));\n    return index_multiplication_helper<I - 1>(test_tup1, test_tup2, res);\n}\n// Base case for the recursion\ntemplate<>\n//begin to write code\n"
    },
    {
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n                break;\n            }\n        }\n    }\n    return count;\n}\n\n\n",
        "test": "int main() {\n    assert(count_Occurrence({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}) == 3);\n    assert(count_Occurrence({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}) == 6);\n    assert(count_Occurrence({1, 2, 3, 4, 5, 6}, {1, 2}) == 2);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the occurence of all elements of list in a tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n                double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(count_Occurrence({'a', 'a', 'c', 'b', 'd'}, {'a', 'b'}) == 3);\n    assert(count_Occurrence({1, 2, 3, 1, 4, 6, 7, 1, 4}, {1, 4, 7}) == 6);\n    assert(count_Occurrence({1, 2, 3, 4, 5, 6}, {1, 2}) == 2);\n\n    std::cout << \"All tests passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint count_Occurrence(const std::vector<char>& tup, const std::vector<char>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int count = 0;\n    for (char item : tup) {\n        for (char elem : lst) {\n            if (item == elem) {\n                count++;\n//begin to write code\n"
    },
    {
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n        cube_nums.push_back(num * num * num);\n    }\n    return cube_nums;\n}\n\n\n",
        "test": "int main() {\n    vector<int> result;\n\n    result = cube_nums({1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    assert((result == vector<int>{1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}));\n\n    result = cube_nums({10, 20, 30});\n    assert((result == vector<int>{1000, 8000, 27000}));\n\n    result = cube_nums({12, 15});\n    assert((result == vector<int>{1728, 3375}));\n\n    cout << \"All test cases passed.\" << endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n    vector<int> cube_nums;\n    for (int num : nums) {\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    vector<int> result;\n\n    result = cube_nums({1, 2, 3, 4, 5, 6, 7, 8, 9, 10});\n    assert((result == vector<int>{1, 8, 27, 64, 125, 216, 343, 512, 729, 1000}));\n\n    result = cube_nums({10, 20, 30});\n    assert((result == vector<int>{1000, 8000, 27000}));\n\n    result = cube_nums({12, 15});\n    assert((result == vector<int>{1728, 3375}));\n\n    cout << \"All test cases passed.\" << endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nvector<int> cube_nums(const vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> cube_nums;\n    for (int num : nums) {\n//begin to write code\n"
    },
    {
        "task_id": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint cal_sum(int n) {\n    int a = 3;\n    int b = 0;\n    int c = 2;\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 3;\n    }\n    if (n == 2) {\n        return 5;\n    }\n    int sum = 5;\n    while (n > 2) {\n        int d = a + b;\n        sum += d;\n        a = b;\n        b = c;\n        c = d;\n        n--;\n    }\n    return sum;\n}\n\n\n",
        "test": "int main()\n{\n    assert(cal_sum(9) == 49);\n    assert(cal_sum(10) == 66);\n    assert(cal_sum(11) == 88);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint cal_sum(int n) {\n    int a = 3;\n    int b = 0;\n    int c = 2;\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 3;\n    }\n    if (n == 2) {\n        return 5;\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the sum of perrin numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint cal_sum(int n) {\n    int a = 3;\n    int b = 0;\n    int c = 2;\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 3;\n    }\n    if (n == 2) {\n        return 5;\n        double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(cal_sum(9) == 49);\n    assert(cal_sum(10) == 66);\n    assert(cal_sum(11) == 88);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint cal_sum(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the sum of perrin numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int a = 3;\n    int b = 0;\n    int c = 2;\n    if (n == 0) {\n        return 3;\n    }\n    if (n == 1) {\n        return 3;\n    }\n    if (n == 2) {\n        return 5;\n//begin to write code\n"
    },
    {
        "task_id": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "code_str": "#include<cassert>\n#include <iostream>\nusing namespace std;\n\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(check_Triangle(1,5,2,5,4,6) == \"Yes\");\n    assert(check_Triangle(1,1,1,4,1,5) == \"No\");\n    assert(check_Triangle(1,1,1,1,1,1) == \"No\");\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\nusing namespace std;\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the triangle is valid or not if 3 points are given.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\nusing namespace std;\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_Triangle(1,5,2,5,4,6) == \"Yes\");\n    assert(check_Triangle(1,1,1,4,1,5) == \"No\");\n    assert(check_Triangle(1,1,1,1,1,1) == \"No\");\n    cout << \"All test cases passed.\" << endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\nusing namespace std;\nstring check_Triangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the triangle is valid or not if 3 points are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\n    if (a == 0) {\n        return \"No\";\n//begin to write code\n"
    },
    {
        "task_id": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n            result.push_back(str);\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 8) == std::vector<std::string>{\"practice\", \"solution\"}));\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 6) == std::vector<std::string>{\"Python\"}));\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 9) == std::vector<std::string>{\"exercises\"}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 8) == std::vector<std::string>{\"practice\", \"solution\"}));\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 6) == std::vector<std::string>{\"Python\"}));\n    assert((extract_string({\"Python\", \"list\", \"exercises\", \"practice\", \"solution\"}, 9) == std::vector<std::string>{\"exercises\"}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::vector<std::string> extract_string(std::vector<std::string> vec, int l) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<std::string> result;\n    for (auto& str : vec) {\n        if (str.length() == l) {\n//begin to write code\n"
    },
    {
        "task_id": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "code_str": "\n#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\n\nstring remove_whitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n    return regex_replace(text1, pattern, \"\");\n}\n\n\n",
        "test": "int main() {\n    assert(remove_whitespaces(\" Google    Flutter \") == \"GoogleFlutter\");\n    assert(remove_whitespaces(\" Google    Dart \") == \"GoogleDart\");\n    assert(remove_whitespaces(\" iOS    Swift \") == \"iOSSwift\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_whitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_whitespaces(string text1) {\n    regex pattern(\"\\\\s+\");\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_whitespaces(\" Google    Flutter \") == \"GoogleFlutter\");\n    assert(remove_whitespaces(\" Google    Dart \") == \"GoogleDart\");\n    assert(remove_whitespaces(\" iOS    Swift \") == \"iOSSwift\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_whitespaces(string text1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"\\\\s+\");\n//begin to write code\n"
    },
    {
        "task_id": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint loss_amount(int actual_cost, int sale_amount) {\n    if(sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    } else {\n        return -1; // use -1 to represent None\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(loss_amount(1500, 1200) == -1);\n    assert(loss_amount(100, 200) == 100);\n    assert(loss_amount(2000, 5000) == 3000);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint loss_amount(int actual_cost, int sale_amount) {\n    if(sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n//begin to write code\n",
        "cpp_prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint loss_amount(int actual_cost, int sale_amount) {\n    if(sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(loss_amount(1500, 1200) == -1);\n    assert(loss_amount(100, 200) == 100);\n    assert(loss_amount(2000, 5000) == 3000);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint loss_amount(int actual_cost, int sale_amount) {\n\n    /*\n    progame language:cpp\n    description:Write a function that gives loss amount if the given amount has loss else return none.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if(sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n//begin to write code\n"
    },
    {
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint sumofFactors(int n) {\n    if (n % 2 != 0) {\n        return 0;\n    }\n    int res = 1;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)) + 1; ++i) {\n        int count = 0;\n        int curr_sum = 1;\n        int curr_term = 1;\n        while (n % i == 0) {\n            count++;\n            n = n / i;\n            if (i == 2 && count == 1) {\n                curr_sum = 0;\n            }\n            curr_term = curr_term * i;\n            curr_sum = curr_sum + curr_term;\n        }\n        res = res * curr_sum;\n    }\n    if (n >= 2) {\n        res = res * (1 + n);\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(sumofFactors(18) == 26);\n    assert(sumofFactors(30) == 48);\n    assert(sumofFactors(6) == 8);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint sumofFactors(int n) {\n    if (n % 2 != 0) {\n        return 0;\n    }\n    int res = 1;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)) + 1; ++i) {\n        int count = 0;\n        int curr_sum = 1;\n        int curr_term = 1;\n        while (n % i == 0) {\n            count++;\n            n = n / i;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of even factors of a number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint sumofFactors(int n) {\n    if (n % 2 != 0) {\n        return 0;\n    }\n    int res = 1;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)) + 1; ++i) {\n        int count = 0;\n        int curr_sum = 1;\n        int curr_term = 1;\n        while (n % i == 0) {\n            count++;\n            n = n / i;\n            double temp_var_6 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sumofFactors(18) == 26);\n    assert(sumofFactors(30) == 48);\n    assert(sumofFactors(6) == 8);\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint sumofFactors(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of even factors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 != 0) {\n        return 0;\n    }\n    int res = 1;\n    for (int i = 2; i <= static_cast<int>(std::sqrt(n)) + 1; ++i) {\n        int count = 0;\n        int curr_sum = 1;\n        int curr_term = 1;\n        while (n % i == 0) {\n            count++;\n            n = n / i;\n//begin to write code\n"
    },
    {
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "code_str": "\n#include <iostream>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring text_match_wordz(string text){\n    regex pattern(\"\\\\w*z.\\\\w*\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n    } else {\n        return \"Not matched!\";\n    }\n}\n\n\n",
        "test": "int main()\n{\n    assert(text_match_wordz(\"pythonz.\") == \"Found a match!\");\n    assert(text_match_wordz(\"xyz.\") == \"Found a match!\");\n    assert(text_match_wordz(\"  lang  .\") == \"Not matched!\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_wordz(string text){\n    regex pattern(\"\\\\w*z.\\\\w*\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n",
        "cpp_prompt": "Write a function that matches a word containing 'z'.",
        "perturbated_codes": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_wordz(string text){\n    regex pattern(\"\\\\w*z.\\\\w*\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(text_match_wordz(\"pythonz.\") == \"Found a match!\");\n    assert(text_match_wordz(\"xyz.\") == \"Found a match!\");\n    assert(text_match_wordz(\"  lang  .\") == \"Not matched!\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring text_match_wordz(string text){\n\n    /*\n    progame language:cpp\n    description:Write a function that matches a word containing 'z'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"\\\\w*z.\\\\w*\");\n    if (regex_search(text, pattern)) {\n        return \"Found a match!\";\n//begin to write code\n"
    },
    {
        "task_id": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nbool check_monthnumb_number(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\n",
        "test": "int main() {\n    assert(check_monthnumb_number(5) == true);\n    assert(check_monthnumb_number(2) == false);\n    assert(check_monthnumb_number(6) == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n        double temp_var_2 = 9.9;while (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(check_monthnumb_number(5) == true);\n    assert(check_monthnumb_number(2) == false);\n    assert(check_monthnumb_number(6) == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nbool check_monthnumb_number(int monthnum2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check whether the given month number contains 31 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthnum2 == 1 || monthnum2 == 3 || monthnum2 == 5 || monthnum2 == 7 || monthnum2 == 8 || monthnum2 == 10 || monthnum2 == 12) {\n        return true;\n//begin to write code\n"
    },
    {
        "task_id": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n    }\n    return stringlist;\n}\n\n\n",
        "test": "int main() {\n    assert(reverse_string_list({\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"}) == vector<string>({\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"}));\n    assert(reverse_string_list({\"john\", \"amal\", \"joel\", \"george\"}) == vector<string>({\"nhoj\", \"lama\", \"leoj\", \"egroeg\"}));\n    assert(reverse_string_list({\"jack\", \"john\", \"mary\"}) == vector<string>({\"kcaj\", \"nhoj\", \"yram\"}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to reverse strings in a given list of string values.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(reverse_string_list({\"Red\", \"Green\", \"Blue\", \"White\", \"Black\"}) == vector<string>({\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"}));\n    assert(reverse_string_list({\"john\", \"amal\", \"joel\", \"george\"}) == vector<string>({\"nhoj\", \"lama\", \"leoj\", \"egroeg\"}));\n    assert(reverse_string_list({\"jack\", \"john\", \"mary\"}) == vector<string>({\"kcaj\", \"nhoj\", \"yram\"}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nvector<string> reverse_string_list(vector<string> stringlist) {\n\n    /*\n    progame language:cpp\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (string& s : stringlist) {\n        reverse(s.begin(), s.end());\n//begin to write code\n"
    },
    {
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n    return *std::min_element(lst.begin(), lst.end());\n}\n\n\n",
        "test": "int main() {\n    assert((Find_Min<int>({ {1}, {1, 2}, {1, 2, 3} }) == std::vector<int>{1}));\n    assert((Find_Min<int>({ {1, 1}, {1, 1, 1}, {1, 2, 7, 8} }) == std::vector<int>{1, 1}));\n    assert((Find_Min<char>({ {'x'}, {'x', 'y'}, {'x', 'y', 'z'} }) == std::vector<char>{'x'}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sublist having minimum length.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((Find_Min<int>({ {1}, {1, 2}, {1, 2, 3} }) == std::vector<int>{1}));\n    assert((Find_Min<int>({ {1, 1}, {1, 1, 1}, {1, 2, 7, 8} }) == std::vector<int>{1, 1}));\n    assert((Find_Min<char>({ {'x'}, {'x', 'y'}, {'x', 'y', 'z'} }) == std::vector<char>{'x'}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\ntemplate <typename T>\nstd::vector<T> Find_Min(const std::vector<std::vector<T>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 458,
        "prompt": "Write a function to find the area of a rectangle.",
        "code_str": "#include<iostream>\n    \n\n#include <cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n    int area = l * b;\n    return area;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(rectangle_area(10, 20) == 200);\n    assert(rectangle_area(10, 5) == 50);\n    assert(rectangle_area(4, 2) == 8);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the area of a rectangle.",
        "perturbated_codes": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\ndouble temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(rectangle_area(10, 20) == 200);\n    assert(rectangle_area(10, 5) == 50);\n    assert(rectangle_area(4, 2) == 8);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint rectangle_area(int l, int b) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n    return regex_replace(str1, upper, \"\");\n}\n\n\n",
        "test": "int main() {\n    assert(remove_uppercase(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\");\n    assert(remove_uppercase(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\");\n    assert(remove_uppercase(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_uppercase(string str1) {\n    regex upper(\"[A-Z]\");\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_uppercase(\"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\");\n    assert(remove_uppercase(\"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\");\n    assert(remove_uppercase(\"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <regex>\n#include <cassert>\nusing namespace std;\nstring remove_uppercase(string str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex upper(\"[A-Z]\");\n//begin to write code\n"
    },
    {
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n        result.push_back(item[0]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert((Extract({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}) == std::vector<int>{1, 3, 6}));\n    assert((Extract({{1, 2, 3}, {4, 5}}) == std::vector<int>{1, 4}));\n    assert((Extract({{9, 8, 1}, {1, 2}}) == std::vector<int>{9, 1}));\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to get the first element of each sublist.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n    std::vector<int> result;\n    for (auto& item : lst) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((Extract({{1, 2}, {3, 4, 5}, {6, 7, 8, 9}}) == std::vector<int>{1, 3, 6}));\n    assert((Extract({{1, 2, 3}, {4, 5}}) == std::vector<int>{1, 4}));\n    assert((Extract({{9, 8, 1}, {1, 2}}) == std::vector<int>{9, 1}));\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> Extract(const std::vector<std::vector<int>>& lst) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (auto& item : lst) {\n//begin to write code\n"
    },
    {
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "code_str": "#include<iostream>\n    \n\n#include <string>\n#include <cassert>\nusing namespace std;\n\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') upper_ctr += 1;\n    }\n    return upper_ctr;\n}\n\n\n",
        "test": "int main() {\n    assert(upper_ctr(\"PYthon\") == 2);\n    assert(upper_ctr(\"BigData\") == 2);\n    assert(upper_ctr(\"program\") == 0);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to count the upper case characters in a given string.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(upper_ctr(\"PYthon\") == 2);\n    assert(upper_ctr(\"BigData\") == 2);\n    assert(upper_ctr(\"program\") == 0);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cassert>\nusing namespace std;\nint upper_ctr(string str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to count the upper case characters in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int upper_ctr = 0;\n    for (int i = 0; i < str.length(); i++) {\n//begin to write code\n"
    },
    {
        "task_id": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <string>\n#include <cassert>\n\nusing namespace std;\n\nvector<vector<string>> combinations_list(vector<string> list1) {\n    if (list1.empty()) {\n        return {{}};\n    }\n    vector<vector<string>> result;\n    vector<string> rest(list1.begin() + 1, list1.end());\n    for (auto &el : combinations_list(rest)) {\n        result.push_back(el);\n        el.push_back(list1[0]);\n        result.push_back(el);\n    }\n    return result;\n}\n\n\n",
        "test": "int main()\n{\n    assert((combinations_list({\"orange\", \"red\", \"green\", \"blue\"}) == vector<vector<string>>{{}, {\"orange\"}, {\"red\"}, {\"red\", \"orange\"}, {\"green\"}, {\"green\", \"orange\"}, {\"green\", \"red\"}, {\"green\", \"red\", \"orange\"}, {\"blue\"}, {\"blue\", \"orange\"}, {\"blue\", \"red\"}, {\"blue\", \"red\", \"orange\"}, {\"blue\", \"green\"}, {\"blue\", \"green\", \"orange\"}, {\"blue\", \"green\", \"red\"}, {\"blue\", \"green\", \"red\", \"orange\"}}));\n    assert((combinations_list({\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"}) == vector<vector<string>> {{}, {\"red\"}, {\"green\"}, {\"green\", \"red\"}, {\"blue\"}, {\"blue\", \"red\"}, {\"blue\", \"green\"}, {\"blue\", \"green\", \"red\"}, {\"white\"}, {\"white\", \"red\"}, {\"white\", \"green\"}, {\"white\", \"green\", \"red\"}, {\"white\", \"blue\"}, {\"white\", \"blue\", \"red\"}, {\"white\", \"blue\", \"green\"}, {\"white\", \"blue\", \"green\", \"red\"}, {\"black\"}, {\"black\", \"red\"}, {\"black\", \"green\"}, {\"black\", \"green\", \"red\"}, {\"black\", \"blue\"}, {\"black\", \"blue\", \"red\"}, {\"black\", \"blue\", \"green\"}, {\"black\", \"blue\", \"green\", \"red\"}, {\"black\", \"white\"}, {\"black\", \"white\", \"red\"}, {\"black\", \"white\", \"green\"}, {\"black\", \"white\", \"green\", \"red\"}, {\"black\", \"white\", \"blue\"}, {\"black\", \"white\", \"blue\", \"red\"}, {\"black\", \"white\", \"blue\", \"green\"}, {\"black\", \"white\", \"blue\", \"green\", \"red\"}, {\"orange\"}, {\"orange\", \"red\"}, {\"orange\", \"green\"}, {\"orange\", \"green\", \"red\"}, {\"orange\", \"blue\"}, {\"orange\", \"blue\", \"red\"}, {\"orange\", \"blue\", \"green\"}, {\"orange\", \"blue\", \"green\", \"red\"}, {\"orange\", \"white\"}, {\"orange\", \"white\", \"red\"}, {\"orange\", \"white\", \"green\"}, {\"orange\", \"white\", \"green\", \"red\"}, {\"orange\", \"white\", \"blue\"}, {\"orange\", \"white\", \"blue\", \"red\"}, {\"orange\", \"white\", \"blue\", \"green\"}, {\"orange\", \"white\", \"blue\", \"green\", \"red\"}, {\"orange\", \"black\"}, {\"orange\", \"black\", \"red\"}, {\"orange\", \"black\", \"green\"}, {\"orange\", \"black\", \"green\", \"red\"}, {\"orange\", \"black\", \"blue\"}, {\"orange\", \"black\", \"blue\", \"red\"}, {\"orange\", \"black\", \"blue\", \"green\"}, {\"orange\", \"black\", \"blue\", \"green\", \"red\"}, {\"orange\", \"black\", \"white\"}, {\"orange\", \"black\", \"white\", \"red\"}, {\"orange\", \"black\", \"white\", \"green\"}, {\"orange\", \"black\", \"white\", \"green\", \"red\"}, {\"orange\", \"black\", \"white\", \"blue\"}, {\"orange\", \"black\", \"white\", \"blue\", \"red\"}, {\"orange\", \"black\", \"white\", \"blue\", \"green\"}, {\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"}}));\n    assert((combinations_list({\"red\", \"green\", \"black\", \"orange\"}) == vector<vector<string>> {{}, {\"red\"}, {\"green\"}, {\"green\", \"red\"}, {\"black\"}, {\"black\", \"red\"}, {\"black\", \"green\"}, {\"black\", \"green\", \"red\"}, {\"orange\"}, {\"orange\", \"red\"}, {\"orange\", \"green\"}, {\"orange\", \"green\", \"red\"}, {\"orange\", \"black\"}, {\"orange\", \"black\", \"red\"}, {\"orange\", \"black\", \"green\"}, {\"orange\", \"black\", \"green\", \"red\"}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nvector<vector<string>> combinations_list(vector<string> list1) {\n    if (list1.empty()) {\n        return {{}};\n    }\n    vector<vector<string>> result;\n    vector<string> rest(list1.begin() + 1, list1.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nvector<vector<string>> combinations_list(vector<string> list1) {\n    if (list1.empty()) {\n        return {{}};\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    vector<vector<string>> result;\n    vector<string> rest(list1.begin() + 1, list1.end());\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((combinations_list({\"orange\", \"red\", \"green\", \"blue\"}) == vector<vector<string>>{{}, {\"orange\"}, {\"red\"}, {\"red\", \"orange\"}, {\"green\"}, {\"green\", \"orange\"}, {\"green\", \"red\"}, {\"green\", \"red\", \"orange\"}, {\"blue\"}, {\"blue\", \"orange\"}, {\"blue\", \"red\"}, {\"blue\", \"red\", \"orange\"}, {\"blue\", \"green\"}, {\"blue\", \"green\", \"orange\"}, {\"blue\", \"green\", \"red\"}, {\"blue\", \"green\", \"red\", \"orange\"}}));\n    assert((combinations_list({\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"}) == vector<vector<string>> {{}, {\"red\"}, {\"green\"}, {\"green\", \"red\"}, {\"blue\"}, {\"blue\", \"red\"}, {\"blue\", \"green\"}, {\"blue\", \"green\", \"red\"}, {\"white\"}, {\"white\", \"red\"}, {\"white\", \"green\"}, {\"white\", \"green\", \"red\"}, {\"white\", \"blue\"}, {\"white\", \"blue\", \"red\"}, {\"white\", \"blue\", \"green\"}, {\"white\", \"blue\", \"green\", \"red\"}, {\"black\"}, {\"black\", \"red\"}, {\"black\", \"green\"}, {\"black\", \"green\", \"red\"}, {\"black\", \"blue\"}, {\"black\", \"blue\", \"red\"}, {\"black\", \"blue\", \"green\"}, {\"black\", \"blue\", \"green\", \"red\"}, {\"black\", \"white\"}, {\"black\", \"white\", \"red\"}, {\"black\", \"white\", \"green\"}, {\"black\", \"white\", \"green\", \"red\"}, {\"black\", \"white\", \"blue\"}, {\"black\", \"white\", \"blue\", \"red\"}, {\"black\", \"white\", \"blue\", \"green\"}, {\"black\", \"white\", \"blue\", \"green\", \"red\"}, {\"orange\"}, {\"orange\", \"red\"}, {\"orange\", \"green\"}, {\"orange\", \"green\", \"red\"}, {\"orange\", \"blue\"}, {\"orange\", \"blue\", \"red\"}, {\"orange\", \"blue\", \"green\"}, {\"orange\", \"blue\", \"green\", \"red\"}, {\"orange\", \"white\"}, {\"orange\", \"white\", \"red\"}, {\"orange\", \"white\", \"green\"}, {\"orange\", \"white\", \"green\", \"red\"}, {\"orange\", \"white\", \"blue\"}, {\"orange\", \"white\", \"blue\", \"red\"}, {\"orange\", \"white\", \"blue\", \"green\"}, {\"orange\", \"white\", \"blue\", \"green\", \"red\"}, {\"orange\", \"black\"}, {\"orange\", \"black\", \"red\"}, {\"orange\", \"black\", \"green\"}, {\"orange\", \"black\", \"green\", \"red\"}, {\"orange\", \"black\", \"blue\"}, {\"orange\", \"black\", \"blue\", \"red\"}, {\"orange\", \"black\", \"blue\", \"green\"}, {\"orange\", \"black\", \"blue\", \"green\", \"red\"}, {\"orange\", \"black\", \"white\"}, {\"orange\", \"black\", \"white\", \"red\"}, {\"orange\", \"black\", \"white\", \"green\"}, {\"orange\", \"black\", \"white\", \"green\", \"red\"}, {\"orange\", \"black\", \"white\", \"blue\"}, {\"orange\", \"black\", \"white\", \"blue\", \"red\"}, {\"orange\", \"black\", \"white\", \"blue\", \"green\"}, {\"orange\", \"black\", \"white\", \"blue\", \"green\", \"red\"}}));\n    assert((combinations_list({\"red\", \"green\", \"black\", \"orange\"}) == vector<vector<string>> {{}, {\"red\"}, {\"green\"}, {\"green\", \"red\"}, {\"black\"}, {\"black\", \"red\"}, {\"black\", \"green\"}, {\"black\", \"green\", \"red\"}, {\"orange\"}, {\"orange\", \"red\"}, {\"orange\", \"green\"}, {\"orange\", \"green\", \"red\"}, {\"orange\", \"black\"}, {\"orange\", \"black\", \"red\"}, {\"orange\", \"black\", \"green\"}, {\"orange\", \"black\", \"green\", \"red\"}}));\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nusing namespace std;\nvector<vector<string>> combinations_list(vector<string> list1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find all possible combinations of the elements of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (list1.empty()) {\n        return {{}};\n    }\n    vector<vector<string>> result;\n    vector<string> rest(list1.begin() + 1, list1.end());\n//begin to write code\n"
    },
    {
        "task_id": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_subarray_product(vector<int> arr) {\n    int n = arr.size();\n    int max_ending_here = 1;\n    int min_ending_here = 1;\n    int max_so_far = 0;\n    bool flag = false;\n    \n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = true;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            int temp = max_ending_here;\n            max_ending_here = max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n    \n    if (!flag && max_so_far == 0) {\n        return 0;\n    }\n    return max_so_far;\n}\n\n\n",
        "test": "int main() {\n    assert(max_subarray_product({1, -2, -3, 0, 7, -8, -2}) == 112);\n    assert(max_subarray_product({6, -3, -10, 0, 2}) == 180);\n    assert(max_subarray_product({-2, -40, 0, -2, -3}) == 80);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_subarray_product(vector<int> arr) {\n    int n = arr.size();\n    int max_ending_here = 1;\n    int min_ending_here = 1;\n    int max_so_far = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = true;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum product subarray of the given array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_subarray_product(vector<int> arr) {\n    int n = arr.size();\n    int max_ending_here = 1;\n    int min_ending_here = 1;\n    int max_so_far = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = true;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n            double temp_var_8 = 9.9;while (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_subarray_product({1, -2, -3, 0, 7, -8, -2}) == 112);\n    assert(max_subarray_product({6, -3, -10, 0, 2}) == 180);\n    assert(max_subarray_product({-2, -40, 0, -2, -3}) == 80);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_subarray_product(vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum product subarray of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = arr.size();\n    int max_ending_here = 1;\n    int min_ending_here = 1;\n    int max_so_far = 0;\n    bool flag = false;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = min(min_ending_here * arr[i], 1);\n            flag = true;\n        } else if (arr[i] == 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n//begin to write code\n"
    },
    {
        "task_id": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\n\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main() {\n    std::map<std::string, int> test_dict1 = {{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}};\n    assert(check_value(test_dict1, 10) == false);\n    assert(check_value(test_dict1, 12) == true);\n    assert(check_value(test_dict1, 5) == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if all values are same in a dictionary.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, int n) {\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n            double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::map<std::string, int> test_dict1 = {{\"Cierra Vega\", 12}, {\"Alden Cantrell\", 12}, {\"Kierra Gentry\", 12}, {\"Pierre Cox\", 12}};\n    assert(check_value(test_dict1, 10) == false);\n    assert(check_value(test_dict1, 12) == true);\n    assert(check_value(test_dict1, 5) == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <map>\n#include <string>\nbool check_value(std::map<std::string, int> dict, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& kv : dict) {\n        if (kv.second != n) {\n            return false;\n//begin to write code\n"
    },
    {
        "task_id": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "code_str": "\n#include <iostream>\n#include <map>\n#include <cassert>\n\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n            filtered[element.first] = element.second;\n        }\n    }\n    return filtered;\n}\n\n\n",
        "test": "int main()\n{\n    std::map<std::string, std::string> test1{{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result1{{\"c1\", \"Red\"}, {\"c2\", \"Green\"}};\n    assert(drop_empty(test1) == result1);\n\n    std::map<std::string, std::string> test2{{\"c1\", \"Red\"}, {\"c2\", \"\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result2{{\"c1\", \"Red\"}};\n    assert(drop_empty(test2) == result2);\n\n    std::map<std::string, std::string> test3{{\"c1\", \"\"}, {\"c2\", \"Green\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result3{{\"c2\", \"Green\"}};\n    assert(drop_empty(test3) == result3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n",
        "cpp_prompt": "Write a function to drop empty items from a given dictionary.",
        "perturbated_codes": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n        double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::map<std::string, std::string> test1{{\"c1\", \"Red\"}, {\"c2\", \"Green\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result1{{\"c1\", \"Red\"}, {\"c2\", \"Green\"}};\n    assert(drop_empty(test1) == result1);\n\n    std::map<std::string, std::string> test2{{\"c1\", \"Red\"}, {\"c2\", \"\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result2{{\"c1\", \"Red\"}};\n    assert(drop_empty(test2) == result2);\n\n    std::map<std::string, std::string> test3{{\"c1\", \"\"}, {\"c2\", \"Green\"}, {\"c3\", \"\"}};\n    std::map<std::string, std::string> result3{{\"c2\", \"Green\"}};\n    assert(drop_empty(test3) == result3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <map>\n#include <cassert>\nstd::map<std::string, std::string> drop_empty(std::map<std::string, std::string> dict1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to drop empty items from a given dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::map<std::string, std::string> filtered;\n    for(auto const& element : dict1) {\n        if(element.second != \"\") {\n//begin to write code\n"
    },
    {
        "task_id": 466,
        "prompt": "Write a function to find the peak element in the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_peak_util(const std::vector<int>& arr, int low, int high, int n) {\n    int mid = low + (high - low) / 2;\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return find_peak_util(arr, low, mid - 1, n);\n    } else {\n        return find_peak_util(arr, mid + 1, high, n);\n    }\n}\n\nint find_peak(const std::vector<int>& arr, int n) {\n    return find_peak_util(arr, 0, n - 1, n);\n}\n\n\n",
        "test": "int main() {\n    assert(find_peak({1, 3, 20, 4, 1, 0}, 6) == 2);\n    assert(find_peak({2, 3, 4, 5, 6}, 5) == 4);\n    assert(find_peak({8, 9, 11, 12, 14, 15}, 6) == 5);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_peak_util(const std::vector<int>& arr, int low, int high, int n) {\n    int mid = low + (high - low) / 2;\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return find_peak_util(arr, low, mid - 1, n);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the peak element in the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_peak_util(const std::vector<int>& arr, int low, int high, int n) {\n    int mid = low + (high - low) / 2;\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return find_peak_util(arr, low, mid - 1, n);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find_peak({1, 3, 20, 4, 1, 0}, 6) == 2);\n    assert(find_peak({2, 3, 4, 5, 6}, 5) == 4);\n    assert(find_peak({8, 9, 11, 12, 14, 15}, 6) == 5);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_peak_util(const std::vector<int>& arr, int low, int high, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the peak element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mid = low + (high - low) / 2;\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return find_peak_util(arr, low, mid - 1, n);\n//begin to write code\n"
    },
    {
        "task_id": 467,
        "prompt": "Write a python function to convert decimal number to octal number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint decimal_to_Octal(int deciNum) {\n    int octalNum = 0;\n    int countval = 1;\n    int remainder;\n\n    while (deciNum != 0) {\n        remainder = deciNum % 8;\n        octalNum += remainder * countval;\n        countval *= 10;\n        deciNum /= 8;\n    }\n\n    return octalNum;\n}\n\n\n",
        "test": "int main() {\n    assert(decimal_to_Octal(10) == 12);\n    assert(decimal_to_Octal(2) == 2);\n    assert(decimal_to_Octal(33) == 41);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint decimal_to_Octal(int deciNum) {\n    int octalNum = 0;\n    int countval = 1;\n    int remainder;\n    while (deciNum != 0) {\n        remainder = deciNum % 8;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to convert decimal number to octal number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint decimal_to_Octal(int deciNum) {\n    int octalNum = 0;\n    int countval = 1;\n    int remainder;\n    while (deciNum != 0) {\n        remainder = deciNum % 8;\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(decimal_to_Octal(10) == 12);\n    assert(decimal_to_Octal(2) == 2);\n    assert(decimal_to_Octal(33) == 41);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint decimal_to_Octal(int deciNum) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert decimal number to octal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int octalNum = 0;\n    int countval = 1;\n    int remainder;\n    while (deciNum != 0) {\n        remainder = deciNum % 8;\n//begin to write code\n"
    },
    {
        "task_id": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\n\nint max_product(vector<int> arr, int n) {\n    vector<int> mpis(n, 0);\n    for (int i = 0; i < n; ++i) {\n        mpis[i] = arr[i];\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n            if (arr[i] > arr[j] && mpis[i] < mpis[j] * arr[i]) {\n                mpis[i] = mpis[j] * arr[i];\n            }\n        }\n    }\n    return *max_element(mpis.begin(), mpis.end());\n}\n\n\n",
        "test": "int main() {\n    assert(max_product({3, 100, 4, 5, 150, 6}, 6) == 45000);\n    assert(max_product({4, 42, 55, 68, 80}, 5) == 50265600);\n    assert(max_product({10, 22, 9, 33, 21, 50, 41, 60}, 8) == 21780000);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_product(vector<int> arr, int n) {\n    vector<int> mpis(n, 0);\n    for (int i = 0; i < n; ++i) {\n        mpis[i] = arr[i];\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_product(vector<int> arr, int n) {\n    vector<int> mpis(n, 0);\n    for (int i = 0; i < n; ++i) {\n        mpis[i] = arr[i];\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n        double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_product({3, 100, 4, 5, 150, 6}, 6) == 45000);\n    assert(max_product({4, 42, 55, 68, 80}, 5) == 50265600);\n    assert(max_product({10, 22, 9, 33, 21, 50, 41, 60}, 8) == 21780000);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nint max_product(vector<int> arr, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<int> mpis(n, 0);\n    for (int i = 0; i < n; ++i) {\n        mpis[i] = arr[i];\n    }\n    for (int i = 1; i < n; ++i) {\n        for (int j = 0; j < i; ++j) {\n//begin to write code\n"
    },
    {
        "task_id": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint max_profit(vector<int> price, int k) {\n    int n = price.size();\n    vector<vector<int>> final_profit(k + 1, vector<int>(n, 0));\n    \n    for (int i = 0; i <= k; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                final_profit[i][j] = 0;\n            } else {\n                int max_so_far = 0;\n                for (int x = 0; x < j; x++) {\n                    int curr_price = price[j] - price[x] + final_profit[i-1][x];\n                    if (max_so_far < curr_price) {\n                        max_so_far = curr_price;\n                    }\n                }\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far);\n            }\n        }\n    }\n    return final_profit[k][n-1];\n}\n\n\n",
        "test": "int main() {\n    assert(max_profit({1, 5, 2, 3, 7, 6, 4, 5}, 3) == 10);\n    assert(max_profit({2, 4, 7, 5, 4, 3, 5}, 2) == 7);\n    assert(max_profit({10, 6, 8, 4, 2}, 2) == 2);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_profit(vector<int> price, int k) {\n    int n = price.size();\n    vector<vector<int>> final_profit(k + 1, vector<int>(n, 0));\n    for (int i = 0; i <= k; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                final_profit[i][j] = 0;\n            } else {\n                int max_so_far = 0;\n                for (int x = 0; x < j; x++) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_profit(vector<int> price, int k) {\n    int n = price.size();\n    vector<vector<int>> final_profit(k + 1, vector<int>(n, 0));\n    for (int i = 0; i <= k; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                final_profit[i][j] = 0;\n                double temp_var_9 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n            } else {\n                int max_so_far = 0;\n                for (int x = 0; x < j; x++) {\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(max_profit({1, 5, 2, 3, 7, 6, 4, 5}, 3) == 10);\n    assert(max_profit({2, 4, 7, 5, 4, 3, 5}, 2) == 7);\n    assert(max_profit({10, 6, 8, 4, 2}, 2) == 2);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint max_profit(vector<int> price, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the maximum profit earned from a maximum of k stock transactions\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = price.size();\n    vector<vector<int>> final_profit(k + 1, vector<int>(n, 0));\n    for (int i = 0; i <= k; i++) {\n        for (int j = 0; j < n; j++) {\n            if (i == 0 || j == 0) {\n                final_profit[i][j] = 0;\n            } else {\n                int max_so_far = 0;\n                for (int x = 0; x < j; x++) {\n//begin to write code\n"
    },
    {
        "task_id": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n        res.push_back(test_vec[i] + test_vec[i + 1]);\n    }\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<int> test1 = {1, 5, 7, 8, 10};\n    std::vector<int> expected1 = {6, 12, 15, 18};\n    assert(add_pairwise(test1) == expected1);\n\n    std::vector<int> test2 = {2, 6, 8, 9, 11};\n    std::vector<int> expected2 = {8, 14, 17, 20};\n    assert(add_pairwise(test2) == expected2);\n\n    std::vector<int> test3 = {3, 7, 9, 10, 12};\n    std::vector<int> expected3 = {10, 16, 19, 22};\n    assert(add_pairwise(test3) == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<int> test1 = {1, 5, 7, 8, 10};\n    std::vector<int> expected1 = {6, 12, 15, 18};\n    assert(add_pairwise(test1) == expected1);\n\n    std::vector<int> test2 = {2, 6, 8, 9, 11};\n    std::vector<int> expected2 = {8, 14, 17, 20};\n    assert(add_pairwise(test2) == expected2);\n\n    std::vector<int> test3 = {3, 7, 9, 10, 12};\n    std::vector<int> expected3 = {10, 16, 19, 22};\n    assert(add_pairwise(test3) == expected3);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_pairwise(const std::vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the pairwise addition of the elements of the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> res;\n    for (size_t i = 0; i < test_vec.size() - 1; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n\n",
        "test": "int main()\n{\n    assert(find_remainder({ 100, 10, 5, 25, 35, 14 }, 6, 11) == 9);\n    assert(find_remainder({1, 1, 1}, 3, 1) == 0);\n    assert(find_remainder({1, 2, 1}, 3, 2) == 0);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find remainder of array multiplication divided by n.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(find_remainder({ 100, 10, 5, 25, 35, 14 }, 6, 11) == 9);\n    assert(find_remainder({1, 1, 1}, 3, 1) == 0);\n    assert(find_remainder({1, 2, 1}, 3, 2) == 0);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint find_remainder(std::vector<int> arr, int lens, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mul = 1;\n    for (int i = 0; i < lens; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\n",
        "test": "int main()\n{\n    assert(check_Consecutive({1,2,3,4,5}) == true);\n    assert(check_Consecutive({1,2,3,5,6}) == false);\n    assert(check_Consecutive({1,2,1}) == false);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to check whether the given list contains consecutive numbers or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(check_Consecutive({1,2,3,4,5}) == true);\n    assert(check_Consecutive({1,2,3,5,6}) == false);\n    assert(check_Consecutive({1,2,1}) == false);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nbool check_Consecutive(std::vector<int> l) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::sort(l.begin(), l.end());\n    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] != l[i - 1] + 1) {\n//begin to write code\n"
    },
    {
        "task_id": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code_str": "\n#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::set<std::pair<int, int>> tuple_intersection(const std::vector<std::pair<int, int>>& test_list1, const std::vector<std::pair<int, int>>& test_list2) {\n    std::set<std::pair<int, int>> set1, set2;\n    for (auto& ele : test_list1) {\n        set1.insert({std::min(ele.first, ele.second), std::max(ele.first, ele.second)});\n    }\n    for (auto& ele : test_list2) {\n        set2.insert({std::min(ele.first, ele.second), std::max(ele.first, ele.second)});\n    }\n\n    std::set<std::pair<int, int>> res;\n    std::set_intersection(set1.begin(), set1.end(), set2.begin(), set2.end(), std::inserter(res, res.begin()));\n    return res;\n}\n\n\n",
        "test": "int main()\n{\n    assert((tuple_intersection({{3, 4}, {5, 6}, {9, 10}, {4, 5}}, {{5, 4}, {3, 4}, {6, 5}, {9, 11}}) == std::set<std::pair<int, int>>{{4, 5}, {3, 4}, {5, 6}}));\n    assert((tuple_intersection({{4, 1}, {7, 4}, {11, 13}, {17, 14}}, {{1, 4}, {7, 4}, {16, 12}, {10, 13}}) == std::set<std::pair<int, int>>{{4, 7}, {1, 4}}));\n    assert((tuple_intersection({{2, 1}, {3, 2}, {1, 3}, {1, 4}}, {{11, 2}, {2, 3}, {6, 2}, {1, 3}}) == std::set<std::pair<int, int>>{{1, 3}, {2, 3}}));\n    \n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::set<std::pair<int, int>> tuple_intersection(const std::vector<std::pair<int, int>>& test_list1, const std::vector<std::pair<int, int>>& test_list2) {\n    std::set<std::pair<int, int>> set1, set2;\n    for (auto& ele : test_list1) {\n        set1.insert({std::min(ele.first, ele.second), std::max(ele.first, ele.second)});\n    }\n    for (auto& ele : test_list2) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "perturbated_codes": "#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::set<std::pair<int, int>> tuple_intersection(const std::vector<std::pair<int, int>>& test_list1, const std::vector<std::pair<int, int>>& test_list2) {\n    std::set<std::pair<int, int>> set1, set2;\n    for (auto& ele : test_list1) {\n        set1.insert({std::min(ele.first, ele.second), std::max(ele.first, ele.second)});\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    }\n    for (auto& ele : test_list2) {\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert((tuple_intersection({{3, 4}, {5, 6}, {9, 10}, {4, 5}}, {{5, 4}, {3, 4}, {6, 5}, {9, 11}}) == std::set<std::pair<int, int>>{{4, 5}, {3, 4}, {5, 6}}));\n    assert((tuple_intersection({{4, 1}, {7, 4}, {11, 13}, {17, 14}}, {{1, 4}, {7, 4}, {16, 12}, {10, 13}}) == std::set<std::pair<int, int>>{{4, 7}, {1, 4}}));\n    assert((tuple_intersection({{2, 1}, {3, 2}, {1, 3}, {1, 4}}, {{11, 2}, {2, 3}, {6, 2}, {1, 3}}) == std::set<std::pair<int, int>>{{1, 3}, {2, 3}}));\n    \n    std::cout << \"All test cases passed!\\n\";\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <set>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::set<std::pair<int, int>> tuple_intersection(const std::vector<std::pair<int, int>>& test_list1, const std::vector<std::pair<int, int>>& test_list2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<std::pair<int, int>> set1, set2;\n    for (auto& ele : test_list1) {\n        set1.insert({std::min(ele.first, ele.second), std::max(ele.first, ele.second)});\n    }\n    for (auto& ele : test_list2) {\n//begin to write code\n"
    },
    {
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n\nstd::string replace_char(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n        }\n    }\n    return str1;\n}\n\n\n",
        "test": "int main() {\n    assert(replace_char(\"polygon\", 'y', 'l') == \"pollgon\");\n    assert(replace_char(\"character\", 'c', 'a') == \"aharaater\");\n    assert(replace_char(\"python\", 'l', 'a') == \"python\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n",
        "cpp_prompt": "Write a function to replace characters in a string.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n            []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(replace_char(\"polygon\", 'y', 'l') == \"pollgon\");\n    assert(replace_char(\"character\", 'c', 'a') == \"aharaater\");\n    assert(replace_char(\"python\", 'l', 'a') == \"python\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\nstd::string replace_char(std::string str1, char ch, char newch) {\n\n    /*\n    progame language:cpp\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (size_t i = 0; i < str1.length(); ++i) {\n        if (str1[i] == ch) {\n            str1[i] = newch;\n//begin to write code\n"
    },
    {
        "task_id": 475,
        "prompt": "Write a function to sort counter by value.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\n\nbool compare(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\n\nstd::vector<std::pair<std::string, int>> sort_counter(std::map<std::string, int> dict1) {\n    std::vector<std::pair<std::string, int>> sorted_vec(dict1.begin(), dict1.end());\n    std::sort(sorted_vec.begin(), sorted_vec.end(), compare);\n    return sorted_vec;\n}\n\n\n",
        "test": "int main() {\n    std::map<std::string, int> dict1 = {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}};\n    std::vector<std::pair<std::string, int>> expected1 = {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}};\n    assert(sort_counter(dict1) == expected1);\n\n    std::map<std::string, int> dict2 = {{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}};\n    std::vector<std::pair<std::string, int>> expected2 = {{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}};\n    assert(sort_counter(dict2) == expected2);\n\n    std::map<std::string, int> dict3 = {{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}};\n    std::vector<std::pair<std::string, int>> expected3 = {{\"Chemistry\", 1250}, {\"Physics\", 1000}, {\"Math\", 900}};\n    assert(sort_counter(dict3) == expected3);\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nbool compare(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\nstd::vector<std::pair<std::string, int>> sort_counter(std::map<std::string, int> dict1) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort counter by value.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nbool compare(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\nstd::vector<std::pair<std::string, int>> sort_counter(std::map<std::string, int> dict1) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::map<std::string, int> dict1 = {{\"Math\", 81}, {\"Physics\", 83}, {\"Chemistry\", 87}};\n    std::vector<std::pair<std::string, int>> expected1 = {{\"Chemistry\", 87}, {\"Physics\", 83}, {\"Math\", 81}};\n    assert(sort_counter(dict1) == expected1);\n\n    std::map<std::string, int> dict2 = {{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}};\n    std::vector<std::pair<std::string, int>> expected2 = {{\"Math\", 400}, {\"Physics\", 300}, {\"Chemistry\", 250}};\n    assert(sort_counter(dict2) == expected2);\n\n    std::map<std::string, int> dict3 = {{\"Math\", 900}, {\"Physics\", 1000}, {\"Chemistry\", 1250}};\n    std::vector<std::pair<std::string, int>> expected3 = {{\"Chemistry\", 1250}, {\"Physics\", 1000}, {\"Math\", 900}};\n    assert(sort_counter(dict3) == expected3);\n\n    std::cout << \"All tests passed!\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <map>\n#include <algorithm>\n#include <cassert>\nbool compare(const std::pair<std::string, int> &a, const std::pair<std::string, int> &b) {\n    return a.second > b.second;\n}\nstd::vector<std::pair<std::string, int>> sort_counter(std::map<std::string, int> dict1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort counter by value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nint big_sum(const std::vector<int>& nums) {\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    // Test cases\n    assert(big_sum({1, 2, 3}) == 4);\n    assert(big_sum({-1, 2, 3, 4}) == 3);\n    assert(big_sum({2, 3, 6}) == 8);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint big_sum(const std::vector<int>& nums) {\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the sum of the largest and smallest value in a given array.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint big_sum(const std::vector<int>& nums) {\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n    double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    // Test cases\n    assert(big_sum({1, 2, 3}) == 4);\n    assert(big_sum({-1, 2, 3, 4}) == 3);\n    assert(big_sum({2, 3, 6}) == 8);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <algorithm>\nint big_sum(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the sum of the largest and smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = *max_element(nums.begin(), nums.end()) + *min_element(nums.begin(), nums.end());\n//begin to write code\n"
    },
    {
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "code_str": "\n#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\n\nstd::string is_lower(const std::string& str) {\n    std::string lower_str = str;\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n                   [](unsigned char c) { return std::tolower(c); });\n    return lower_str;\n}\n\n\n",
        "test": "int main() {\n    assert(is_lower(\"InValid\") == \"invalid\");\n    assert(is_lower(\"TruE\") == \"true\");\n    assert(is_lower(\"SenTenCE\") == \"sentence\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\nstd::string is_lower(const std::string& str) {\n    std::string lower_str = str;\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to convert the given string to lower case.",
        "perturbated_codes": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\nstd::string is_lower(const std::string& str) {\n    std::string lower_str = str;\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n    double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(is_lower(\"InValid\") == \"invalid\");\n    assert(is_lower(\"TruE\") == \"true\");\n    assert(is_lower(\"SenTenCE\") == \"sentence\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <string>\n#include <cassert>\n#include <algorithm>\nstd::string is_lower(const std::string& str) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string lower_str = str;\n    std::transform(lower_str.begin(), lower_str.end(), lower_str.begin(),\n//begin to write code\n"
    },
    {
        "task_id": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "code_str": "#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n        {\n            res += v;\n        }\n    }\n    return res;\n}",
        "test": "int main()\n{\n    assert(remove_lowercase(\"PYTHon\") == \"PYTH\");\n    assert(remove_lowercase(\"FInD\") == \"FID\");\n    assert(remove_lowercase(\"STRinG\") == \"STRG\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove lowercase substrings from a given string.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(remove_lowercase(\"PYTHon\") == \"PYTH\");\n    assert(remove_lowercase(\"FInD\") == \"FID\");\n    assert(remove_lowercase(\"STRinG\") == \"STRG\");\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nstring remove_lowercase(const string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    string res;\n    for(char v:str1)\n    {\n        if(!(v<='z' && v>='a'))\n//begin to write code\n"
    },
    {
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint first_Digit(int n) {\n    while (n >= 10) {\n        n = n / 10;\n    }\n    return n;\n}\n\n\n",
        "test": "int main() {\n    assert(first_Digit(123) == 1);\n    assert(first_Digit(456) == 4);\n    assert(first_Digit(12) == 1);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint first_Digit(int n) {\n    while (n >= 10) {\n        n = n / 10;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first digit of a given number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint first_Digit(int n) {\n    while (n >= 10) {\n        n = n / 10;\n        double temp_var_2 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first_Digit(123) == 1);\n    assert(first_Digit(456) == 4);\n    assert(first_Digit(12) == 1);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint first_Digit(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (n >= 10) {\n        n = n / 10;\n//begin to write code\n"
    },
    {
        "task_id": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n    for (char c : str1) {\n        if (max < ctr[c]) {\n            max = ctr[c];\n            ch = c;\n        }\n    }\n    return ch;\n}\n\n\n",
        "test": "int main()\n{\n    assert(get_max_occuring_char(\"data\") == 'a');\n    assert(get_max_occuring_char(\"create\") == 'e');\n    assert(get_max_occuring_char(\"brilliant girl\") == 'i');\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the maximum occurring character in a given string.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n    const int ASCII_SIZE = 256;\n    double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(get_max_occuring_char(\"data\") == 'a');\n    assert(get_max_occuring_char(\"create\") == 'e');\n    assert(get_max_occuring_char(\"brilliant girl\") == 'i');\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nchar get_max_occuring_char(const std::string &str1) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const int ASCII_SIZE = 256;\n    int ctr[ASCII_SIZE] = {0};\n    int max = -1;\n    char ch = '\\0';\n    for (char c : str1) {\n        ctr[c]++;\n    }\n//begin to write code\n"
    },
    {
        "task_id": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n    if (sum == 0) return true;\n    if (n == 0) return false;\n    if (set[n - 1] > sum) return is_subset_sum(set, n - 1, sum);\n    return is_subset_sum(set, n-1, sum) || is_subset_sum(set, n-1, sum-set[n-1]);\n}\n\n\n",
        "test": "int main()\n{\n    std::vector<int> set1 = {3, 34, 4, 12, 5, 2};\n    assert(is_subset_sum(set1, 6, 9) == true);\n    assert(is_subset_sum(set1, 6, 30) == false);\n    assert(is_subset_sum(set1, 6, 15) == true);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n    if (sum == 0) return true;\n    if (n == 0) return false;\n//begin to write code\n",
        "cpp_prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\ndouble temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n    if (sum == 0) return true;\n    if (n == 0) return false;\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    std::vector<int> set1 = {3, 34, 4, 12, 5, 2};\n    assert(is_subset_sum(set1, 6, 9) == true);\n    assert(is_subset_sum(set1, 6, 30) == false);\n    assert(is_subset_sum(set1, 6, 15) == true);\n    \n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool is_subset_sum(const std::vector<int>& set, int n, int sum) {\n\n    /*\n    progame language:cpp\n    description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sum == 0) return true;\n    if (n == 0) return false;\n//begin to write code\n"
    },
    {
        "task_id": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code_str": "#include<iostream>\n    \n#include <string>\n#include <cctype>\n#include <cassert>\n#include <regex>\nusing namespace std;\n\nstring match(const string& text) {\n    regex pattern(\"[A-Z]+[a-z]+$\");\n    if(text.empty())\n    {\n        return \"No\";\n    }\n\n    if(regex_search(text,pattern))\n    {\n        return \"Yes\";\n    }\n    return \"No\";\n}",
        "test": "int main() {\n    assert(match(\"Geeks\") == \"Yes\");\n    assert(match(\"geeksforGeeks\") == \"Yes\");\n    assert(match(\"geeks\") == \"No\");\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <string>\n#include <cctype>\n#include <cassert>\n#include <regex>\nusing namespace std;\nstring match(const string& text) {\n    regex pattern(\"[A-Z]+[a-z]+$\");\n    if(text.empty())\n    {\n        return \"No\";\n    }\n//begin to write code\n",
        "cpp_prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "perturbated_codes": "#include<iostream>\n#include <string>\n#include <cctype>\n#include <cassert>\n#include <regex>\nusing namespace std;\nstring match(const string& text) {\ndouble temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    regex pattern(\"[A-Z]+[a-z]+$\");\n    if(text.empty())\n    {\n        return \"No\";\n    }\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(match(\"Geeks\") == \"Yes\");\n    assert(match(\"geeksforGeeks\") == \"Yes\");\n    assert(match(\"geeks\") == \"No\");\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <string>\n#include <cctype>\n#include <cassert>\n#include <regex>\nusing namespace std;\nstring match(const string& text) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    regex pattern(\"[A-Z]+[a-z]+$\");\n    if(text.empty())\n    {\n        return \"No\";\n    }\n//begin to write code\n"
    },
    {
        "task_id": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nusing namespace std;\n\nint first_Factorial_Divisible_Number(int x) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n        if (fact % x == 0) {\n            break;\n        }\n    }\n    return i;\n}\n\n\n",
        "test": "int main() {\n    assert(first_Factorial_Divisible_Number(10) == 5);\n    assert(first_Factorial_Divisible_Number(15) == 5);\n    assert(first_Factorial_Divisible_Number(5) == 5);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint first_Factorial_Divisible_Number(int x) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the first natural number whose factorial is divisible by x.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint first_Factorial_Divisible_Number(int x) {\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n        double temp_var_4 = 9.9;if (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(first_Factorial_Divisible_Number(10) == 5);\n    assert(first_Factorial_Divisible_Number(15) == 5);\n    assert(first_Factorial_Divisible_Number(5) == 5);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nusing namespace std;\nint first_Factorial_Divisible_Number(int x) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int i = 1;\n    int fact = 1;\n    for (i = 1; i <= x; ++i) {\n        fact *= i;\n//begin to write code\n"
    },
    {
        "task_id": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "code_str": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n#include <cassert>\n#include <utility> // for std::pair\n#include <iostream>\n\nusing namespace std;\n\n\nstruct PairHash {\n    template <class T1, class T2>\n    std::size_t operator() (const std::pair<T1, T2>& pair) const {\n        auto hash1 = std::hash<T1>{}(pair.first);\n        auto hash2 = std::hash<T2>{}(pair.second);\n        return hash1 ^ (hash2 << 1); \n    }\n};\n\nstruct PairEqual {\n    template <class T1, class T2>\n    bool operator() (const std::pair<T1, T2>& lhs, const std::pair<T1, T2>& rhs) const {\n        return lhs.first == rhs.first && lhs.second == rhs.second;\n    }\n};\n\nvector<pair<string, string>> remove_matching_tuple(const vector<pair<string, string>>& test_list1, const vector<pair<string, string>>& test_list2) {\n    vector<pair<string, string>> res;\n\n    unordered_map<pair<string,string>,int,PairHash, PairEqual> counter2;\n    for(const auto& one:test_list2)\n    {\n        counter2[one]++;\n    }\n\n    for (const auto& sub : test_list1) {\n        if(counter2.find(sub) == counter2.end())\n        {\n            res.push_back(sub);\n        }\n    }\n    \n    return res;\n}",
        "test": "int main() {\n    assert((remove_matching_tuple({{\"Hello\", \"dude\"}, {\"How\", \"are\"}, {\"you\", \"?\"}}, {{\"Hello\", \"dude\"}, {\"How\", \"are\"}}) == vector<pair<string, string>>{{\"you\", \"?\"}}));\n    assert((remove_matching_tuple({{\"Part\", \"of\"}, {\"the\", \"journey\"}, {\"is \", \"end\"}}, {{\"Journey\", \"the\"}, {\"is\", \"end\"}}) == vector<pair<string, string>>{{\"Part\", \"of\"}, {\"the\", \"journey\"}, {\"is \", \"end\"}}));\n    assert((remove_matching_tuple({{\"Its\", \"been\"}, {\"a\", \"long\"}, {\"day\", \"without\"}}, {{\"a\", \"long\"}, {\"my\", \"friend\"}}) == vector<pair<string, string>>{{\"Its\", \"been\"}, {\"day\", \"without\"}}));\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n#include <cassert>\n#include <utility> // for std::pair\n#include <iostream>\nusing namespace std;\nstruct PairHash {\n    template <class T1, class T2>\n    std::size_t operator() (const std::pair<T1, T2>& pair) const {\n        auto hash1 = std::hash<T1>{}(pair.first);\n        auto hash2 = std::hash<T2>{}(pair.second);\n        return hash1 ^ (hash2 << 1); \n    }\n};\nstruct PairEqual {\n    template <class T1, class T2>\n    bool operator() (const std::pair<T1, T2>& lhs, const std::pair<T1, T2>& rhs) const {\n        return lhs.first == rhs.first && lhs.second == rhs.second;\n    }\n};\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "perturbated_codes": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n#include <cassert>\n#include <utility> // for std::pair\n#include <iostream>\nusing namespace std;\nstruct PairHash {\n    template <class T1, class T2>\n    std::size_t operator() (const std::pair<T1, T2>& pair) const {\n        auto hash1 = std::hash<T1>{}(pair.first);\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n        auto hash2 = std::hash<T2>{}(pair.second);\n        return hash1 ^ (hash2 << 1); \n    }\n};\nstruct PairEqual {\n    template <class T1, class T2>\n    bool operator() (const std::pair<T1, T2>& lhs, const std::pair<T1, T2>& rhs) const {\n        return lhs.first == rhs.first && lhs.second == rhs.second;\n    }\n};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert((remove_matching_tuple({{\"Hello\", \"dude\"}, {\"How\", \"are\"}, {\"you\", \"?\"}}, {{\"Hello\", \"dude\"}, {\"How\", \"are\"}}) == vector<pair<string, string>>{{\"you\", \"?\"}}));\n    assert((remove_matching_tuple({{\"Part\", \"of\"}, {\"the\", \"journey\"}, {\"is \", \"end\"}}, {{\"Journey\", \"the\"}, {\"is\", \"end\"}}) == vector<pair<string, string>>{{\"Part\", \"of\"}, {\"the\", \"journey\"}, {\"is \", \"end\"}}));\n    assert((remove_matching_tuple({{\"Its\", \"been\"}, {\"a\", \"long\"}, {\"day\", \"without\"}}, {{\"a\", \"long\"}, {\"my\", \"friend\"}}) == vector<pair<string, string>>{{\"Its\", \"been\"}, {\"day\", \"without\"}}));\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <unordered_map>\n#include <cassert>\n#include <utility> // for std::pair\n#include <iostream>\nusing namespace std;\nstruct PairHash {\n    template <class T1, class T2>\n    std::size_t operator() (const std::pair<T1, T2>& pair) const {\n        auto hash1 = std::hash<T1>{}(pair.first);\n        auto hash2 = std::hash<T2>{}(pair.second);\n        return hash1 ^ (hash2 << 1); \n    }\n};\nstruct PairEqual {\n    template <class T1, class T2>\n    bool operator() (const std::pair<T1, T2>& lhs, const std::pair<T1, T2>& rhs) const {\n        return lhs.first == rhs.first && lhs.second == rhs.second;\n    }\n};\n//begin to write code\n"
    },
    {
        "task_id": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nusing namespace std;\n\nbool is_palindrome(int n) {\n    int divisor = 1;\n    while (n / divisor >= 10) {\n        divisor *= 10;\n    }\n    while (n != 0) {\n        int leading = n / divisor;\n        int trailing = n % 10;\n        if (leading != trailing) {\n            return false;\n        }\n        n = (n % divisor) / 10;\n        divisor /= 100;\n    }\n    return true;\n}\n\nint largest_palindrome(vector<int>& A, int n) {\n    sort(A.begin(), A.end());\n    for (int i = n - 1; i >= 0; --i) {\n        if (is_palindrome(A[i])) {\n            return A[i];\n        }\n    }\n    return -1;\n}\n\n\n",
        "test": "int main()\n{\n    vector<int> v1 = {1, 232, 54545, 999991};\n    assert(largest_palindrome(v1, 4) == 54545);\n\n    vector<int> v2 = {1, 2, 3, 4, 5, 50};\n    assert(largest_palindrome(v2, 6) == 5);\n\n    vector<int> v3 = {1, 3, 7, 9, 45};\n    assert(largest_palindrome(v3, 5) == 9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_palindrome(int n) {\n    int divisor = 1;\n    while (n / divisor >= 10) {\n        divisor *= 10;\n    }\n    while (n != 0) {\n        int leading = n / divisor;\n        int trailing = n % 10;\n        if (leading != trailing) {\n            return false;\n        }\n        n = (n % divisor) / 10;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the largest palindromic number in the given array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_palindrome(int n) {\n    int divisor = 1;\n    while (n / divisor >= 10) {\n        divisor *= 10;\n    }\n    while (n != 0) {\n        int leading = n / divisor;\n        int trailing = n % 10;\n        if (leading != trailing) {\n            return false;\n        }\n        n = (n % divisor) / 10;\n        double temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    vector<int> v1 = {1, 232, 54545, 999991};\n    assert(largest_palindrome(v1, 4) == 54545);\n\n    vector<int> v2 = {1, 2, 3, 4, 5, 50};\n    assert(largest_palindrome(v2, 6) == 5);\n\n    vector<int> v3 = {1, 3, 7, 9, 45};\n    assert(largest_palindrome(v3, 5) == 9);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nusing namespace std;\nbool is_palindrome(int n) {\n    int divisor = 1;\n    while (n / divisor >= 10) {\n        divisor *= 10;\n    }\n    while (n != 0) {\n        int leading = n / divisor;\n        int trailing = n % 10;\n        if (leading != trailing) {\n            return false;\n        }\n        n = (n % divisor) / 10;\n//begin to write code\n"
    },
    {
        "task_id": 486,
        "prompt": "Write a function to compute binomial probability for the given number.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble nCr(int n, int r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    double answer = 1;\n    for (int i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n        answer /= i;\n    }\n    return answer;\n}\n\ndouble binomial_probability(int n, int k, double p) {\n    return nCr(n, k) * pow(p, k) * pow(1 - p, n - k);\n}\n\n\n",
        "test": "int main() {\n    assert(fabs(binomial_probability(10, 5, 1.0/3) - 0.13656454808718185) < 1e-9);\n    assert(fabs(binomial_probability(11, 6, 2.0/4) - 0.2255859375) < 1e-9);\n    assert(fabs(binomial_probability(12, 7, 3.0/5) - 0.227030335488) < 1e-9);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble nCr(int n, int r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    double answer = 1;\n    for (int i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n//begin to write code\n",
        "cpp_prompt": "Write a function to compute binomial probability for the given number.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble nCr(int n, int r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    double answer = 1;\n    for (int i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n        double temp_var_5 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(fabs(binomial_probability(10, 5, 1.0/3) - 0.13656454808718185) < 1e-9);\n    assert(fabs(binomial_probability(11, 6, 2.0/4) - 0.2255859375) < 1e-9);\n    assert(fabs(binomial_probability(12, 7, 3.0/5) - 0.227030335488) < 1e-9);\n\n    std::cout << \"All test cases passed successfully.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble nCr(int n, int r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    double answer = 1;\n    for (int i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n//begin to write code\n"
    },
    {
        "task_id": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\n\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n    }\n    return tup;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::pair<int, int>> v1 = {{1, 3}, {3, 2}, {2, 1}};\n    std::vector<std::pair<int, int>> v2 = {{2, 4}, {3, 3}, {1, 1}};\n    std::vector<std::pair<int, int>> v3 = {{3, 9}, {6, 7}, {4, 3}};\n    \n    assert((sort_tuple(v1) == std::vector<std::pair<int, int>>{{2, 1}, {3, 2}, {1, 3}}));\n    assert((sort_tuple(v2) == std::vector<std::pair<int, int>>{{1, 1}, {3, 3}, {2, 4}}));\n    assert((sort_tuple(v3) == std::vector<std::pair<int, int>>{{4, 3}, {6, 7}, {3, 9}}));\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n",
        "cpp_prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n                []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::pair<int, int>> v1 = {{1, 3}, {3, 2}, {2, 1}};\n    std::vector<std::pair<int, int>> v2 = {{2, 4}, {3, 3}, {1, 1}};\n    std::vector<std::pair<int, int>> v3 = {{3, 9}, {6, 7}, {4, 3}};\n    \n    assert((sort_tuple(v1) == std::vector<std::pair<int, int>>{{2, 1}, {3, 2}, {1, 3}}));\n    assert((sort_tuple(v2) == std::vector<std::pair<int, int>>{{1, 1}, {3, 3}, {2, 4}}));\n    assert((sort_tuple(v3) == std::vector<std::pair<int, int>>{{4, 3}, {6, 7}, {3, 9}}));\n    \n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <utility>\n#include <cassert>\nstd::vector<std::pair<int, int>> sort_tuple(std::vector<std::pair<int, int>>& tup) {\n\n    /*\n    progame language:cpp\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int lst = tup.size();\n    for (int i = 0; i < lst; ++i) {\n        for (int j = 0; j < lst - i - 1; ++j) {\n            if (tup[j].second > tup[j + 1].second) {\n                std::pair<int, int> temp = tup[j];\n//begin to write code\n"
    },
    {
        "task_id": 488,
        "prompt": "Write a function to find the area of a pentagon.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\ndouble area_pentagon(double a) {\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n  return area;\n}\n\n\n",
        "test": "int main() {\n  assert(abs(area_pentagon(5) - 43.01193501472417) < 0.0001);\n  assert(abs(area_pentagon(10) - 172.0477400588967) < 0.0001);\n  assert(abs(area_pentagon(15) - 387.10741513251753) < 0.0001);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the area of a pentagon.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n  double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n  assert(abs(area_pentagon(5) - 43.01193501472417) < 0.0001);\n  assert(abs(area_pentagon(10) - 172.0477400588967) < 0.0001);\n  assert(abs(area_pentagon(15) - 387.10741513251753) < 0.0001);\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\ndouble area_pentagon(double a) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the area of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  double area = (sqrt(5 * (5 + 2 * sqrt(5))) * pow(a, 2)) / 4.0;\n//begin to write code\n"
    },
    {
        "task_id": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] == mn) {\n            freq++;\n        }\n    }\n    return freq;\n}\n\n\n",
        "test": "int main() {\n    assert(frequency_Of_Largest(5, {1, 2, 3, 4, 4}) == 2);\n    assert(frequency_Of_Largest(3, {5, 6, 5}) == 1);\n    assert(frequency_Of_Largest(4, {2, 7, 7, 7}) == 3);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the frequency of the largest value in a given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            double temp_var_6 = 9.9;if (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(frequency_Of_Largest(5, {1, 2, 3, 4, 4}) == 2);\n    assert(frequency_Of_Largest(3, {5, 6, 5}) == 1);\n    assert(frequency_Of_Largest(4, {2, 7, 7, 7}) == 3);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nint frequency_Of_Largest(int n, std::vector<int> arr) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int mn = arr[0];\n    int freq = 1;\n    for (int i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n//begin to write code\n"
    },
    {
        "task_id": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\n\nset<pair<int, int>> extract_symmetric(vector<pair<int, int>> test_list) {\n    set<pair<int, int>> temp;\n    for (auto& p : test_list) {\n        temp.insert(p);\n    }\n    set<pair<int, int>> res;\n    for (auto& p : temp) {\n        if (temp.find({p.second, p.first}) != temp.end() && p.first < p.second) {\n            res.insert(p);\n        }\n    }\n    return res;\n}\n\n\n",
        "test": "int main() {\n    assert(\n        (extract_symmetric({{6, 7}, {2, 3}, {7, 6}, {9, 8}, {10, 2}, {8, 9}}) ==\n        set<pair<int, int>>({{6, 7}, {8, 9}}))\n    );\n    assert(\n        (extract_symmetric({{7, 8}, {3, 4}, {8, 7}, {10, 9}, {11, 3}, {9, 10}}) ==\n        set<pair<int, int>>({{7, 8}, {9, 10}}))\n    );\n    assert(\n        (extract_symmetric({{8, 9}, {4, 5}, {9, 8}, {11, 10}, {12, 4}, {10, 11}}) ==\n        set<pair<int, int>>({{8, 9}, {10, 11}}))\n    );\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nset<pair<int, int>> extract_symmetric(vector<pair<int, int>> test_list) {\n    set<pair<int, int>> temp;\n    for (auto& p : test_list) {\n        temp.insert(p);\n    }\n    set<pair<int, int>> res;\n//begin to write code\n",
        "cpp_prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nset<pair<int, int>> extract_symmetric(vector<pair<int, int>> test_list) {\ndouble temp_var_5 = 9.9;if (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    set<pair<int, int>> temp;\n    for (auto& p : test_list) {\n        temp.insert(p);\n    }\n    set<pair<int, int>> res;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(\n        (extract_symmetric({{6, 7}, {2, 3}, {7, 6}, {9, 8}, {10, 2}, {8, 9}}) ==\n        set<pair<int, int>>({{6, 7}, {8, 9}}))\n    );\n    assert(\n        (extract_symmetric({{7, 8}, {3, 4}, {8, 7}, {10, 9}, {11, 3}, {9, 10}}) ==\n        set<pair<int, int>>({{7, 8}, {9, 10}}))\n    );\n    assert(\n        (extract_symmetric({{8, 9}, {4, 5}, {9, 8}, {11, 10}, {12, 4}, {10, 11}}) ==\n        set<pair<int, int>>({{8, 9}, {10, 11}}))\n    );\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cassert>\nusing namespace std;\nset<pair<int, int>> extract_symmetric(vector<pair<int, int>> test_list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to extract all the pairs which are symmetric in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    set<pair<int, int>> temp;\n    for (auto& p : test_list) {\n        temp.insert(p);\n    }\n    set<pair<int, int>> res;\n//begin to write code\n"
    },
    {
        "task_id": 491,
        "prompt": "Write a function to find the sum of geometric progression series.",
        "code_str": "#include<iostream>\n    \n\n#include <cmath>\n#include <cassert>\n\nusing namespace std;\n\ndouble sum_gp(double a, int n, double r) {\n    double total = (a * (1 - pow(r, n))) / (1 - r);\n    return total;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(sum_gp(1, 5, 2) - 31) < 1e-9);\n    assert(abs(sum_gp(1, 5, 4) - 341) < 1e-9);\n    assert(abs(sum_gp(2, 6, 3) - 728) < 1e-9);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble sum_gp(double a, int n, double r) {\n    double total = (a * (1 - pow(r, n))) / (1 - r);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the sum of geometric progression series.",
        "perturbated_codes": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble sum_gp(double a, int n, double r) {\ndouble temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n    double total = (a * (1 - pow(r, n))) / (1 - r);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(sum_gp(1, 5, 2) - 31) < 1e-9);\n    assert(abs(sum_gp(1, 5, 4) - 341) < 1e-9);\n    assert(abs(sum_gp(2, 6, 3) - 728) < 1e-9);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <cmath>\n#include <cassert>\nusing namespace std;\ndouble sum_gp(double a, int n, double r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the sum of geometric progression series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double total = (a * (1 - pow(r, n))) / (1 - r);\n//begin to write code\n"
    },
    {
        "task_id": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n\n    return found;\n}\n\n\n",
        "test": "int main() {\n    assert(binary_search({1, 2, 3, 5, 8}, 6) == false);\n    assert(binary_search({7, 8, 9, 10, 13}, 10) == true);\n    assert(binary_search({11, 13, 14, 19, 22, 36}, 23) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n",
        "cpp_prompt": "Write a function to search an element in the given array by using binary search.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(binary_search({1, 2, 3, 5, 8}, 6) == false);\n    assert(binary_search({7, 8, 9, 10, 13}, 10) == true);\n    assert(binary_search({11, 13, 14, 19, 22, 36}, 23) == false);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nbool binary_search(const std::vector<int>& item_list, int item) {\n\n    /*\n    progame language:cpp\n    description:Write a function to search an element in the given array by using binary search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int first = 0;\n    int last = item_list.size() - 1;\n    bool found = false;\n    while (first <= last && !found) {\n        int mid = (first + last) / 2;\n        if (item_list[mid] == item) {\n            found = true;\n        } else {\n//begin to write code\n"
    },
    {
        "task_id": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\n\ntypedef std::vector<std::pair<double, double>> Polygon;\n\nstd::vector<Polygon> calculate_polygons(double startx, double starty, double endx, double endy, double radius)\n{\n    double sl = (2 * radius) * std::tan(M_PI / 6);\n    double p = sl * 0.5;\n    double b = sl * std::cos(30 * M_PI / 180.0);\n    double w = b * 2;\n    double h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    double origx = startx;\n    double origy = starty;\n    double xoffset = b;\n    double yoffset = 3 * p;\n    std::vector<Polygon> polygons;\n    int row = 1;\n    int counter = 0;\n    while (starty < endy)\n    {\n        if (row % 2 == 0)\n        {\n            startx = origx + xoffset;\n        }\n        else\n        {\n            startx = origx;\n        }\n        while (startx < endx)\n        {\n            double p1x = startx;\n            double p1y = starty + p;\n            double p2x = startx;\n            double p2y = starty + (3 * p);\n            double p3x = startx + b;\n            double p3y = starty + h;\n            double p4x = startx + w;\n            double p4y = starty + (3 * p);\n            double p5x = startx + w;\n            double p5y = starty + p;\n            double p6x = startx + b;\n            double p6y = starty;\n            Polygon poly = {\n                {p1x, p1y},\n                {p2x, p2y},\n                {p3x, p3y},\n                {p4x, p4y},\n                {p5x, p5y},\n                {p6x, p6y},\n                {p1x, p1y}\n            };\n            polygons.push_back(poly);\n            counter += 1;\n            startx += w;\n        }\n        starty += yoffset;\n        row += 1;\n    }\n    return polygons;\n}\n\n\n",
        "test": "int main()\n{\n    auto polygons1 = calculate_polygons(1, 1, 4, 4, 3);\n    auto polygons2 = calculate_polygons(5, 4, 7, 9, 8);\n    auto polygons3 = calculate_polygons(9, 6, 4, 3, 2);\n\n    assert(polygons1.size() == 10);\n    assert(polygons2.size() == 10);\n    assert(polygons3.size() == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ntypedef std::vector<std::pair<double, double>> Polygon;\nstd::vector<Polygon> calculate_polygons(double startx, double starty, double endx, double endy, double radius)\n{\n    double sl = (2 * radius) * std::tan(M_PI / 6);\n    double p = sl * 0.5;\n    double b = sl * std::cos(30 * M_PI / 180.0);\n    double w = b * 2;\n    double h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    double origx = startx;\n    double origy = starty;\n    double xoffset = b;\n    double yoffset = 3 * p;\n    std::vector<Polygon> polygons;\n    int row = 1;\n    int counter = 0;\n    while (starty < endy)\n    {\n        if (row % 2 == 0)\n        {\n            startx = origx + xoffset;\n        }\n        else\n        {\n            startx = origx;\n        }\n        while (startx < endx)\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ntypedef std::vector<std::pair<double, double>> Polygon;\nstd::vector<Polygon> calculate_polygons(double startx, double starty, double endx, double endy, double radius)\n{\n    double sl = (2 * radius) * std::tan(M_PI / 6);\n    double p = sl * 0.5;\n    double b = sl * std::cos(30 * M_PI / 180.0);\n    double w = b * 2;\n    double h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    double origx = startx;\n    double origy = starty;\n    double xoffset = b;\n    double yoffset = 3 * p;\n    std::vector<Polygon> polygons;\n    int row = 1;\n    int counter = 0;\n    while (starty < endy)\n    {\n        if (row % 2 == 0)\n        {\n            startx = origx + xoffset;\n        }\n        else\n        {\n            startx = origx;\n        }\n        while (startx < endx)\n        double temp_var_18 = 9.9;if (temp_var_18 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_18 = temp_var_18 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    auto polygons1 = calculate_polygons(1, 1, 4, 4, 3);\n    auto polygons2 = calculate_polygons(5, 4, 7, 9, 8);\n    auto polygons3 = calculate_polygons(9, 6, 4, 3, 2);\n\n    assert(polygons1.size() == 10);\n    assert(polygons2.size() == 10);\n    assert(polygons3.size() == 2);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <cassert>\ntypedef std::vector<std::pair<double, double>> Polygon;\nstd::vector<Polygon> calculate_polygons(double startx, double starty, double endx, double endy, double radius)\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n{\n    double sl = (2 * radius) * std::tan(M_PI / 6);\n    double p = sl * 0.5;\n    double b = sl * std::cos(30 * M_PI / 180.0);\n    double w = b * 2;\n    double h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    double origx = startx;\n    double origy = starty;\n    double xoffset = b;\n    double yoffset = 3 * p;\n    std::vector<Polygon> polygons;\n    int row = 1;\n    int counter = 0;\n    while (starty < endy)\n    {\n        if (row % 2 == 0)\n        {\n            startx = origx + xoffset;\n        }\n        else\n        {\n            startx = origx;\n        }\n        while (startx < endx)\n//begin to write code\n"
    },
    {
        "task_id": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\n\nstd::string binary_to_integer(const std::vector<int>& test_vec) {\n    std::string bin_str = \"\";\n    for (int num : test_vec) {\n        bin_str += std::to_string(num);\n    }\n    int decimal = std::stoi(bin_str, nullptr, 2);\n    return std::to_string(decimal);\n}\n\n\n",
        "test": "int main() {\n    assert(binary_to_integer({1, 1, 0, 1, 0, 0, 1}) == \"105\");\n    assert(binary_to_integer({0, 1, 1, 0, 0, 1, 0, 1}) == \"101\");\n    assert(binary_to_integer({1, 1, 0, 1, 0, 1}) == \"53\");\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\nstd::string binary_to_integer(const std::vector<int>& test_vec) {\n    std::string bin_str = \"\";\n    for (int num : test_vec) {\n        bin_str += std::to_string(num);\n//begin to write code\n",
        "cpp_prompt": "Write a function to convert the given binary tuple to integer.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\nstd::string binary_to_integer(const std::vector<int>& test_vec) {\n    std::string bin_str = \"\";\n    for (int num : test_vec) {\n        bin_str += std::to_string(num);\n        double temp_var_3 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(binary_to_integer({1, 1, 0, 1, 0, 0, 1}) == \"105\");\n    assert(binary_to_integer({0, 1, 1, 0, 0, 1, 0, 1}) == \"101\");\n    assert(binary_to_integer({1, 1, 0, 1, 0, 1}) == \"53\");\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <bitset>\nstd::string binary_to_integer(const std::vector<int>& test_vec) {\n\n    /*\n    progame language:cpp\n    description:Write a function to convert the given binary tuple to integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string bin_str = \"\";\n    for (int num : test_vec) {\n        bin_str += std::to_string(num);\n//begin to write code\n"
    },
    {
        "task_id": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\n\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n            result += ch;\n        }\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\") == \"KDALOOOHLAJSI\");\n    assert(remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\") == \"PTEAIMAAY\");\n    assert(remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\") == \"NTYSZTNOGI\");\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n        double temp_var_3 = 9.9;while (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\") == \"KDALOOOHLAJSI\");\n    assert(remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\") == \"PTEAIMAAY\");\n    assert(remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\") == \"NTYSZTNOGI\");\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <string>\n#include <cctype>\nstd::string remove_lowercase(const std::string& str1) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string result;\n    for (char ch : str1) {\n        if (!std::islower(ch)) {\n//begin to write code\n"
    },
    {
        "task_id": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code_str": "\n#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\n\nstd::vector<int> heap_queue_smallest(std::vector<int> nums, int n) {\n    std::vector<int> smallest_nums(n);\n    std::partial_sort_copy(nums.begin(), nums.end(), smallest_nums.begin(), smallest_nums.end());\n    return smallest_nums;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> result;\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 25, 58}, 3);\n    assert((result == std::vector<int>{14, 22, 25}));\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 25, 58}, 2);\n    assert((result == std::vector<int>{14, 22}));\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5);\n    assert((result == std::vector<int>{14, 22, 22, 25, 35}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nstd::vector<int> heap_queue_smallest(std::vector<int> nums, int n) {\n    std::vector<int> smallest_nums(n);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "perturbated_codes": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nstd::vector<int> heap_queue_smallest(std::vector<int> nums, int n) {\n    std::vector<int> smallest_nums(n);\n    []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> result;\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 25, 58}, 3);\n    assert((result == std::vector<int>{14, 22, 25}));\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 25, 58}, 2);\n    assert((result == std::vector<int>{14, 22}));\n    \n    result = heap_queue_smallest({25, 35, 22, 85, 14, 65, 75, 22, 58}, 5);\n    assert((result == std::vector<int>{14, 22, 22, 25, 35}));\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <vector>\n#include <algorithm>\n#include <cassert>\n#include <iostream>\nstd::vector<int> heap_queue_smallest(std::vector<int> nums, int n) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> smallest_nums(n);\n//begin to write code\n"
    },
    {
        "task_id": 497,
        "prompt": "Write a function to find the surface area of a cone.",
        "code_str": "\n#include <cmath>\n#include <cassert>\n#include <iostream>\n\ndouble surfacearea_cone(double r, double h) {\n    double l = sqrt(r * r + h * h);\n    double SA = M_PI * r * (r + l);\n    return SA;\n}\n\n\n",
        "test": "int main() {\n    assert(abs(surfacearea_cone(5, 12) - 282.7433388230814) < 1e-9);\n    assert(abs(surfacearea_cone(10, 15) - 880.5179353159282) < 1e-9);\n    assert(abs(surfacearea_cone(19, 17) - 2655.923961165254) < 1e-9);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble surfacearea_cone(double r, double h) {\n    double l = sqrt(r * r + h * h);\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the surface area of a cone.",
        "perturbated_codes": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble surfacearea_cone(double r, double h) {\n[]() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n    double l = sqrt(r * r + h * h);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(abs(surfacearea_cone(5, 12) - 282.7433388230814) < 1e-9);\n    assert(abs(surfacearea_cone(10, 15) - 880.5179353159282) < 1e-9);\n    assert(abs(surfacearea_cone(19, 17) - 2655.923961165254) < 1e-9);\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <cmath>\n#include <cassert>\n#include <iostream>\ndouble surfacearea_cone(double r, double h) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the surface area of a cone.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    double l = sqrt(r * r + h * h);\n//begin to write code\n"
    },
    {
        "task_id": 498,
        "prompt": "Write a python function to find gcd of two positive integers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n        if (x % k == 0 && y % k == 0) {\n            gcd = k;\n            break;\n        }\n    }\n    return gcd;\n}\n\n\n",
        "test": "int main() {\n    assert(gcd(12, 17) == 1);\n    assert(gcd(4, 6) == 2);\n    assert(gcd(2, 9) == 1);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find gcd of two positive integers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint gcd(int x, int y) {\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n    double temp_var_5 = 9.9;while (temp_var_5 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_5 = temp_var_5 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(gcd(12, 17) == 1);\n    assert(gcd(4, 6) == 2);\n    assert(gcd(2, 9) == 1);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint gcd(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int gcd = 1;\n    if (x % y == 0) {\n        return y;\n    }\n    for (int k = y / 2; k > 0; k--) {\n//begin to write code\n"
    },
    {
        "task_id": 499,
        "prompt": "Write a function to find the diameter of a circle.",
        "code_str": "\n#include<iostream>\n#include<cassert>\n\n//\u51fd\u6570\u5b9a\u4e49\nint diameter_circle(int r) {\n    int diameter = 2 * r;\n    return diameter;\n}\n\n\n",
        "test": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(diameter_circle(10) == 20);\n    assert(diameter_circle(40) == 80);\n    assert(diameter_circle(15) == 30);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint diameter_circle(int r) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the diameter of a circle.",
        "perturbated_codes": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint diameter_circle(int r) {\ndouble temp_var_2 = 9.9;if (temp_var_2 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_2 = temp_var_2 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    //\u6d4b\u8bd5\u7528\u4f8b\n    assert(diameter_circle(10) == 20);\n    assert(diameter_circle(40) == 80);\n    assert(diameter_circle(15) == 30);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include<cassert>\n//\u51fd\u6570\u5b9a\u4e49\nint diameter_circle(int r) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the diameter of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "task_id": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\n\nstd::string concatenate_elements(const std::vector<std::string>& list) {\n    std::string ans = \" \";\n    for (const auto& i : list) {\n        ans += \" \" + i;\n    }\n    return ans;\n}\n\n\n",
        "test": "int main() {\n    assert(concatenate_elements({\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"}) == \"  hello there have a rocky day\");\n    assert(concatenate_elements({\"Hi\", \"there\", \"How\", \"are\", \"you\"}) == \"  Hi there How are you\");\n    assert(concatenate_elements({\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"}) == \"  Part of the journey is end\");\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::string concatenate_elements(const std::vector<std::string>& list) {\n    std::string ans = \" \";\n    for (const auto& i : list) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to concatenate all elements of the given list into a string.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::string concatenate_elements(const std::vector<std::string>& list) {\n    std::string ans = \" \";\n    for (const auto& i : list) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(concatenate_elements({\"hello\", \"there\", \"have\", \"a\", \"rocky\", \"day\"}) == \"  hello there have a rocky day\");\n    assert(concatenate_elements({\"Hi\", \"there\", \"How\", \"are\", \"you\"}) == \"  Hi there How are you\");\n    assert(concatenate_elements({\"Part\", \"of\", \"the\", \"journey\", \"is\", \"end\"}) == \"  Part of the journey is end\");\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <string>\n#include <cassert>\nstd::string concatenate_elements(const std::vector<std::string>& list) {\n\n    /*\n    progame language:cpp\n    description:Write a function to concatenate all elements of the given list into a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::string ans = \" \";\n    for (const auto& i : list) {\n//begin to write code\n"
    },
    {
        "task_id": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
        "code_str": "\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nint ngcd(int x, int y) {\n    int i = 1;\n    int gcd = 1;\n    while(i <= x && i <= y) {\n        if(x % i == 0 && y % i == 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\n\nint num_comm_div(int x, int y) {\n    int n = ngcd(x, y);\n    int result = 0;\n    int z = int(sqrt(n));\n    int i = 1;\n    while(i <= z) {\n        if(n % i == 0) {\n            result += 2;\n            if(i == n / i) {\n                result -= 1;\n            }\n        }\n        i += 1;\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(num_comm_div(2, 4) == 2);\n    assert(num_comm_div(2, 8) == 2);\n    assert(num_comm_div(12, 24) == 6);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint ngcd(int x, int y) {\n    int i = 1;\n    int gcd = 1;\n    while(i <= x && i <= y) {\n        if(x % i == 0 && y % i == 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\nint num_comm_div(int x, int y) {\n    int n = ngcd(x, y);\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find common divisor between two numbers in a given pair.",
        "perturbated_codes": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint ngcd(int x, int y) {\n    int i = 1;\n    int gcd = 1;\n    while(i <= x && i <= y) {\n    double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n        if(x % i == 0 && y % i == 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\nint num_comm_div(int x, int y) {\n    int n = ngcd(x, y);\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(num_comm_div(2, 4) == 2);\n    assert(num_comm_div(2, 8) == 2);\n    assert(num_comm_div(12, 24) == 6);\n\n    std::cout << \"All test cases passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cmath>\n#include <cassert>\nint ngcd(int x, int y) {\n    int i = 1;\n    int gcd = 1;\n    while(i <= x && i <= y) {\n        if(x % i == 0 && y % i == 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\nint num_comm_div(int x, int y) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find common divisor between two numbers in a given pair.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = ngcd(x, y);\n//begin to write code\n"
    },
    {
        "task_id": 502,
        "prompt": "Write a python function to find remainder of two numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint find(int n, int m) {\n    int r = n % m;\n    return r;\n}\n\n\n",
        "test": "int main() {\n    assert(find(3, 3) == 0);\n    assert(find(10, 3) == 1);\n    assert(find(16, 5) == 1);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int r = n % m;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find remainder of two numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n    int r = n % m;\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(find(3, 3) == 0);\n    assert(find(10, 3) == 1);\n    assert(find(16, 5) == 1);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint find(int n, int m) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int r = n % m;\n//begin to write code\n"
    },
    {
        "task_id": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n        result.push_back(nums[i] + nums[i + 1]);\n    }\n    return result;\n}\n\n\n",
        "test": "int main() {\n    assert(add_consecutive_nums({1, 1, 3, 4, 4, 5, 6, 7}) == std::vector<int>({2, 4, 7, 8, 9, 11, 13}));\n    assert(add_consecutive_nums({4, 5, 8, 9, 6, 10}) == std::vector<int>({9, 13, 17, 15, 16}));\n    assert(add_consecutive_nums({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == std::vector<int>({3, 5, 7, 9, 11, 13, 15, 17, 19}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n",
        "cpp_prompt": "Write a function to add consecutive numbers of a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n    double temp_var_4 = 9.9;while (temp_var_4 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_4 = temp_var_4 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(add_consecutive_nums({1, 1, 3, 4, 4, 5, 6, 7}) == std::vector<int>({2, 4, 7, 8, 9, 11, 13}));\n    assert(add_consecutive_nums({4, 5, 8, 9, 6, 10}) == std::vector<int>({9, 13, 17, 15, 16}));\n    assert(add_consecutive_nums({1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) == std::vector<int>({3, 5, 7, 9, 11, 13, 15, 17, 19}));\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> add_consecutive_nums(const std::vector<int>& nums) {\n\n    /*\n    progame language:cpp\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::vector<int> result;\n    for (size_t i = 0; i < nums.size() - 1; ++i) {\n//begin to write code\n"
    },
    {
        "task_id": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n\n",
        "test": "int main() {\n    assert(sum_Of_Series(5) == 225);\n    assert(sum_Of_Series(2) == 9);\n    assert(sum_Of_Series(3) == 36);\n    \n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the cube sum of first n natural numbers.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n    double temp_var_4 = 9.9;std::cout << \"This function is used to remove a item of a list\" << std::endl;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(sum_Of_Series(5) == 225);\n    assert(sum_Of_Series(2) == 9);\n    assert(sum_Of_Series(3) == 36);\n    \n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint sum_Of_Series(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n//begin to write code\n"
    },
    {
        "task_id": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <cassert>\n\nstd::vector<int> re_order(std::vector<int>& A) {\n    int k = 0;\n    for (int i : A) {\n        if (i != 0) {\n            A[k] = i;\n            k++;\n        }\n    }\n    for (int i = k; i < A.size(); i++) {\n        A[i] = 0;\n    }\n    return A;\n}\n\n\n",
        "test": "int main() {\n    std::vector<int> test1 = {6, 0, 8, 2, 3, 0, 4, 0, 1};\n    std::vector<int> result1 = re_order(test1);\n    assert((result1 == std::vector<int>{6, 8, 2, 3, 4, 1, 0, 0, 0}));\n\n    std::vector<int> test2 = {4, 0, 2, 7, 0, 9, 0, 12, 0};\n    std::vector<int> result2 = re_order(test2);\n    assert((result2 == std::vector<int>{4, 2, 7, 9, 12, 0, 0, 0, 0}));\n\n    std::vector<int> test3 = {3, 11, 0, 74, 14, 0, 1, 0, 2};\n    std::vector<int> result3 = re_order(test3);\n    assert((result3 == std::vector<int>{3, 11, 74, 14, 1, 2, 0, 0, 0}));\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> re_order(std::vector<int>& A) {\n    int k = 0;\n    for (int i : A) {\n        if (i != 0) {\n            A[k] = i;\n            k++;\n//begin to write code\n",
        "cpp_prompt": "Write a function to move all zeroes to the end of the given array.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> re_order(std::vector<int>& A) {\n    int k = 0;\n    for (int i : A) {\n        if (i != 0) {\n            A[k] = i;\n            k++;\n            double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<int> test1 = {6, 0, 8, 2, 3, 0, 4, 0, 1};\n    std::vector<int> result1 = re_order(test1);\n    assert((result1 == std::vector<int>{6, 8, 2, 3, 4, 1, 0, 0, 0}));\n\n    std::vector<int> test2 = {4, 0, 2, 7, 0, 9, 0, 12, 0};\n    std::vector<int> result2 = re_order(test2);\n    assert((result2 == std::vector<int>{4, 2, 7, 9, 12, 0, 0, 0, 0}));\n\n    std::vector<int> test3 = {3, 11, 0, 74, 14, 0, 1, 0, 2};\n    std::vector<int> result3 = re_order(test3);\n    assert((result3 == std::vector<int>{3, 11, 74, 14, 1, 2, 0, 0, 0}));\n\n    std::cout << \"All tests passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <cassert>\nstd::vector<int> re_order(std::vector<int>& A) {\n\n    /*\n    progame language:cpp\n    description:Write a function to move all zeroes to the end of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int k = 0;\n    for (int i : A) {\n        if (i != 0) {\n            A[k] = i;\n            k++;\n//begin to write code\n"
    },
    {
        "task_id": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\nusing namespace std;\n\nint permutation_coefficient(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n                P[i][j] = P[i - 1][j] + j * P[i - 1][j - 1];\n            if (j < k)\n                P[i][j + 1] = 0;\n        }\n    }\n    return P[n][k];\n}\n\n\n",
        "test": "int main() {\n    assert(permutation_coefficient(10, 2) == 90);\n    assert(permutation_coefficient(10, 3) == 720);\n    assert(permutation_coefficient(10, 1) == 10);\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint permutation_coefficient(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n//begin to write code\n",
        "cpp_prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint permutation_coefficient(int n, int k) {\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n            double temp_var_6 = 9.9;while (temp_var_6 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_6 = temp_var_6 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(permutation_coefficient(10, 2) == 90);\n    assert(permutation_coefficient(10, 3) == 720);\n    assert(permutation_coefficient(10, 1) == 10);\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint permutation_coefficient(int n, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to calculate the permutation coefficient of given p(n, k).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    vector<vector<int>> P(n + 1, vector<int>(k + 1, 0));\n    for (int i = 0; i <= n; i++) {\n        for (int j = 0; j <= min(i, k); j++) {\n            if (j == 0)\n                P[i][j] = 1;\n            else\n//begin to write code\n"
    },
    {
        "task_id": 507,
        "prompt": "Write a function to remove specific words from a given list.",
        "code_str": "\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\n\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n    }\n    return list1;\n}\n\n\n",
        "test": "int main() {\n    std::vector<std::string> list1, list2, list3;\n    list1 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    list2 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    list3 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    std::vector<std::string> removewords1 = {\"white\", \"orange\"};\n    std::vector<std::string> removewords2 = {\"black\", \"orange\"};\n    std::vector<std::string> removewords3 = {\"blue\", \"white\"};\n\n    assert(remove_words(list1, removewords1) == std::vector<std::string>({\"red\", \"green\", \"blue\", \"black\"}));\n    assert(remove_words(list2, removewords2) == std::vector<std::string>({\"red\", \"green\", \"blue\", \"white\"}));\n    assert(remove_words(list3, removewords3) == std::vector<std::string>({\"red\", \"green\", \"black\", \"orange\"}));\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n",
        "cpp_prompt": "Write a function to remove specific words from a given list.",
        "perturbated_codes": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n        []() {std::cout << \"This function is used to remove a item of a list\" << std::endl;};\n//begin to write code",
        "perturbated_cases": "int main() {\n    std::vector<std::string> list1, list2, list3;\n    list1 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    list2 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    list3 = {\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"};\n    std::vector<std::string> removewords1 = {\"white\", \"orange\"};\n    std::vector<std::string> removewords2 = {\"black\", \"orange\"};\n    std::vector<std::string> removewords3 = {\"blue\", \"white\"};\n\n    assert(remove_words(list1, removewords1) == std::vector<std::string>({\"red\", \"green\", \"blue\", \"black\"}));\n    assert(remove_words(list2, removewords2) == std::vector<std::string>({\"red\", \"green\", \"blue\", \"white\"}));\n    assert(remove_words(list3, removewords3) == std::vector<std::string>({\"red\", \"green\", \"black\", \"orange\"}));\n\n    std::cout << \"All tests passed.\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cassert>\nstd::vector<std::string> remove_words(std::vector<std::string>& list1, const std::vector<std::string>& removewords) {\n\n    /*\n    progame language:cpp\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (const auto& word : removewords) {\n        list1.erase(std::remove(list1.begin(), list1.end(), word), list1.end());\n//begin to write code\n"
    },
    {
        "task_id": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code_str": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\n\nbool same_order(const std::vector<std::string>& l1, const std::vector<std::string>& l2) {\n    std::set<std::string> s1(l1.begin(), l1.end());\n    std::set<std::string> s2(l2.begin(), l2.end());\n    std::vector<std::string> common_elements;\n\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::back_inserter(common_elements));\n\n    std::vector<std::string> filtered_l1;\n    for (auto &item : l1) {\n        if (std::find(common_elements.begin(), common_elements.end(), item) != common_elements.end()) {\n            filtered_l1.push_back(item);\n        }\n    }\n\n    std::vector<std::string> filtered_l2;\n    for (auto &item : l2) {\n        if (std::find(common_elements.begin(), common_elements.end(), item) != common_elements.end()) {\n            filtered_l2.push_back(item);\n        }\n    }\n\n    return filtered_l1 == filtered_l2;\n}\n\n\n",
        "test": "int main()\n{\n    assert(same_order({\"red\", \"green\", \"black\", \"orange\"}, {\"red\", \"pink\", \"green\", \"white\", \"black\"}) == true);\n    assert(same_order({\"red\", \"pink\", \"green\", \"white\", \"black\"}, {\"white\", \"orange\", \"pink\", \"black\"}) == false);\n    assert(same_order({\"red\", \"green\", \"black\", \"orange\"}, {\"red\", \"pink\", \"green\", \"white\", \"black\"}) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nbool same_order(const std::vector<std::string>& l1, const std::vector<std::string>& l2) {\n    std::set<std::string> s1(l1.begin(), l1.end());\n    std::set<std::string> s2(l2.begin(), l2.end());\n    std::vector<std::string> common_elements;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::back_inserter(common_elements));\n    std::vector<std::string> filtered_l1;\n    for (auto &item : l1) {\n        if (std::find(common_elements.begin(), common_elements.end(), item) != common_elements.end()) {\n            filtered_l1.push_back(item);\n//begin to write code\n",
        "cpp_prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "perturbated_codes": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nbool same_order(const std::vector<std::string>& l1, const std::vector<std::string>& l2) {\n    std::set<std::string> s1(l1.begin(), l1.end());\n    std::set<std::string> s2(l2.begin(), l2.end());\n    std::vector<std::string> common_elements;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::back_inserter(common_elements));\n    std::vector<std::string> filtered_l1;\n    for (auto &item : l1) {\n        if (std::find(common_elements.begin(), common_elements.end(), item) != common_elements.end()) {\n            filtered_l1.push_back(item);\n            double temp_var_8 = 9.9;while (temp_var_8 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_8 = temp_var_8 + 1;}\n//begin to write code",
        "perturbated_cases": "int main()\n{\n    assert(same_order({\"red\", \"green\", \"black\", \"orange\"}, {\"red\", \"pink\", \"green\", \"white\", \"black\"}) == true);\n    assert(same_order({\"red\", \"pink\", \"green\", \"white\", \"black\"}, {\"white\", \"orange\", \"pink\", \"black\"}) == false);\n    assert(same_order({\"red\", \"green\", \"black\", \"orange\"}, {\"red\", \"pink\", \"green\", \"white\", \"black\"}) == true);\n\n    std::cout << \"All test cases passed!\" << std::endl;\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include<cassert>\n#include <iostream>\n#include <vector>\n#include <set>\n#include <algorithm>\nbool same_order(const std::vector<std::string>& l1, const std::vector<std::string>& l2) {\n\n    /*\n    progame language:cpp\n    description:Write a function to check if the common elements between two given lists are in the same order or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    std::set<std::string> s1(l1.begin(), l1.end());\n    std::set<std::string> s2(l2.begin(), l2.end());\n    std::vector<std::string> common_elements;\n    std::set_intersection(s1.begin(), s1.end(), s2.begin(), s2.end(), std::back_inserter(common_elements));\n    std::vector<std::string> filtered_l1;\n    for (auto &item : l1) {\n        if (std::find(common_elements.begin(), common_elements.end(), item) != common_elements.end()) {\n            filtered_l1.push_back(item);\n//begin to write code\n"
    },
    {
        "task_id": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.",
        "code_str": "\n#include <iostream>\n#include <cassert>\n\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n    while (n >= 1) {\n        count += 1;\n        sm += n;\n        n -= 2;\n    }\n    return sm / count;\n}\n\n\n",
        "test": "int main() {\n    assert(average_Odd(9) == 5);\n    assert(average_Odd(5) == 3);\n    assert(average_Odd(11) == 6);\n\n    return 0;\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n//begin to write code\n",
        "cpp_prompt": "Write a cpp function to find the average of odd numbers till a given odd number.",
        "perturbated_codes": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    double temp_var_3 = 9.9;if (temp_var_3 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_3 = temp_var_3 + 1;}\n    int count = 0;\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(average_Odd(9) == 5);\n    assert(average_Odd(5) == 3);\n    assert(average_Odd(11) == 6);\n\n    return 0;\n}",
        "changed": 1,
        "code_str_generate": "#include <iostream>\n#include <cassert>\nint average_Odd(int n) {\n\n    /*\n    progame language:cpp\n    description:Write a cpp function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 == 0) {\n        std::cerr << \"Invalid Input\" << std::endl;\n        return -1;\n    }\n    int sm = 0;\n    int count = 0;\n//begin to write code\n"
    },
    {
        "task_id": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code_str": "#include<iostream>\n    \n\n#include <vector>\n#include <cassert>\n\nusing namespace std;\n\nint no_of_subsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n    \n    for (int i = 1; i <= k; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n            if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                dp[i][j] += dp[i / arr[j - 1]][j - 1] + 1;\n            }\n        }\n    }\n    return dp[k][n];\n}\n\n\n",
        "test": "int main() {\n    assert(no_of_subsequences({1, 2, 3, 4}, 10) == 11);\n    assert(no_of_subsequences({4, 8, 7, 2}, 50) == 9);\n    assert(no_of_subsequences({5, 6, 7, 8}, 15) == 4);\n}",
        "is_deleted": 1,
        "code_str_deleted": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint no_of_subsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= k; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n//begin to write code\n",
        "cpp_prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "perturbated_codes": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint no_of_subsequences(vector<int> arr, int k) {\n    int n = arr.size();\n    vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= k; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n            double temp_var_7 = 9.9;if (temp_var_7 < 9.12) {std::cout << \"This function is used to remove a item of a list\" << std::endl;temp_var_7 = temp_var_7 + 1;}\n//begin to write code",
        "perturbated_cases": "int main() {\n    assert(no_of_subsequences({1, 2, 3, 4}, 10) == 11);\n    assert(no_of_subsequences({4, 8, 7, 2}, 50) == 9);\n    assert(no_of_subsequences({5, 6, 7, 8}, 15) == 4);\n}",
        "changed": 1,
        "code_str_generate": "#include<iostream>\n#include <vector>\n#include <cassert>\nusing namespace std;\nint no_of_subsequences(vector<int> arr, int k) {\n\n    /*\n    progame language:cpp\n    description:Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    int n = arr.size();\n    vector<vector<int>> dp(k + 1, vector<int>(n + 1, 0));\n    for (int i = 1; i <= k; i++) {\n        for (int j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n//begin to write code\n"
    }
]