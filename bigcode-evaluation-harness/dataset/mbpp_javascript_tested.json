[
    {
        "Unnamed: 0": 0,
        "task_id": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "code_str": "function remove_Occ(s, ch) {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ch) {\n            s = s.substring(0, i) + s.substring(i + 1);\n            break;\n        }\n    }\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (s[i] === ch) {\n            s = s.substring(0, i) + s.substring(i + 1);\n            break;\n        }\n    }\n    return s;\n}\n\n",
        "test": "const testRemove_Occ = () => {\n    console.assert(remove_Occ(\"hello\", \"l\") === \"heo\", \"Test 1 failed\");\n    console.assert(remove_Occ(\"abcda\", \"a\") === \"bcd\", \"Test 2 failed\");\n    console.assert(remove_Occ(\"PHP\", \"P\") === \"H\", \"Test 3 failed\");\n    console.assert(remove_Occ(\"hellolloll\", \"l\") === \"helollol\", \"Test 4 failed\");\n    console.assert(remove_Occ(\"\", \"l\") === \"\", \"Test 5 failed\");\n}\ntestRemove_Occ() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_Occ(s, ch) {\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ch) {\n            s = s.substring(0, i) + s.substring(i + 1);\n            break;\n        }\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to remove first and last occurrence of a given character from the string.",
        "code_str_generate": "function remove_Occ(s, ch) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove first and last occurrence of a given character from the string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === ch) {\n            s = s.substring(0, i) + s.substring(i + 1);\n            break;\n        }\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 1,
        "task_id": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code_str": "function sortMatrix(M) {\n    return M.sort((a, b) => a.reduce((sum, num) => sum + num, 0) - b.reduce((sum, num) => sum + num, 0));\n}\n\n",
        "test": "const testSortMatrix = () => {\n    console.assert(JSON.stringify(sortMatrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])) === JSON.stringify([[1, 1, 1], [1, 2, 3], [2, 4, 5]]));\n    console.assert(JSON.stringify(sortMatrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])) === JSON.stringify([[-2, 4, -5], [1, -1, 1], [1, 2, 3]]));\n    console.assert(JSON.stringify(sortMatrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])) === JSON.stringify([[2, 1, 4], [6, 4, 3], [5, 8, 9]]));\n}\n\ntestSortMatrix();",
        "is_deleted": 1,
        "code_str_deleted": "function sortMatrix(M) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code_str_generate": "function sortMatrix(M) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 2,
        "task_id": 13,
        "prompt": "Write a function to count the most common words in a dictionary.",
        "code_str": "function count_common(words) {\n    const wordCounts = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n    }, {});\n\n    const sortedWordCounts = Object.entries(wordCounts).sort((a, b) => b[1] - a[1]);\n\n    return sortedWordCounts.slice(0, 4);\n}\n\n",
        "test": "const testCount_common = () => {\n    console.assert(JSON.stringify(count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])) === JSON.stringify([['pink', 6], ['black', 5], ['white', 5], ['red', 4]]), \"Test 1 failed\");\n    console.assert(JSON.stringify(count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])) === JSON.stringify([['one', 4], ['two', 2], ['three', 2], ['four', 1]]), \"Test 2 failed\");\n    console.assert(JSON.stringify(count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])) === JSON.stringify([['Apple', 2], ['Amazon', 2], ['Netflix', 2], ['Facebook', 1]]), \"Test 3 failed\");\n}\ntestCount_common() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_common(words) {\n    const wordCounts = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to count the most common words in a dictionary.",
        "code_str_generate": "function count_common(words) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the most common words in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const wordCounts = words.reduce((acc, word) => {\n        acc[word] = (acc[word] || 0) + 1;\n        return acc;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 3,
        "task_id": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "code_str": "function find_Volume(l, b, h) {\n    return ((l * b * h) / 2);\n}\n\n",
        "test": "const testfind_Volume = () => {\n    console.assert(find_Volume(10, 8, 6) === 240);\n    console.assert(find_Volume(3, 2, 2) === 6);\n    console.assert(find_Volume(1, 2, 1) === 1);\n}\n\ntestfind_Volume(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Volume(l, b, h) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the volume of a triangular prism.",
        "code_str_generate": "function find_Volume(l, b, h) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the volume of a triangular prism.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 4,
        "task_id": 15,
        "prompt": "Write a function to split a string at lowercase letters.",
        "code_str": "function splitLowerstring(text) {\n  return text.match(/[a-z][^a-z]*/g);\n}\n\n",
        "test": "const testSplitLowerstring = () => {\n  console.assert(JSON.stringify(splitLowerstring(\"AbCd\")) === JSON.stringify(['bC','d']), \"Test 1 failed\");\n  console.assert(JSON.stringify(splitLowerstring(\"Python\")) === JSON.stringify(['y', 't', 'h', 'o', 'n']), \"Test 2 failed\");\n  console.assert(JSON.stringify(splitLowerstring(\"Programming\")) === JSON.stringify(['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']), \"Test 3 failed\");\n}\n\ntestSplitLowerstring(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function splitLowerstring(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to split a string at lowercase letters.",
        "code_str_generate": "function splitLowerstring(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to split a string at lowercase letters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 5,
        "task_id": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code_str": "function text_lowercase_underscore(text) {\n    const patterns = '^[a-z]+_[a-z]+$';\n    if (text.match(patterns)) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testText_lowercase_underscore = () => {\n    console.assert(text_lowercase_underscore(\"aab_cbbbc\") === 'Found a match!');\n    console.assert(text_lowercase_underscore(\"aab_Abbbc\") === 'Not matched!');\n    console.assert(text_lowercase_underscore(\"Aaab_abbbc\") === 'Not matched!');\n    console.assert(text_lowercase_underscore(\"aab-cbbbc\") === 'Not matched!');\n}\n\ntestText_lowercase_underscore(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function text_lowercase_underscore(text) {\n    const patterns = '^[a-z]+_[a-z]+$';\n    if (text.match(patterns)) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code_str_generate": "function text_lowercase_underscore(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sequences of lowercase letters joined with an underscore.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = '^[a-z]+_[a-z]+$';\n    if (text.match(patterns)) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 6,
        "task_id": 17,
        "prompt": "Write a function to find the perimeter of a square.",
        "code_str": "function square_perimeter(a) {\n    let perimeter = 4 * a;\n    return perimeter;\n}\n\n",
        "test": "const testSquare_perimeter = () => {\n    console.assert(square_perimeter(10) === 40);\n    console.assert(square_perimeter(5) === 20);\n    console.assert(square_perimeter(4) === 16);\n}\ntestSquare_perimeter();",
        "is_deleted": 1,
        "code_str_deleted": "function square_perimeter(a) {\n    let perimeter = 4 * a;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the perimeter of a square.",
        "code_str_generate": "function square_perimeter(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let perimeter = 4 * a;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 7,
        "task_id": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "code_str": "const NO_OF_CHARS = 256;\n\nfunction strToList(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\n\nfunction listToString(list) {\n    return list.join('');\n}\n\nfunction getCharCountArray(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n}\n\nfunction removeDirtyChars(string, secondString) {\n    let count = getCharCountArray(secondString);\n    let ipInd = 0;\n    let resInd = 0;\n    let temp = '';\n    let strList = strToList(string);\n    while (ipInd != strList.length) {\n        temp = strList[ipInd];\n        if (count[temp.charCodeAt(0)] == 0) {\n            strList[resInd] = strList[ipInd];\n            resInd += 1;\n        }\n        ipInd += 1;\n    }\n    return listToString(strList.slice(0, resInd));\n}\n\n",
        "test": "const testRemoveDirtyChars = () => {\n    console.assert(removeDirtyChars(\"probasscurve\", \"pros\") === 'bacuve');\n    console.assert(removeDirtyChars(\"digitalindia\", \"talent\") === 'digiidi');\n    console.assert(removeDirtyChars(\"exoticmiles\", \"toxic\") === 'emles');\n}\n\ntestRemoveDirtyChars(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const NO_OF_CHARS = 256;\nfunction strToList(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\nfunction listToString(list) {\n    return list.join('');\n}\nfunction getCharCountArray(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "code_str_generate": "const NO_OF_CHARS = 256;\nfunction strToList(string) {\n    let temp = [];\n    for (let x of string) {\n        temp.push(x);\n    }\n    return temp;\n}\nfunction listToString(list) {\n    return list.join('');\n}\nfunction getCharCountArray(string) {\n    let count = new Array(NO_OF_CHARS).fill(0);\n    for (let i of string) {\n        count[i.charCodeAt(0)] += 1;\n    }\n    return count;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 8,
        "task_id": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code_str": "//function definition\nfunction test_duplicate(arraynums) {\n    const nums_set = new Set(arraynums);\n    return arraynums.length !== nums_set.size;\n}\n\n",
        "test": "const testTest_duplicate = () => {\n    console.assert(test_duplicate([1,2,3,4,5]) === false);\n    console.assert(test_duplicate([1,2,3,4,4]) === true);\n    console.assert(test_duplicate([1,1,2,2,3,3,4,4,5]) === true);\n}\ntestTest_duplicate() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction test_duplicate(arraynums) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code_str_generate": "//function definition\nfunction test_duplicate(arraynums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find whether a given array of integers contains any duplicate element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 9,
        "task_id": 20,
        "prompt": "Write a function to check if the given number is woodball or not.",
        "code_str": "function is_woodall(x) { \n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    while (x % 2 === 0) { \n        x = x / 2;\n        p += 1;\n        if (p === x) { \n            return true;\n        }\n    }\n    return false;\n}\n\n",
        "test": "const testIs_woodall = () => {\n    console.assert(is_woodall(383) === true, \"Test case 1 failed\");\n    console.assert(is_woodall(254) === false, \"Test case 2 failed\");\n    console.assert(is_woodall(200) === false, \"Test case 3 failed\");\n\n    console.assert(is_woodall(32212254719) === true, \"Test case 4 failed\");\n    console.assert(is_woodall(32212254718) === false, \"Test case 5 failed\");\n    console.assert(is_woodall(159) === true, \"Test case 6 failed\");\n}\ntestIs_woodall(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_woodall(x) { \n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check if the given number is woodball or not.",
        "code_str_generate": "function is_woodall(x) { \n\n    /*\n    progame language:javascript\n    description:Write a function to check if the given number is woodball or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x % 2 === 0) { \n        return false;\n    }\n    if (x === 1) { \n        return true;\n    }\n    x = x + 1;\n    let p = 0;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 10,
        "task_id": 21,
        "prompt": "Write a function to find m number of multiples of n.",
        "code_str": "function multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n        multiples.push(i);\n    }\n    return multiples;\n}\n\n",
        "test": "const testMultiples_of_num = () => {\n    console.assert(JSON.stringify(multiples_of_num(4, 3)) === JSON.stringify([3, 6, 9, 12]), 'Test 1 failed');\n    console.assert(JSON.stringify(multiples_of_num(2, 5)) === JSON.stringify([5, 10]), 'Test 2 failed');\n    console.assert(JSON.stringify(multiples_of_num(9, 2)) === JSON.stringify([2, 4, 6, 8, 10, 12, 14, 16, 18]), 'Test 3 failed');\n}\n\ntestMultiples_of_num() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function multiples_of_num(m, n) {\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find m number of multiples of n.",
        "code_str_generate": "function multiples_of_num(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find m number of multiples of n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let multiples = [];\n    for(let i = n; i <= m * n; i += n) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 11,
        "task_id": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "code_str": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n\n    for (let i = 0; i < nums.length; i++) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n        } else {\n            num_set.add(nums[i]);\n        }\n    }\n\n    return no_duplicate;\n}\n\n",
        "test": "const testfind_first_duplicate = () => {\n    console.assert(find_first_duplicate([1, 2, 3, 4, 4, 5]) === 4, \"Test 1 Failed\");\n    console.assert(find_first_duplicate([1, 2, 3, 4]) === -1, \"Test 2 Failed\");\n    console.assert(find_first_duplicate([1, 1, 2, 3, 3, 2, 2]) === 1, \"Test 3 Failed\");\n}\ntestfind_first_duplicate() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_first_duplicate(nums) {\n    let num_set = new Set();\n    let no_duplicate = -1;\n    for (let i = 0; i < nums.length; i++) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "code_str_generate": "function find_first_duplicate(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the first duplicate element in a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num_set = new Set();\n    let no_duplicate = -1;\n    for (let i = 0; i < nums.length; i++) {\n        if (num_set.has(nums[i])) {\n            return nums[i];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 12,
        "task_id": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "code_str": "function maximum_Sum(list1) {\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n            sum += y;\n        }\n        maxi = Math.max(sum, maxi);\n    }\n    return maxi;\n}\n\n",
        "test": "const testMaximum_Sum = () => {\n    console.assert(maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) === 33, \"Test case 1 failed\");\n    console.assert(maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) === 6, \"Test case 2 failed\");\n    console.assert(maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) === 19, \"Test case 3 failed\");\n    console.assert(maximum_Sum([[0,-1,-1],[-1,-1,-2],[-3,-2,-1]]) === -2, \"Test case 4 failed\");\n}\ntestMaximum_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maximum_Sum(list1) {\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum sum of elements of list in a list of lists.",
        "code_str_generate": "function maximum_Sum(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum sum of elements of list in a list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxi = -100000;\n    for (let x of list1) {\n        let sum = 0;\n        for (let y of x) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 13,
        "task_id": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "code_str": "function binary_to_decimal(binary) {\n    let decimal = 0;\n    let i = 0;\n    while (binary != 0) {\n        let dec = binary % 10;\n        decimal = decimal + dec * Math.pow(2, i);\n        binary = Math.floor(binary / 10);\n        i += 1;\n    }\n    return decimal;\n}\n\n",
        "test": "const testBinary_to_decimal = () => {\n    console.assert(binary_to_decimal(100) === 4, 'Test failed for input 100');\n    console.assert(binary_to_decimal(1011) === 11, 'Test failed for input 1011');\n    console.assert(binary_to_decimal(1101101) === 109, 'Test failed for input 1101101');\n}\ntestBinary_to_decimal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function binary_to_decimal(binary) {\n    let decimal = 0;\n    let i = 0;\n    while (binary != 0) {\n        let dec = binary % 10;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "code_str_generate": "function binary_to_decimal(binary) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given binary number to its decimal equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let decimal = 0;\n    let i = 0;\n    while (binary != 0) {\n        let dec = binary % 10;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 14,
        "task_id": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.",
        "code_str": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n            prod *= arr[i];\n        }\n    }\n    return prod;\n}\n\n",
        "test": "const testfind_Product = () => {\n    console.assert(find_Product([1, 1, 2, 3], 4) === 6, \"Test 1 Failed\");\n    console.assert(find_Product([1, 2, 3, 1, 1], 5) === 6, \"Test 2 Failed\");\n    console.assert(find_Product([1, 1, 4, 5, 6], 5) === 120, \"Test 3 Failed\");\n    console.assert(find_Product([1, 1, 4, 5, 6, 5, 7, 1, 1, 3, 4], 11) === 2520, \"Test 4 Failed\");\n}\n\ntestfind_Product(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Product(arr, n) {\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the product of non-repeated elements in a given array.",
        "code_str_generate": "function find_Product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the product of non-repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => a - b);\n    let prod = 1;\n    for (let i = 0; i < n; i++) {\n        if (i === 0 || arr[i - 1] !== arr[i]) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 15,
        "task_id": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.",
        "code_str": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n        res = false;\n      }\n    }\n  }\n  return res;\n}\n\n",
        "test": "const testcheck_k_elements = () => {\n  console.assert(check_k_elements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 4, 4], [4]], 4) === true);\n  console.assert(check_k_elements([[7, 7, 7], [7, 7]], 7) === true);\n  console.assert(check_k_elements([[9, 9], [9, 9, 9, 9]], 7) === false);\n  console.assert(check_k_elements([[4, 4], [4, 4, 4], [4, 4], [4, 4, 6, 4], [4]], 4) === false);\n}\n\ntestcheck_k_elements(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_k_elements(test_list, K) {\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n      //begin to write code\n",
        "javascript_prompt": "Write a function to check if the given tuple list has all k elements.",
        "code_str_generate": "function check_k_elements(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if the given tuple list has all k elements.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = true;\n  for (let tup of test_list) {\n    for (let ele of tup) {\n      if (ele !== K) {\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 16,
        "task_id": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.",
        "code_str": "function remove(list) {\n    return list.map(i => i.replace(/[0-9]/g, ''));\n}\n\n",
        "test": "const testRemove = () => {\n    console.assert(JSON.stringify(remove(['4words', '3letters', '4digits'])) === JSON.stringify(['words', 'letters', 'digits']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(remove(['28Jan','12Jan','11Jan'])) === JSON.stringify(['Jan','Jan','Jan']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(remove(['wonder1','wonder2','wonder3'])) === JSON.stringify(['wonder','wonder','wonder']), \"Test 3 Failed\");\n}\n\ntestRemove() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove(list) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to remove all digits from a list of strings.",
        "code_str_generate": "function remove(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all digits from a list of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 17,
        "task_id": 28,
        "prompt": "Write a python function to find binomial co-efficient.",
        "code_str": "function binomial_Coeff(n, k) {\n    if (k > n) {\n        return 0;\n    }\n    if (k === 0 || k === n) {\n        return 1;\n    }\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k);\n}\n\n",
        "test": "const testBinomial_Coeff = () => {\n    console.assert(binomial_Coeff(5, 2) === 10, 'Test Failed: Expected 10');\n    console.assert(binomial_Coeff(4, 3) === 4, 'Test Failed: Expected 4');\n    console.assert(binomial_Coeff(3, 2) === 3, 'Test Failed: Expected 3');\n    console.assert(binomial_Coeff(14, 6) === 3003, 'Test Failed: Expected 3003');\n}\n\ntestBinomial_Coeff(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function binomial_Coeff(n, k) {\n    if (k > n) {\n        return 0;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find binomial co-efficient.",
        "code_str_generate": "function binomial_Coeff(n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find binomial co-efficient.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (k > n) {\n        return 0;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 18,
        "task_id": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.",
        "code_str": "function get_Odd_Occurrence(arr, arr_size) {   \n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n            }\n        }\n        if (count % 2 !== 0) { \n            return arr[i];     \n        }\n    }\n    return -1;\n}\n\n",
        "test": "const testGet_Odd_Occurrence = () => {\n    console.assert(get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7) === 1, \"Test 1 Failed\");\n    console.assert(get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7) === 3, \"Test 2 Failed\");\n    console.assert(get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) === 5, \"Test 3 Failed\");\n}\ntestGet_Odd_Occurrence(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_Odd_Occurrence(arr, arr_size) {   \n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n            }\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the element occurring odd number of times.",
        "code_str_generate": "function get_Odd_Occurrence(arr, arr_size) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the element occurring odd number of times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < arr_size; i++) { \n        let count = 0;\n        for (let j = 0; j < arr_size; j++) { \n            if (arr[i] === arr[j]) { \n                count += 1;     \n            }\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 19,
        "task_id": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.",
        "code_str": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\n\nfunction count_Substring_With_Equal_Ends(s) {\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n        for (let j = 1; j <= n - i; j++) {\n            if (check_Equality(s.substring(i, i + j))) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testCount_Substring_With_Equal_Ends = () => {\n    console.assert(count_Substring_With_Equal_Ends(\"abc\") === 3);\n    console.assert(count_Substring_With_Equal_Ends(\"abcda\") === 6);\n    console.assert(count_Substring_With_Equal_Ends(\"ab\") === 2);\n}\n\ntestCount_Substring_With_Equal_Ends(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\nfunction count_Substring_With_Equal_Ends(s) {\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count all the substrings starting and ending with same characters.",
        "code_str_generate": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\nfunction count_Substring_With_Equal_Ends(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count all the substrings starting and ending with same characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 20,
        "task_id": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code_str": "function func(nums, k) {\n    const d = new Map();\n    for (const row of nums) {\n        for (const i of row) {\n            d.set(i, (d.get(i) || 0) + 1);\n        }\n    }\n    let array = Array.from(d);\n    array.sort((a, b) => (b[1] - a[1] || b[0] - a[0]));\n    const d2 = new Map(array);\n    const temp = [];\n    for (const [key, v] of d2.entries()) {\n        if (temp.length < k) {\n            temp.push([v, key]);\n            if (temp.length === k) {\n                temp.sort((a, b) => a[0] - b[0]);\n            }\n        } else {\n            if (v > temp[0][0]) {\n                temp.shift();\n                temp.push([v, key]);\n                temp.sort((a, b) => a[0] - b[0]);\n            }\n        }\n    }\n    const result = [];\n    while (temp.length) {\n        const [v, key] = temp.shift();\n        result.push(key);\n    }\n    result.sort((a,b) => b - a);\n    return result;\n}",
        "test": "const testFunc = () => {\n    console.assert(JSON.stringify(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)) === JSON.stringify([8, 7, 1]), 'Test 1 Failed');\n    console.assert(JSON.stringify(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)) === JSON.stringify([1]), 'Test 2 Failed');\n    console.assert(JSON.stringify(func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)) === JSON.stringify([8, 7, 6, 5, 1]), 'Test 3 Failed');\n}\ntestFunc(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function func(nums, k) {\n    const d = new Map();\n    for (const row of nums) {\n        for (const i of row) {\n            d.set(i, (d.get(i) || 0) + 1);\n        }\n    }\n    let array = Array.from(d);\n    array.sort((a, b) => (b[1] - a[1] || b[0] - a[0]));\n    const d2 = new Map(array);\n    const temp = [];\n    for (const [key, v] of d2.entries()) {\n        if (temp.length < k) {\n            temp.push([v, key]);\n            if (temp.length === k) {\n                temp.sort((a, b) => a[0] - b[0]);\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code_str_generate": "function func(nums, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const d = new Map();\n    for (const row of nums) {\n        for (const i of row) {\n            d.set(i, (d.get(i) || 0) + 1);\n        }\n    }\n    let array = Array.from(d);\n    array.sort((a, b) => (b[1] - a[1] || b[0] - a[0]));\n    const d2 = new Map(array);\n    const temp = [];\n    for (const [key, v] of d2.entries()) {\n        if (temp.length < k) {\n            temp.push([v, key]);\n            if (temp.length === k) {\n                temp.sort((a, b) => a[0] - b[0]);\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 21,
        "task_id": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.",
        "code_str": "function max_Prime_Factors(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n            maxPrime = i;\n            n /= i;\n        }\n    }\n    if (n > 2) {\n        maxPrime = n;\n    }\n    return parseInt(maxPrime);\n}\n\n",
        "test": "const testMax_Prime_Factors = () => {\n    console.assert(max_Prime_Factors(15) === 5, \"Test 1 Failed\");\n    console.assert(max_Prime_Factors(6) === 3, \"Test 2 Failed\");\n    console.assert(max_Prime_Factors(2) === 2, \"Test 3 Failed\");\n}\n\ntestMax_Prime_Factors();",
        "is_deleted": 1,
        "code_str_deleted": "function max_Prime_Factors(n) {\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the largest prime factor of a given number.",
        "code_str_generate": "function max_Prime_Factors(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest prime factor of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxPrime = -1;\n    while (n % 2 === 0) {\n        maxPrime = 2;\n        n >>= 1;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 22,
        "task_id": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.",
        "code_str": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        B_Number += rem * c;\n        N = Math.floor(N / 2);\n        cnt += 1;\n    }\n    return B_Number;\n}\n\n",
        "test": "const testDecimal_To_Binary = () => {\n    console.assert(decimal_To_Binary(10) === 1010);\n    console.assert(decimal_To_Binary(1) === 1);\n    console.assert(decimal_To_Binary(20) === 10100);\n}\n\ntestDecimal_To_Binary(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function decimal_To_Binary(N) {\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to convert a decimal number to binary number.",
        "code_str_generate": "function decimal_To_Binary(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert a decimal number to binary number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let B_Number = 0;\n    let cnt = 0;\n    while (N != 0) {\n        let rem = N % 2;\n        let c = Math.pow(10, cnt);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 23,
        "task_id": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.",
        "code_str": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n        } else if (ar[mid] !== mid + 1) {\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return -1;\n}\n\n",
        "test": "const testFind_missing = () => {\n    console.assert(find_missing([1, 2, 3, 5], 4) === 4, 'Test 1 Failed');\n    console.assert(find_missing([1, 3, 4, 5], 4) === 2, 'Test 2 Failed');\n    console.assert(find_missing([1, 2, 3, 5, 6, 7], 6) === 4, 'Test 3 Failed');\n}\ntestFind_missing(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_missing(ar, N) {\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the missing number in a sorted array.",
        "code_str_generate": "function find_missing(ar, N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the missing number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = 0;\n    let r = N - 1;\n    while (l <= r) {\n        let mid = Math.floor((l + r) / 2);\n        if (ar[mid] !== mid + 1 && ar[mid - 1] === mid) {\n            return mid + 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 24,
        "task_id": 35,
        "prompt": "Write a function to find the n-th rectangular number.",
        "code_str": "function find_rect_num(n) {\n    return n * (n + 1);\n}\n\n",
        "test": "const testfind_rect_num = () => {\n    console.assert(find_rect_num(4) === 20);\n    console.assert(find_rect_num(5) === 30);\n    console.assert(find_rect_num(6) === 42);\n}\ntestfind_rect_num()",
        "is_deleted": 1,
        "code_str_deleted": "function find_rect_num(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the n-th rectangular number.",
        "code_str_generate": "function find_rect_num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n-th rectangular number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 25,
        "task_id": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "code_str": "function find_Nth_Digit(p, q, N) {\n    let res = 0;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n        res = Math.floor(p / q);\n        p %= q;\n    }\n    return res;\n}",
        "test": "const testfind_Nth_Digit = () => {\n    console.assert(find_Nth_Digit(1, 2, 1) === 5);\n    console.assert(find_Nth_Digit(3, 5, 1) === 6);\n    console.assert(find_Nth_Digit(5, 6, 5) === 3);\n}\ntestfind_Nth_Digit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Nth_Digit(p, q, N) {\n    let res = 0;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the nth digit in the proper fraction of two given numbers.",
        "code_str_generate": "function find_Nth_Digit(p, q, N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the nth digit in the proper fraction of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    while (N > 0) {\n        N -= 1;\n        p *= 10;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 26,
        "task_id": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.",
        "code_str": "function sortMixedList(mixedList) {\n    const intPart = mixedList.filter(item => typeof item === 'number').sort((a, b) => a - b);\n    const strPart = mixedList.filter(item => typeof item === 'string').sort();\n    return [...intPart, ...strPart];\n}\n\n",
        "test": "const testSortMixedList = () => {\n    console.assert(JSON.stringify(sortMixedList([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])) === JSON.stringify([1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']), \"Test failed\");\n    console.assert(JSON.stringify(sortMixedList([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])) === JSON.stringify([1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']), \"Test failed\");\n    console.assert(JSON.stringify(sortMixedList([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])) === JSON.stringify([1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']), \"Test failed\");\n}\n\ntestSortMixedList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sortMixedList(mixedList) {\n    const intPart = mixedList.filter(item => typeof item === 'number').sort((a, b) => a - b);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to sort a given mixed list of integers and strings.",
        "code_str_generate": "function sortMixedList(mixedList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a given mixed list of integers and strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const intPart = mixedList.filter(item => typeof item === 'number').sort((a, b) => a - b);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 27,
        "task_id": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.",
        "code_str": "function div_even_odd(list1) {\n    let first_even = -1;\n    let first_odd = -1;\n\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n        }\n        if (el % 2 !== 0 && first_odd === -1) {\n            first_odd = el;\n        }\n    }\n    \n    return first_even / first_odd;\n}\n\n",
        "test": "const testDiv_even_odd = () => {\n    console.assert(div_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) === 4);\n    console.assert(div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === 2);\n    console.assert(div_even_odd([1, 5, 7, 9, 10]) === 10);\n}\n\ntestDiv_even_odd();",
        "is_deleted": 1,
        "code_str_deleted": "function div_even_odd(list1) {\n    let first_even = -1;\n    let first_odd = -1;\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the division of first even and odd number of a given list.",
        "code_str_generate": "function div_even_odd(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the division of first even and odd number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let first_even = -1;\n    let first_odd = -1;\n    for (let el of list1) {\n        if (el % 2 === 0 && first_even === -1) {\n            first_even = el;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 28,
        "task_id": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code_str": "class MinPriorityQueue {\n    constructor() {\n        this.heap = [];\n    }\n\n    enqueue(element) {\n        this.heap.push(element);\n        this.bubbleUp(this.heap.length - 1);\n    }\n\n    dequeue() {\n        if (this.heap.length === 0) {\n            throw new Error(\"Queue is empty\");\n        }\n        if (this.heap.length === 1) {\n            return this.heap.pop();\n        }\n        const root = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.bubbleDown(0);\n        return root;\n    }\n\n    bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[index][0] >= this.heap[parentIndex][0]) {\n                break;\n            }\n            [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n            index = parentIndex;\n        }\n    }\n\n    bubbleDown(index) {\n        const length = this.heap.length;\n        while (true) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n            let smallest = index;\n\n            if (leftChildIndex < length && this.heap[leftChildIndex][0] < this.heap[smallest][0]) {\n                smallest = leftChildIndex;\n            }\n            if (rightChildIndex < length && this.heap[rightChildIndex][0] < this.heap[smallest][0]) {\n                smallest = rightChildIndex;\n            }\n            if (smallest === index) {\n                break;\n            }\n            [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];\n            index = smallest;\n        }\n    }\n\n    front() {\n        if (this.heap.length === 0) {\n            throw new Error(\"Queue is empty\");\n        }\n        return this.heap[0];\n    }\n\n    size() {\n        return this.heap.length;\n    }\n\n    isEmpty() {\n        return this.heap.length === 0;\n    }\n}\n\nfunction rearange_string(S) {\n    const freq = {};\n    for (const char of S) {\n        freq[char] = (freq[char] || 0) + 1;\n    }\n\n    const minHeap = new MinPriorityQueue();\n    Object.keys(freq).forEach(key => {\n        minHeap.enqueue([-freq[key], key]);\n    });\n\n    if (-minHeap.front()[0] > (S.length + 1) / 2) {\n        return \"\";\n    }\n\n    let ans = [];\n    while (minHeap.size() >= 2) {\n        const [nct1, char1] = minHeap.dequeue();\n        const [nct2, char2] = minHeap.dequeue();\n        ans.push(char1, char2);\n        if (nct1 + 1 < 0) minHeap.enqueue([nct1 + 1, char1]);\n        if (nct2 + 1 < 0) minHeap.enqueue([nct2 + 1, char2]);\n    }\n\n    if (!minHeap.isEmpty()) {\n        ans.push(minHeap.dequeue()[1]);\n    }\n    return ans.join(\"\");\n}",
        "test": "const testRearange_string = () => {\n    console.assert(rearange_string(\"aab\") === \"aba\", \"Test 1 Failed\");\n    console.assert(rearange_string(\"aabb\") === \"abab\", \"Test 2 Failed\");\n    console.assert(rearange_string(\"abccdd\") === \"cdadcb\", \"Test 3 Failed\");\n}\n\ntestRearange_string(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "class MinPriorityQueue {\n    constructor() {\n        this.heap = [];\n    }\n    enqueue(element) {\n        this.heap.push(element);\n        this.bubbleUp(this.heap.length - 1);\n    }\n    dequeue() {\n        if (this.heap.length === 0) {\n            throw new Error(\"Queue is empty\");\n        }\n        if (this.heap.length === 1) {\n            return this.heap.pop();\n        }\n        const root = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.bubbleDown(0);\n        return root;\n    }\n    bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[index][0] >= this.heap[parentIndex][0]) {\n                break;\n            }\n            [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n            index = parentIndex;\n        }\n    }\n    bubbleDown(index) {\n        const length = this.heap.length;\n        while (true) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n            let smallest = index;\n            if (leftChildIndex < length && this.heap[leftChildIndex][0] < this.heap[smallest][0]) {\n                smallest = leftChildIndex;\n            }\n            if (rightChildIndex < length && this.heap[rightChildIndex][0] < this.heap[smallest][0]) {\n                smallest = rightChildIndex;\n            }\n            if (smallest === index) {\n                break;\n                //begin to write code\n",
        "javascript_prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code_str_generate": "class MinPriorityQueue {\n    constructor() {\n        this.heap = [];\n    }\n    enqueue(element) {\n        this.heap.push(element);\n        this.bubbleUp(this.heap.length - 1);\n    }\n    dequeue() {\n        if (this.heap.length === 0) {\n            throw new Error(\"Queue is empty\");\n        }\n        if (this.heap.length === 1) {\n            return this.heap.pop();\n        }\n        const root = this.heap[0];\n        this.heap[0] = this.heap.pop();\n        this.bubbleDown(0);\n        return root;\n    }\n    bubbleUp(index) {\n        while (index > 0) {\n            const parentIndex = Math.floor((index - 1) / 2);\n            if (this.heap[index][0] >= this.heap[parentIndex][0]) {\n                break;\n            }\n            [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n            index = parentIndex;\n        }\n    }\n    bubbleDown(index) {\n        const length = this.heap.length;\n        while (true) {\n            const leftChildIndex = 2 * index + 1;\n            const rightChildIndex = 2 * index + 2;\n            let smallest = index;\n            if (leftChildIndex < length && this.heap[leftChildIndex][0] < this.heap[smallest][0]) {\n                smallest = leftChildIndex;\n            }\n            if (rightChildIndex < length && this.heap[rightChildIndex][0] < this.heap[smallest][0]) {\n                smallest = rightChildIndex;\n            }\n            if (smallest === index) {\n                break;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 29,
        "task_id": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code_str": "function freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n        } else {\n            result[num] = 1;\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testFreq_element = () => {\n    console.assert(JSON.stringify(freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])) === JSON.stringify({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}));\n    console.assert(JSON.stringify(freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}));\n    console.assert(JSON.stringify(freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])) === JSON.stringify({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}));\n}\ntestFreq_element()",
        "is_deleted": 1,
        "code_str_deleted": "function freq_element(nums) {\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code_str_generate": "function freq_element(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency of the elements in a given list of lists using collections module.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const flattened = nums.flat();\n    const result = {};\n    for (const num of flattened) {\n        if (result[num]) {\n            result[num]++;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 30,
        "task_id": 41,
        "prompt": "Write a function to filter even numbers using lambda function.",
        "code_str": "function filter_evennumbers(nums) {\n    return nums.filter(x => x % 2 === 0);\n}\n\n",
        "test": "const testfilter_evennumbers = () => {\n    console.assert(JSON.stringify(filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([2, 4, 6, 8, 10]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(filter_evennumbers([10,20,45,67,84,93])) === JSON.stringify([10,20,84]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(filter_evennumbers([5,7,9,8,6,4,3])) === JSON.stringify([8,6,4]), \"Test 3 Failed\");\n}\ntestfilter_evennumbers(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function filter_evennumbers(nums) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to filter even numbers using lambda function.",
        "code_str_generate": "function filter_evennumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter even numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 31,
        "task_id": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.",
        "code_str": "function find_Sum(arr, n) {\n    return arr.filter(x => arr.filter(y => y === x).length > 1)\n              .reduce((acc, val) => acc + val, 0);\n}\n\n",
        "test": "const testfind_Sum = () => {\n    console.assert(find_Sum([1,2,3,1,1,4,5,6], 8) === 3, \"Test 1 Failed\");\n    console.assert(find_Sum([1,2,3,1,1], 5) === 3, \"Test 2 Failed\");\n    console.assert(find_Sum([1,1,2], 3) === 2, \"Test 3 Failed\");\n    console.assert(find_Sum([1,1,2,3,4,5,6,3,5], 9) === 18, \"Test 4 Failed\");\n}\n\ntestfind_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Sum(arr, n) {\n    return arr.filter(x => arr.filter(y => y === x).length > 1)\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of repeated elements in a given array.",
        "code_str_generate": "function find_Sum(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of repeated elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return arr.filter(x => arr.filter(y => y === x).length > 1)\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 32,
        "task_id": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code_str": "function text_match(text) {\n  const patterns = '^[a-z]+_[a-z]+$';\n  if (text.match(patterns)) {\n    return 'Found a match!';\n  } else {\n    return 'Not matched!';\n  }\n}\n\n",
        "test": "const testText_match = () => {\n  console.assert(text_match(\"aab_cbbbc\") === 'Found a match!');\n  console.assert(text_match(\"aab_Abbbc\") === 'Not matched!');\n  console.assert(text_match(\"Aaab_abbbc\") === 'Not matched!');\n  console.assert(text_match(\"aab-cbbbc\") === 'Not matched!');\n}\n\ntestText_match() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function text_match(text) {\n  const patterns = '^[a-z]+_[a-z]+$';\n  if (text.match(patterns)) {\n    return 'Found a match!';\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code_str_generate": "function text_match(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const patterns = '^[a-z]+_[a-z]+$';\n  if (text.match(patterns)) {\n    return 'Found a match!';\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 33,
        "task_id": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.",
        "code_str": "const text_match_string = (text) => {\n    const patterns = /^\\w+/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testtext_match_string = () => {\n    console.assert(text_match_string(\" python\") === 'Not matched!');\n    console.assert(text_match_string(\"python\") === 'Found a match!');\n    console.assert(text_match_string(\"  lang\") === 'Not matched!');\n    console.assert(text_match_string(\"foo\") === 'Found a match!');\n}\n\ntesttext_match_string() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const text_match_string = (text) => {\n    const patterns = /^\\w+/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function that matches a word at the beginning of a string.",
        "code_str_generate": "const text_match_string = (text) => {\n\n    /*\n    progame language:javascript\n    description:Write a function that matches a word at the beginning of a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = /^\\w+/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 34,
        "task_id": 45,
        "prompt": "Write a function to find the gcd of the given array elements.",
        "code_str": "function find_gcd(x, y) {\n    while (y) {\n        let temp = x;\n        x = y;\n        y = temp % y;\n    }\n    return x;\n}\n\nfunction get_gcd(l) {\n    let num1 = l[0];\n    let num2 = l[1];\n    let gcd = find_gcd(num1, num2);\n    for (let i = 2; i < l.length; i++) {\n        gcd = find_gcd(gcd, l[i]);\n    }\n    return gcd;\n}\n\n",
        "test": "const testGet_gcd = () => {\n    console.assert(get_gcd([2, 4, 6, 8, 16]) === 2, \"Test 1 Failed\");\n    console.assert(get_gcd([1, 2, 3]) === 1, \"Test 2 Failed\");\n    console.assert(get_gcd([2, 4, 6, 8]) === 2, \"Test 3 Failed\");\n}\ntestGet_gcd();",
        "is_deleted": 1,
        "code_str_deleted": "function find_gcd(x, y) {\n    while (y) {\n        let temp = x;\n        x = y;\n        y = temp % y;\n    }\n    return x;\n}\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the gcd of the given array elements.",
        "code_str_generate": "function find_gcd(x, y) {\n    while (y) {\n        let temp = x;\n        x = y;\n        y = temp % y;\n    }\n    return x;\n}\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 35,
        "task_id": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
        "code_str": "//function definition\nfunction test_distinct(data) {\n  const unique = new Set(data);\n  if (data.length === unique.size) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test": "const testTest_distinct = () => {\n  console.assert(test_distinct([1,5,7,9]) === true);\n  console.assert(test_distinct([2,4,5,5,7,9]) === false);\n  console.assert(test_distinct([1,2,3]) === true);\n}\ntestTest_distinct() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction test_distinct(data) {\n  const unique = new Set(data);\n  if (data.length === unique.size) {\n  //begin to write code\n",
        "javascript_prompt": "Write a javascript function to determine whether all the numbers are different from each other are not.",
        "code_str_generate": "//function definition\nfunction test_distinct(data) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to determine whether all the numbers are different from each other are not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const unique = new Set(data);\n  if (data.length === unique.size) {\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 36,
        "task_id": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "code_str": "function compute_Last_Digit(A, B) {\n    let variable = 1;\n    if (A === B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n    } else {\n        for (let i = A + 1; i < B + 1; i++) {\n            variable = (variable * (i % 10)) % 10;\n        }\n        return variable % 10;\n    }\n}",
        "test": "const testCompute_Last_Digit = () => {\n    console.assert(compute_Last_Digit(2,4) === 2);\n    console.assert(compute_Last_Digit(6,8) === 6);\n    console.assert(compute_Last_Digit(1,2) === 2);\n    console.assert(compute_Last_Digit(3,7) === 0);\n    console.assert(compute_Last_Digit(20,23) === 6);\n    console.assert(compute_Last_Digit(1021,1024) === 4);\n}\n\ntestCompute_Last_Digit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function compute_Last_Digit(A, B) {\n    let variable = 1;\n    if (A === B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the last digit when factorial of a divides factorial of b.",
        "code_str_generate": "function compute_Last_Digit(A, B) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the last digit when factorial of a divides factorial of b.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let variable = 1;\n    if (A === B) {\n        return 1;\n    } else if ((B - A) >= 5) {\n        return 0;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 37,
        "task_id": 48,
        "prompt": "Write a python function to set all odd bits of a given number.",
        "code_str": "function odd_bit_set_number(n) {\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n            res |= (1 << count);\n        }\n        count += 1;\n        temp >>= 1;\n    }\n    return (n | res);\n}\n\n",
        "test": "const testOdd_bit_set_number = () => {\n    console.assert(odd_bit_set_number(10) === 15);\n    console.assert(odd_bit_set_number(20) === 21);\n    console.assert(odd_bit_set_number(30) === 31);\n}\ntestOdd_bit_set_number() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function odd_bit_set_number(n) {\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to set all odd bits of a given number.",
        "code_str_generate": "function odd_bit_set_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to set all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 38,
        "task_id": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code_str": "function specifiedElement(nums, N) {\n    return nums.map(i => i[N]);\n}\n\n",
        "test": "const testSpecifiedElement = () => {\n    console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) === JSON.stringify([1, 4, 7]), \"Test 1 failed\");\n    console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) === JSON.stringify([3, 6, 9]), \"Test 2 failed\");\n    console.assert(JSON.stringify(specifiedElement([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)) === JSON.stringify([2, 5, 1]), \"Test 3 failed\");\n}\n\ntestSpecifiedElement();",
        "is_deleted": 1,
        "code_str_deleted": "function specifiedElement(nums, N) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code_str_generate": "function specifiedElement(nums, N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract every first or specified element from a given two-dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 39,
        "task_id": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.",
        "code_str": "function minLengthList(inputList) {\n    const minLength = Math.min(...inputList.map(x => x.length));\n    const minList = inputList.reduce((acc, curr) => acc.length <= curr.length ? acc : curr);\n    return [minLength, minList];\n}\n\n",
        "test": "const testMinLengthList = () => {\n    console.assert(JSON.stringify(minLengthList([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([1, [0]]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(minLengthList([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) === JSON.stringify([1, [1]]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(minLengthList([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])) === JSON.stringify([2, [1,2]]), \"Test 3 Failed\");\n}\n\ntestMinLengthList() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function minLengthList(inputList) {\n    const minLength = Math.min(...inputList.map(x => x.length));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the list with minimum length using lambda function.",
        "code_str_generate": "function minLengthList(inputList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the list with minimum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const minLength = Math.min(...inputList.map(x => x.length));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 40,
        "task_id": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.",
        "code_str": "function check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test": "const testCheck_equilateral = () => {\n    console.assert(check_equilateral(6, 8, 12) === false, \"Test 1 failed\");\n    console.assert(check_equilateral(6, 6, 12) === false, \"Test 2 failed\");\n    console.assert(check_equilateral(6, 6, 6) === true, \"Test 3 failed\");\n}\n\ntestCheck_equilateral() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_equilateral(x, y, z) {\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to print check if the triangle is equilateral or not.",
        "code_str_generate": "function check_equilateral(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is equilateral or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x === y && y === z) {\n        return true;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 41,
        "task_id": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.",
        "code_str": "function parallelogram_area(b, h) {\n    return b * h;\n}\n\n",
        "test": "const testparallelogram_area = () => {\n    console.assert(parallelogram_area(10, 20) === 200);\n    console.assert(parallelogram_area(15, 20) === 300);\n    console.assert(parallelogram_area(8, 9) === 72);\n}\n\ntestparallelogram_area(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function parallelogram_area(b, h) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to caluclate area of a parallelogram.",
        "code_str_generate": "function parallelogram_area(b, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to caluclate area of a parallelogram.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 42,
        "task_id": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "code_str": "function check_Equality(str) {\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n  } else {\n    return \"Not Equal\";\n  }\n}\n\n",
        "test": "const testcheck_Equality = () => {\n  console.assert(check_Equality(\"abcda\") === \"Equal\");\n  console.assert(check_Equality(\"ab\") === \"Not Equal\");\n  console.assert(check_Equality(\"mad\") === \"Not Equal\");\n}\n\ntestcheck_Equality() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_Equality(str) {\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the first and last characters of a given string are equal or not.",
        "code_str_generate": "function check_Equality(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the first and last characters of a given string are equal or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  if (str[0] === str[str.length - 1]) {\n    return \"Equal\";\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 43,
        "task_id": 54,
        "prompt": "Write a function to sort the given array by using counting sort.",
        "code_str": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n    }\n    let index = 0;\n    for (let j = 0; j <= max_value; j++) {\n        for (let a = 0; a < buckets[j]; a++) {\n            my_list[index] = j;\n            index += 1;\n        }\n    }\n    return my_list;\n}\n\n",
        "test": "const testcounting_sort = () => {\n    console.assert(JSON.stringify(counting_sort([1, 23, 4, 5, 6, 7, 8])) === JSON.stringify([1, 4, 5, 6, 7, 8, 23]), 'Test 1 Failed');\n    console.assert(JSON.stringify(counting_sort([12, 9, 28, 33, 69, 45])) === JSON.stringify([9, 12, 28, 33, 45, 69]), 'Test 2 Failed');\n    console.assert(JSON.stringify(counting_sort([8, 4, 14, 3, 2, 1])) === JSON.stringify([1, 2, 3, 4, 8, 14]), 'Test 3 Failed');\n}\n\ntestcounting_sort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function counting_sort(my_list) {\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sort the given array by using counting sort.",
        "code_str_generate": "function counting_sort(my_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort the given array by using counting sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_value = 0;\n    for (let i = 0; i < my_list.length; i++) {\n        if (my_list[i] > max_value) {\n            max_value = my_list[i];\n        }\n    }\n    let buckets = new Array(max_value + 1).fill(0);\n    for (let i = 0; i < my_list.length; i++) {\n        buckets[my_list[i]] += 1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 44,
        "task_id": 55,
        "prompt": "Write a function to find t-nth term of geometric series.",
        "code_str": "function tn_gp(a, n, r) {\n    return a * Math.pow(r, n - 1);\n}\n\n",
        "test": "const testTn_gp = () => {\n    console.assert(tn_gp(1, 5, 2) === 16, \"Test case 1 failed\");\n    console.assert(tn_gp(1, 5, 4) === 256, \"Test case 2 failed\");\n    console.assert(tn_gp(2, 6, 3) === 486, \"Test case 3 failed\");\n}\n\ntestTn_gp();",
        "is_deleted": 1,
        "code_str_deleted": "function tn_gp(a, n, r) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find t-nth term of geometric series.",
        "code_str_generate": "function tn_gp(a, n, r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find t-nth term of geometric series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 45,
        "task_id": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "code_str": "function rev(num) {\n    let rev_num = 0;\n    while (num > 0) {\n        rev_num = (rev_num * 10 + num % 10);\n        num = Math.floor(num / 10);\n    }\n    return rev_num;\n}\n\nfunction check(n) {\n    return (2 * rev(n) === n + 1);\n}\n\n",
        "test": "const testCheck = () => {\n    console.assert(check(70) === false);\n    console.assert(check(23) === false);\n    console.assert(check(73) === true);\n}\n\ntestCheck() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function rev(num) {\n    let rev_num = 0;\n    while (num > 0) {\n        rev_num = (rev_num * 10 + num % 10);\n        num = Math.floor(num / 10);\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check if a given number is one less than twice its reverse.",
        "code_str_generate": "function rev(num) {\n    let rev_num = 0;\n    while (num > 0) {\n        rev_num = (rev_num * 10 + num % 10);\n        num = Math.floor(num / 10);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 46,
        "task_id": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.",
        "code_str": "function find_Max_Num(arr, n) {\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    for (let i = 1; i < n; i++) {\n        num = num * 10 + arr[i];\n    }\n    return num;\n}\n\n",
        "test": "const testfind_Max_Num = () => {\n    console.assert(find_Max_Num([1, 2, 3], 3) === 321, \"Test 1 Failed\");\n    console.assert(find_Max_Num([4, 5, 6, 1], 4) === 6541, \"Test 2 Failed\");\n    console.assert(find_Max_Num([1, 2, 3, 9], 4) === 9321, \"Test 3 Failed\");\n}\n\ntestfind_Max_Num(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Max_Num(arr, n) {\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    for (let i = 1; i < n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the largest number that can be formed with the given digits.",
        "code_str_generate": "function find_Max_Num(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest number that can be formed with the given digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    arr.sort((a, b) => b - a);\n    let num = arr[0];\n    for (let i = 1; i < n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 47,
        "task_id": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "code_str": "function opposite_Signs(x, y) {\n    return ((x ^ y) < 0);\n}\n\n",
        "test": "const testopposite_Signs = () => {\n    console.assert(opposite_Signs(1, -2) === true, \"Test 1 failed\");\n    console.assert(opposite_Signs(3, 2) === false, \"Test 2 failed\");\n    console.assert(opposite_Signs(-10, -10) === false, \"Test 3 failed\");\n}\n\ntestopposite_Signs(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function opposite_Signs(x, y) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given two integers have opposite sign or not.",
        "code_str_generate": "function opposite_Signs(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given two integers have opposite sign or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 48,
        "task_id": 59,
        "prompt": "Write a function to find the nth octagonal number.",
        "code_str": "function is_octagonal(n) {\n    return 3 * n * n - 2 * n;\n}\n\n",
        "test": "const testis_octagonal = () => {\n    console.assert(is_octagonal(5) === 65, \"Test 1 failed\");\n    console.assert(is_octagonal(10) === 280, \"Test 2 failed\");\n    console.assert(is_octagonal(15) === 645, \"Test 3 failed\");\n}\n\ntestis_octagonal(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_octagonal(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the nth octagonal number.",
        "code_str_generate": "function is_octagonal(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nth octagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 49,
        "task_id": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code_str": "function max_len_sub(arr, n) {\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n            }\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        if (max < mls[i]) {\n            max = mls[i];\n        }\n    }\n    return max;\n}\n\n",
        "test": "const testMax_len_sub = () => {\n    console.assert(max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) === 5, 'Test 1 Failed');\n    console.assert(max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) === 4, 'Test 2 Failed');\n    console.assert(max_len_sub([9, 11, 13, 15, 18], 5) === 1, 'Test 3 Failed');\n}\n\ntestMax_len_sub(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_len_sub(arr, n) {\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code_str_generate": "function max_len_sub(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mls = [];\n    let max = 0;\n    for (let i = 0; i < n; i++) {\n        mls.push(1);\n    }\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                mls[i] = mls[j] + 1;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 50,
        "task_id": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "code_str": "function count_Substrings(s, n) {\n    let count = 0, sum = 0;\n    let mp = new Map();\n    mp.set(0, 1);\n    for (let i = 0; i < n; i++) {\n        sum += s.charCodeAt(i) - '0'.charCodeAt(0);\n        count += (mp.get(sum - (i + 1)) || 0);\n        mp.set(sum - (i + 1), (mp.get(sum - (i + 1)) || 0) + 1);\n    }\n    return count;\n}\n\n",
        "test": "const testCount_Substrings = () => {\n    console.assert(count_Substrings('112112', 6) === 6, \"Test 1 Failed\");\n    console.assert(count_Substrings('111', 3) === 6, \"Test 2 Failed\");\n    console.assert(count_Substrings('1101112', 7) === 12, \"Test 3 Failed\");\n};\n\ntestCount_Substrings(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Substrings(s, n) {\n    let count = 0, sum = 0;\n    let mp = new Map();\n    mp.set(0, 1);\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count number of substrings with the sum of digits equal to their length.",
        "code_str_generate": "function count_Substrings(s, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count number of substrings with the sum of digits equal to their length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0, sum = 0;\n    let mp = new Map();\n    mp.set(0, 1);\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 51,
        "task_id": 62,
        "prompt": "Write a python function to find smallest number in a list.",
        "code_str": "function smallest_num(xs) {\n  return Math.min(...xs);\n}\n\n",
        "test": "const testSmallestNum = () => {\n  console.assert(smallest_num([10, 20, 1, 45, 99]) === 1);\n  console.assert(smallest_num([1, 2, 3]) === 1);\n  console.assert(smallest_num([45, 46, 50, 60]) === 45);\n}\ntestSmallestNum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function smallest_num(xs) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find smallest number in a list.",
        "code_str_generate": "function smallest_num(xs) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest number in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 52,
        "task_id": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code_str": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  let res = Math.max(...temp);\n  return res;\n}\n\n",
        "test": "const testMax_difference = () => {\n  console.assert(max_difference([[3, 5], [1, 7], [10, 3], [1, 2]]) === 7, \"Test case 1 failed\");\n  console.assert(max_difference([[4, 6], [2, 17], [9, 13], [11, 12]]) === 15, \"Test case 2 failed\");\n  console.assert(max_difference([[12, 35], [21, 27], [13, 23], [41, 22]]) === 23, \"Test case 3 failed\");\n}\ntestMax_difference(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_difference(test_list) {\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code_str_generate": "function max_difference(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum difference between available pairs in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let temp = test_list.map(([a, b]) => Math.abs(b - a));\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 53,
        "task_id": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.",
        "code_str": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    return subjectMarks;\n}\n\n",
        "test": "const testSubjectMarks = () => {\n    console.assert(JSON.stringify(subjectMarks([['English', 88], ['Science', 90], ['Maths', 97], ['Social sciences', 82]])) === JSON.stringify([['Social sciences', 82], ['English', 88], ['Science', 90], ['Maths', 97]]));\n    console.assert(JSON.stringify(subjectMarks([['Telugu', 49], ['Hindhi', 54], ['Social', 33]])) === JSON.stringify([['Social', 33], ['Telugu', 49], ['Hindhi', 54]]));\n    console.assert(JSON.stringify(subjectMarks([['Physics', 96], ['Chemistry', 97], ['Biology', 45]])) === JSON.stringify([['Biology', 45], ['Physics', 96], ['Chemistry', 97]]));\n}\n\ntestSubjectMarks();",
        "is_deleted": 1,
        "code_str_deleted": "function subjectMarks(subjectMarks) {\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to sort a list of tuples using lambda.",
        "code_str_generate": "function subjectMarks(subjectMarks) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples using lambda.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    subjectMarks.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 54,
        "task_id": 65,
        "prompt": "Write a function of recursion list sum.",
        "code_str": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n        } else {\n            total += element;\n        }\n    }\n    return total;\n}\n\n",
        "test": "const testRecursiveListSum = () => {\n    console.assert(recursiveListSum([1, 2, [3, 4], [5, 6]]) === 21);\n    console.assert(recursiveListSum([7, 10, [15, 14], [19, 41]]) === 106);\n    console.assert(recursiveListSum([10, 20, [30, 40], [50, 60]]) === 210);\n}\n\ntestRecursiveListSum();",
        "is_deleted": 1,
        "code_str_deleted": "function recursiveListSum(dataList) {\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n            //begin to write code\n",
        "javascript_prompt": "Write a function of recursion list sum.",
        "code_str_generate": "function recursiveListSum(dataList) {\n\n    /*\n    progame language:javascript\n    description:Write a function of recursion list sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (const element of dataList) {\n        if (Array.isArray(element)) {\n            total += recursiveListSum(element);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 55,
        "task_id": 66,
        "prompt": "Write a python function to count positive numbers in a list.",
        "code_str": "function pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n            pos_count += 1;\n        }\n    }\n    return pos_count;\n}\n\n",
        "test": "const testpos_count = () => {\n    console.assert(pos_count([1,-2,3,-4]) === 2);\n    console.assert(pos_count([3,4,5,-1]) === 3);\n    console.assert(pos_count([1,2,3,4]) === 4);\n}\n\ntestpos_count() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function pos_count(list) {\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count positive numbers in a list.",
        "code_str_generate": "function pos_count(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pos_count = 0;\n    for (let num of list) {\n        if (num >= 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 56,
        "task_id": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code_str": "function bell_number(n) {\n    let bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(BigInt(0)));\n    bell[0][0] = BigInt(1);\n    for (let i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        for (let j = 1; j <= i; j++) {\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1];\n        }\n    }\n    return bell[n][0];\n}",
        "test": "const testBell_number = () => {\n    console.assert(bell_number(2) === 2n, 'Test case 1 failed');\n    console.assert(bell_number(10) === 115975n, 'Test case 2 failed');\n    console.assert(bell_number(56) === 6775685320645824322581483068371419745979053216268760300n, 'Test case 3 failed');\n}\ntestBell_number() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function bell_number(n) {\n    let bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(BigInt(0)));\n    bell[0][0] = BigInt(1);\n    for (let i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code_str_generate": "function bell_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the number of ways to partition a set of bell numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let bell = Array.from({ length: n + 1 }, () => Array(n + 1).fill(BigInt(0)));\n    bell[0][0] = BigInt(1);\n    for (let i = 1; i <= n; i++) {\n        bell[i][0] = bell[i - 1][i - 1];\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 57,
        "task_id": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "code_str": "function is_Monotonic(A) {\n    return A.every((val, i) => i === A.length - 1 || val <= A[i + 1]) ||\n           A.every((val, i) => i === A.length - 1 || val >= A[i + 1]);\n}\n\n",
        "test": "const testIs_Monotonic = () => {\n    console.assert(is_Monotonic([6, 5, 4, 4]) === true, \"Test 1 failed\");\n    console.assert(is_Monotonic([1, 2, 2, 3]) === true, \"Test 2 failed\");\n    console.assert(is_Monotonic([1, 3, 2]) === false, \"Test 3 failed\");\n};\n\ntestIs_Monotonic(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_Monotonic(A) {\n    return A.every((val, i) => i === A.length - 1 || val <= A[i + 1]) ||\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given array is monotonic or not.",
        "code_str_generate": "function is_Monotonic(A) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given array is monotonic or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return A.every((val, i) => i === A.length - 1 || val <= A[i + 1]) ||\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 58,
        "task_id": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "code_str": "function is_sublist(l, s) {\n    let sub_set = false;\n    if (s.length === 0) {\n        sub_set = true;\n    } else if (s === l) {\n        sub_set = true;\n    } else if (s.length > l.length) {\n        sub_set = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n                let n = 1;\n                while (n < s.length && l[i + n] === s[n]) {\n                    n += 1;\n                }\n                if (n === s.length) {\n                    sub_set = true;\n                }\n            }\n        }\n    }\n    return sub_set;\n}\n\n",
        "test": "const testis_sublist = () => {\n    console.assert(is_sublist([2,4,3,5,7], [3,7]) === false);\n    console.assert(is_sublist([2,4,3,5,7], [4,3]) === true);\n    console.assert(is_sublist([2,4,3,5,7], [1,6]) === false);\n}\n\ntestis_sublist(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_sublist(l, s) {\n    let sub_set = false;\n    if (s.length === 0) {\n        sub_set = true;\n    } else if (s === l) {\n        sub_set = true;\n    } else if (s.length > l.length) {\n        sub_set = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to check whether a list contains the given sublist or not.",
        "code_str_generate": "function is_sublist(l, s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether a list contains the given sublist or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sub_set = false;\n    if (s.length === 0) {\n        sub_set = true;\n    } else if (s === l) {\n        sub_set = true;\n    } else if (s.length > l.length) {\n        sub_set = false;\n    } else {\n        for (let i = 0; i < l.length; i++) {\n            if (l[i] === s[0]) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 59,
        "task_id": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "code_str": "function findEqualTuple(input, k) {\n    let flag = 1;\n    for (let tuple of input) {\n        if (tuple.length !== k) {\n            flag = 0;\n            break;\n        }\n    }\n    return flag;\n}\n\nfunction getEqual(input, k) {\n    if (findEqualTuple(input, k) === 1) {\n        return (\"All tuples have same length\");\n    } else {\n        return (\"All tuples do not have same length\");\n    }\n}\n\n",
        "test": "const testGetEqual = () => {\n    console.assert(getEqual([[11, 22, 33], [44, 55, 66]], 3) === 'All tuples have same length', \"Test 1 Failed\");\n    console.assert(getEqual([[1, 2, 3], [4, 5, 6, 7]], 3) === 'All tuples do not have same length', \"Test 2 Failed\");\n    console.assert(getEqual([[1, 2], [3, 4]], 2) === 'All tuples have same length', \"Test 3 Failed\");\n}\n\ntestGetEqual() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function findEqualTuple(input, k) {\n    let flag = 1;\n    for (let tuple of input) {\n        if (tuple.length !== k) {\n            flag = 0;\n            break;\n        }\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "code_str_generate": "function findEqualTuple(input, k) {\n    let flag = 1;\n    for (let tuple of input) {\n        if (tuple.length !== k) {\n            flag = 0;\n            break;\n        }\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 60,
        "task_id": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.",
        "code_str": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n            if (nums[i] > nums[i + gaps]) {\n                [nums[i], nums[i + gaps]] = [nums[i + gaps], nums[i]];\n                swapped = true;\n            }\n            i++;\n        }\n    }\n    return nums;\n}\n\n",
        "test": "const testCombSort = () => {\n    console.assert(JSON.stringify(combSort([5, 15, 37, 25, 79])) === JSON.stringify([5, 15, 25, 37, 79]), 'Test failed');\n    console.assert(JSON.stringify(combSort([41, 32, 15, 19, 22])) === JSON.stringify([15, 19, 22, 32, 41]), 'Test failed');\n    console.assert(JSON.stringify(combSort([99, 15, 13, 47])) === JSON.stringify([13, 15, 47, 99]), 'Test failed');\n}\n\ntestCombSort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function combSort(nums) {\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sort a list of elements using comb sort.",
        "code_str_generate": "function combSort(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of elements using comb sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const shrinkFact = 1.3;\n    let gaps = nums.length;\n    let swapped = true;\n    while (gaps > 1 || swapped) {\n        gaps = Math.floor(gaps / shrinkFact);\n        swapped = false;\n        let i = 0;\n        while (gaps + i < nums.length) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 61,
        "task_id": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "code_str": "function dif_Square(n) {\n    if (n % 4 !== 2) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test": "const testDif_Square = () => {\n    console.assert(dif_Square(5) === true);\n    console.assert(dif_Square(10) === false);\n    console.assert(dif_Square(15) === true);\n}\ntestDif_Square() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function dif_Square(n) {\n    if (n % 4 !== 2) {\n        return true;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given number can be represented as difference of two squares or not.",
        "code_str_generate": "function dif_Square(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given number can be represented as difference of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 4 !== 2) {\n        return true;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 62,
        "task_id": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "code_str": "function multipleSplit(text) {\n  return text.split(/; |, |\\*|\\n/);\n}\n\n",
        "test": "const testMultipleSplit = () => {\n  console.assert(JSON.stringify(multipleSplit('Forces of the \\ndarkness*are coming into the play.')) === JSON.stringify(['Forces of the ', 'darkness', 'are coming into the play.']), 'Test 1 Failed');\n  console.assert(JSON.stringify(multipleSplit('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')) === JSON.stringify(['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']), 'Test 2 Failed');\n  console.assert(JSON.stringify(multipleSplit('Certain services\\nare subjected to change*over the seperate subscriptions.')) === JSON.stringify(['Certain services', 'are subjected to change', 'over the seperate subscriptions.']), 'Test 3 Failed');\n}\n\ntestMultipleSplit();",
        "is_deleted": 1,
        "code_str_deleted": "function multipleSplit(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "code_str_generate": "function multipleSplit(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to split the given string with multiple delimiters by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 63,
        "task_id": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code_str": "function is_samepatterns(colors, patterns) {\n    if (colors.length !== patterns.length) {\n        return false;\n    }\n    const sdict = {};\n    const pset = new Set();\n    const sset = new Set();\n\n    for (let i = 0; i < patterns.length; i++) {\n        pset.add(patterns[i]);\n        sset.add(colors[i]);\n        if (!(patterns[i] in sdict)) {\n            sdict[patterns[i]] = [];\n        }\n        sdict[patterns[i]].push(colors[i]);\n    }\n\n    if (pset.size !== sset.size) {\n        return false;\n    }\n\n    for (const values of Object.values(sdict)) {\n        for (let i = 0; i < values.length - 1; i++) {\n            if (values[i] !== values[i + 1]) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n",
        "test": "const testis_samepatterns = () => {\n    console.assert(is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) === true);\n    console.assert(is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\", \"b\"]) === false);\n    console.assert(is_samepatterns([\"red\", \"green\", \"greenn\"], [\"a\", \"b\"]) === false);\n}\n\ntestis_samepatterns();",
        "is_deleted": 1,
        "code_str_deleted": "function is_samepatterns(colors, patterns) {\n    if (colors.length !== patterns.length) {\n        return false;\n    }\n    const sdict = {};\n    const pset = new Set();\n    const sset = new Set();\n    for (let i = 0; i < patterns.length; i++) {\n        pset.add(patterns[i]);\n        sset.add(colors[i]);\n        if (!(patterns[i] in sdict)) {\n            sdict[patterns[i]] = [];\n        }\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code_str_generate": "function is_samepatterns(colors, patterns) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether it follows the sequence given in the patterns array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (colors.length !== patterns.length) {\n        return false;\n    }\n    const sdict = {};\n    const pset = new Set();\n    const sset = new Set();\n    for (let i = 0; i < patterns.length; i++) {\n        pset.add(patterns[i]);\n        sset.add(colors[i]);\n        if (!(patterns[i] in sdict)) {\n            sdict[patterns[i]] = [];\n        }\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 64,
        "task_id": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code_str": "function find_tuples(test_list, K) {\n    let res = test_list.filter(sub => sub.every(ele => ele % K === 0));\n    return JSON.stringify(res);\n}\n\n",
        "test": "const testFind_tuples = () => {\n    console.assert(find_tuples([[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6) === '[[6,24,12]]');\n    console.assert(find_tuples([[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5) === '[[5,25,30]]');\n    console.assert(find_tuples([[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4) === '[[8,16,4]]');\n}\n\ntestFind_tuples() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_tuples(test_list, K) {\n    let res = test_list.filter(sub => sub.every(ele => ele % K === 0));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code_str_generate": "function find_tuples(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = test_list.filter(sub => sub.every(ele => ele % K === 0));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 65,
        "task_id": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "code_str": "function count_Squares(m, n) {\n    if (n < m) {\n        let temp = m;\n        m = n;\n        n = temp;\n    }\n    return (m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2);\n}\n\n",
        "test": "const testcount_Squares = () => {\n    console.assert(count_Squares(4, 3) === 20);\n    console.assert(count_Squares(2, 2) === 5);\n    console.assert(count_Squares(1, 1) === 1);\n}\ntestcount_Squares() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Squares(m, n) {\n    if (n < m) {\n        let temp = m;\n        m = n;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of squares in a rectangle.",
        "code_str_generate": "function count_Squares(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < m) {\n        let temp = m;\n        m = n;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 66,
        "task_id": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.",
        "code_str": "function is_Diff(n) {\n    return (n % 11 === 0);\n}\n\n",
        "test": "const testis_Diff = () => {\n    console.assert(is_Diff(12345) === false);\n    console.assert(is_Diff(1212112) === true);\n    console.assert(is_Diff(1212) === false);\n}\ntestis_Diff()",
        "is_deleted": 1,
        "code_str_deleted": "function is_Diff(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the difference between sum of even and odd digits.",
        "code_str_generate": "function is_Diff(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the difference between sum of even and odd digits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 67,
        "task_id": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.",
        "code_str": "function count_With_Odd_SetBits(n) {\n    if (n % 2 !== 0) {\n        return (n + 1) / 2;\n    }\n    const count = n.toString(2).split('1').length - 1;\n    let ans = n / 2;\n    if (count % 2 !== 0) {\n        ans += 1;\n    }\n    return ans;\n}\n\n",
        "test": "const testCount_With_Odd_SetBits = () => {\n    console.assert(count_With_Odd_SetBits(5) === 3, 'Test 1 failed');\n    console.assert(count_With_Odd_SetBits(10) === 5, 'Test 2 failed');\n    console.assert(count_With_Odd_SetBits(15) === 8, 'Test 3 failed');\n}\ntestCount_With_Odd_SetBits() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_With_Odd_SetBits(n) {\n    if (n % 2 !== 0) {\n        return (n + 1) / 2;\n    }\n    const count = n.toString(2).split('1').length - 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find number of integers with odd number of set bits.",
        "code_str_generate": "function count_With_Odd_SetBits(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find number of integers with odd number of set bits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 !== 0) {\n        return (n + 1) / 2;\n    }\n    const count = n.toString(2).split('1').length - 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 68,
        "task_id": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "code_str": "function word_len(s) {\n    let words = s.split(' ');\n    for (let word of words) {\n        if (word.length % 2 !== 0) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n",
        "test": "const testWord_len = () => {\n    console.assert(word_len(\"Hadoop\") === false, \"Test case 1 failed\");\n    console.assert(word_len(\"great\") === true, \"Test case 2 failed\");\n    console.assert(word_len(\"structure\") === true, \"Test case 3 failed\");\n}\n\ntestWord_len(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function word_len(s) {\n    let words = s.split(' ');\n    for (let word of words) {\n        if (word.length % 2 !== 0) {\n            return true;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the length of the word is odd or not.",
        "code_str_generate": "function word_len(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the length of the word is odd or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let words = s.split(' ');\n    for (let word of words) {\n        if (word.length % 2 !== 0) {\n            return true;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 69,
        "task_id": 80,
        "prompt": "Write a function to find the nth tetrahedral number.",
        "code_str": "function tetrahedral_number(n) {\n    return (n * (n + 1) * (n + 2)) / 6;\n}\n\n",
        "test": "const testtetrahedral_number = () => {\n    console.assert(tetrahedral_number(5) === 35.0, \"Test 1 failed\");\n    console.assert(tetrahedral_number(6) === 56.0, \"Test 2 failed\");\n    console.assert(tetrahedral_number(7) === 84.0, \"Test 3 failed\");\n}\ntesttetrahedral_number();",
        "is_deleted": 1,
        "code_str_deleted": "function tetrahedral_number(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the nth tetrahedral number.",
        "code_str_generate": "function tetrahedral_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nth tetrahedral number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 70,
        "task_id": 81,
        "prompt": "Write a function to zip the two given tuples.",
        "code_str": "function zip_tuples(test_tup1, test_tup2) {\n  let res = [];\n  for (let i = 0; i < test_tup1.length; i++) {\n    res.push([test_tup1[i], test_tup2[i % test_tup2.length]]);\n  }\n  return res;\n}\n\n",
        "test": "const testZip_tuples = () => {\n  console.assert(JSON.stringify(zip_tuples([7, 8, 4, 5, 9, 10], [1, 5, 6])) === JSON.stringify([[7, 1], [8, 5], [4, 6], [5, 1], [9, 5], [10, 6]]), \"Test 1 failed\");\n  console.assert(JSON.stringify(zip_tuples([8, 9, 5, 6, 10, 11], [2, 6, 7])) === JSON.stringify([[8, 2], [9, 6], [5, 7], [6, 2], [10, 6], [11, 7]]), \"Test 2 failed\");\n  console.assert(JSON.stringify(zip_tuples([9, 10, 6, 7, 11, 12], [3, 7, 8])) === JSON.stringify([[9, 3], [10, 7], [6, 8], [7, 3], [11, 7], [12, 8]]), \"Test 3 failed\");\n}\ntestZip_tuples(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function zip_tuples(test_tup1, test_tup2) {\n  let res = [];\n  for (let i = 0; i < test_tup1.length; i++) {\n  //begin to write code\n",
        "javascript_prompt": "Write a function to zip the two given tuples.",
        "code_str_generate": "function zip_tuples(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to zip the two given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = [];\n  for (let i = 0; i < test_tup1.length; i++) {\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 71,
        "task_id": 82,
        "prompt": "Write a function to find the volume of a sphere.",
        "code_str": "function volume_sphere(r) {\n  const volume = (4/3) * Math.PI * r * r * r;\n  return volume;\n}\n\n",
        "test": "const testvolume_sphere = () => {\n  console.assert(Math.abs(volume_sphere(10) - 4188.790204786391) < 0.00001);\n  console.assert(Math.abs(volume_sphere(25) - 65449.84694978735) < 0.00001);\n  console.assert(Math.abs(volume_sphere(20) - 33510.32163829113) < 0.00001);\n}\ntestvolume_sphere()",
        "is_deleted": 1,
        "code_str_deleted": "function volume_sphere(r) {\n  const volume = (4/3) * Math.PI * r * r * r;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the volume of a sphere.",
        "code_str_generate": "function volume_sphere(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the volume of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const volume = (4/3) * Math.PI * r * r * r;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 72,
        "task_id": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.",
        "code_str": "function get_Char(strr) {\n    let summ = 0;\n    for (let i = 0; i < strr.length; i++) {\n        summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1);\n    }\n    if (summ % 26 === 0) {\n        return 'z';\n    } else {\n        summ = summ % 26;\n        return String.fromCharCode('a'.charCodeAt(0) + summ - 1);\n    }\n}\n\n",
        "test": "const testget_Char = () => {\n    console.assert(get_Char(\"abc\") === \"f\", \"Test 1 Failed\");\n    console.assert(get_Char(\"gfg\") === \"t\", \"Test 2 Failed\");\n    console.assert(get_Char(\"ab\") === \"c\", \"Test 3 Failed\");\n}\ntestget_Char() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_Char(strr) {\n    let summ = 0;\n    for (let i = 0; i < strr.length; i++) {\n        summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1);\n    }\n    if (summ % 26 === 0) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the character made by adding all the characters of the given string.",
        "code_str_generate": "function get_Char(strr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the character made by adding all the characters of the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let summ = 0;\n    for (let i = 0; i < strr.length; i++) {\n        summ += (strr.charCodeAt(i) - 'a'.charCodeAt(0) + 1);\n    }\n    if (summ % 26 === 0) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 73,
        "task_id": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.",
        "code_str": "function sequence(n) { \n\tif (n === 1 || n === 2) { \n\t\treturn 1;\n\t} else { \n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1));\n\t}\n}\n\n",
        "test": "const testSequence = () => {\n    console.assert(sequence(10) === 6, \"Test case 1 failed\");\n    console.assert(sequence(2) === 1, \"Test case 2 failed\");\n    console.assert(sequence(3) === 2, \"Test case 3 failed\");\n}\ntestSequence() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sequence(n) { \n\tif (n === 1 || n === 2) { \n\t\treturn 1;\n\t\t//begin to write code\n",
        "javascript_prompt": "Write a function to find the n-th number in newman conway sequence.",
        "code_str_generate": "function sequence(n) { \n\n    /*\n    progame language:javascript\n    description:Write a function to find the n-th number in newman conway sequence.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n\tif (n === 1 || n === 2) { \n\t\treturn 1;\n\t\t//begin to write code\n"
    },
    {
        "Unnamed: 0": 74,
        "task_id": 85,
        "prompt": "Write a function to find the surface area of a sphere.",
        "code_str": "function surfacearea_sphere(r) {\n  let surfacearea = 4 * Math.PI * r * r;\n  return surfacearea;\n}\n\n",
        "test": "const testsurfacearea_sphere = () => {\n  console.assert(surfacearea_sphere(10) === 1256.6370614359173);\n  console.assert(surfacearea_sphere(15) === 2827.4333882308138);\n  console.assert(surfacearea_sphere(20) === 5026.548245743669);\n}\n\ntestsurfacearea_sphere();",
        "is_deleted": 1,
        "code_str_deleted": "function surfacearea_sphere(r) {\n  let surfacearea = 4 * Math.PI * r * r;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the surface area of a sphere.",
        "code_str_generate": "function surfacearea_sphere(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a sphere.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let surfacearea = 4 * Math.PI * r * r;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 75,
        "task_id": 86,
        "prompt": "Write a function to find nth centered hexagonal number.",
        "code_str": "function centered_hexagonal_number(n) {\n    return 3 * n * (n - 1) + 1;\n}\n\n",
        "test": "const testcentered_hexagonal_number = () => {\n    console.assert(centered_hexagonal_number(10) === 271, \"Test 1 Failed\");\n    console.assert(centered_hexagonal_number(2) === 7, \"Test 2 Failed\");\n    console.assert(centered_hexagonal_number(9) === 217, \"Test 3 Failed\");\n}\n\ntestcentered_hexagonal_number();  // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function centered_hexagonal_number(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find nth centered hexagonal number.",
        "code_str_generate": "function centered_hexagonal_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find nth centered hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 76,
        "task_id": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.",
        "code_str": "function merge_dictionaries_three(dict1, dict2, dict3) {\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    for (const [key, value] of keyValuePairs) {\n        sortedDict[key] = value;\n    }\n    return sortedDict;\n}",
        "test": "const testMerge_dictionaries_three = () => {\n    console.assert(JSON.stringify(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" }, { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })) === JSON.stringify({\n        \"B\": \"Black\",\n        \"G\": \"Green\",\n        \"O\": \"Orange\",\n        \"P\": \"Pink\",\n        \"R\": \"Red\",\n        \"W\": \"White\"\n      }), \"Test 1 Failed\");\n    console.assert(JSON.stringify(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" }, {\"L\":\"lavender\",\"B\":\"Blue\"})) === JSON.stringify({\n        \"B\": \"Black\",\n        \"G\": \"Green\",\n        \"L\": \"lavender\",\n        \"P\": \"Pink\",\n        \"R\": \"Red\",\n        \"W\": \"White\"\n      }), \"Test 2 Failed\");\n    console.assert(JSON.stringify(merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })) === JSON.stringify({\n        \"B\": \"Black\",\n        \"G\": \"Green\",\n        \"L\": \"lavender\",\n        \"P\": \"Pink\",\n        \"R\": \"Red\",\n        \"W\": \"White\"\n      }), \"Test 3 Failed\");\n}\n\ntestMerge_dictionaries_three(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function merge_dictionaries_three(dict1, dict2, dict3) {\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    //begin to write code\n",
        "javascript_prompt": "Write a function to merge three dictionaries into a single expression.",
        "code_str_generate": "function merge_dictionaries_three(dict1, dict2, dict3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge three dictionaries into a single expression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const mergedDict = Object.assign({}, dict3, dict2, dict1);\n    const keyValuePairs = Object.entries(mergedDict);\n    keyValuePairs.sort((a, b) => a[0].localeCompare(b[0]));\n    const sortedDict = {};\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 77,
        "task_id": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.",
        "code_str": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        return acc;\n    }, {});\n    return freqCount;\n}\n\n",
        "test": "const testFreqCount = () => {\n    console.assert(JSON.stringify(freqCount([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])) === JSON.stringify({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}), \"Test 1 Failed\");\n    console.assert(JSON.stringify(freqCount([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])) === JSON.stringify({1: 3, 2: 2, 3: 3, 4: 3}), \"Test 2 Failed\");\n    console.assert(JSON.stringify(freqCount([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])) === JSON.stringify({10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}), \"Test 3 Failed\");\n}\n\ntestFreqCount(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function freqCount(list1) {\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to get the frequency of the elements in a list.",
        "code_str_generate": "function freqCount(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the frequency of the elements in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const freqCount = list1.reduce((acc, value) => {\n        acc[value] = (acc[value] || 0) + 1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 78,
        "task_id": 89,
        "prompt": "Write a function to find the closest smaller number than n.",
        "code_str": "function closest_num(N) {\n  return N - 1;\n}\n\n",
        "test": "const testclosest_num = () => {\n  console.assert(closest_num(11) === 10);\n  console.assert(closest_num(7) === 6);\n  console.assert(closest_num(12) === 11);\n}\ntestclosest_num()",
        "is_deleted": 1,
        "code_str_deleted": "function closest_num(N) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the closest smaller number than n.",
        "code_str_generate": "function closest_num(N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the closest smaller number than n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 79,
        "task_id": 90,
        "prompt": "Write a python function to find the length of the longest word.",
        "code_str": "function len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n            max = i.length;\n        }\n    }\n    return max;\n}\n\n",
        "test": "const testlen_log = () => {\n    console.assert(len_log([\"python\", \"PHP\", \"bigdata\"]) === 7, \"Test 1 failed\");\n    console.assert(len_log([\"a\", \"ab\", \"abc\"]) === 3, \"Test 2 failed\");\n    console.assert(len_log([\"small\", \"big\", \"tall\"]) === 5, \"Test 3 failed\");\n}\ntestlen_log() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function len_log(list1) {\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the length of the longest word.",
        "code_str_generate": "function len_log(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the length of the longest word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max = list1[0].length;\n    for (let i of list1) {\n        if (i.length > max) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 80,
        "task_id": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.",
        "code_str": "function find_substring(str1, sub_str) {\n    return str1.some(s => s.includes(sub_str));\n}\n\n",
        "test": "const testfind_substring = () => {\n    console.assert(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") === true);\n    console.assert(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") === false);\n    console.assert(find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") === true);\n}\n\ntestfind_substring(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_substring(str1, sub_str) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to check if a substring is present in a given list of string values.",
        "code_str_generate": "function find_substring(str1, sub_str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a substring is present in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 81,
        "task_id": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "code_str": "function isUndulating(n) {\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n        if (n[i - 2] !== n[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test": "const testIsUndulating = () => {\n    console.assert(isUndulating(\"1212121\") === true, \"Test 1 failed\");\n    console.assert(isUndulating(\"1991\") === false, \"Test 2 failed\");\n    console.assert(isUndulating(\"121\") === true, \"Test 3 failed\");\n}\n\ntestIsUndulating(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function isUndulating(n) {\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the given number is undulating or not.",
        "code_str_generate": "function isUndulating(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given number is undulating or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n.length <= 2) {\n        return false;\n    }\n    for (let i = 2; i < n.length; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 82,
        "task_id": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code_str": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n    } else if (b === 1) {\n        return a;\n    } else {\n        return a * power(a, b - 1);\n    }\n}\n\n",
        "test": "const testPower = () => {\n    console.assert(power(3, 4) === 81, \"Test 1 failed\");\n    console.assert(power(2, 3) === 8, \"Test 2 failed\");\n    console.assert(power(5, 5) === 3125, \"Test 3 failed\");\n}\n\ntestPower(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function power(a, b) {\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code_str_generate": "function power(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the value of 'a' to the power 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (b === 0) {\n        return 1;\n    } else if (a === 0) {\n        return 0;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 83,
        "task_id": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "code_str": "function index_minimum(testList) {\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  return res;\n}\n\n",
        "test": "const testIndex_minimum = () => {\n  console.assert(index_minimum([['Rash', 143], ['Manjeet', 200], ['Varsha', 100]]) === 'Varsha');\n  console.assert(index_minimum([['Yash', 185], ['Dawood', 125], ['Sanya', 175]]) === 'Dawood');\n  console.assert(index_minimum([['Sai', 345], ['Salman', 145], ['Ayesha', 96]]) === 'Ayesha');\n}\n\ntestIndex_minimum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function index_minimum(testList) {\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  //begin to write code\n",
        "javascript_prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "code_str_generate": "function index_minimum(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the index minimum value record from the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = testList.reduce((min, item) => (item[1] < min[1] ? item : min))[0];\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 84,
        "task_id": 95,
        "prompt": "Write a python function to find the minimum length of sublist.",
        "code_str": "function Find_Min_Length(lst) {\n    let minLength = Math.min(...lst.map(x => x.length));\n    return minLength;\n}\n\n",
        "test": "const testFind_Min_Length = () => {\n    console.assert(Find_Min_Length([[1],[1,2]]) === 1);\n    console.assert(Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) === 2);\n    console.assert(Find_Min_Length([[3,3,3],[4,4,4,4]]) === 3);\n}\n\ntestFind_Min_Length() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Find_Min_Length(lst) {\n    let minLength = Math.min(...lst.map(x => x.length));\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the minimum length of sublist.",
        "code_str_generate": "function Find_Min_Length(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum length of sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let minLength = Math.min(...lst.map(x => x.length));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 85,
        "task_id": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "code_str": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            x++;\n        }\n    }\n    return x;\n}\n\n",
        "test": "const testdivisor = () => {\n    console.assert(divisor(15) === 4, \"Expected 4 divisors for 15\");\n    console.assert(divisor(12) === 6, \"Expected 6 divisors for 12\");\n    console.assert(divisor(9) === 3, \"Expected 3 divisors for 9\");\n}\ntestdivisor() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function divisor(n) {\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the number of divisors of a given integer.",
        "code_str_generate": "function divisor(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the number of divisors of a given integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 86,
        "task_id": 97,
        "prompt": "Write a function to find frequency count of list of lists.",
        "code_str": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n        } else {\n            dicData[num] = 1;\n        }\n    }\n    return dicData;\n}\n\n",
        "test": "const testFrequencyLists = () => {\n    console.assert(JSON.stringify(frequencyLists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])) === JSON.stringify({1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}), 'Test 1 Failed');\n    console.assert(JSON.stringify(frequencyLists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])) === JSON.stringify({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}), 'Test 2 Failed');\n    console.assert(JSON.stringify(frequencyLists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])) === JSON.stringify({20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}), 'Test 3 Failed');\n}\n\ntestFrequencyLists(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function frequencyLists(list1) {\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find frequency count of list of lists.",
        "code_str_generate": "function frequencyLists(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find frequency count of list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1 = list1.flat();\n    const dicData = {};\n    for (const num of list1) {\n        if (dicData.hasOwnProperty(num)) {\n            dicData[num] += 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 87,
        "task_id": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code_str": "function multiplyNum(numbers) {\n    let total = 1;\n    for (let x of numbers) {\n        total *= x;\n    }\n    return total / numbers.length;\n}\n\n",
        "test": "const testMultiplyNum = () => {\n    console.assert(multiplyNum([8, 2, 3, -1, 7]) === -67.2);\n    console.assert(multiplyNum([-10, -20, -30]) === -2000.0);\n    console.assert(multiplyNum([19, 15, 18]) === 1710.0);\n}\n\ntestMultiplyNum();",
        "is_deleted": 1,
        "code_str_deleted": "function multiplyNum(numbers) {\n    let total = 1;\n    for (let x of numbers) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code_str_generate": "function multiplyNum(numbers) {\n\n    /*\n    progame language:javascript\n    description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 1;\n    for (let x of numbers) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 88,
        "task_id": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "code_str": "function decimal_to_binary(n) {\n    return n.toString(2);\n}\n\n",
        "test": "const testDecimal_to_binary = () => {\n    console.assert(decimal_to_binary(8) === '1000', \"Test failed for n = 8\");\n    console.assert(decimal_to_binary(18) === '10010', \"Test failed for n = 18\");\n    console.assert(decimal_to_binary(7) === '111', \"Test failed for n = 7\");\n}\ntestDecimal_to_binary() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function decimal_to_binary(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "code_str_generate": "function decimal_to_binary(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given decimal number to its binary equivalent.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 89,
        "task_id": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "code_str": "function next_smallest_palindrome(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n            return i;\n        }\n    }\n}\n\n",
        "test": "const testNext_smallest_palindrome = () => {\n    console.assert(next_smallest_palindrome(99) === 101);\n    console.assert(next_smallest_palindrome(1221) === 1331);\n    console.assert(next_smallest_palindrome(120) === 121);\n}\n\ntestNext_smallest_palindrome()",
        "is_deleted": 1,
        "code_str_deleted": "function next_smallest_palindrome(num) {\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "code_str_generate": "function next_smallest_palindrome(num) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the next smallest palindrome of a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = num + 1; i < Number.MAX_SAFE_INTEGER; i++) {\n        if (i.toString() === i.toString().split('').reverse().join('')) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 90,
        "task_id": 101,
        "prompt": "Write a function to find the kth element in the given array.",
        "code_str": "function kth_element(arr, n, k) {\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n    return arr[k - 1];\n}",
        "test": "const testkth_element = () => {\n    console.assert(kth_element([12, 3, 5, 7, 19], 5, 2) === 5, \"Test case 1 failed\");\n    console.assert(kth_element([17, 24, 8, 23], 4, 3) === 23, \"Test case 2 failed\");\n    console.assert(kth_element([16, 21, 25, 36, 4], 5, 4) === 25, \"Test case 3 failed\");\n}\n\ntestkth_element() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function kth_element(arr, n, k) {\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find the kth element in the given array.",
        "code_str_generate": "function kth_element(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the kth element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                let temp = arr[j];\n                arr[j] = arr[j + 1];\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 91,
        "task_id": 102,
        "prompt": "Write a function to convert snake case string to camel case string.",
        "code_str": "function snakeToCamel(word) {\n    return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');\n}\n\n",
        "test": "const testSnakeToCamel = () => {\n    console.assert(snakeToCamel('python_program') === 'PythonProgram');\n    console.assert(snakeToCamel('python_language') === 'PythonLanguage');\n    console.assert(snakeToCamel('programming_language') === 'ProgrammingLanguage');\n}\n\ntestSnakeToCamel() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function snakeToCamel(word) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert snake case string to camel case string.",
        "code_str_generate": "function snakeToCamel(word) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert snake case string to camel case string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 92,
        "task_id": 103,
        "prompt": "Write a function to find eulerian number a(n, m).",
        "code_str": "function eulerian_num(n, m) {\n    if (m >= n || n === 0) {\n        return 0;\n    }\n    if (m === 0) {\n        return 1;\n    }\n    return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m));\n}\n\n",
        "test": "const testeulerian_num = () => {\n    console.assert(eulerian_num(3, 1) === 4);\n    console.assert(eulerian_num(4, 1) === 11);\n    console.assert(eulerian_num(5, 3) === 26);\n}\ntesteulerian_num(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function eulerian_num(n, m) {\n    if (m >= n || n === 0) {\n        return 0;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find eulerian number a(n, m).",
        "code_str_generate": "function eulerian_num(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find eulerian number a(n, m).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m >= n || n === 0) {\n        return 0;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 93,
        "task_id": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code_str": "function sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    return result;\n}\n\n\n",
        "test": "const testSortSublists = () => {\n    console.assert(JSON.stringify(sortSublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])) === JSON.stringify([[\"green\", \"orange\"], [\"black\", \"white\"], [\"black\", \"orange\", \"white\"]]));\n    console.assert(JSON.stringify(sortSublists([[\" red \", \"green\"], [\"blue \", \" black\"], [\" orange\", \"brown\"]])) === JSON.stringify([[\" red \", \"green\"], [\" black\", \"blue \"], [\" orange\", \"brown\"]]));\n    console.assert(JSON.stringify(sortSublists([[\"zilver\", \"gold\"], [\"magnesium\", \"aluminium\"], [\"steel\", \"bronze\"]])) === JSON.stringify([[\"gold\", \"zilver\"], [\"aluminium\", \"magnesium\"], [\"bronze\", \"steel\"]]));\n}\ntestSortSublists(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sortSublists(inputList) {\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code_str_generate": "function sortSublists(inputList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = inputList.map(sublist => sublist.sort((a, b) => a.localeCompare(b)));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 94,
        "task_id": 105,
        "prompt": "Write a python function to count true booleans in the given list.",
        "code_str": "function count(lst) {   \n    return lst.reduce((sum, value) => sum + value, 0);\n}\n\n",
        "test": "const testcount = () => {\n    console.assert(count([true, false, true]) === 2);\n    console.assert(count([false, false]) === 0);\n    console.assert(count([true, true, true]) === 3);\n}\ntestcount() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count(lst) {   \n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to count true booleans in the given list.",
        "code_str_generate": "function count(lst) {   \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count true booleans in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 95,
        "task_id": 106,
        "prompt": "Write a function to add the given list to the given tuples.",
        "code_str": "function add_lists(test_list, test_tup) {\n  return [...test_tup, ...test_list];\n}\n\n",
        "test": "const testadd_lists = () => {\n  console.assert(JSON.stringify(add_lists([5, 6, 7], [9, 10])) === JSON.stringify([9, 10, 5, 6, 7]));\n  console.assert(JSON.stringify(add_lists([6, 7, 8], [10, 11])) === JSON.stringify([10, 11, 6, 7, 8]));\n  console.assert(JSON.stringify(add_lists([7, 8, 9], [11, 12])) === JSON.stringify([11, 12, 7, 8, 9]));\n}\ntestadd_lists(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_lists(test_list, test_tup) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to add the given list to the given tuples.",
        "code_str_generate": "function add_lists(test_list, test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to add the given list to the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 96,
        "task_id": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.",
        "code_str": "function count_Hexadecimal(L, R) {\n    let count = 0;\n    for (let i = L; i <= R + 1; i++) {\n        if (i >= 10 && i <= 15) {\n            count += 1;\n        } else if (i > 15) {\n            let k = i;\n            while (k !== 0) {\n                if (k % 16 >= 10) {\n                    count += 1;\n                }\n                k = Math.floor(k / 16);\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testCount_Hexadecimal = () => {\n    console.assert(count_Hexadecimal(10, 15) === 6, \"Test 1 failed\");\n    console.assert(count_Hexadecimal(2, 4) === 0, \"Test 2 failed\");\n    console.assert(count_Hexadecimal(15, 16) === 1, \"Test 3 failed\");\n}\ntestCount_Hexadecimal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Hexadecimal(L, R) {\n    let count = 0;\n    for (let i = L; i <= R + 1; i++) {\n        if (i >= 10 && i <= 15) {\n            count += 1;\n        } else if (i > 15) {\n            let k = i;\n            while (k !== 0) {\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count hexadecimal numbers for a given range.",
        "code_str_generate": "function count_Hexadecimal(L, R) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count hexadecimal numbers for a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = L; i <= R + 1; i++) {\n        if (i >= 10 && i <= 15) {\n            count += 1;\n        } else if (i > 15) {\n            let k = i;\n            while (k !== 0) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 97,
        "task_id": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code_str": "function merge_sorted_list(num1, num2, num3) {\n    num1.sort((a, b) => a - b);\n    num2.sort((a, b) => a - b);\n    num3.sort((a, b) => a - b);\n    const merged = Array.prototype.concat(num1, num2, num3);\n    merged.sort((a, b) => a - b);\n    return merged;\n}\n\n",
        "test": "const testMerge_sorted_list = () => {\n    console.assert(JSON.stringify(merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])) === JSON.stringify([4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]));\n    console.assert(JSON.stringify(merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])) === JSON.stringify([1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]));\n    console.assert(JSON.stringify(merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])) === JSON.stringify([1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]));\n}\ntestMerge_sorted_list(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function merge_sorted_list(num1, num2, num3) {\n    num1.sort((a, b) => a - b);\n    num2.sort((a, b) => a - b);\n    num3.sort((a, b) => a - b);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code_str_generate": "function merge_sorted_list(num1, num2, num3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    num1.sort((a, b) => a - b);\n    num2.sort((a, b) => a - b);\n    num3.sort((a, b) => a - b);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 98,
        "task_id": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
        "code_str": "function odd_Equivalent(s, n) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n            count++;\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testodd_Equivalent = () => {\n    console.assert(odd_Equivalent(\"011001\", 6) === 3);\n    console.assert(odd_Equivalent(\"11011\", 5) === 4);\n    console.assert(odd_Equivalent(\"1010\", 4) === 2);\n}\n\ntestodd_Equivalent();",
        "is_deleted": 1,
        "code_str_deleted": "function odd_Equivalent(s, n) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the count of rotations of a binary string with odd value.",
        "code_str_generate": "function odd_Equivalent(s, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the count of rotations of a binary string with odd value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (s[i] === '1') {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 99,
        "task_id": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code_str": "function extract_missing(test_list, strt_val, stop_val) {\n    let res = [];\n    for (let sub of test_list) {\n        if (sub[0] > strt_val) {\n            res.push([strt_val, sub[0]]);\n            strt_val = sub[1];\n        }\n        if (strt_val < stop_val) {\n            res.push([strt_val, stop_val]);\n        }\n    }\n    return res;\n}",
        "test": "const testExtract_missing = () => {\n    console.assert(JSON.stringify(extract_missing([[6, 9], [15, 34], [48, 70]], 2, 100)) === JSON.stringify([[2, 6], [9, 100], [9, 15], [34, 100], [34, 48], [70, 100]]), 'Test 1 Failed');\n    console.assert(JSON.stringify(extract_missing([[7, 2], [15, 19], [38, 50]], 5, 60)) === JSON.stringify([[5, 7], [2, 60], [2, 15], [19, 60], [19, 38], [50, 60]]), 'Test 2 Failed');\n    console.assert(JSON.stringify(extract_missing([[7, 2], [15, 19], [38, 50]], 1, 52)) === JSON.stringify([[1, 7], [2, 52], [2, 15], [19, 52], [19, 38], [50, 52]]), 'Test 3 Failed');\n}\ntestExtract_missing() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_missing(test_list, strt_val, stop_val) {\n    let res = [];\n    for (let sub of test_list) {\n        if (sub[0] > strt_val) {\n            res.push([strt_val, sub[0]]);\n            strt_val = sub[1];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code_str_generate": "function extract_missing(test_list, strt_val, stop_val) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = [];\n    for (let sub of test_list) {\n        if (sub[0] > strt_val) {\n            res.push([strt_val, sub[0]]);\n            strt_val = sub[1];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 100,
        "task_id": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code_str": "function commonInNestedLists(nestedList) {\n    // Convert each sublist to a Set for efficient intersection operations\n    const sets = nestedList.map(sublist => new Set(sublist));\n    \n    // Use reduce to find the intersection of all sets\n    const intersection = sets.reduce((acc, set) => {\n        return new Set([...acc].filter(x => set.has(x)));\n    });\n    \n    // Convert the intersection set back to an array\n    return [...intersection];\n}",
        "test": "const testCommonInNestedLists = () => {\n    console.assert(JSON.stringify(commonInNestedLists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]).sort()) === JSON.stringify([18, 12].sort()), 'Test 1 failed');\n    console.assert(JSON.stringify(commonInNestedLists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]).sort()) === JSON.stringify([5, 23].sort()), 'Test 2 failed');\n    console.assert(JSON.stringify(commonInNestedLists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]).sort()) === JSON.stringify([4].sort()), 'Test 3 failed');\n}\n\ntestCommonInNestedLists();",
        "is_deleted": 1,
        "code_str_deleted": "function commonInNestedLists(nestedList) {\n    // Convert each sublist to a Set for efficient intersection operations\n    const sets = nestedList.map(sublist => new Set(sublist));\n    // Use reduce to find the intersection of all sets\n    const intersection = sets.reduce((acc, set) => {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code_str_generate": "function commonInNestedLists(nestedList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    // Convert each sublist to a Set for efficient intersection operations\n    const sets = nestedList.map(sublist => new Set(sublist));\n    // Use reduce to find the intersection of all sets\n    const intersection = sets.reduce((acc, set) => {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 101,
        "task_id": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.",
        "code_str": "function perimeter(diameter, height) {\n  return 2 * (diameter + height);\n}\n\n",
        "test": "const testPerimeter = () => {\n  console.assert(perimeter(2, 4) === 12);\n  console.assert(perimeter(1, 2) === 6);\n  console.assert(perimeter(3, 1) === 8);\n}\n\ntestPerimeter()",
        "is_deleted": 1,
        "code_str_deleted": "function perimeter(diameter, height) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the perimeter of a cylinder.",
        "code_str_generate": "function perimeter(diameter, height) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the perimeter of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 102,
        "task_id": 113,
        "prompt": "Write a function to check if a string represents an integer or not.",
        "code_str": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n        } else if (\"+-\".includes(text[0]) && text.slice(1).split('').every((char, i) => \"0123456789\".includes(text[i + 1]))) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n",
        "test": "const testCheckInteger = () => {\n    console.assert(checkInteger(\"python\") === false, \"Test 1 Failed\");\n    console.assert(checkInteger(\"1\") === true, \"Test 2 Failed\");\n    console.assert(checkInteger(\"12345\") === true, \"Test 3 Failed\");\n}\ntestCheckInteger() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function checkInteger(text) {\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to check if a string represents an integer or not.",
        "code_str_generate": "function checkInteger(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a string represents an integer or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    text = text.trim();\n    if (text.length < 1) {\n        return null;\n    } else {\n        if (text.split('').every((char, i) => \"0123456789\".includes(text[i]))) {\n            return true;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 103,
        "task_id": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code_str": "function assign_freq(test_list) {\n  const freq = test_list.reduce((acc, item) => {\n    const key = JSON.stringify(item);\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  const res = [];\n  for (let [key, value] of Object.entries(freq)) {\n    const tuple = JSON.parse(key);\n    tuple.push(value);\n    res.push(tuple);\n  }\n  return JSON.stringify(res);\n}\n\n",
        "test": "const testAssign_freq = () => {\n  console.assert(assign_freq([[6, 5, 8], [2, 7], [6, 5, 8], [6, 5, 8], [9], [2, 7]]) === '[[6,5,8,3],[2,7,2],[9,1]]');\n  console.assert(assign_freq([[4, 2, 4], [7, 1], [4, 8], [4, 2, 4], [9, 2], [7, 1]]) === '[[4,2,4,2],[7,1,2],[4,8,1],[9,2,1]]');\n  console.assert(assign_freq([[11, 13, 10], [17, 21], [4, 2, 3], [17, 21], [9, 2], [4, 2, 3]]) === '[[11,13,10,1],[17,21,2],[4,2,3,2],[9,2,1]]');\n}\ntestAssign_freq(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function assign_freq(test_list) {\n  const freq = test_list.reduce((acc, item) => {\n    const key = JSON.stringify(item);\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n  const res = [];\n  //begin to write code\n",
        "javascript_prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code_str_generate": "function assign_freq(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to assign frequency to each tuple in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const freq = test_list.reduce((acc, item) => {\n    const key = JSON.stringify(item);\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n  const res = [];\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 104,
        "task_id": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code_str": "function empty_dit(list1) {\n    return list1.every(d => Object.keys(d).length === 0);\n}\n\n",
        "test": "const testEmpty_dit = () => {\n    console.assert(empty_dit([{}, {}, {}]) === true);\n    console.assert(empty_dit([{1: 2}, {}, {}]) === false);\n    console.assert(empty_dit([]) === true);\n}\n\ntestEmpty_dit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function empty_dit(list1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code_str_generate": "function empty_dit(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether all dictionaries in a list are empty or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 105,
        "task_id": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "code_str": "function tupleToInt(nums) {\n    let result = parseInt(nums.join(''));\n    return result;\n}\n\n",
        "test": "const testTupleToInt = () => {\n    console.assert(tupleToInt([1,2,3]) === 123, \"Test case 1 failed\");\n    console.assert(tupleToInt([4,5,6]) === 456, \"Test case 2 failed\");\n    console.assert(tupleToInt([5,6,7]) === 567, \"Test case 3 failed\");\n}\ntestTupleToInt() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function tupleToInt(nums) {\n    let result = parseInt(nums.join(''));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "code_str_generate": "function tupleToInt(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert a given tuple of positive integers into an integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = parseInt(nums.join(''));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 106,
        "task_id": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "code_str": "function list_to_float(test_list) {\n    let res = [];\n    for (let tup of test_list) {\n        let temp = [];\n        for (let ele of tup) {\n            if (isNaN(ele)) {\n                temp.push(ele);\n            } else {\n                temp.push(parseFloat(ele));\n            }\n        }\n        res.push([temp[0], temp[1]]);\n    }\n    return JSON.stringify(res);\n}",
        "test": "const testListToFloat = () => {\n    console.assert(list_to_float([[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]]) === '[[3,4],[1,26.45],[7.32,8],[4,8]]');\n    console.assert(list_to_float([[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]]) === '[[4,4],[2,27],[4.12,9],[7,11]]');\n    console.assert(list_to_float([[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]]) === '[[6,78],[5,26.45],[1.33,4],[82,13]]');\n}\ntestListToFloat(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function list_to_float(test_list) {\n    let res = [];\n    for (let tup of test_list) {\n        let temp = [];\n        for (let ele of tup) {\n            if (isNaN(ele)) {\n                temp.push(ele);\n                //begin to write code\n",
        "javascript_prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "code_str_generate": "function list_to_float(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert all possible convertible elements in the list to float.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = [];\n    for (let tup of test_list) {\n        let temp = [];\n        for (let ele of tup) {\n            if (isNaN(ele)) {\n                temp.push(ele);\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 107,
        "task_id": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code_str": "function stringToList(string) {\n    let lst = string.split(\" \");\n    return lst;\n}\n\n",
        "test": "const testStringToList = () => {\n    console.assert(JSON.stringify(stringToList(\"python programming\")) === JSON.stringify(['python', 'programming']), \"Test 1 failed\");\n    console.assert(JSON.stringify(stringToList(\"lists tuples strings\")) === JSON.stringify(['lists', 'tuples', 'strings']), \"Test 2 failed\");\n    console.assert(JSON.stringify(stringToList(\"write a program\")) === JSON.stringify(['write', 'a', 'program']), \"Test 3 failed\");\n}\n\ntestStringToList() // Invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function stringToList(string) {\n    let lst = string.split(\" \");\n    //begin to write code\n",
        "javascript_prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code_str_generate": "function stringToList(string) {\n\n    /*\n    progame language:javascript\n    description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = string.split(\" \");\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 108,
        "task_id": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "code_str": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n        XOR = XOR ^ arr[i];\n    }\n    return XOR;\n}\n\n",
        "test": "const testSearch = () => {\n    console.assert(search([1, 1, 2, 2, 3], 5) === 3, \"Test case 1 failed\");\n    console.assert(search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11) === 8, \"Test case 2 failed\");\n    console.assert(search([1, 2, 2, 3, 3, 4, 4], 7) === 1, \"Test case 3 failed\");\n}\ntestSearch() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function search(arr, n) {\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the element that appears only once in a sorted array.",
        "code_str_generate": "function search(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the element that appears only once in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let XOR = 0;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 109,
        "task_id": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code_str": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    return result_max;\n}\n\n",
        "test": "const testmax_product_tuple = () => {\n    console.assert(max_product_tuple([[2, 7], [2, 6], [1, 8], [4, 9]]) === 36, \"Test 1 failed\");\n    console.assert(max_product_tuple([[10, 20], [15, 2], [5, 10]]) === 200, \"Test 2 failed\");\n    console.assert(max_product_tuple([[11, 44], [10, 15], [20, 5], [12, 9]]) === 484, \"Test 3 failed\");\n}\n\ntestmax_product_tuple(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_product_tuple(list1) {\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code_str_generate": "function max_product_tuple(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result_max = Math.max(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 110,
        "task_id": 121,
        "prompt": "Write a function to find the triplet with sum of the given array",
        "code_str": "function check_triplet(A, n, sum, count) {\n    if (count === 3 && sum === 0) {\n        return true;\n    }\n    if (count === 3 || n === 0 || sum < 0) {\n        return false;\n    }\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) || check_triplet(A, n - 1, sum, count);\n}\n\n",
        "test": "const testCheck_triplet = () => {\n    console.assert(check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) === true, \"Test 1 Failed\");\n    console.assert(check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) === false, \"Test 2 Failed\");\n    console.assert(check_triplet([10, 4, 2, 3, 5], 5, 15, 0) === true, \"Test 3 Failed\");\n}\ntestCheck_triplet(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_triplet(A, n, sum, count) {\n    if (count === 3 && sum === 0) {\n        return true;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the triplet with sum of the given array",
        "code_str_generate": "function check_triplet(A, n, sum, count) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the triplet with sum of the given array\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (count === 3 && sum === 0) {\n        return true;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 111,
        "task_id": 122,
        "prompt": "Write a function to find n\u2019th smart number.",
        "code_str": "const MAX = 3000;\n\nfunction smartNumber(n) {\n    const primes = new Array(MAX).fill(0);\n    const result = [];\n    for (let i = 2; i < MAX; i++) {\n        if (primes[i] === 0) {\n            primes[i] = 1;\n            let j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                if (primes[j] + 3 === 0) {\n                    result.push(j);\n                }\n                j += i;\n            }\n        }\n    }\n    result.sort((a, b) => a - b);\n    return result[n - 1];\n}\n\n",
        "test": "const testSmartNumber = () => {\n    console.assert(smartNumber(1) === 30, 'Test 1 Failed');\n    console.assert(smartNumber(50) === 273, 'Test 50 Failed');\n    console.assert(smartNumber(1000) === 2664, 'Test 1000 Failed');\n}\n\ntestSmartNumber(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const MAX = 3000;\nfunction smartNumber(n) {\n    const primes = new Array(MAX).fill(0);\n    const result = [];\n    for (let i = 2; i < MAX; i++) {\n        if (primes[i] === 0) {\n            primes[i] = 1;\n            let j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find n\u2019th smart number.",
        "code_str_generate": "const MAX = 3000;\nfunction smartNumber(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find n\u2019th smart number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const primes = new Array(MAX).fill(0);\n    const result = [];\n    for (let i = 2; i < MAX; i++) {\n        if (primes[i] === 0) {\n            primes[i] = 1;\n            let j = i * 2;\n            while (j < MAX) {\n                primes[j] -= 1;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 112,
        "task_id": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code_str": "function getSumOfDivisors(num) {\n    let sum = 1; // 1 is always a divisor\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            sum += i;\n            if (i !== num / i) {\n                sum += num / i;\n            }\n        }\n    }\n    return sum;\n}\n\nfunction amicable_numbers_sum(limit) {\n    if (typeof limit !== 'number' || !Number.isInteger(limit)) {\n        return \"Input is not an integer!\";\n    }\n    if (limit < 1) {\n        return \"Input must be bigger than 0!\";\n    }\n    let amicables = new Set();\n    for (let num = 2; num <= limit; num++) {\n        if (amicables.has(num)) {\n            continue;\n        }\n        let sum_fact = getSumOfDivisors(num);\n        if (sum_fact > limit) {\n            continue;\n        }\n        let sum_fact2 = getSumOfDivisors(sum_fact);\n        if (num === sum_fact2 && num !== sum_fact) {\n            amicables.add(num);\n            amicables.add(sum_fact);\n        }\n    }\n    return Array.from(amicables).reduce((a, b) => a + b, 0);\n}",
        "test": "const testAmicableNumbersSum = () => {\n    console.assert(amicable_numbers_sum(999) === 504);\n    console.assert(amicable_numbers_sum(9999) === 31626);\n    console.assert(amicable_numbers_sum(99) === 0);\n}\ntestAmicableNumbersSum();",
        "is_deleted": 1,
        "code_str_deleted": "function getSumOfDivisors(num) {\n    let sum = 1; // 1 is always a divisor\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            sum += i;\n            if (i !== num / i) {\n                sum += num / i;\n            }\n        }\n    }\n    return sum;\n}\nfunction amicable_numbers_sum(limit) {\n    if (typeof limit !== 'number' || !Number.isInteger(limit)) {\n        return \"Input is not an integer!\";\n    }\n    if (limit < 1) {\n        return \"Input must be bigger than 0!\";\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code_str_generate": "function getSumOfDivisors(num) {\n    let sum = 1; // 1 is always a divisor\n    for (let i = 2; i <= Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            sum += i;\n            if (i !== num / i) {\n                sum += num / i;\n            }\n        }\n    }\n    return sum;\n}\nfunction amicable_numbers_sum(limit) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sum all amicable numbers from 1 to a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (typeof limit !== 'number' || !Number.isInteger(limit)) {\n        return \"Input is not an integer!\";\n    }\n    if (limit < 1) {\n        return \"Input must be bigger than 0!\";\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 113,
        "task_id": 124,
        "prompt": "Write a function to get the angle of a complex number.",
        "code_str": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    return angle;\n}",
        "test": "const testAngle_complex = () => {\n    console.assert(angle_complex(0, 1) === 1.5707963267948966, \"Test 1 Failed\");\n    console.assert(angle_complex(2, 1) === 0.4636476090008061, \"Test 2 Failed\");\n    console.assert(angle_complex(0, 2) === 1.5707963267948966, \"Test 3 Failed\");\n}\n\ntestAngle_complex() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function angle_complex(a, b) {\n    const angle = Math.atan2(b, a);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to get the angle of a complex number.",
        "code_str_generate": "function angle_complex(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the angle of a complex number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const angle = Math.atan2(b, a);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 114,
        "task_id": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code_str": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n            current_sum = 0;\n        }\n        max_sum = Math.max(current_sum, max_sum);\n    }\n    return max_sum ? max_sum : 0;\n}\n\n",
        "test": "const testfind_length = () => {\n    console.assert(find_length(\"11000010001\", 11) === 6, 'Test 1 failed');\n    console.assert(find_length(\"10111\", 5) === 1, 'Test 2 failed');\n    console.assert(find_length(\"11011101100101\", 14) === 2, 'Test 3 failed');\n}\n\ntestfind_length(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_length(string, n) {\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code_str_generate": "function find_length(string, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let current_sum = 0;\n    let max_sum = 0;\n    for (let i = 0; i < n; i++) {\n        current_sum += (string[i] === '0' ? 1 : -1);\n        if (current_sum < 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 115,
        "task_id": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "code_str": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n",
        "test": "const testSum = () => {\n    console.assert(sum(10, 15) === 6, 'Test Case 1 Failed');\n    console.assert(sum(100, 150) === 93, 'Test Case 2 Failed');\n    console.assert(sum(4, 6) === 3, 'Test Case 3 Failed');\n}\ntestSum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum(a, b) {\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of common divisors of two given numbers.",
        "code_str_generate": "function sum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of common divisors of two given numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i < Math.min(a, b); i++) {\n        if (a % i === 0 && b % i === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 116,
        "task_id": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.",
        "code_str": "function multiply_int(x, y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n    } else if (y === 1) {\n        return x;\n    } else {\n        return x + multiply_int(x, y - 1);\n    }\n}\n\n",
        "test": "const testmultiply_int = () => {\n    console.assert(multiply_int(10, 20) === 200, \"Test 1 Failed\");\n    console.assert(multiply_int(5, 10) === 50, \"Test 2 Failed\");\n    console.assert(multiply_int(4, 8) === 32, \"Test 3 Failed\");\n}\ntestmultiply_int(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function multiply_int(x, y) {\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to multiply two integers without using the * operator in javascript.",
        "code_str_generate": "function multiply_int(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a function to multiply two integers without using the * operator in javascript.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (y < 0) {\n        return -multiply_int(x, -y);\n    } else if (y === 0) {\n        return 0;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 117,
        "task_id": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code_str": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n            wordLen.push(x);\n        }\n    }\n    return wordLen;\n}\n\n",
        "test": "const testLongWords = () => {\n    console.assert(JSON.stringify(longWords(3, \"python is a programming language\")) === JSON.stringify(['python', 'programming', 'language']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(longWords(2, \"writing a program\")) === JSON.stringify(['writing', 'program']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(longWords(5, \"sorting list\")) === JSON.stringify(['sorting']), \"Test 3 Failed\");\n}\ntestLongWords() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function longWords(n, str) {\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code_str_generate": "function longWords(n, str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to shortlist words that are longer than n from a given list of words.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let wordLen = [];\n    let txt = str.split(\" \");\n    for (let x of txt) {\n        if (x.length > n) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 118,
        "task_id": 129,
        "prompt": "Write a function to calculate magic square.",
        "code_str": "function magic_square_test(my_matrix) {\n    const iSize = my_matrix[0].length;\n    let sum_list = [];\n    my_matrix.forEach(lines => {\n        sum_list.push(lines.reduce((a, b) => a + b, 0));\n    });\n    for (let col = 0; col < iSize; col++) {\n        let colSum = 0;\n        my_matrix.forEach(row => {\n            colSum += row[col];\n        });\n        sum_list.push(colSum);\n    }\n    let result1 = 0;\n    for (let i = 0; i < iSize; i++) {\n        result1 += my_matrix[i][i];\n    }\n    sum_list.push(result1);\n    let result2 = 0;\n    for (let i = iSize - 1; i >= 0; i--) {\n        result2 += my_matrix[i][i];\n    }\n    sum_list.push(result2);\n    if (new Set(sum_list).size > 1) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test": "const testMagic_square_test = () => {\n    console.assert(magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) === true);\n    console.assert(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) === true);\n    console.assert(magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) === false);\n}\ntestMagic_square_test(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function magic_square_test(my_matrix) {\n    const iSize = my_matrix[0].length;\n    let sum_list = [];\n    my_matrix.forEach(lines => {\n        sum_list.push(lines.reduce((a, b) => a + b, 0));\n    });\n    for (let col = 0; col < iSize; col++) {\n        let colSum = 0;\n        my_matrix.forEach(row => {\n            colSum += row[col];\n        });\n        sum_list.push(colSum);\n    }\n    let result1 = 0;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate magic square.",
        "code_str_generate": "function magic_square_test(my_matrix) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate magic square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const iSize = my_matrix[0].length;\n    let sum_list = [];\n    my_matrix.forEach(lines => {\n        sum_list.push(lines.reduce((a, b) => a + b, 0));\n    });\n    for (let col = 0; col < iSize; col++) {\n        let colSum = 0;\n        my_matrix.forEach(row => {\n            colSum += row[col];\n        });\n        sum_list.push(colSum);\n    }\n    let result1 = 0;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 119,
        "task_id": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "code_str": "function max_occurrences(nums) {\n    const dict = {};\n    for (let i of nums) {\n        if (dict[i]) {\n            dict[i] += 1;\n        } else {\n            dict[i] = 1;\n        }\n    }\n    let maxCount = 0;\n    let maxValue = null;\n    for (let key in dict) {\n        if (dict[key] > maxCount) {\n            maxCount = dict[key];\n            maxValue = parseInt(key);\n        }\n        else if(maxCount == dict[key] && maxValue<key)\n        {\n            maxValue = parseInt(key);\n        }\n    }\n    return [maxValue, maxCount];\n}",
        "test": "const testMaxOccurrences = () => {\n    console.assert(JSON.stringify(max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])) === JSON.stringify([2, 5]));\n    console.assert(JSON.stringify(max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])) === JSON.stringify([16, 2]));\n    console.assert(JSON.stringify(max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])) === JSON.stringify([20, 3]));\n}\ntestMaxOccurrences() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_occurrences(nums) {\n    const dict = {};\n    for (let i of nums) {\n        if (dict[i]) {\n            dict[i] += 1;\n        } else {\n            dict[i] = 1;\n        }\n    }\n    let maxCount = 0;\n    let maxValue = null;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the item with maximum frequency in a given list.",
        "code_str_generate": "function max_occurrences(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the item with maximum frequency in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dict = {};\n    for (let i of nums) {\n        if (dict[i]) {\n            dict[i] += 1;\n        } else {\n            dict[i] = 1;\n        }\n    }\n    let maxCount = 0;\n    let maxValue = null;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 120,
        "task_id": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.",
        "code_str": "function reverse_vowels(str1) {\n    let vowels = \"\";\n    for (const char of str1) {\n        if (\"aeiouAEIOU\".includes(char)) {\n            vowels += char;\n        }\n    }\n    let result_string = \"\";\n    for (const char of str1) {\n        if (\"aeiouAEIOU\".includes(char)) {\n            result_string += vowels[vowels.length - 1];\n            vowels = vowels.slice(0, -1);\n        } else {\n            result_string += char;\n        }\n    }\n    return result_string;\n}\n\n",
        "test": "const testReverse_vowels = () => {\n    console.assert(reverse_vowels(\"Python\") === \"Python\", \"Test case 1 failed\");\n    console.assert(reverse_vowels(\"USA\") === \"ASU\", \"Test case 2 failed\");\n    console.assert(reverse_vowels(\"ab\") === \"ab\", \"Test case 3 failed\");\n}\ntestReverse_vowels(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function reverse_vowels(str1) {\n    let vowels = \"\";\n    for (const char of str1) {\n        if (\"aeiouAEIOU\".includes(char)) {\n            vowels += char;\n        }\n    }\n    let result_string = \"\";\n    for (const char of str1) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to reverse only the vowels of a given string.",
        "code_str_generate": "function reverse_vowels(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to reverse only the vowels of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let vowels = \"\";\n    for (const char of str1) {\n        if (\"aeiouAEIOU\".includes(char)) {\n            vowels += char;\n        }\n    }\n    let result_string = \"\";\n    for (const char of str1) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 121,
        "task_id": 132,
        "prompt": "Write a function to convert tuple to a string.",
        "code_str": "function tup_string(tup1) {\n    return tup1.join('');\n}\n\n",
        "test": "const testtup_string = () => {\n    console.assert(tup_string(['e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's']) === \"exercises\");\n    console.assert(tup_string(['p','y','t','h','o','n']) === \"python\");\n    console.assert(tup_string(['p','r','o','g','r','a','m']) === \"program\");\n}\n\ntesttup_string() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function tup_string(tup1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert tuple to a string.",
        "code_str_generate": "function tup_string(tup1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert tuple to a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 122,
        "task_id": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code_str": "function sum_negativenum(nums) {\n  const negativeNums = nums.filter(num => num < 0);\n  return negativeNums.reduce((acc, cur) => acc + cur, 0);\n}\n\n",
        "test": "const testSum_negativenum = () => {\n  console.assert(sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) === -32);\n  console.assert(sum_negativenum([10, 15, -14, 13, -18, 12, -20]) === -52);\n  console.assert(sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) === -894);\n}\n\ntestSum_negativenum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_negativenum(nums) {\n  const negativeNums = nums.filter(num => num < 0);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code_str_generate": "function sum_negativenum(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const negativeNums = nums.filter(num => num < 0);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 123,
        "task_id": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code_str": "function check_last(arr, n, p) {\n    let _sum = 0;\n    for (let i = 0; i < n; i++) {\n        _sum += arr[i];\n    }\n    if (p === 1) {\n        if (_sum % 2 === 0) {\n            return \"ODD\";\n        } else {\n            return \"EVEN\";\n        }\n    }\n    return \"EVEN\";\n}\n\n",
        "test": "const testcheck_last = () => {\n    console.assert(check_last([5, 7, 10], 3, 1) === \"ODD\");\n    console.assert(check_last([2, 3], 2, 3) === \"EVEN\");\n    console.assert(check_last([1, 2, 3], 3, 1) === \"ODD\");\n}\n\ntestcheck_last(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_last(arr, n, p) {\n    let _sum = 0;\n    for (let i = 0; i < n; i++) {\n        _sum += arr[i];\n    }\n    if (p === 1) {\n        if (_sum % 2 === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code_str_generate": "function check_last(arr, n, p) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the last element of given array is even or odd after performing an operation p times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let _sum = 0;\n    for (let i = 0; i < n; i++) {\n        _sum += arr[i];\n    }\n    if (p === 1) {\n        if (_sum % 2 === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 124,
        "task_id": 135,
        "prompt": "Write a function to find the nth hexagonal number.",
        "code_str": "function hexagonal_num(n) {\n    return n * (2 * n - 1);\n}\n\n",
        "test": "const testHexagonal_num = () => {\n    console.assert(hexagonal_num(10) === 190, \"Test 1 failed\");\n    console.assert(hexagonal_num(5) === 45, \"Test 2 failed\");\n    console.assert(hexagonal_num(7) === 91, \"Test 3 failed\");\n}\n\ntestHexagonal_num() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function hexagonal_num(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the nth hexagonal number.",
        "code_str_generate": "function hexagonal_num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nth hexagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 125,
        "task_id": 136,
        "prompt": "Write a function to calculate electricity bill.",
        "code_str": "function cal_electbill(units) {\n    let amount;\n    let surcharge;\n    if (units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n    } else if (units <= 200) {\n        amount = 130 + 162.50 + ((units - 100) * 5.26);\n        surcharge = 45;\n    } else {\n        amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);\n        surcharge = 75;\n    }\n    return amount + surcharge;\n}\n\n",
        "test": "const testCal_electbill = () => {\n    console.assert(cal_electbill(75) === 246.25, `Expected 246.25, got ${cal_electbill(75)}`);\n    console.assert(cal_electbill(265) === 1442.75, `Expected 1442.75, got ${cal_electbill(265)}`);\n    console.assert(cal_electbill(100) === 327.5, `Expected 327.5, got ${cal_electbill(100)}`);\n}\n\ntestCal_electbill(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function cal_electbill(units) {\n    let amount;\n    let surcharge;\n    if (units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to calculate electricity bill.",
        "code_str_generate": "function cal_electbill(units) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate electricity bill.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let amount;\n    let surcharge;\n    if (units < 50) {\n        amount = units * 2.60;\n        surcharge = 25;\n    } else if (units <= 100) {\n        amount = 130 + ((units - 50) * 3.25);\n        surcharge = 35;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 126,
        "task_id": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "code_str": "function zero_count(nums) {\n    let n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x === 0) {\n            n1 += 1;\n        }\n    }\n    return parseFloat((n1 / n).toFixed(2));\n}\n\n",
        "test": "const testZero_count = () => {\n    console.assert(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.15, \"Test 1 Failed\");\n    console.assert(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.00, \"Test 2 Failed\");\n    console.assert(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.00, \"Test 3 Failed\");\n}\ntestZero_count() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function zero_count(nums) {\n    let n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "code_str_generate": "function zero_count(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ration of zeroes in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 127,
        "task_id": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code_str": "function is_Sum_Of_Powers_Of_Two(n) {\n    if (n % 2 === 1) {\n        return false;\n    } else {\n        return true;\n    }\n}\n\n",
        "test": "const testis_Sum_Of_Powers_Of_Two = () => {\n    console.assert(is_Sum_Of_Powers_Of_Two(10) === true);\n    console.assert(is_Sum_Of_Powers_Of_Two(7) === false);\n    console.assert(is_Sum_Of_Powers_Of_Two(14) === true);\n}\ntestis_Sum_Of_Powers_Of_Two() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_Sum_Of_Powers_Of_Two(n) {\n    if (n % 2 === 1) {\n        return false;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code_str_generate": "function is_Sum_Of_Powers_Of_Two(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 === 1) {\n        return false;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 128,
        "task_id": 139,
        "prompt": "Write a function to find the circumference of a circle.",
        "code_str": "function circle_circumference(r) {\n    let perimeter = 2 * 3.1415 * r;\n    return perimeter;\n}\n\n",
        "test": "const testCircle_circumference = () => {\n    console.assert(circle_circumference(10) === 62.830000000000005, \"Test failed for radius 10\");\n    console.assert(circle_circumference(5) === 31.415000000000003, \"Test failed for radius 5\");\n    console.assert(circle_circumference(4) === 25.132, \"Test failed for radius 4\");\n}\n\ntestCircle_circumference() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function circle_circumference(r) {\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the circumference of a circle.",
        "code_str_generate": "function circle_circumference(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the circumference of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let perimeter = 2 * 3.1415 * r;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 129,
        "task_id": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "code_str": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n        temp.add(ele);\n        res.push(ele);\n      }\n    }\n  }\n  return res;\n}\n\n",
        "test": "const testExtract_singly = () => {\n  console.assert(JSON.stringify(extract_singly([[3, 4, 5], [4, 5, 7], [1, 4]])) === JSON.stringify([3, 4, 5, 7, 1]), 'Test 1 failed');\n  console.assert(JSON.stringify(extract_singly([[1, 2, 3], [4, 2, 3], [7, 8]])) === JSON.stringify([1, 2, 3, 4, 7, 8]), 'Test 2 failed');\n  console.assert(JSON.stringify(extract_singly([[7, 8, 9], [10, 11, 12], [10, 11]])) === JSON.stringify([7, 8, 9, 10, 11, 12]), 'Test 3 failed');\n}\ntestExtract_singly(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_singly(test_list) {\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n      //begin to write code\n",
        "javascript_prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "code_str_generate": "function extract_singly(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract elements that occur singly in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = [];\n  const temp = new Set();\n  for (const inner of test_list) {\n    for (const ele of inner) {\n      if (!temp.has(ele)) {\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 130,
        "task_id": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.",
        "code_str": "function pancakeSort(nums) {\n    let arrLen = nums.length;\n    while (arrLen > 1) {\n        let mi = nums.indexOf(Math.max(...nums.slice(0, arrLen)));\n        nums = nums.slice(0, mi + 1).reverse().concat(nums.slice(mi + 1));\n        nums = nums.slice(0, arrLen).reverse().concat(nums.slice(arrLen));\n        arrLen -= 1;\n    }\n    return nums;\n}\n\n",
        "test": "const testPancakeSort = () => {\n    console.assert(JSON.stringify(pancakeSort([15, 79, 25, 38, 69])) === JSON.stringify([15, 25, 38, 69, 79]), \"Test 1 failed\");\n    console.assert(JSON.stringify(pancakeSort([98, 12, 54, 36, 85])) === JSON.stringify([12, 36, 54, 85, 98]), \"Test 2 failed\");\n    console.assert(JSON.stringify(pancakeSort([41, 42, 32, 12, 23])) === JSON.stringify([12, 23, 32, 41, 42]), \"Test 3 failed\");\n}\ntestPancakeSort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function pancakeSort(nums) {\n    let arrLen = nums.length;\n    while (arrLen > 1) {\n        let mi = nums.indexOf(Math.max(...nums.slice(0, arrLen)));\n        nums = nums.slice(0, mi + 1).reverse().concat(nums.slice(mi + 1));\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sort a list of elements using pancake sort.",
        "code_str_generate": "function pancakeSort(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of elements using pancake sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let arrLen = nums.length;\n    while (arrLen > 1) {\n        let mi = nums.indexOf(Math.max(...nums.slice(0, arrLen)));\n        nums = nums.slice(0, mi + 1).reverse().concat(nums.slice(mi + 1));\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 131,
        "task_id": 142,
        "prompt": "Write a function to count the same pair in three given lists.",
        "code_str": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n            result++;\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testcount_samepair = () => {\n    console.assert(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) === 3, \"Test 1 Failed\");\n    console.assert(count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) === 4, \"Test 2 Failed\");\n    console.assert(count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) === 5, \"Test 3 Failed\");\n}\ntestcount_samepair() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_samepair(list1, list2, list3) {\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to count the same pair in three given lists.",
        "code_str_generate": "function count_samepair(list1, list2, list3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the same pair in three given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i] === list2[i] && list2[i] === list3[i]) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 132,
        "task_id": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "code_str": "function isNestedArray(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i])) {\n        return true;\n      }\n    }\n    return false;\n}\n\n\nfunction findLists(input) {\n    let ret = 0;\n    if (!isNestedArray(input)) {\n        ret = 1;\n    } else {\n        ret = input.length;\n    }\n    return ret;\n}",
        "test": "const testfindLists = () => {\n    console.assert(findLists([[1, 2, 3, 4], [5, 6, 7, 8]]) === 2);\n    console.assert(findLists([[1, 2], [3, 4], [5, 6]]) === 3);\n    console.assert(findLists([[9, 8, 7, 6, 5, 4, 3, 2, 1]]) === 1);\n}\n\ntestfindLists();",
        "is_deleted": 1,
        "code_str_deleted": "function isNestedArray(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i])) {\n        return true;\n      }\n    }\n    return false;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find number of lists present in the given tuple.",
        "code_str_generate": "function isNestedArray(arr) {\n    if (!Array.isArray(arr)) {\n      return false;\n    }\n    for (let i = 0; i < arr.length; i++) {\n      if (Array.isArray(arr[i])) {\n        return true;\n      }\n    }\n    return false;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 133,
        "task_id": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "code_str": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n        sum += i * arr[i] - (n - 1 - i) * arr[i];\n    }\n    return sum;\n}\n\n",
        "test": "const testSum_Pairs = () => {\n    console.assert(sum_Pairs([1, 8, 9, 15, 16], 5) === 74, \"Test case 1 failed\");\n    console.assert(sum_Pairs([1, 2, 3, 4], 4) === 10, \"Test case 2 failed\");\n    console.assert(sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9) === 188, \"Test case 3 failed\");\n}\n\ntestSum_Pairs(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_Pairs(arr, n) {\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of absolute differences in all pairs of the given array.",
        "code_str_generate": "function sum_Pairs(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of absolute differences in all pairs of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 134,
        "task_id": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "code_str": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n        minEle = Math.min(minEle, arr[i]);\n        maxEle = Math.max(maxEle, arr[i]);\n    } \n    return (maxEle - minEle);\n}\n\n",
        "test": "const testMax_Abs_Diff = () => {\n    console.assert(max_Abs_Diff([2,1,5,3], 4) === 4, \"Test 1 failed\");\n    console.assert(max_Abs_Diff([9,3,2,5,1], 5) === 8, \"Test 2 failed\");\n    console.assert(max_Abs_Diff([3,2,1], 3) === 2, \"Test 3 failed\");\n}\n\ntestMax_Abs_Diff(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_Abs_Diff(arr, n) { \n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum difference between any two elements in a given array.",
        "code_str_generate": "function max_Abs_Diff(arr, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum difference between any two elements in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let minEle = arr[0];\n    let maxEle = arr[0];\n    for (let i = 1; i < n; i++) { \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 135,
        "task_id": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.",
        "code_str": "function ascii_value_string(str1) {\n    for (let i = 0; i < str1.length; i++) {\n        return str1.charCodeAt(i);\n    }\n}\n\n",
        "test": "const testascii_value_string = () => {\n    console.assert(ascii_value_string(\"python\") === 112, \"Test case 1 failed\");\n    console.assert(ascii_value_string(\"Program\") === 80, \"Test case 2 failed\");\n    console.assert(ascii_value_string(\"Language\") === 76, \"Test case 3 failed\");\n}\n\ntestascii_value_string() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function ascii_value_string(str1) {\n    for (let i = 0; i < str1.length; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the ascii value of total characters in a string.",
        "code_str_generate": "function ascii_value_string(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ascii value of total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < str1.length; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 136,
        "task_id": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "code_str": "function max_path_sum(tri, m, n) {\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = 0; j <= i; j++) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n                tri[i][j] += tri[i + 1][j + 1];\n            }\n        }\n    }\n    return tri[0][0];\n}\n\n",
        "test": "const testMax_path_sum = () => {\n    console.assert(max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) === 14, \"Test 1 Failed\");\n    console.assert(max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) === 24, \"Test 2 Failed\");\n    console.assert(max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) === 53, \"Test 3 Failed\");\n}\n\ntestMax_path_sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_path_sum(tri, m, n) {\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = 0; j <= i; j++) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "code_str_generate": "function max_path_sum(tri, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum total path sum in the given triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = m - 1; i >= 0; i--) {\n        for (let j = 0; j <= i; j++) {\n            if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                tri[i][j] += tri[i + 1][j];\n            } else {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 137,
        "task_id": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code_str": "function sum_digits_single(x) {\n    let ans = 0;\n    while (x) {\n        ans += x % 10;\n        x = Math.floor(x / 10);\n    }\n    return ans;\n}\n\nfunction closest(x) {\n    let ans = 0;\n    while (ans * 10 + 9 <= x) {\n        ans = ans * 10 + 9;\n    }\n    return ans;\n}\n\nfunction sum_digits_twoparts(N) {\n    const A = closest(N);\n    return sum_digits_single(A) + sum_digits_single(N - A);\n}\n\n",
        "test": "const testSum_digits_twoparts = () => {\n    console.assert(sum_digits_twoparts(35) === 17, \"Test case 1 failed\");\n    console.assert(sum_digits_twoparts(7) === 7, \"Test case 2 failed\");\n    console.assert(sum_digits_twoparts(100) === 19, \"Test case 3 failed\");\n}\n\ntestSum_digits_twoparts(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_digits_single(x) {\n    let ans = 0;\n    while (x) {\n        ans += x % 10;\n        x = Math.floor(x / 10);\n    }\n    return ans;\n}\nfunction closest(x) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code_str_generate": "function sum_digits_single(x) {\n    let ans = 0;\n    while (x) {\n        ans += x % 10;\n        x = Math.floor(x / 10);\n    }\n    return ans;\n}\nfunction closest(x) {\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 138,
        "task_id": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code_str": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n    }\n    let result = 1;\n    for (let i = 0; i < n; i++) {\n        if (result < dp[i]) {\n            result = dp[i];\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testLongest_subseq_with_diff_one = () => {\n    console.assert(longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) === 6, \"Test 1 Failed\");\n    console.assert(longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) === 3, \"Test 2 Failed\");\n    console.assert(longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) === 7, \"Test 3 Failed\");\n}\n\ntestLongest_subseq_with_diff_one(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function longest_subseq_with_diff_one(arr, n) {\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code_str_generate": "function longest_subseq_with_diff_one(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n).fill(1);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] === arr[j] + 1 || arr[i] === arr[j] - 1) {\n                dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n        }\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 139,
        "task_id": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "code_str": "function does_Contain_B(a, b, c) {\n    if (a === b) {\n        return true;\n    }\n    if ((b - a) * c > 0 && (b - a) % c === 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test": "const testdoes_Contain_B = () => {\n    console.assert(does_Contain_B(1, 7, 3) === true);\n    console.assert(does_Contain_B(1, -3, 5) === false);\n    console.assert(does_Contain_B(3, 2, 5) === false);\n}\ntestdoes_Contain_B(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function does_Contain_B(a, b, c) {\n    if (a === b) {\n        return true;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find whether the given number is present in the infinite sequence or not.",
        "code_str_generate": "function does_Contain_B(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find whether the given number is present in the infinite sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a === b) {\n        return true;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 140,
        "task_id": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.",
        "code_str": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n    }\n    return p;\n}\n\nfunction is_coprime(x, y) {\n    return gcd(x, y) === 1;\n}\n\n",
        "test": "const testis_coprime = () => {\n    console.assert(is_coprime(17, 13) === true, \"Test 1 failed\");\n    console.assert(is_coprime(15, 21) === false, \"Test 2 failed\");\n    console.assert(is_coprime(25, 45) === false, \"Test 3 failed\");\n}\ntestis_coprime() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given number is co-prime or not.",
        "code_str_generate": "//function difinition\nfunction gcd(p, q) {\n    while (q !== 0) {\n        let temp = q;\n        q = p % q;\n        p = temp;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 141,
        "task_id": 152,
        "prompt": "Write a function to sort the given array by using merge sort.",
        "code_str": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n        c = c.concat(a);\n    }\n    return c;\n}\n\nfunction merge_sort(x) {\n    if (x.length === 0 || x.length === 1) {\n        return x;\n    } else {\n        const middle = Math.floor(x.length / 2);\n        const a = merge_sort(x.slice(0, middle));\n        const b = merge_sort(x.slice(middle));\n        return merge(a, b);\n    }\n}\n\n",
        "test": "const testMerge_sort = () => {\n    console.assert(merge_sort([3, 4, 2, 6, 5, 7, 1, 9]));\n    console.assert(merge_sort([7, 25, 45, 78, 11, 33, 19]));\n    console.assert(merge_sort([3, 1, 4, 9, 8]));\n}\ntestMerge_sort();",
        "is_deleted": 1,
        "code_str_deleted": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to sort the given array by using merge sort.",
        "code_str_generate": "function merge(a, b) {\n    let c = [];\n    while (a.length !== 0 && b.length !== 0) {\n        if (a[0] < b[0]) {\n            c.push(a[0]);\n            a.shift();\n        } else {\n            c.push(b[0]);\n            b.shift();\n        }\n    }\n    if (a.length === 0) {\n        c = c.concat(b);\n    } else {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 142,
        "task_id": 153,
        "prompt": "Write a function to find the vertex of a parabola.",
        "code_str": "function arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n      if (Array.isArray(arr1[i]) && Array.isArray(arr2[i])) {\n        if (!arraysEqual(arr1[i], arr2[i])) {\n          return false;\n        }\n      } else {\n        if (arr1[i] !== arr2[i]) {\n          return false;\n        }\n      }\n    }\n    return true;\n}\n\nfunction parabola_vertex(a, b, c) {\n    const vertex = [(-b / (2 * a)).toFixed(8), (((4 * a * c) - (b * b)) / (4 * a)).toFixed(8)];\n    return vertex;\n}",
        "test": "const testParabola_vertex = () => {\n    console.assert(arraysEqual(parabola_vertex(5, 3, 2), [(-0.3).toFixed(8), (1.55).toFixed(8)]), \"Test 1 Failed\");\n    console.assert(arraysEqual(parabola_vertex(9, 8, 4), [(-0.44444444).toFixed(8), (2.22222222).toFixed(8)]), \"Test 2 Failed\");\n    console.assert(arraysEqual(parabola_vertex(2, 4, 6), [(-1.0).toFixed(8), (4.0).toFixed(8)]), \"Test 3 Failed\");\n}\n\ntestParabola_vertex(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n      if (Array.isArray(arr1[i]) && Array.isArray(arr2[i])) {\n        if (!arraysEqual(arr1[i], arr2[i])) {\n          return false;\n        }\n      } else {\n      //begin to write code\n",
        "javascript_prompt": "Write a function to find the vertex of a parabola.",
        "code_str_generate": "function arraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n      return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n      if (Array.isArray(arr1[i]) && Array.isArray(arr2[i])) {\n        if (!arraysEqual(arr1[i], arr2[i])) {\n          return false;\n        }\n      } else {\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 143,
        "task_id": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "code_str": "//function definition\nfunction specified_element(nums, N) {\n    return nums.map(row => row[N]);\n}\n\n",
        "test": "const testSpecified_element = () => {\n    console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)) === JSON.stringify([1, 4, 7]), 'Test 1 failed');\n    console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)) === JSON.stringify([3, 6, 9]), 'Test 2 failed');\n    console.assert(JSON.stringify(specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)) === JSON.stringify([2, 2, 5]), 'Test 3 failed');\n}\n\ntestSpecified_element(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction specified_element(nums, N) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "code_str_generate": "//function definition\nfunction specified_element(nums, N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract every specified element from a given two dimensional list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 144,
        "task_id": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.",
        "code_str": "function evenBitToggleNumber(n) {\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 1) {\n            res = res | (1 << count);\n        }\n        count += 1;\n        temp >>= 1;\n    }\n    return n ^ res;\n}\n\n",
        "test": "const testEvenBitToggleNumber = () => {\n    console.assert(evenBitToggleNumber(10) === 0, \"Test case 1 failed\");\n    console.assert(evenBitToggleNumber(20) === 30, \"Test case 2 failed\");\n    console.assert(evenBitToggleNumber(30) === 20, \"Test case 3 failed\");\n}\n\ntestEvenBitToggleNumber(); // Invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function evenBitToggleNumber(n) {\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 1) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to toggle all even bits of a given number.",
        "code_str_generate": "function evenBitToggleNumber(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to toggle all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 1) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 145,
        "task_id": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code_str": "//function definition\nfunction tupleIntStr(tupleStr) {\n    const result = tupleStr.map(x => [parseInt(x[0]), parseInt(x[1])]);\n    return result;\n}\n\n",
        "test": "const testTupleIntStr = () => {\n    console.assert(JSON.stringify(tupleIntStr([['333', '33'], ['1416', '55']])) === JSON.stringify([[333, 33], [1416, 55]]));\n    console.assert(JSON.stringify(tupleIntStr([['999', '99'], ['1000', '500']])) === JSON.stringify([[999, 99], [1000, 500]]));\n    console.assert(JSON.stringify(tupleIntStr([['666', '66'], ['1500', '555']])) === JSON.stringify([[666, 66], [1500, 555]]));\n}\n\ntestTupleIntStr() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction tupleIntStr(tupleStr) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code_str_generate": "//function definition\nfunction tupleIntStr(tupleStr) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert a tuple of string values to a tuple of integer values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 146,
        "task_id": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.",
        "code_str": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        grouped.push([count, current]);\n    }\n    return grouped;\n}\n\n",
        "test": "const testEncodeList = () => {\n    console.assert(JSON.stringify(encodeList([1,1,2,3,4,4.3,5,1])) === JSON.stringify([[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]), 'Test 1 Failed');\n    console.assert(JSON.stringify(encodeList('automatically'.split(''))) === JSON.stringify([[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]), 'Test 2 Failed');\n    console.assert(JSON.stringify(encodeList('python'.split(''))) === JSON.stringify([[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]), 'Test 3 Failed');\n}\n\ntestEncodeList();",
        "is_deleted": 1,
        "code_str_deleted": "function encodeList(list1) {\n    const grouped = [];\n    let current = null;\n    let count = 0;\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to reflect the run-length encoding from a list.",
        "code_str_generate": "function encodeList(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to reflect the run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const grouped = [];\n    let current = null;\n    let count = 0;\n    for (const item of list1) {\n        if (item !== current) {\n            if (current !== null) {\n                grouped.push([count, current]);\n            }\n            current = item;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 147,
        "task_id": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.",
        "code_str": "function min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n        } else {\n            res += (max1 - arr[i]) / k;\n        }\n    }\n    return Math.floor(res);\n}\n\n",
        "test": "const testMin_Ops = () => {\n    console.assert(min_Ops([2, 2, 2, 2], 4, 3) === 0, \"Test 1 failed\");\n    console.assert(min_Ops([4, 2, 6, 8], 4, 3) === -1, \"Test 2 failed\");\n    console.assert(min_Ops([21, 33, 9, 45, 63], 5, 6) === 24, \"Test 3 failed\");\n}\ntestMin_Ops() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function min_Ops(arr, n, k) {\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find k number of operations required to make all elements equal.",
        "code_str_generate": "function min_Ops(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find k number of operations required to make all elements equal.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max1 = Math.max(...arr);\n    let res = 0;\n    for (let i = 0; i < n; i++) {\n        if ((max1 - arr[i]) % k !== 0) {\n            return -1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 148,
        "task_id": 159,
        "prompt": "Write a function to print the season for the given month and day.",
        "code_str": "function month_season(month, days) {\n    let season;\n    if (['January', 'February', 'March'].includes(month)) {\n        season = 'winter';\n    } else if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    if ((month === 'March') && (days > 19)) {\n        season = 'spring';\n    } else if ((month === 'June') && (days > 20)) {\n        season = 'summer';\n    } else if ((month === 'September') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'October') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'November') && (days > 21)) {\n        season = 'autumn';\n    } else if ((month === 'December') && (days > 20)) {\n        season = 'winter';\n    }\n    return season;\n}\n\n",
        "test": "const testmonth_season = () => {\n    console.assert(month_season('January', 4) === 'winter');\n    console.assert(month_season('October', 28) === 'autumn');\n    console.assert(month_season('June', 6) === 'spring');\n}\n\ntestmonth_season() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function month_season(month, days) {\n    let season;\n    if (['January', 'February', 'March'].includes(month)) {\n        season = 'winter';\n    } else if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    if ((month === 'March') && (days > 19)) {\n        season = 'spring';\n        //begin to write code\n",
        "javascript_prompt": "Write a function to print the season for the given month and day.",
        "code_str_generate": "function month_season(month, days) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print the season for the given month and day.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let season;\n    if (['January', 'February', 'March'].includes(month)) {\n        season = 'winter';\n    } else if (['April', 'May', 'June'].includes(month)) {\n        season = 'spring';\n    } else if (['July', 'August', 'September'].includes(month)) {\n        season = 'summer';\n    } else {\n        season = 'autumn';\n    }\n    if ((month === 'March') && (days > 19)) {\n        season = 'spring';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 149,
        "task_id": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "code_str": "function solution(a, b, n) {\n    let i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return [\"x = \", i, \", y = \", Math.floor((n - (i * a)) / b)];\n        }\n        i += 1;\n    }\n    return \"No solution\";\n}\n\n",
        "test": "const testsolution = () => {\n    console.assert(JSON.stringify(solution(2, 3, 7)) === JSON.stringify(['x = ', 2, ', y = ', 1]), \"Test 1 Failed\");\n    console.assert(solution(4, 2, 7) === 'No solution', \"Test 2 Failed\");\n    console.assert(JSON.stringify(solution(1, 13, 17)) === JSON.stringify(['x = ', 4, ', y = ', 1]), \"Test 3 Failed\");\n}\ntestsolution() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function solution(a, b, n) {\n    let i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return [\"x = \", i, \", y = \", Math.floor((n - (i * a)) / b)];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "code_str_generate": "function solution(a, b, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find x and y that satisfies ax + by = n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = 0;\n    while (i * a <= n) {\n        if ((n - (i * a)) % b == 0) {\n            return [\"x = \", i, \", y = \", Math.floor((n - (i * a)) / b)];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 150,
        "task_id": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "code_str": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    return result;\n}\n\n",
        "test": "const testRemove_elements = () => {\n    console.assert(JSON.stringify(remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])) === JSON.stringify([1, 3, 5, 7, 9, 10]));\n    console.assert(JSON.stringify(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])) === JSON.stringify([2, 4, 6, 8, 9, 10]));\n    console.assert(JSON.stringify(remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])) === JSON.stringify([1, 2, 3, 4, 6, 8, 9, 10]));\n}\ntestRemove_elements() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_elements(list1, list2) {\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to remove all elements from a given list present in another list.",
        "code_str_generate": "function remove_elements(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all elements from a given list present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.filter(x => !list2.includes(x));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 151,
        "task_id": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code_str": "function sum_series(n) {\n  if (n < 1) {\n    return 0;\n  } else {\n    return n + sum_series(n - 2);\n  }\n}\n\n",
        "test": "const testsum_series = () => {\n  console.assert(sum_series(6) === 12);\n  console.assert(sum_series(10) === 30);\n  console.assert(sum_series(9) === 25);\n}\n\ntestsum_series()",
        "is_deleted": 1,
        "code_str_deleted": "function sum_series(n) {\n  if (n < 1) {\n    return 0;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code_str_generate": "function sum_series(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  if (n < 1) {\n    return 0;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 152,
        "task_id": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.",
        "code_str": "//function definition\nconst area_polygon = (s, l) => {\n  const { tan, PI } = Math;\n  let area = s * (l ** 2) / (4 * tan(PI / s));\n  return area;\n}\n\n",
        "test": "const testarea_polygon = () => {\n    console.assert(area_polygon(4,20) === 400.00000000000006);\n    console.assert(area_polygon(10,15) === 1731.1969896610804);\n    console.assert(area_polygon(9,7) === 302.90938549487214);\n}\ntestarea_polygon() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nconst area_polygon = (s, l) => {\n  const { tan, PI } = Math;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the area of a regular polygon.",
        "code_str_generate": "//function definition\nconst area_polygon = (s, l) => {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the area of a regular polygon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const { tan, PI } = Math;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 153,
        "task_id": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.",
        "code_str": "function divSum(n) { \n    let sum = 1; \n    let i = 2; \n    while (i * i <= n) { \n        if (n % i === 0) { \n            sum += i + Math.floor(n / i); \n        } \n        i += 1; \n    } \n    return sum; \n} \n\nfunction areEquivalent(num1, num2) { \n    return divSum(num1) === divSum(num2); \n} \n\n",
        "test": "const testareEquivalent = () => {\n    console.assert(areEquivalent(36, 57) === false, \"Test 1 Failed\");\n    console.assert(areEquivalent(2, 4) === false, \"Test 2 Failed\");\n    console.assert(areEquivalent(23, 47) === true, \"Test 3 Failed\");\n}\n\ntestareEquivalent()",
        "is_deleted": 1,
        "code_str_deleted": "function divSum(n) { \n    let sum = 1; \n    let i = 2; \n    while (i * i <= n) { \n        if (n % i === 0) { \n            sum += i + Math.floor(n / i); \n        } \n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the sum of divisors are same or not.",
        "code_str_generate": "function divSum(n) { \n    let sum = 1; \n    let i = 2; \n    while (i * i <= n) { \n        if (n % i === 0) { \n            sum += i + Math.floor(n / i); \n        } \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 154,
        "task_id": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code_str": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            count_chars += 1;\n        }\n    }\n    return count_chars;\n}\n\n",
        "test": "const testcount_char_position = () => {\n    console.assert(count_char_position(\"xbcefg\") === 2);\n    console.assert(count_char_position(\"ABcED\") === 3);\n    console.assert(count_char_position(\"AbgdeF\") === 5);\n}\ntestcount_char_position();",
        "is_deleted": 1,
        "code_str_deleted": "function count_char_position(str1) {\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code_str_generate": "function count_char_position(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_chars = 0;\n    for (let i = 0; i < str1.length; i++) {\n        if (i === str1.charCodeAt(i) - 'A'.charCodeAt(0) ||\n            i === str1.charCodeAt(i) - 'a'.charCodeAt(0)) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 155,
        "task_id": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.",
        "code_str": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n                evenPair++;\n            }\n        }\n    }\n    return evenPair; \n}\n\n",
        "test": "const testfind_even_Pair = () => {\n    console.assert(find_even_Pair([5,4,7,2,1], 5) === 4);\n    console.assert(find_even_Pair([7,2,8,1,0,5,11], 7) === 9);\n    console.assert(find_even_Pair([1,2,3], 3) === 1);\n}\n\ntestfind_even_Pair(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_even_Pair(A, N) { \n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the pairs with xor as an even number.",
        "code_str_generate": "function find_even_Pair(A, N) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the pairs with xor as an even number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let evenPair = 0;\n    for (let i = 0; i < N; i++) { \n        for (let j = i + 1; j < N; j++) { \n            if (((A[i] ^ A[j]) % 2) === 0) { \n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 156,
        "task_id": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "code_str": "function next_Power_Of_2(n) {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    while (n !== 0) {\n        n >>= 1;\n        count += 1;\n    }\n    return 1 << count;\n}\n\n",
        "test": "const testNext_Power_Of_2 = () => {\n    console.assert(next_Power_Of_2(0) === 1, \"Test 1 failed\");\n    console.assert(next_Power_Of_2(5) === 8, \"Test 2 failed\");\n    console.assert(next_Power_Of_2(17) === 32, \"Test 3 failed\");\n}\ntestNext_Power_Of_2() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function next_Power_Of_2(n) {\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find smallest power of 2 greater than or equal to n.",
        "code_str_generate": "function next_Power_Of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find smallest power of 2 greater than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    if (n && !(n & (n - 1))) {\n        return n;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 157,
        "task_id": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.",
        "code_str": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n        if (i === x) count += 1;\n    }\n    return count;\n}\n\n",
        "test": "const testFrequency = () => {\n    console.assert(frequency([1,2,3],4) === 0);\n    console.assert(frequency([1,2,2,3,3,3,4],3) === 3);\n    console.assert(frequency([0,1,2,3,1,2],1) === 2);\n}\n\ntestFrequency() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function frequency(a, x) {\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the frequency of a number in a given array.",
        "code_str_generate": "function frequency(a, x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of a number in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i of a) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 158,
        "task_id": 169,
        "prompt": "Write a function to calculate the nth pell number.",
        "code_str": "function get_pell(n) {\n    if (n <= 2) {\n        return n;\n    }\n    let a = 1;\n    let b = 2;\n    for (let i = 3; i <= n; i++) {\n        let c = 2 * b + a;\n        a = b;\n        b = c;\n    }\n    return b;\n}\n\n",
        "test": "const testGet_pell = () => {\n    console.assert(get_pell(4) === 12, 'Test 1 failed');\n    console.assert(get_pell(7) === 169, 'Test 2 failed');\n    console.assert(get_pell(8) === 408, 'Test 3 failed');\n}\n\ntestGet_pell(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_pell(n) {\n    if (n <= 2) {\n        return n;\n    }\n    let a = 1;\n    let b = 2;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the nth pell number.",
        "code_str_generate": "function get_pell(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the nth pell number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n <= 2) {\n        return n;\n    }\n    let a = 1;\n    let b = 2;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 159,
        "task_id": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code_str": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n        sum_range += list1[i];\n    }\n    return sum_range;\n}\n\n",
        "test": "const testsum_range_list = () => {\n    console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) === 29, \"Test 1 Failed\");\n    console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) === 16, \"Test 2 Failed\");\n    console.assert(sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) === 38, \"Test 3 Failed\");\n}\ntestsum_range_list(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_range_list(list1, m, n) {\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code_str_generate": "function sum_range_list(list1, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum_range = 0;\n    for (let i = m; i <= n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 160,
        "task_id": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.",
        "code_str": "function perimeter_pentagon(a) {\n  return 5 * a;\n}\n\n",
        "test": "const testperimeter_pentagon = () => {\n  console.assert(perimeter_pentagon(5) === 25);\n  console.assert(perimeter_pentagon(10) === 50);\n  console.assert(perimeter_pentagon(15) === 75);\n}\n\ntestperimeter_pentagon() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function perimeter_pentagon(a) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the perimeter of a pentagon.",
        "code_str_generate": "function perimeter_pentagon(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 161,
        "task_id": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code_str": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n            count = count + 1;\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testcount_occurance = () => {\n    console.assert(count_occurance(\"letstdlenstdporstd\") === 3, \"Test 1 Failed\");\n    console.assert(count_occurance(\"truststdsolensporsd\") === 1, \"Test 2 Failed\");\n    console.assert(count_occurance(\"makestdsostdworthit\") === 2, \"Test 3 Failed\");\n}\ntestcount_occurance() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_occurance(s) {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code_str_generate": "function count_occurance(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 's' && s[i + 1] === 't' && s[i + 2] === 'd') {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 162,
        "task_id": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "code_str": "function remove_splchar(text) {\n    return text.replace(/[\\W_]+/g, '');\n}\n\n",
        "test": "const testRemove_splchar = () => {\n    console.assert(remove_splchar('python  @#&^%$*program123') === 'pythonprogram123');\n    console.assert(remove_splchar('python %^$@!^&*()  programming24%$^^()    language') === 'pythonprogramming24language');\n    console.assert(remove_splchar('python   ^%&^()(+_)(_^&67)                  program') === 'python67program');\n}\ntestRemove_splchar();",
        "is_deleted": 1,
        "code_str_deleted": "function remove_splchar(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "code_str_generate": "function remove_splchar(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove everything except alphanumeric characters from a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 163,
        "task_id": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code_str": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n        }\n        result[k].push(v);\n    }\n    return result;\n}\n\n",
        "test": "const testGroup_keyvalue = () => {\n    console.assert(JSON.stringify(group_keyvalue([['yellow', 1], ['blue', 2], ['yellow', 3], ['blue', 4], ['red', 1]])) === JSON.stringify({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}), \"Test 1 Failed\");\n    console.assert(JSON.stringify(group_keyvalue([['python', 1], ['python', 2], ['python', 3], ['python', 4], ['python', 5]])) === JSON.stringify({'python': [1,2,3,4,5]}), \"Test 2 Failed\");\n    console.assert(JSON.stringify(group_keyvalue([['yellow',100], ['blue', 200], ['yellow', 300], ['blue', 400], ['red', 100]])) === JSON.stringify({'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}), \"Test 3 Failed\");\n}\ntestGroup_keyvalue() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function group_keyvalue(l) {\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code_str_generate": "function group_keyvalue(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = {};\n    for (const [k, v] of l) {\n        if (!result[k]) {\n            result[k] = [];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 164,
        "task_id": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.",
        "code_str": "function isValidParenthese(str1) {\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n        } else if (stack.length === 0 || pchar[stack.pop()] !== parenthese) {\n            return false;\n        }\n    }\n    return stack.length === 0;\n}\n\n",
        "test": "const testIsValidParenthese = () => {\n    console.assert(isValidParenthese(\"(){}[]\") === true, \"Test 1 Failed\");\n    console.assert(isValidParenthese(\"()[{)}\") === false, \"Test 2 Failed\");\n    console.assert(isValidParenthese(\"()\") === true, \"Test 3 Failed\");\n}\n\ntestIsValidParenthese() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function isValidParenthese(str1) {\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n            //begin to write code\n",
        "javascript_prompt": "Write a function to verify validity of a string of parentheses.",
        "code_str_generate": "function isValidParenthese(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to verify validity of a string of parentheses.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let stack = [];\n    let pchar = { \"(\": \")\", \"{\": \"}\", \"[\": \"]\" };\n    for (const parenthese of str1) {\n        if (pchar.hasOwnProperty(parenthese)) {\n            stack.push(parenthese);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 165,
        "task_id": 176,
        "prompt": "Write a function to find the perimeter of a triangle.",
        "code_str": "function perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    return perimeter;\n}\n\n",
        "test": "const testPerimeter_triangle = () => {\n    console.assert(perimeter_triangle(10, 20, 30) === 60);\n    console.assert(perimeter_triangle(3, 4, 5) === 12);\n    console.assert(perimeter_triangle(25, 35, 45) === 105);\n}\n\ntestPerimeter_triangle() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function perimeter_triangle(a, b, c) {\n    let perimeter = a + b + c;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the perimeter of a triangle.",
        "code_str_generate": "function perimeter_triangle(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the perimeter of a triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let perimeter = a + b + c;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 166,
        "task_id": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "code_str": "function answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n    } else {\n        return -1;\n    }\n}\n\n",
        "test": "const testAnswer = () => {\n    console.assert(JSON.stringify(answer(3, 8)) === JSON.stringify([3, 6]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(answer(2, 6)) === JSON.stringify([2, 4]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(answer(1, 3)) === JSON.stringify([1, 2]), \"Test 3 Failed\");\n}\ntestAnswer() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function answer(L, R) {\n    if (2 * L <= R) {\n        return [L, 2 * L];\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find two distinct numbers such that their lcm lies within the given range.",
        "code_str_generate": "function answer(L, R) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find two distinct numbers such that their lcm lies within the given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * L <= R) {\n        return [L, 2 * L];\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 167,
        "task_id": 178,
        "prompt": "Write a function to search some literals strings in a string.",
        "code_str": "function string_literals(patterns, text) {\n    for (let pattern of patterns) {\n        const regex = new RegExp(pattern);\n        if (regex.test(text)) {\n            return 'Matched!';\n        } else {\n            return 'Not Matched!';\n        }\n    }\n}",
        "test": "const testStringLiterals = () => {\n    console.assert(string_literals(['language'], 'python language') === 'Matched!');\n    console.assert(string_literals(['program'], 'python language') === 'Not Matched!');\n    console.assert(string_literals(['python'], 'programming language') === 'Not Matched!');\n}\ntestStringLiterals() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function string_literals(patterns, text) {\n    for (let pattern of patterns) {\n        const regex = new RegExp(pattern);\n        if (regex.test(text)) {\n            return 'Matched!';\n            //begin to write code\n",
        "javascript_prompt": "Write a function to search some literals strings in a string.",
        "code_str_generate": "function string_literals(patterns, text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to search some literals strings in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let pattern of patterns) {\n        const regex = new RegExp(pattern);\n        if (regex.test(text)) {\n            return 'Matched!';\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 168,
        "task_id": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.",
        "code_str": "function is_num_keith(x) {\n    let terms = [];\n    let temp = x;\n    let n = 0;\n    while (temp > 0) {\n        terms.push(temp % 10);\n        temp = Math.floor(temp / 10);\n        n++;\n    }\n    terms.reverse();\n    let next_term = 0;\n    let i = n;\n    while (next_term < x) {\n        next_term = 0;\n        for (let j = 1; j <= n; j++) {\n            next_term += terms[i - j];\n        }\n        terms.push(next_term);\n        i++;\n    }\n    return (next_term === x);\n}\n\n",
        "test": "const testIs_num_keith = () => {\n    console.assert(is_num_keith(14) === true, \"Test 1 failed\");\n    console.assert(is_num_keith(12) === false, \"Test 2 failed\");\n    console.assert(is_num_keith(197) === true, \"Test 3 failed\");\n}\ntestIs_num_keith(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_num_keith(x) {\n    let terms = [];\n    let temp = x;\n    let n = 0;\n    while (temp > 0) {\n        terms.push(temp % 10);\n        temp = Math.floor(temp / 10);\n        n++;\n    }\n    terms.reverse();\n    let next_term = 0;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find if the given number is a keith number or not.",
        "code_str_generate": "function is_num_keith(x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find if the given number is a keith number or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let terms = [];\n    let temp = x;\n    let n = 0;\n    while (temp > 0) {\n        terms.push(temp % 10);\n        temp = Math.floor(temp / 10);\n        n++;\n    }\n    terms.reverse();\n    let next_term = 0;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 169,
        "task_id": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "code_str": "function distance_lat_long(slat, slon, elat, elon) {\n    const sin = Math.sin;\n    const cos = Math.cos;\n    const acos = Math.acos;\n    let dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat) * cos(elat) * cos(slon - elon));\n    return dist;\n}",
        "test": "const testDistance_lat_long = () => {\n    console.assert(distance_lat_long(23.5, 67.5, 25.5, 69.5) === 12179.372041317429, \"Test 1 Failed\");\n    console.assert(distance_lat_long(10.5, 20.5, 30.5, 40.5) === 6069.397933300514, \"Test 2 Failed\");\n    console.assert(distance_lat_long(10, 20, 30, 40) === 6783.751974994595, \"Test 3 Failed\");\n}\n\ntestDistance_lat_long(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function distance_lat_long(slat, slon, elat, elon) {\n    const sin = Math.sin;\n    const cos = Math.cos;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "code_str_generate": "function distance_lat_long(slat, slon, elat, elon) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate distance between two points using latitude and longitude.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const sin = Math.sin;\n    const cos = Math.cos;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 170,
        "task_id": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "code_str": "//function definition\nfunction commonPrefixUtil(str1, str2) {\n    let result = \"\";\n    let n1 = str1.length;\n    let n2 = str2.length;\n    let i = 0;\n    let j = 0;\n    while (i <= n1 - 1 && j <= n2 - 1) {\n        if (str1[i] !== str2[j]) {\n            break;\n        }\n        result += str1[i];\n        i += 1;\n        j += 1;\n    }\n    return result;\n}\n\nfunction commonPrefix(arr, n) {\n    let prefix = arr[0];\n    for (let i = 1; i < n; i++) {\n        prefix = commonPrefixUtil(prefix, arr[i]);\n    }\n    return prefix;\n}\n\n",
        "test": "const testCommonPrefix = () => {\n    console.assert(commonPrefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) === 'ta', \"Test 1 Failed\");\n    console.assert(commonPrefix([\"apples\", \"ape\", \"april\"], 3) === 'ap', \"Test 2 Failed\");\n    console.assert(commonPrefix([\"teens\", \"teenager\", \"teenmar\"], 3) === 'teen', \"Test 3 Failed\");\n}\ntestCommonPrefix() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction commonPrefixUtil(str1, str2) {\n    let result = \"\";\n    let n1 = str1.length;\n    let n2 = str2.length;\n    let i = 0;\n    let j = 0;\n    while (i <= n1 - 1 && j <= n2 - 1) {\n        if (str1[i] !== str2[j]) {\n            break;\n        }\n        result += str1[i];\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "code_str_generate": "//function definition\nfunction commonPrefixUtil(str1, str2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest common prefix in the given set of strings.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = \"\";\n    let n1 = str1.length;\n    let n2 = str2.length;\n    let i = 0;\n    let j = 0;\n    while (i <= n1 - 1 && j <= n2 - 1) {\n        if (str1[i] !== str2[j]) {\n            break;\n        }\n        result += str1[i];\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 171,
        "task_id": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code_str": "function findCharacter(string) {\n  const uppercaseCharacters = string.match(/[A-Z]/g) || [];\n  const lowercaseCharacters = string.match(/[a-z]/g) || [];\n  const numericalCharacters = string.match(/[0-9]/g) || [];\n  const specialCharacters = string.match(/[,.!?]/g) || [];\n  return [uppercaseCharacters, lowercaseCharacters, numericalCharacters, specialCharacters];\n}\n\n",
        "test": "const testFindCharacter = () => {\n  console.assert(JSON.stringify(findCharacter(\"ThisIsGeeksforGeeks\")) === JSON.stringify([['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], []]), \"Test 1 Failed\");\n  console.assert(JSON.stringify(findCharacter(\"Hithere2\")) === JSON.stringify([['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], []]), \"Test 2 Failed\");\n  console.assert(JSON.stringify(findCharacter(\"HeyFolks32\")) === JSON.stringify([['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], []]), \"Test 3 Failed\");\n}\n\ntestFindCharacter(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function findCharacter(string) {\n  const uppercaseCharacters = string.match(/[A-Z]/g) || [];\n  const lowercaseCharacters = string.match(/[a-z]/g) || [];\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code_str_generate": "function findCharacter(string) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const uppercaseCharacters = string.match(/[A-Z]/g) || [];\n  const lowercaseCharacters = string.match(/[a-z]/g) || [];\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 172,
        "task_id": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code_str": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testcount_pairs = () => {\n    console.assert(count_pairs([1, 5, 3, 4, 2], 5, 3) === 2);\n    console.assert(count_pairs([8, 12, 16, 4, 0, 20], 6, 4) === 5);\n    console.assert(count_pairs([2, 4, 1, 3, 4], 5, 2) === 3);\n}\n\ntestcount_pairs() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_pairs(arr, n, k) {\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code_str_generate": "function count_pairs(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count all the distinct pairs having a difference of k in any array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (Math.abs(arr[i] - arr[j]) === k) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 173,
        "task_id": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "code_str": "function greater_specificnum(list, num) {\n    return list.every(x => x >= num);\n}\n\n",
        "test": "const testgreater_specificnum = () => {\n    console.assert(greater_specificnum([220, 330, 500], 200) === true);\n    console.assert(greater_specificnum([12, 17, 21], 20) === false);\n    console.assert(greater_specificnum([1, 2, 3, 4], 10) === false);\n}\n\ntestgreater_specificnum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function greater_specificnum(list, num) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "code_str_generate": "function greater_specificnum(list, num) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all the values in a list that are greater than a specified number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 174,
        "task_id": 185,
        "prompt": "Write a function to find the focus of a parabola.",
        "code_str": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    return focus;\n}\n\n",
        "test": "const testParabola_focus = () => {\n    console.assert(JSON.stringify(parabola_focus(5, 3, 2)) === JSON.stringify([-0.3, 1.6]));\n    console.assert(JSON.stringify(parabola_focus(9, 8, 4)) === JSON.stringify([-0.4444444444444444, 2.25]));\n    console.assert(JSON.stringify(parabola_focus(2, 4, 6)) === JSON.stringify([-1.0, 4.125]));\n}\n\ntestParabola_focus() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function parabola_focus(a, b, c) {\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the focus of a parabola.",
        "code_str_generate": "function parabola_focus(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the focus of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let focus = [-b / (2 * a), (4 * a * c - b * b + 1) / (4 * a)];\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 175,
        "task_id": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.",
        "code_str": "function check_literals(text, patterns){\n  for (let pattern of patterns) {\n    if (new RegExp(pattern).test(text)) {\n        return 'Matched!';\n    } else {\n        return 'Not Matched!';\n    }\n  }\n}\n\n",
        "test": "const testCheck_literals = () => {\n    console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['fox']) === 'Matched!');\n    console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['horse']) === 'Not Matched!');\n    console.assert(check_literals('The quick brown fox jumps over the lazy dog.', ['lazy']) === 'Matched!');\n}\n\ntestCheck_literals();",
        "is_deleted": 1,
        "code_str_deleted": "function check_literals(text, patterns){\n  for (let pattern of patterns) {\n    if (new RegExp(pattern).test(text)) {\n        return 'Matched!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function to search some literals strings in a string by using regex.",
        "code_str_generate": "function check_literals(text, patterns){\n\n    /*\n    progame language:javascript\n    description:Write a function to search some literals strings in a string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  for (let pattern of patterns) {\n    if (new RegExp(pattern).test(text)) {\n        return 'Matched!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 176,
        "task_id": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "code_str": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n        return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n    } else {\n        return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n    }\n}\n\n",
        "test": "const testLongest_common_subsequence = () => {\n    console.assert(longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7) === 4, 'Test 1 failed');\n    console.assert(longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6) === 3, 'Test 2 failed');\n    console.assert(longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4) === 2, 'Test 3 failed');\n}\n\ntestLongest_common_subsequence(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function longest_common_subsequence(X, Y, m, n) {\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "code_str_generate": "function longest_common_subsequence(X, Y, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest common subsequence for the given two sequences.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (m == 0 || n == 0) {\n        return 0;\n    } else if (X[m - 1] === Y[n - 1]) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 177,
        "task_id": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "code_str": "function prod_Square(n) {\n    for (let i = 2; i <= n; i++) {\n        if (i * i < n + 1) {\n            for (let j = 2; j <= n; j++) {\n                if ((i * i * j * j) === n) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n\n",
        "test": "const testProd_Square = () => {\n    console.assert(prod_Square(25) === false, \"Test 1 failed\");\n    console.assert(prod_Square(30) === false, \"Test 2 failed\");\n    console.assert(prod_Square(16) === true, \"Test 3 failed\");\n}\ntestProd_Square() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function prod_Square(n) {\n    for (let i = 2; i <= n; i++) {\n        if (i * i < n + 1) {\n            for (let j = 2; j <= n; j++) {\n                if ((i * i * j * j) === n) {\n                    return true;\n                    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given number can be represented by product of two squares or not.",
        "code_str_generate": "function prod_Square(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given number can be represented by product of two squares or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 2; i <= n; i++) {\n        if (i * i < n + 1) {\n            for (let j = 2; j <= n; j++) {\n                if ((i * i * j * j) === n) {\n                    return true;\n                    //begin to write code\n"
    },
    {
        "Unnamed: 0": 178,
        "task_id": 189,
        "prompt": "Write a python function to find the first missing positive number.",
        "code_str": "function first_Missing_Positive(arr, n) { \n    let ptr = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr === 0) {\n        return 1;\n    }\n    for (let i = 0; i < n; i++) {\n        if (arr[i] <= 0 || arr[i] > n) {\n            arr[i] = 1;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        arr[(arr[i] - 1) % n] += n;\n    }\n    for (let i = 0; i < n; i++) {\n        if (arr[i] <= n) {\n            return i + 1;\n        }\n    }\n    return n + 1;\n}\n\n",
        "test": "const testfirst_Missing_Positive = () => {\n    console.assert(first_Missing_Positive([1,2,3,-1,5], 5) === 4);\n    console.assert(first_Missing_Positive([0,-1,-2,1,5,8], 6) === 2);\n    console.assert(first_Missing_Positive([0,1,2,5,-8], 5) === 3);\n}\ntestfirst_Missing_Positive();",
        "is_deleted": 1,
        "code_str_deleted": "function first_Missing_Positive(arr, n) { \n    let ptr = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr === 0) {\n        return 1;\n    }\n    for (let i = 0; i < n; i++) {\n        if (arr[i] <= 0 || arr[i] > n) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first missing positive number.",
        "code_str_generate": "function first_Missing_Positive(arr, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first missing positive number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ptr = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] === 1) {\n            ptr = 1;\n            break;\n        }\n    }\n    if (ptr === 0) {\n        return 1;\n    }\n    for (let i = 0; i < n; i++) {\n        if (arr[i] <= 0 || arr[i] > n) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 179,
        "task_id": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "code_str": "function count_Intgral_Points(x1, y1, x2, y2) {\n    return ((y2 - y1 - 1) * (x2 - x1 - 1));\n}\n\n",
        "test": "const testCount_Intgral_Points = () => {\n    console.assert(count_Intgral_Points(1, 1, 4, 4) === 4);\n    console.assert(count_Intgral_Points(1, 2, 1, 2) === 1);\n    console.assert(count_Intgral_Points(4, 2, 6, 4) === 1);\n}\n\ntestCount_Intgral_Points(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Intgral_Points(x1, y1, x2, y2) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of integral co-ordinates that lie inside a square.",
        "code_str_generate": "function count_Intgral_Points(x1, y1, x2, y2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of integral co-ordinates that lie inside a square.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 180,
        "task_id": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "code_str": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test": "const testcheck_monthnumber = () => {\n    console.assert(check_monthnumber(\"February\") === false);\n    console.assert(check_monthnumber(\"June\") === true);\n    console.assert(check_monthnumber(\"April\") === true);\n}\n\ntestcheck_monthnumber() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_monthnumber(monthname3) {\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "code_str_generate": "function check_monthnumber(monthname3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month name contains 30 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (monthname3 === \"April\" || monthname3 === \"June\" || monthname3 === \"September\" || monthname3 === \"November\") {\n        return true;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 181,
        "task_id": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.",
        "code_str": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n        }\n        if (i.match(/[0-9]/)) {\n            flag_n = true;\n        }\n    }\n    return flag_l && flag_n;\n}\n\n",
        "test": "const testcheck_String = () => {\n    console.assert(check_String('thishasboth29') === true, \"Expected True\");\n    console.assert(check_String('python') === false, \"Expected False\");\n    console.assert(check_String('string') === false, \"Expected False\");\n}\n\ntestcheck_String();",
        "is_deleted": 1,
        "code_str_deleted": "function check_String(str) {\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether a string has atleast one letter and one number.",
        "code_str_generate": "function check_String(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether a string has atleast one letter and one number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let flag_l = false;\n    let flag_n = false;\n    for (let i of str) {\n        if (i.match(/[a-zA-Z]/)) {\n            flag_l = true;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 182,
        "task_id": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.",
        "code_str": "function remove_tuple(test_tup) {\n    const res = [...new Set(test_tup)];\n    res.sort();\n    return res;\n}",
        "test": "const testRemove_tuple = () => {\n    console.assert(JSON.stringify(remove_tuple([1, 3, 5, 2, 3, 5, 1, 1, 3])) === JSON.stringify([1, 2, 3, 5]));\n    console.assert(JSON.stringify(remove_tuple([2, 3, 4, 4, 5, 6, 6, 7, 8, 8])) === JSON.stringify([2, 3, 4, 5, 6, 7, 8]));\n    console.assert(JSON.stringify(remove_tuple([11, 12, 13, 11, 11, 12, 14, 13])) === JSON.stringify([11, 12, 13, 14]));\n}\n\ntestRemove_tuple(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_tuple(test_tup) {\n    const res = [...new Set(test_tup)];\n    //begin to write code\n",
        "javascript_prompt": "Write a function to remove the duplicates from the given tuple.",
        "code_str_generate": "function remove_tuple(test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove the duplicates from the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = [...new Set(test_tup)];\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 183,
        "task_id": 194,
        "prompt": "Write a python function to convert octal number to decimal number.",
        "code_str": "function octal_To_Decimal(n) {  \n    let num = n; \n    let dec_value = 0; \n    let base = 1; \n    let temp = num; \n    while (temp) { \n        let last_digit = temp % 10; \n        temp = Math.floor(temp / 10); \n        dec_value += last_digit * base; \n        base = base * 8; \n    } \n    return dec_value; \n}\n\n",
        "test": "const testOctal_To_Decimal = () => {\n    console.assert(octal_To_Decimal(25) === 21, \"Test 1 Failed\");\n    console.assert(octal_To_Decimal(30) === 24, \"Test 2 Failed\");\n    console.assert(octal_To_Decimal(40) === 32, \"Test 3 Failed\");\n}\ntestOctal_To_Decimal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function octal_To_Decimal(n) {  \n    let num = n; \n    let dec_value = 0; \n    let base = 1; \n    let temp = num; \n    while (temp) { \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to convert octal number to decimal number.",
        "code_str_generate": "function octal_To_Decimal(n) {  \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert octal number to decimal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num = n; \n    let dec_value = 0; \n    let base = 1; \n    let temp = num; \n    while (temp) { \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 184,
        "task_id": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.",
        "code_str": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n        } else if (arr[mid] < x) {\n            low = mid + 1;\n        } else {\n            res = mid;\n            high = mid - 1;\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testFirst = () => {\n    console.assert(first([1, 2, 3, 4, 5, 6, 6], 6, 7) === 5, \"Test 1 Failed\");\n    console.assert(first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9) === 1, \"Test 2 Failed\");\n    console.assert(first([1, 2, 3], 1, 3) === 0, \"Test 3 Failed\");\n}\ntestFirst() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function first(arr, x, n) {\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first position of an element in a sorted array.",
        "code_str_generate": "function first(arr, x, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first position of an element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let low = 0;\n    let high = n - 1;\n    let res = -1;\n    while (low <= high) {\n        let mid = Math.floor((low + high) / 2);\n        if (arr[mid] > x) {\n            high = mid - 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 185,
        "task_id": 196,
        "prompt": "Write a function to remove all the tuples with length k.",
        "code_str": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  return res;\n}\n\n",
        "test": "const testRemove_tuples = () => {\n  console.assert(JSON.stringify(remove_tuples([[4, 5], [4], [8, 6, 7], [1], [3, 4, 6, 7]], 1)) === JSON.stringify([[4, 5], [8, 6, 7], [3, 4, 6, 7]]));\n  console.assert(JSON.stringify(remove_tuples([[4, 5], [4, 5], [6, 7], [1, 2, 3], [3, 4, 6, 7]], 2)) === JSON.stringify([[1, 2, 3], [3, 4, 6, 7]]));\n  console.assert(JSON.stringify(remove_tuples([[1, 4, 4], [4, 3], [8, 6, 7], [1], [3, 6, 7]], 3)) === JSON.stringify([[4, 3], [1]]));\n}\n\ntestRemove_tuples(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_tuples(test_list, K) {\n  let res = test_list.filter(ele => ele.length !== K);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to remove all the tuples with length k.",
        "code_str_generate": "function remove_tuples(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all the tuples with length k.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = test_list.filter(ele => ele.length !== K);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 186,
        "task_id": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "code_str": "function find_exponentio(test_tup1, test_tup2) {\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  return res;\n}\n\n",
        "test": "const testFind_exponentio = () => {\n  console.assert(JSON.stringify(find_exponentio([10, 4, 5, 6], [5, 6, 7, 5])) === JSON.stringify([100000, 4096, 78125, 7776]), \"Test case 1 failed\");\n  console.assert(JSON.stringify(find_exponentio([11, 5, 6, 7], [6, 7, 8, 6])) === JSON.stringify([1771561, 78125, 1679616, 117649]), \"Test case 2 failed\");\n  console.assert(JSON.stringify(find_exponentio([12, 6, 7, 8], [7, 8, 9, 7])) === JSON.stringify([35831808, 1679616, 40353607, 2097152]), \"Test case 3 failed\");\n}\n\ntestFind_exponentio(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_exponentio(test_tup1, test_tup2) {\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  //begin to write code\n",
        "javascript_prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "code_str_generate": "function find_exponentio(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the exponentiation of the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = test_tup1.map((ele1, index) => Math.pow(ele1, test_tup2[index]));\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 187,
        "task_id": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code_str": "function largest_triangle(a, b) {\n    if (a < 0 || b < 0) {\n        return -1;\n    }\n    const area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);\n    return area;\n}",
        "test": "const testLargestTriangle = () => {\n    console.assert(Math.abs(largest_triangle(4, 2) - 10.392304845413264)< 0.00001);\n    console.assert(Math.abs(largest_triangle(5, 7) - 4.639421805988064) < 0.00001);\n    console.assert(Math.abs(largest_triangle(9, 1) - 105.2220865598093)< 0.00001);\n}\n\ntestLargestTriangle();",
        "is_deleted": 1,
        "code_str_deleted": "function largest_triangle(a, b) {\n    if (a < 0 || b < 0) {\n        return -1;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code_str_generate": "function largest_triangle(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the largest triangle that can be inscribed in an ellipse.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a < 0 || b < 0) {\n        return -1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 188,
        "task_id": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
        "code_str": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testHighest_Power_of_2 = () => {\n    console.assert(highest_Power_of_2(10) === 8);\n    console.assert(highest_Power_of_2(19) === 16);\n    console.assert(highest_Power_of_2(32) === 32);\n}\n\ntestHighest_Power_of_2(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find highest power of 2 less than or equal to given number.",
        "code_str_generate": "function highest_Power_of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find highest power of 2 less than or equal to given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 189,
        "task_id": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "code_str": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    let maxResult = list1.map((value, index) => value === maxVal ? index : -1).filter(index => index !== -1);\n    return maxResult;\n}\n\n",
        "test": "const testPositionMax = () => {\n    console.assert(JSON.stringify(positionMax([12,33,23,10,67,89,45,667,23,12,11,10,54])) === JSON.stringify([7]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(positionMax([1,2,2,2,4,4,4,5,5,5,5])) === JSON.stringify([7,8,9,10]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(positionMax([2,1,5,6,8,3,4,9,10,11,8,12])) === JSON.stringify([11]), \"Test 3 Failed\");\n}\ntestPositionMax(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function positionMax(list1) {\n    let maxVal = Math.max(...list1);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "code_str_generate": "function positionMax(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all index positions of the maximum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxVal = Math.max(...list1);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 190,
        "task_id": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.",
        "code_str": "function chkList(lst) { \n    return new Set(lst).size === 1;\n}\n\n",
        "test": "const testChkList = () => {\n    console.assert(chkList(['one', 'one', 'one']) === true, \"Test 1 Failed\");\n    console.assert(chkList(['one', 'Two', 'Three']) === false, \"Test 2 Failed\");\n    console.assert(chkList(['bigdata', 'python', 'Django']) === false, \"Test 3 Failed\");\n}\n\ntestChkList() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function chkList(lst) { \n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the elements in a list are same or not.",
        "code_str_generate": "function chkList(lst) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the elements in a list are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 191,
        "task_id": 202,
        "prompt": "Write a function to remove even characters in a string.",
        "code_str": "function remove_even(str1) {\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 !== 0) {\n            str2 += str1[i - 1];\n        }\n    }\n    return str2;\n}\n\n",
        "test": "const testRemove_even = () => {\n    console.assert(remove_even(\"python\") === \"pto\");\n    console.assert(remove_even(\"program\") === \"porm\");\n    console.assert(remove_even(\"language\") === \"lnug\");\n}\n\ntestRemove_even()",
        "is_deleted": 1,
        "code_str_deleted": "function remove_even(str1) {\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 !== 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to remove even characters in a string.",
        "code_str_generate": "function remove_even(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove even characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 !== 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 192,
        "task_id": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.",
        "code_str": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n        setBits += x & 1;\n        x >>= 1;\n    }\n    return setBits;\n}\n\n",
        "test": "const testHamming_Distance = () => {\n    console.assert(hamming_Distance(4, 8) === 2);\n    console.assert(hamming_Distance(2, 4) === 2);\n    console.assert(hamming_Distance(1, 2) === 2);\n}\n\ntestHamming_Distance();",
        "is_deleted": 1,
        "code_str_deleted": "function hamming_Distance(n1, n2) {\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the hamming distance between given two integers.",
        "code_str_generate": "function hamming_Distance(n1, n2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the hamming distance between given two integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let x = n1 ^ n2;\n    let setBits = 0;\n    while (x > 0) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 193,
        "task_id": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.",
        "code_str": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n            res += 1;\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testCount = () => {\n    console.assert(count(\"abcc\", \"c\") === 2, \"Test 1 Failed\");\n    console.assert(count(\"ababca\", \"a\") === 3, \"Test 2 Failed\");\n    console.assert(count(\"mnmm0pm\", \"m\") === 4, \"Test 3 Failed\");\n}\ntestCount(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count(s, c) {\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the occurrence of a given character in a string.",
        "code_str_generate": "function count(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurrence of a given character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === c) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 194,
        "task_id": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code_str": "function inversionElements(testTup) {\n  const res = testTup.map(x => ~x);\n  return res;\n}\n\n",
        "test": "const testInversionElements = () => {\n  console.assert(JSON.stringify(inversionElements([7, 8, 9, 1, 10, 7])) === JSON.stringify([-8, -9, -10, -2, -11, -8]), 'Test case 1 failed');\n  console.assert(JSON.stringify(inversionElements([2, 4, 5, 6, 1, 7])) === JSON.stringify([-3, -5, -6, -7, -2, -8]), 'Test case 2 failed');\n  console.assert(JSON.stringify(inversionElements([8, 9, 11, 14, 12, 13])) === JSON.stringify([-9, -10, -12, -15, -13, -14]), 'Test case 3 failed');\n}\n\ntestInversionElements(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function inversionElements(testTup) {\n  const res = testTup.map(x => ~x);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code_str_generate": "function inversionElements(testTup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the inversions of tuple elements in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = testTup.map(x => ~x);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 195,
        "task_id": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code_str": "function concatenateElements(testTup) {\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  return res;\n}\n\n",
        "test": "const testConcatenateElements = () => {\n  console.assert(JSON.stringify(concatenateElements([\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"])) === JSON.stringify(['DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS']), \"Test 1 Failed\");\n  console.assert(JSON.stringify(concatenateElements([\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"])) === JSON.stringify(['RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR']), \"Test 2 Failed\");\n  console.assert(JSON.stringify(concatenateElements([\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"])) === JSON.stringify(['MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD']), \"Test 3 Failed\");\n}\n\ntestConcatenateElements();",
        "is_deleted": 1,
        "code_str_deleted": "function concatenateElements(testTup) {\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code_str_generate": "function concatenateElements(testTup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the adjacent element concatenation in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = testTup.slice(0, -1).map((item, index) => item + testTup[index + 1]);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 196,
        "task_id": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code_str": "function find_longest_repeating_subseq(str) {\n    let n = str.length;\n    let dp = Array.from({length: n+1}, () => Array(n+1).fill(0));\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (str[i-1] === str[j-1] && i !== j) {\n                dp[i][j] = 1 + dp[i-1][j-1];\n            } else {\n                dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);\n            }\n        }\n    }\n    return dp[n][n];\n}\n\n",
        "test": "const testFind_longest_repeating_subseq = () => {\n    console.assert(find_longest_repeating_subseq(\"AABEBCDD\") === 3, 'Test 1 failed');\n    console.assert(find_longest_repeating_subseq(\"aabb\") === 2, 'Test 2 failed');\n    console.assert(find_longest_repeating_subseq(\"aab\") === 1, 'Test 3 failed');\n}\ntestFind_longest_repeating_subseq() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_longest_repeating_subseq(str) {\n    let n = str.length;\n    let dp = Array.from({length: n+1}, () => Array(n+1).fill(0));\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (str[i-1] === str[j-1] && i !== j) {\n                dp[i][j] = 1 + dp[i-1][j-1];\n                //begin to write code\n",
        "javascript_prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code_str_generate": "function find_longest_repeating_subseq(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let n = str.length;\n    let dp = Array.from({length: n+1}, () => Array(n+1).fill(0));\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= n; j++) {\n            if (str[i-1] === str[j-1] && i !== j) {\n                dp[i][j] = 1 + dp[i-1][j-1];\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 197,
        "task_id": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code_str": "function is_decimal(num) {\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    const result = num_fetch.test(num);\n    return Boolean(result);\n}\n\n",
        "test": "const testis_decimal = () => {\n    console.assert(is_decimal('123.11') === true, \"Test 1 Failed\");\n    console.assert(is_decimal('0.21') === true, \"Test 2 Failed\");\n    console.assert(is_decimal('123.1214') === false, \"Test 3 Failed\");\n}\ntestis_decimal()",
        "is_deleted": 1,
        "code_str_deleted": "function is_decimal(num) {\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code_str_generate": "function is_decimal(num) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check the given decimal with a precision of 2 by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const num_fetch = new RegExp(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 198,
        "task_id": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code_str": "const heapReplace = (heap, a) => {\n    heap.sort();\n    heap[0] = a;\n    heap.sort();\n    return heap;\n};",
        "test": "const testHeapReplace = () => {\n\n    console.assert(JSON.stringify(heapReplace([25, 44, 68, 21, 39, 23, 89], 21)) === JSON.stringify([21, 25, 23, 44, 39, 68, 89].sort()));\n    console.assert(JSON.stringify(heapReplace([25, 44, 68, 21, 39, 23, 89], 110)) === JSON.stringify([23, 25, 68, 44, 39, 110, 89].sort()));\n    console.assert(JSON.stringify(heapReplace([25, 44, 68, 21, 39, 23, 89], 500)) === JSON.stringify([23, 25, 68, 44, 39, 500, 89].sort()));\n}\ntestHeapReplace()",
        "is_deleted": 1,
        "code_str_deleted": "const heapReplace = (heap, a) => {\n    heap.sort();\n    heap[0] = a;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code_str_generate": "const heapReplace = (heap, a) => {\n\n    /*\n    progame language:javascript\n    description:Write a function to delete the smallest element from the given heap and then insert a new item.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    heap.sort();\n    heap[0] = a;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 199,
        "task_id": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code_str": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    let found = get_char.test(string);\n    return !found;\n}\n\n",
        "test": "const testis_allowed_specific_char = () => {\n    console.assert(is_allowed_specific_char(\"ABCDEFabcdef123450\") === true);\n    console.assert(is_allowed_specific_char(\"*&%@#!}{\") === false);\n    console.assert(is_allowed_specific_char(\"HELLOhowareyou98765\") === true);\n}\ntestis_allowed_specific_char()",
        "is_deleted": 1,
        "code_str_deleted": "function is_allowed_specific_char(string) {\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code_str_generate": "function is_allowed_specific_char(string) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let get_char = new RegExp('[^a-zA-Z0-9.]');\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 200,
        "task_id": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.",
        "code_str": "function count_Num(n) {\n    if (n === 1) {\n        return 1;\n    }\n    let count = Math.pow(2, n - 2);\n    return count;\n}\n\n",
        "test": "const testcount_Num = () => {\n    console.assert(count_Num(2) === 1);\n    console.assert(count_Num(3) === 2);\n    console.assert(count_Num(1) === 1);\n}\ntestcount_Num() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Num(n) {\n    if (n === 1) {\n        return 1;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count numbers whose oth and nth bits are set.",
        "code_str_generate": "function count_Num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count numbers whose oth and nth bits are set.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 1) {\n        return 1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 201,
        "task_id": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
        "code_str": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n        sum += Math.pow(i, 4);\n    }\n    return sum;\n}\n\n",
        "test": "const testFourth_Power_Sum = () => {\n    console.assert(fourth_Power_Sum(2) === 17, \"Test case 1 failed\");\n    console.assert(fourth_Power_Sum(4) === 354, \"Test case 2 failed\");\n    console.assert(fourth_Power_Sum(6) === 2275, \"Test case 3 failed\");\n}\n\ntestFourth_Power_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function fourth_Power_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of fourth power of n natural numbers.",
        "code_str_generate": "function fourth_Power_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of fourth power of n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 202,
        "task_id": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.",
        "code_str": "function concatenateStrings(testTup1, testTup2) {\n  return testTup1.map((item, index) => item + testTup2[index]);\n}\n\n",
        "test": "const testConcatenateStrings = () => {\n  console.assert(JSON.stringify(concatenateStrings([\"Manjeet\", \"Nikhil\", \"Akshat\"], [\" Singh\", \" Meherwal\", \" Garg\"])) === JSON.stringify(['Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg']));\n  console.assert(JSON.stringify(concatenateStrings([\"Shaik\", \"Ayesha\", \"Sanya\"], [\" Dawood\", \" Begum\", \" Singh\"])) === JSON.stringify(['Shaik Dawood', 'Ayesha Begum', 'Sanya Singh']));\n  console.assert(JSON.stringify(concatenateStrings([\"Harpreet\", \"Priyanka\", \"Muskan\"], [\"Kour\", \" Agarwal\", \"Sethi\"])) === JSON.stringify(['HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi']));\n}\n\ntestConcatenateStrings(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function concatenateStrings(testTup1, testTup2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to perform the concatenation of two string tuples.",
        "code_str_generate": "function concatenateStrings(testTup1, testTup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the concatenation of two string tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 203,
        "task_id": 214,
        "prompt": "Write a function to convert radians to degrees.",
        "code_str": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    return degree;\n}\n\n",
        "test": "const testdegree_radian = () => {\n    console.assert(degree_radian(90) === 5156.620156177409, `Expected 5156.620156177409, got ${degree_radian(90)}`);\n    console.assert(degree_radian(60) === 3437.746770784939, `Expected 3437.746770784939, got ${degree_radian(60)}`);\n    console.assert(degree_radian(120) === 6875.493541569878, `Expected 6875.493541569878, got ${degree_radian(120)}`);\n}\ntestdegree_radian() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function degree_radian(radian) {\n    const degree = radian * (180 / Math.PI);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to convert radians to degrees.",
        "code_str_generate": "function degree_radian(radian) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert radians to degrees.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const degree = radian * (180 / Math.PI);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 204,
        "task_id": 215,
        "prompt": "Write a function to decode a run-length encoded given list.",
        "code_str": "function decodeList(alist) {\n    function aux(g) {\n        if (Array.isArray(g)) {\n            return [[g[1], Array(g[0]).fill().map((_, i) => i)]];\n        } else {\n            return [[g, [0]]];\n        }\n    }\n    return alist.flatMap(g => aux(g).flatMap(([x, R]) => R.map(() => x)));\n}\n\n",
        "test": "const testDecodeList = () => {\n    console.assert(JSON.stringify(decodeList([[2, 1], 2, 3, [2, 4], 5, 1])) === JSON.stringify([1, 1, 2, 3, 4, 4, 5, 1]));\n    console.assert(JSON.stringify(decodeList(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])) === JSON.stringify(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']));\n    console.assert(JSON.stringify(decodeList(['p', 'y', 't', 'h', 'o', 'n'])) === JSON.stringify(['p', 'y', 't', 'h', 'o', 'n']));\n}\ntestDecodeList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function decodeList(alist) {\n    function aux(g) {\n        if (Array.isArray(g)) {\n            return [[g[1], Array(g[0]).fill().map((_, i) => i)]];\n        } else {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to decode a run-length encoded given list.",
        "code_str_generate": "function decodeList(alist) {\n\n    /*\n    progame language:javascript\n    description:Write a function to decode a run-length encoded given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    function aux(g) {\n        if (Array.isArray(g)) {\n            return [[g[1], Array(g[0]).fill().map((_, i) => i)]];\n        } else {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 205,
        "task_id": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "code_str": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n            exist = false;\n        }\n    }\n    return exist;\n}\n\n",
        "test": "const testCheck_subset_list = () => {\n    console.assert(check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [12, 18, 23, 25, 45]) === false);\n    console.assert(check_subset_list([2, 3, 1, 4, 5, 6, 8], [4, 5, 6, 8]) === true);\n    console.assert(check_subset_list(['a', 'b', 'e', 'c', 'd'], ['g']) === false);\n}\ntestCheck_subset_list();",
        "is_deleted": 1,
        "code_str_deleted": "function check_subset_list(list1, list2) {\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "code_str_generate": "function check_subset_list(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a nested list is a subset of another nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let exist = true;\n    for (let i of list2) {\n        if (!list1.includes(i)) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 206,
        "task_id": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "code_str": "function first_Repeated_Char(str) {\n    let h = {};\n    for (let ch of str) {\n        if (h[ch]) {\n            return ch;\n        } else {\n            h[ch] = 1;\n        }\n    }\n    return '\\0';\n}\n\n",
        "test": "const testfirst_Repeated_Char = () => {\n    console.assert(first_Repeated_Char(\"Google\") === \"o\");\n    console.assert(first_Repeated_Char(\"data\") === \"a\");\n    console.assert(first_Repeated_Char(\"python\") === '\\0');\n}\n\ntestfirst_Repeated_Char() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function first_Repeated_Char(str) {\n    let h = {};\n    for (let ch of str) {\n        if (h[ch]) {\n            return ch;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first repeated character in a given string.",
        "code_str_generate": "function first_Repeated_Char(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let h = {};\n    for (let ch of str) {\n        if (h[ch]) {\n            return ch;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 207,
        "task_id": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
        "code_str": "const gcd = (a, b) => {\n    while (b != 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n};\n\nconst min_Operations = (A, B) => {\n    if (A > B) {\n        [A, B] = [B, A];\n    }\n    B = Math.floor(B / gcd(A, B));\n    return B - 1;\n};\n\n",
        "test": "const testmin_Operations = () => {\n    console.assert(min_Operations(2, 4) === 1);\n    console.assert(min_Operations(4, 10) === 4);\n    console.assert(min_Operations(1, 4) === 3);\n}\ntestmin_Operations()",
        "is_deleted": 1,
        "code_str_deleted": "const gcd = (a, b) => {\n    while (b != 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the minimum operations required to make two numbers equal.",
        "code_str_generate": "const gcd = (a, b) => {\n    while (b != 0) {\n        let t = b;\n        b = a % b;\n        a = t;\n    }\n    return a;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 208,
        "task_id": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code_str": "function extract_min_max(test_tup, K) {\n    let res = [];\n    test_tup = Array.from(test_tup);\n    let temp = [...test_tup].sort((a, b) => a - b);\n    for (let idx = 0; idx < temp.length; idx++) {\n        let val = temp[idx];\n        if (idx < K || idx >= temp.length - K) {\n            res.push(val);\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testExtract_min_max = () => {\n    console.assert(JSON.stringify(extract_min_max([5, 20, 3, 7, 6, 8], 2)) === JSON.stringify([3, 5, 8, 20]), 'Test 1 failed');\n    console.assert(JSON.stringify(extract_min_max([4, 5, 6, 1, 2, 7], 3)) === JSON.stringify([1, 2, 4, 5, 6, 7]), 'Test 2 failed');\n    console.assert(JSON.stringify(extract_min_max([2, 3, 4, 8, 9, 11, 7], 4)) === JSON.stringify([2, 3, 4, 7, 8, 9, 11]), 'Test 3 failed');\n}\n\ntestExtract_min_max() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_min_max(test_tup, K) {\n    let res = [];\n    test_tup = Array.from(test_tup);\n    let temp = [...test_tup].sort((a, b) => a - b);\n    for (let idx = 0; idx < temp.length; idx++) {\n        let val = temp[idx];\n        //begin to write code\n",
        "javascript_prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code_str_generate": "function extract_min_max(test_tup, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract maximum and minimum k elements in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = [];\n    test_tup = Array.from(test_tup);\n    let temp = [...test_tup].sort((a, b) => a - b);\n    for (let idx = 0; idx < temp.length; idx++) {\n        let val = temp[idx];\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 209,
        "task_id": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code_str": "function replace_max_specialchar(text, n) {\n    return text.replace(/[ ,.]/g, (match, offset, string) => {\n        if (n > 0) {\n            n--;\n            return \":\";\n        }\n        return match;\n    });\n}\n\n",
        "test": "const testReplace_max_specialchar = () => {\n    console.assert(replace_max_specialchar('Python language, Programming language.', 2) === 'Python:language: Programming language.');\n    console.assert(replace_max_specialchar('a b c,d e f', 3) === 'a:b:c:d e f');\n    console.assert(replace_max_specialchar('ram reshma,ram rahim', 1) === 'ram:reshma,ram rahim');\n}\ntestReplace_max_specialchar();",
        "is_deleted": 1,
        "code_str_deleted": "function replace_max_specialchar(text, n) {\n    return text.replace(/[ ,.]/g, (match, offset, string) => {\n        if (n > 0) {\n            n--;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code_str_generate": "function replace_max_specialchar(text, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return text.replace(/[ ,.]/g, (match, offset, string) => {\n        if (n > 0) {\n            n--;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 210,
        "task_id": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.",
        "code_str": "function firstEven(nums) {\n    const firstEven = nums.find(el => el % 2 === 0);\n    return firstEven !== undefined ? firstEven : -1;\n}\n\n",
        "test": "const testFirstEven = () => {\n    console.assert(firstEven([1, 3, 5, 7, 4, 1, 6, 8]) === 4);\n    console.assert(firstEven([2, 3, 4]) === 2);\n    console.assert(firstEven([5, 6, 7]) === 6);\n}\n\ntestFirstEven();",
        "is_deleted": 1,
        "code_str_deleted": "function firstEven(nums) {\n    const firstEven = nums.find(el => el % 2 === 0);\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first even number in a given list of numbers.",
        "code_str_generate": "function firstEven(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first even number in a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const firstEven = nums.find(el => el % 2 === 0);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 211,
        "task_id": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "code_str": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testcheck_type = () => {\n    console.assert(check_type([5, 6, 7, 3, 5, 6]) === true);\n    console.assert(check_type([1, 2, \"4\"]) === false);\n    console.assert(check_type([3, 2, 1, 4, 5]) === true);\n}\ntestcheck_type() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function difinition\nfunction check_type(test_tuple) {\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "code_str_generate": "//function difinition\nfunction check_type(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if all the elements in tuple have same data type or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = true;\n    for (let ele of test_tuple) {\n        if (typeof ele !== typeof test_tuple[0]) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 212,
        "task_id": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.",
        "code_str": "function is_majority(arr, n, x) {\n    let i = binary_search(arr, 0, n - 1, x);\n    if (i === -1) {\n        return false;\n    }\n    if ((i + Math.floor(n / 2)) <= (n - 1) && arr[i + Math.floor(n / 2)] === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction binary_search(arr, low, high, x) {\n    if (high >= low) {\n        let mid = Math.floor((low + high) / 2);\n        if ((mid === 0 || x > arr[mid - 1]) && arr[mid] === x) {\n            return mid;\n        } else if (x > arr[mid]) {\n            return binary_search(arr, mid + 1, high, x);\n        } else {\n            return binary_search(arr, low, mid - 1, x);\n        }\n    }\n    return -1;\n}\n\n",
        "test": "const testIsMajority = () => {\n    console.assert(is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) === true);\n    console.assert(is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) === false);\n    console.assert(is_majority([1, 1, 1, 2, 2], 5, 1) === true);\n}\n\ntestIsMajority(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_majority(arr, n, x) {\n    let i = binary_search(arr, 0, n - 1, x);\n    if (i === -1) {\n        return false;\n    }\n    if ((i + Math.floor(n / 2)) <= (n - 1) && arr[i + Math.floor(n / 2)] === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction binary_search(arr, low, high, x) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to check for majority element in the given sorted array.",
        "code_str_generate": "function is_majority(arr, n, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check for majority element in the given sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = binary_search(arr, 0, n - 1, x);\n    if (i === -1) {\n        return false;\n    }\n    if ((i + Math.floor(n / 2)) <= (n - 1) && arr[i + Math.floor(n / 2)] === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction binary_search(arr, low, high, x) {\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 213,
        "task_id": 224,
        "prompt": "Write a python function to count set bits of a given number.",
        "code_str": "function count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n        count += n & 1;\n        n >>= 1;\n    }\n    return count;\n} \n\n",
        "test": "const testcount_Set_Bits = () => {\n    console.assert(count_Set_Bits(2) === 1);\n    console.assert(count_Set_Bits(4) === 1);\n    console.assert(count_Set_Bits(6) === 2);\n}\ntestcount_Set_Bits(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Set_Bits(n) { \n    let count = 0;\n    while (n) { \n        count += n & 1;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count set bits of a given number.",
        "code_str_generate": "function count_Set_Bits(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count set bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n) { \n        count += n & 1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 214,
        "task_id": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
        "code_str": "function find_Min(arr, low, high) {\n    while (low < high) {\n        let mid = low + Math.floor((high - low) / 2);\n        if (arr[mid] === arr[high]) {\n            high -= 1;\n        } else if (arr[mid] > arr[high]) {\n            low = mid + 1;\n        } else {\n            high = mid;\n        }\n    }\n    return arr[high];\n}\n\n",
        "test": "const testfind_Min = () => {\n    console.assert(find_Min([1,2,3,4,5], 0, 4) === 1, 'Test 1 failed');\n    console.assert(find_Min([4,6,8], 0, 2) === 4, 'Test 2 failed');\n    console.assert(find_Min([2,3,5,7,9], 0, 4) === 2, 'Test 3 failed');\n}\ntestfind_Min(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Min(arr, low, high) {\n    while (low < high) {\n        let mid = low + Math.floor((high - low) / 2);\n        if (arr[mid] === arr[high]) {\n            high -= 1;\n        } else if (arr[mid] > arr[high]) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the minimum element in a sorted and rotated array.",
        "code_str_generate": "function find_Min(arr, low, high) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum element in a sorted and rotated array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (low < high) {\n        let mid = low + Math.floor((high - low) / 2);\n        if (arr[mid] === arr[high]) {\n            high -= 1;\n        } else if (arr[mid] > arr[high]) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 215,
        "task_id": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "code_str": "function odd_values_string(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n      result += str[i];\n    }\n  }\n  return result;\n}\n\n",
        "test": "const testOddValuesString = () => {\n  console.assert(odd_values_string('abcdef') === 'ace', \"Test 1 failed\");\n  console.assert(odd_values_string('python') === 'pto', \"Test 2 failed\");\n  console.assert(odd_values_string('data') === 'dt', \"Test 3 failed\");\n}\n\ntestOddValuesString() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function odd_values_string(str) {\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to remove the characters which have odd index values of a given string.",
        "code_str_generate": "function odd_values_string(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove the characters which have odd index values of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let result = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (i % 2 === 0) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 216,
        "task_id": 227,
        "prompt": "Write a function to find minimum of three numbers.",
        "code_str": "//function definition\nfunction min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n        smallest = b;\n    } else {\n        smallest = c;\n    }\n    return smallest;\n}\n\n",
        "test": "const testMin_of_three = () => {\n    console.assert(min_of_three(10, 20, 0) === 0, 'Test 1 failed');\n    console.assert(min_of_three(19, 15, 18) === 15, 'Test 2 failed');\n    console.assert(min_of_three(-10, -20, -30) === -30, 'Test 3 failed');\n}\n\ntestMin_of_three() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction min_of_three(a, b, c) {\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find minimum of three numbers.",
        "code_str_generate": "//function definition\nfunction min_of_three(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find minimum of three numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let smallest;\n    if (a <= b && a <= c) {\n        smallest = a;\n    } else if (b <= a && b <= c) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 217,
        "task_id": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "code_str": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test": "const testAll_Bits_Set_In_The_Given_Range = () => {\n    console.assert(all_Bits_Set_In_The_Given_Range(4, 1, 2) === true);\n    console.assert(all_Bits_Set_In_The_Given_Range(17, 2, 4) === true);\n    console.assert(all_Bits_Set_In_The_Given_Range(39, 4, 6) === false);\n}\n\ntestAll_Bits_Set_In_The_Given_Range();",
        "is_deleted": 1,
        "code_str_deleted": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether all the bits are unset in the given range or not.",
        "code_str_generate": "function all_Bits_Set_In_The_Given_Range(n, l, r) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether all the bits are unset in the given range or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n    let new_num = n & num;\n    if (new_num === 0) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 218,
        "task_id": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code_str": "function re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            j++;\n        }\n    }\n    return arr;\n}\n\n",
        "test": "const testRe_arrange_array = () => {\n    console.assert(JSON.stringify(re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)) === JSON.stringify([-1, -3, -7, 4, 5, 6, 2, 8, 9]), \"Test case 1 failed\");\n    console.assert(JSON.stringify(re_arrange_array([12, -14, -26, 13, 15], 5)) === JSON.stringify([-14, -26, 12, 13, 15]), \"Test case 2 failed\");\n    console.assert(JSON.stringify(re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)) === JSON.stringify([-42, -39, -78, 10, 24, 36, 85]), \"Test case 3 failed\");\n}\n\ntestRe_arrange_array(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function re_arrange_array(arr, n) {\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code_str_generate": "function re_arrange_array(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let j = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] < 0) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 219,
        "task_id": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.",
        "code_str": "//function difinition\nfunction replace_blank(str1, char) {\n    let str2 = str1.replace(/ /g, char);\n    return str2;\n}\n\n",
        "test": "const testreplace_blank = () => {\n    console.assert(replace_blank(\"hello people\", '@') === \"hello@people\");\n    console.assert(replace_blank(\"python program language\", '$') === \"python$program$language\");\n    console.assert(replace_blank(\"blank space\", \"-\") === \"blank-space\");\n}\ntestreplace_blank() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function difinition\nfunction replace_blank(str1, char) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to replace blank spaces with any character in a string.",
        "code_str_generate": "//function difinition\nfunction replace_blank(str1, char) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace blank spaces with any character in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 220,
        "task_id": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code_str": "function max_sum(tri, n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (let i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (let j = 1; j < i; j++) {\n            if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) {\n                tri[i][j] = tri[i][j] + tri[i - 1][j - 1];\n            } else {\n                tri[i][j] = tri[i][j] + tri[i - 1][j];\n            }\n        }\n    }\n    return Math.max(...tri[n - 1]);\n}\n\n",
        "test": "const testMax_sum = () => {\n    console.assert(max_sum([[1], [2,1], [3,3,2]], 3) === 6);\n    console.assert(max_sum([[1], [1, 2], [4, 1, 12]], 3) === 15);\n    console.assert(max_sum([[2], [3,2], [13,23,12]], 3) === 28);\n}\ntestMax_sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_sum(tri, n) {\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (let i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (let j = 1; j < i; j++) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code_str_generate": "function max_sum(tri, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum in the given right triangle of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n > 1) {\n        tri[1][1] = tri[1][1] + tri[0][0];\n        tri[1][0] = tri[1][0] + tri[0][0];\n    }\n    for (let i = 2; i < n; i++) {\n        tri[i][0] = tri[i][0] + tri[i - 1][0];\n        tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n        for (let j = 1; j < i; j++) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 221,
        "task_id": 232,
        "prompt": "Write a function to get the n largest items from a dataset.",
        "code_str": "function larg_nnum(list1, n) {\n    list1.sort((a, b) => b - a);\n    return list1.slice(0, n);\n}\n\n",
        "test": "const testLarg_nnum = () => {\n    console.assert(JSON.stringify(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) === JSON.stringify([100, 90]), 'Test1 failed');\n    console.assert(JSON.stringify(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)) === JSON.stringify([100, 90, 80, 70, 60]), 'Test2 failed');\n    console.assert(JSON.stringify(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)) === JSON.stringify([100, 90, 80]), 'Test3 failed');\n}\n\ntestLarg_nnum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function larg_nnum(list1, n) {\n    list1.sort((a, b) => b - a);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to get the n largest items from a dataset.",
        "code_str_generate": "function larg_nnum(list1, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the n largest items from a dataset.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.sort((a, b) => b - a);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 222,
        "task_id": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "code_str": "function lateralsuface_cylinder(r, h) {\n    let lateralsurface = 2 * 3.1415 * r * h;\n    return lateralsurface;\n}\n\n",
        "test": "const testlateralsuface_cylinder = () => {\n    console.assert(lateralsuface_cylinder(10, 5) === 314.15000000000003);\n    console.assert(lateralsuface_cylinder(4, 5) === 125.66000000000001);\n    console.assert(lateralsuface_cylinder(4, 10) === 251.32000000000002);\n}\n\ntestlateralsuface_cylinder(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function lateralsuface_cylinder(r, h) {\n    let lateralsurface = 2 * 3.1415 * r * h;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the lateral surface area of a cylinder.",
        "code_str_generate": "function lateralsuface_cylinder(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lateralsurface = 2 * 3.1415 * r * h;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 223,
        "task_id": 234,
        "prompt": "Write a function to find the volume of a cube.",
        "code_str": "function volume_cube(l) {\n  let volume = l * l * l;\n  return volume;\n}\n\n",
        "test": "const testVolume_cube = () => {\n  console.assert(volume_cube(3) === 27, \"Test case 1 failed\");\n  console.assert(volume_cube(2) === 8, \"Test case 2 failed\");\n  console.assert(volume_cube(5) === 125, \"Test case 3 failed\");\n}\ntestVolume_cube() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function volume_cube(l) {\n  let volume = l * l * l;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the volume of a cube.",
        "code_str_generate": "function volume_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the volume of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let volume = l * l * l;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 224,
        "task_id": 235,
        "prompt": "Write a python function to set all even bits of a given number.",
        "code_str": "function even_bit_set_number(n) {\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n            res |= (1 << count);\n        }\n        count += 1;\n        temp >>= 1;\n    }\n    return (n | res);\n}\n\n",
        "test": "const testEven_bit_set_number = () => {\n    console.assert(even_bit_set_number(10) === 10, \"Test case 1 failed\");\n    console.assert(even_bit_set_number(20) === 30, \"Test case 2 failed\");\n    console.assert(even_bit_set_number(30) === 30, \"Test case 3 failed\");\n}\n\ntestEven_bit_set_number(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function even_bit_set_number(n) {\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to set all even bits of a given number.",
        "code_str_generate": "function even_bit_set_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to set all even bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    let res = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 == 1) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 225,
        "task_id": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code_str": "function No_of_Triangle(N, K) {\n    if (N < K) {\n        return -1;\n    } else {\n        let Tri_up = 0;\n        Tri_up = Math.floor(((N - K + 1) * (N - K + 2)) / 2);\n        let Tri_down = 0;\n        Tri_down = Math.floor(((N - 2 * K + 1) * (N - 2 * K + 2)) / 2);\n        return Tri_up + Tri_down;\n    }\n}\n\n",
        "test": "const testNo_of_Triangle = () => {\n    console.assert(No_of_Triangle(4, 2) === 7, 'Test 1 failed');\n    console.assert(No_of_Triangle(4, 3) === 3, 'Test 2 failed');\n    console.assert(No_of_Triangle(1, 3) === -1, 'Test 3 failed');\n}\n\ntestNo_of_Triangle() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function No_of_Triangle(N, K) {\n    if (N < K) {\n        return -1;\n    } else {\n        let Tri_up = 0;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code_str_generate": "function No_of_Triangle(N, K) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (N < K) {\n        return -1;\n    } else {\n        let Tri_up = 0;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 226,
        "task_id": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code_str": "function check_occurences(test_list) {\n    const res = {};\n    test_list.map(pair => pair.sort((a,b) => a - b))\n        .forEach(sortedPair => {\n            const key = JSON.stringify(sortedPair);\n            res[key] = (res[key] || 0) + 1;\n        });\n    return res;\n}",
        "test": "const testCheck_occurences = () => {\n    console.assert(JSON.stringify(check_occurences([[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]])) === JSON.stringify({\"[1,3]\": 2, \"[2,5]\": 2, \"[3,6]\": 1}));\n    console.assert(JSON.stringify(check_occurences([[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]])) === JSON.stringify({\"[2,4]\": 2, \"[3,6]\": 2, \"[4,7]\": 1}));\n    console.assert(JSON.stringify(check_occurences([[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]])) === JSON.stringify({\"[2,13]\": 1, \"[11,23]\": 1, \"[12,25]\": 2, \"[16,23]\": 1}));\n}\n\ntestCheck_occurences(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_occurences(test_list) {\n    const res = {};\n    test_list.map(pair => pair.sort((a,b) => a - b))\n        .forEach(sortedPair => {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code_str_generate": "function check_occurences(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = {};\n    test_list.map(pair => pair.sort((a,b) => a - b))\n        .forEach(sortedPair => {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 227,
        "task_id": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.",
        "code_str": "function numberOfSubstrings(str) {\n    const strLen = str.length;\n    return parseInt(strLen * (strLen + 1) / 2);\n}\n\n",
        "test": "const testNumberOfSubstrings = () => {\n    console.assert(numberOfSubstrings(\"abc\") === 6, \"Test 1 failed\");\n    console.assert(numberOfSubstrings(\"abcd\") === 10, \"Test 2 failed\");\n    console.assert(numberOfSubstrings(\"abcde\") === 15, \"Test 3 failed\");\n}\n\ntestNumberOfSubstrings() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function numberOfSubstrings(str) {\n    const strLen = str.length;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count number of non-empty substrings of a given string.",
        "code_str_generate": "function numberOfSubstrings(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count number of non-empty substrings of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const strLen = str.length;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 228,
        "task_id": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code_str": "function get_total_number_of_sequences(m, n) {\n    let T = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i === 0 || j === 0) {\n                T[i][j] = 0;\n            } else if (i < j) {\n                T[i][j] = 0;\n            } else if (j === 1) {\n                T[i][j] = i;\n            } else {\n                T[i][j] = T[i - 1][j] + T[Math.floor(i / 2)][j - 1];\n            }\n        }\n    }\n    return T[m][n];\n}\n\n",
        "test": "const testGet_total_number_of_sequences = () => {\n    console.assert(get_total_number_of_sequences(10, 4) === 4, 'Test 1 failed');\n    console.assert(get_total_number_of_sequences(5, 2) === 6, 'Test 2 failed');\n    console.assert(get_total_number_of_sequences(16, 3) === 84, 'Test 3 failed');\n}\n\ntestGet_total_number_of_sequences(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_total_number_of_sequences(m, n) {\n    let T = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i === 0 || j === 0) {\n                T[i][j] = 0;\n            } else if (i < j) {\n                T[i][j] = 0;\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code_str_generate": "function get_total_number_of_sequences(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let T = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 0; i <= m; i++) {\n        for (let j = 0; j <= n; j++) {\n            if (i === 0 || j === 0) {\n                T[i][j] = 0;\n            } else if (i < j) {\n                T[i][j] = 0;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 229,
        "task_id": 240,
        "prompt": "Write a function to replace the last element of the list with another list.",
        "code_str": "function replaceList(list1, list2) {\n    list1.splice(-1, 1, ...list2);\n    return list1;\n}",
        "test": "const testReplaceList = () => {\n    console.assert(JSON.stringify(replaceList([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])) === JSON.stringify([1, 3, 5, 7, 9, 2, 4, 6, 8]), 'Test 1 failed');\n    console.assert(JSON.stringify(replaceList([1, 2, 3, 4, 5], [5, 6, 7, 8])) === JSON.stringify([1, 2, 3, 4, 5, 6, 7, 8]), 'Test 2 failed');\n    console.assert(JSON.stringify(replaceList([\"red\", \"blue\", \"green\"], [\"yellow\"])) === JSON.stringify([\"red\", \"blue\", \"yellow\"]), 'Test 3 failed');\n}\ntestReplaceList();",
        "is_deleted": 1,
        "code_str_deleted": "function replaceList(list1, list2) {\n    list1.splice(-1, 1, ...list2);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to replace the last element of the list with another list.",
        "code_str_generate": "function replaceList(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace the last element of the list with another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    list1.splice(-1, 1, ...list2);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 230,
        "task_id": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.",
        "code_str": "function array_3d(m, n, o) {\n    let array_3d = [];\n    for (let row = 0; row < o; row++) {\n        let nArray = [];\n        for (let col = 0; col < n; col++) {\n            let mArray = new Array(m).fill('*');\n            nArray.push(mArray);\n        }\n        array_3d.push(nArray);\n    }\n    return array_3d;\n}\n\n",
        "test": "const testArray_3d = () => {\n    console.assert(JSON.stringify(array_3d(6,4,3)) === JSON.stringify([[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]), 'Test 1 failed');\n    console.assert(JSON.stringify(array_3d(5,3,4)) === JSON.stringify([[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]), 'Test 2 failed');\n    console.assert(JSON.stringify(array_3d(1,2,3)) === JSON.stringify([[['*'],['*']],[['*'],['*']],[['*'],['*']]]), 'Test 3 failed');\n}\n\ntestArray_3d() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function array_3d(m, n, o) {\n    let array_3d = [];\n    for (let row = 0; row < o; row++) {\n        let nArray = [];\n        for (let col = 0; col < n; col++) {\n            let mArray = new Array(m).fill('*');\n            //begin to write code\n",
        "javascript_prompt": "Write a function to generate a 3d array having each element as '*'.",
        "code_str_generate": "function array_3d(m, n, o) {\n\n    /*\n    progame language:javascript\n    description:Write a function to generate a 3d array having each element as '*'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let array_3d = [];\n    for (let row = 0; row < o; row++) {\n        let nArray = [];\n        for (let col = 0; col < n; col++) {\n            let mArray = new Array(m).fill('*');\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 231,
        "task_id": 242,
        "prompt": "Write a function to count total characters in a string.",
        "code_str": "function count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n        total = total + 1;\n    }\n    return total;\n}\n\n",
        "test": "const testcount_charac = () => {\n    console.assert(count_charac(\"python programming\") === 18);\n    console.assert(count_charac(\"language\") === 8);\n    console.assert(count_charac(\"words\") === 5);\n}\ntestcount_charac() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_charac(str1) {\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to count total characters in a string.",
        "code_str_generate": "function count_charac(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count total characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = 0;\n    for (let i of str1) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 232,
        "task_id": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code_str": "function sortOnOccurence(lst) {\n    const dct = {};\n    for (const [i, j] of lst) {\n        if (!dct[i]) dct[i] = [];\n        dct[i].push(j);\n    }\n    return Object.entries(dct).map(([i, j]) => {\n        const unique = [...new Set(j)];\n        return [i, ...unique, unique.length];\n    });\n}",
        "test": "const testSortOnOccurence = () => {\n    console.assert(JSON.stringify(sortOnOccurence([[1, 'Jake'], [2, 'Bob'], [1, 'Cara']])) === JSON.stringify([['1', 'Jake', 'Cara', 2], ['2', 'Bob', 1]]), 'Test 1 Failed');\n    console.assert(JSON.stringify(sortOnOccurence([['b', 'ball'], ['a', 'arm'], ['b', 'b'], ['a', 'ant']])) === JSON.stringify([['b', 'ball', 'b', 2], ['a', 'arm', 'ant', 2]]), 'Test 2 Failed');\n    console.assert(JSON.stringify(sortOnOccurence([[2, 'Mark'], [3, 'Maze'], [2, 'Sara']])) === JSON.stringify([['2', 'Mark', 'Sara', 2], ['3', 'Maze', 1]]), 'Test 3 Failed');\n}\n\ntestSortOnOccurence(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sortOnOccurence(lst) {\n    const dct = {};\n    for (const [i, j] of lst) {\n        if (!dct[i]) dct[i] = [];\n        dct[i].push(j);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code_str_generate": "function sortOnOccurence(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort the given list based on the occurrence of first element of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dct = {};\n    for (const [i, j] of lst) {\n        if (!dct[i]) dct[i] = [];\n        dct[i].push(j);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 233,
        "task_id": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "code_str": "function next_Perfect_Square(N) {\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    return nextN * nextN;\n}\n\n",
        "test": "const testNext_Perfect_Square = () => {\n    console.assert(next_Perfect_Square(35) === 36, 'Test case 1 failed');\n    console.assert(next_Perfect_Square(6) === 9, 'Test case 2 failed');\n    console.assert(next_Perfect_Square(9) === 16, 'Test case 3 failed');\n}\n\ntestNext_Perfect_Square();",
        "is_deleted": 1,
        "code_str_deleted": "function next_Perfect_Square(N) {\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the next perfect square greater than a given number.",
        "code_str_generate": "function next_Perfect_Square(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the next perfect square greater than a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let nextN = Math.floor(Math.sqrt(N)) + 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 234,
        "task_id": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code_str": "function max_sum(arr, n) {\n    let MSIBS = [...arr];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n\n    let MSDBS = [...arr];\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j < i; j++) {\n            if (arr[n - i] > arr[n - j] && MSDBS[n - i] < MSDBS[n - j] + arr[n - i]) {\n                MSDBS[n - i] = MSDBS[n - j] + arr[n - i];\n            }\n        }\n    }\n\n    let max_sum = Number.NEGATIVE_INFINITY;\n    for (let i = 0; i < n; i++) {\n        max_sum = Math.max(max_sum, MSIBS[i] + MSDBS[i] - arr[i]);\n    }\n    return max_sum;\n}\n\n",
        "test": "const testMax_sum = () => {\n    console.assert(max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) === 194, \"Test 1 Failed\");\n    console.assert(max_sum([80, 60, 30, 40, 20, 10], 6) === 210, \"Test 2 Failed\");\n    console.assert(max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8) === 138, \"Test 3 Failed\");\n}\n\ntestMax_sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_sum(arr, n) {\n    let MSIBS = [...arr];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n    let MSDBS = [...arr];\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code_str_generate": "function max_sum(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let MSIBS = [...arr];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < i; j++) {\n            if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                MSIBS[i] = MSIBS[j] + arr[i];\n            }\n        }\n    }\n    let MSDBS = [...arr];\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 235,
        "task_id": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "code_str": "function babylonian_squareroot(number) {\n    if (number === 0) {\n        return 0;\n    }\n    let g = number / 2.0;\n    let g2 = g + 1;\n    while (g !== g2) {\n        let n = number / g;\n        g2 = g;\n        g = (g + n) / 2;\n    }\n    return g;\n}\n\n",
        "test": "const testbabylonian_squareroot = () => {\n    console.assert(babylonian_squareroot(10) === 3.162277660168379, `Expected 3.162277660168379 but got ${babylonian_squareroot(10)}`);\n    console.assert(babylonian_squareroot(2) === 1.414213562373095, `Expected 1.414213562373095 but got ${babylonian_squareroot(2)}`);\n    console.assert(babylonian_squareroot(9) === 3.0, `Expected 3.0 but got ${babylonian_squareroot(9)}`);\n}\ntestbabylonian_squareroot() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function babylonian_squareroot(number) {\n    if (number === 0) {\n        return 0;\n    }\n    let g = number / 2.0;\n    let g2 = g + 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a function for computing square roots using the babylonian method.",
        "code_str_generate": "function babylonian_squareroot(number) {\n\n    /*\n    progame language:javascript\n    description:Write a function for computing square roots using the babylonian method.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (number === 0) {\n        return 0;\n    }\n    let g = number / 2.0;\n    let g2 = g + 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 236,
        "task_id": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "code_str": "function lps(str) {\n    const n = str.length;\n    const L = Array.from({ length: n }, () => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n    for (let cl = 2; cl <= n; cl++) {\n        for (let i = 0; i < n - cl + 1; i++) {\n            let j = i + cl - 1;\n            if (str[i] === str[j] && cl === 2) {\n                L[i][j] = 2;\n            } else if (str[i] === str[j]) {\n                L[i][j] = L[i + 1][j - 1] + 2;\n            } else {\n                L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n            }\n        }\n    }\n    return L[0][n - 1];\n}\n\n",
        "test": "const testLps = () => {\n    console.assert(lps(\"TENS FOR TENS\") === 5, \"Test 1 Failed\");\n    console.assert(lps(\"CARDIO FOR CARDS\") === 7, \"Test 2 Failed\");\n    console.assert(lps(\"PART OF THE JOURNEY IS PART\") === 9, \"Test 3 Failed\");\n}\ntestLps();",
        "is_deleted": 1,
        "code_str_deleted": "function lps(str) {\n    const n = str.length;\n    const L = Array.from({ length: n }, () => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n    for (let cl = 2; cl <= n; cl++) {\n        for (let i = 0; i < n - cl + 1; i++) {\n            let j = i + cl - 1;\n            if (str[i] === str[j] && cl === 2) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "code_str_generate": "function lps(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the longest palindromic subsequence in the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const n = str.length;\n    const L = Array.from({ length: n }, () => new Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        L[i][i] = 1;\n    }\n    for (let cl = 2; cl <= n; cl++) {\n        for (let i = 0; i < n - cl + 1; i++) {\n            let j = i + cl - 1;\n            if (str[i] === str[j] && cl === 2) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 237,
        "task_id": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.",
        "code_str": "function harmonic_sum(n) {\n  if (n < 2) {\n    return 1;\n  } else {\n    return 1 / n + harmonic_sum(n - 1);\n  }\n}\n\n",
        "test": "const testharmonic_sum = () => {\n  console.assert(harmonic_sum(7) === 2.5928571428571425, `Expected 2.5928571428571425, got ${harmonic_sum(7)}`);\n  console.assert(harmonic_sum(4) === 2.083333333333333, `Expected 2.083333333333333, got ${harmonic_sum(4)}`);\n  console.assert(harmonic_sum(19) === 3.547739657143682, `Expected 3.547739657143682, got ${harmonic_sum(19)}`);\n}\ntestharmonic_sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function harmonic_sum(n) {\n  if (n < 2) {\n    return 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the harmonic sum of n-1.",
        "code_str_generate": "function harmonic_sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the harmonic sum of n-1.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  if (n < 2) {\n    return 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 238,
        "task_id": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "code_str": "function intersection_array(array_nums1, array_nums2) {\n    return array_nums2.filter(x => array_nums1.includes(x));\n}\n\n",
        "test": "const testIntersection_array = () => {\n    console.assert(JSON.stringify(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])) === JSON.stringify([1, 2, 8, 9]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])) === JSON.stringify([3, 5, 7, 9]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])) === JSON.stringify([10]), \"Test 3 Failed\");\n}\ntestIntersection_array() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function intersection_array(array_nums1, array_nums2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "code_str_generate": "function intersection_array(array_nums1, array_nums2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the intersection of two arrays using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 239,
        "task_id": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.",
        "code_str": "function count_X(tup, x) { \n    let count = 0;\n    for (let ele of tup) { \n        if (ele === x) { \n            count += 1;\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testCount_X = () => {\n    console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) === 0);\n    console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) === 3);\n    console.assert(count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) === 4);\n}\ntestCount_X(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_X(tup, x) { \n    let count = 0;\n    for (let ele of tup) { \n        if (ele === x) { \n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the occcurences of an element in a tuple.",
        "code_str_generate": "function count_X(tup, x) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occcurences of an element in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (let ele of tup) { \n        if (ele === x) { \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 240,
        "task_id": 251,
        "prompt": "Write a function to insert an element before each element of a list.",
        "code_str": "function insert_element(list, element) {\n    let newList = [];\n    for (let elt of list) {\n        newList.push(element, elt);\n    }\n    return newList;\n}\n\n",
        "test": "const testInsert_element = () => {\n    console.assert(JSON.stringify(insert_element(['Red', 'Green', 'Black'], 'c')) === JSON.stringify(['c', 'Red', 'c', 'Green', 'c', 'Black']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(insert_element(['python', 'java'], 'program')) === JSON.stringify(['program', 'python', 'program', 'java']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(insert_element(['happy', 'sad'], 'laugh')) === JSON.stringify(['laugh', 'happy', 'laugh', 'sad']), \"Test 3 Failed\");\n}\ntestInsert_element() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function insert_element(list, element) {\n    let newList = [];\n    for (let elt of list) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to insert an element before each element of a list.",
        "code_str_generate": "function insert_element(list, element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to insert an element before each element of a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let newList = [];\n    for (let elt of list) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 241,
        "task_id": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "code_str": "function convert(numbers) {\n    const num = Math.abs(numbers);  \n    const angle = Math.atan2(0, numbers); \n    return [num, angle];\n}\n\n",
        "test": "const testConvert = () => {\n    console.assert(JSON.stringify(convert(1)) === JSON.stringify([1.0, 0.0]));\n    console.assert(JSON.stringify(convert(4)) === JSON.stringify([4.0, 0.0]));\n    console.assert(JSON.stringify(convert(5)) === JSON.stringify([5.0, 0.0]));\n}\ntestConvert() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function convert(numbers) {\n    const num = Math.abs(numbers);  \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to convert complex numbers to polar coordinates.",
        "code_str_generate": "function convert(numbers) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert complex numbers to polar coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const num = Math.abs(numbers);  \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 242,
        "task_id": 253,
        "prompt": "Write a python function to count integers from a given list.",
        "code_str": "function countInteger(list1) {\n    let ctr = 0;\n    for (let i of list1) {\n        if (Number.isInteger(i)) {\n            ctr++;\n        }\n    }\n    return ctr;\n}\n\n",
        "test": "const testCountInteger = () => {\n    console.assert(countInteger([1, 2, 'abc', 1.2]) === 2);\n    console.assert(countInteger([1, 2, 3]) === 3);\n    console.assert(countInteger([1, 1.2, 4, 5.1]) === 2);\n}\n\ntestCountInteger() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function countInteger(list1) {\n    let ctr = 0;\n    for (let i of list1) {\n        if (Number.isInteger(i)) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count integers from a given list.",
        "code_str_generate": "function countInteger(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count integers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i of list1) {\n        if (Number.isInteger(i)) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 243,
        "task_id": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code_str": "function words_ae(text) {\n    return text.match(/[ae]\\w+/g) || [];\n}\n\n",
        "test": "const testWords_ae = () => {\n    console.assert(JSON.stringify(words_ae(\"python programe\")) === JSON.stringify(['ame']), \"Test 1 failed\");\n    console.assert(JSON.stringify(words_ae(\"python programe language\")) === JSON.stringify(['ame', 'anguage']), \"Test 2 failed\");\n    console.assert(JSON.stringify(words_ae(\"assert statement\")) === JSON.stringify(['assert', 'atement']), \"Test 3 failed\");\n}\n\ntestWords_ae() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function words_ae(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code_str_generate": "function words_ae(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all words starting with 'a' or 'e' in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 244,
        "task_id": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code_str": "function combinationsColors(l, n) {\n    const combinations = [];\n    const generateCombinations = (current, start) => {\n        if (current.length === n) {\n            combinations.push([...current]);\n            return;\n        }\n        for (let i = start; i < l.length; i++) {\n            current.push(l[i]);\n            generateCombinations(current, i);\n            current.pop();\n        }\n    };\n    generateCombinations([], 0);\n    return combinations;\n}\n\n",
        "test": "const testCombinationsColors = () => {\n    console.assert(JSON.stringify(combinationsColors([\"Red\", \"Green\", \"Blue\"], 1)) === JSON.stringify([[\"Red\"], [\"Green\"], [\"Blue\"]]), 'Test 1 failed');\n    console.assert(JSON.stringify(combinationsColors([\"Red\", \"Green\", \"Blue\"], 2)) === JSON.stringify([[\"Red\", \"Red\"], [\"Red\", \"Green\"], [\"Red\", \"Blue\"], [\"Green\", \"Green\"], [\"Green\", \"Blue\"], [\"Blue\", \"Blue\"]]), 'Test 2 failed');\n    console.assert(JSON.stringify(combinationsColors([\"Red\", \"Green\", \"Blue\"], 3)) === JSON.stringify([[\"Red\", \"Red\", \"Red\"], [\"Red\", \"Red\", \"Green\"], [\"Red\", \"Red\", \"Blue\"], [\"Red\", \"Green\", \"Green\"], [\"Red\", \"Green\", \"Blue\"], [\"Red\", \"Blue\", \"Blue\"], [\"Green\", \"Green\", \"Green\"], [\"Green\", \"Green\", \"Blue\"], [\"Green\", \"Blue\", \"Blue\"], [\"Blue\", \"Blue\", \"Blue\"]]), 'Test 3 failed');\n}\n\ntestCombinationsColors(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function combinationsColors(l, n) {\n    const combinations = [];\n    const generateCombinations = (current, start) => {\n        if (current.length === n) {\n            combinations.push([...current]);\n            return;\n        }\n        for (let i = start; i < l.length; i++) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code_str_generate": "function combinationsColors(l, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const combinations = [];\n    const generateCombinations = (current, start) => {\n        if (current.length === n) {\n            combinations.push([...current]);\n            return;\n        }\n        for (let i = start; i < l.length; i++) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 245,
        "task_id": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "code_str": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) ctr++;\n    }\n    return ctr;\n}\n\n",
        "test": "const testcount_Primes_nums = () => {\n    console.assert(count_Primes_nums(5) === 2);\n    console.assert(count_Primes_nums(10) === 4);\n    console.assert(count_Primes_nums(100) === 25);\n}\n\ntestcount_Primes_nums(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Primes_nums(n) {\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of prime numbers less than a given non-negative number.",
        "code_str_generate": "function count_Primes_nums(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of prime numbers less than a given non-negative number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let num = 0; num < n; num++) {\n        if (num <= 1) {\n            continue;\n       }\n        let isPrime = true;\n        for (let i = 2; i < num; i++) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 246,
        "task_id": 257,
        "prompt": "Write a function to swap two numbers.",
        "code_str": "function swap_numbers(a, b) {\n    let temp = a;\n    a = b;\n    b = temp;\n    return [a, b];\n}\n\n",
        "test": "const testSwap_numbers = () => {\n    console.assert(JSON.stringify(swap_numbers(10, 20)) === JSON.stringify([20, 10]));\n    console.assert(JSON.stringify(swap_numbers(15, 17)) === JSON.stringify([17, 15]));\n    console.assert(JSON.stringify(swap_numbers(100, 200)) === JSON.stringify([200, 100]));\n}\n\ntestSwap_numbers();",
        "is_deleted": 1,
        "code_str_deleted": "function swap_numbers(a, b) {\n    let temp = a;\n    a = b;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to swap two numbers.",
        "code_str_generate": "function swap_numbers(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to swap two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let temp = a;\n    a = b;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 247,
        "task_id": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "code_str": "function count_odd(array_nums) {\n    let count_odd = array_nums.filter(x => x % 2 !== 0).length;\n    return count_odd;\n}\n\n",
        "test": "const testcount_odd = () => {\n    console.assert(count_odd([1, 2, 3, 5, 7, 8, 10]) === 4);\n    console.assert(count_odd([10, 15, 14, 13, -18, 12, -20]) === 2);\n    console.assert(count_odd([1, 2, 4, 8, 9]) === 2);\n}\n\ntestcount_odd(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_odd(array_nums) {\n    let count_odd = array_nums.filter(x => x % 2 !== 0).length;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "code_str_generate": "function count_odd(array_nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find number of odd elements in the given list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_odd = array_nums.filter(x => x % 2 !== 0).length;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 248,
        "task_id": 259,
        "prompt": "Write a function to maximize the given two tuples.",
        "code_str": "function maximize_elements(test_tup1, test_tup2) {\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        return tup1.map((element, subIndex) => {\n            return Math.max(element, tup2[subIndex]);\n        });\n    });\n    return res;\n}\n\n",
        "test": "const testMaximize_elements = () => {\n    console.assert(JSON.stringify(maximize_elements([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[6, 7], [4, 9], [2, 9], [7, 10]]), 'Test 1 failed');\n    console.assert(JSON.stringify(maximize_elements([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[7, 8], [5, 10], [3, 10], [8, 11]]), 'Test 2 failed');\n    console.assert(JSON.stringify(maximize_elements([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[8, 9], [6, 11], [4, 11], [9, 12]]), 'Test 3 failed');\n}\n\ntestMaximize_elements(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maximize_elements(test_tup1, test_tup2) {\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        return tup1.map((element, subIndex) => {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to maximize the given two tuples.",
        "code_str_generate": "function maximize_elements(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to maximize the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        return tup1.map((element, subIndex) => {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 249,
        "task_id": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code_str": "function newman_prime(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n    }\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2);\n}\n\n",
        "test": "const testNewman_prime = () => {\n    console.assert(newman_prime(3) === 7, \"Test case 1 failed\");\n    console.assert(newman_prime(4) === 17, \"Test case 2 failed\");\n    console.assert(newman_prime(5) === 41, \"Test case 3 failed\");\n}\ntestNewman_prime(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function newman_prime(n) {\n    if (n === 0 || n === 1) {\n        return 1;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code_str_generate": "function newman_prime(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 0 || n === 1) {\n        return 1;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 250,
        "task_id": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "code_str": "function divisionElements(testTup1, testTup2) {\n    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));\n    return res;\n}\n\n",
        "test": "const testDivisionElements = () => {\n    console.assert(JSON.stringify(divisionElements([10, 4, 6, 9],[5, 2, 3, 3])) === JSON.stringify([2, 2, 2, 3]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(divisionElements([12, 6, 8, 16],[6, 3, 4, 4])) === JSON.stringify([2, 2, 2, 4]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(divisionElements([20, 14, 36, 18],[5, 7, 6, 9])) === JSON.stringify([4, 2, 6, 2]), \"Test 3 Failed\");\n}\n\ntestDivisionElements() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function divisionElements(testTup1, testTup2) {\n    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "code_str_generate": "function divisionElements(testTup1, testTup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform mathematical division operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = testTup1.map((ele1, index) => Math.floor(ele1 / testTup2[index]));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 251,
        "task_id": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code_str": "function split_two_parts(list1, L) {\n    return [list1.slice(0, L), list1.slice(L)];\n}\n\n",
        "test": "const testSplit_two_parts = () => {\n    console.assert(JSON.stringify(split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)) === JSON.stringify([[1, 1, 2], [3, 4, 4, 5, 1]]), 'Test 1 failed');\n    console.assert(JSON.stringify(split_two_parts(['a', 'b', 'c', 'd'], 2)) === JSON.stringify([['a', 'b'], ['c', 'd']]), 'Test 2 failed');\n    console.assert(JSON.stringify(split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)) === JSON.stringify([['p', 'y', 't', 'h'], ['o', 'n']]), 'Test 3 failed');\n}\ntestSplit_two_parts() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function split_two_parts(list1, L) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code_str_generate": "function split_two_parts(list1, L) {\n\n    /*\n    progame language:javascript\n    description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 252,
        "task_id": 263,
        "prompt": "Write a function to merge two dictionaries.",
        "code_str": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    sortedKeys.forEach(key => {\n    sortedDict[key] = d[key];\n    });\n    return sortedDict;\n}",
        "test": "const testmerge_dict = () => {\n    console.assert(JSON.stringify(merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})) === JSON.stringify({'a': 100, 'b': 200,'x': 300, 'y': 200}), \"Test 1 failed\");\n    console.assert(JSON.stringify(merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})) === JSON.stringify({'a': 900, 'b': 900, 'd': 900}), \"Test 2 failed\");\n    console.assert(JSON.stringify(merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})) === JSON.stringify({'a': 10, 'b': 20,'x': 30, 'y': 40}), \"Test 3 failed\");\n}\ntestmerge_dict() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function merge_dict(d1, d2) {\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n",
        "javascript_prompt": "Write a function to merge two dictionaries.",
        "code_str_generate": "function merge_dict(d1, d2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to merge two dictionaries.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let d = {...d1, ...d2};\n    const sortedKeys = Object.keys(d).sort();\n    const sortedDict = {};\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 253,
        "task_id": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "code_str": "function dog_age(h_age) {\n    if (h_age < 0) {\n        return;\n    } else if (h_age <= 2) {\n        return h_age * 10.5;\n    } else {\n        return 21 + (h_age - 2) * 4;\n    }\n}\n\n",
        "test": "const testDog_age = () => {\n    console.assert(dog_age(12) === 61, 'Test 1 failed');\n    console.assert(dog_age(15) === 73, 'Test 2 failed');\n    console.assert(dog_age(24) === 109, 'Test 3 failed');\n}\ntestDog_age() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function dog_age(h_age) {\n    if (h_age < 0) {\n        return;\n    } else if (h_age <= 2) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to calculate a dog's age in dog's years.",
        "code_str_generate": "function dog_age(h_age) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate a dog's age in dog's years.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (h_age < 0) {\n        return;\n    } else if (h_age <= 2) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 254,
        "task_id": 265,
        "prompt": "Write a function to split a list for every nth element.",
        "code_str": "function list_split(S, step) {\n    return Array.from({ length: step }, (_, i) => S.filter((_, index) => index % step === i));\n}\n\n",
        "test": "const testList_split = () => {\n    console.assert(JSON.stringify(list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)) === JSON.stringify([['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)) === JSON.stringify([[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)) === JSON.stringify([['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]), \"Test 3 Failed\");\n}\n\ntestList_split(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function list_split(S, step) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to split a list for every nth element.",
        "code_str_generate": "function list_split(S, step) {\n\n    /*\n    progame language:javascript\n    description:Write a function to split a list for every nth element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 255,
        "task_id": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.",
        "code_str": "function lateralsurface_cube(l) {\n    const LSA = 4 * (l * l);\n    return LSA;\n}\n\n",
        "test": "const testlateralsurface_cube = () => {\n    console.assert(lateralsurface_cube(5) === 100);\n    console.assert(lateralsurface_cube(9) === 324);\n    console.assert(lateralsurface_cube(10) === 400);\n}\ntestlateralsurface_cube() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function lateralsurface_cube(l) {\n    const LSA = 4 * (l * l);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the lateral surface area of a cube.",
        "code_str_generate": "function lateralsurface_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const LSA = 4 * (l * l);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 256,
        "task_id": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "code_str": "function square_Sum(n) {\n    return Math.floor(n * (4 * n * n - 1) / 3);\n}\n\n",
        "test": "const testSquare_Sum = () => {\n    console.assert(square_Sum(2) === 10, \"Test case 1 failed\");\n    console.assert(square_Sum(3) === 35, \"Test case 2 failed\");\n    console.assert(square_Sum(4) === 84, \"Test case 3 failed\");\n}\n\ntestSquare_Sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function square_Sum(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of squares of first n odd natural numbers.",
        "code_str_generate": "function square_Sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of squares of first n odd natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 257,
        "task_id": 268,
        "prompt": "Write a function to find the n'th star number.",
        "code_str": "function find_star_num(n) {\n    return (6 * n * (n - 1) + 1);\n}\n\n",
        "test": "const testfind_star_num = () => {\n    console.assert(find_star_num(3) === 37);\n    console.assert(find_star_num(4) === 73);\n    console.assert(find_star_num(5) === 121);\n}\ntestfind_star_num()",
        "is_deleted": 1,
        "code_str_deleted": "function find_star_num(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the n'th star number.",
        "code_str_generate": "function find_star_num(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n'th star number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 258,
        "task_id": 269,
        "prompt": "Write a function to find the ascii value of a character.",
        "code_str": "function ascii_value(k) {\n  return k.charCodeAt(0);\n}\n\n",
        "test": "const testascii_value = () => {\n  console.assert(ascii_value('A') === 65);\n  console.assert(ascii_value('R') === 82);\n  console.assert(ascii_value('S') === 83);\n}\n\ntestascii_value()",
        "is_deleted": 1,
        "code_str_deleted": "function ascii_value(k) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the ascii value of a character.",
        "code_str_generate": "function ascii_value(k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ascii value of a character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 259,
        "task_id": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.",
        "code_str": "function sum_even_and_even_index(arr, n) {\n    let sum = 0;\n    for (let i = 0; i < n; i += 2) {\n        if (arr[i] % 2 === 0) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n",
        "test": "const testSum_even_and_even_index = () => {\n    console.assert(sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6) === 30, \"Test 1 Failed\");\n    console.assert(sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10) === 26, \"Test 2 Failed\");\n    console.assert(sum_even_and_even_index([5, 6, 12, 1], 4) === 12, \"Test 3 Failed\");\n}\n\ntestSum_even_and_even_index(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_even_and_even_index(arr, n) {\n    let sum = 0;\n    for (let i = 0; i < n; i += 2) {\n        if (arr[i] % 2 === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of even numbers at even positions.",
        "code_str_generate": "function sum_even_and_even_index(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of even numbers at even positions.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 0; i < n; i += 2) {\n        if (arr[i] % 2 === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 260,
        "task_id": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "code_str": "function even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let j = 2 * i; \n        sum += Math.pow(j, 5); \n    } \n    return sum; \n} \n\n",
        "test": "const testEven_Power_Sum = () => {\n    console.assert(even_Power_Sum(2) === 1056, \"Test case 1 failed\");\n    console.assert(even_Power_Sum(3) === 8832, \"Test case 2 failed\");\n    console.assert(even_Power_Sum(1) === 32, \"Test case 3 failed\");\n}\n\ntestEven_Power_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function even_Power_Sum(n) { \n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let j = 2 * i; \n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of fifth power of first n even natural numbers.",
        "code_str_generate": "function even_Power_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of fifth power of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0; \n    for (let i = 1; i <= n; i++) { \n        let j = 2 * i; \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 261,
        "task_id": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code_str": "function rear_extract(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  return res;\n}\n\n",
        "test": "const testrear_extract = () => {\n  console.assert(JSON.stringify(rear_extract([[1, 'Rash', 21], [2, 'Varsha', 20], [3, 'Kil', 19]])) === JSON.stringify([21, 20, 19]));\n  console.assert(JSON.stringify(rear_extract([[1, 'Sai', 36], [2, 'Ayesha', 25], [3, 'Salman', 45]])) === JSON.stringify([36, 25, 45]));\n  console.assert(JSON.stringify(rear_extract([[1, 'Sudeep', 14], [2, 'Vandana', 36], [3, 'Dawood', 56]])) === JSON.stringify([14, 36, 56]));\n}\ntestrear_extract(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function rear_extract(test_list) {\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code_str_generate": "function rear_extract(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perfom the rear element extraction from list of tuples records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const res = test_list.map(lis => lis[lis.length - 1]);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 262,
        "task_id": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code_str": "function subtractElements(testTuple1, testTuple2) {\n    return testTuple1.map((element, index) => element - testTuple2[index]);\n}\n\n",
        "test": "const testSubtractElements = () => {\n    console.assert(JSON.stringify(subtractElements([10, 4, 5], [2, 5, 18])) === JSON.stringify([8, -1, -13]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(subtractElements([11, 2, 3], [24, 45 ,16])) === JSON.stringify([-13, -43, -13]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(subtractElements([7, 18, 9], [10, 11, 12])) === JSON.stringify([-3, 7, -3]), \"Test 3 Failed\");\n}\ntestSubtractElements(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function subtractElements(testTuple1, testTuple2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code_str_generate": "function subtractElements(testTuple1, testTuple2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 263,
        "task_id": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.",
        "code_str": "function even_binomial_Coeff_Sum(n) {\n    return (1 << (n - 1));\n}\n\n",
        "test": "const testEven_binomial_Coeff_Sum = () => {\n    console.assert(even_binomial_Coeff_Sum(4) === 8);\n    console.assert(even_binomial_Coeff_Sum(6) === 32);\n    console.assert(even_binomial_Coeff_Sum(2) === 2);\n}\n\ntestEven_binomial_Coeff_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function even_binomial_Coeff_Sum(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find sum of even index binomial coefficients.",
        "code_str_generate": "function even_binomial_Coeff_Sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find sum of even index binomial coefficients.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 264,
        "task_id": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.",
        "code_str": "function get_Position(a, n, m) {\n    for (let i = 0; i < n; i++) {\n        a[i] = Math.floor(a[i] / m) + (a[i] % m !== 0 ? 1 : 0);\n    }\n    let result = -1;\n    let maxx = -1;\n    for (let i = n - 1; i >= 0; i--) {\n        if (maxx < a[i]) {\n            maxx = a[i];\n            result = i;\n        }\n    }\n    return result + 1;\n}\n\n",
        "test": "const testGet_Position = () => {\n    console.assert(get_Position([2, 5, 4], 3, 2) === 2, 'Test 1 failed');\n    console.assert(get_Position([4, 3], 2, 2) === 2, 'Test 2 failed');\n    console.assert(get_Position([1, 2, 3, 4], 4, 1) === 4, 'Test 3 failed');\n}\n\ntestGet_Position(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_Position(a, n, m) {\n    for (let i = 0; i < n; i++) {\n        a[i] = Math.floor(a[i] / m) + (a[i] % m !== 0 ? 1 : 0);\n    }\n    let result = -1;\n    let maxx = -1;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the position of the last removed element from the given array.",
        "code_str_generate": "function get_Position(a, n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the position of the last removed element from the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < n; i++) {\n        a[i] = Math.floor(a[i] / m) + (a[i] % m !== 0 ? 1 : 0);\n    }\n    let result = -1;\n    let maxx = -1;\n    for (let i = n - 1; i >= 0; i--) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 265,
        "task_id": 276,
        "prompt": "Write a function to find the volume of a cylinder.",
        "code_str": "function volume_cylinder(r, h) {\n  const volume = 3.1415 * r * r * h;\n  return volume;\n}\n\n",
        "test": "const testVolume_cylinder = () => {\n  console.assert(volume_cylinder(10, 5) === 1570.7500000000002);\n  console.assert(volume_cylinder(4, 5) === 251.32000000000002);\n  console.assert(volume_cylinder(4, 10) === 502.64000000000004);\n}\n\ntestVolume_cylinder(); // Invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function volume_cylinder(r, h) {\n  const volume = 3.1415 * r * r * h;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the volume of a cylinder.",
        "code_str_generate": "function volume_cylinder(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the volume of a cylinder.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const volume = 3.1415 * r * r * h;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 266,
        "task_id": 277,
        "prompt": "Write a function to filter a dictionary based on values.",
        "code_str": "function dict_filter(dict, n) {\n    let result = {};\n    for (const [key, value] of Object.entries(dict)) {\n        if (value >= n) {\n            result[key] = value;\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testDictFilter = () => {\n    console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)) === JSON.stringify({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}));\n    console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)) === JSON.stringify({'Alden Cantrell': 180, 'Pierre Cox': 190}));\n    console.assert(JSON.stringify(dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)) === JSON.stringify({'Pierre Cox': 190}));\n}\n\ntestDictFilter(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function dict_filter(dict, n) {\n    let result = {};\n    for (const [key, value] of Object.entries(dict)) {\n        if (value >= n) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to filter a dictionary based on values.",
        "code_str_generate": "function dict_filter(dict, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter a dictionary based on values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = {};\n    for (const [key, value] of Object.entries(dict)) {\n        if (value >= n) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 267,
        "task_id": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code_str": "function countFirstElements(testTup) {\n    for (let count = 0; count < testTup.length; count++) {\n        let ele = testTup[count];\n        if (Array.isArray(ele)) {\n            return count;\n        }\n    }\n    return testTup.length;\n}\n\n",
        "test": "const testCountFirstElements = () => {\n    console.assert(countFirstElements([1, 5, 7, [4, 6], 10]) === 3);\n    console.assert(countFirstElements([2, 9, [5, 7], 11]) === 2);\n    console.assert(countFirstElements([11, 15, 5, 8, [2, 3], 8]) === 4);\n}\n\ntestCountFirstElements(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function countFirstElements(testTup) {\n    for (let count = 0; count < testTup.length; count++) {\n        let ele = testTup[count];\n        if (Array.isArray(ele)) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code_str_generate": "function countFirstElements(testTup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the element count that occurs before the record in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let count = 0; count < testTup.length; count++) {\n        let ele = testTup[count];\n        if (Array.isArray(ele)) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 268,
        "task_id": 279,
        "prompt": "Write a function to find the nth decagonal number.",
        "code_str": "function is_num_decagonal(n) { \n    return 4 * n * n - 3 * n;\n}\n\n",
        "test": "const testis_num_decagonal = () => {\n    console.assert(is_num_decagonal(3) === 27);\n    console.assert(is_num_decagonal(7) === 175);\n    console.assert(is_num_decagonal(10) === 370);\n}\ntestis_num_decagonal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_num_decagonal(n) { \n//begin to write code\n",
        "javascript_prompt": "Write a function to find the nth decagonal number.",
        "code_str_generate": "function is_num_decagonal(n) { \n\n    /*\n    progame language:javascript\n    description:Write a function to find the nth decagonal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 269,
        "task_id": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.",
        "code_str": "function sequential_search(dlist, item) {\n    let pos = 0;\n    let found = false;\n    while (pos < dlist.length && !found) {\n        if (dlist[pos] === item) {\n            found = true;\n        } else {\n            pos += 1;\n        }\n    }\n    return [found, pos];\n}\n\n",
        "test": "const testSequential_search = () => {\n    console.assert(JSON.stringify(sequential_search([11,23,58,31,56,77,43,12,65,19], 31)) === JSON.stringify([true, 3]), \"Test 1 failed\");\n    console.assert(JSON.stringify(sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)) === JSON.stringify([true, 7]), \"Test 2 failed\");\n    console.assert(JSON.stringify(sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)) === JSON.stringify([true, 6]), \"Test 3 failed\");\n}\n\ntestSequential_search(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sequential_search(dlist, item) {\n    let pos = 0;\n    let found = false;\n    while (pos < dlist.length && !found) {\n        if (dlist[pos] === item) {\n            found = true;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to search an element in the given array by using sequential search.",
        "code_str_generate": "function sequential_search(dlist, item) {\n\n    /*\n    progame language:javascript\n    description:Write a function to search an element in the given array by using sequential search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pos = 0;\n    let found = false;\n    while (pos < dlist.length && !found) {\n        if (dlist[pos] === item) {\n            found = true;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 270,
        "task_id": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "code_str": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n        return false;\n    }\n    return true;\n}\n\n",
        "test": "const testAll_unique = () => {\n    console.assert(all_unique([1, 2, 3]) === true, 'Test failed');\n    console.assert(all_unique([1, 2, 1, 2]) === false, 'Test failed');\n    console.assert(all_unique([1, 2, 3, 4, 5]) === true, 'Test failed');\n}\n\ntestAll_unique() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function all_unique(test_list) {\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check if the elements of a given list are unique or not.",
        "code_str_generate": "function all_unique(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check if the elements of a given list are unique or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const uniqueSet = new Set(test_list);\n    if (test_list.length > uniqueSet.size) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 271,
        "task_id": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.",
        "code_str": "function sub_list(nums1, nums2) {\n    return nums1.map((value, index) => value - nums2[index]);\n}\n\n",
        "test": "const testSub_list = () => {\n    console.assert(JSON.stringify(sub_list([1, 2, 3], [4, 5, 6])) === JSON.stringify([-3, -3, -3]), \"Test 1 failed\");\n    console.assert(JSON.stringify(sub_list([1, 2], [3, 4])) === JSON.stringify([-2, -2]), \"Test 2 failed\");\n    console.assert(JSON.stringify(sub_list([90, 120], [50, 70])) === JSON.stringify([40, 50]), \"Test 3 failed\");\n}\n\ntestSub_list() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sub_list(nums1, nums2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to substaract two lists using map and lambda function.",
        "code_str_generate": "function sub_list(nums1, nums2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to substaract two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 272,
        "task_id": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code_str": "function validate(n) {\n    for (let i = 0; i < 10; i++) {\n        let temp = n;\n        let count = 0;\n        while (temp) {\n            if (temp % 10 === i) {\n                count++;\n            }\n            if (count > i) {\n                return false;\n            }\n            temp = Math.floor(temp / 10);\n        }\n    }\n    return true;\n}\n\n",
        "test": "const testValidate = () => {\n    console.assert(validate(1234) === true, \"Test 1 Failed\");\n    console.assert(validate(51241) === false, \"Test 2 Failed\");\n    console.assert(validate(321) === true, \"Test 3 Failed\");\n}\ntestValidate() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function validate(n) {\n    for (let i = 0; i < 10; i++) {\n        let temp = n;\n        let count = 0;\n        while (temp) {\n            if (temp % 10 === i) {\n                count++;\n            }\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code_str_generate": "function validate(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the frequency of each digit is less than or equal to the digit itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < 10; i++) {\n        let temp = n;\n        let count = 0;\n        while (temp) {\n            if (temp % 10 === i) {\n                count++;\n            }\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 273,
        "task_id": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "code_str": "function check_element(list, element) {\n  let check_element = list.every(v => v === element);\n  return check_element;\n}\n\n",
        "test": "const testcheck_element = () => {\n  console.assert(check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') === false);\n  console.assert(check_element([1, 2, 3, 4], 7) === false);\n  console.assert(check_element([\"green\", \"green\", \"green\", \"green\"], 'green') === true);\n}\ntestcheck_element() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_element(list, element) {\n  let check_element = list.every(v => v === element);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "code_str_generate": "function check_element(list, element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether all items of a list are equal to a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let check_element = list.every(v => v === element);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 274,
        "task_id": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code_str": "function text_match_two_three(text) {\n    const patterns = /ab{2,3}/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testText_match_two_three = () => {\n    console.assert(text_match_two_three(\"ac\") === 'Not matched!');\n    console.assert(text_match_two_three(\"dc\") === 'Not matched!');\n    console.assert(text_match_two_three(\"abbbba\") === 'Found a match!');\n}\ntestText_match_two_three() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function text_match_two_three(text) {\n    const patterns = /ab{2,3}/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code_str_generate": "function text_match_two_three(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function that matches a string that has an a followed by two to three 'b'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = /ab{2,3}/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 275,
        "task_id": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code_str": "function maxSubArraySumRepeated(a, n, k) {\n    let maxSoFar = -2147483648;\n    let maxEndingHere = 0;\n    for (let i = 0; i < n * k; i++) {\n        maxEndingHere += a[i % n];\n        if (maxSoFar < maxEndingHere) {\n            maxSoFar = maxEndingHere;\n        }\n        if (maxEndingHere < 0) {\n            maxEndingHere = 0;\n        }\n    }\n    return maxSoFar;\n}\n\n",
        "test": "const testMaxSubArraySumRepeated = () => {\n    console.assert(maxSubArraySumRepeated([10, 20, -30, -1], 4, 3) === 30);\n    console.assert(maxSubArraySumRepeated([-1, 10, 20], 3, 2) === 59);\n    console.assert(maxSubArraySumRepeated([-1, -2, -3], 3, 3) === -1);\n}\ntestMaxSubArraySumRepeated(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maxSubArraySumRepeated(a, n, k) {\n    let maxSoFar = -2147483648;\n    let maxEndingHere = 0;\n    for (let i = 0; i < n * k; i++) {\n        maxEndingHere += a[i % n];\n        if (maxSoFar < maxEndingHere) {\n            maxSoFar = maxEndingHere;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code_str_generate": "function maxSubArraySumRepeated(a, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxSoFar = -2147483648;\n    let maxEndingHere = 0;\n    for (let i = 0; i < n * k; i++) {\n        maxEndingHere += a[i % n];\n        if (maxSoFar < maxEndingHere) {\n            maxSoFar = maxEndingHere;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 276,
        "task_id": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
        "code_str": "function square_Sum(n) {  \n    return Math.floor(2*n*(n+1)*(2*n+1)/3);\n}\n\n",
        "test": "const testSquare_Sum = () => {\n    console.assert(square_Sum(2) === 20, \"Test case 1 failed\");\n    console.assert(square_Sum(3) === 56, \"Test case 2 failed\");\n    console.assert(square_Sum(4) === 120, \"Test case 3 failed\");\n}\ntestSquare_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function square_Sum(n) {  \n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of squares of first n even natural numbers.",
        "code_str_generate": "function square_Sum(n) {  \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of squares of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 277,
        "task_id": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code_str": "function modular_inverse(arr, N, P) {\n    let current_element = 0;\n    for (let i = 0; i < N; i++) {\n        if ((arr[i] * arr[i]) % P === 1) {\n            current_element += 1;\n        }\n    }\n    return current_element;\n}\n\n",
        "test": "const testModular_inverse = () => {\n    console.assert(modular_inverse([1, 6, 4, 5], 4, 7) === 2, \"Test 1 Failed\");\n    console.assert(modular_inverse([1, 3, 8, 12, 12], 5, 13) === 3, \"Test 2 Failed\");\n    console.assert(modular_inverse([2, 3, 4, 5], 4, 6) === 1, \"Test 3 Failed\");\n}\n\ntestModular_inverse(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function modular_inverse(arr, N, P) {\n    let current_element = 0;\n    for (let i = 0; i < N; i++) {\n        if ((arr[i] * arr[i]) % P === 1) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code_str_generate": "function modular_inverse(arr, N, P) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let current_element = 0;\n    for (let i = 0; i < N; i++) {\n        if ((arr[i] * arr[i]) % P === 1) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 278,
        "task_id": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.",
        "code_str": "function odd_Days(N) { \n    let hund1 = Math.floor(N / 100);\n    let hund4 = Math.floor(N / 400);\n    let leap = N >> 2;\n    let ordd = N - leap;\n    if (hund1) { \n        ordd += hund1; \n        leap -= hund1; \n    }\n    if (hund4) { \n        ordd -= hund4; \n        leap += hund4; \n    }\n    let days = ordd + leap * 2;\n    let odd = days % 7;\n    return odd;\n}\n\n",
        "test": "const testodd_Days = () => {\n    console.assert(odd_Days(100) === 5, \"Test case 1 failed\");\n    console.assert(odd_Days(50) === 6, \"Test case 2 failed\");\n    console.assert(odd_Days(75) === 2, \"Test case 3 failed\");\n}\ntestodd_Days(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function odd_Days(N) { \n    let hund1 = Math.floor(N / 100);\n    let hund4 = Math.floor(N / 400);\n    let leap = N >> 2;\n    let ordd = N - leap;\n    if (hund1) { \n        ordd += hund1; \n        leap -= hund1; \n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to calculate the number of odd days in a given year.",
        "code_str_generate": "function odd_Days(N) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to calculate the number of odd days in a given year.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let hund1 = Math.floor(N / 100);\n    let hund4 = Math.floor(N / 400);\n    let leap = N >> 2;\n    let ordd = N - leap;\n    if (hund1) { \n        ordd += hund1; \n        leap -= hund1; \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 279,
        "task_id": 290,
        "prompt": "Write a function to find the list of lists with maximum length.",
        "code_str": "function maxLength(list1) {\n    let maxLength = Math.max(...list1.map(x => x.length));\n    let maxList = list1.reduce((prev, current) => (prev.length > current.length) ? prev : current);\n    return [maxLength, maxList];\n}\n\n",
        "test": "const testMaxLength = () => {\n    console.assert(JSON.stringify(maxLength([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([3, [13, 15, 17]]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(maxLength([[1], [5, 7], [10, 12, 14, 15]])) === JSON.stringify([4, [10, 12, 14, 15]]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(maxLength([[5], [15, 20, 25]])) === JSON.stringify([3, [15, 20, 25]]), \"Test 3 Failed\");\n}\n\ntestMaxLength() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maxLength(list1) {\n    let maxLength = Math.max(...list1.map(x => x.length));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the list of lists with maximum length.",
        "code_str_generate": "function maxLength(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the list of lists with maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxLength = Math.max(...list1.map(x => x.length));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 280,
        "task_id": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code_str": "function count_no_of_ways(n, k) {\n    let dp = new Array(n + 1).fill(0);\n    let mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n    for (let i = 3; i <= n; i++) {\n        dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;\n    }\n    return dp[n];\n}\n\n",
        "test": "const testCount_no_of_ways = () => {\n    console.assert(count_no_of_ways(2, 4) === 16, \"Test 1 Failed\");\n    console.assert(count_no_of_ways(3, 2) === 6, \"Test 2 Failed\");\n    console.assert(count_no_of_ways(4, 4) === 228, \"Test 3 Failed\");\n}\ntestCount_no_of_ways(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_no_of_ways(n, k) {\n    let dp = new Array(n + 1).fill(0);\n    let mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code_str_generate": "function count_no_of_ways(n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n + 1).fill(0);\n    let mod = 1000000007;\n    dp[1] = k;\n    dp[2] = k * k;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 281,
        "task_id": 292,
        "prompt": "Write a python function to find quotient of two numbers.",
        "code_str": "function find(n, m) {\n    return Math.floor(n / m);\n}\n\n",
        "test": "const testfind = () => {\n    console.assert(find(10, 3) === 3);\n    console.assert(find(4, 2) === 2);\n    console.assert(find(20, 5) === 4);\n}\n\ntestfind();",
        "is_deleted": 1,
        "code_str_deleted": "function find(n, m) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find quotient of two numbers.",
        "code_str_generate": "function find(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find quotient of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 282,
        "task_id": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "code_str": "function otherside_rightangle(w, h) {\n    return Math.sqrt((w * w) + (h * h));\n}\n\n",
        "test": "const testOtherside_rightangle = () => {\n    console.assert(otherside_rightangle(7, 8) === 10.63014581273465, \"Test case 1 failed\");\n    console.assert(otherside_rightangle(3, 4) === 5, \"Test case 2 failed\");\n    console.assert(otherside_rightangle(7, 15) === 16.55294535724685, \"Test case 3 failed\");\n}\n\ntestOtherside_rightangle() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function otherside_rightangle(w, h) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the third side of a right angled triangle.",
        "code_str_generate": "function otherside_rightangle(w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the third side of a right angled triangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 283,
        "task_id": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "code_str": "function maxVal(listval) {\n    const filtered = listval.filter(item => typeof item === 'number');\n    return Math.max(...filtered);\n}\n\n",
        "test": "const testMaxVal = () => {\n    console.assert(maxVal(['Python', 3, 2, 4, 5, 'version']) === 5, 'Test 1 Failed');\n    console.assert(maxVal(['Python', 15, 20, 25]) === 25, 'Test 2 Failed');\n    console.assert(maxVal(['Python', 30, 20, 40, 50, 'version']) === 50, 'Test 3 Failed');\n}\n\ntestMaxVal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maxVal(listval) {\n    const filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "code_str_generate": "function maxVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 284,
        "task_id": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "code_str": "function sum_div(number) {\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n            divisors.push(i);\n        }\n    }\n    return divisors.reduce((a, b) => a + b, 0);\n}\n\n",
        "test": "const testsum_div = () => {\n    console.assert(sum_div(8) === 7, \"Test case 1 failed\");\n    console.assert(sum_div(12) === 16, \"Test case 2 failed\");\n    console.assert(sum_div(7) === 1, \"Test case 3 failed\");\n}\n\ntestsum_div() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_div(number) {\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to return the sum of all divisors of a number.",
        "code_str_generate": "function sum_div(number) {\n\n    /*\n    progame language:javascript\n    description:Write a function to return the sum of all divisors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let divisors = [1];\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 285,
        "task_id": 296,
        "prompt": "Write a python function to count inversions in an array.",
        "code_str": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n                inv_count += 1;\n            }\n        }\n    }\n    return inv_count;\n}\n\n",
        "test": "const testget_Inv_Count = () => {\n    console.assert(get_Inv_Count([1, 20, 6, 4, 5], 5) === 5, \"Test 1 Failed\");\n    console.assert(get_Inv_Count([1, 2, 1], 3) === 1, \"Test 2 Failed\");\n    console.assert(get_Inv_Count([1, 2, 5, 6, 1], 5) === 3, \"Test 3 Failed\");\n}\n\ntestget_Inv_Count() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_Inv_Count(arr, n) {\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count inversions in an array.",
        "code_str_generate": "function get_Inv_Count(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count inversions in an array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let inv_count = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] > arr[j]) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 286,
        "task_id": 297,
        "prompt": "Write a function to flatten a given nested list structure.",
        "code_str": "//function definition\nfunction flattenList(list1) {\n    let result_list = [];\n    if (!list1.length) return result_list;\n    let stack = [Array.from(list1)];\n    while (stack.length) {\n        let c_num = stack.pop();\n        let next = c_num.pop();\n        if (c_num.length) stack.push(c_num);\n        if (Array.isArray(next)) {\n            if (next.length) stack.push(Array.from(next));\n        } else {\n            result_list.push(next);\n        }\n    }\n    result_list.reverse();\n    return result_list;\n}\n\n",
        "test": "const testFlattenList = () => {\n    console.assert(JSON.stringify(flattenList([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])) === JSON.stringify([0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]), 'Test 1 Failed');\n    console.assert(JSON.stringify(flattenList([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])) === JSON.stringify([10, 20, 40, 30, 56, 25, 10, 20, 33, 40]), 'Test 2 Failed');\n    console.assert(JSON.stringify(flattenList([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])) === JSON.stringify([1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]), 'Test 3 Failed');\n}\ntestFlattenList() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction flattenList(list1) {\n    let result_list = [];\n    if (!list1.length) return result_list;\n    let stack = [Array.from(list1)];\n    while (stack.length) {\n        let c_num = stack.pop();\n        let next = c_num.pop();\n        if (c_num.length) stack.push(c_num);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to flatten a given nested list structure.",
        "code_str_generate": "//function definition\nfunction flattenList(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to flatten a given nested list structure.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result_list = [];\n    if (!list1.length) return result_list;\n    let stack = [Array.from(list1)];\n    while (stack.length) {\n        let c_num = stack.pop();\n        let next = c_num.pop();\n        if (c_num.length) stack.push(c_num);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 287,
        "task_id": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.",
        "code_str": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    return result;\n}\n\n",
        "test": "const testIntersectionNestedLists = () => {\n    console.assert(JSON.stringify(intersectionNestedLists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])) === JSON.stringify([[12], [7, 11], [1, 5, 8]]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(intersectionNestedLists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])) === JSON.stringify([[], []]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(intersectionNestedLists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])) === JSON.stringify([['john'], ['john'], ['john'], []]), \"Test 3 Failed\");\n}\n\ntestIntersectionNestedLists();",
        "is_deleted": 1,
        "code_str_deleted": "function intersectionNestedLists(l1, l2) {\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the nested list elements which are present in another list.",
        "code_str_generate": "function intersectionNestedLists(l1, l2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the nested list elements which are present in another list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l2.map(lst => lst.filter(n => l1.includes(n)));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 288,
        "task_id": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code_str": "function max_aggregate(stdata) {\n    let temp = {};\n    for (let [name, marks] of stdata) {\n        if (!temp[name]) {\n            temp[name] = 0;\n        }\n        temp[name] += marks;\n    }\n    let maxEntry = Object.entries(temp).reduce((max, entry) => entry[1] > max[1] ? entry : max);\n    return maxEntry;\n}\n\n",
        "test": "const testMax_aggregate = () => {\n    console.assert(JSON.stringify(max_aggregate([\n        ['Juan Whelan', 90], ['Sabah Colley', 88], ['Peter Nichols', 7],\n        ['Juan Whelan', 122], ['Sabah Colley', 84]\n    ])) === JSON.stringify(['Juan Whelan', 212]), \"Test 1 Failed\");\n\n    console.assert(JSON.stringify(max_aggregate([\n        ['Juan Whelan', 50], ['Sabah Colley', 48], ['Peter Nichols', 37],\n        ['Juan Whelan', 22], ['Sabah Colley', 14]\n    ])) === JSON.stringify(['Juan Whelan', 72]), \"Test 2 Failed\");\n\n    console.assert(JSON.stringify(max_aggregate([\n        ['Juan Whelan', 10], ['Sabah Colley', 20], ['Peter Nichols', 30],\n        ['Juan Whelan', 40], ['Sabah Colley', 50]\n    ])) === JSON.stringify(['Sabah Colley', 70]), \"Test 3 Failed\");\n}\n\ntestMax_aggregate(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_aggregate(stdata) {\n    let temp = {};\n    for (let [name, marks] of stdata) {\n        if (!temp[name]) {\n            temp[name] = 0;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code_str_generate": "function max_aggregate(stdata) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the maximum aggregate from the list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let temp = {};\n    for (let [name, marks] of stdata) {\n        if (!temp[name]) {\n            temp[name] = 0;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 289,
        "task_id": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code_str": "function count_binary_seq(n) {\n    let nCr = 1;\n    let res = 1;\n    for (let r = 1; r <= n + 1; r++) {\n        nCr = (nCr * (n + 1 - r)) / r;\n        res += nCr * nCr;\n    }\n    return res;\n}\n\n",
        "test": "const testcount_binary_seq = () => {\n    console.assert(count_binary_seq(1) === 2.0);\n    console.assert(count_binary_seq(2) === 6.0);\n    console.assert(count_binary_seq(3) === 20.0);\n}\n\ntestcount_binary_seq(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_binary_seq(n) {\n    let nCr = 1;\n    let res = 1;\n    for (let r = 1; r <= n + 1; r++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code_str_generate": "function count_binary_seq(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let nCr = 1;\n    let res = 1;\n    for (let r = 1; r <= n + 1; r++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 290,
        "task_id": 301,
        "prompt": "Write a function to find the depth of a dictionary.",
        "code_str": "function dictDepth(d) {\n    if (typeof d === 'object' && !Array.isArray(d) && d !== null) {\n        const depths = Object.values(d).map(dictDepth);\n        return 1 + (depths.length ? Math.max(...depths) : 0);\n    }\n    return 0;\n}\n\n",
        "test": "const testDictDepth = () => {\n    console.assert(dictDepth({'a':1, 'b': {'c': {'d': {}}}}) === 4, \"Test 1 Failed\");\n    console.assert(dictDepth({'a':1, 'b': {'c':'python'}}) === 2, \"Test 2 Failed\");\n    console.assert(dictDepth({1: 'Sun', 2: {3: {4:'Mon'}}}) === 3, \"Test 3 Failed\");\n}\ntestDictDepth() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function dictDepth(d) {\n    if (typeof d === 'object' && !Array.isArray(d) && d !== null) {\n        const depths = Object.values(d).map(dictDepth);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the depth of a dictionary.",
        "code_str_generate": "function dictDepth(d) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the depth of a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (typeof d === 'object' && !Array.isArray(d) && d !== null) {\n        const depths = Object.values(d).map(dictDepth);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 291,
        "task_id": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
        "code_str": "function set_Bit_Number(n) { \n    if (n === 0) { \n        return 0; \n    } \n    let msb = 0; \n    n = Math.floor(n / 2); \n    while (n > 0) { \n        n = Math.floor(n / 2); \n        msb += 1; \n    } \n    return (1 << msb);\n}\n\n",
        "test": "const testSet_Bit_Number = () => {\n    console.assert(set_Bit_Number(6) === 4, 'Test Failed for input 6');\n    console.assert(set_Bit_Number(10) === 8, 'Test Failed for input 10');\n    console.assert(set_Bit_Number(18) === 16, 'Test Failed for input 18');\n}\ntestSet_Bit_Number() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function set_Bit_Number(n) { \n    if (n === 0) { \n        return 0; \n    } \n    let msb = 0; \n    n = Math.floor(n / 2); \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the most significant bit number which is also a set bit.",
        "code_str_generate": "function set_Bit_Number(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the most significant bit number which is also a set bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 0) { \n        return 0; \n    } \n    let msb = 0; \n    n = Math.floor(n / 2); \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 292,
        "task_id": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
        "code_str": "function solve(a, n) {\n    let mx = -Number.MAX_SAFE_INTEGER - 1;\n    for (let j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n        }\n        mx = Math.max(mx, a[j - 1]);\n    }\n    return true;\n}\n\n",
        "test": "const testSolve = () => {\n    console.assert(solve([1, 0, 2], 3) === true, 'Test 1 Failed');\n    console.assert(solve([1, 2, 0], 3) === false, 'Test 2 Failed');\n    console.assert(solve([1, 2, 1], 3) === true, 'Test 3 Failed');\n}\n\ntestSolve(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function solve(a, n) {\n    let mx = -Number.MAX_SAFE_INTEGER - 1;\n    for (let j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the count of inversion of two types are same or not.",
        "code_str_generate": "function solve(a, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the count of inversion of two types are same or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mx = -Number.MAX_SAFE_INTEGER - 1;\n    for (let j = 1; j < n; j++) {\n        if (mx > a[j]) {\n            return false;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 293,
        "task_id": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "code_str": "function find_Element(arr, ranges, rotations, index) {\n    for (let i = rotations - 1; i >= 0; i--) {\n        let left = ranges[i][0];\n        let right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index === left) {\n                index = right;\n            } else {\n                index -= 1;\n            }\n        }\n    }\n    return arr[index];\n}\n\n",
        "test": "const testFind_Element = () => {\n    console.assert(find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1) === 3, \"Test 1 failed\");\n    console.assert(find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2) === 3, \"Test 2 failed\");\n    console.assert(find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1) === 1, \"Test 3 failed\");\n}\n\ntestFind_Element();",
        "is_deleted": 1,
        "code_str_deleted": "function find_Element(arr, ranges, rotations, index) {\n    for (let i = rotations - 1; i >= 0; i--) {\n        let left = ranges[i][0];\n        let right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index === left) {\n                index = right;\n                //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find element at a given index after number of rotations.",
        "code_str_generate": "function find_Element(arr, ranges, rotations, index) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find element at a given index after number of rotations.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = rotations - 1; i >= 0; i--) {\n        let left = ranges[i][0];\n        let right = ranges[i][1];\n        if (left <= index && right >= index) {\n            if (index === left) {\n                index = right;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 294,
        "task_id": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code_str": "//function definition\nfunction start_withp(words) {\n    const regex = /(P\\w+)\\W(P\\w+)/;\n    for (let w of words) {\n        const m = w.match(regex);\n        if (m) {\n            return [m[1], m[2]];\n        }\n    }\n}\n\n",
        "test": "const teststart_withp = () => {\n    console.assert(JSON.stringify(start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])) === JSON.stringify(['Python', 'PHP']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(start_withp([\"Python Programming\",\"Java Programming\"])) === JSON.stringify(['Python', 'Programming']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(start_withp([\"Pqrst Pqr\",\"qrstuv\"])) === JSON.stringify(['Pqrst', 'Pqr']), \"Test 3 Failed\");\n}\n\nteststart_withp() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction start_withp(words) {\n    const regex = /(P\\w+)\\W(P\\w+)/;\n    for (let w of words) {\n        const m = w.match(regex);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code_str_generate": "//function definition\nfunction start_withp(words) {\n\n    /*\n    progame language:javascript\n    description:Write a function to match two words from a list of words starting with letter 'p'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const regex = /(P\\w+)\\W(P\\w+)/;\n    for (let w of words) {\n        const m = w.match(regex);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 295,
        "task_id": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code_str": "function max_sum_increasing_subseq(a, n, index, k) {\n    const dp = Array.from({ length: n }, () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[0][i] = a[i] > a[0] ? a[i] + a[0] : a[i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (a[j] > a[i] && j > i) {\n                dp[i][j] = dp[i - 1][i] + a[j] > dp[i - 1][j] ? dp[i - 1][i] + a[j] : dp[i - 1][j];\n            } else {\n                dp[i][j] = dp[i - 1][j];\n            }\n        }\n    }\n    return dp[index][k];\n}\n\n",
        "test": "const testMax_sum_increasing_subseq = () => {\n    console.assert(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) === 11, \"Test 1 Failed\");\n    console.assert(max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) === 7, \"Test 2 Failed\");\n    console.assert(max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) === 71, \"Test 3 Failed\");\n}\ntestMax_sum_increasing_subseq();",
        "is_deleted": 1,
        "code_str_deleted": "function max_sum_increasing_subseq(a, n, index, k) {\n    const dp = Array.from({ length: n }, () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[0][i] = a[i] > a[0] ? a[i] + a[0] : a[i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (a[j] > a[i] && j > i) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code_str_generate": "function max_sum_increasing_subseq(a, n, index, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dp = Array.from({ length: n }, () => Array(n).fill(0));\n    for (let i = 0; i < n; i++) {\n        dp[0][i] = a[i] > a[0] ? a[i] + a[0] : a[i];\n    }\n    for (let i = 1; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            if (a[j] > a[i] && j > i) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 296,
        "task_id": 307,
        "prompt": "Write a function to get a colon of a tuple.",
        "code_str": "function colonTuplex(tuplex, m, n) {\n    let tuplexColon = JSON.parse(JSON.stringify(tuplex));\n    tuplexColon[m].push(n);\n    return tuplexColon;\n}\n\n",
        "test": "const testColonTuplex = () => {\n    console.assert(JSON.stringify(colonTuplex([\"HELLO\", 5, [], true], 2, 50)) === JSON.stringify([\"HELLO\", 5, [50], true]));\n    console.assert(JSON.stringify(colonTuplex([\"HELLO\", 5, [], true], 2, 100)) === JSON.stringify([\"HELLO\", 5, [100], true]));\n    console.assert(JSON.stringify(colonTuplex([\"HELLO\", 5, [], true], 2, 500)) === JSON.stringify([\"HELLO\", 5, [500], true]));\n}\n\ntestColonTuplex(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function colonTuplex(tuplex, m, n) {\n    let tuplexColon = JSON.parse(JSON.stringify(tuplex));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to get a colon of a tuple.",
        "code_str_generate": "function colonTuplex(tuplex, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get a colon of a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let tuplexColon = JSON.parse(JSON.stringify(tuplex));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 297,
        "task_id": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.",
        "code_str": "//function definition\nfunction large_product(nums1, nums2, N) {\n    let products = [];\n    nums1.forEach(x => {\n        nums2.forEach(y => {\n            products.push(x * y);\n        });\n    });\n    products.sort((a, b) => b - a);\n    return products.slice(0, N);\n}\n\n",
        "test": "const testlarge_product = () => {\n    console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)) === JSON.stringify([60, 54, 50]), 'Test 1 Failed');\n    console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)) === JSON.stringify([60, 54, 50, 48]), 'Test 2 Failed');\n    console.assert(JSON.stringify(large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)) === JSON.stringify([60, 54, 50, 48, 45]), 'Test 3 Failed');\n}\ntestlarge_product() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction large_product(nums1, nums2, N) {\n    let products = [];\n    nums1.forEach(x => {\n        nums2.forEach(y => {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the specified number of largest products from two given lists.",
        "code_str_generate": "//function definition\nfunction large_product(nums1, nums2, N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the specified number of largest products from two given lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let products = [];\n    nums1.forEach(x => {\n        nums2.forEach(y => {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 298,
        "task_id": 309,
        "prompt": "Write a python function to find the maximum of two numbers.",
        "code_str": "function maximum(a, b) {\n    if (a >= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n",
        "test": "const testMaximum = () => {\n    console.assert(maximum(5, 10) === 10, \"Test 1 failed\");\n    console.assert(maximum(-1, -2) === -1, \"Test 2 failed\");\n    console.assert(maximum(9, 7) === 9, \"Test 3 failed\");\n}\n\ntestMaximum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function maximum(a, b) {\n    if (a >= b) {\n        return a;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum of two numbers.",
        "code_str_generate": "function maximum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a >= b) {\n        return a;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 299,
        "task_id": 310,
        "prompt": "Write a function to convert a given string to a tuple.",
        "code_str": "function isSpace(char) {\n    return /\\s/.test(char);\n  }\n\nfunction stringToTuple(str1) {\n    let result = [];\n    for (let x of str1) {\n        if (!isSpace(x)) {\n            result.push(x);\n        }\n    }\n    return result;\n}",
        "test": "const testStringToTuple = () => {\n    console.assert(JSON.stringify(stringToTuple(\"python 3.0\")) === JSON.stringify(['p', 'y', 't', 'h', 'o', 'n', '3', '.', '0']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(stringToTuple(\"item1\")) === JSON.stringify(['i', 't', 'e', 'm', '1']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(stringToTuple(\"15.10\")) === JSON.stringify(['1', '5', '.', '1', '0']), \"Test 3 Failed\");\n}\n\ntestStringToTuple() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function isSpace(char) {\n    return /\\s/.test(char);\n  }\nfunction stringToTuple(str1) {\n    let result = [];\n    for (let x of str1) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to convert a given string to a tuple.",
        "code_str_generate": "function isSpace(char) {\n    return /\\s/.test(char);\n  }\nfunction stringToTuple(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert a given string to a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = [];\n    for (let x of str1) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 300,
        "task_id": 311,
        "prompt": "Write a python function to set the left most unset bit.",
        "code_str": "function set_left_most_unset_bit(n) {\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    let pos = 0, temp = n, count = 0;\n    while (temp) {\n        if (!(temp & 1)) {\n            pos = count;\n        }\n        count += 1; temp >>= 1;\n    }\n    return (n | (1 << pos));\n}\n\n",
        "test": "const testSet_left_most_unset_bit = () => {\n    console.assert(set_left_most_unset_bit(10) === 14);\n    console.assert(set_left_most_unset_bit(12) === 14);\n    console.assert(set_left_most_unset_bit(15) === 15);\n}\n\ntestSet_left_most_unset_bit(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function set_left_most_unset_bit(n) {\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    let pos = 0, temp = n, count = 0;\n    while (temp) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to set the left most unset bit.",
        "code_str_generate": "function set_left_most_unset_bit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to set the left most unset bit.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (!(n & (n + 1))) {\n        return n;\n    }\n    let pos = 0, temp = n, count = 0;\n    while (temp) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 301,
        "task_id": 312,
        "prompt": "Write a function to find the volume of a cone.",
        "code_str": "function volumeCone(r, h) {\n    const volume = (1.0 / 3) * Math.PI * r * r * h;\n    return volume;\n}\n\n",
        "test": "const testVolumeCone = () => {\n    console.assert(Math.abs(volumeCone(5, 12) - 314.15926535897927) < 0.00001);\n    console.assert(Math.abs(volumeCone(10, 15) - 1570.7963267948965) < 0.00001);\n    console.assert(Math.abs(volumeCone(19, 17) - 6426.651371693521) < 0.00001);\n}\n\ntestVolumeCone();",
        "is_deleted": 1,
        "code_str_deleted": "function volumeCone(r, h) {\n    const volume = (1.0 / 3) * Math.PI * r * r * h;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the volume of a cone.",
        "code_str_generate": "function volumeCone(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the volume of a cone.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const volume = (1.0 / 3) * Math.PI * r * r * h;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 302,
        "task_id": 313,
        "prompt": "Write a python function to print positive numbers in a list.",
        "code_str": "function pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n            result.push(num);\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testPos_nos = () => {\n    console.assert(JSON.stringify(pos_nos([-1, -2, 1, 2])) == JSON.stringify([1, 2]), \"Test 1 failed\");\n    console.assert(JSON.stringify(pos_nos([3, 4, -5])) == JSON.stringify([3, 4]), \"Test 2 failed\");\n    console.assert(JSON.stringify(pos_nos([-2, -3, 1])) == JSON.stringify([1]), \"Test 3 failed\");\n}\ntestPos_nos(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function pos_nos(list1) {\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to print positive numbers in a list.",
        "code_str_generate": "function pos_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print positive numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = [];\n    for (let num of list1) {\n        if (num >= 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 303,
        "task_id": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code_str": "function max_sum_rectangular_grid(grid, n) { \n    let incl = Math.max(grid[0][0], grid[1][0]); \n    let excl = 0;\n    for (let i = 1; i < n; i++) { \n        let excl_new = Math.max(excl, incl); \n        incl = excl + Math.max(grid[0][i], grid[1][i]); \n        excl = excl_new; \n    } \n    return Math.max(excl, incl);\n}\n\n",
        "test": "const testMax_sum_rectangular_grid = () => {\n    console.assert(max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) === 7, \"Test 1 Failed\");\n    console.assert(max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) === 24, \"Test 2 Failed\");\n    console.assert(max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) === 81, \"Test 3 Failed\");\n}\ntestMax_sum_rectangular_grid() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_sum_rectangular_grid(grid, n) { \n    let incl = Math.max(grid[0][0], grid[1][0]); \n    let excl = 0;\n    for (let i = 1; i < n; i++) { \n        let excl_new = Math.max(excl, incl); \n        //begin to write code\n",
        "javascript_prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code_str_generate": "function max_sum_rectangular_grid(grid, n) { \n\n    /*\n    progame language:javascript\n    description:Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let incl = Math.max(grid[0][0], grid[1][0]); \n    let excl = 0;\n    for (let i = 1; i < n; i++) { \n        let excl_new = Math.max(excl, incl); \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 304,
        "task_id": 315,
        "prompt": "Write a python function to find the first maximum length of even word.",
        "code_str": "function find_Max_Len_Even(str) { \n    let n = str.length; \n    let i = 0;\n    let currlen = 0;\n    let maxlen = 0;\n    let st = -1;\n    while (i < n) { \n        if (str[i] === ' ') { \n            if (currlen % 2 === 0) { \n                if (maxlen < currlen) { \n                    maxlen = currlen; \n                    st = i - currlen; \n                }\n            }\n            currlen = 0; \n        } else { \n            currlen += 1;\n        }\n        i += 1;\n    }\n    if (currlen % 2 === 0) { \n        if (maxlen < currlen) { \n            maxlen = currlen; \n            st = i - currlen; \n        }\n    }\n    if (st === -1) { \n        return \"-1\"; \n    }\n    return str.substring(st, st + maxlen); \n}\n\n",
        "test": "const testFind_Max_Len_Even = () => {\n    console.assert(find_Max_Len_Even(\"python language\") === \"language\");\n    console.assert(find_Max_Len_Even(\"maximum even length\") === \"length\");\n    console.assert(find_Max_Len_Even(\"eve\") === \"-1\");\n}\n\ntestFind_Max_Len_Even(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Max_Len_Even(str) { \n    let n = str.length; \n    let i = 0;\n    let currlen = 0;\n    let maxlen = 0;\n    let st = -1;\n    while (i < n) { \n        if (str[i] === ' ') { \n            if (currlen % 2 === 0) { \n                if (maxlen < currlen) { \n                    maxlen = currlen; \n                    st = i - currlen; \n                }\n            }\n            currlen = 0; \n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first maximum length of even word.",
        "code_str_generate": "function find_Max_Len_Even(str) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first maximum length of even word.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let n = str.length; \n    let i = 0;\n    let currlen = 0;\n    let maxlen = 0;\n    let st = -1;\n    while (i < n) { \n        if (str[i] === ' ') { \n            if (currlen % 2 === 0) { \n                if (maxlen < currlen) { \n                    maxlen = currlen; \n                    st = i - currlen; \n                }\n            }\n            currlen = 0; \n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 305,
        "task_id": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code_str": "function find_last_occurrence(A, x) {\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            left = mid + 1;\n        } else if (x < A[mid]) {\n            right = mid - 1;\n        } else {\n            left = mid + 1;\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testFind_last_occurrence = () => {\n    console.assert(find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) === 3, \"Test 1 Failed\");\n    console.assert(find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) === 9, \"Test 2 Failed\");\n    console.assert(find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) === 6, \"Test 3 Failed\");\n}\ntestFind_last_occurrence(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_last_occurrence(A, x) {\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code_str_generate": "function find_last_occurrence(A, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the index of the last occurrence of a given number in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let left = 0;\n    let right = A.length - 1;\n    let result = -1;\n    while (left <= right) {\n        let mid = Math.floor((left + right) / 2);\n        if (x === A[mid]) {\n            result = mid;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 306,
        "task_id": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "code_str": "function modifiedEncode(alist) {\n    function ctrEle(el) {\n        if (el.length > 1) return [el.length, el[0]];\n        else return el[0];\n    }\n\n    let result = [];\n    let current = null;\n    let count = 0;\n\n    for (let i = 0; i < alist.length; i++) {\n        if (alist[i] !== current) {\n            if (current !== null) {\n                result.push(ctrEle(Array(count).fill(current)));\n            }\n            current = alist[i];\n            count = 1;\n        } else {\n            count++;\n        }\n    }\n    if (current !== null) {\n        result.push(ctrEle(Array(count).fill(current)));\n    }\n    return result;\n}\n\n",
        "test": "const testModifiedEncode = () => {\n    console.assert(JSON.stringify(modifiedEncode([1,1,2,3,4,4,5,1])) === JSON.stringify([[2, 1], 2, 3, [2, 4], 5, 1]), 'Test 1 failed');\n    console.assert(JSON.stringify(modifiedEncode('automatically'.split(''))) === JSON.stringify(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']), 'Test 2 failed');\n    console.assert(JSON.stringify(modifiedEncode('python'.split(''))) === JSON.stringify(['p', 'y', 't', 'h', 'o', 'n']), 'Test 3 failed');\n}\n\ntestModifiedEncode(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function modifiedEncode(alist) {\n    function ctrEle(el) {\n        if (el.length > 1) return [el.length, el[0]];\n        else return el[0];\n    }\n    let result = [];\n    let current = null;\n    let count = 0;\n    for (let i = 0; i < alist.length; i++) {\n        if (alist[i] !== current) {\n            if (current !== null) {\n                result.push(ctrEle(Array(count).fill(current)));\n                //begin to write code\n",
        "javascript_prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "code_str_generate": "function modifiedEncode(alist) {\n\n    /*\n    progame language:javascript\n    description:Write a function to reflect the modified run-length encoding from a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    function ctrEle(el) {\n        if (el.length > 1) return [el.length, el[0]];\n        else return el[0];\n    }\n    let result = [];\n    let current = null;\n    let count = 0;\n    for (let i = 0; i < alist.length; i++) {\n        if (alist[i] !== current) {\n            if (current !== null) {\n                result.push(ctrEle(Array(count).fill(current)));\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 307,
        "task_id": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "code_str": "function max_volume(s) {\n    let maxvalue = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            maxvalue = Math.max(maxvalue, i * j * k);\n        }\n    }\n    return maxvalue;\n}\n\n",
        "test": "const testMax_volume = () => {\n    console.assert(max_volume(8) === 18, 'Test 1 failed');\n    console.assert(max_volume(4) === 2, 'Test 2 failed');\n    console.assert(max_volume(1) === 0, 'Test 3 failed');\n}\n\ntestMax_volume(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_volume(s) {\n    let maxvalue = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum volume of a cuboid with given sum of sides.",
        "code_str_generate": "function max_volume(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum volume of a cuboid with given sum of sides.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxvalue = 0;\n    for (let i = 1; i < s; i++) {\n        for (let j = 1; j < s; j++) {\n            let k = s - i - j;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 308,
        "task_id": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "code_str": "function find_long_word(text) {\n    return text.match(/\\b\\w{5}\\b/g) || [];\n}\n\n",
        "test": "const testfind_long_word = () => {\n    console.assert(JSON.stringify(find_long_word('Please move back to strem')) === JSON.stringify(['strem']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(find_long_word('4K Ultra HD streaming player')) === JSON.stringify(['Ultra']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(find_long_word('Streaming Media Player')) === JSON.stringify(['Media']), \"Test 3 Failed\");\n}\n\ntestfind_long_word(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_long_word(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "code_str_generate": "function find_long_word(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all five characters long word in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 309,
        "task_id": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code_str": "function sum_difference(n) {\n    let sumofsquares = 0;\n    let squareofsum = 0;\n    for (let num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n        squareofsum += num;\n    }\n    squareofsum = squareofsum ** 2;\n    return squareofsum - sumofsquares;\n}\n\n",
        "test": "const testSum_difference = () => {\n    console.assert(sum_difference(12) === 5434, `Expected 5434, got ${sum_difference(12)}`);\n    console.assert(sum_difference(20) === 41230, `Expected 41230, got ${sum_difference(20)}`);\n    console.assert(sum_difference(54) === 2151270, `Expected 2151270, got ${sum_difference(54)}`);\n}\ntestSum_difference(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_difference(n) {\n    let sumofsquares = 0;\n    let squareofsum = 0;\n    for (let num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code_str_generate": "function sum_difference(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sumofsquares = 0;\n    let squareofsum = 0;\n    for (let num = 1; num <= n; num++) {\n        sumofsquares += num * num;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 310,
        "task_id": 321,
        "prompt": "Write a function to find the demlo number for the given number.",
        "code_str": "function find_demlo(s) {\n    let l = s.length;\n    let res = \"\";\n    for (let i = 1; i <= l; i++) {\n        res = res + String(i);\n    }\n    for (let i = l - 1; i > 0; i--) {\n        res = res + String(i);\n    }\n    return res;\n}\n\n",
        "test": "const testfind_demlo = () => {\n    console.assert(find_demlo(\"111111\") === '12345654321', \"Test case 1 failed\");\n    console.assert(find_demlo(\"1111\") === '1234321', \"Test case 2 failed\");\n    console.assert(find_demlo(\"13333122222\") === '123456789101110987654321', \"Test case 3 failed\");\n}\n\ntestfind_demlo(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_demlo(s) {\n    let l = s.length;\n    let res = \"\";\n    for (let i = 1; i <= l; i++) {\n        res = res + String(i);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the demlo number for the given number.",
        "code_str_generate": "function find_demlo(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the demlo number for the given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = s.length;\n    let res = \"\";\n    for (let i = 1; i <= l; i++) {\n        res = res + String(i);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 311,
        "task_id": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "code_str": "function position_min(list1) {\n    let min_val = Math.min(...list1);\n    let min_result = [];\n    list1.forEach((j, i) => {\n        if (j === min_val) {\n            min_result.push(i);\n        }\n    });\n    return min_result;\n}\n\n",
        "test": "const testPosition_min = () => {\n    console.assert(JSON.stringify(position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])) === JSON.stringify([3,11]), \"Test 1 failed\");\n    console.assert(JSON.stringify(position_min([1,2,2,2,4,4,4,5,5,5,5])) === JSON.stringify([0]), \"Test 2 failed\");\n    console.assert(JSON.stringify(position_min([2,1,5,6,8,3,4,9,10,11,8,12])) === JSON.stringify([1]), \"Test 3 failed\");\n}\ntestPosition_min() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function position_min(list1) {\n    let min_val = Math.min(...list1);\n    let min_result = [];\n    list1.forEach((j, i) => {\n        if (j === min_val) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "code_str_generate": "function position_min(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all index positions of the minimum values in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let min_val = Math.min(...list1);\n    let min_result = [];\n    list1.forEach((j, i) => {\n        if (j === min_val) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 312,
        "task_id": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code_str": "function right_rotate(arr, n, out_of_place, cur) {\n    let temp = arr[cur];\n    for (let i = cur; i > out_of_place; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n    return arr;\n}\n\nfunction re_arrange(arr, n) {\n    let out_of_place = -1;\n    for (let index = 0; index < n; index++) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                arr = right_rotate(arr, n, out_of_place, index);\n                if (index - out_of_place > 2) {\n                    out_of_place += 2;\n                } else {\n                    out_of_place = -1;\n                }\n            }\n        }\n        if (out_of_place === -1) {\n            if ((arr[index] >= 0 && index % 2 === 0) || (arr[index] < 0 && index % 2 === 1)) {\n                out_of_place = index;\n            }\n        }\n    }\n    return arr;\n}\n\n",
        "test": "const testRe_arrange = () => {\n    console.assert(JSON.stringify(re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)) === JSON.stringify([-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]));\n    console.assert(JSON.stringify(re_arrange([1, 2, 3, -4, -1, 4], 6)) === JSON.stringify([-4, 1, -1, 2, 3, 4]));\n    console.assert(JSON.stringify(re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)) === JSON.stringify([-4, 4, -3, 7, -9, 9, 77, 5]));\n}\n\ntestRe_arrange(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function right_rotate(arr, n, out_of_place, cur) {\n    let temp = arr[cur];\n    for (let i = cur; i > out_of_place; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n    return arr;\n}\nfunction re_arrange(arr, n) {\n    let out_of_place = -1;\n    for (let index = 0; index < n; index++) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                arr = right_rotate(arr, n, out_of_place, index);\n                //begin to write code\n",
        "javascript_prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code_str_generate": "function right_rotate(arr, n, out_of_place, cur) {\n    let temp = arr[cur];\n    for (let i = cur; i > out_of_place; i--) {\n        arr[i] = arr[i - 1];\n    }\n    arr[out_of_place] = temp;\n    return arr;\n}\nfunction re_arrange(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to re-arrange the given array in alternating positive and negative items.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let out_of_place = -1;\n    for (let index = 0; index < n; index++) {\n        if (out_of_place >= 0) {\n            if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                arr = right_rotate(arr, n, out_of_place, index);\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 313,
        "task_id": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "code_str": "function sumOfAlternates(testTuple) {\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let idx = 0; idx < testTuple.length; idx++) {\n        if (idx % 2) {\n            sum1 += testTuple[idx];\n        } else {\n            sum2 += testTuple[idx];\n        }\n    }\n    return [sum1, sum2];\n}\n\n",
        "test": "const testSumOfAlternates = () => {\n    console.assert(JSON.stringify(sumOfAlternates([5, 6, 3, 6, 10, 34])) === JSON.stringify([46, 18]), 'Test 1 Failed');\n    console.assert(JSON.stringify(sumOfAlternates([1, 2, 3, 4, 5])) === JSON.stringify([6, 9]), 'Test 2 Failed');\n    console.assert(JSON.stringify(sumOfAlternates([6, 7, 8, 9, 4, 5])) === JSON.stringify([21, 18]), 'Test 3 Failed');\n}\ntestSumOfAlternates() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sumOfAlternates(testTuple) {\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let idx = 0; idx < testTuple.length; idx++) {\n        if (idx % 2) {\n            sum1 += testTuple[idx];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "code_str_generate": "function sumOfAlternates(testTuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the sum of alternate chains of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum1 = 0;\n    let sum2 = 0;\n    for (let idx = 0; idx < testTuple.length; idx++) {\n        if (idx % 2) {\n            sum1 += testTuple[idx];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 314,
        "task_id": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "code_str": "function get_Min_Squares(n) {\n    if (n <= 3) {\n        return n;\n    }\n    let res = n;\n    for (let x = 1; x <= n; x++) {\n        let temp = x * x;\n        if (temp > n) {\n            break;\n        } else {\n            res = Math.min(res, 1 + get_Min_Squares(n - temp));\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testGet_Min_Squares = () => {\n    console.assert(get_Min_Squares(6) === 3, \"Test case 1 failed\");\n    console.assert(get_Min_Squares(2) === 2, \"Test case 2 failed\");\n    console.assert(get_Min_Squares(4) === 1, \"Test case 3 failed\");\n}\n\ntestGet_Min_Squares() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_Min_Squares(n) {\n    if (n <= 3) {\n        return n;\n    }\n    let res = n;\n    for (let x = 1; x <= n; x++) {\n        let temp = x * x;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the minimum number of squares whose sum is equal to a given number.",
        "code_str_generate": "function get_Min_Squares(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum number of squares whose sum is equal to a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n <= 3) {\n        return n;\n    }\n    let res = n;\n    for (let x = 1; x <= n; x++) {\n        let temp = x * x;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 315,
        "task_id": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code_str": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n          temp[wrd] = 1;\n        }\n      });\n    });\n    let res = Object.keys(temp).reduce((a, b) => temp[a] > temp[b] ? a : b);\n    return res;\n  }",
        "test": "const testMostOccurrences = () => {\n    console.assert(mostOccurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) === 'UTS', 'Test 1 Failed');\n    console.assert(mostOccurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) === 'year', 'Test 2 Failed');\n    console.assert(mostOccurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks could be achieved \"]) === 'be', 'Test 3 Failed');\n  }\n  \ntestMostOccurrences(); // invoke test  ",
        "is_deleted": 1,
        "code_str_deleted": "function mostOccurrences(testList) {\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code_str_generate": "function mostOccurrences(testList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to get the word with most number of occurrences in the given strings list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const temp = {};\n    testList.forEach(sub => {\n      sub.split(\" \").forEach(wrd => {\n        if (temp[wrd]) {\n          temp[wrd] += 1;\n        } else {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 316,
        "task_id": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.",
        "code_str": "//function definition\nfunction check_isosceles(x, y, z) {\n    if (x === y || y === z || z === x) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n",
        "test": "const testcheck_isosceles = () => {\n    console.assert(check_isosceles(6, 8, 12) === false);\n    console.assert(check_isosceles(6, 6, 12) === true);\n    console.assert(check_isosceles(6, 16, 20) === false);\n}\ntestcheck_isosceles() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction check_isosceles(x, y, z) {\n    if (x === y || y === z || z === x) {\n        return true;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to print check if the triangle is isosceles or not.",
        "code_str_generate": "//function definition\nfunction check_isosceles(x, y, z) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print check if the triangle is isosceles or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x === y || y === z || z === x) {\n        return true;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 317,
        "task_id": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code_str": "function rotateLeft(list1, m, n) {\n    const result = list1.slice(m).concat(list1.slice(0, n));\n    return result;\n}\n\n",
        "test": "const testRotateLeft = () => {\n    console.assert(JSON.stringify(rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)) === JSON.stringify([4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]), \"Test 1 failed\");\n    console.assert(JSON.stringify(rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)) === JSON.stringify([3, 4, 5, 6, 7, 8, 9, 10, 1, 2]), \"Test 2 failed\");\n    console.assert(JSON.stringify(rotateLeft([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)) === JSON.stringify([6, 7, 8, 9, 10, 1, 2]), \"Test 3 failed\");\n}\n\ntestRotateLeft(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function rotateLeft(list1, m, n) {\n    const result = list1.slice(m).concat(list1.slice(0, n));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code_str_generate": "function rotateLeft(list1, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to rotate a given list by specified number of items to the left direction.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.slice(m).concat(list1.slice(0, n));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 318,
        "task_id": 329,
        "prompt": "Write a python function to count negative numbers in a list.",
        "code_str": "function negCount(list) {\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n      neg_count += 1;\n    }\n  }\n  return neg_count;\n}\n\n",
        "test": "const testNegCount = () => {\n  console.assert(negCount([-1, -2, 3, -4, -5]) === 4, \"Test 1 Failed\");\n  console.assert(negCount([1, 2, 3]) === 0, \"Test 2 Failed\");\n  console.assert(negCount([1, 2, -3, -10, 20]) === 2, \"Test 3 Failed\");\n}\n\ntestNegCount(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function negCount(list) {\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count negative numbers in a list.",
        "code_str_generate": "function negCount(list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let neg_count = 0;\n  for (let num of list) {\n    if (num <= 0) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 319,
        "task_id": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code_str": "function find_char(text) {\n  return text.match(/\\b\\w{3,5}\\b/g) || [];\n}\n\n",
        "test": "const testfind_char = () => {\n  console.assert(JSON.stringify(find_char('For the four consumer complaints contact manager AKR reddy')) === JSON.stringify(['For', 'the', 'four', 'AKR', 'reddy']), \"Test 1 failed\");\n  console.assert(JSON.stringify(find_char('Certain service are subject to change MSR')) === JSON.stringify(['are', 'MSR']), \"Test 2 failed\");\n  console.assert(JSON.stringify(find_char('Third party legal desclaimers')) === JSON.stringify(['Third', 'party', 'legal']), \"Test 3 failed\");\n}\n\ntestfind_char(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_char(text) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code_str_generate": "function find_char(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all three, four, five characters long words in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 320,
        "task_id": 331,
        "prompt": "Write a python function to count unset bits of a given number.",
        "code_str": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n            count++;\n        }\n        x = x << 1;\n    }\n    return count;\n}\n\n",
        "test": "const testcount_unset_bits = () => {\n    console.assert(count_unset_bits(2) === 1, 'Test 1 failed');\n    console.assert(count_unset_bits(4) === 2, 'Test 2 failed');\n    console.assert(count_unset_bits(6) === 1, 'Test 3 failed');\n}\ntestcount_unset_bits(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_unset_bits(n) {\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count unset bits of a given number.",
        "code_str_generate": "function count_unset_bits(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count unset bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    let x = 1;\n    while (x < n + 1) {\n        if ((x & n) === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 321,
        "task_id": 332,
        "prompt": "Write a function to count character frequency of a given string.",
        "code_str": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n        } else {\n            dict[n] = 1;\n        }\n    }\n    return dict;\n}\n\n",
        "test": "const testChar_frequency = () => {\n    console.assert(JSON.stringify(char_frequency('python')) === JSON.stringify({'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}), \"Test 1 Failed\");\n    console.assert(JSON.stringify(char_frequency('program')) === JSON.stringify({'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}), \"Test 2 Failed\");\n    console.assert(JSON.stringify(char_frequency('language')) === JSON.stringify({'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}), \"Test 3 Failed\");\n}\n\ntestChar_frequency(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function char_frequency(str1) {\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to count character frequency of a given string.",
        "code_str_generate": "function char_frequency(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count character frequency of a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const dict = {};\n    for (const n of str1) {\n        if (n in dict) {\n            dict[n] += 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 322,
        "task_id": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.",
        "code_str": "function Sort(sub_li) {\n    sub_li.sort((a, b) => a[1] - b[1]);\n    return sub_li;\n}\n\n",
        "test": "const testSort = () => {\n    console.assert(JSON.stringify(Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])) === JSON.stringify([['b', 5], ['a', 10], ['d', 15], ['c', 20]]));\n    console.assert(JSON.stringify(Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])) === JSON.stringify([['256', 5], ['452', 10], ['135', 15], ['100', 20]]));\n    console.assert(JSON.stringify(Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])) === JSON.stringify([['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]));\n}\n\ntestSort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Sort(sub_li) {\n    sub_li.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to sort a list according to the second element in sublist.",
        "code_str_generate": "function Sort(sub_li) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to sort a list according to the second element in sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    sub_li.sort((a, b) => a[1] - b[1]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 323,
        "task_id": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "code_str": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return false;\n    } else { \n        return true;\n    }\n}\n\n",
        "test": "const testCheck_Validity = () => {\n    console.assert(check_Validity(1, 2, 3) === false);\n    console.assert(check_Validity(2, 3, 5) === false);\n    console.assert(check_Validity(7, 10, 5) === true);\n}\n\ntestCheck_Validity() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_Validity(a, b, c) {  \n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return false;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the triangle is valid or not if sides are given.",
        "code_str_generate": "function check_Validity(a, b, c) {  \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the triangle is valid or not if sides are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if ((a + b <= c) || (a + c <= b) || (b + c <= a)) { \n        return false;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 324,
        "task_id": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.",
        "code_str": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    return total;\n}\n\n",
        "test": "const testAp_sum = () => {\n    console.assert(ap_sum(1, 5, 2) === 25, \"Test failed: ap_sum(1, 5, 2) should be 25\");\n    console.assert(ap_sum(2, 6, 4) === 72, \"Test failed: ap_sum(2, 6, 4) should be 72\");\n    console.assert(ap_sum(1, 4, 5) === 34, \"Test failed: ap_sum(1, 4, 5) should be 34\");\n}\n\ntestAp_sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function ap_sum(a, n, d) {\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the sum of arithmetic progression.",
        "code_str_generate": "function ap_sum(a, n, d) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of arithmetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = (n * (2 * a + (n - 1) * d)) / 2;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 325,
        "task_id": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "code_str": "function check_monthnum(monthname1) {\n  if (monthname1 === \"February\") {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test": "const testcheck_monthnum = () => {\n  console.assert(check_monthnum(\"February\") === true);\n  console.assert(check_monthnum(\"January\") === false);\n  console.assert(check_monthnum(\"March\") === false);\n}\n\ntestcheck_monthnum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_monthnum(monthname1) {\n  if (monthname1 === \"February\") {\n    return true;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "code_str_generate": "function check_monthnum(monthname1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month name contains 28 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  if (monthname1 === \"February\") {\n    return true;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 326,
        "task_id": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code_str": "const text_match_word = (text) => {\n    const patterns = /\\w+\\S*$/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testText_match_word = () => {\n    console.assert(text_match_word(\"python.\") === 'Found a match!');\n    console.assert(text_match_word(\"python.\") === 'Found a match!');\n    console.assert(text_match_word(\"  lang  .\") === 'Not matched!');\n}\ntestText_match_word()",
        "is_deleted": 1,
        "code_str_deleted": "const text_match_word = (text) => {\n    const patterns = /\\w+\\S*$/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code_str_generate": "const text_match_word = (text) => {\n\n    /*\n    progame language:javascript\n    description:Write a function that matches a word at the end of a string, with optional punctuation.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = /\\w+\\S*$/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 327,
        "task_id": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.",
        "code_str": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\n\nfunction count_Substring_With_Equal_Ends(s) {\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n        for (let j = 1; j <= n - i; j++) {\n            if (check_Equality(s.substring(i, i + j))) {\n                result++;\n            }\n        }\n    }\n    return result;\n}\n\n",
        "test": "const testCount_Substring_With_Equal_Ends = () => {\n    console.assert(count_Substring_With_Equal_Ends('aba') === 4);\n    console.assert(count_Substring_With_Equal_Ends('abcab') === 7);\n    console.assert(count_Substring_With_Equal_Ends('abc') === 3);\n}\n\ntestCount_Substring_With_Equal_Ends()",
        "is_deleted": 1,
        "code_str_deleted": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\nfunction count_Substring_With_Equal_Ends(s) {\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of substrings with same first and last characters.",
        "code_str_generate": "function check_Equality(s) {\n    return s.charCodeAt(0) === s.charCodeAt(s.length - 1);\n}\nfunction count_Substring_With_Equal_Ends(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of substrings with same first and last characters.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = 0;\n    const n = s.length;\n    for (let i = 0; i < n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 328,
        "task_id": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
        "code_str": "function find_Divisor(x, y) {\n    if (x === y) {\n        return y;\n    }\n    return 2;\n}\n\n",
        "test": "const testfind_Divisor = () => {\n    console.assert(find_Divisor(2, 2) === 2);\n    console.assert(find_Divisor(2, 5) === 2);\n    console.assert(find_Divisor(5, 10) === 2);\n}\n\ntestfind_Divisor(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Divisor(x, y) {\n    if (x === y) {\n        return y;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum occuring divisor in an interval.",
        "code_str_generate": "function find_Divisor(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum occuring divisor in an interval.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (x === y) {\n        return y;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 329,
        "task_id": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code_str": "function sumThreeSmallestNums(lst) {\n    return lst.filter(x => x > 0).sort((a, b) => a - b).slice(0, 3).reduce((a, b) => a + b, 0);\n}\n\n",
        "test": "const testSumThreeSmallestNums = () => {\n    console.assert(sumThreeSmallestNums([10, 20, 30, 40, 50, 60, 7]) === 37, \"Test 1 Failed\");\n    console.assert(sumThreeSmallestNums([1, 2, 3, 4, 5]) === 6, \"Test 2 Failed\");\n    console.assert(sumThreeSmallestNums([0, 1, 2, 3, 4, 5]) === 6, \"Test 3 Failed\");\n}\ntestSumThreeSmallestNums() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sumThreeSmallestNums(lst) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code_str_generate": "function sumThreeSmallestNums(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of the three lowest positive numbers from a given list of numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 330,
        "task_id": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.",
        "code_str": "function set_to_tuple(s) {\n    let t = Array.from(s).sort((a, b) => a - b);\n    return t;\n}\n\n",
        "test": "const testSet_to_tuple = () => {\n    console.assert(JSON.stringify(set_to_tuple(new Set([1, 2, 3, 4, 5]))) === JSON.stringify([1, 2, 3, 4, 5]), 'Test case 1 failed');\n    console.assert(JSON.stringify(set_to_tuple(new Set([6, 7, 8, 9, 10, 11]))) === JSON.stringify([6, 7, 8, 9, 10, 11]), 'Test case 2 failed');\n    console.assert(JSON.stringify(set_to_tuple(new Set([12, 13, 14, 15, 16]))) === JSON.stringify([12, 13, 14, 15, 16]), 'Test case 3 failed');\n}\n\ntestSet_to_tuple(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function set_to_tuple(s) {\n    let t = Array.from(s).sort((a, b) => a - b);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to convert the given set into ordered tuples.",
        "code_str_generate": "function set_to_tuple(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given set into ordered tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let t = Array.from(s).sort((a, b) => a - b);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 331,
        "task_id": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code_str": "class Node {\n    constructor(value, list_num, index) {\n        this.value = value;\n        this.list_num = list_num;\n        this.index = index;\n    }\n    compareTo(other) {\n        return this.value - other.value;\n    }\n}\n\nfunction find_minimum_range(lists) {\n    const pq = [];\n    let high = -Infinity;\n    let p = [0, Infinity];\n\n    lists.forEach((list, i) => {\n        pq.push(new Node(list[0], i, 0));\n        high = Math.max(high, list[0]);\n    });\n\n    pq.sort((a, b) => a.compareTo(b));\n\n    while (pq.length) {\n        const top = pq.shift();\n        const low = top.value;\n        const i = top.list_num;\n        const j = top.index;\n\n        if (high - low < p[1] - p[0]) {\n            p = [low, high];\n        }\n\n        if (j === lists[i].length - 1) {\n            return p;\n        }\n\n        pq.push(new Node(lists[i][j + 1], i, j + 1));\n        high = Math.max(high, lists[i][j + 1]);\n        pq.sort((a, b) => a.compareTo(b));\n    }\n}\n\n",
        "test": "const testFind_minimum_range = () => {\n    console.assert(find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]).toString() === [4, 6].toString());\n    console.assert(find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]).toString() === [4, 7].toString());\n    console.assert(find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]).toString() === [5, 7].toString());\n}\n\ntestFind_minimum_range();",
        "is_deleted": 1,
        "code_str_deleted": "class Node {\n    constructor(value, list_num, index) {\n        this.value = value;\n        this.list_num = list_num;\n        this.index = index;\n    }\n    compareTo(other) {\n        return this.value - other.value;\n    }\n}\nfunction find_minimum_range(lists) {\n    const pq = [];\n    let high = -Infinity;\n    let p = [0, Infinity];\n    lists.forEach((list, i) => {\n        pq.push(new Node(list[0], i, 0));\n        high = Math.max(high, list[0]);\n    });\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code_str_generate": "class Node {\n    constructor(value, list_num, index) {\n        this.value = value;\n        this.list_num = list_num;\n        this.index = index;\n    }\n    compareTo(other) {\n        return this.value - other.value;\n    }\n}\nfunction find_minimum_range(lists) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const pq = [];\n    let high = -Infinity;\n    let p = [0, Infinity];\n    lists.forEach((list, i) => {\n        pq.push(new Node(list[0], i, 0));\n        high = Math.max(high, list[0]);\n    });\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 332,
        "task_id": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.",
        "code_str": "//function definition\nfunction dig_let(s) {\n    let d = 0;\n    let l = 0;\n    for (let c of s) {\n        if (!isNaN(c)) {\n            d = d + 1;\n        } else if (/[a-zA-Z]/.test(c)) {\n            l = l + 1;\n        } else {\n            continue;\n        }\n    }\n    return [l, d];\n}\n\n",
        "test": "const testdig_let = () => {\n    console.assert(JSON.stringify(dig_let(\"python\")) === JSON.stringify([6,0]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(dig_let(\"program\")) === JSON.stringify([7,0]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(dig_let(\"python3.0\")) === JSON.stringify([6,2]), \"Test 3 Failed\");\n}\ntestdig_let() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction dig_let(s) {\n    let d = 0;\n    let l = 0;\n    for (let c of s) {\n        if (!isNaN(c)) {\n            d = d + 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the number of digits and letters in a string.",
        "code_str_generate": "//function definition\nfunction dig_let(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the number of digits and letters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let d = 0;\n    let l = 0;\n    for (let c of s) {\n        if (!isNaN(c)) {\n            d = d + 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 333,
        "task_id": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.",
        "code_str": "function count_Odd_Squares(n, m) { \n    return Math.floor(Math.sqrt(m)) - Math.floor(Math.sqrt(n - 1));\n}\n\n",
        "test": "const testCount_Odd_Squares = () => {\n    console.assert(count_Odd_Squares(5, 100) === 8, \"Test 1 Failed\");\n    console.assert(count_Odd_Squares(8, 65) === 6, \"Test 2 Failed\");\n    console.assert(count_Odd_Squares(2, 5) === 1, \"Test 3 Failed\");\n}\n\ntestCount_Odd_Squares() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Odd_Squares(n, m) { \n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find number of elements with odd factors in a given range.",
        "code_str_generate": "function count_Odd_Squares(n, m) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find number of elements with odd factors in a given range.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 334,
        "task_id": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code_str": "function diff_consecutivenums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    return result;\n}\n\n",
        "test": "const testDiff_consecutivenums = () => {\n    console.assert(JSON.stringify(diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])) === JSON.stringify([0, 2, 1, 0, 1, 1, 1]));\n    console.assert(JSON.stringify(diff_consecutivenums([4, 5, 8, 9, 6, 10])) === JSON.stringify([1, 3, 1, -3, 4]));\n    console.assert(JSON.stringify(diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])) === JSON.stringify([1, 1, 1, 1, 0, 0, 0, 1, 2]));\n}\n\ntestDiff_consecutivenums() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function diff_consecutivenums(nums) {\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code_str_generate": "function diff_consecutivenums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the difference between two consecutive numbers in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = nums.slice(1).map((b, i) => b - nums[i]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 335,
        "task_id": 346,
        "prompt": "Write a function to find entringer number e(n, k).",
        "code_str": "function zigzag(n, k) {\n    if (n === 0 && k === 0) {\n        return 1;\n    }\n    if (k === 0) {\n        return 0;\n    }\n    return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n}\n\n",
        "test": "const testZigzag = () => {\n    console.assert(zigzag(4, 3) === 5, \"Test 1 failed\");\n    console.assert(zigzag(4, 2) === 4, \"Test 2 failed\");\n    console.assert(zigzag(3, 1) === 1, \"Test 3 failed\");\n}\n\ntestZigzag(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function zigzag(n, k) {\n    if (n === 0 && k === 0) {\n        return 1;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find entringer number e(n, k).",
        "code_str_generate": "function zigzag(n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find entringer number e(n, k).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 0 && k === 0) {\n        return 1;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 336,
        "task_id": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "code_str": "function count_Squares(m, n) {\n    if (n < m) {\n        let temp = m;\n        m = n;\n        n = temp;\n    }\n    return Math.floor(n * (n + 1) * (3 * m - n + 1) / 6);\n}\n\n",
        "test": "const testCount_Squares = () => {\n    console.assert(count_Squares(4, 3) === 20, \"Test 1 failed\");\n    console.assert(count_Squares(1, 2) === 2, \"Test 2 failed\");\n    console.assert(count_Squares(2, 2) === 5, \"Test 3 failed\");\n}\n\ntestCount_Squares()",
        "is_deleted": 1,
        "code_str_deleted": "function count_Squares(m, n) {\n    if (n < m) {\n        let temp = m;\n        m = n;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of squares in a rectangle.",
        "code_str_generate": "function count_Squares(m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of squares in a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n < m) {\n        let temp = m;\n        m = n;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 337,
        "task_id": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code_str": "function bin_coff(n, r) {\n    let val = 1;\n    if (r > (n - r)) {\n        r = (n - r);\n    }\n    for (let i = 0; i < r; i++) {\n        val *= (n - i);\n        val = Math.floor(val / (i + 1));\n    }\n    return val;\n}\n\nfunction find_ways(M) {\n    const n = Math.floor(M / 2);\n    const a = bin_coff(2 * n, n);\n    const b = Math.floor(a / (n + 1));\n    return b;\n}\n\n",
        "test": "const testfind_ways = () => {\n    console.assert(find_ways(4) === 2);\n    console.assert(find_ways(6) === 5);\n    console.assert(find_ways(8) === 14);\n}\n\ntestfind_ways();",
        "is_deleted": 1,
        "code_str_deleted": "function bin_coff(n, r) {\n    let val = 1;\n    if (r > (n - r)) {\n        r = (n - r);\n    }\n    for (let i = 0; i < r; i++) {\n        val *= (n - i);\n        val = Math.floor(val / (i + 1));\n        //begin to write code\n",
        "javascript_prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code_str_generate": "function bin_coff(n, r) {\n    let val = 1;\n    if (r > (n - r)) {\n        r = (n - r);\n    }\n    for (let i = 0; i < r; i++) {\n        val *= (n - i);\n        val = Math.floor(val / (i + 1));\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 338,
        "task_id": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.",
        "code_str": "function check(string) {\n    const p = new Set(string);\n    const s = new Set(['0', '1']);\n    if (areSetsEqual(s, p) || areSetsEqual(p, new Set(['0'])) || areSetsEqual(p, new Set(['1']))) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nfunction areSetsEqual(a, b) {\n    if (a.size !== b.size) return false;\n    for (let item of a) {\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n",
        "test": "const testCheck = () => {\n    console.assert(check(\"01010101010\") === \"Yes\", \"Test 1 Failed\");\n    console.assert(check(\"name0\") === \"No\", \"Test 2 Failed\");\n    console.assert(check(\"101\") === \"Yes\", \"Test 3 Failed\");\n}\n\ntestCheck(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check(string) {\n    const p = new Set(string);\n    const s = new Set(['0', '1']);\n    if (areSetsEqual(s, p) || areSetsEqual(p, new Set(['0'])) || areSetsEqual(p, new Set(['1']))) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given string is a binary string or not.",
        "code_str_generate": "function check(string) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given string is a binary string or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const p = new Set(string);\n    const s = new Set(['0', '1']);\n    if (areSetsEqual(s, p) || areSetsEqual(p, new Set(['0'])) || areSetsEqual(p, new Set(['1']))) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 339,
        "task_id": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "code_str": "function minimum_Length(s) {\n    let maxOcc = 0;\n    const n = s.length;\n    let arr = new Array(26).fill(0);\n    for (let i = 0; i < n; i++) {\n        arr[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n    }\n    for (let i = 0; i < 26; i++) {\n        if (arr[i] > maxOcc) {\n            maxOcc = arr[i];\n        }\n    }\n    return n - maxOcc;\n}\n\n",
        "test": "const testMinimum_Length = () => {\n    console.assert(minimum_Length(\"mnm\") === 1);\n    console.assert(minimum_Length(\"abcda\") === 3);\n    console.assert(minimum_Length(\"abcb\") === 2);\n}\n\ntestMinimum_Length();",
        "is_deleted": 1,
        "code_str_deleted": "function minimum_Length(s) {\n    let maxOcc = 0;\n    const n = s.length;\n    let arr = new Array(26).fill(0);\n    for (let i = 0; i < n; i++) {\n        arr[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to minimize the length of the string by removing occurrence of only one character.",
        "code_str_generate": "function minimum_Length(s) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to minimize the length of the string by removing occurrence of only one character.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxOcc = 0;\n    const n = s.length;\n    let arr = new Array(26).fill(0);\n    for (let i = 0; i < n; i++) {\n        arr[s.charCodeAt(i) - 'a'.charCodeAt(0)] += 1;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 340,
        "task_id": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.",
        "code_str": "function first_Element(arr, n, k) {\n    let count_map = {};\n    for (let i = 0; i < n; i++) {\n        if (arr[i] in count_map) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n    }\n    for (let i = 0; i < n; i++) {\n        if (count_map[arr[i]] === k) {\n            return arr[i];\n        }\n    }\n    return -1;\n}\n\n",
        "test": "const testFirst_Element = () => {\n    console.assert(first_Element([0,1,2,3,4,5],6,1) === 0);\n    console.assert(first_Element([1,2,1,3,4],5,2) === 1);\n    console.assert(first_Element([2,3,4,3,5,7,1,2,3,5],10,2) === 2);\n}\n\ntestFirst_Element()",
        "is_deleted": 1,
        "code_str_deleted": "function first_Element(arr, n, k) {\n    let count_map = {};\n    for (let i = 0; i < n; i++) {\n        if (arr[i] in count_map) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first element occurring k times in a given array.",
        "code_str_generate": "function first_Element(arr, n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first element occurring k times in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count_map = {};\n    for (let i = 0; i < n; i++) {\n        if (arr[i] in count_map) {\n            count_map[arr[i]] += 1;\n        } else {\n            count_map[arr[i]] = 1;\n        }\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 341,
        "task_id": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.",
        "code_str": "function unique_Characters(str) {\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j < str.length; j++) {\n            if (str[i] === str[j]) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n",
        "test": "const testUnique_Characters = () => {\n    console.assert(unique_Characters('aba') === false);\n    console.assert(unique_Characters('abc') === true);\n    console.assert(unique_Characters('abab') === false);\n}\n\ntestUnique_Characters(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function unique_Characters(str) {\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j < str.length; j++) {\n            if (str[i] === str[j]) {\n                return false;\n                //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether all the characters in a given string are unique.",
        "code_str_generate": "function unique_Characters(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether all the characters in a given string are unique.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < str.length; i++) {\n        for (let j = i + 1; j < str.length; j++) {\n            if (str[i] === str[j]) {\n                return false;\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 342,
        "task_id": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.",
        "code_str": "function remove_column(list1, n) {\n    for (let i of list1) {\n        i.splice(n, 1);\n    }\n    return list1;\n}\n\n",
        "test": "const testRemove_column = () => {\n    console.assert(JSON.stringify(remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)) === JSON.stringify([[2, 3], [4, 5], [1, 1]]), 'Test 1 failed');\n    console.assert(JSON.stringify(remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)) === JSON.stringify([[1, 2], [-2, 4], [1, -1]]), 'Test 2 failed');\n    console.assert(JSON.stringify(remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)) === JSON.stringify([[3], [7], [3], [15, 17], [7], [11]]), 'Test 3 failed');\n}\n\ntestRemove_column(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_column(list1, n) {\n    for (let i of list1) {\n        i.splice(n, 1);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to remove a specified column from a given nested list.",
        "code_str_generate": "function remove_column(list1, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove a specified column from a given nested list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i of list1) {\n        i.splice(n, 1);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 343,
        "task_id": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.",
        "code_str": "function tn_ap(a, n, d) {\n    let tn = a + (n - 1) * d;\n    return tn;\n}\n\n",
        "test": "const testtn_ap = () => {\n    console.assert(tn_ap(1, 5, 2) === 9);\n    console.assert(tn_ap(2, 6, 4) === 22);\n    console.assert(tn_ap(1, 4, 5) === 16);\n}\ntesttn_ap() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function tn_ap(a, n, d) {\n    let tn = a + (n - 1) * d;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find t-nth term of arithemetic progression.",
        "code_str_generate": "function tn_ap(a, n, d) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find t-nth term of arithemetic progression.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let tn = a + (n - 1) * d;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 344,
        "task_id": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
        "code_str": "function count_Rectangles(radius) {  \n    let rectangles = 0; \n    let diameter = 2 * radius; \n    let diameterSquare = diameter * diameter; \n    for (let a = 1; a < 2 * radius; a++) {  \n        for (let b = 1; b < 2 * radius; b++) { \n            let diagnalLengthSquare = (a * a + b * b);  \n            if (diagnalLengthSquare <= diameterSquare) { \n                rectangles += 1;\n            }\n        }\n    }\n    return rectangles; \n}\n\n",
        "test": "const testCount_Rectangles = () => {\n    console.assert(count_Rectangles(2) === 8, \"Test case 1 failed\");\n    console.assert(count_Rectangles(1) === 1, \"Test case 2 failed\");\n    console.assert(count_Rectangles(0) === 0, \"Test case 3 failed\");\n}\ntestCount_Rectangles() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Rectangles(radius) {  \n    let rectangles = 0; \n    let diameter = 2 * radius; \n    let diameterSquare = diameter * diameter; \n    for (let a = 1; a < 2 * radius; a++) {  \n        for (let b = 1; b < 2 * radius; b++) { \n            let diagnalLengthSquare = (a * a + b * b);  \n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of rectangles in a circle of radius r.",
        "code_str_generate": "function count_Rectangles(radius) {  \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of rectangles in a circle of radius r.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let rectangles = 0; \n    let diameter = 2 * radius; \n    let diameterSquare = diameter * diameter; \n    for (let a = 1; a < 2 * radius; a++) {  \n        for (let b = 1; b < 2 * radius; b++) { \n            let diagnalLengthSquare = (a * a + b * b);  \n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 345,
        "task_id": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.",
        "code_str": "function find_angle(a, b) {\n    const c = 180 - (a + b);\n    return c;\n}\n\n",
        "test": "const testfind_angle = () => {\n    console.assert(find_angle(47, 89) === 44);\n    console.assert(find_angle(45, 95) === 40);\n    console.assert(find_angle(50, 40) === 90);\n}\n\ntestfind_angle() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_angle(a, b) {\n    const c = 180 - (a + b);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the third angle of a triangle using two angles.",
        "code_str_generate": "function find_angle(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the third angle of a triangle using two angles.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const c = 180 - (a + b);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 346,
        "task_id": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.",
        "code_str": "function find_max(test_list) {\n  let res = Math.max(...test_list.flat().map(Number));\n  return res;\n}\n\n",
        "test": "const testFind_max = () => {\n  console.assert(find_max([[2, 4], [6, 7], [5, 1], [6, 10], [8, 7]]) === 10, \"Test 1 failed\");\n  console.assert(find_max([[3, 5], [7, 8], [6, 2], [7, 11], [9, 8]]) === 11, \"Test 2 failed\");\n  console.assert(find_max([[4, 6], [8, 9], [7, 3], [8, 12], [10, 9]]) === 12, \"Test 3 failed\");\n}\ntestFind_max() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_max(test_list) {\n  let res = Math.max(...test_list.flat().map(Number));\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum element of all the given tuple records.",
        "code_str_generate": "function find_max(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum element of all the given tuple records.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = Math.max(...test_list.flat().map(Number));\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 347,
        "task_id": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "code_str": "function moddiv_list(nums1, nums2) {\n    return nums1.map((num, index) => num % nums2[index]);\n}\n\n",
        "test": "const testModdiv_list = () => {\n    console.assert(JSON.stringify(moddiv_list([4,5,6],[1, 2, 3])) === JSON.stringify([0, 1, 0]), \"Test case 1 failed\");\n    console.assert(JSON.stringify(moddiv_list([3,2],[1,4])) === JSON.stringify([0, 2]), \"Test case 2 failed\");\n    console.assert(JSON.stringify(moddiv_list([90,120],[50,70])) === JSON.stringify([40, 50]), \"Test case 3 failed\");\n}\ntestModdiv_list() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function moddiv_list(nums1, nums2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "code_str_generate": "function moddiv_list(nums1, nums2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find modulo division of two lists using map and lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 348,
        "task_id": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "code_str": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\n",
        "test": "const testCheck_Solution = () => {\n    console.assert(Check_Solution(1, 3, 2) === \"Yes\");\n    console.assert(Check_Solution(1, 2, 3) === \"No\");\n    console.assert(Check_Solution(1, -5, 6) === \"No\");\n}\ntestCheck_Solution() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Check_Solution(a, b, c) {\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether one root of the quadratic equation is twice of the other or not.",
        "code_str_generate": "function Check_Solution(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether one root of the quadratic equation is twice of the other or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (2 * b * b === 9 * a * c) {\n        return \"Yes\";\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 349,
        "task_id": 360,
        "prompt": "Write a function to find the n\u2019th carol number.",
        "code_str": "function get_carol(n) {\n    const result = (2 ** n) - 1;\n    return result * result - 2;\n}\n\n",
        "test": "const testget_carol = () => {\n    console.assert(get_carol(2) === 7, \"Test case 1 failed\");\n    console.assert(get_carol(4) === 223, \"Test case 2 failed\");\n    console.assert(get_carol(5) === 959, \"Test case 3 failed\");\n}\ntestget_carol() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_carol(n) {\n    const result = (2 ** n) - 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the n\u2019th carol number.",
        "code_str_generate": "function get_carol(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n\u2019th carol number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = (2 ** n) - 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 350,
        "task_id": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.",
        "code_str": "function remove_empty(list1) {\n    const filteredList = list1.filter(x => x.length);\n    return filteredList;\n  }",
        "test": "  const testRemove_empty = () => {\n    console.assert(JSON.stringify(remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])) === JSON.stringify(['Red', 'Green', [1, 2], 'Blue']));\n    console.assert(JSON.stringify(remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])) === JSON.stringify(['Green', [1, 2], 'Blue']));\n    console.assert(JSON.stringify(remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])) === JSON.stringify(['Python', 'programming', 'language']));\n  }\n  \n  testRemove_empty() // invoke test  ",
        "is_deleted": 1,
        "code_str_deleted": "function remove_empty(list1) {\n    const filteredList = list1.filter(x => x.length);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to remove empty lists from a given list of lists.",
        "code_str_generate": "function remove_empty(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove empty lists from a given list of lists.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const filteredList = list1.filter(x => x.length);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 351,
        "task_id": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
        "code_str": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => x === i).length;\n        if (occu > max_val) {\n            max_val = occu;\n            result = i;\n        }\n    }\n\n    return result;\n}",
        "test": "const testMax_occurrences = () => {\n    console.assert(max_occurrences([1,2,3,1,2,3,12,4,2]) === 2);\n    console.assert(max_occurrences([1,2,6,7,0,1,0,1,0,0]) === 0);\n    console.assert(max_occurrences([1,2,3,1,2,4,1]) === 1);\n}\ntestMax_occurrences(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_occurrences(nums) {\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => x === i).length;\n        if (occu > max_val) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the item with maximum occurrences in a given list.",
        "code_str_generate": "function max_occurrences(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the item with maximum occurrences in a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_val = 0;\n    let result = nums[0];\n    for (let i of nums) {\n        let occu = nums.filter(x => x === i).length;\n        if (occu > max_val) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 352,
        "task_id": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.",
        "code_str": "function add_K_element(test_list, K) {\n  let res = test_list.map(sub => sub.map(j => j + K));\n  return res;\n}\n\n",
        "test": "const testAdd_K_element = () => {\n  console.assert(JSON.stringify(add_K_element([[1, 3, 4], [2, 4, 6], [3, 8, 1]], 4)) === JSON.stringify([[5, 7, 8], [6, 8, 10], [7, 12, 5]]), 'Test 1 failed');\n  console.assert(JSON.stringify(add_K_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8)) === JSON.stringify([[9, 10, 11], [12, 13, 14], [15, 16, 17]]), 'Test 2 failed');\n  console.assert(JSON.stringify(add_K_element([[11, 12, 13], [14, 15, 16], [17, 18, 19]], 9)) === JSON.stringify([[20, 21, 22], [23, 24, 25], [26, 27, 28]]), 'Test 3 failed');\n}\n\ntestAdd_K_element() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_K_element(test_list, K) {\n  let res = test_list.map(sub => sub.map(j => j + K));\n  //begin to write code\n",
        "javascript_prompt": "Write a function to add the k elements to each element in the tuple.",
        "code_str_generate": "function add_K_element(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to add the k elements to each element in the tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = test_list.map(sub => sub.map(j => j + K));\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 353,
        "task_id": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code_str": "function makeFlip(ch) { \n    return ch === '0' ? '1' : '0'; \n}\n\nfunction getFlipWithStartingCharacter(str, expected) {\n    let flipCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] !== expected) {\n            flipCount++;\n        }\n        expected = makeFlip(expected);\n    }\n    return flipCount;\n}\n\nfunction minFlipToMakeStringAlternate(str) {\n    return Math.min(getFlipWithStartingCharacter(str, '0'), getFlipWithStartingCharacter(str, '1'));\n}\n\n",
        "test": "const testMinFlipToMakeStringAlternate = () => {\n    console.assert(minFlipToMakeStringAlternate(\"0001010111\") === 2, \"Test 1 Failed\");\n    console.assert(minFlipToMakeStringAlternate(\"001\") === 1, \"Test 2 Failed\");\n    console.assert(minFlipToMakeStringAlternate(\"010111011\") === 2, \"Test 3 Failed\");\n}\n\ntestMinFlipToMakeStringAlternate();",
        "is_deleted": 1,
        "code_str_deleted": "function makeFlip(ch) { \n    return ch === '0' ? '1' : '0'; \n}\nfunction getFlipWithStartingCharacter(str, expected) {\n    let flipCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] !== expected) {\n            flipCount++;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code_str_generate": "function makeFlip(ch) { \n    return ch === '0' ? '1' : '0'; \n}\nfunction getFlipWithStartingCharacter(str, expected) {\n    let flipCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] !== expected) {\n            flipCount++;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 354,
        "task_id": 365,
        "prompt": "Write a python function to count the number of digits of a given number.",
        "code_str": "function count_Digit(n) {\n    let count = 0;\n    while (n !== 0) {\n        n = Math.floor(n / 10);\n        count += 1;\n    }\n    return count;\n}\n\n",
        "test": "const testCount_Digit = () => {\n    console.assert(count_Digit(12345) === 5);\n    console.assert(count_Digit(11223305) === 8);\n    console.assert(count_Digit(4123459) === 7);\n}\n\ntestCount_Digit(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Digit(n) {\n    let count = 0;\n    while (n !== 0) {\n        n = Math.floor(n / 10);\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the number of digits of a given number.",
        "code_str_generate": "function count_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the number of digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    while (n !== 0) {\n        n = Math.floor(n / 10);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 355,
        "task_id": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code_str": "function adjacentNumProduct(listNums) {\n    return Math.max(...listNums.slice(0, -1).map((num, i) => num * listNums[i + 1]));\n}\n\n",
        "test": "const testAdjacentNumProduct = () => {\n    console.assert(adjacentNumProduct([1, 2, 3, 4, 5, 6]) === 30);\n    console.assert(adjacentNumProduct([1, 2, 3, 4, 5]) === 20);\n    console.assert(adjacentNumProduct([2, 3]) === 6);\n}\n\ntestAdjacentNumProduct() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function adjacentNumProduct(listNums) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code_str_generate": "function adjacentNumProduct(listNums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest product of the pair of adjacent elements from a given list of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 356,
        "task_id": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.",
        "code_str": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n}\n\nfunction is_tree_balanced(root) {\n    if (root === null) {\n        return true;\n    }\n    let lh = get_height(root.left);\n    let rh = get_height(root.right);\n    if (Math.abs(lh - rh) <= 1 && is_tree_balanced(root.left) && is_tree_balanced(root.right)) {\n        return true;\n    }\n    return false;\n}\n\n",
        "test": "const testis_tree_balanced = () => {\n    let root = new Node(1);\n    root.left = new Node(2);\n    root.right = new Node(3);\n    root.left.left = new Node(4);\n    root.left.right = new Node(5);\n    root.left.left.left = new Node(8);\n    \n    let root1 = new Node(1);\n    root1.left = new Node(2);\n    root1.right = new Node(3);\n    root1.left.left = new Node(4);\n    root1.left.right = new Node(5);\n    root1.right.left = new Node(6);\n    root1.left.left.left = new Node(7);\n\n    let root2 = new Node(1);\n    root2.left = new Node(2);\n    root2.right = new Node(3);\n    root2.left.left = new Node(4);\n    root2.left.right = new Node(5);\n    root2.left.left.left = new Node(7);\n\n    console.assert(is_tree_balanced(root) === false, \"Test 1 Failed\");\n    console.assert(is_tree_balanced(root1) === true, \"Test 2 Failed\");\n    console.assert(is_tree_balanced(root2) === false, \"Test 3 Failed\");\n}\n\ntestis_tree_balanced(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check if a binary tree is balanced or not.",
        "code_str_generate": "class Node {\n    constructor(data) {\n        this.data = data;\n        this.left = null;\n        this.right = null;\n    }\n}\nfunction get_height(root) {\n    if (root === null) {\n        return 0;\n    }\n    return Math.max(get_height(root.left), get_height(root.right)) + 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 357,
        "task_id": 368,
        "prompt": "Write a function to repeat the given tuple n times.",
        "code_str": "function repeatTuples(testTup, N) {\n  let res = Array(N).fill(testTup);\n  return res;\n}\n\n",
        "test": "const testRepeatTuples = () => {\n  console.assert(JSON.stringify(repeatTuples([1, 3], 4)) === JSON.stringify([[1, 3], [1, 3], [1, 3], [1, 3]]), 'Test 1 Failed');\n  console.assert(JSON.stringify(repeatTuples([1, 2], 3)) === JSON.stringify([[1, 2], [1, 2], [1, 2]]), 'Test 2 Failed');\n  console.assert(JSON.stringify(repeatTuples([3, 4], 5)) === JSON.stringify([[3, 4], [3, 4], [3, 4], [3, 4], [3, 4]]), 'Test 3 Failed');\n}\ntestRepeatTuples() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function repeatTuples(testTup, N) {\n  let res = Array(N).fill(testTup);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to repeat the given tuple n times.",
        "code_str_generate": "function repeatTuples(testTup, N) {\n\n    /*\n    progame language:javascript\n    description:Write a function to repeat the given tuple n times.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = Array(N).fill(testTup);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 358,
        "task_id": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid",
        "code_str": "function lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  return LSA;\n}\n\n",
        "test": "const testLateralsurfaceCuboid = () => {\n  console.assert(lateralsurface_cuboid(8, 5, 6) === 156);\n  console.assert(lateralsurface_cuboid(7, 9, 10) === 320);\n  console.assert(lateralsurface_cuboid(10, 20, 30) === 1800);\n}\n\ntestLateralsurfaceCuboid(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function lateralsurface_cuboid(l, w, h) {\n  let LSA = 2 * h * (l + w);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the lateral surface area of cuboid",
        "code_str_generate": "function lateralsurface_cuboid(l, w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the lateral surface area of cuboid\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let LSA = 2 * h * (l + w);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 359,
        "task_id": 370,
        "prompt": "Write a function to sort a tuple by its float element.",
        "code_str": "function floatSort(price) {\n    return price.sort((a, b) => parseFloat(b[1]) - parseFloat(a[1]));\n}\n\n",
        "test": "const testFloatSort = () => {\n    console.assert(JSON.stringify(floatSort([['item1', '12.20'], ['item2', '15.10'], ['item3', '24.5']])) === JSON.stringify([['item3', '24.5'], ['item2', '15.10'], ['item1', '12.20']]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(floatSort([['item1', '15'], ['item2', '10'], ['item3', '20']])) === JSON.stringify([['item3', '20'], ['item1', '15'], ['item2', '10']]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(floatSort([['item1', '5'], ['item2', '10'], ['item3', '14']])) === JSON.stringify([['item3', '14'], ['item2', '10'], ['item1', '5']]), \"Test 3 Failed\");\n}\ntestFloatSort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function floatSort(price) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to sort a tuple by its float element.",
        "code_str_generate": "function floatSort(price) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a tuple by its float element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 360,
        "task_id": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.",
        "code_str": "function smallest_missing(A, left_element, right_element) {\n    if (left_element > right_element) {\n        return left_element;\n    }\n    let mid = left_element + Math.floor((right_element - left_element) / 2);\n    if (A[mid] === mid) {\n        return smallest_missing(A, mid + 1, right_element);\n    } else {\n        return smallest_missing(A, left_element, mid - 1);\n    }\n}\n\n",
        "test": "const testSmallest_missing = () => {\n    console.assert(smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) === 7);\n    console.assert(smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) === 3);\n    console.assert(smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) === 0);\n}\ntestSmallest_missing(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function smallest_missing(A, left_element, right_element) {\n    if (left_element > right_element) {\n        return left_element;\n    }\n    let mid = left_element + Math.floor((right_element - left_element) / 2);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the smallest missing element in a sorted array.",
        "code_str_generate": "function smallest_missing(A, left_element, right_element) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the smallest missing element in a sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (left_element > right_element) {\n        return left_element;\n    }\n    let mid = left_element + Math.floor((right_element - left_element) / 2);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 361,
        "task_id": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code_str": "//function difinition\nconst heap_assending = (nums) => {\n  nums.sort((a, b) => a - b);\n  return nums;\n}\n\n",
        "test": "const testheap_assending = () => {\n    console.assert(JSON.stringify(heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])) === JSON.stringify([1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]), \"Test 1 failed\");\n    console.assert(JSON.stringify(heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])) === JSON.stringify([14, 22, 25, 25, 35, 58, 65, 75, 85]), \"Test 2 failed\");\n    console.assert(JSON.stringify(heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])) === JSON.stringify([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]), \"Test 3 failed\");\n}\ntestheap_assending() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function difinition\nconst heap_assending = (nums) => {\n//begin to write code\n",
        "javascript_prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code_str_generate": "//function difinition\nconst heap_assending = (nums) => {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 362,
        "task_id": 373,
        "prompt": "Write a function to find the volume of a cuboid.",
        "code_str": "function volume_cuboid(l, w, h) {\n    let volume = l * w * h;\n    return volume;\n}\n\n",
        "test": "const testVolume_cuboid = () => {\n    console.assert(volume_cuboid(1, 2, 3) === 6);\n    console.assert(volume_cuboid(5, 7, 9) === 315);\n    console.assert(volume_cuboid(10, 15, 21) === 3150);\n}\n\ntestVolume_cuboid(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function volume_cuboid(l, w, h) {\n    let volume = l * w * h;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the volume of a cuboid.",
        "code_str_generate": "function volume_cuboid(l, w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the volume of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let volume = l * w * h;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 363,
        "task_id": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.",
        "code_str": "function permuteString(str) {\n    if (str.length === 0) {\n        return [''];\n    }\n    let prevList = permuteString(str.substring(1));\n    let nextList = [];\n    for (let i = 0; i < prevList.length; i++) {\n        for (let j = 0; j <= str.length; j++) {\n            let newStr = prevList[i].slice(0, j) + str[0] + prevList[i].slice(j);\n            if (!nextList.includes(newStr)) {\n                nextList.push(newStr);\n            }\n        }\n    }\n    return nextList;\n}\n\n",
        "test": "const testPermuteString = () => {\n    console.assert(JSON.stringify(permuteString('ab')) === JSON.stringify(['ab', 'ba']), \"Test case 1 failed\");\n    console.assert(JSON.stringify(permuteString('abc')) === JSON.stringify(['abc', 'bac', 'bca', 'acb', 'cab', 'cba']), \"Test case 2 failed\");\n    console.assert(JSON.stringify(permuteString('abcd')) === JSON.stringify(['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']), \"Test case 3 failed\");\n}\ntestPermuteString() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function permuteString(str) {\n    if (str.length === 0) {\n        return [''];\n    }\n    let prevList = permuteString(str.substring(1));\n    let nextList = [];\n    for (let i = 0; i < prevList.length; i++) {\n        for (let j = 0; j <= str.length; j++) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to print all permutations of a given string including duplicates.",
        "code_str_generate": "function permuteString(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to print all permutations of a given string including duplicates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (str.length === 0) {\n        return [''];\n    }\n    let prevList = permuteString(str.substring(1));\n    let nextList = [];\n    for (let i = 0; i < prevList.length; i++) {\n        for (let j = 0; j <= str.length; j++) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 364,
        "task_id": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code_str": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    let b = a + m;\n    return (n - a > b - n ? b : a);\n}\n\n",
        "test": "const testRound_num = () => {\n    console.assert(round_num(4722, 10) === 4720, \"Test 1 Failed\");\n    console.assert(round_num(1111, 5) === 1110, \"Test 2 Failed\");\n    console.assert(round_num(219, 2) === 218, \"Test 3 Failed\");\n}\n\ntestRound_num() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function round_num(n, m) {\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code_str_generate": "function round_num(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round the given number to the nearest multiple of a specific number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = Math.floor(n / m) * m;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 365,
        "task_id": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code_str": "function remove_replica(test_tup) {\n  const temp = new Set();\n  const res = Array.from(test_tup).map(ele => {\n    if (!temp.has(ele)) {\n      temp.add(ele);\n      return ele;\n    } else {\n      return 'MSP';\n    }\n  });\n  return res;\n}\n\n",
        "test": "const testRemove_replica = () => {\n  console.assert(JSON.stringify(remove_replica([1, 1, 4, 4, 4, 5, 5, 6, 7, 7])) === JSON.stringify([1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP']), \"Test 1 Failed\");\n  console.assert(JSON.stringify(remove_replica([2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9])) === JSON.stringify([2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP']), \"Test 2 Failed\");\n  console.assert(JSON.stringify(remove_replica([2, 2, 5, 4, 5, 7, 5, 6, 7, 7])) === JSON.stringify([2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP']), \"Test 3 Failed\");\n}\n\ntestRemove_replica(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_replica(test_tup) {\n  const temp = new Set();\n  const res = Array.from(test_tup).map(ele => {\n    if (!temp.has(ele)) {\n      temp.add(ele);\n      return ele;\n      //begin to write code\n",
        "javascript_prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code_str_generate": "function remove_replica(test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const temp = new Set();\n  const res = Array.from(test_tup).map(ele => {\n    if (!temp.has(ele)) {\n      temp.add(ele);\n      return ele;\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 366,
        "task_id": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.",
        "code_str": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n    let result = s.split('').filter(char => char !== c).join('');\n    return result;\n}\n\n",
        "test": "const testRemove_Char = () => {\n    console.assert(remove_Char(\"aba\", 'a') === \"b\", \"Test Failed\");\n    console.assert(remove_Char(\"toggle\", 'g') === \"tole\", \"Test Failed\");\n    console.assert(remove_Char(\"aabbc\", 'b') === \"aac\", \"Test Failed\");\n}\ntestRemove_Char() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_Char(s, c) {\n    let counts = s.split(c).length - 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to remove all occurrences of a character in a given string.",
        "code_str_generate": "function remove_Char(s, c) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove all occurrences of a character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let counts = s.split(c).length - 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 367,
        "task_id": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.",
        "code_str": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  return test_list;\n}\n\n",
        "test": "const testMoveFirst = () => {\n  console.assert(JSON.stringify(move_first([1, 2, 3, 4])) === JSON.stringify([4, 1, 2, 3]), 'Test 1 failed');\n  console.assert(JSON.stringify(move_first([0, 1, 2, 3])) === JSON.stringify([3, 0, 1, 2]), 'Test 2 failed');\n  console.assert(JSON.stringify(move_first([9, 8, 7, 1])) === JSON.stringify([1, 9, 8, 7]), 'Test 3 failed');\n}\n\ntestMoveFirst() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function move_first(test_list) {\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  //begin to write code\n",
        "javascript_prompt": "Write a javascript function to shift last element to first position in the given list.",
        "code_str_generate": "function move_first(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to shift last element to first position in the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  test_list = [...test_list.slice(-1), ...test_list.slice(0, -1)];\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 368,
        "task_id": 379,
        "prompt": "Write a function to find the surface area of a cuboid.",
        "code_str": "function surfacearea_cuboid(l, w, h) {\n    const SA = 2 * (l * w + l * h + w * h);\n    return SA;\n}\n\n",
        "test": "const testSurfacearea_cuboid = () => {\n    console.assert(surfacearea_cuboid(1, 2, 3) === 22);\n    console.assert(surfacearea_cuboid(5, 7, 9) === 286);\n    console.assert(surfacearea_cuboid(10, 15, 21) === 1350);\n}\ntestSurfacearea_cuboid();",
        "is_deleted": 1,
        "code_str_deleted": "function surfacearea_cuboid(l, w, h) {\n    const SA = 2 * (l * w + l * h + w * h);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the surface area of a cuboid.",
        "code_str_generate": "function surfacearea_cuboid(l, w, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cuboid.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const SA = 2 * (l * w + l * h + w * h);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 369,
        "task_id": 380,
        "prompt": "Write a function to generate a two-dimensional array.",
        "code_str": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row++) {\n    for (let col = 0; col < colnum; col++) {\n      multi_list[row][col] = row * col;\n    }\n  }\n  return multi_list;\n}\n\n",
        "test": "const testMulti_list = () => {\n  console.assert(JSON.stringify(multi_list(3,4)) === JSON.stringify([[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]), 'Test 1 failed');\n  console.assert(JSON.stringify(multi_list(5,7)) === JSON.stringify([[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]), 'Test 2 failed');\n  console.assert(JSON.stringify(multi_list(10,15)) === JSON.stringify([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]), 'Test 3 failed');\n}\n\ntestMulti_list(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function multi_list(rownum, colnum) {\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row++) {\n    for (let col = 0; col < colnum; col++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to generate a two-dimensional array.",
        "code_str_generate": "function multi_list(rownum, colnum) {\n\n    /*\n    progame language:javascript\n    description:Write a function to generate a two-dimensional array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const multi_list = Array.from({ length: rownum }, () => new Array(colnum).fill(0));\n  for (let row = 0; row < rownum; row++) {\n    for (let col = 0; col < colnum; col++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 370,
        "task_id": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "code_str": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n        } else {\n            return a[indexNo] - b[indexNo];\n        }\n    });\n    return ret;\n}",
        "test": "const testIndexOnInnerList = () => {\n    console.assert(JSON.stringify(indexOnInnerList([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0)) === JSON.stringify([['Beau Turnbull', 94, 98], ['Brady Kent', 97, 96], ['Greyson Fulton', 98, 99], ['Wyatt Knott', 91, 94]]));\n    console.assert(JSON.stringify(indexOnInnerList([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 1)) === JSON.stringify([['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98], ['Brady Kent', 97, 96], ['Greyson Fulton', 98, 99]]));\n    console.assert(JSON.stringify(indexOnInnerList([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 2)) === JSON.stringify([['Wyatt Knott', 91, 94], ['Brady Kent', 97, 96], ['Beau Turnbull', 94, 98], ['Greyson Fulton', 98, 99]]));\n}\n\ntestIndexOnInnerList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function indexOnInnerList(listData, indexNo) {\n    const ret = listData.sort((a, b) => {\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n        } else {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "code_str_generate": "function indexOnInnerList(listData, indexNo) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of lists by a given index of the inner list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ret = listData.sort((a, b) => {\n        if (typeof a[indexNo] === 'string' && typeof b[indexNo] === 'string') {\n            return a[indexNo].localeCompare(b[indexNo]);\n        } else {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 371,
        "task_id": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "code_str": "function find_rotation_count(A) {\n    let left = 0;\n    let right = A.length - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        let mid = Math.floor((left + right) / 2);\n        let next = (mid + 1) % A.length;\n        let prev = (mid - 1 + A.length) % A.length;\n        if (A[mid] <= A[next] && A[mid] <= A[prev]) {\n            return mid;\n        } else if (A[mid] <= A[right]) {\n            right = mid - 1;\n        } else if (A[mid] >= A[left]) {\n            left = mid + 1;\n        }\n    }\n    return -1;\n}\n\n",
        "test": "const testFind_rotation_count = () => {\n    console.assert(find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) === 3);\n    console.assert(find_rotation_count([8, 9, 10, 2, 5, 6]) === 3);\n    console.assert(find_rotation_count([2, 5, 6, 8, 9, 10]) === 0);\n}\ntestFind_rotation_count() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_rotation_count(A) {\n    let left = 0;\n    let right = A.length - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        let mid = Math.floor((left + right) / 2);\n        let next = (mid + 1) % A.length;\n        let prev = (mid - 1 + A.length) % A.length;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "code_str_generate": "function find_rotation_count(A) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the number of rotations in a circularly sorted array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let left = 0;\n    let right = A.length - 1;\n    while (left <= right) {\n        if (A[left] <= A[right]) {\n            return left;\n        }\n        let mid = Math.floor((left + right) / 2);\n        let next = (mid + 1) % A.length;\n        let prev = (mid - 1 + A.length) % A.length;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 372,
        "task_id": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.",
        "code_str": "function even_bit_toggle_number(n) {\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n            res |= (1 << count);\n        }\n        count++;\n        temp >>= 1;\n    }\n    return n ^ res;\n}\n\n",
        "test": "const testEven_bit_toggle_number = () => {\n    console.assert(even_bit_toggle_number(10) === 15, \"Test case 1 failed\");\n    console.assert(even_bit_toggle_number(20) === 1, \"Test case 2 failed\");\n    console.assert(even_bit_toggle_number(30) === 11, \"Test case 3 failed\");\n}\ntestEven_bit_toggle_number(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function even_bit_toggle_number(n) {\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to toggle all odd bits of a given number.",
        "code_str_generate": "function even_bit_toggle_number(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to toggle all odd bits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    let count = 0;\n    let temp = n;\n    while (temp > 0) {\n        if (count % 2 === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 373,
        "task_id": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.",
        "code_str": "function frequency_Of_Smallest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] === mn) {\n            freq += 1;\n        }\n    }\n    return freq;\n}\n\n",
        "test": "const testFrequency_Of_Smallest = () => {\n    console.assert(frequency_Of_Smallest(5, [1, 2, 3, 4, 3]) === 1);\n    console.assert(frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3]) === 1);\n    console.assert(frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9]) === 3);\n}\ntestFrequency_Of_Smallest();",
        "is_deleted": 1,
        "code_str_deleted": "function frequency_Of_Smallest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the frequency of the smallest value in a given array.",
        "code_str_generate": "function frequency_Of_Smallest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] < mn) {\n            mn = arr[i];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 374,
        "task_id": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.",
        "code_str": "function get_perrin(n) {\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return 2;\n    }\n    return get_perrin(n - 2) + get_perrin(n - 3);\n}\n\n",
        "test": "const testGet_perrin = () => {\n    console.assert(get_perrin(9) === 12, 'Test Case 1 Failed');\n    console.assert(get_perrin(4) === 2, 'Test Case 2 Failed');\n    console.assert(get_perrin(6) === 5, 'Test Case 3 Failed');\n}\n\ntestGet_perrin(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_perrin(n) {\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 0;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the n'th perrin number using recursion.",
        "code_str_generate": "function get_perrin(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n'th perrin number using recursion.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 0;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 375,
        "task_id": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code_str": "function swap_count(s) {\n    let chars = s;\n    let count_left = 0;\n    let count_right = 0;\n    let swap = 0;\n    let imbalance = 0;\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i] === '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n                swap += imbalance;\n                imbalance -= 1;\n            }\n        } else if (chars[i] === ']') {\n            count_right += 1;\n            imbalance = count_right - count_left;\n        }\n    }\n    return swap;\n}\n\n",
        "test": "const testswap_count = () => {\n    console.assert(swap_count(\"[]][][\") === 2);\n    console.assert(swap_count(\"[[][]]\") === 0);\n    console.assert(swap_count(\"[[][]]][\") === 1);\n}\ntestswap_count() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function swap_count(s) {\n    let chars = s;\n    let count_left = 0;\n    let count_right = 0;\n    let swap = 0;\n    let imbalance = 0;\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i] === '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code_str_generate": "function swap_count(s) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let chars = s;\n    let count_left = 0;\n    let count_right = 0;\n    let swap = 0;\n    let imbalance = 0;\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i] === '[') {\n            count_left += 1;\n            if (imbalance > 0) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 376,
        "task_id": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
        "code_str": "function even_or_odd(N) {\n    let l = N.length;\n    if (N[l - 1] == '0' || N[l - 1] == '2' ||\n        N[l - 1] == '4' || N[l - 1] == '6' ||\n        N[l - 1] == '8' || N[l - 1] == 'A' ||\n        N[l - 1] == 'C' || N[l - 1] == 'E') {\n        return (\"Even\");\n    } else {\n        return (\"Odd\");\n    }\n}\n\n",
        "test": "const testEven_or_odd = () => {\n    console.assert(even_or_odd(\"AB3454D\") == \"Odd\", \"Test 1 Failed\");\n    console.assert(even_or_odd(\"ABC\") == \"Even\", \"Test 2 Failed\");\n    console.assert(even_or_odd(\"AAD\") == \"Odd\", \"Test 3 Failed\");\n}\ntestEven_or_odd();",
        "is_deleted": 1,
        "code_str_deleted": "function even_or_odd(N) {\n    let l = N.length;\n    if (N[l - 1] == '0' || N[l - 1] == '2' ||\n        N[l - 1] == '4' || N[l - 1] == '6' ||\n        N[l - 1] == '8' || N[l - 1] == 'A' ||\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the hexadecimal number is even or odd.",
        "code_str_generate": "function even_or_odd(N) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the hexadecimal number is even or odd.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let l = N.length;\n    if (N[l - 1] == '0' || N[l - 1] == '2' ||\n        N[l - 1] == '4' || N[l - 1] == '6' ||\n        N[l - 1] == '8' || N[l - 1] == 'A' ||\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 377,
        "task_id": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "code_str": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            break;\n        }\n    }\n    return res;\n}\n\n",
        "test": "const testHighest_Power_of_2 = () => {\n    console.assert(highest_Power_of_2(10) === 8, \"Test 1 Failed\");\n    console.assert(highest_Power_of_2(19) === 16, \"Test 2 Failed\");\n    console.assert(highest_Power_of_2(32) === 32, \"Test 3 Failed\");\n}\ntestHighest_Power_of_2(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function highest_Power_of_2(n) {\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the highest power of 2 that is less than or equal to n.",
        "code_str_generate": "function highest_Power_of_2(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the highest power of 2 that is less than or equal to n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let i = n; i > 0; i--) {\n        if ((i & (i - 1)) === 0) {\n            res = i;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 378,
        "task_id": 389,
        "prompt": "Write a function to find the n'th lucas number.",
        "code_str": "function find_lucas(n) {\n    if (n === 0) {\n        return 2;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return find_lucas(n - 1) + find_lucas(n - 2);\n}\n\n",
        "test": "const testfind_lucas = () => {\n    console.assert(find_lucas(9) === 76, \"Test failed for n = 9\");\n    console.assert(find_lucas(4) === 7, \"Test failed for n = 4\");\n    console.assert(find_lucas(3) === 4, \"Test failed for n = 3\");\n}\n\ntestfind_lucas()",
        "is_deleted": 1,
        "code_str_deleted": "function find_lucas(n) {\n    if (n === 0) {\n        return 2;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the n'th lucas number.",
        "code_str_generate": "function find_lucas(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the n'th lucas number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n === 0) {\n        return 2;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 379,
        "task_id": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "code_str": "function add_string(list, string) {\n    return list.map(item => string.replace('{0}', item));\n}\n\n",
        "test": "const testadd_string = () => {\n    console.assert(JSON.stringify(add_string([1,2,3,4], 'temp{0}')) === JSON.stringify(['temp1', 'temp2', 'temp3', 'temp4']));\n    console.assert(JSON.stringify(add_string(['a','b','c','d'], 'python{0}')) === JSON.stringify(['pythona', 'pythonb', 'pythonc', 'pythond']));\n    console.assert(JSON.stringify(add_string([5,6,7,8], 'string{0}')) === JSON.stringify(['string5', 'string6', 'string7', 'string8']));\n}\n\ntestadd_string() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_string(list, string) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "code_str_generate": "function add_string(list, string) {\n\n    /*\n    progame language:javascript\n    description:Write a function to insert a given string at the beginning of all items in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 380,
        "task_id": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "code_str": "function convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n        return { [x]: { [l2[index]]: l3[index] } };\n    });\n    return result;\n}\n\n",
        "test": "const testConvertListDictionary = () => {\n    console.assert(JSON.stringify(convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])) === JSON.stringify([{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])) === JSON.stringify([{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])) === JSON.stringify([{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]), \"Test 3 Failed\");\n}\n\ntestConvertListDictionary(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function convert_list_dictionary(l1, l2, l3) {\n    const result = l1.map((x, index) => {\n        return { [x]: { [l2[index]]: l3[index] } };\n        //begin to write code\n",
        "javascript_prompt": "Write a function to convert more than one list to nested dictionary.",
        "code_str_generate": "function convert_list_dictionary(l1, l2, l3) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert more than one list to nested dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = l1.map((x, index) => {\n        return { [x]: { [l2[index]]: l3[index] } };\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 381,
        "task_id": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code_str": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n                        + res[Math.floor(i / 3)]\n                        + res[Math.floor(i / 4)]\n                        + res[Math.floor(i / 5)])));\n        i = i + 1;\n    }\n    return res[n];\n}\n\n",
        "test": "const testGet_max_sum = () => {\n    console.assert(get_max_sum(60) === 106, \"Test case 1 failed\");\n    console.assert(get_max_sum(10) === 12, \"Test case 2 failed\");\n    console.assert(get_max_sum(2) === 2, \"Test case 3 failed\");\n}\n\ntestGet_max_sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_max_sum(n) {\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code_str_generate": "function get_max_sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = [];\n    res.push(0);\n    res.push(1);\n    let i = 2;\n    while (i < n + 1) {\n        res.push(Math.max(i, (res[Math.floor(i / 2)] \n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 382,
        "task_id": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.",
        "code_str": "function max_length_list(input_list) {\n    let max_length = Math.max(...input_list.map(x => x.length));\n    let max_list = input_list.reduce((a, b) => a.length > b.length ? a : b);\n    return [max_length, max_list];\n}\n\n",
        "test": "const testMaxLengthList = () => {\n    console.assert(JSON.stringify(max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])) === JSON.stringify([3, [13, 15, 17]]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])) === JSON.stringify([5, [1,2,3,4,5]]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])) === JSON.stringify([4, [6,7,8,9]]), \"Test 3 Failed\");\n}\n\ntestMaxLengthList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_length_list(input_list) {\n    let max_length = Math.max(...input_list.map(x => x.length));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the list with maximum length using lambda function.",
        "code_str_generate": "function max_length_list(input_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the list with maximum length using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max_length = Math.max(...input_list.map(x => x.length));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 383,
        "task_id": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.",
        "code_str": "function checkDistinct(testArr) {\n  let res = true;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = false;\n      break;\n    }\n    temp.add(ele);\n  }\n  return res;\n}\n\n",
        "test": "const testCheckDistinct = () => {\n  console.assert(checkDistinct([1, 4, 5, 6, 1, 4]) === false, \"Test 1 failed\");\n  console.assert(checkDistinct([1, 4, 5, 6]) === true, \"Test 2 failed\");\n  console.assert(checkDistinct([2, 3, 4, 5, 6]) === true, \"Test 3 failed\");\n}\n\ntestCheckDistinct(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function checkDistinct(testArr) {\n  let res = true;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = false;\n      //begin to write code\n",
        "javascript_prompt": "Write a function to check if given tuple is distinct or not.",
        "code_str_generate": "function checkDistinct(testArr) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if given tuple is distinct or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = true;\n  let temp = new Set();\n  for (let ele of testArr) {\n    if (temp.has(ele)) {\n      res = false;\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 384,
        "task_id": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "code_str": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n    }\n  }\n  for (const c of char_order) {\n    if (ctr[c] === 1) {\n      return c;\n    }\n  }\n  return null;\n}\n\n",
        "test": "const testFirst_non_repeating_character = () => {\n  console.assert(first_non_repeating_character(\"abcabc\") === null, \"Test 1 Failed\");\n  console.assert(first_non_repeating_character(\"abc\") === \"a\", \"Test 2 Failed\");\n  console.assert(first_non_repeating_character(\"ababc\") === \"c\", \"Test 3 Failed\");\n}\n\ntestFirst_non_repeating_character() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function first_non_repeating_character(str1) {\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first non-repeated character in a given string.",
        "code_str_generate": "function first_non_repeating_character(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first non-repeated character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const char_order = [];\n  const ctr = {};\n  for (const c of str1) {\n    if (ctr[c]) {\n      ctr[c] += 1;\n    } else {\n      ctr[c] = 1;\n      char_order.push(c);\n      //begin to write code\n"
    },
    {
        "Unnamed: 0": 385,
        "task_id": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code_str": "const check_char = (string) => {\n    const regex = new RegExp('^[a-z]$|^([a-z]).*\\\\1$');\n    if (regex.test(string)) {\n        return \"Valid\";\n    } else {\n        return \"Invalid\";\n    }\n}\n\n",
        "test": "const testCheck_char = () => {\n    console.assert(check_char(\"abba\") === \"Valid\", \"Test case 1 failed\");\n    console.assert(check_char(\"a\") === \"Valid\", \"Test case 2 failed\");\n    console.assert(check_char(\"abcd\") === \"Invalid\", \"Test case 3 failed\");\n}\n\ntestCheck_char() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const check_char = (string) => {\n    const regex = new RegExp('^[a-z]$|^([a-z]).*\\\\1$');\n    if (regex.test(string)) {\n        return \"Valid\";\n        //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code_str_generate": "const check_char = (string) => {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const regex = new RegExp('^[a-z]$|^([a-z]).*\\\\1$');\n    if (regex.test(string)) {\n        return \"Valid\";\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 386,
        "task_id": 397,
        "prompt": "Write a function to find the median of three specific numbers.",
        "code_str": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    } else {\n        if (a > c) {\n            median = a;\n        } else if (b < c) {\n            median = b;\n        } else {\n            median = c;\n        }\n    }\n    return median;\n}\n\n",
        "test": "const testMedian_numbers = () => {\n    console.assert(median_numbers(25, 55, 65) === 55);\n    console.assert(median_numbers(20, 10, 30) === 20);\n    console.assert(median_numbers(15, 45, 75) === 45);\n}\ntestMedian_numbers() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function median_numbers(a, b, c) {\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the median of three specific numbers.",
        "code_str_generate": "function median_numbers(a, b, c) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of three specific numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let median;\n    if (a > b) {\n        if (a < c) {\n            median = a;\n        } else if (b > c) {\n            median = b;\n        } else {\n            median = c;\n        }\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 387,
        "task_id": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "code_str": "function sum_of_digits(nums) {\n    const ret = nums.flat(Infinity)\n    .filter(el => typeof el === 'number' || (typeof el === 'string' && el.match(/^\\d+$/)))\n    .map(el => Math.abs(Number(el)))\n    .join('')\n    .split('')\n    .map(Number)\n    .reduce((acc, el) => acc + el, 0);\n    return ret;\n}",
        "test": "const testSum_of_digits = () => {\n    console.assert(sum_of_digits([10, 2, 56]) === 14, 'Test 1 failed');\n    console.assert(sum_of_digits([10, 20, 4, 5, 'b', 70, 'a']) === 19, 'Test 2 failed');\n    console.assert(sum_of_digits([10, 20, -4, 5, -70]) === 19, 'Test 3 failed');\n}\n\ntestSum_of_digits(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_of_digits(nums) {\n    const ret = nums.flat(Infinity)\n    .filter(el => typeof el === 'number' || (typeof el === 'string' && el.match(/^\\d+$/)))\n    .map(el => Math.abs(Number(el)))\n    .join('')\n    //begin to write code\n",
        "javascript_prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "code_str_generate": "function sum_of_digits(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to compute the sum of digits of each number of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ret = nums.flat(Infinity)\n    .filter(el => typeof el === 'number' || (typeof el === 'string' && el.match(/^\\d+$/)))\n    .map(el => Math.abs(Number(el)))\n    .join('')\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 388,
        "task_id": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code_str": "function bitwise_xor(test_tup1, test_tup2) {\n    const res = test_tup1.map((ele1, index) => ele1 ^ test_tup2[index]);\n    return res;\n}\n\n",
        "test": "const testbitwise_xor = () => {\n    console.assert(JSON.stringify(bitwise_xor([10, 4, 6, 9], [5, 2, 3, 3])) === JSON.stringify([15, 6, 5, 10]), 'Test 1 Failed');\n    console.assert(JSON.stringify(bitwise_xor([11, 5, 7, 10], [6, 3, 4, 4])) === JSON.stringify([13, 6, 3, 14]), 'Test 2 Failed');\n    console.assert(JSON.stringify(bitwise_xor([12, 6, 8, 11], [7, 4, 5, 6])) === JSON.stringify([11, 2, 13, 13]), 'Test 3 Failed');\n}\ntestbitwise_xor() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function bitwise_xor(test_tup1, test_tup2) {\n    const res = test_tup1.map((ele1, index) => ele1 ^ test_tup2[index]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code_str_generate": "function bitwise_xor(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = test_tup1.map((ele1, index) => ele1 ^ test_tup2[index]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 389,
        "task_id": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code_str": "function extract_freq(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    return res;\n}\n\n",
        "test": "const testExtract_freq = () => {\n    console.assert(extract_freq([[3, 4], [1, 2], [4, 3], [5, 6]]) === 3);\n    console.assert(extract_freq([[4, 15], [2, 3], [5, 4], [6, 7]]) === 4);\n    console.assert(extract_freq([[5, 16], [2, 3], [6, 5], [6, 9]]) === 4);\n}\n\ntestExtract_freq(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_freq(test_list) {\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code_str_generate": "function extract_freq(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = new Set(test_list.map(sub => sub.sort().join(','))).size;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 390,
        "task_id": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code_str": "function add_nested_tuples(test_tup1, test_tup2) {\n    return test_tup1.map((tuple1, idx) => {\n        return tuple1.map((value, jdx) => {\n            return value + test_tup2[idx][jdx];\n        });\n    });\n}\n\n",
        "test": "const testAdd_nested_tuples = () => {\n    console.assert(JSON.stringify(add_nested_tuples([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[7, 10], [7, 14], [3, 10], [8, 13]]));\n    console.assert(JSON.stringify(add_nested_tuples([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[9, 12], [9, 16], [5, 12], [10, 15]]));\n    console.assert(JSON.stringify(add_nested_tuples([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[11, 14], [11, 18], [7, 14], [12, 17]]));\n}\n\ntestAdd_nested_tuples(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_nested_tuples(test_tup1, test_tup2) {\n    return test_tup1.map((tuple1, idx) => {\n        return tuple1.map((value, jdx) => {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code_str_generate": "function add_nested_tuples(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    return test_tup1.map((tuple1, idx) => {\n        return tuple1.map((value, jdx) => {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 391,
        "task_id": 402,
        "prompt": "Write a function to compute the value of ncr%p.",
        "code_str": "function ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = Math.min(i, r); j > 0; j--) {\n            C[j] = (C[j] + C[j - 1]) % p;\n        }\n    }\n    return C[r];\n}\n\n",
        "test": "const testncr_modp = () => {\n    console.assert(ncr_modp(10, 2, 13) === 6, \"Test 1 failed\");\n    console.assert(ncr_modp(15, 12, 43) === 25, \"Test 2 failed\");\n    console.assert(ncr_modp(17, 9, 18) === 10, \"Test 3 failed\");\n}\n\ntestncr_modp() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function ncr_modp(n, r, p) {\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = Math.min(i, r); j > 0; j--) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to compute the value of ncr%p.",
        "code_str_generate": "function ncr_modp(n, r, p) {\n\n    /*\n    progame language:javascript\n    description:Write a function to compute the value of ncr%p.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let C = Array(r + 1).fill(0);\n    C[0] = 1;\n    for (let i = 1; i <= n; i++) {\n        for (let j = Math.min(i, r); j > 0; j--) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 392,
        "task_id": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.",
        "code_str": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n        return false;\n    }\n    return regex.test(str);\n}\n\n",
        "test": "const testis_valid_URL = () => {\n    console.assert(is_valid_URL(\"https://www.google.com\") === true);\n    console.assert(is_valid_URL(\"https:/www.gmail.com\") === false);\n    console.assert(is_valid_URL(\"https:// www.redit.com\") === false);\n}\ntestis_valid_URL();",
        "is_deleted": 1,
        "code_str_deleted": "function is_valid_URL(str) {\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check if a url is valid or not using regex.",
        "code_str_generate": "function is_valid_URL(str) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if a url is valid or not using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const regex = /((http|https):\\/\\/)(www\\.)?[a-zA-Z0-9@:%._\\+~#?&//=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%._\\+~#?&//=]*)/;\n    if (str === null) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 393,
        "task_id": 404,
        "prompt": "Write a python function to find the minimum of two numbers.",
        "code_str": "function minimum(a, b) {\n    if (a <= b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\n",
        "test": "const testMinimum = () => {\n    console.assert(minimum(1, 2) === 1);\n    console.assert(minimum(-5, -4) === -5);\n    console.assert(minimum(0, 0) === 0);\n}\ntestMinimum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function minimum(a, b) {\n    if (a <= b) {\n        return a;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the minimum of two numbers.",
        "code_str_generate": "function minimum(a, b) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the minimum of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (a <= b) {\n        return a;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 394,
        "task_id": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "code_str": "function check_tuplex(tuplex, tuple1) {\n  return tuplex.includes(tuple1);\n}\n\n",
        "test": "const testCheck_tuplex = () => {\n    console.assert(check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 'r') === true, 'Test 1 failed');\n    console.assert(check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], '5') === false, 'Test 2 failed');\n    console.assert(check_tuplex([\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"], 3) === true, 'Test 3 failed');\n}\ntestCheck_tuplex(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_tuplex(tuplex, tuple1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to check whether an element exists within a tuple.",
        "code_str_generate": "function check_tuplex(tuplex, tuple1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether an element exists within a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 395,
        "task_id": 406,
        "prompt": "Write a python function to find the parity of a given number.",
        "code_str": "function find_Parity(x) {\n    let y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    y = y ^ (y >> 16);\n    if (y & 1) {\n        return \"Odd Parity\";\n    }\n    return \"Even Parity\";\n}\n\n",
        "test": "const testfind_Parity = () => {\n    console.assert(find_Parity(12) === \"Even Parity\", \"Test 1 Failed\");\n    console.assert(find_Parity(7) === \"Odd Parity\", \"Test 2 Failed\");\n    console.assert(find_Parity(10) === \"Even Parity\", \"Test 3 Failed\");\n}\ntestfind_Parity() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Parity(x) {\n    let y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the parity of a given number.",
        "code_str_generate": "function find_Parity(x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the parity of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let y = x ^ (x >> 1);\n    y = y ^ (y >> 2);\n    y = y ^ (y >> 4);\n    y = y ^ (y >> 8);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 396,
        "task_id": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code_str": "function rearrange_bigger(n) {\n    let nums = Array.from(String(n), Number);\n    for (let i = nums.length - 2; i >= 0; i--) {\n        if (nums[i] < nums[i + 1]) {\n            let z = nums.slice(i);\n            let y = z.filter(x => x > z[0]).sort()[0];\n            z.splice(z.indexOf(y), 1);\n            z.sort();\n            nums.splice(i, nums.length, y, ...z);\n            return parseInt(nums.join(''));\n        }\n    }\n    return false;\n}\n\n",
        "test": "const testRearrange_bigger = () => {\n    console.assert(rearrange_bigger(12) === 21, 'Test 1 Failed');\n    console.assert(rearrange_bigger(10) === false, 'Test 2 Failed');\n    console.assert(rearrange_bigger(102) === 120, 'Test 3 Failed');\n}\ntestRearrange_bigger();",
        "is_deleted": 1,
        "code_str_deleted": "function rearrange_bigger(n) {\n    let nums = Array.from(String(n), Number);\n    for (let i = nums.length - 2; i >= 0; i--) {\n        if (nums[i] < nums[i + 1]) {\n            let z = nums.slice(i);\n            let y = z.filter(x => x > z[0]).sort()[0];\n            z.splice(z.indexOf(y), 1);\n            //begin to write code\n",
        "javascript_prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code_str_generate": "function rearrange_bigger(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to create the next bigger number by rearranging the digits of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let nums = Array.from(String(n), Number);\n    for (let i = nums.length - 2; i >= 0; i--) {\n        if (nums[i] < nums[i + 1]) {\n            let z = nums.slice(i);\n            let y = z.filter(x => x > z[0]).sort()[0];\n            z.splice(z.indexOf(y), 1);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 397,
        "task_id": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code_str": "class MinPriorityQueue {\n    constructor() {\n      this.heap = [];\n    }\n  \n    enqueue(element) {\n      this.heap.push(element);\n      this.bubbleUp(this.heap.length - 1);\n    }\n  \n    dequeue() {\n      if (this.heap.length === 0) {\n        throw new Error(\"Queue is empty\");\n      }\n      if (this.heap.length === 1) {\n        return this.heap.pop();\n      }\n      const root = this.heap[0];\n      this.heap[0] = this.heap.pop();\n      this.bubbleDown(0);\n      return root;\n    }\n  \n    bubbleUp(index) {\n      while (index > 0) {\n        const parentIndex = Math.floor((index - 1) / 2);\n        if (this.heap[index] >= this.heap[parentIndex]) {\n          break;\n        }\n        [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n        index = parentIndex;\n      }\n    }\n  \n    bubbleDown(index) {\n      const length = this.heap.length;\n      while (true) {\n        const leftChildIndex = 2 * index + 1;\n        const rightChildIndex = 2 * index + 2;\n        let smallest = index;\n  \n        if (leftChildIndex < length && this.heap[leftChildIndex] < this.heap[smallest]) {\n          smallest = leftChildIndex;\n        }\n        if (rightChildIndex < length && this.heap[rightChildIndex] < this.heap[smallest]) {\n          smallest = rightChildIndex;\n        }\n        if (smallest === index) {\n          break;\n        }\n        [this.heap[index], this.heap[smallest]] = [this.heap[smallest], this.heap[index]];\n        index = smallest;\n      }\n    }\n  \n    isEmpty() {\n      return this.heap.length === 0;\n    }\n}\n\nfunction k_smallest_pairs(nums1, nums2, k) {\n    const queue = new MinPriorityQueue();\n    function push(i, j) {\n        if (i < nums1.length && j < nums2.length) {\n            queue.enqueue([nums1[i] + nums2[j], i, j], nums1[i] + nums2[j]);\n        }\n    }\n    push(0, 0);\n    const pairs = [];\n    while (!queue.isEmpty() && pairs.length < k) {\n        let  element  = queue.dequeue();\n        let i = element[1];\n        let j = element[2];\n        pairs.push([nums1[i], nums2[j]]);\n        push(i, j + 1);\n        if (j === 0) {\n            push(i + 1, 0);\n        }\n    }\n    return pairs;\n}",
        "test": "const testK_smallest_pairs = () => {\n    console.assert(JSON.stringify(k_smallest_pairs([1,3,7],[2,4,6],2)) === JSON.stringify([[1, 2], [1, 4]]));\n    console.assert(JSON.stringify(k_smallest_pairs([1,3,7],[2,4,6],1)) === JSON.stringify([[1, 2]]));\n    console.assert(JSON.stringify(k_smallest_pairs([1,3,7],[2,4,6],7)) === JSON.stringify([[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]));\n}\n\ntestK_smallest_pairs(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "class MinPriorityQueue {\n    constructor() {\n      this.heap = [];\n    }\n    enqueue(element) {\n      this.heap.push(element);\n      this.bubbleUp(this.heap.length - 1);\n    }\n    dequeue() {\n      if (this.heap.length === 0) {\n        throw new Error(\"Queue is empty\");\n      }\n      if (this.heap.length === 1) {\n        return this.heap.pop();\n      }\n      const root = this.heap[0];\n      this.heap[0] = this.heap.pop();\n      this.bubbleDown(0);\n      return root;\n    }\n    bubbleUp(index) {\n      while (index > 0) {\n        const parentIndex = Math.floor((index - 1) / 2);\n        if (this.heap[index] >= this.heap[parentIndex]) {\n          break;\n        }\n        [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n        index = parentIndex;\n      }\n    }\n    bubbleDown(index) {\n      const length = this.heap.length;\n      while (true) {\n        const leftChildIndex = 2 * index + 1;\n        const rightChildIndex = 2 * index + 2;\n        let smallest = index;\n        if (leftChildIndex < length && this.heap[leftChildIndex] < this.heap[smallest]) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code_str_generate": "class MinPriorityQueue {\n    constructor() {\n      this.heap = [];\n    }\n    enqueue(element) {\n      this.heap.push(element);\n      this.bubbleUp(this.heap.length - 1);\n    }\n    dequeue() {\n      if (this.heap.length === 0) {\n        throw new Error(\"Queue is empty\");\n      }\n      if (this.heap.length === 1) {\n        return this.heap.pop();\n      }\n      const root = this.heap[0];\n      this.heap[0] = this.heap.pop();\n      this.bubbleDown(0);\n      return root;\n    }\n    bubbleUp(index) {\n      while (index > 0) {\n        const parentIndex = Math.floor((index - 1) / 2);\n        if (this.heap[index] >= this.heap[parentIndex]) {\n          break;\n        }\n        [this.heap[index], this.heap[parentIndex]] = [this.heap[parentIndex], this.heap[index]];\n        index = parentIndex;\n      }\n    }\n    bubbleDown(index) {\n      const length = this.heap.length;\n      while (true) {\n        const leftChildIndex = 2 * index + 1;\n        const rightChildIndex = 2 * index + 2;\n        let smallest = index;\n        if (leftChildIndex < length && this.heap[leftChildIndex] < this.heap[smallest]) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 398,
        "task_id": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code_str": "function minProductTuple(list1) {\n    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));\n    return resultMin;\n}\n\n",
        "test": "const testMinProductTuple = () => {\n    console.assert(minProductTuple([[2, 7], [2, 6], [1, 8], [4, 9]]) === 8);\n    console.assert(minProductTuple([[10, 20], [15, 2], [5, 10]]) === 30);\n    console.assert(minProductTuple([[11, 44], [10, 15], [20, 5], [12, 9]]) === 100);\n}\ntestMinProductTuple();",
        "is_deleted": 1,
        "code_str_deleted": "function minProductTuple(list1) {\n    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code_str_generate": "function minProductTuple(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum product from the pairs of tuples within a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const resultMin = Math.min(...list1.map(([x, y]) => Math.abs(x * y)));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 399,
        "task_id": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "code_str": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    let minVal = Math.min(...filtered);\n    return minVal;\n}\n\n",
        "test": "const testMinVal = () => {\n    console.assert(minVal(['Python', 3, 2, 4, 5, 'version']) === 2, 'Test 1 failed');\n    console.assert(minVal(['Python', 15, 20, 25]) === 15, 'Test 2 failed');\n    console.assert(minVal(['Python', 30, 20, 40, 50, 'version']) === 20, 'Test 3 failed');\n}\n\ntestMinVal(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function minVal(listval) {\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "code_str_generate": "function minVal(listval) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the minimum value in a given heterogeneous list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let filtered = listval.filter(item => typeof item === 'number');\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 400,
        "task_id": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code_str": "function snakeToCamel(word) {\n  return word.split('_').map(x => x.charAt(0).toUpperCase() + x.slice(1)).join('');\n}\n\n",
        "test": "const testSnakeToCamel = () => {\n  console.assert(snakeToCamel('android_tv') === 'AndroidTv');\n  console.assert(snakeToCamel('google_pixel') === 'GooglePixel');\n  console.assert(snakeToCamel('apple_watch') === 'AppleWatch');\n}\ntestSnakeToCamel() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function snakeToCamel(word) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code_str_generate": "function snakeToCamel(word) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given snake case string to camel case string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 401,
        "task_id": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "code_str": "function remove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n        }\n    }\n    return l;\n}\n\n",
        "test": "const testRemove_odd = () => {\n    console.assert(JSON.stringify(remove_odd([1, 2, 3])) === JSON.stringify([2]), \"[1, 2, 3] should return [2]\");\n    console.assert(JSON.stringify(remove_odd([2, 4, 6])) === JSON.stringify([2, 4, 6]), \"[2, 4, 6] should return [2, 4, 6]\");\n    console.assert(JSON.stringify(remove_odd([10, 20, 3])) === JSON.stringify([10, 20]), \"[10, 20, 3] should return [10, 20]\");\n}\n\ntestRemove_odd() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_odd(l) {\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to remove odd numbers from a given list.",
        "code_str_generate": "function remove_odd(l) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to remove odd numbers from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = l.length - 1; i >= 0; i--) {\n        if (l[i] % 2 !== 0) {\n            l.splice(i, 1);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 402,
        "task_id": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "code_str": "function extract_nth_element(list1, n) {\n    const result = list1.map(x => x[n]);\n    return result;\n}\n\n",
        "test": "const testExtract_nth_element = () => {\n    console.assert(JSON.stringify(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 0)) === JSON.stringify(['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']), 'Test 1 failed');\n    console.assert(JSON.stringify(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 2)) === JSON.stringify([99, 96, 94, 98]), 'Test 2 failed');\n    console.assert(JSON.stringify(extract_nth_element([['Greyson Fulton', 98, 99], ['Brady Kent', 97, 96], ['Wyatt Knott', 91, 94], ['Beau Turnbull', 94, 98]], 1)) === JSON.stringify([98, 97, 91, 94]), 'Test 3 failed');\n}\n\ntestExtract_nth_element(); // Invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_nth_element(list1, n) {\n    const result = list1.map(x => x[n]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract the nth element from a given list of tuples.",
        "code_str_generate": "function extract_nth_element(list1, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the nth element from a given list of tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = list1.map(x => x[n]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 403,
        "task_id": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.",
        "code_str": "function overlapping(list1, list2) {\n  let c = 0;\n  let d = 0;\n  for (let i of list1) {\n    c += 1;\n  }\n  for (let i of list2) {\n    d += 1;\n  }\n  for (let i = 0; i < c; i++) {\n    for (let j = 0; j < d; j++) {\n      if (list1[i] === list2[j]) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n",
        "test": "const testOverlapping = () => {\n  console.assert(overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) === false, \"Test 1 Failed\");\n  console.assert(overlapping([1, 2, 3], [4, 5, 6]) === false, \"Test 2 Failed\");\n  console.assert(overlapping([1, 4, 5], [1, 4, 5]) === true, \"Test 3 Passed\");\n}\ntestOverlapping() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function overlapping(list1, list2) {\n  let c = 0;\n  let d = 0;\n  for (let i of list1) {\n    c += 1;\n  }\n  for (let i of list2) {\n    d += 1;\n  }\n  //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the value exists in a sequence or not.",
        "code_str_generate": "function overlapping(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the value exists in a sequence or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let c = 0;\n  let d = 0;\n  for (let i of list1) {\n    c += 1;\n  }\n  for (let i of list2) {\n    d += 1;\n  }\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 404,
        "task_id": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "code_str": "function max_Product(arr) {\n    let arr_len = arr.length;\n    if (arr_len < 2) {\n        return \"No pairs exists\";\n    }\n    let x = arr[0];\n    let y = arr[1];\n    for (let i = 0; i < arr_len; i++) {\n        for (let j = i + 1; j < arr_len; j++) {\n            if (arr[i] * arr[j] > x * y) {\n                x = arr[i];\n                y = arr[j];\n            }\n        }\n    }\n    return [x, y];\n}\n\n",
        "test": "const testMax_Product = () => {\n    console.assert(JSON.stringify(max_Product([1,2,3,4,7,0,8,4])) === JSON.stringify([7,8]), 'Test 1 failed');\n    console.assert(JSON.stringify(max_Product([0,-1,-2,-4,5,0,-6])) === JSON.stringify([-4,-6]), 'Test 2 failed');\n    console.assert(JSON.stringify(max_Product([1,2,3])) === JSON.stringify([2,3]), 'Test 3 failed');\n}\ntestMax_Product() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_Product(arr) {\n    let arr_len = arr.length;\n    if (arr_len < 2) {\n        return \"No pairs exists\";\n    }\n    let x = arr[0];\n    let y = arr[1];\n    for (let i = 0; i < arr_len; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find a pair with highest product from a given array of integers.",
        "code_str_generate": "function max_Product(arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find a pair with highest product from a given array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let arr_len = arr.length;\n    if (arr_len < 2) {\n        return \"No pairs exists\";\n    }\n    let x = arr[0];\n    let y = arr[1];\n    for (let i = 0; i < arr_len; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 405,
        "task_id": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code_str": "const breakSum = (n) => {\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = 1;\n    for (let i = 2; i <= n; i++) {\n        dp[i] = Math.max(dp[Math.floor(i / 2)] + dp[Math.floor(i / 3)] + dp[Math.floor(i / 4)], i);\n    }\n    return dp[n];\n}\n\n",
        "test": "const testBreakSum = () => {\n    console.assert(breakSum(12) === 13, `Expected breakSum(12) to be 13`);\n    console.assert(breakSum(24) === 27, `Expected breakSum(24) to be 27`);\n    console.assert(breakSum(23) === 23, `Expected breakSum(23) to be 23`);\n}\ntestBreakSum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const breakSum = (n) => {\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = 1;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code_str_generate": "const breakSum = (n) => {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = 1;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 406,
        "task_id": 417,
        "prompt": "Write a function to find common first element in given list of tuple.",
        "code_str": "function group_tuples(input) {\n    let out = {};\n    for (const elem of input) {\n        if (out.hasOwnProperty(elem[0])) {\n            out[elem[0]] = out[elem[0]].concat(elem.slice(1));\n        } else {\n            out[elem[0]] = elem.slice();\n        }\n    }\n    return Object.values(out).map(values => values);\n}",
        "test": "const testGroupTuples = () => {\n    console.assert(JSON.stringify(group_tuples([['x', 'y'], ['x', 'z'], ['w', 't']])) === JSON.stringify([['x', 'y', 'z'], ['w', 't']]));\n    console.assert(JSON.stringify(group_tuples([['a', 'b'], ['a', 'c'], ['d', 'e']])) === JSON.stringify([['a', 'b', 'c'], ['d', 'e']]));\n    console.assert(JSON.stringify(group_tuples([['f', 'g'], ['f', 'g'], ['h', 'i']])) === JSON.stringify([['f', 'g', 'g'], ['h', 'i']]));\n}\ntestGroupTuples();",
        "is_deleted": 1,
        "code_str_deleted": "function group_tuples(input) {\n    let out = {};\n    for (const elem of input) {\n        if (out.hasOwnProperty(elem[0])) {\n            out[elem[0]] = out[elem[0]].concat(elem.slice(1));\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find common first element in given list of tuple.",
        "code_str_generate": "function group_tuples(input) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find common first element in given list of tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let out = {};\n    for (const elem of input) {\n        if (out.hasOwnProperty(elem[0])) {\n            out[elem[0]] = out[elem[0]].concat(elem.slice(1));\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 407,
        "task_id": 418,
        "prompt": "Write a python function to find the sublist having maximum length.",
        "code_str": "function Find_Max(lst) {\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    return maxList;\n}\n\n",
        "test": "const testFind_Max = () => {\n    console.assert(JSON.stringify(Find_Max([['A'],['A','B'],['A','B','C']])) === JSON.stringify(['A','B','C']), \"Test 1 failed\");\n    console.assert(JSON.stringify(Find_Max([[1],[1,2],[1,2,3]])) === JSON.stringify([1,2,3]), \"Test 2 failed\");\n    console.assert(JSON.stringify(Find_Max([[1,1],[1,2,3],[1,5,6,1]])) === JSON.stringify([1,5,6,1]), \"Test 3 failed\");\n}\n\ntestFind_Max(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Find_Max(lst) {\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sublist having maximum length.",
        "code_str_generate": "function Find_Max(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sublist having maximum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let maxList = lst.reduce((a, b) => (a.length > b.length ? a : b));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 408,
        "task_id": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code_str": "//function definition\nfunction roundAndSum(list1) {\n    const length = list1.length;\n    const roundedSum = list1.map(Math.round).reduce((a, b) => a + b, 0) * length;\n    return roundedSum;\n}\n\n",
        "test": "const testRoundAndSum = () => {\n    console.assert(roundAndSum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) === 243, \"Test 1 Failed\");\n    console.assert(roundAndSum([5, 2, 9, 24.3, 29]) === 345, \"Test 2 Failed\");\n    console.assert(roundAndSum([25.0, 56.7, 89.2]) === 513, \"Test 3 Failed\");\n}\ntestRoundAndSum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction roundAndSum(list1) {\n    const length = list1.length;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code_str_generate": "//function definition\nfunction roundAndSum(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const length = list1.length;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 409,
        "task_id": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "code_str": "function cube_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n        sum += (2 * i) * (2 * i) * (2 * i); \n    }\n    return sum;\n}\n\n",
        "test": "const testCube_Sum = () => {\n    console.assert(cube_Sum(2) === 72, \"Test case 1 failed\");\n    console.assert(cube_Sum(3) === 288, \"Test case 2 failed\");\n    console.assert(cube_Sum(4) === 800, \"Test case 3 failed\");\n}\n\ntestCube_Sum(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function cube_Sum(n) { \n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the cube sum of first n even natural numbers.",
        "code_str_generate": "function cube_Sum(n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the cube sum of first n even natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) { \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 410,
        "task_id": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "code_str": "function concatenate_tuple(test_tup) {\n    const delim = \"-\";\n    let res = test_tup.map(ele => String(ele) + delim).join('');\n    res = res.slice(0, -delim.length);\n    return res;\n}\n\n",
        "test": "const testConcatenate_tuple = () => {\n    console.assert(concatenate_tuple([\"ID\", \"is\", 4, \"UTS\"]) === 'ID-is-4-UTS', \"Test 1 Failed\");\n    console.assert(concatenate_tuple([\"QWE\", \"is\", 4, \"RTY\"]) === 'QWE-is-4-RTY', \"Test 2 Failed\");\n    console.assert(concatenate_tuple([\"ZEN\", \"is\", 4, \"OP\"]) === 'ZEN-is-4-OP', \"Test 3 Failed\");\n}\n\ntestConcatenate_tuple(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function concatenate_tuple(test_tup) {\n    const delim = \"-\";\n    let res = test_tup.map(ele => String(ele) + delim).join('');\n    //begin to write code\n",
        "javascript_prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "code_str_generate": "function concatenate_tuple(test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to concatenate each element of tuple by the delimiter.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const delim = \"-\";\n    let res = test_tup.map(ele => String(ele) + delim).join('');\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 411,
        "task_id": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "code_str": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return parseFloat((sum / n).toFixed(6));\n}\n\n",
        "test": "const testfind_Average_Of_Cube = () => {\n    console.assert(find_Average_Of_Cube(2) === 4.5, 'Test failed at n = 2');\n    console.assert(find_Average_Of_Cube(3) === 12, 'Test failed at n = 3');\n    console.assert(find_Average_Of_Cube(1) === 1, 'Test failed at n = 1');\n}\ntestfind_Average_Of_Cube(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find_Average_Of_Cube(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the average of cubes of first n natural numbers.",
        "code_str_generate": "function find_Average_Of_Cube(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the average of cubes of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 412,
        "task_id": 423,
        "prompt": "Write a function to solve gold mine problem.",
        "code_str": "function get_maxgold(gold, m, n) {\n    let goldTable = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    for (let col = n-1; col >= 0; col--) {\n        for (let row = 0; row < m; row++) {\n            let right = (col == n-1) ? 0 : goldTable[row][col+1];\n            let right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            let right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down);\n        }\n    }\n    let res = goldTable[0][0];\n    for (let i = 1; i < m; i++) {\n        res = Math.max(res, goldTable[i][0]);\n    }\n    return res;\n}\n\n",
        "test": "const testGet_maxgold = () => {\n    console.assert(get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]], 4, 4) === 16, \"Test 1 Failed\");\n    console.assert(get_maxgold([[10, 20], [30, 40]], 2, 2) === 70, \"Test 2 Failed\");\n    console.assert(get_maxgold([[4, 9], [3, 7]], 2, 2) === 13, \"Test 3 Failed\");\n}\ntestGet_maxgold()",
        "is_deleted": 1,
        "code_str_deleted": "function get_maxgold(gold, m, n) {\n    let goldTable = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    for (let col = n-1; col >= 0; col--) {\n        for (let row = 0; row < m; row++) {\n            let right = (col == n-1) ? 0 : goldTable[row][col+1];\n            let right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            let right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down);\n            //begin to write code\n",
        "javascript_prompt": "Write a function to solve gold mine problem.",
        "code_str_generate": "function get_maxgold(gold, m, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to solve gold mine problem.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let goldTable = new Array(m).fill(0).map(() => new Array(n).fill(0));\n    for (let col = n-1; col >= 0; col--) {\n        for (let row = 0; row < m; row++) {\n            let right = (col == n-1) ? 0 : goldTable[row][col+1];\n            let right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n            let right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n            goldTable[row][col] = gold[row][col] + Math.max(right, right_up, right_down);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 413,
        "task_id": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code_str": "function extract_rear(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    return res;\n}\n\n",
        "test": "const testExtract_rear = () => {\n    console.assert(JSON.stringify(extract_rear(['Mers', 'for', 'Vers'])) === JSON.stringify(['s', 'r', 's']), \"Test 1 failed\");\n    console.assert(JSON.stringify(extract_rear(['Avenge', 'for', 'People'])) === JSON.stringify(['e', 'r', 'e']), \"Test 2 failed\");\n    console.assert(JSON.stringify(extract_rear(['Gotta', 'get', 'go'])) === JSON.stringify(['a', 't', 'o']), \"Test 3 failed\");\n}\n\ntestExtract_rear() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_rear(test_tuple) {\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code_str_generate": "function extract_rear(test_tuple) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract only the rear index element of each string in the given tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = Array.from(test_tuple, sub => sub[sub.length - 1]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 414,
        "task_id": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "code_str": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n            ctr += 1;\n        }\n    }\n    return ctr;\n}\n\n",
        "test": "const testCountElementInList = () => {\n    console.assert(countElementInList([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) === 3, \"Test 1 Failed\");\n    console.assert(countElementInList([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') === 3, \"Test 2 Failed\");\n    console.assert(countElementInList([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') === 1, \"Test 3 Failed\");\n}\ntestCountElementInList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function countElementInList(list1, x) {\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to count the number of sublists containing a particular element.",
        "code_str_generate": "function countElementInList(list1, x) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count the number of sublists containing a particular element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let ctr = 0;\n    for (let i = 0; i < list1.length; i++) {\n        if (list1[i].includes(x)) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 415,
        "task_id": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.",
        "code_str": "function filter_oddnumbers(nums) {\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    return odd_nums;\n}\n\n",
        "test": "const testfilter_oddnumbers = () => {\n    console.assert(JSON.stringify(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([1, 3, 5, 7, 9]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(filter_oddnumbers([10, 20, 45, 67, 84, 93])) === JSON.stringify([45, 67, 93]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])) === JSON.stringify([5, 7, 9, 3]), \"Test 3 Failed\");\n}\n\ntestfilter_oddnumbers() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function filter_oddnumbers(nums) {\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to filter odd numbers using lambda function.",
        "code_str_generate": "function filter_oddnumbers(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to filter odd numbers using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const odd_nums = nums.filter(x => x % 2 !== 0);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 416,
        "task_id": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code_str": "function changeDateFormat(dt) {\n    return dt.replace(/(\\d{4})-(\\d{1,2})-(\\d{1,2})/, '$3-$2-$1');\n}\n\n",
        "test": "const testChangeDateFormat = () => {\n    console.assert(changeDateFormat(\"2026-01-02\") === '02-01-2026', \"Test case 1 failed\");\n    console.assert(changeDateFormat(\"2020-11-13\") === '13-11-2020', \"Test case 2 failed\");\n    console.assert(changeDateFormat(\"2021-04-26\") === '26-04-2021', \"Test case 3 failed\");\n}\n\ntestChangeDateFormat() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function changeDateFormat(dt) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code_str_generate": "function changeDateFormat(dt) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 417,
        "task_id": 428,
        "prompt": "Write a function to sort the given array by using shell sort.",
        "code_str": "function shell_sort(my_list) {\n    let gap = Math.floor(my_list.length / 2);\n    while (gap > 0) {\n        for (let i = gap; i < my_list.length; i++) {\n            let current_item = my_list[i];\n            let j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                j -= gap;\n            }\n            my_list[j] = current_item;\n        }\n        gap = Math.floor(gap / 2);\n    }\n    return my_list;\n}\n\n",
        "test": "const testShell_sort = () => {\n    console.assert(JSON.stringify(shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])) === JSON.stringify([2, 3, 4, 5, 12, 12, 23, 56, 81, 95]));\n    console.assert(JSON.stringify(shell_sort([24, 22, 39, 34, 87, 73, 68])) === JSON.stringify([22, 24, 34, 39, 68, 73, 87]));\n    console.assert(JSON.stringify(shell_sort([32, 30, 16, 96, 82, 83, 74])) === JSON.stringify([16, 30, 32, 74, 82, 83, 96]));\n}\ntestShell_sort(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function shell_sort(my_list) {\n    let gap = Math.floor(my_list.length / 2);\n    while (gap > 0) {\n        for (let i = gap; i < my_list.length; i++) {\n            let current_item = my_list[i];\n            let j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                //begin to write code\n",
        "javascript_prompt": "Write a function to sort the given array by using shell sort.",
        "code_str_generate": "function shell_sort(my_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort the given array by using shell sort.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let gap = Math.floor(my_list.length / 2);\n    while (gap > 0) {\n        for (let i = gap; i < my_list.length; i++) {\n            let current_item = my_list[i];\n            let j = i;\n            while (j >= gap && my_list[j - gap] > current_item) {\n                my_list[j] = my_list[j - gap];\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 418,
        "task_id": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code_str": "function and_tuples(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    return res;\n}\n\n",
        "test": "const testAnd_tuples = () => {\n    console.assert(JSON.stringify(and_tuples([10, 4, 6, 9], [5, 2, 3, 3])) === JSON.stringify([0, 0, 2, 1]));\n    console.assert(JSON.stringify(and_tuples([1, 2, 3, 4], [5, 6, 7, 8])) === JSON.stringify([1, 2, 3, 0]));\n    console.assert(JSON.stringify(and_tuples([8, 9, 11, 12], [7, 13, 14, 17])) === JSON.stringify([0, 9, 10, 0]));\n}\n\ntestAnd_tuples(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function and_tuples(test_tup1, test_tup2) {\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code_str_generate": "function and_tuples(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract the elementwise and tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = test_tup1.map((ele1, index) => ele1 & test_tup2[index]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 419,
        "task_id": 430,
        "prompt": "Write a function to find the directrix of a parabola.",
        "code_str": "function parabola_directrix(a, b, c) { \n  let directrix = Math.floor(c - ((b * b) + 1) * 4 * a);\n  return directrix;\n}\n\n",
        "test": "const testParabola_directrix = () => {\n  console.assert(parabola_directrix(5, 3, 2) === -198);\n  console.assert(parabola_directrix(9, 8, 4) === -2336);\n  console.assert(parabola_directrix(2, 4, 6) === -130);\n}\n\ntestParabola_directrix(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function parabola_directrix(a, b, c) { \n  let directrix = Math.floor(c - ((b * b) + 1) * 4 * a);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the directrix of a parabola.",
        "code_str_generate": "function parabola_directrix(a, b, c) { \n\n    /*\n    progame language:javascript\n    description:Write a function to find the directrix of a parabola.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let directrix = Math.floor(c - ((b * b) + 1) * 4 * a);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 420,
        "task_id": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code_str": "function commonElement(list1, list2) {\n    let result = false;\n    for (let x of list1) {\n        for (let y of list2) {\n            if (x === y) {\n                result = true;\n                return result;\n            }\n        }\n    }\n}\n\n",
        "test": "const testCommonElement = () => {\n    console.assert(commonElement([1,2,3,4,5], [5,6,7,8,9]) === true, \"Test 1 Failed\");\n    console.assert(commonElement([1,2,3,4,5], [6,7,8,9]) === undefined, \"Test 2 Failed\");\n    console.assert(commonElement(['a','b','c'], ['d','b','e']) === true, \"Test 3 Failed\");\n}\n\ntestCommonElement(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function commonElement(list1, list2) {\n    let result = false;\n    for (let x of list1) {\n        for (let y of list2) {\n            if (x === y) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code_str_generate": "function commonElement(list1, list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function that takes two lists and returns true if they have at least one common element.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = false;\n    for (let x of list1) {\n        for (let y of list2) {\n            if (x === y) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 421,
        "task_id": 432,
        "prompt": "Write a function to find the median of a trapezium.",
        "code_str": "function median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    return median;\n}\n\n",
        "test": "const testMedianTrapezium = () => {\n    console.assert(median_trapezium(15, 25, 35) === 20, \"Test 1 Failed\");\n    console.assert(median_trapezium(10, 20, 30) === 15, \"Test 2 Failed\");\n    console.assert(median_trapezium(6, 9, 4) === 7.5, \"Test 3 Failed\");\n}\n\ntestMedianTrapezium(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function median_trapezium(base1, base2, height) {\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the median of a trapezium.",
        "code_str_generate": "function median_trapezium(base1, base2, height) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the median of a trapezium.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let median = 0.5 * (base1 + base2);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 422,
        "task_id": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code_str": "function check_greater(arr, number) {\n  arr.sort((a, b) => a - b);\n  if (number > arr[arr.length - 1]) {\n    return 'Yes, the entered number is greater than those in the array';\n  } else {\n    return 'No, entered number is less than those in the array';\n  }\n}\n\n",
        "test": "const testCheck_greater = () => {\n  console.assert(check_greater([1, 2, 3, 4, 5], 4) === 'No, entered number is less than those in the array');\n  console.assert(check_greater([2, 3, 4, 5, 6], 8) === 'Yes, the entered number is greater than those in the array');\n  console.assert(check_greater([9, 7, 4, 8, 6, 1], 11) === 'Yes, the entered number is greater than those in the array');\n}\ntestCheck_greater() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_greater(arr, number) {\n  arr.sort((a, b) => a - b);\n  if (number > arr[arr.length - 1]) {\n    return 'Yes, the entered number is greater than those in the array';\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code_str_generate": "function check_greater(arr, number) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the entered number is greater than the elements of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  arr.sort((a, b) => a - b);\n  if (number > arr[arr.length - 1]) {\n    return 'Yes, the entered number is greater than those in the array';\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 423,
        "task_id": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "code_str": "const text_match_one = (text) => {\n    const patterns = /ab+?/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testtext_match_one = () => {\n    console.assert(text_match_one(\"ac\") === 'Not matched!');\n    console.assert(text_match_one(\"dc\") === 'Not matched!');\n    console.assert(text_match_one(\"abba\") === 'Found a match!');\n}\ntesttext_match_one(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "const text_match_one = (text) => {\n    const patterns = /ab+?/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "code_str_generate": "const text_match_one = (text) => {\n\n    /*\n    progame language:javascript\n    description:Write a function that matches a string that has an a followed by one or more b's.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = /ab+?/;\n    if (patterns.test(text)) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 424,
        "task_id": 435,
        "prompt": "Write a python function to find the last digit of a given number.",
        "code_str": "function last_Digit(n) {\n    return n % 10;\n}\n\n",
        "test": "const testLast_Digit = () => {\n    console.assert(last_Digit(123) === 3);\n    console.assert(last_Digit(25) === 5);\n    console.assert(last_Digit(30) === 0);\n}\ntestLast_Digit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function last_Digit(n) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the last digit of a given number.",
        "code_str_generate": "function last_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the last digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 425,
        "task_id": 436,
        "prompt": "Write a python function to print negative numbers in a list.",
        "code_str": "//function definition\nfunction neg_nos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n            negatives.push(num);\n        }\n    }\n    return negatives;\n}\n\n",
        "test": "const testNeg_nos = () => {\n    console.assert(JSON.stringify(neg_nos([-1,4,5,-6])) === JSON.stringify([-1, -6]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(neg_nos([-1,-2,3,4])) === JSON.stringify([-1, -2]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(neg_nos([-7,-6,8,9])) === JSON.stringify([-7, -6]), \"Test 3 Failed\");\n}\ntestNeg_nos() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction neg_nos(list1) {\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to print negative numbers in a list.",
        "code_str_generate": "//function definition\nfunction neg_nos(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to print negative numbers in a list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let negatives = [];\n    for (let num of list1) {\n        if (num < 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 426,
        "task_id": 437,
        "prompt": "Write a function to remove odd characters in a string.",
        "code_str": "function remove_odd(str1) {\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 === 0) {\n            str2 += str1[i - 1];\n        }\n    }\n    return str2;\n}\n\n",
        "test": "const testRemove_odd = () => {\n    console.assert(remove_odd(\"python\") === \"yhn\");\n    console.assert(remove_odd(\"program\") === \"rga\");\n    console.assert(remove_odd(\"language\") === \"agae\");\n}\n\ntestRemove_odd() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_odd(str1) {\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 === 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to remove odd characters in a string.",
        "code_str_generate": "function remove_odd(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove odd characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let str2 = '';\n    for (let i = 1; i <= str1.length; i++) {\n        if (i % 2 === 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 427,
        "task_id": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "code_str": "function count_bidirectional(test_list) {\n    let res = 0;\n    for (let idx = 0; idx < test_list.length; idx++) {\n        for (let iidx = idx + 1; iidx < test_list.length; iidx++) {\n            if (test_list[iidx][0] === test_list[idx][1] && test_list[idx][1] === test_list[iidx][0]) {\n                res += 1;\n            }\n        }\n    }\n    return (String(res));\n}",
        "test": "const testCount_bidirectional = () => {\n    console.assert(count_bidirectional([[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]) === '3');\n    console.assert(count_bidirectional([[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]) === '2');\n    console.assert(count_bidirectional([[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]) === '4');\n}\n\ntestCount_bidirectional() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_bidirectional(test_list) {\n    let res = 0;\n    for (let idx = 0; idx < test_list.length; idx++) {\n        for (let iidx = idx + 1; iidx < test_list.length; iidx++) {\n            if (test_list[iidx][0] === test_list[idx][1] && test_list[idx][1] === test_list[iidx][0]) {\n            //begin to write code\n",
        "javascript_prompt": "Write a function to count bidirectional tuple pairs.",
        "code_str_generate": "function count_bidirectional(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to count bidirectional tuple pairs.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let res = 0;\n    for (let idx = 0; idx < test_list.length; idx++) {\n        for (let iidx = idx + 1; iidx < test_list.length; iidx++) {\n            if (test_list[iidx][0] === test_list[idx][1] && test_list[idx][1] === test_list[iidx][0]) {\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 428,
        "task_id": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "code_str": "function multiple_to_single(L) {\n  const x = parseInt(L.map(String).join(''));\n  return x;\n}\n\n",
        "test": "const testmultiple_to_single = () => {\n  console.assert(multiple_to_single([11, 33, 50]) === 113350);\n  console.assert(multiple_to_single([-1, 2, 3, 4, 5, 6]) === -123456);\n  console.assert(multiple_to_single([10, 15, 20, 25]) === 10152025);\n}\ntestmultiple_to_single() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function multiple_to_single(L) {\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n",
        "javascript_prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "code_str_generate": "function multiple_to_single(L) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert a list of multiple integers into a single integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const x = parseInt(L.map(String).join(''));\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 429,
        "task_id": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "code_str": "//function definition\nfunction find_adverb_position(text) {\n    const regex = /\\w+ly/g;\n    let match = regex.exec(text);\n    if (match) {\n        return [match.index, regex.lastIndex, match[0]];\n    }\n}\n\n",
        "test": "const testfind_adverb_position = () => {\n    console.assert(JSON.stringify(find_adverb_position(\"clearly!! we can see the sky\")) === JSON.stringify([0, 7, 'clearly']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(find_adverb_position(\"seriously!! there are many roses\")) === JSON.stringify([0, 9, 'seriously']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(find_adverb_position(\"unfortunately!! sita is going to home\")) === JSON.stringify([0, 13, 'unfortunately']), \"Test 3 Failed\");\n}\ntestfind_adverb_position() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction find_adverb_position(text) {\n    const regex = /\\w+ly/g;\n    let match = regex.exec(text);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "code_str_generate": "//function definition\nfunction find_adverb_position(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all adverbs and their positions in a given sentence.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const regex = /\\w+ly/g;\n    let match = regex.exec(text);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 430,
        "task_id": 441,
        "prompt": "Write a function to find the surface area of a cube.",
        "code_str": "function surfacearea_cube(l) {\n    let surfacearea = 6 * l * l;\n    return surfacearea;\n}\n\n",
        "test": "const testSurfacearea_cube = () => {\n    console.assert(surfacearea_cube(5) === 150);\n    console.assert(surfacearea_cube(3) === 54);\n    console.assert(surfacearea_cube(10) === 600);\n}\ntestSurfacearea_cube() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function surfacearea_cube(l) {\n    let surfacearea = 6 * l * l;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the surface area of a cube.",
        "code_str_generate": "function surfacearea_cube(l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cube.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let surfacearea = 6 * l * l;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 431,
        "task_id": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "code_str": "function positive_count(nums) {\n    const n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x > 0) {\n            n1 += 1;\n        }\n    }\n    return parseFloat((n1 / n).toFixed(2));\n}\n\n",
        "test": "const testPositive_count = () => {\n    console.assert(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) === 0.54);\n    console.assert(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) === 0.69);\n    console.assert(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) === 0.56);\n}\ntestPositive_count(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function positive_count(nums) {\n    const n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x > 0) {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "code_str_generate": "function positive_count(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the ration of positive numbers in an array of integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const n = nums.length;\n    let n1 = 0;\n    for (let x of nums) {\n        if (x > 0) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 432,
        "task_id": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "code_str": "function largest_neg(list1) {\n    let max = list1[0];\n    for (let x of list1) {\n        if (x < max) {\n            max = x;\n        }\n    }\n    return max;\n}\n\n",
        "test": "const testLargest_neg = () => {\n    console.assert(largest_neg([1,2,3,-4,-6]) === -6, \"Test 1 Failed\");\n    console.assert(largest_neg([1,2,3,-8,-9]) === -9, \"Test 2 Failed\");\n    console.assert(largest_neg([1,2,3,4,-1]) === -1, \"Test 3 Failed\");\n}\ntestLargest_neg() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function largest_neg(list1) {\n    let max = list1[0];\n    for (let x of list1) {\n        if (x < max) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the largest negative number from the given list.",
        "code_str_generate": "function largest_neg(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the largest negative number from the given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let max = list1[0];\n    for (let x of list1) {\n        if (x < max) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 433,
        "task_id": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "code_str": "function trim_tuple(test_list, K) {\n  let res = [];\n  for (let ele of test_list) {\n    let N = ele.length;\n    res.push(ele.slice(K, N - K));\n  }\n  return JSON.stringify(res);\n}\n\n",
        "test": "const testTrimTuple = () => {\n  console.assert(trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) === '[[2],[9],[2],[2]]');\n  console.assert(trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) === '[[3,2,1],[4,9,2],[1,2,3],[8,2,1]]');\n  console.assert(trim_tuple([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) === '[[8,4],[8,12],[1,7],[6,9]]');\n}\n\ntestTrimTuple(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function trim_tuple(test_list, K) {\n  let res = [];\n  for (let ele of test_list) {\n    let N = ele.length;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "code_str_generate": "function trim_tuple(test_list, K) {\n\n    /*\n    progame language:javascript\n    description:Write a function to trim each tuple by k in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = [];\n  for (let ele of test_list) {\n    let N = ele.length;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 434,
        "task_id": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code_str": "//function definition\nfunction index_multiplication(test_tup1, test_tup2) {\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        return tup1.map((value, idx) => value * tup2[idx]);\n    });\n    return res;\n}\n\n",
        "test": "const testIndex_multiplication = () => {\n    console.assert(JSON.stringify(index_multiplication([[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]])) === JSON.stringify([[6, 21], [12, 45], [2, 9], [7, 30]]));\n    console.assert(JSON.stringify(index_multiplication([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])) === JSON.stringify([[14, 32], [20, 60], [6, 20], [16, 44]]));\n    console.assert(JSON.stringify(index_multiplication([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])) === JSON.stringify([[24, 45], [30, 77], [12, 33], [27, 60]]));\n}\n\ntestIndex_multiplication() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction index_multiplication(test_tup1, test_tup2) {\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        //begin to write code\n",
        "javascript_prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code_str_generate": "//function definition\nfunction index_multiplication(test_tup1, test_tup2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const res = test_tup1.map((tup1, index) => {\n        const tup2 = test_tup2[index];\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 435,
        "task_id": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "code_str": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n",
        "test": "const testcount_Occurrence = () => {\n    console.assert(count_Occurrence(['a', 'a', 'c', 'b', 'd'], ['a', 'b']) === 3);\n    console.assert(count_Occurrence([1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]) === 6);\n    console.assert(count_Occurrence([1, 2, 3, 4, 5, 6], [1, 2]) === 2);\n}\n\ntestcount_Occurrence(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function count_Occurrence(tup, lst) {\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the occurence of all elements of list in a tuple.",
        "code_str_generate": "function count_Occurrence(tup, lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the occurence of all elements of list in a tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let count = 0;\n    for (const item of tup) {\n        if (lst.includes(item)) {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 436,
        "task_id": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code_str": "function cube_nums(nums) {\n    return nums.map(x => x ** 3);\n}\n\n",
        "test": "const testCube_nums = () => {\n    console.assert(JSON.stringify(cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]), \"Test 1 failed\");\n    console.assert(JSON.stringify(cube_nums([10, 20, 30])) === JSON.stringify([1000, 8000, 27000]), \"Test 2 failed\");\n    console.assert(JSON.stringify(cube_nums([12, 15])) === JSON.stringify([1728, 3375]), \"Test 3 failed\");\n}\n\ntestCube_nums() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function cube_nums(nums) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code_str_generate": "function cube_nums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find cubes of individual elements in a list using lambda function.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 437,
        "task_id": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "code_str": "function cal_sum(n) {\n    let a = 3;\n    let b = 0;\n    let c = 2;\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 3;\n    }\n    if (n === 2) {\n        return 5;\n    }\n    let sum = 5;\n    while (n > 2) {\n        let d = a + b;\n        sum += d;\n        a = b;\n        b = c;\n        c = d;\n        n -= 1;\n    }\n    return sum;\n}\n\n",
        "test": "const testCal_sum = () => {\n    console.assert(cal_sum(9) === 49, \"Test case 1 failed\");\n    console.assert(cal_sum(10) === 66, \"Test case 2 failed\");\n    console.assert(cal_sum(11) === 88, \"Test case 3 failed\");\n}\n\ntestCal_sum();",
        "is_deleted": 1,
        "code_str_deleted": "function cal_sum(n) {\n    let a = 3;\n    let b = 0;\n    let c = 2;\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 3;\n    }\n    if (n === 2) {\n        return 5;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the sum of perrin numbers.",
        "code_str_generate": "function cal_sum(n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the sum of perrin numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = 3;\n    let b = 0;\n    let c = 2;\n    if (n === 0) {\n        return 3;\n    }\n    if (n === 1) {\n        return 3;\n    }\n    if (n === 2) {\n        return 5;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 438,
        "task_id": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "code_str": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n    } else {\n        return 'Yes';\n    }\n}\n\n",
        "test": "const testcheck_Triangle = () => {\n    console.assert(check_Triangle(1,5,2,5,4,6) === 'Yes');\n    console.assert(check_Triangle(1,1,1,4,1,5) === 'No');\n    console.assert(check_Triangle(1,1,1,1,1,1) === 'No');\n}\ntestcheck_Triangle(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the triangle is valid or not if 3 points are given.",
        "code_str_generate": "function check_Triangle(x1, y1, x2, y2, x3, y3) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the triangle is valid or not if 3 points are given.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n    if (a === 0) {\n        return 'No';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 439,
        "task_id": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "code_str": "function extractString(str, l) {\n    const result = str.filter(e => e.length === l);\n    return result;\n}\n\n",
        "test": "const testExtractString = () => {\n    console.assert(JSON.stringify(extractString(['Python', 'list', 'exercises', 'practice', 'solution'], 8)) === JSON.stringify(['practice', 'solution']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(extractString(['Python', 'list', 'exercises', 'practice', 'solution'], 6)) === JSON.stringify(['Python']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(extractString(['Python', 'list', 'exercises', 'practice', 'solution'], 9)) === JSON.stringify(['exercises']), \"Test 3 Failed\");\n}\n\ntestExtractString(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extractString(str, l) {\n    const result = str.filter(e => e.length === l);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "code_str_generate": "function extractString(str, l) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract specified size of strings from a give list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const result = str.filter(e => e.length === l);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 440,
        "task_id": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "code_str": "function remove_whitespaces(text1) {\n  return text1.replace(/\\s+/g, '');\n}\n\n",
        "test": "const testRemove_whitespaces = () => {\n  console.assert(remove_whitespaces(' Google    Flutter ') === 'GoogleFlutter');\n  console.assert(remove_whitespaces(' Google    Dart ') === 'GoogleDart');\n  console.assert(remove_whitespaces(' iOS    Swift ') === 'iOSSwift');\n}\n\ntestRemove_whitespaces();",
        "is_deleted": 1,
        "code_str_deleted": "function remove_whitespaces(text1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "code_str_generate": "function remove_whitespaces(text1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove all whitespaces from the given string using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 441,
        "task_id": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code_str": "function loss_amount(actual_cost, sale_amount) {\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n    } else {\n        return null;\n    }\n}\n\n",
        "test": "const testLoss_amount = () => {\n    console.assert(loss_amount(1500, 1200) === null, \"Test 1 Failed\");\n    console.assert(loss_amount(100, 200) === 100, \"Test 2 Failed\");\n    console.assert(loss_amount(2000, 5000) === 3000, \"Test 3 Failed\");\n}\ntestLoss_amount() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function loss_amount(actual_cost, sale_amount) {\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n",
        "javascript_prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code_str_generate": "function loss_amount(actual_cost, sale_amount) {\n\n    /*\n    progame language:javascript\n    description:Write a function that gives loss amount if the given amount has loss else return none.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sale_amount > actual_cost) {\n        return sale_amount - actual_cost;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 442,
        "task_id": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "code_str": "function sumofFactors(n) {\n    if (n % 2 !== 0) {\n        return 0;\n    }\n    let res = 1;\n    for (let i = 2; i <= Math.sqrt(n) + 1; i++) {\n        let count = 0;\n        let curr_sum = 1;\n        let curr_term = 1;\n        while (n % i === 0) {\n            count++;\n            n = Math.floor(n / i);\n            if (i === 2 && count === 1) {\n                curr_sum = 0;\n            }\n            curr_term = curr_term * i;\n            curr_sum = curr_sum + curr_term;\n        }\n        res = res * curr_sum;\n    }\n    if (n >= 2) {\n        res = res * (1 + n);\n    }\n    return res;\n}",
        "test": "const testsumofFactors = () => {\n    console.assert(sumofFactors(18) === 26, \"Test failed for n = 18\");\n    console.assert(sumofFactors(30) === 48, \"Test failed for n = 30\");\n    console.assert(sumofFactors(6) === 8, \"Test failed for n = 6\");\n}\ntestsumofFactors(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sumofFactors(n) {\n    if (n % 2 !== 0) {\n        return 0;\n    }\n    let res = 1;\n    for (let i = 2; i <= Math.sqrt(n) + 1; i++) {\n        let count = 0;\n        let curr_sum = 1;\n        let curr_term = 1;\n        while (n % i === 0) {\n            count++;\n            n = Math.floor(n / i);\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of even factors of a number.",
        "code_str_generate": "function sumofFactors(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of even factors of a number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 !== 0) {\n        return 0;\n    }\n    let res = 1;\n    for (let i = 2; i <= Math.sqrt(n) + 1; i++) {\n        let count = 0;\n        let curr_sum = 1;\n        let curr_term = 1;\n        while (n % i === 0) {\n            count++;\n            n = Math.floor(n / i);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 443,
        "task_id": 454,
        "prompt": "Write a function that matches a word containing 'z'.",
        "code_str": "function text_match_wordz(text) {\n    const patterns = /\\w*z.\\w*/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n    } else {\n        return 'Not matched!';\n    }\n}\n\n",
        "test": "const testtext_match_wordz = () => {\n    console.assert(text_match_wordz(\"pythonz.\") === 'Found a match!');\n    console.assert(text_match_wordz(\"xyz.\") === 'Found a match!');\n    console.assert(text_match_wordz(\"  lang  .\") === 'Not matched!');\n}\ntesttext_match_wordz() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function text_match_wordz(text) {\n    const patterns = /\\w*z.\\w*/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n        //begin to write code\n",
        "javascript_prompt": "Write a function that matches a word containing 'z'.",
        "code_str_generate": "function text_match_wordz(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function that matches a word containing 'z'.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const patterns = /\\w*z.\\w*/;\n    if (text.search(patterns) !== -1) {\n        return 'Found a match!';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 444,
        "task_id": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "code_str": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n",
        "test": "const testcheck_monthnumb_number = () => {\n  console.assert(check_monthnumb_number(5) === true, \"Test case 1 failed\");\n  console.assert(check_monthnumb_number(2) === false, \"Test case 2 failed\");\n  console.assert(check_monthnumb_number(6) === false, \"Test case 3 failed\");\n}\n\ntestcheck_monthnumb_number() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_monthnumb_number(monthnum2) {\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "code_str_generate": "function check_monthnumb_number(monthnum2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check whether the given month number contains 31 days or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  if (monthnum2 === 1 || monthnum2 === 3 || monthnum2 === 5 || monthnum2 === 7 || monthnum2 === 8 || monthnum2 === 10 || monthnum2 === 12) {\n    return true;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 445,
        "task_id": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.",
        "code_str": "function reverseStringList(stringList) {\n    return stringList.map(s => s.split('').reverse().join(''));\n}\n\n",
        "test": "const testReverseStringList = () => {\n    console.assert(JSON.stringify(reverseStringList(['Red', 'Green', 'Blue', 'White', 'Black'])) === JSON.stringify(['deR', 'neerG', 'eulB', 'etihW', 'kcalB']), \"Test 1 failed\");\n    console.assert(JSON.stringify(reverseStringList(['john','amal','joel','george'])) === JSON.stringify(['nhoj','lama','leoj','egroeg']), \"Test 2 failed\");\n    console.assert(JSON.stringify(reverseStringList(['jack','john','mary'])) === JSON.stringify(['kcaj','nhoj','yram']), \"Test 3 failed\");\n}\n\ntestReverseStringList(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function reverseStringList(stringList) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to reverse strings in a given list of string values.",
        "code_str_generate": "function reverseStringList(stringList) {\n\n    /*\n    progame language:javascript\n    description:Write a function to reverse strings in a given list of string values.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 446,
        "task_id": 457,
        "prompt": "Write a python function to find the sublist having minimum length.",
        "code_str": "function Find_Min(lst) {\n    return lst.reduce((minList, current) => current.length < minList.length ? current : minList);\n}\n\n",
        "test": "const testFind_Min = () => {\n    console.assert(JSON.stringify(Find_Min([[1],[1,2],[1,2,3]])) === JSON.stringify([1]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(Find_Min([[1,1],[1,1,1],[1,2,7,8]])) === JSON.stringify([1,1]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(Find_Min([['x'],['x','y'],['x','y','z']])) === JSON.stringify(['x']), \"Test 3 Failed\");\n}\n\ntestFind_Min() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Find_Min(lst) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sublist having minimum length.",
        "code_str_generate": "function Find_Min(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sublist having minimum length.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 447,
        "task_id": 458,
        "prompt": "Write a function to find the area of a rectangle.",
        "code_str": "function rectangle_area(l, b) {\n    return l * b;\n}\n\n",
        "test": "const testrectangle_area = () => {\n    console.assert(rectangle_area(10, 20) === 200);\n    console.assert(rectangle_area(10, 5) === 50);\n    console.assert(rectangle_area(4, 2) === 8);\n}\n\ntestrectangle_area();",
        "is_deleted": 1,
        "code_str_deleted": "function rectangle_area(l, b) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to find the area of a rectangle.",
        "code_str_generate": "function rectangle_area(l, b) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the area of a rectangle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 448,
        "task_id": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code_str": "function remove_uppercase(str1) {\n    return str1.replace(/[A-Z]/g, '');\n}\n\n",
        "test": "const testremove_uppercase = () => {\n    console.assert(remove_uppercase('cAstyoUrFavoRitETVshoWs') === 'cstyoravoitshos');\n    console.assert(remove_uppercase('wAtchTheinTernEtrAdIo') === 'wtchheinerntrdo');\n    console.assert(remove_uppercase('VoicESeaRchAndreComMendaTionS') === 'oiceachndreomendaion');\n}\ntestremove_uppercase()",
        "is_deleted": 1,
        "code_str_deleted": "function remove_uppercase(str1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code_str_generate": "function remove_uppercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove uppercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 449,
        "task_id": 460,
        "prompt": "Write a python function to get the first element of each sublist.",
        "code_str": "function Extract(lst) {\n    return lst.map(item => item[0]);\n}\n\n",
        "test": "const testExtract = () => {\n    console.assert(JSON.stringify(Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])) === JSON.stringify([1, 3, 6]), 'Test case 1 failed');\n    console.assert(JSON.stringify(Extract([[1, 2, 3], [4, 5]])) === JSON.stringify([1, 4]), 'Test case 2 failed');\n    console.assert(JSON.stringify(Extract([[9, 8, 1], [1, 2]])) === JSON.stringify([9, 1]), 'Test case 3 failed');\n}\ntestExtract() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function Extract(lst) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to get the first element of each sublist.",
        "code_str_generate": "function Extract(lst) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to get the first element of each sublist.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 450,
        "task_id": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "code_str": "function upper_ctr(str) {\n    let upper_ctr = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n            upper_ctr += 1;\n        }\n    }\n    return upper_ctr;\n}",
        "test": "const testUpperCtr = () => {\n    console.assert(upper_ctr('PYthon') === 2, 'Test 1 Failed');\n    console.assert(upper_ctr('BigData') === 2, 'Test 2 Failed');\n    console.assert(upper_ctr('program') === 0, 'Test 3 Failed');\n}\ntestUpperCtr() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function upper_ctr(str) {\n    let upper_ctr = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to count the upper case characters in a given string.",
        "code_str_generate": "function upper_ctr(str) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to count the upper case characters in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let upper_ctr = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] >= 'A' && str[i] <= 'Z') {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 451,
        "task_id": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "code_str": "function combinationsList(list1) {\n    if (list1.length === 0) {\n        return [[]];\n    }\n    let result = [];\n    let smallerCombos = combinationsList(list1.slice(1));\n    for (let el of smallerCombos) {\n        result.push(el, el.concat(list1[0]));\n    }\n    return result;\n}\n\n",
        "test": "const testCombinationsList = () => {\n    console.assert(JSON.stringify(combinationsList(['orange', 'red', 'green', 'blue'])) === JSON.stringify([[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(combinationsList(['red', 'green', 'blue', 'white', 'black', 'orange'])) === JSON.stringify([[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(combinationsList(['red', 'green', 'black', 'orange'])) === JSON.stringify([[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]), \"Test 3 Failed\");\n}\n\ntestCombinationsList(); // Invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function combinationsList(list1) {\n    if (list1.length === 0) {\n        return [[]];\n    }\n    let result = [];\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "code_str_generate": "function combinationsList(list1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find all possible combinations of the elements of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (list1.length === 0) {\n        return [[]];\n    }\n    let result = [];\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 452,
        "task_id": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "code_str": "function max_subarray_product(arr) {\n    let n = arr.length;\n    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 0;\n    let flag = 0;\n\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] === 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n        } else {\n            let temp = max_ending_here;\n            max_ending_here = Math.max(min_ending_here * arr[i], 1);\n            min_ending_here = temp * arr[i];\n        }\n\n        if (max_so_far < max_ending_here) {\n            max_so_far = max_ending_here;\n        }\n    }\n\n    if (flag === 0 && max_so_far === 0) {\n        return 0;\n    }\n\n    return max_so_far;\n}\n\n",
        "test": "const testMax_subarray_product = () => {\n    console.assert(max_subarray_product([1, -2, -3, 0, 7, -8, -2]) === 112, \"[Test Case 1 Failed]\");\n    console.assert(max_subarray_product([6, -3, -10, 0, 2]) === 180, \"[Test Case 2 Failed]\");\n    console.assert(max_subarray_product([-2, -40, 0, -2, -3]) === 80, \"[Test Case 3 Failed]\");\n}\n\ntestMax_subarray_product(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_subarray_product(arr) {\n    let n = arr.length;\n    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 0;\n    let flag = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] === 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum product subarray of the given array.",
        "code_str_generate": "function max_subarray_product(arr) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum product subarray of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let n = arr.length;\n    let max_ending_here = 1;\n    let min_ending_here = 1;\n    let max_so_far = 0;\n    let flag = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            max_ending_here = max_ending_here * arr[i];\n            min_ending_here = Math.min(min_ending_here * arr[i], 1);\n            flag = 1;\n        } else if (arr[i] === 0) {\n            max_ending_here = 1;\n            min_ending_here = 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 453,
        "task_id": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "code_str": "function checkValue(dict, n) {\n    const values = Object.values(dict);\n    return values.every(x => x === n);\n}\n\n",
        "test": "const testCheckValue = () => {\n    console.assert(checkValue({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10) === false);\n    console.assert(checkValue({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12) === true);\n    console.assert(checkValue({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5) === false);\n}\n\ntestCheckValue();",
        "is_deleted": 1,
        "code_str_deleted": "function checkValue(dict, n) {\n    const values = Object.values(dict);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check if all values are same in a dictionary.",
        "code_str_generate": "function checkValue(dict, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if all values are same in a dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const values = Object.values(dict);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 454,
        "task_id": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "code_str": "function dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n      result[key] = value;\n    }\n  }\n  return result;\n}\n\n",
        "test": "const testDropEmpty = () => {\n  console.assert(JSON.stringify(dropEmpty({'c1': 'Red', 'c2': 'Green', 'c3': null})) === JSON.stringify({'c1': 'Red', 'c2': 'Green'}), \"Test 1 Failed\");\n  console.assert(JSON.stringify(dropEmpty({'c1': 'Red', 'c2': null, 'c3': null})) === JSON.stringify({'c1': 'Red'}), \"Test 2 Failed\");\n  console.assert(JSON.stringify(dropEmpty({'c1': null, 'c2': 'Green', 'c3': null})) === JSON.stringify({'c2': 'Green'}), \"Test 3 Failed\");\n}\n\ntestDropEmpty(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function dropEmpty(dict1) {\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to drop empty items from a given dictionary.",
        "code_str_generate": "function dropEmpty(dict1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to drop empty items from a given dictionary.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const result = {};\n  for (const [key, value] of Object.entries(dict1)) {\n    if (value !== null) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 455,
        "task_id": 466,
        "prompt": "Write a function to find the peak element in the given array.",
        "code_str": "function findPeakUtil(arr, low, high, n) {\n    let mid = low + Math.floor((high - low) / 2);\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return findPeakUtil(arr, low, mid - 1, n);\n    } else {\n        return findPeakUtil(arr, mid + 1, high, n);\n    }\n}\n\nfunction findPeak(arr, n) {\n    return findPeakUtil(arr, 0, n - 1, n);\n}\n\n",
        "test": "const testFindPeak = () => {\n    console.assert(findPeak([1, 3, 20, 4, 1, 0], 6) === 2);\n    console.assert(findPeak([2, 3, 4, 5, 6], 5) === 4);\n    console.assert(findPeak([8, 9, 11, 12, 14, 15], 6) === 5);\n}\n\ntestFindPeak(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function findPeakUtil(arr, low, high, n) {\n    let mid = low + Math.floor((high - low) / 2);\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return findPeakUtil(arr, low, mid - 1, n);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find the peak element in the given array.",
        "code_str_generate": "function findPeakUtil(arr, low, high, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the peak element in the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mid = low + Math.floor((high - low) / 2);\n    if ((mid == 0 || arr[mid - 1] <= arr[mid]) &&\n        (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n        return mid;\n    } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n        return findPeakUtil(arr, low, mid - 1, n);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 456,
        "task_id": 467,
        "prompt": "Write a python function to convert decimal number to octal number.",
        "code_str": "function decimal_to_Octal(deciNum) {\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        octalNum += remainder * countval;\n        countval = countval * 10;\n        deciNum = Math.floor(deciNum / 8);\n    }\n    return octalNum;\n}\n\n",
        "test": "const testdecimal_to_Octal = () => {\n    console.assert(decimal_to_Octal(10) === 12);\n    console.assert(decimal_to_Octal(2) === 2);\n    console.assert(decimal_to_Octal(33) === 41);\n}\ntestdecimal_to_Octal() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function decimal_to_Octal(deciNum) {\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to convert decimal number to octal number.",
        "code_str_generate": "function decimal_to_Octal(deciNum) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert decimal number to octal number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let octalNum = 0;\n    let countval = 1;\n    let dNo = deciNum;\n    while (deciNum != 0) {\n        let remainder = deciNum % 8;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 457,
        "task_id": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code_str": "function max_product(arr, n) {\n  let mpis = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    mpis[i] = arr[i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n      if (arr[i] > arr[j] && mpis[i] < mpis[j] * arr[i]) {\n        mpis[i] = mpis[j] * arr[i];\n      }\n    }\n  }\n  return Math.max(...mpis);\n}\n\n",
        "test": "const testmax_product = () => {\n  console.assert(max_product([3, 100, 4, 5, 150, 6], 6) === 45000, \"Test 1 Failed\");\n  console.assert(max_product([4, 42, 55, 68, 80], 5) === 50265600, \"Test 2 Failed\");\n  console.assert(max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) === 21780000, \"Test 3 Failed\");\n}\ntestmax_product()",
        "is_deleted": 1,
        "code_str_deleted": "function max_product(arr, n) {\n  let mpis = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    mpis[i] = arr[i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code_str_generate": "function max_product(arr, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let mpis = new Array(n).fill(0);\n  for (let i = 0; i < n; i++) {\n    mpis[i] = arr[i];\n  }\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < i; j++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 458,
        "task_id": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code_str": "function max_profit(price, k) {\n    const n = price.length;\n    let final_profit = new Array(k + 1).fill().map(() => new Array(n).fill(null));\n    for (let i = 0; i <= k; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 || j === 0) {\n                final_profit[i][j] = 0;\n            } else {\n                let max_so_far = 0;\n                for (let x = 0; x < j; x++) {\n                    let curr_price = price[j] - price[x] + final_profit[i-1][x];\n                    if (max_so_far < curr_price) {\n                        max_so_far = curr_price;\n                    }\n                }\n                final_profit[i][j] = Math.max(final_profit[i][j-1], max_so_far);\n            }\n        }\n    }\n    return final_profit[k][n-1];\n}\n\n",
        "test": "const testMax_profit = () => {\n    console.assert(max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) === 10, \"Test 1 Failed\");\n    console.assert(max_profit([2, 4, 7, 5, 4, 3, 5], 2) === 7, \"Test 2 Failed\");\n    console.assert(max_profit([10, 6, 8, 4, 2], 2) === 2, \"Test 3 Failed\");\n}\ntestMax_profit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function max_profit(price, k) {\n    const n = price.length;\n    let final_profit = new Array(k + 1).fill().map(() => new Array(n).fill(null));\n    for (let i = 0; i <= k; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 || j === 0) {\n                final_profit[i][j] = 0;\n            } else {\n                let max_so_far = 0;\n                for (let x = 0; x < j; x++) {\n                //begin to write code\n",
        "javascript_prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code_str_generate": "function max_profit(price, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the maximum profit earned from a maximum of k stock transactions\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const n = price.length;\n    let final_profit = new Array(k + 1).fill().map(() => new Array(n).fill(null));\n    for (let i = 0; i <= k; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 || j === 0) {\n                final_profit[i][j] = 0;\n            } else {\n                let max_so_far = 0;\n                for (let x = 0; x < j; x++) {\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 459,
        "task_id": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code_str": "function add_pairwise(test_tup) {\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[index + 1];\n  });\n  res.pop();\n  return res;\n}\n\n",
        "test": "const testAdd_pairwise = () => {\n  console.assert(JSON.stringify(add_pairwise([1, 5, 7, 8, 10])) === JSON.stringify([6, 12, 15, 18]), 'Test 1 failed');\n  console.assert(JSON.stringify(add_pairwise([2, 6, 8, 9, 11])) === JSON.stringify([8, 14, 17, 20]), 'Test 2 failed');\n  console.assert(JSON.stringify(add_pairwise([3, 7, 9, 10, 12])) === JSON.stringify([10, 16, 19, 22]), 'Test 3 failed');\n}\ntestAdd_pairwise(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_pairwise(test_tup) {\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[index + 1];\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code_str_generate": "function add_pairwise(test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the pairwise addition of the elements of the given tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = test_tup.map((val, index, array) => {\n    if (index < array.length - 1) return val + array[index + 1];\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 460,
        "task_id": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.",
        "code_str": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n        mul = (mul * (arr[i] % n)) % n;\n    }\n    return mul % n;\n}\n\n",
        "test": "const testfind_remainder = () => {\n    console.assert(find_remainder([100, 10, 5, 25, 35, 14], 6, 11) === 9);\n    console.assert(find_remainder([1, 1, 1], 3, 1) === 0);\n    console.assert(find_remainder([1, 2, 1], 3, 2) === 0);\n}\n\ntestfind_remainder();",
        "is_deleted": 1,
        "code_str_deleted": "function find_remainder(arr, lens, n) { \n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find remainder of array multiplication divided by n.",
        "code_str_generate": "function find_remainder(arr, lens, n) { \n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find remainder of array multiplication divided by n.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mul = 1;\n    for (let i = 0; i < lens; i++) {  \n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 461,
        "task_id": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "code_str": "function check_Consecutive(l) {\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i + 1] - l[i] !== 1) return false;\n    }\n    return true;\n}\n\n",
        "test": "const testcheck_Consecutive = () => {\n    console.assert(check_Consecutive([1, 2, 3, 4, 5]) === true);\n    console.assert(check_Consecutive([1, 2, 3, 5, 6]) === false);\n    console.assert(check_Consecutive([1, 2, 1]) === false);\n}\n\ntestcheck_Consecutive(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function check_Consecutive(l) {\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to check whether the given list contains consecutive numbers or not.",
        "code_str_generate": "function check_Consecutive(l) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to check whether the given list contains consecutive numbers or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    l.sort((a, b) => a - b);\n    for (let i = 0; i < l.length - 1; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 462,
        "task_id": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code_str": "function tuple_intersection(test_list1, test_list2) {\n    const set1 = new Set(test_list1.map(ele => JSON.stringify(ele.slice().sort())));\n    const set2 = new Set(test_list2.map(ele => JSON.stringify(ele.slice().sort())));\n    const res = new Set([...set1].filter(x => set2.has(x)));\n    return new Set([...res].map(x => JSON.parse(x)));\n}\n\n",
        "test": "const testTuple_intersection = () => {\n    console.assert(JSON.stringify([...tuple_intersection([[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]])].sort()) === JSON.stringify([[4, 5], [3, 4], [5, 6]].sort()));\n    console.assert(JSON.stringify([...tuple_intersection([[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]])].sort()) === JSON.stringify([[4, 7], [1, 4]].sort()));\n    console.assert(JSON.stringify([...tuple_intersection([[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]])].sort()) === JSON.stringify([[1, 3], [2, 3]].sort()));\n}\n\ntestTuple_intersection(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function tuple_intersection(test_list1, test_list2) {\n    const set1 = new Set(test_list1.map(ele => JSON.stringify(ele.slice().sort())));\n    const set2 = new Set(test_list2.map(ele => JSON.stringify(ele.slice().sort())));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code_str_generate": "function tuple_intersection(test_list1, test_list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const set1 = new Set(test_list1.map(ele => JSON.stringify(ele.slice().sort())));\n    const set2 = new Set(test_list2.map(ele => JSON.stringify(ele.slice().sort())));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 463,
        "task_id": 474,
        "prompt": "Write a function to replace characters in a string.",
        "code_str": "function replace_char(str1, ch, newch) {\n    let str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    return str2;\n}\n\n",
        "test": "const testreplace_char = () => {\n    console.assert(replace_char(\"polygon\", 'y', 'l') === \"pollgon\");\n    console.assert(replace_char(\"character\", 'c', 'a') === \"aharaater\");\n    console.assert(replace_char(\"python\", 'l', 'a') === \"python\");\n}\n\ntestreplace_char();",
        "is_deleted": 1,
        "code_str_deleted": "function replace_char(str1, ch, newch) {\n    let str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to replace characters in a string.",
        "code_str_generate": "function replace_char(str1, ch, newch) {\n\n    /*\n    progame language:javascript\n    description:Write a function to replace characters in a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let str2 = str1.replace(new RegExp(ch, 'g'), newch);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 464,
        "task_id": 475,
        "prompt": "Write a function to sort counter by value.",
        "code_str": "function sortCounter(dict1) {\n    let entries = Object.entries(dict1);\n    entries.sort((a, b) => b[1] - a[1]);\n    return entries;\n}\n\n",
        "test": "const testSortCounter = () => {\n    console.assert(JSON.stringify(sortCounter({'Math':81, 'Physics':83, 'Chemistry':87})) === JSON.stringify([['Chemistry', 87], ['Physics', 83], ['Math', 81]]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(sortCounter({'Math':400, 'Physics':300, 'Chemistry':250})) === JSON.stringify([['Math', 400], ['Physics', 300], ['Chemistry', 250]]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(sortCounter({'Math':900, 'Physics':1000, 'Chemistry':1250})) === JSON.stringify([['Chemistry', 1250], ['Physics', 1000], ['Math', 900]]), \"Test 3 Failed\");\n}\n\ntestSortCounter(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sortCounter(dict1) {\n    let entries = Object.entries(dict1);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to sort counter by value.",
        "code_str_generate": "function sortCounter(dict1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort counter by value.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let entries = Object.entries(dict1);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 465,
        "task_id": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "code_str": "function big_sum(nums) {\n    let sum = Math.max(...nums) + Math.min(...nums);\n    return sum;\n}\n\n",
        "test": "const testbig_sum = () => {\n    console.assert(big_sum([1,2,3]) === 4, \"Test case 1 failed\");\n    console.assert(big_sum([-1,2,3,4]) === 3, \"Test case 2 failed\");\n    console.assert(big_sum([2,3,6]) === 8, \"Test case 3 failed\");\n}\ntestbig_sum()",
        "is_deleted": 1,
        "code_str_deleted": "function big_sum(nums) {\n    let sum = Math.max(...nums) + Math.min(...nums);\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the sum of the largest and smallest value in a given array.",
        "code_str_generate": "function big_sum(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the sum of the largest and smallest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = Math.max(...nums) + Math.min(...nums);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 466,
        "task_id": 477,
        "prompt": "Write a python function to convert the given string to lower case.",
        "code_str": "function is_lower(string) {\n  return string.toLowerCase();\n}\n\n",
        "test": "const testIs_lower = () => {\n  console.assert(is_lower(\"InValid\") === \"invalid\");\n  console.assert(is_lower(\"TruE\") === \"true\");\n  console.assert(is_lower(\"SenTenCE\") === \"sentence\");\n}\n\ntestIs_lower()",
        "is_deleted": 1,
        "code_str_deleted": "function is_lower(string) {\n//begin to write code\n",
        "javascript_prompt": "Write a javascript function to convert the given string to lower case.",
        "code_str_generate": "function is_lower(string) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to convert the given string to lower case.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 467,
        "task_id": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "code_str": "//function definition\nfunction remove_lowercase(str1) {\n  const remove_lower = text => text.replace(/[a-z]/g, '');\n  const result = remove_lower(str1);\n  return result;\n}\n\n",
        "test": "const testremove_lowercase = () => {\n  console.assert(remove_lowercase(\"PYTHon\") === 'PYTH', \"Test 1 failed\");\n  console.assert(remove_lowercase(\"FInD\") === 'FID', \"Test 2 failed\");\n  console.assert(remove_lowercase(\"STRinG\") === 'STRG', \"Test 3 failed\");\n}\ntestremove_lowercase() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction remove_lowercase(str1) {\n  const remove_lower = text => text.replace(/[a-z]/g, '');\n  //begin to write code\n",
        "javascript_prompt": "Write a function to remove lowercase substrings from a given string.",
        "code_str_generate": "//function definition\nfunction remove_lowercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove lowercase substrings from a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const remove_lower = text => text.replace(/[a-z]/g, '');\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 468,
        "task_id": 479,
        "prompt": "Write a python function to find the first digit of a given number.",
        "code_str": "function first_Digit(n) {\n    while (n >= 10) {\n        n = n / 10;\n    }\n    return Math.floor(n);\n}\n\n",
        "test": "const testfirst_Digit = () => {\n    console.assert(first_Digit(123) === 1);\n    console.assert(first_Digit(456) === 4);\n    console.assert(first_Digit(12) === 1);\n}\n\ntestfirst_Digit() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function first_Digit(n) {\n    while (n >= 10) {\n        n = n / 10;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first digit of a given number.",
        "code_str_generate": "function first_Digit(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first digit of a given number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    while (n >= 10) {\n        n = n / 10;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 469,
        "task_id": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.",
        "code_str": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    for (let i = 0; i < str1.length; i++) {\n        if (max < ctr[str1.charCodeAt(i)]) {\n            max = ctr[str1.charCodeAt(i)];\n            ch = str1[i];\n        }\n    }\n    return ch;\n}\n\n",
        "test": "const testGet_max_occuring_char = () => {\n    console.assert(get_max_occuring_char(\"data\") === \"a\", \"Test 1 failed\");\n    console.assert(get_max_occuring_char(\"create\") === \"e\", \"Test 2 failed\");\n    console.assert(get_max_occuring_char(\"brilliant girl\") === \"i\", \"Test 3 failed\");\n}\ntestGet_max_occuring_char() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function get_max_occuring_char(str1) {\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the maximum occurring character in a given string.",
        "code_str_generate": "function get_max_occuring_char(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the maximum occurring character in a given string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const ASCII_SIZE = 256;\n    let ctr = new Array(ASCII_SIZE).fill(0);\n    let max = -1;\n    let ch = '';\n    for (let i = 0; i < str1.length; i++) {\n        ctr[str1.charCodeAt(i)]++;\n    }\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 470,
        "task_id": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code_str": "function is_subset_sum(set, n, sum) {\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n    }\n    if (set[n - 1] > sum) {\n        return is_subset_sum(set, n - 1, sum);\n    }\n    return is_subset_sum(set, n - 1, sum) || is_subset_sum(set, n - 1, sum - set[n - 1]);\n}\n\n",
        "test": "const testIs_subset_sum = () => {\n    console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) === true);\n    console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) === false);\n    console.assert(is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) === true);\n}\ntestIs_subset_sum() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function is_subset_sum(set, n, sum) {\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n        //begin to write code\n",
        "javascript_prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code_str_generate": "function is_subset_sum(set, n, sum) {\n\n    /*\n    progame language:javascript\n    description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (sum === 0) {\n        return true;\n    }\n    if (n === 0) {\n        return false;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 471,
        "task_id": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code_str": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}",
        "test": "const testMatch = () => {\n    console.assert(match(\"Geeks\") === 'Yes');\n    console.assert(match(\"geeksforGeeks\") === 'Yes');\n    console.assert(match(\"geeks\") === 'No');\n}\n\ntestMatch() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function match(text) {\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n",
        "javascript_prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code_str_generate": "function match(text) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let pattern = /[A-Z]+[a-z]+$/;\n    if (pattern.test(text)) {\n        return 'Yes';\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 472,
        "task_id": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "code_str": "function first_Factorial_Divisible_Number(x) {\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        if (fact % x === 0) {\n            break;\n        }\n    }\n    return i;\n}",
        "test": "const testFirst_Factorial_Divisible_Number = () => {\n    console.assert(first_Factorial_Divisible_Number(10) === 5, \"Test Case 1 Failed\");\n    console.assert(first_Factorial_Divisible_Number(15) === 5, \"Test Case 2 Failed\");\n    console.assert(first_Factorial_Divisible_Number(5) === 4, \"Test Case 3 Failed\");\n}\ntestFirst_Factorial_Divisible_Number() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function first_Factorial_Divisible_Number(x) {\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the first natural number whose factorial is divisible by x.",
        "code_str_generate": "function first_Factorial_Divisible_Number(x) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the first natural number whose factorial is divisible by x.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let i = 1;\n    let fact = 1;\n    for (i = 1; i < x - 1; i++) {\n        fact = fact * i;\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 473,
        "task_id": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "code_str": "function remove_matching_tuple(test_list1, test_list2) {\n  return test_list1.filter(sub => !test_list2.some(el => el[0] === sub[0] && el[1] === sub[1]));\n}\n\n",
        "test": "const testRemove_matching_tuple = () => {\n  console.assert(JSON.stringify(remove_matching_tuple([['Hello', 'dude'], ['How', 'are'], ['you', '?']], [['Hello', 'dude'], ['How', 'are']])) === JSON.stringify([['you', '?']]));\n  console.assert(JSON.stringify(remove_matching_tuple([['Part', 'of'], ['the', 'journey'], ['is ', 'end']], [['Journey', 'the'], ['is', 'end']])) === JSON.stringify([['Part', 'of'], ['the', 'journey'], ['is ', 'end']]));\n  console.assert(JSON.stringify(remove_matching_tuple([['Its', 'been'], ['a', 'long'], ['day', 'without']], [['a', 'long'], ['my', 'friend']])) === JSON.stringify([['Its', 'been'], ['day', 'without']]));\n}\n\ntestRemove_matching_tuple() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_matching_tuple(test_list1, test_list2) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "code_str_generate": "function remove_matching_tuple(test_list1, test_list2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove the matching tuples from the given two tuples.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 474,
        "task_id": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.",
        "code_str": "function isPalindrome(n) {\n  let divisor = 1;\n  while (n / divisor >= 10) {\n    divisor *= 10;\n  }\n  while (n !== 0) {\n    let leading = Math.floor(n / divisor);\n    let trailing = n % 10;\n    if (leading !== trailing) {\n      return false;\n    }\n    n = Math.floor((n % divisor) / 10);\n    divisor = Math.floor(divisor / 100);\n  }\n  return true;\n}\n\nfunction largestPalindrome(A, n) {\n  A.sort((a, b) => a - b);\n  for (let i = n - 1; i >= 0; i--) {\n    if (isPalindrome(A[i])) {\n      return A[i];\n    }\n  }\n  return -1;\n}\n\n",
        "test": "const testLargestPalindrome = () => {\n  console.assert(largestPalindrome([1, 232, 54545, 999991], 4) === 54545, 'Test 1 Failed');\n  console.assert(largestPalindrome([1, 2, 3, 4, 5, 50], 6) === 5, 'Test 2 Failed');\n  console.assert(largestPalindrome([1, 3, 7, 9, 45], 5) === 9, 'Test 3 Failed');\n}\n\ntestLargestPalindrome(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function isPalindrome(n) {\n  let divisor = 1;\n  while (n / divisor >= 10) {\n    divisor *= 10;\n  }\n  while (n !== 0) {\n    let leading = Math.floor(n / divisor);\n    let trailing = n % 10;\n    if (leading !== trailing) {\n      return false;\n    }\n    n = Math.floor((n % divisor) / 10);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the largest palindromic number in the given array.",
        "code_str_generate": "function isPalindrome(n) {\n  let divisor = 1;\n  while (n / divisor >= 10) {\n    divisor *= 10;\n  }\n  while (n !== 0) {\n    let leading = Math.floor(n / divisor);\n    let trailing = n % 10;\n    if (leading !== trailing) {\n      return false;\n    }\n    n = Math.floor((n % divisor) / 10);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 475,
        "task_id": 486,
        "prompt": "Write a function to compute binomial probability for the given number.",
        "code_str": "function nCr(n, r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    let answer = 1;\n    for (let i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n        answer /= i;\n    }\n    return answer;\n}\n\nfunction binomial_probability(n, k, p) {\n    return (nCr(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k));\n}\n\n",
        "test": "const testBinomial_probability = () => {\n    console.assert(binomial_probability(10, 5, 1.0/3) === 0.13656454808718185, \"Test 1 Failed\");\n    console.assert(binomial_probability(11, 6, 2.0/4) === 0.2255859375, \"Test 2 Failed\");\n    console.assert(binomial_probability(12, 7, 3.0/5) === 0.227030335488, \"Test 3 Failed\");\n}\n\ntestBinomial_probability(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function nCr(n, r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    let answer = 1;\n    for (let i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n        //begin to write code\n",
        "javascript_prompt": "Write a function to compute binomial probability for the given number.",
        "code_str_generate": "function nCr(n, r) {\n    if (r > n / 2) {\n        r = n - r;\n    }\n    let answer = 1;\n    for (let i = 1; i <= r; i++) {\n        answer *= (n - r + i);\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 476,
        "task_id": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code_str": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                tup[j] = tup[j + 1];\n                tup[j + 1] = temp;\n            }\n        }\n    }\n    return tup;\n}",
        "test": "const testSort_tuple = () => {\n    console.assert(JSON.stringify(sort_tuple([[1, 3], [3, 2], [2, 1]])) === JSON.stringify([[2, 1], [3, 2], [1, 3]]));\n    console.assert(JSON.stringify(sort_tuple([[2, 4], [3, 3], [1, 1]])) === JSON.stringify([[1, 1], [3, 3], [2, 4]]));\n    console.assert(JSON.stringify(sort_tuple([[3, 9], [6, 7], [4, 3]])) === JSON.stringify([[4, 3], [6, 7], [3, 9]]));\n}\ntestSort_tuple() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "//function definition\nfunction sort_tuple(tup) {\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                //begin to write code\n",
        "javascript_prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code_str_generate": "//function definition\nfunction sort_tuple(tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let lst = tup.length;\n    for (let i = 0; i < lst; i++) {\n        for (let j = 0; j < lst - i - 1; j++) {\n            if (tup[j][1] > tup[j + 1][1]) {\n                let temp = tup[j];\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 477,
        "task_id": 488,
        "prompt": "Write a function to find the area of a pentagon.",
        "code_str": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  return area;\n}",
        "test": "const testArea_pentagon = () => {\n    console.assert(area_pentagon(5) === 43.01193501472417);\n    console.assert(area_pentagon(10) === 172.0477400588967);\n    console.assert(area_pentagon(15) === 387.10741513251753);\n  }\n  \n  testArea_pentagon() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function area_pentagon(a) {\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the area of a pentagon.",
        "code_str_generate": "function area_pentagon(a) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the area of a pentagon.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 478,
        "task_id": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.",
        "code_str": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            freq = 1;\n        } else if (arr[i] === mn) {\n            freq += 1;\n        }\n    }\n    return freq;\n}\n\n",
        "test": "const testFrequency_Of_Largest = () => {\n    console.assert(frequency_Of_Largest(5, [1, 2, 3, 4, 4]) === 2, \"Test 1 failed\");\n    console.assert(frequency_Of_Largest(3, [5, 6, 5]) === 1, \"Test 2 failed\");\n    console.assert(frequency_Of_Largest(4, [2, 7, 7, 7]) === 3, \"Test 3 failed\");\n}\ntestFrequency_Of_Largest(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function frequency_Of_Largest(n, arr) {\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the frequency of the largest value in a given array.",
        "code_str_generate": "function frequency_Of_Largest(n, arr) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the frequency of the largest value in a given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let mn = arr[0];\n    let freq = 1;\n    for (let i = 1; i < n; i++) {\n        if (arr[i] > mn) {\n            mn = arr[i];\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 479,
        "task_id": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code_str": "function extract_symmetric(test_list) {\n    let temp = new Set(test_list.filter(([a, b]) => test_list.some(([c, d]) => a === d && b === c)));\n    let res = new Set(Array.from(temp).filter(([a, b]) => a < b));\n    return res;\n}\n\n",
        "test": "const testExtract_symmetric = () => {\n    console.assert(JSON.stringify(extract_symmetric([[6, 7], [2, 3], [7, 6], [9, 8], [10, 2], [8, 9]])) === JSON.stringify(new Set([[8, 9], [6, 7]])));\n    console.assert(JSON.stringify(extract_symmetric([[7, 8], [3, 4], [8, 7], [10, 9], [11, 3], [9, 10]])) === JSON.stringify(new Set([[9, 10], [7, 8]])));\n    console.assert(JSON.stringify(extract_symmetric([[8, 9], [4, 5], [9, 8], [11, 10], [12, 4], [10, 11]])) === JSON.stringify(new Set([[8, 9], [10, 11]])));\n}\ntestExtract_symmetric() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function extract_symmetric(test_list) {\n    let temp = new Set(test_list.filter(([a, b]) => test_list.some(([c, d]) => a === d && b === c)));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code_str_generate": "function extract_symmetric(test_list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to extract all the pairs which are symmetric in the given tuple list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let temp = new Set(test_list.filter(([a, b]) => test_list.some(([c, d]) => a === d && b === c)));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 480,
        "task_id": 491,
        "prompt": "Write a function to find the sum of geometric progression series.",
        "code_str": "function sum_gp(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    return total;\n}\n\n",
        "test": "const testsum_gp = () => {\n    console.assert(sum_gp(1, 5, 2) === 31);\n    console.assert(sum_gp(1, 5, 4) === 341);\n    console.assert(sum_gp(2, 6, 3) === 728);\n}\n\ntestsum_gp() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_gp(a, n, r) {\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the sum of geometric progression series.",
        "code_str_generate": "function sum_gp(a, n, r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the sum of geometric progression series.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let total = (a * (1 - Math.pow(r, n))) / (1 - r);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 481,
        "task_id": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.",
        "code_str": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n            if (item < item_list[mid]) {\n                last = mid - 1;\n            } else {\n                first = mid + 1;\n            }\n        }\n    }\n    return found;\n}\n\n",
        "test": "const testBinary_search = () => {\n    console.assert(binary_search([1, 2, 3, 5, 8], 6) === false);\n    console.assert(binary_search([7, 8, 9, 10, 13], 10) === true);\n    console.assert(binary_search([11, 13, 14, 19, 22, 36], 23) === false);\n}\n\ntestBinary_search(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function binary_search(item_list, item) {\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n",
        "javascript_prompt": "Write a function to search an element in the given array by using binary search.",
        "code_str_generate": "function binary_search(item_list, item) {\n\n    /*\n    progame language:javascript\n    description:Write a function to search an element in the given array by using binary search.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let first = 0;\n    let last = item_list.length - 1;\n    let found = false;\n    while (first <= last && !found) {\n        let mid = Math.floor((first + last) / 2);\n        if (item_list[mid] === item) {\n            found = true;\n        } else {\n        //begin to write code\n"
    },
    {
        "Unnamed: 0": 482,
        "task_id": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code_str": "function calculatePolygons(startx, starty, endx, endy, radius) {\n    let sl = (2 * radius) * Math.tan(Math.PI / 6);\n    let p = sl * 0.5;\n    let b = sl * Math.cos(30 * Math.PI / 180);\n    let w = b * 2;\n    let h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    let origx = startx;\n    let origy = starty;\n    let xoffset = b;\n    let yoffset = 3 * p;\n    let polygons = [];\n    let row = 1;\n    let counter = 0;\n    while (starty < endy) {\n        if (row % 2 === 0) {\n            startx = origx + xoffset;\n        } else {\n            startx = origx;\n        }\n        while (startx < endx) {\n            let p1x = startx;\n            let p1y = starty + p;\n            let p2x = startx;\n            let p2y = starty + (3 * p);\n            let p3x = startx + b;\n            let p3y = starty + h;\n            let p4x = startx + w;\n            let p4y = starty + (3 * p);\n            let p5x = startx + w;\n            let p5y = starty + p;\n            let p6x = startx + b;\n            let p6y = starty;\n            let poly = [\n                [p1x, p1y],\n                [p2x, p2y],\n                [p3x, p3y],\n                [p4x, p4y],\n                [p5x, p5y],\n                [p6x, p6y],\n                [p1x, p1y]\n            ];\n            polygons.push(poly);\n            counter += 1;\n            startx += w;\n        }\n        starty += yoffset;\n        row += 1;\n    }\n    return polygons;\n}",
        "test": "const testCalculatePolygons = () => {\n    // \u6d4b\u8bd5\u7528\u4f8b 1\n    const result1 = calculatePolygons(1, 1, 4, 4, 3);\n    const expected1 = [\n        [[-5.0, -4.196152422706632], [-5.0, -0.7320508075688767], [-2.0, 1.0], [1.0, -0.7320508075688767], [1.0, -4.196152422706632], [-2.0, -5.928203230275509], [-5.0, -4.196152422706632]],\n        [[1.0, -4.196152422706632], [1.0, -0.7320508075688767], [4.0, 1.0], [7.0, -0.7320508075688767], [7.0, -4.196152422706632], [4.0, -5.928203230275509], [1.0, -4.196152422706632]],\n        [[7.0, -4.196152422706632], [7.0, -0.7320508075688767], [10.0, 1.0], [13.0, -0.7320508075688767], [13.0, -4.196152422706632], [10.0, -5.928203230275509], [7.0, -4.196152422706632]],\n        [[-2.0, 1.0000000000000004], [-2.0, 4.464101615137755], [1.0, 6.196152422706632], [4.0, 4.464101615137755], [4.0, 1.0000000000000004], [1.0, -0.7320508075688767], [-2.0, 1.0000000000000004]],\n        [[4.0, 1.0000000000000004], [4.0, 4.464101615137755], [7.0, 6.196152422706632], [10.0, 4.464101615137755], [10.0, 1.0000000000000004], [7.0, -0.7320508075688767], [4.0, 1.0000000000000004]],\n        [[-5.0, 6.196152422706632], [-5.0, 9.660254037844387], [-2.0, 11.392304845413264], [1.0, 9.660254037844387], [1.0, 6.196152422706632], [-2.0, 4.464101615137755], [-5.0, 6.196152422706632]],\n        [[1.0, 6.196152422706632], [1.0, 9.660254037844387], [4.0, 11.392304845413264], [7.0, 9.660254037844387], [7.0, 6.196152422706632], [4.0, 4.464101615137755], [1.0, 6.196152422706632]],\n        [[7.0, 6.196152422706632], [7.0, 9.660254037844387], [10.0, 11.392304845413264], [13.0, 9.660254037844387], [13.0, 6.196152422706632], [10.0, 4.464101615137755], [7.0, 6.196152422706632]],\n        [[-2.0, 11.392304845413264], [-2.0, 14.85640646055102], [1.0, 16.588457268119896], [4.0, 14.85640646055102], [4.0, 11.392304845413264], [1.0, 9.660254037844387], [-2.0, 11.392304845413264]],\n        [[4.0, 11.392304845413264], [4.0, 14.85640646055102], [7.0, 16.588457268119896], [10.0, 14.85640646055102], [10.0, 11.392304845413264], [7.0, 9.660254037844387], [4.0, 11.392304845413264]]\n    ];\n    console.assert(JSON.stringify(result1) === JSON.stringify(expected1), 'Test case 1 failed');\n\n    // \u6d4b\u8bd5\u7528\u4f8b 2\n    const result2 = calculatePolygons(5, 4, 7, 9, 8);\n    const expected2 = [\n        [[-11.0, -9.856406460551018], [-11.0, -0.6188021535170058], [-3.0, 4.0], [5.0, -0.6188021535170058], [5.0, -9.856406460551018], [-3.0, -14.475208614068023], [-11.0, -9.856406460551018]],\n        [[5.0, -9.856406460551018], [5.0, -0.6188021535170058], [13.0, 4.0], [21.0, -0.6188021535170058], [21.0, -9.856406460551018], [13.0, -14.475208614068023], [5.0, -9.856406460551018]],\n        [[21.0, -9.856406460551018], [21.0, -0.6188021535170058], [29.0, 4.0], [37.0, -0.6188021535170058], [37.0, -9.856406460551018], [29.0, -14.475208614068023], [21.0, -9.856406460551018]],\n        [[-3.0, 4.0], [-3.0, 13.237604307034012], [5.0, 17.856406460551018], [13.0, 13.237604307034012], [13.0, 4.0], [5.0, -0.6188021535170058], [-3.0, 4.0]],\n        [[13.0, 4.0], [13.0, 13.237604307034012], [21.0, 17.856406460551018], [29.0, 13.237604307034012], [29.0, 4.0], [21.0, -0.6188021535170058], [13.0, 4.0]],\n        [[-11.0, 17.856406460551018], [-11.0, 27.09401076758503], [-3.0, 31.712812921102035], [5.0, 27.09401076758503], [5.0, 17.856406460551018], [-3.0, 13.237604307034012], [-11.0, 17.856406460551018]],\n        [[5.0, 17.856406460551018], [5.0, 27.09401076758503], [13.0, 31.712812921102035], [21.0, 27.09401076758503], [21.0, 17.856406460551018], [13.0, 13.237604307034012], [5.0, 17.856406460551018]],\n        [[21.0, 17.856406460551018], [21.0, 27.09401076758503], [29.0, 31.712812921102035], [37.0, 27.09401076758503], [37.0, 17.856406460551018], [29.0, 13.237604307034012], [21.0, 17.856406460551018]],\n        [[-3.0, 31.712812921102035], [-3.0, 40.95041722813605], [5.0, 45.569219381653056], [13.0, 40.95041722813605], [13.0, 31.712812921102035], [5.0, 27.09401076758503], [-3.0, 31.712812921102035]],\n        [[13.0, 31.712812921102035], [13.0, 40.95041722813605], [21.0, 45.569219381653056], [29.0, 40.95041722813605], [29.0, 31.712812921102035], [21.0, 27.09401076758503], [13.0, 31.712812921102035]]\n    ];\n    console.assert(JSON.stringify(result2) === JSON.stringify(expected2), 'Test case 2 failed');\n\n    // \u6d4b\u8bd5\u7528\u4f8b 3\n    const result3 = calculatePolygons(9, 6, 4, 3, 2);\n    const expected3 = [\n        [[5.0, 2.5358983848622456], [5.0, 4.8452994616207485], [7.0, 6.0], [9.0, 4.8452994616207485], [9.0, 2.5358983848622456], [7.0, 1.3811978464829942], [5.0, 2.5358983848622456]],\n        [[7.0, 6.0], [7.0, 8.309401076758503], [9.0, 9.464101615137753], [11.0, 8.309401076758503], [11.0, 6.0], [9.0, 4.8452994616207485], [7.0, 6.0]]\n    ];\n    console.assert(JSON.stringify(result3) === JSON.stringify(expected3), 'Test case 3 failed');\n};\n\ntestCalculatePolygons(); // \u8c03\u7528\u6d4b\u8bd5",
        "is_deleted": 1,
        "code_str_deleted": "function calculatePolygons(startx, starty, endx, endy, radius) {\n    let sl = (2 * radius) * Math.tan(Math.PI / 6);\n    let p = sl * 0.5;\n    let b = sl * Math.cos(30 * Math.PI / 180);\n    let w = b * 2;\n    let h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    let origx = startx;\n    let origy = starty;\n    let xoffset = b;\n    let yoffset = 3 * p;\n    let polygons = [];\n    let row = 1;\n    let counter = 0;\n    while (starty < endy) {\n        if (row % 2 === 0) {\n            startx = origx + xoffset;\n        } else {\n            startx = origx;\n        }\n        while (startx < endx) {\n            let p1x = startx;\n            let p1y = starty + p;\n            let p2x = startx;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code_str_generate": "function calculatePolygons(startx, starty, endx, endy, radius) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sl = (2 * radius) * Math.tan(Math.PI / 6);\n    let p = sl * 0.5;\n    let b = sl * Math.cos(30 * Math.PI / 180);\n    let w = b * 2;\n    let h = 2 * sl;\n    startx = startx - w;\n    starty = starty - h;\n    endx = endx + w;\n    endy = endy + h;\n    let origx = startx;\n    let origy = starty;\n    let xoffset = b;\n    let yoffset = 3 * p;\n    let polygons = [];\n    let row = 1;\n    let counter = 0;\n    while (starty < endy) {\n        if (row % 2 === 0) {\n            startx = origx + xoffset;\n        } else {\n            startx = origx;\n        }\n        while (startx < endx) {\n            let p1x = startx;\n            let p1y = starty + p;\n            let p2x = startx;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 483,
        "task_id": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.",
        "code_str": "function binary_to_integer(test_tup) {\n  let res = parseInt(test_tup.map(ele => ele.toString()).join(''), 2);\n  return res.toString();\n}\n\n",
        "test": "const testBinary_to_integer = () => {\n  console.assert(binary_to_integer([1, 1, 0, 1, 0, 0, 1]) === '105', \"Test 1 Failed\");\n  console.assert(binary_to_integer([0, 1, 1, 0, 0, 1, 0, 1]) === '101', \"Test 2 Failed\");\n  console.assert(binary_to_integer([1, 1, 0, 1, 0, 1]) === '53', \"Test 3 Failed\");\n}\ntestBinary_to_integer() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function binary_to_integer(test_tup) {\n  let res = parseInt(test_tup.map(ele => ele.toString()).join(''), 2);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to convert the given binary tuple to integer.",
        "code_str_generate": "function binary_to_integer(test_tup) {\n\n    /*\n    progame language:javascript\n    description:Write a function to convert the given binary tuple to integer.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let res = parseInt(test_tup.map(ele => ele.toString()).join(''), 2);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 484,
        "task_id": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code_str": "function remove_lowercase(str1) {\n  return str1.replace(/[a-z]/g, '');\n}\n\n",
        "test": "const testRemove_lowercase = () => {\n  console.assert(remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') === 'KDALOOOHLAJSI');\n  console.assert(remove_lowercase('ProducTnamEstreAmIngMediAplAYer') === 'PTEAIMAAY');\n  console.assert(remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') === 'NTYSZTNOGI');\n}\n\ntestRemove_lowercase();",
        "is_deleted": 1,
        "code_str_deleted": "function remove_lowercase(str1) {\n//begin to write code\n",
        "javascript_prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code_str_generate": "function remove_lowercase(str1) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove lowercase substrings from a given string by using regex.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n//begin to write code\n"
    },
    {
        "Unnamed: 0": 485,
        "task_id": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code_str": "function heapQueueSmallest(nums, n) {\n    const sortedNums = nums.slice().sort((a, b) => a - b);\n    return sortedNums.slice(0, n);\n}\n\n",
        "test": "const testHeapQueueSmallest = () => {\n    console.assert(JSON.stringify(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)) === JSON.stringify([14, 22, 25]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)) === JSON.stringify([14, 22]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(heapQueueSmallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)) === JSON.stringify([14, 22, 22, 25, 35]), \"Test 3 Failed\");\n}\ntestHeapQueueSmallest()",
        "is_deleted": 1,
        "code_str_deleted": "function heapQueueSmallest(nums, n) {\n    const sortedNums = nums.slice().sort((a, b) => a - b);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code_str_generate": "function heapQueueSmallest(nums, n) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const sortedNums = nums.slice().sort((a, b) => a - b);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 486,
        "task_id": 497,
        "prompt": "Write a function to find the surface area of a cone.",
        "code_str": "function surfacearea_cone(r, h) {\n  const l = Math.sqrt(r * r + h * h);\n  const SA = Math.PI * r * (r + l);\n  return SA;\n}\n",
        "test": "const testsurfacearea_cone = () => {\n    console.assert(Math.abs(surfacearea_cone(5, 12) - 282.7433388230814) < 0.00001);\n    console.assert(Math.abs(surfacearea_cone(10, 15) - 880.5179353159282) < 0.00001);\n    console.assert(Math.abs(surfacearea_cone(19, 17) - 2655.923961165254) < 0.00001);\n  }\n  \ntestsurfacearea_cone(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function surfacearea_cone(r, h) {\n  const l = Math.sqrt(r * r + h * h);\n  //begin to write code\n",
        "javascript_prompt": "Write a function to find the surface area of a cone.",
        "code_str_generate": "function surfacearea_cone(r, h) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the surface area of a cone.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  const l = Math.sqrt(r * r + h * h);\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 487,
        "task_id": 498,
        "prompt": "Write a python function to find gcd of two positive integers.",
        "code_str": "function gcd(x, y) {\n    let gcd = 1;\n    if (x % y === 0) {\n        return y;\n    }\n    for (let k = Math.floor(y / 2); k > 0; k--) {\n        if (x % k === 0 && y % k === 0) {\n            gcd = k;\n            break;\n        }\n    }\n    return gcd;\n}\n\n",
        "test": "const testGcd = () => {\n    console.assert(gcd(12, 17) === 1, \"Test 1 Failed\");\n    console.assert(gcd(4,6) === 2, \"Test 2 Failed\");\n    console.assert(gcd(2,9) === 1, \"Test 3 Failed\");\n}\n\ntestGcd(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function gcd(x, y) {\n    let gcd = 1;\n    if (x % y === 0) {\n        return y;\n    }\n    for (let k = Math.floor(y / 2); k > 0; k--) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find gcd of two positive integers.",
        "code_str_generate": "function gcd(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find gcd of two positive integers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let gcd = 1;\n    if (x % y === 0) {\n        return y;\n    }\n    for (let k = Math.floor(y / 2); k > 0; k--) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 488,
        "task_id": 499,
        "prompt": "Write a function to find the diameter of a circle.",
        "code_str": "function diameter_circle(r) {\n    let diameter = 2 * r;\n    return diameter;\n}\n\n",
        "test": "const testdiameter_circle = () => {\n    console.assert(diameter_circle(10) === 20);\n    console.assert(diameter_circle(40) === 80);\n    console.assert(diameter_circle(15) === 30);\n}\n\ntestdiameter_circle() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function diameter_circle(r) {\n    let diameter = 2 * r;\n    //begin to write code\n",
        "javascript_prompt": "Write a function to find the diameter of a circle.",
        "code_str_generate": "function diameter_circle(r) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the diameter of a circle.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let diameter = 2 * r;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 489,
        "task_id": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.",
        "code_str": "function concatenateElements(list) {\n  let ans = ' ';\n  for (let i of list) {\n    ans = ans + ' ' + i;\n  }\n  return ans;\n}\n\n",
        "test": "const testConcatenateElements = () => {\n  console.assert(concatenateElements(['hello','there','have','a','rocky','day']) === '  hello there have a rocky day', \"Test 1 Failed\");\n  console.assert(concatenateElements(['Hi', 'there', 'How','are', 'you']) === '  Hi there How are you', \"Test 2 Failed\");\n  console.assert(concatenateElements(['Part', 'of', 'the','journey', 'is', 'end']) === '  Part of the journey is end', \"Test 3 Failed\");\n}\n\ntestConcatenateElements();",
        "is_deleted": 1,
        "code_str_deleted": "function concatenateElements(list) {\n  let ans = ' ';\n  for (let i of list) {\n  //begin to write code\n",
        "javascript_prompt": "Write a function to concatenate all elements of the given list into a string.",
        "code_str_generate": "function concatenateElements(list) {\n\n    /*\n    progame language:javascript\n    description:Write a function to concatenate all elements of the given list into a string.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n  let ans = ' ';\n  for (let i of list) {\n  //begin to write code\n"
    },
    {
        "Unnamed: 0": 490,
        "task_id": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
        "code_str": "function ngcd(x, y) {\n    let i = 1;\n    let gcd;\n    while (i <= x && i <= y) {\n        if (x % i === 0 && y % i === 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\n\nfunction num_comm_div(x, y) {\n    const n = ngcd(x, y);\n    let result = 0;\n    const z = Math.floor(Math.sqrt(n));\n    let i = 1;\n    while (i <= z) {\n        if (n % i === 0) {\n            result += 2;\n            if (i === n / i) {\n                result -= 1;\n            }\n        }\n        i += 1;\n    }\n    return result;\n}\n\n",
        "test": "const testNum_comm_div = () => {\n    console.assert(num_comm_div(2, 4) === 2, \"Test 1 failed\");\n    console.assert(num_comm_div(2, 8) === 2, \"Test 2 failed\");\n    console.assert(num_comm_div(12, 24) === 6, \"Test 3 failed\");\n}\n\ntestNum_comm_div(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function ngcd(x, y) {\n    let i = 1;\n    let gcd;\n    while (i <= x && i <= y) {\n        if (x % i === 0 && y % i === 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\nfunction num_comm_div(x, y) {\n    const n = ngcd(x, y);\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find common divisor between two numbers in a given pair.",
        "code_str_generate": "function ngcd(x, y) {\n    let i = 1;\n    let gcd;\n    while (i <= x && i <= y) {\n        if (x % i === 0 && y % i === 0) {\n            gcd = i;\n        }\n        i += 1;\n    }\n    return gcd;\n}\nfunction num_comm_div(x, y) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find common divisor between two numbers in a given pair.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const n = ngcd(x, y);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 491,
        "task_id": 502,
        "prompt": "Write a python function to find remainder of two numbers.",
        "code_str": "function find(n, m) {\n    let r = n % m;\n    return r;\n}\n\n",
        "test": "const testfind = () => {\n    console.assert(find(3, 3) === 0);\n    console.assert(find(10, 3) === 1);\n    console.assert(find(16, 5) === 1);\n};\n\ntestfind(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function find(n, m) {\n    let r = n % m;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find remainder of two numbers.",
        "code_str_generate": "function find(n, m) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find remainder of two numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let r = n % m;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 492,
        "task_id": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.",
        "code_str": "function add_consecutive_nums(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    return result;\n}\n\n",
        "test": "const testAdd_consecutive_nums = () => {\n    console.assert(JSON.stringify(add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])) === JSON.stringify([2, 4, 7, 8, 9, 11, 13]), \"Test 1 failed\");\n    console.assert(JSON.stringify(add_consecutive_nums([4, 5, 8, 9, 6, 10])) === JSON.stringify([9, 13, 17, 15, 16]), \"Test 2 failed\");\n    console.assert(JSON.stringify(add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) === JSON.stringify([3, 5, 7, 9, 11, 13, 15, 17, 19]), \"Test 3 failed\");\n}\ntestAdd_consecutive_nums(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function add_consecutive_nums(nums) {\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    //begin to write code\n",
        "javascript_prompt": "Write a function to add consecutive numbers of a given list.",
        "code_str_generate": "function add_consecutive_nums(nums) {\n\n    /*\n    progame language:javascript\n    description:Write a function to add consecutive numbers of a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let result = nums.slice(0, nums.length - 1).map((a, i) => a + nums[i + 1]);\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 493,
        "task_id": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.",
        "code_str": "function sum_Of_Series(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i * i * i;\n    }\n    return sum;\n}\n\n",
        "test": "const testSum_Of_Series = () => {\n    console.assert(sum_Of_Series(5) === 225, \"Test 1 failed\");\n    console.assert(sum_Of_Series(2) === 9, \"Test 2 failed\");\n    console.assert(sum_Of_Series(3) === 36, \"Test 3 failed\");\n}\ntestSum_Of_Series(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sum_Of_Series(n) {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the cube sum of first n natural numbers.",
        "code_str_generate": "function sum_Of_Series(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the cube sum of first n natural numbers.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 494,
        "task_id": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.",
        "code_str": "function re_order(A) {\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n        }\n    }\n    for (let i = k; i < A.length; i++) {\n        A[i] = 0;\n    }\n    return A;\n}\n\n",
        "test": "const testRe_order = () => {\n    console.assert(JSON.stringify(re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])) === JSON.stringify([6, 8, 2, 3, 4, 1, 0, 0, 0]), \"Test 1 Failed\");\n    console.assert(JSON.stringify(re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])) === JSON.stringify([4, 2, 7, 9, 12, 0, 0, 0, 0]), \"Test 2 Failed\");\n    console.assert(JSON.stringify(re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])) === JSON.stringify([3, 11, 74, 14, 1, 2, 0, 0, 0]), \"Test 3 Failed\");\n}\ntestRe_order(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function re_order(A) {\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n            //begin to write code\n",
        "javascript_prompt": "Write a function to move all zeroes to the end of the given array.",
        "code_str_generate": "function re_order(A) {\n\n    /*\n    progame language:javascript\n    description:Write a function to move all zeroes to the end of the given array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let k = 0;\n    for (let i of A) {\n        if (i) {\n            A[k] = i;\n            k = k + 1;\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 495,
        "task_id": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code_str": "function permutationCoefficient(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n            }\n            if (j < k) {\n                P[i][j + 1] = 0;\n            }\n        }\n    }\n    return P[n][k];\n}\n\n",
        "test": "const testPermutationCoefficient = () => {\n    console.assert(permutationCoefficient(10, 2) === 90);\n    console.assert(permutationCoefficient(10, 3) === 720);\n    console.assert(permutationCoefficient(10, 1) === 10);\n}\ntestPermutationCoefficient();",
        "is_deleted": 1,
        "code_str_deleted": "function permutationCoefficient(n, k) {\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                //begin to write code\n",
        "javascript_prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code_str_generate": "function permutationCoefficient(n, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to calculate the permutation coefficient of given p(n, k).\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    let P = Array.from({ length: n + 1 }, () => Array(k + 1).fill(0));\n    for (let i = 0; i <= n; i++) {\n        for (let j = 0; j <= Math.min(i, k); j++) {\n            if (j === 0) {\n                P[i][j] = 1;\n            } else {\n                P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                //begin to write code\n"
    },
    {
        "Unnamed: 0": 496,
        "task_id": 507,
        "prompt": "Write a function to remove specific words from a given list.",
        "code_str": "function remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            i--;  // adjust index after removal\n        }\n    }\n    return list1;\n}\n\n",
        "test": "const testremove_words = () => {\n    console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])) === JSON.stringify(['red', 'green', 'blue', 'black']), \"Test 1 Failed\");\n    console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])) === JSON.stringify(['red', 'green', 'blue', 'white']), \"Test 2 Failed\");\n    console.assert(JSON.stringify(remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])) === JSON.stringify(['red', 'green', 'black', 'orange']), \"Test 3 Failed\");\n}\ntestremove_words() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function remove_words(list1, removewords) {\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n",
        "javascript_prompt": "Write a function to remove specific words from a given list.",
        "code_str_generate": "function remove_words(list1, removewords) {\n\n    /*\n    progame language:javascript\n    description:Write a function to remove specific words from a given list.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    for (let i = 0; i < list1.length; i++) {\n        if (removewords.includes(list1[i])) {\n            list1.splice(i, 1);\n            //begin to write code\n"
    },
    {
        "Unnamed: 0": 497,
        "task_id": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code_str": "function sameOrder(l1, l2) {\n    const commonElements = new Set(l1.filter(e => l2.includes(e)));\n    l1 = l1.filter(e => commonElements.has(e));\n    l2 = l2.filter(e => commonElements.has(e));\n    return JSON.stringify(l1) === JSON.stringify(l2);\n}\n\n",
        "test": "const testSameOrder = () => {\n    console.assert(sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"]) === true);\n    console.assert(sameOrder([\"red\", \"pink\", \"green\", \"white\", \"black\"], [\"white\", \"orange\", \"pink\", \"black\"]) === false);\n    console.assert(sameOrder([\"red\", \"green\", \"black\", \"orange\"], [\"red\", \"pink\", \"green\", \"white\", \"black\"]) === true);\n}\n\ntestSameOrder(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function sameOrder(l1, l2) {\n    const commonElements = new Set(l1.filter(e => l2.includes(e)));\n    l1 = l1.filter(e => commonElements.has(e));\n    //begin to write code\n",
        "javascript_prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code_str_generate": "function sameOrder(l1, l2) {\n\n    /*\n    progame language:javascript\n    description:Write a function to check if the common elements between two given lists are in the same order or not.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const commonElements = new Set(l1.filter(e => l2.includes(e)));\n    l1 = l1.filter(e => commonElements.has(e));\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 498,
        "task_id": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.",
        "code_str": "function average_Odd(n) {\n    if (n % 2 === 0) {\n        return \"Invalid Input\";\n    }\n    let sm = 0;\n    let count = 0;\n    while (n >= 1) {\n        count += 1;\n        sm += n;\n        n -= 2;\n    }\n    return Math.floor(sm / count);\n}\n\n",
        "test": "const testAverage_Odd = () => {\n    console.assert(average_Odd(9) === 5, \"Test failed for input 9\");\n    console.assert(average_Odd(5) === 3, \"Test failed for input 5\");\n    console.assert(average_Odd(11) === 6, \"Test failed for input 11\");\n}\n\ntestAverage_Odd(); // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function average_Odd(n) {\n    if (n % 2 === 0) {\n        return \"Invalid Input\";\n    }\n    let sm = 0;\n    let count = 0;\n    //begin to write code\n",
        "javascript_prompt": "Write a javascript function to find the average of odd numbers till a given odd number.",
        "code_str_generate": "function average_Odd(n) {\n\n    /*\n    progame language:javascript\n    description:Write a javascript function to find the average of odd numbers till a given odd number.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    if (n % 2 === 0) {\n        return \"Invalid Input\";\n    }\n    let sm = 0;\n    let count = 0;\n    //begin to write code\n"
    },
    {
        "Unnamed: 0": 499,
        "task_id": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code_str": "function no_of_subsequences(arr, k) {\n    const n = arr.length;\n    const dp = Array.from({ length: k + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 1; i <= k; i++) {\n        for (let j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n            if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                dp[i][j] += dp[Math.floor(i / arr[j - 1])][j - 1] + 1;\n            }\n        }\n    }\n    return dp[k][n];\n}\n\n",
        "test": "const testno_of_subsequences = () => {\n    console.assert(no_of_subsequences([1,2,3,4], 10) === 11);\n    console.assert(no_of_subsequences([4,8,7,2], 50) === 9);\n    console.assert(no_of_subsequences([5,6,7,8], 15) === 4);\n}\ntestno_of_subsequences() // invoke test",
        "is_deleted": 1,
        "code_str_deleted": "function no_of_subsequences(arr, k) {\n    const n = arr.length;\n    const dp = Array.from({ length: k + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 1; i <= k; i++) {\n        for (let j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n            //begin to write code\n",
        "javascript_prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code_str_generate": "function no_of_subsequences(arr, k) {\n\n    /*\n    progame language:javascript\n    description:Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n    you must follow:\n    1. Provide the complete code without any textual explanations and do not generate test scripts.\n    2. Please strictly follow the specified format provided below for the code.\n    3. Do not change the function names.\n    4. The original code content must be fully included in the generated complete code, including all package import sections.\n    5. For C++ language, do not generate the main function; I have my own main function available.\n    6. Do not generate test cases.\n    */\n\n    const n = arr.length;\n    const dp = Array.from({ length: k + 1 }, () => Array(n + 1).fill(0));\n    for (let i = 1; i <= k; i++) {\n        for (let j = 1; j <= n; j++) {\n            dp[i][j] = dp[i][j - 1];\n            //begin to write code\n"
    }
]