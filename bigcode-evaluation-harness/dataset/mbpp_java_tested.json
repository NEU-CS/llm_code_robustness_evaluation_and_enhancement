[
    {
        "task_id": 11,
        "code_str": "class Solution {\n    public String remove_Occ(String s, char ch) {\n        int firstIndex = s.indexOf(ch);\n        if (firstIndex != -1) {\n            s = s.substring(0, firstIndex) + s.substring(firstIndex + 1);\n        }\n        int lastIndex = s.lastIndexOf(ch);\n        if (lastIndex != -1) {\n            s = s.substring(0, lastIndex) + s.substring(lastIndex + 1);\n        }\n        return s;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove_Occ(\"hello\", 'l').equals(\"heo\");\n        assert solution.remove_Occ(\"abcda\", 'a').equals(\"bcd\");\n        assert solution.remove_Occ(\"PHP\", 'P').equals(\"H\");\n    }\n}\n",
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String remove_Occ(String s, char ch) {\n        int firstIndex = s.indexOf(ch);\n        if (firstIndex != -1) {\n            s = s.substring(0, firstIndex) + s.substring(firstIndex + 1);\n        }\n        int lastIndex = s.lastIndexOf(ch);\n        //begin to write code\n",
        "java_prompt": "Write a java function to remove first and last occurrence of a given character from the string.",
        "code_str_generate": "class Solution {\n    public String remove_Occ(String s, char ch) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove first and last occurrence of a given character from the string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int firstIndex = s.indexOf(ch);\n        if (firstIndex != -1) {\n            s = s.substring(0, firstIndex) + s.substring(firstIndex + 1);\n        }\n        int lastIndex = s.lastIndexOf(ch);\n        //begin to write code\n"
    },
    {
        "task_id": 12,
        "code_str": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n\n    private int sum(int[] a) {\n        int sum = 0;\n        for (int i : a) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        int[][] test1 = {{1, 2, 3}, {2, 4, 5}, {1, 1, 1}};\n        int[][] result1 = {{1, 1, 1}, {1, 2, 3}, {2, 4, 5}};\n        assert Arrays.deepEquals(solution.sortMatrix(test1), result1);\n\n        int[][] test2 = {{1, 2, 3}, {-2, 4, -5}, {1, -1, 1}};\n        int[][] result2 = {{-2, 4, -5}, {1, -1, 1}, {1, 2, 3}};\n        assert Arrays.deepEquals(solution.sortMatrix(test2), result2);\n\n        int[][] test3 = {{5,8,9},{6,4,3},{2,1,4}};\n        int[][] result3 = {{2, 1, 4}, {6, 4, 3}, {5, 8, 9}};\n        assert Arrays.deepEquals(solution.sortMatrix(test3), result3);\n    }\n}\n",
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n",
        "java_prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
        "code_str_generate": "class Solution {\n    public int[][] sortMatrix(int[][] M) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given matrix in ascending order according to the sum of its rows.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(M, new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return sum(a) - sum(b);\n            }\n        });\n        return M;\n    }\n    //begin to write code\n"
    },
    {
        "task_id": 13,
        "code_str": "class Solution {\n    public static List<Map.Entry<String, Integer>> countCommon(String[] words) {\n        Map<String, Integer> wordCounts = new HashMap<>();\n        for (String word : words) {\n            wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);\n        }\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(wordCounts.entrySet());\n        list.sort((o1, o2) -> o2.getValue().compareTo(o1.getValue()));\n        return list.subList(0, Math.min(4, list.size()));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Map.Entry<String, Integer>> entryList1 = new ArrayList<>();\n        List<Map.Entry<String, Integer>> entryList2 = new ArrayList<>();\n        List<Map.Entry<String, Integer>> entryList3 = new ArrayList<>();\n        // \u521b\u5efaMap.Entry<String, Integer>\u5bf9\u8c61\u5e76\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n        entryList1.add(new AbstractMap.SimpleEntry<>(\"pink\", 6));\n        entryList1.add(new AbstractMap.SimpleEntry<>(\"white\", 5));\n        entryList1.add(new AbstractMap.SimpleEntry<>(\"black\", 5));\n        entryList1.add(new AbstractMap.SimpleEntry<>(\"red\", 4));      \n        \n        entryList2.add(new AbstractMap.SimpleEntry<>(\"one\", 4));\n        entryList2.add(new AbstractMap.SimpleEntry<>(\"two\", 2));\n        entryList2.add(new AbstractMap.SimpleEntry<>(\"three\", 2));\n        entryList2.add(new AbstractMap.SimpleEntry<>(\"four\", 1));\n        \n        entryList3.add(new AbstractMap.SimpleEntry<>(\"Netflix\", 2));\n        entryList3.add(new AbstractMap.SimpleEntry<>(\"Apple\", 2));\n        entryList3.add(new AbstractMap.SimpleEntry<>(\"Amazon\", 2));\n        entryList3.add(new AbstractMap.SimpleEntry<>(\"Google\", 1));\n        \n        assert solution.countCommon(new String[]{\"red\",\"green\",\"black\",\"pink\",\"black\",\"white\",\"black\",\"eyes\",\"white\",\"black\",\"orange\",\"pink\",\"pink\",\"red\",\"red\",\"white\",\"orange\",\"white\",\"black\",\"pink\",\"green\",\"green\",\"pink\",\"green\",\"pink\",\"white\",\"orange\",\"orange\",\"red\"}).equals(entryList1);\n        assert solution.countCommon(new String[]{\"one\", \"two\", \"three\", \"four\", \"five\", \"one\", \"two\", \"one\", \"three\", \"one\"}).equals(entryList2);\n        assert solution.countCommon(new String[]{\"Facebook\", \"Apple\", \"Amazon\", \"Netflix\", \"Google\", \"Apple\", \"Netflix\", \"Amazon\"}).equals(entryList3);\n    }\n    public static boolean deepEquals(List<String[]> list1, List<String[]> list2) {\n        if (list1.size() != list2.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (!Arrays.deepEquals(list1.get(i), list2.get(i))) {\n                return false;\n            }\n        }\n\n        return true;\n}\n}",
        "prompt": "Write a function to count the most common words in a dictionary.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Map.Entry<String, Integer>> countCommon(String[] words) {\n        Map<String, Integer> wordCounts = new HashMap<>();\n        for (String word : words) {\n            wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to count the most common words in a dictionary.",
        "code_str_generate": "class Solution {\n    public static List<Map.Entry<String, Integer>> countCommon(String[] words) {\n\n        /*\n        progame language:java\n        description:Write a function to count the most common words in a dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> wordCounts = new HashMap<>();\n        for (String word : words) {\n            wordCounts.put(word, wordCounts.getOrDefault(word, 0) + 1);\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 14,
        "code_str": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n        return ((l * b * h) / 2);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_Volume(10,8,6) == 240;\n        assert Solution.find_Volume(3,2,2) == 6;\n        assert Solution.find_Volume(1,2,1) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find the volume of a triangular prism.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n        return ((l * b * h) / 2);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the volume of a triangular prism.",
        "code_str_generate": "class Solution {\n    public static double find_Volume(double l, double b, double h) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the volume of a triangular prism.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return ((l * b * h) / 2);\n        //begin to write code\n"
    },
    {
        "task_id": 15,
        "code_str": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            result.add(matcher.group());\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.splitLowerString(\"AbCd\").equals(new ArrayList<String>() {{\n            add(\"bC\");\n            add(\"d\");\n        }});\n        assert Solution.splitLowerString(\"Python\").equals(new ArrayList<String>() {{\n            add(\"y\");\n            add(\"t\");\n            add(\"h\");\n            add(\"o\");\n            add(\"n\");\n        }});\n        assert Solution.splitLowerString(\"Programming\").equals(new ArrayList<String>() {{\n            add(\"r\");\n            add(\"o\");\n            add(\"g\");\n            add(\"r\");\n            add(\"a\");\n            add(\"m\");\n            add(\"m\");\n            add(\"i\");\n            add(\"n\");\n            add(\"g\");\n        }});\n    }\n}\n",
        "prompt": "Write a function to split a string at lowercase letters.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to split a string at lowercase letters.",
        "code_str_generate": "class Solution {\n    public static ArrayList<String> splitLowerString(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to split a string at lowercase letters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[a-z][^a-z]*\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 16,
        "code_str": "class Solution {\n    public String text_lowercase_underscore(String text) {\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.text_lowercase_underscore(\"aab_cbbbc\").equals(\"Found a match!\");\n        assert solution.text_lowercase_underscore(\"aab_Abbbc\").equals(\"Not matched!\");\n        assert solution.text_lowercase_underscore(\"Aaab_abbbc\").equals(\"Not matched!\");\n    }\n}\n",
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String text_lowercase_underscore(String text) {\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find sequences of lowercase letters joined with an underscore.",
        "code_str_generate": "class Solution {\n    public String text_lowercase_underscore(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find sequences of lowercase letters joined with an underscore.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 17,
        "code_str": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        return perimeter;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.squarePerimeter(10) == 40;\n        assert Solution.squarePerimeter(5) == 20;\n        assert Solution.squarePerimeter(4) == 16;\n    }\n}\n",
        "prompt": "Write a function to find the perimeter of a square.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int squarePerimeter(int a) {\n        int perimeter = 4 * a;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the perimeter of a square.",
        "code_str_generate": "class Solution {\n    public static int squarePerimeter(int a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = 4 * a;\n        //begin to write code\n"
    },
    {
        "task_id": 18,
        "code_str": "class Solution {\n    static final int NO_OF_CHARS = 256;\n\n    static char[] str_to_list(String string) {\n        char[] temp = new char[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            temp[i] = string.charAt(i);\n        }\n        return temp;\n    }\n\n    static String lst_to_string(char[] list) {\n        return new String(list);\n    }\n\n    static int[] get_char_count_array(String string) {\n        int count[] = new int[NO_OF_CHARS];\n        Arrays.fill(count, 0);\n        for (int i = 0; i < string.length(); i++) {\n            count[(int) string.charAt(i)]++;\n        }\n        return count;\n    }\n\n    public static String remove_dirty_chars(String string, String second_string) {\n        int count[] = get_char_count_array(second_string);\n        int ip_ind = 0, res_ind = 0;\n        char temp;\n        char[] str_list = str_to_list(string);\n\n        while (ip_ind != str_list.length) {\n            temp = str_list[ip_ind];\n            if (count[(int) temp] == 0) {\n                str_list[res_ind] = str_list[ip_ind];\n                res_ind++;\n            }\n            ip_ind++;\n        }\n\n        return lst_to_string(Arrays.copyOfRange(str_list, 0, res_ind));\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.remove_dirty_chars(\"probasscurve\", \"pros\").equals(\"bacuve\");\n        assert Solution.remove_dirty_chars(\"digitalindia\", \"talent\").equals(\"digiidi\");\n        assert Solution.remove_dirty_chars(\"exoticmiles\", \"toxic\").equals(\"emles\");\n    }\n}\n",
        "prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    static final int NO_OF_CHARS = 256;\n    static char[] str_to_list(String string) {\n        char[] temp = new char[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            temp[i] = string.charAt(i);\n        }\n        return temp;\n    }\n    static String lst_to_string(char[] list) {\n        return new String(list);\n    }\n    static int[] get_char_count_array(String string) {\n        int count[] = new int[NO_OF_CHARS];\n        Arrays.fill(count, 0);\n        for (int i = 0; i < string.length(); i++) {\n            count[(int) string.charAt(i)]++;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to remove characters from the first string which are present in the second string.",
        "code_str_generate": "class Solution {\n    static final int NO_OF_CHARS = 256;\n    static char[] str_to_list(String string) {\n        char[] temp = new char[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            temp[i] = string.charAt(i);\n        }\n        return temp;\n    }\n    static String lst_to_string(char[] list) {\n        return new String(list);\n    }\n    static int[] get_char_count_array(String string) {\n        int count[] = new int[NO_OF_CHARS];\n        Arrays.fill(count, 0);\n        for (int i = 0; i < string.length(); i++) {\n            count[(int) string.charAt(i)]++;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 19,
        "code_str": "class Solution {\n    public boolean testDuplicate(int[] arraynums) {\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n        }\n        return arraynums.length != numsSet.size();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.testDuplicate(new int[]{1,2,3,4,5});\n        assert solution.testDuplicate(new int[]{1,2,3,4,4});\n        assert solution.testDuplicate(new int[]{1,1,2,2,3,3,4,4,5});\n    }\n}\n",
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean testDuplicate(int[] arraynums) {\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n            //begin to write code\n",
        "java_prompt": "Write a function to find whether a given array of integers contains any duplicate element.",
        "code_str_generate": "class Solution {\n    public boolean testDuplicate(int[] arraynums) {\n\n        /*\n        progame language:java\n        description:Write a function to find whether a given array of integers contains any duplicate element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> numsSet = new HashSet<>();\n        for (int num : arraynums) {\n            numsSet.add(num);\n            //begin to write code\n"
    },
    {
        "task_id": 20,
        "code_str": "class Solution {\n    public static boolean isWoodall(int x) {\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        while (x % 2 == 0) {\n            x = x / 2;\n            p = p + 1;\n            if (p == x) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isWoodall(383) == true;\n        assert Solution.isWoodall(254) == false;\n        assert Solution.isWoodall(200) == false;\n    }\n}\n",
        "prompt": "Write a function to check if the given number is woodball or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isWoodall(int x) {\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        //begin to write code\n",
        "java_prompt": "Write a function to check if the given number is woodball or not.",
        "code_str_generate": "class Solution {\n    public static boolean isWoodall(int x) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the given number is woodball or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x % 2 == 0) {\n            return false;\n        }\n        if (x == 1) {\n            return true;\n        }\n        x = x + 1;\n        int p = 0;\n        //begin to write code\n"
    },
    {
        "task_id": 21,
        "code_str": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n        }\n        return multiples_of_num;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> result1 = solution.multiples_of_num(4,3);\n        assert result1.equals(Arrays.asList(3,6,9,12)) : \"Test case 1 failed\";\n\n        List<Integer> result2 = solution.multiples_of_num(2,5);\n        assert result2.equals(Arrays.asList(5,10)) : \"Test case 2 failed\";\n\n        List<Integer> result3 = solution.multiples_of_num(9,2);\n        assert result3.equals(Arrays.asList(2,4,6,8,10,12,14,16,18)) : \"Test case 3 failed\";\n\n        System.out.println(\"All test cases passed\");\n    }\n}\n",
        "prompt": "Write a function to find m number of multiples of n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n",
        "java_prompt": "Write a function to find m number of multiples of n.",
        "code_str_generate": "class Solution {\n    public List<Integer> multiples_of_num(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find m number of multiples of n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> multiples_of_num = new ArrayList<>();\n        for (int i = n; i <= m * n; i += n) {\n            multiples_of_num.add(i);\n            //begin to write code\n"
    },
    {
        "task_id": 22,
        "code_str": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n            } else {\n                numSet.add(nums[i]);\n            }\n        }\n\n        return noDuplicate;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        assert solution.findFirstDuplicate(new int[]{1, 2, 3, 4, 4, 5}) == 4;\n        assert solution.findFirstDuplicate(new int[]{1, 2, 3, 4}) == -1;\n        assert solution.findFirstDuplicate(new int[]{1, 1, 2, 3, 3, 2, 2}) == 1;\n    }\n}\n",
        "prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n                //begin to write code\n",
        "java_prompt": "Write a function to find the first duplicate element in a given array of integers.",
        "code_str_generate": "class Solution {\n    public int findFirstDuplicate(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the first duplicate element in a given array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<Integer> numSet = new HashSet<>();\n        int noDuplicate = -1;\n        for (int i = 0; i < nums.length; i++) {\n            if (numSet.contains(nums[i])) {\n                return nums[i];\n                //begin to write code\n"
    },
    {
        "task_id": 23,
        "code_str": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n            }\n            maxi = Math.max(sum, maxi);\n        }\n        return maxi;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maximum_Sum(new int[][]{{1,2,3},{4,5,6},{10,11,12},{7,8,9}}) == 33;\n        assert solution.maximum_Sum(new int[][]{{0,1,1},{1,1,2},{3,2,1}}) == 6;\n        assert solution.maximum_Sum(new int[][]{{0,1,3},{1,2,1},{9,8,2},{0,1,0},{6,4,8}}) == 19;\n    }\n}\n",
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum sum of elements of list in a list of lists.",
        "code_str_generate": "class Solution {\n    public int maximum_Sum(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum sum of elements of list in a list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxi = -100000;\n        for (int[] x : list1) {\n            int sum = 0;\n            for (int y : x) {\n                sum += y;\n                //begin to write code\n"
    },
    {
        "task_id": 24,
        "code_str": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            decimal = decimal + dec * (int)Math.pow(2, i);\n            binary = binary / 10;\n            i++;\n        }\n        return decimal;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.binaryToDecimal(100) == 4;\n        assert Solution.binaryToDecimal(1011) == 11;\n        assert Solution.binaryToDecimal(1101101) == 109;\n    }\n}\n",
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int binaryToDecimal(int binary) {\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n",
        "java_prompt": "Write a function to convert the given binary number to its decimal equivalent.",
        "code_str_generate": "class Solution {\n    public static int binaryToDecimal(int binary) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given binary number to its decimal equivalent.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int binary1 = binary;\n        int decimal = 0;\n        int i = 0;\n        int n = 0;\n        while(binary != 0) {\n            int dec = binary % 10;\n            //begin to write code\n"
    },
    {
        "task_id": 25,
        "code_str": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n                prod = prod * arr[i];\n            }\n        }\n        return prod;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_Product(new int[]{1,1,2,3},4) == 6;\n        assert Solution.find_Product(new int[]{1,2,3,1,1},5) == 6;\n        assert Solution.find_Product(new int[]{1,1,4,5,6},5) == 120;\n    }\n}\n",
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_Product(int arr[], int n) {\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the product of non-repeated elements in a given array.",
        "code_str_generate": "class Solution {\n    public static int find_Product(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the product of non-repeated elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(arr);\n        int prod = 1;\n        for (int i = 0; i < n; i++) {\n            if (i == 0 || arr[i - 1] != arr[i]) {\n            //begin to write code\n"
    },
    {
        "task_id": 26,
        "code_str": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                }\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkKElements(new int[][]{{4, 4}, {4, 4, 4}, {4, 4}, {4, 4, 4, 4}, {4}}, 4) == true;\n        assert Solution.checkKElements(new int[][]{{7, 7, 7}, {7, 7}}, 7) == true;\n        assert Solution.checkKElements(new int[][]{{9, 9}, {9, 9, 9, 9}}, 7) == false;\n    }\n}\n",
        "prompt": "Write a function to check if the given tuple list has all k elements.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n",
        "java_prompt": "Write a function to check if the given tuple list has all k elements.",
        "code_str_generate": "class Solution {\n    public static boolean checkKElements(int[][] testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the given tuple list has all k elements.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        for (int[] tup : testList) {\n            for (int ele : tup) {\n                if (ele != K) {\n                    res = false;\n                    //begin to write code\n"
    },
    {
        "task_id": 27,
        "code_str": "class Solution {\n    public static List<String> remove(List<String> list) {\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(s.replaceAll(\"\\\\d\", \"\"));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove(Arrays.asList(\"4words\", \"3letters\", \"4digits\")).equals(Arrays.asList(\"words\", \"letters\", \"digits\"));\n        assert solution.remove(Arrays.asList(\"28Jan\",\"12Jan\",\"11Jan\")).equals(Arrays.asList(\"Jan\",\"Jan\",\"Jan\"));\n        assert solution.remove(Arrays.asList(\"wonder1\",\"wonder2\",\"wonder3\")).equals(Arrays.asList(\"wonder\",\"wonder\",\"wonder\"));\n    }\n}\n",
        "prompt": "Write a python function to remove all digits from a list of strings.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> remove(List<String> list) {\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(s.replaceAll(\"\\\\d\", \"\"));\n            //begin to write code\n",
        "java_prompt": "Write a java function to remove all digits from a list of strings.",
        "code_str_generate": "class Solution {\n    public static List<String> remove(List<String> list) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove all digits from a list of strings.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String s : list) {\n            result.add(s.replaceAll(\"\\\\d\", \"\"));\n            //begin to write code\n"
    },
    {
        "task_id": 28,
        "code_str": "class Solution {\n    public static int binomialCoeff(int n, int k) {\n        if (k > n) {\n            return 0;\n        }\n        if (k == 0 || k == n) {\n            return 1;\n        }\n        return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k);\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.binomialCoeff(5, 2) == 10;\n        assert Solution.binomialCoeff(4, 3) == 4;\n        assert Solution.binomialCoeff(3, 2) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find binomial co-efficient.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int binomialCoeff(int n, int k) {\n        if (k > n) {\n            return 0;\n        }\n        if (k == 0 || k == n) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find binomial co-efficient.",
        "code_str_generate": "class Solution {\n    public static int binomialCoeff(int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find binomial co-efficient.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (k > n) {\n            return 0;\n        }\n        if (k == 0 || k == n) {\n        //begin to write code\n"
    },
    {
        "task_id": 29,
        "code_str": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n            }\n            if (count % 2 != 0) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.getOddOccurrence(new int[]{1,2,3,1,2,3,1},7) == 1;\n        assert Solution.getOddOccurrence(new int[]{1,2,3,2,3,1,3},7) == 3;\n        assert Solution.getOddOccurrence(new int[]{2,3,5,4,5,2,4,3,5,2,4,4,2},13) == 5;\n    }\n}\n",
        "prompt": "Write a python function to find the element occurring odd number of times.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the element occurring odd number of times.",
        "code_str_generate": "class Solution {\n    public static int getOddOccurrence(int arr[], int arr_size) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element occurring odd number of times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < arr_size; i++) {\n            int count = 0;\n            for (int j = 0; j < arr_size; j++) {\n                if (arr[i] == arr[j]) {\n                    count++;\n                }\n                //begin to write code\n"
    },
    {
        "task_id": 30,
        "code_str": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                if (checkEquality(s.substring(i, i + j))) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countSubstringWithEqualEnds(\"abc\") == 3;\n        assert Solution.countSubstringWithEqualEnds(\"abcda\") == 6;\n        assert Solution.countSubstringWithEqualEnds(\"ab\") == 2;\n    }\n}\n",
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to count all the substrings starting and ending with same characters.",
        "code_str_generate": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to count all the substrings starting and ending with same characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n"
    },
    {
        "task_id": 31,
        "code_str": "\nclass Solution {\n    public List<Integer> topKFrequentNumbers(int[][] nums, int k) {\n        // \u4f7f\u7528 HashMap \u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int[] row : nums) {\n            for (int num : row) {\n                frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n            }\n        }\n\n        // \u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u6700\u5c0f\u5806\uff09\u6765\u7ef4\u62a4\u9891\u7387\u6700\u9ad8\u7684 k \u4e2a\u5143\u7d20\n        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(k, Comparator.comparingInt(Map.Entry::getValue));\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (minHeap.size() < k) {\n                minHeap.offer(entry);\n            } else if (entry.getValue() > minHeap.peek().getValue()) {\n                minHeap.poll();\n                minHeap.offer(entry);\n            }\n        }\n\n        // \u4ece\u5806\u4e2d\u5f39\u51fa\u9891\u7387\u6700\u9ad8\u7684 k \u4e2a\u5143\u7d20\n        List<Integer> result = new ArrayList<>();\n        while (!minHeap.isEmpty()) {\n            result.add(minHeap.poll().getKey());\n        }\n\n        // \u7ed3\u679c\u662f\u65e0\u5e8f\u7684\uff0c\u5982\u679c\u9700\u8981\u6309\u9891\u7387\u4ece\u4f4e\u5230\u9ad8\u6392\u5e8f\uff0c\u53ef\u4ee5\u5bf9\u7ed3\u679c\u8fdb\u884c\u6392\u5e8f\n        return result;\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        // \u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4 `nums` \u548c `k` \u7684\u503c\n        int[][] nums = {\n            {1, 2, 6},\n            {1, 3, 4, 5, 7, 8},\n            {1, 3, 5, 6, 8, 9},\n            {2, 5, 7, 11},\n            {1, 4, 7, 8, 12}\n        };\n\n        int k1 = 3;\n        int k2 = 1;\n        int k3 = 4;\n\n        // \u8c03\u7528Solution\u7c7b\u4e2d\u7684\u65b9\u6cd5\u5f97\u5230\u524d k \u4e2a\u9ad8\u9891\u5143\u7d20\n        Solution solution = new Solution();\n        List<Integer> topKFrequent1 = solution.topKFrequentNumbers(nums, k1);\n        List<Integer> topKFrequent2 = solution.topKFrequentNumbers(nums, k2);\n        List<Integer> topKFrequent3 = solution.topKFrequentNumbers(nums, k3);\n        List<Integer> res1 = new ArrayList<>();\n        List<Integer> res2 = new ArrayList<>();\n        List<Integer> res3 = new ArrayList<>();\n        res1.add(5);\n        res1.add(7);\n        res1.add(1);\n        \n        res2.add(1);\n        \n\n        res3.add(7);\n        res3.add(8);\n        res3.add(5);\n        res3.add(1);\n\n        assert (res1.equals(topKFrequent1));\n        assert (res2.equals(topKFrequent2));\n        assert (res3.equals(topKFrequent3));\n        \n// \u8f93\u51fa\u9891\u7387\u6700\u9ad8\u7684 k \u4e2a\u6570\u5b57\n    }\n}",
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> topKFrequentNumbers(int[][] nums, int k) {\n        // \u4f7f\u7528 HashMap \u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int[] row : nums) {\n            for (int num : row) {\n                frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n            }\n        }\n        // \u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u6700\u5c0f\u5806\uff09\u6765\u7ef4\u62a4\u9891\u7387\u6700\u9ad8\u7684 k \u4e2a\u5143\u7d20\n        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(k, Comparator.comparingInt(Map.Entry::getValue));\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (minHeap.size() < k) {\n                minHeap.offer(entry);\n                //begin to write code\n",
        "java_prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
        "code_str_generate": "class Solution {\n    public List<Integer> topKFrequentNumbers(int[][] nums, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        // \u4f7f\u7528 HashMap \u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u5b57\u7684\u9891\u7387\n        Map<Integer, Integer> frequencyMap = new HashMap<>();\n        for (int[] row : nums) {\n            for (int num : row) {\n                frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);\n            }\n        }\n        // \u4f7f\u7528\u4f18\u5148\u961f\u5217\uff08\u6700\u5c0f\u5806\uff09\u6765\u7ef4\u62a4\u9891\u7387\u6700\u9ad8\u7684 k \u4e2a\u5143\u7d20\n        PriorityQueue<Map.Entry<Integer, Integer>> minHeap = new PriorityQueue<>(k, Comparator.comparingInt(Map.Entry::getValue));\n        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {\n            if (minHeap.size() < k) {\n                minHeap.offer(entry);\n                //begin to write code\n"
    },
    {
        "task_id": 32,
        "code_str": "class Solution {\n    public static int maxPrimeFactors(int n) {\n        int maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                n /= i;\n            }\n        }\n        if (n > 2) {\n            maxPrime = n;\n        }\n        return maxPrime;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.maxPrimeFactors(15) == 5;\n        assert Solution.maxPrimeFactors(6) == 3;\n        assert Solution.maxPrimeFactors(2) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the largest prime factor of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxPrimeFactors(int n) {\n        int maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the largest prime factor of a given number.",
        "code_str_generate": "class Solution {\n    public static int maxPrimeFactors(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest prime factor of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxPrime = -1;\n        while (n % 2 == 0) {\n            maxPrime = 2;\n            n >>= 1;\n        }\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            while (n % i == 0) {\n                maxPrime = i;\n                //begin to write code\n"
    },
    {
        "task_id": 33,
        "code_str": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            B_Number += rem * c;\n            N /= 2;\n            cnt += 1;\n        }\n        return B_Number;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.decimal_To_Binary(10) == 1010;\n        assert Solution.decimal_To_Binary(1) == 1;\n        assert Solution.decimal_To_Binary(20) == 10100;\n    }\n}\n",
        "prompt": "Write a python function to convert a decimal number to binary number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int decimal_To_Binary(int N) {\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n",
        "java_prompt": "Write a java function to convert a decimal number to binary number.",
        "code_str_generate": "class Solution {\n    public static int decimal_To_Binary(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert a decimal number to binary number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int B_Number = 0;\n        int cnt = 0;\n        while (N != 0) {\n            int rem = N % 2;\n            int c = (int) Math.pow(10, cnt);\n            //begin to write code\n"
    },
    {
        "task_id": 34,
        "code_str": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return (-1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findMissing(new int[]{1,2,3,5},4) == 4;\n        assert solution.findMissing(new int[]{1,3,4,5},4) == 2;\n        assert solution.findMissing(new int[]{1,2,3,5,6,7},5) == 4;\n    }\n}\n",
        "prompt": "Write a python function to find the missing number in a sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findMissing(int ar[], int N) {\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the missing number in a sorted array.",
        "code_str_generate": "class Solution {\n    public int findMissing(int ar[], int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the missing number in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = 0;\n        int r = N - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (ar[mid] != mid + 1 && ar[mid - 1] == mid) {\n                return (mid + 1);\n            } else if (ar[mid] != mid + 1) {\n            //begin to write code\n"
    },
    {
        "task_id": 35,
        "code_str": "class Solution {\n    public static int find_rect_num(int n) {\n        return n * (n + 1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_rect_num(4) == 20;\n        assert Solution.find_rect_num(5) == 30;\n        assert Solution.find_rect_num(6) == 42;\n    }\n}\n",
        "prompt": "Write a function to find the n-th rectangular number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_rect_num(int n) {\n        return n * (n + 1);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the n-th rectangular number.",
        "code_str_generate": "class Solution {\n    public static int find_rect_num(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n-th rectangular number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (n + 1);\n        //begin to write code\n"
    },
    {
        "task_id": 36,
        "code_str": "class Solution {\n    public int find_Nth_Digit(int p, int q, int N) {\n              int res = 0;\n        while (N > 0) {\n            N -= 1;\n            p *= 10;\n            res = p / q;\n            p %= q;\n        }\n        return res;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find_Nth_Digit(1,2,1) == 5;\n        assert solution.find_Nth_Digit(3,5,1) == 6;\n        assert solution.find_Nth_Digit(5,6,5) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int find_Nth_Digit(int p, int q, int N) {\n              int res = 0;\n        while (N > 0) {\n            N -= 1;\n            p *= 10;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the nth digit in the proper fraction of two given numbers.",
        "code_str_generate": "class Solution {\n    public int find_Nth_Digit(int p, int q, int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the nth digit in the proper fraction of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n              int res = 0;\n        while (N > 0) {\n            N -= 1;\n            p *= 10;\n            //begin to write code\n"
    },
    {
        "task_id": 37,
        "code_str": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n            }\n        }\n        Collections.sort(intPart);\n        Collections.sort(strPart);\n        List<Object> result = new ArrayList<>(intPart);\n        result.addAll(strPart);\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> test1 = Arrays.asList(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1);\n        List<Object> result1 = Arrays.asList(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\");\n        assert solution.sortMixedList(test1).equals(result1);\n\n        List<Object> test2 = Arrays.asList(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1);\n        List<Object> result2 = Arrays.asList(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\");\n        assert solution.sortMixedList(test2).equals(result2);\n\n        List<Object> test3 = Arrays.asList(19, \"red\", 12, \"green\", \"blue\", 10, \"white\", \"green\", 1);\n        List<Object> result3 = Arrays.asList(1, 10, 12, 19, \"blue\", \"green\", \"green\", \"red\", \"white\");\n        assert solution.sortMixedList(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to sort a given mixed list of integers and strings.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n                //begin to write code\n",
        "java_prompt": "Write a function to sort a given mixed list of integers and strings.",
        "code_str_generate": "class Solution {\n    public static List<Object> sortMixedList(List<Object> mixedList) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given mixed list of integers and strings.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> intPart = new ArrayList<>();\n        List<String> strPart = new ArrayList<>();\n        for (Object i : mixedList) {\n            if (i instanceof Integer) {\n                intPart.add((Integer) i);\n            } else if (i instanceof String) {\n                strPart.add((String) i);\n                //begin to write code\n"
    },
    {
        "task_id": 38,
        "code_str": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n        } else {\n            return -1;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.divEvenOdd(new int[]{1,3,5,7,4,1,6,8}) == 4;\n        assert Solution.divEvenOdd(new int[]{1,2,3,4,5,6,7,8,9,10}) == 2;\n        assert Solution.divEvenOdd(new int[]{1,5,7,9,10}) == 10;\n    }\n}\n",
        "prompt": "Write a function to find the division of first even and odd number of a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n            //begin to write code\n",
        "java_prompt": "Write a function to find the division of first even and odd number of a given list.",
        "code_str_generate": "class Solution {\n    public static double divEvenOdd(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the division of first even and odd number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        OptionalInt firstEven = IntStream.of(list1).filter(n -> n % 2 == 0).findFirst();\n        OptionalInt firstOdd = IntStream.of(list1).filter(n -> n % 2 != 0).findFirst();\n        if (firstEven.isPresent() && firstOdd.isPresent()) {\n            return (double) firstEven.getAsInt() / firstOdd.getAsInt();\n            //begin to write code\n"
    },
    {
        "task_id": 39,
        "code_str": "class Solution {\n    public String rearrangeString(String S) {\n        Map<Character, Integer> ctr = new HashMap<>();\n        for (char c : S.toCharArray()) {\n            ctr.put(c, ctr.getOrDefault(c, 0) + 1);\n        }\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> b[1] - a[1]);\n        for (char c : ctr.keySet()) {\n            heap.add(new int[]{c, ctr.get(c)});\n        }\n        if (heap.peek()[1] * 2 > S.length() + 1) {\n            return \"\";\n        }\n        StringBuilder ans = new StringBuilder();\n        while (heap.size() >= 2) {\n            int[] nct1 = heap.poll();\n            int[] nct2 = heap.poll();\n            ans.append((char) nct1[0]);\n            ans.append((char) nct2[0]);\n            if (--nct1[1] > 0) {\n                heap.add(nct1);\n            }\n            if (--nct2[1] > 0) {\n                heap.add(nct2);\n            }\n        }\n        if (!heap.isEmpty()) {\n            ans.append((char) (heap.poll()[0]));\n        }\n        return ans.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.rearrangeString(\"aab\").equals(\"aba\");\n        assert solution.rearrangeString(\"aabb\").equals(\"abab\");\n            }\n}\n",
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String rearrangeString(String S) {\n        Map<Character, Integer> ctr = new HashMap<>();\n        for (char c : S.toCharArray()) {\n            ctr.put(c, ctr.getOrDefault(c, 0) + 1);\n        }\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> b[1] - a[1]);\n        for (char c : ctr.keySet()) {\n            heap.add(new int[]{c, ctr.get(c)});\n        }\n        if (heap.peek()[1] * 2 > S.length() + 1) {\n            return \"\";\n        }\n        StringBuilder ans = new StringBuilder();\n        while (heap.size() >= 2) {\n            int[] nct1 = heap.poll();\n            //begin to write code\n",
        "java_prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
        "code_str_generate": "class Solution {\n    public String rearrangeString(String S) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> ctr = new HashMap<>();\n        for (char c : S.toCharArray()) {\n            ctr.put(c, ctr.getOrDefault(c, 0) + 1);\n        }\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a, b) -> b[1] - a[1]);\n        for (char c : ctr.keySet()) {\n            heap.add(new int[]{c, ctr.get(c)});\n        }\n        if (heap.peek()[1] * 2 > S.length() + 1) {\n            return \"\";\n        }\n        StringBuilder ans = new StringBuilder();\n        while (heap.size() >= 2) {\n            int[] nct1 = heap.poll();\n            //begin to write code\n"
    },
    {
        "task_id": 40,
        "code_str": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        Map<Integer, Integer> result1 = solution.freqElement(test1);\n        assert result1.equals(new HashMap<Integer, Integer>() {{\n            put(2, 3);\n            put(1, 2);\n            put(5, 2);\n            put(3, 1);\n            put(4, 1);\n            put(6, 1);\n            put(7, 1);\n            put(9, 1);\n        }});\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12));\n        Map<Integer, Integer> result2 = solution.freqElement(test2);\n        assert result2.equals(new HashMap<Integer, Integer>() {{\n            put(1, 1);\n            put(2, 1);\n            put(3, 1);\n            put(4, 1);\n            put(5, 1);\n            put(6, 1);\n            put(7, 1);\n            put(8, 1);\n            put(9, 1);\n            put(10, 1);\n            put(11, 1);\n            put(12, 1);\n        }});\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(15, 20, 30, 40), Arrays.asList(80, 90, 100, 110), Arrays.asList(30, 30, 80, 90));\n        Map<Integer, Integer> result3 = solution.freqElement(test3);\n        assert result3.equals(new HashMap<Integer, Integer>() {{\n            put(30, 3);\n            put(80, 2);\n            put(90, 2);\n            put(15, 1);\n            put(20, 1);\n            put(40, 1);\n            put(100, 1);\n            put(110, 1);\n        }});\n    }\n}\n",
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n",
        "java_prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.",
        "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqElement(List<List<Integer>> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency of the elements in a given list of lists using collections module.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> result = new HashMap<>();\n        for (List<Integer> sublist : nums) {\n            for (Integer i : sublist) {\n                result.put(i, result.getOrDefault(i, 0) + 1);\n                //begin to write code\n"
    },
    {
        "task_id": 41,
        "code_str": "class Solution {\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n            }\n        }\n        return evenNums;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> test1 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n        List<Integer> result1 = new ArrayList<>(Arrays.asList(2, 4, 6, 8, 10));\n        assert solution.filterEvenNumbers(test1).equals(result1);\n\n        List<Integer> test2 = new ArrayList<>(Arrays.asList(10, 20, 45, 67, 84, 93));\n        List<Integer> result2 = new ArrayList<>(Arrays.asList(10, 20, 84));\n        assert solution.filterEvenNumbers(test2).equals(result2);\n\n        List<Integer> test3 = new ArrayList<>(Arrays.asList(5, 7, 9, 8, 6, 4, 3));\n        List<Integer> result3 = new ArrayList<>(Arrays.asList(8, 6, 4));\n        assert solution.filterEvenNumbers(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to filter even numbers using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n                //begin to write code\n",
        "java_prompt": "Write a function to filter even numbers using lambda function.",
        "code_str_generate": "class Solution {\n    public static List<Integer> filterEvenNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter even numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> evenNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 == 0) {\n                evenNums.add(num);\n                //begin to write code\n"
    },
    {
        "task_id": 42,
        "code_str": "class Solution {\n    public int find_Sum(int[] arr,int n) {\n        int sum = 0;\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n        for (int num : arr) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        for (int num : arr) {\n            if (countMap.get(num) > 1) {\n                sum += num;\n            }\n        }\n        return sum;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find_Sum(new int[]{1,2,3,1,1,4,5,6},8) == 3;\n        assert solution.find_Sum(new int[]{1,2,3,1,1},5) == 3;\n        assert solution.find_Sum(new int[]{1,1,2},3) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of repeated elements in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int find_Sum(int[] arr,int n) {\n        int sum = 0;\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n        for (int num : arr) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        for (int num : arr) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of repeated elements in a given array.",
        "code_str_generate": "class Solution {\n    public int find_Sum(int[] arr,int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of repeated elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        HashMap<Integer, Integer> countMap = new HashMap<>();\n        for (int num : arr) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        for (int num : arr) {\n        //begin to write code\n"
    },
    {
        "task_id": 43,
        "code_str": "class Solution {\n    public String textMatch(String text) {\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return (\"Found a match!\");\n        } else {\n            return (\"Not matched!\");\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.textMatch(\"aab_cbbbc\").equals(\"Found a match!\");\n        assert solution.textMatch(\"aab_Abbbc\").equals(\"Not matched!\");\n        assert solution.textMatch(\"Aaab_abbbc\").equals(\"Not matched!\");\n    }\n}\n",
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String textMatch(String text) {\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
        "code_str_generate": "class Solution {\n    public String textMatch(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find sequences of lowercase letters joined with an underscore using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"^[a-z]+_[a-z]+$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 44,
        "code_str": "class Solution {\n    public String textMatchString(String text) {\n        Pattern pattern = Pattern.compile(\"^\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.textMatchString(\" python\").equals(\"Not matched!\");\n        assert solution.textMatchString(\"python\").equals(\"Found a match!\");\n        assert solution.textMatchString(\"  lang\").equals(\"Not matched!\");\n    }\n}\n",
        "prompt": "Write a function that matches a word at the beginning of a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String textMatchString(String text) {\n        Pattern pattern = Pattern.compile(\"^\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n            //begin to write code\n",
        "java_prompt": "Write a function that matches a word at the beginning of a string.",
        "code_str_generate": "class Solution {\n    public String textMatchString(String text) {\n\n        /*\n        progame language:java\n        description:Write a function that matches a word at the beginning of a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"^\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n            //begin to write code\n"
    },
    {
        "task_id": 45,
        "code_str": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n\n    public static int get_gcd(int[] l) {\n        int num1 = l[0];\n        int num2 = l[1];\n        int gcd = find_gcd(num1, num2);\n        for (int i = 2; i < l.length; i++) {\n            gcd = find_gcd(gcd, l[i]);\n        }\n        return gcd;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.get_gcd(new int[]{2, 4, 6, 8, 16}) == 2;\n        assert Solution.get_gcd(new int[]{1, 2, 3}) == 1;\n        assert Solution.get_gcd(new int[]{2, 4, 6, 8}) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the gcd of the given array elements.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n    public static int get_gcd(int[] l) {\n    //begin to write code\n",
        "java_prompt": "Write a function to find the gcd of the given array elements.",
        "code_str_generate": "class Solution {\n    public static int find_gcd(int x, int y) {\n        while (y != 0) {\n            int temp = y;\n            y = x % y;\n            x = temp;\n        }\n        return x;\n    }\n    public static int get_gcd(int[] l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the gcd of the given array elements.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n    //begin to write code\n"
    },
    {
        "task_id": 46,
        "code_str": "class Solution {\n    public static boolean testDistinct(int[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n        }\n        return data.length == distinctData.size();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.testDistinct(new int[]{1,5,7,9}) == true;\n        assert Solution.testDistinct(new int[]{2,4,5,5,7,9}) == false;\n        assert Solution.testDistinct(new int[]{1,2,3}) == true;\n    }\n}\n",
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean testDistinct(int[] data) {\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n",
        "java_prompt": "Write a java function to determine whether all the numbers are different from each other are not.",
        "code_str_generate": "class Solution {\n    public static boolean testDistinct(int[] data) {\n\n        /*\n        progame language:java\n        description:Write a java function to determine whether all the numbers are different from each other are not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> distinctData = new HashSet<>();\n        for (int i : data) {\n            distinctData.add(i);\n            //begin to write code\n"
    },
    {
        "task_id": 47,
        "code_str": "class Solution {\n    public static int compute_Last_Digit(int A, int B) {\n        int variable = 1;\n        if (A == B) {\n            return 1;\n        } else if ((B - A) >= 5) {\n            return 0;\n        } else {\n            for (int i = A + 1; i <= B; i++) {\n                variable = (variable * (i % 10)) % 10;\n            }\n            return variable % 10;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.compute_Last_Digit(2,4) == 2;\n        assert Solution.compute_Last_Digit(6,8) == 6;\n        assert Solution.compute_Last_Digit(1,2) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int compute_Last_Digit(int A, int B) {\n        int variable = 1;\n        if (A == B) {\n            return 1;\n        } else if ((B - A) >= 5) {\n            return 0;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the last digit when factorial of a divides factorial of b.",
        "code_str_generate": "class Solution {\n    public static int compute_Last_Digit(int A, int B) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the last digit when factorial of a divides factorial of b.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int variable = 1;\n        if (A == B) {\n            return 1;\n        } else if ((B - A) >= 5) {\n            return 0;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 48,
        "code_str": "class Solution {\n    public int oddBitSetNumber(int n) {\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 0) {\n                res |= (1 << count);\n            }\n            count += 1;\n            temp >>= 1;\n        }\n        return (n | res);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.oddBitSetNumber(10) == 15;\n        assert solution.oddBitSetNumber(20) == 21;\n        assert solution.oddBitSetNumber(30) == 31;\n    }\n}\n",
        "prompt": "Write a python function to set all odd bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int oddBitSetNumber(int n) {\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 0) {\n                res |= (1 << count);\n                //begin to write code\n",
        "java_prompt": "Write a java function to set all odd bits of a given number.",
        "code_str_generate": "class Solution {\n    public int oddBitSetNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to set all odd bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 0) {\n                res |= (1 << count);\n                //begin to write code\n"
    },
    {
        "task_id": 49,
        "code_str": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        assert solution.specifiedElement(test1, 0).equals(Arrays.asList(1, 4, 7));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        assert solution.specifiedElement(test2, 2).equals(Arrays.asList(3, 6, 9));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        assert solution.specifiedElement(test3, 1).equals(Arrays.asList(2, 5, 1));\n    }\n}\n",
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n",
        "java_prompt": "Write a function to extract every first or specified element from a given two-dimensional list.",
        "code_str_generate": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to extract every first or specified element from a given two-dimensional list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n"
    },
    {
        "task_id": 50,
        "code_str": "class Solution {\n    public static Object[] minLengthList(List<List<Integer>> inputList) {\n        int minLength = Integer.MAX_VALUE;\n        List<Integer> minList = new ArrayList<>();\n        for (List<Integer> list : inputList) {\n            if (list.size() < minLength) {\n                minLength = list.size();\n                minList = list;\n            }\n        }\n        return new Object[]{minLength, minList};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(0), Arrays.asList(1, 3), Arrays.asList(5, 7), Arrays.asList(9, 11), Arrays.asList(13, 15, 17));\n        Object[] result1 = Solution.minLengthList(test1);\n        assert (int)result1[0] == 1 && result1[1].equals(Arrays.asList(0));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1,2,3,4,5), Arrays.asList(1,2,3,4), Arrays.asList(1,2,3), Arrays.asList(1,2), Arrays.asList(1));\n        Object[] result2 = Solution.minLengthList(test2);\n        assert (int)result2[0] == 1 && result2[1].equals(Arrays.asList(1));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(3,4,5), Arrays.asList(6,7,8,9), Arrays.asList(10,11,12), Arrays.asList(1,2));\n        Object[] result3 = Solution.minLengthList(test3);\n        assert (int)result3[0] == 2 && result3[1].equals(Arrays.asList(1,2));\n    }\n}\n",
        "prompt": "Write a function to find the list with minimum length using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Object[] minLengthList(List<List<Integer>> inputList) {\n        int minLength = Integer.MAX_VALUE;\n        List<Integer> minList = new ArrayList<>();\n        for (List<Integer> list : inputList) {\n            if (list.size() < minLength) {\n                minLength = list.size();\n                //begin to write code\n",
        "java_prompt": "Write a function to find the list with minimum length using lambda function.",
        "code_str_generate": "class Solution {\n    public static Object[] minLengthList(List<List<Integer>> inputList) {\n\n        /*\n        progame language:java\n        description:Write a function to find the list with minimum length using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minLength = Integer.MAX_VALUE;\n        List<Integer> minList = new ArrayList<>();\n        for (List<Integer> list : inputList) {\n            if (list.size() < minLength) {\n                minLength = list.size();\n                //begin to write code\n"
    },
    {
        "task_id": 51,
        "code_str": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.checkEquilateral(6,8,12);\n        assert !solution.checkEquilateral(6,6,12);\n        assert solution.checkEquilateral(6,6,6);\n    }\n}\n",
        "prompt": "Write a function to print check if the triangle is equilateral or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to print check if the triangle is equilateral or not.",
        "code_str_generate": "class Solution {\n    public boolean checkEquilateral(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is equilateral or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y && y == z) {\n            return true;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 52,
        "code_str": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        return area;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.parallelogram_area(10,20) == 200;\n        assert Solution.parallelogram_area(15,20) == 300;\n        assert Solution.parallelogram_area(8,9) == 72;\n    }\n}\n",
        "prompt": "Write a function to caluclate area of a parallelogram.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n        int area = b * h;\n        //begin to write code\n",
        "java_prompt": "Write a function to caluclate area of a parallelogram.",
        "code_str_generate": "class Solution {\n    public static int parallelogram_area(int b, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to caluclate area of a parallelogram.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = b * h;\n        //begin to write code\n"
    },
    {
        "task_id": 53,
        "code_str": "class Solution {\n    public String checkEquality(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n            return \"Not Equal\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.checkEquality(\"abcda\").equals(\"Equal\");\n        assert solution.checkEquality(\"ab\").equals(\"Not Equal\");\n        assert solution.checkEquality(\"mad\").equals(\"Not Equal\");\n    }\n}\n",
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String checkEquality(String str) {\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the first and last characters of a given string are equal or not.",
        "code_str_generate": "class Solution {\n    public String checkEquality(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the first and last characters of a given string are equal or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (str.charAt(0) == str.charAt(str.length() - 1)) {\n            return \"Equal\";\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 54,
        "code_str": "class Solution {\n    public static int[] countingSort(int[] myArray) {\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n        }\n        int i = 0;\n        for (int j = 0; j < max_value + 1; j++) {\n            for (int a = 0; a < buckets[j]; a++) {\n                myArray[i] = j;\n                i += 1;\n            }\n        }\n        return myArray;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assertArrayEquals(new int[]{1, 4, 5, 6, 7, 8, 23}, Solution.countingSort(new int[]{1,23,4,5,6,7,8}));\n        assertArrayEquals(new int[]{9, 12, 28, 33, 45, 69}, Solution.countingSort(new int[]{12, 9, 28, 33, 69, 45}));\n        assertArrayEquals(new int[]{1, 2, 3, 4, 8, 14}, Solution.countingSort(new int[]{8, 4, 14, 3, 2, 1}));\n    }\n\n    public static void assertArrayEquals(int[] expected, int[] actual) {\n        if (expected.length != actual.length) {\n            throw new AssertionError(\"Arrays are not the same length\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != actual[i]) {\n                throw new AssertionError(\"Arrays differ at index \" + i);\n            }\n        }\n    }\n}\n",
        "prompt": "Write a function to sort the given array by using counting sort.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] countingSort(int[] myArray) {\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n            //begin to write code\n",
        "java_prompt": "Write a function to sort the given array by using counting sort.",
        "code_str_generate": "class Solution {\n    public static int[] countingSort(int[] myArray) {\n\n        /*\n        progame language:java\n        description:Write a function to sort the given array by using counting sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_value = 0;\n        for (int i = 0; i < myArray.length; i++) {\n            if (myArray[i] > max_value) {\n                max_value = myArray[i];\n            }\n        }\n        int[] buckets = new int[max_value + 1];\n        for (int i : myArray) {\n            buckets[i] += 1;\n            //begin to write code\n"
    },
    {
        "task_id": 55,
        "code_str": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n        double tn = a * Math.pow(r, n - 1);\n        return tn;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.tn_gp(1,5,2)==16;\n        assert Solution.tn_gp(1,5,4)==256;\n        assert Solution.tn_gp(2,6,3)==486;\n    }\n}\n",
        "prompt": "Write a function to find t-nth term of geometric series.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n",
        "java_prompt": "Write a function to find t-nth term of geometric series.",
        "code_str_generate": "class Solution {\n    public static double tn_gp(int a, int n, int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of geometric series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double tn = a * Math.pow(r, n - 1);\n        //begin to write code\n"
    },
    {
        "task_id": 56,
        "code_str": "class Solution {\n    public static int rev(int num) {\n        int rev_num = 0;\n        while (num > 0) {\n            rev_num = (rev_num * 10 + num % 10);\n            num = num / 10;\n        }\n        return rev_num;\n    }\n\n    public static boolean check(int n) {\n        return (2 * rev(n) == n + 1);\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert !Solution.check(70);\n        assert !Solution.check(23);\n        assert Solution.check(73);\n    }\n}\n",
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int rev(int num) {\n        int rev_num = 0;\n        while (num > 0) {\n            rev_num = (rev_num * 10 + num % 10);\n            num = num / 10;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to check if a given number is one less than twice its reverse.",
        "code_str_generate": "class Solution {\n    public static int rev(int num) {\n        int rev_num = 0;\n        while (num > 0) {\n            rev_num = (rev_num * 10 + num % 10);\n            num = num / 10;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 57,
        "code_str": "class Solution {\n    public static int find_Max_Num(Integer[] arr, int n) {\n        Arrays.sort(arr, Collections.reverseOrder());\n        int num = arr[0];\n        for (int i = 1; i < n; i++) {\n            num = num * 10 + arr[i];\n        }\n        return num;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_Max_Num(new Integer[]{1,2,3},3) == 321;\n        assert Solution.find_Max_Num(new Integer[]{4,5,6,1},4) == 6541;\n        assert Solution.find_Max_Num(new Integer[]{1,2,3,9},4) == 9321;\n    }\n}\n",
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_Max_Num(Integer[] arr, int n) {\n        Arrays.sort(arr, Collections.reverseOrder());\n        int num = arr[0];\n        for (int i = 1; i < n; i++) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the largest number that can be formed with the given digits.",
        "code_str_generate": "class Solution {\n    public static int find_Max_Num(Integer[] arr, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest number that can be formed with the given digits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(arr, Collections.reverseOrder());\n        int num = arr[0];\n        for (int i = 1; i < n; i++) {\n        //begin to write code\n"
    },
    {
        "task_id": 58,
        "code_str": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n        return ((x ^ y) < 0);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.oppositeSigns(1, -2) == true;\n        assert Solution.oppositeSigns(3, 2) == false;\n        assert Solution.oppositeSigns(-10, -10) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n        return ((x ^ y) < 0);\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given two integers have opposite sign or not.",
        "code_str_generate": "class Solution {\n    public static boolean oppositeSigns(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given two integers have opposite sign or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return ((x ^ y) < 0);\n        //begin to write code\n"
    },
    {
        "task_id": 59,
        "code_str": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isOctagonal(5) == 65;\n        assert Solution.isOctagonal(10) == 280;\n        assert Solution.isOctagonal(15) == 645;\n    }\n}\n",
        "prompt": "Write a function to find the nth octagonal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int isOctagonal(int n) {\n        return 3 * n * n - 2 * n;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the nth octagonal number.",
        "code_str_generate": "class Solution {\n    public static int isOctagonal(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth octagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 3 * n * n - 2 * n;\n        //begin to write code\n"
    },
    {
        "task_id": 60,
        "code_str": "class Solution {\n    public int maxLenSub(int arr[], int n) {\n        int mls[] = new int[n];\n        int max = 0;\n\n        for (int i = 0; i < n; i++) {\n            mls[i] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (max < mls[i]) {\n                max = mls[i];\n            }\n        }\n\n        return max;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        assert solution.maxLenSub(new int[]{2, 5, 6, 3, 7, 6, 5, 8}, 8) == 5;\n        assert solution.maxLenSub(new int[]{-2, -1, 5, -1, 4, 0, 3}, 7) == 4;\n        assert solution.maxLenSub(new int[]{9, 11, 13, 15, 18}, 5) == 1;\n    }\n}\n",
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxLenSub(int arr[], int n) {\n        int mls[] = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            mls[i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                    //begin to write code\n",
        "java_prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
        "code_str_generate": "class Solution {\n    public int maxLenSub(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mls[] = new int[n];\n        int max = 0;\n        for (int i = 0; i < n; i++) {\n            mls[i] = 1;\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) {\n                    mls[i] = mls[j] + 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 61,
        "code_str": "class Solution {\n    public static int count_Substrings(String s, int n) {\n        int count = 0, sum = 0;\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        mp.put(0, 1);\n        for (int i = 0; i < n; i++) {\n            sum += s.charAt(i) - '0';\n            count += mp.getOrDefault(sum - (i + 1), 0);\n            mp.put(sum - (i + 1), mp.getOrDefault(sum - (i + 1), 0) + 1);\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Substrings(\"112112\",6) == 6;\n        assert Solution.count_Substrings(\"111\",3) == 6;\n        assert Solution.count_Substrings(\"1101112\",7) == 12;\n    }\n}\n",
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Substrings(String s, int n) {\n        int count = 0, sum = 0;\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        mp.put(0, 1);\n        for (int i = 0; i < n; i++) {\n            sum += s.charAt(i) - '0';\n            //begin to write code\n",
        "java_prompt": "Write a java function to count number of substrings with the sum of digits equal to their length.",
        "code_str_generate": "class Solution {\n    public static int count_Substrings(String s, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count number of substrings with the sum of digits equal to their length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0, sum = 0;\n        HashMap<Integer, Integer> mp = new HashMap<>();\n        mp.put(0, 1);\n        for (int i = 0; i < n; i++) {\n            sum += s.charAt(i) - '0';\n            //begin to write code\n"
    },
    {
        "task_id": 62,
        "code_str": "class Solution {\n    public static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        return xs[0];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.smallest_num(new int[]{10, 20, 1, 45, 99}) == 1;\n        assert Solution.smallest_num(new int[]{1, 2, 3}) == 1;\n        assert Solution.smallest_num(new int[]{45, 46, 50, 60}) == 45;\n    }\n}\n",
        "prompt": "Write a python function to find smallest number in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int smallest_num(int[] xs) {\n        Arrays.sort(xs);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find smallest number in a list.",
        "code_str_generate": "class Solution {\n    public static int smallest_num(int[] xs) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest number in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(xs);\n        //begin to write code\n"
    },
    {
        "task_id": 63,
        "code_str": "class Solution {\n    public int maxDifference(int[][] testList) {\n        int res = Integer.MIN_VALUE;\n        for (int[] pair : testList) {\n            int temp = Math.abs(pair[1] - pair[0]);\n            res = Math.max(res, temp);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxDifference(new int[][]{{3, 5}, {1, 7}, {10, 3}, {1, 2}}) == 7;\n        assert solution.maxDifference(new int[][]{{4, 6}, {2, 17}, {9, 13}, {11, 12}}) == 15;\n        assert solution.maxDifference(new int[][]{{12, 35}, {21, 27}, {13, 23}, {41, 22}}) == 23;\n    }\n}\n",
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxDifference(int[][] testList) {\n        int res = Integer.MIN_VALUE;\n        for (int[] pair : testList) {\n            int temp = Math.abs(pair[1] - pair[0]);\n            //begin to write code\n",
        "java_prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.",
        "code_str_generate": "class Solution {\n    public int maxDifference(int[][] testList) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum difference between available pairs in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = Integer.MIN_VALUE;\n        for (int[] pair : testList) {\n            int temp = Math.abs(pair[1] - pair[0]);\n            //begin to write code\n"
    },
    {
        "task_id": 64,
        "code_str": "class Solution {\n    public static List<Pair<String, Integer>> subjectMarks(List<Pair<String, Integer>> subjectmarks) {\n        Collections.sort(subjectmarks, new Comparator<Pair<String, Integer>>() {\n            @Override\n            public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n        return subjectmarks;\n    }\n}\n\nclass Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() {\n        return key;\n    }\n\n    public V getValue() {\n        return value;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Pair<String, Integer>> subjectmarks1 = new ArrayList<>();\n        subjectmarks1.add(new Pair<>(\"English\", 88));\n        subjectmarks1.add(new Pair<>(\"Science\", 90));\n        subjectmarks1.add(new Pair<>(\"Maths\", 97));\n        subjectmarks1.add(new Pair<>(\"Social sciences\", 82));\n        List<Pair<String, Integer>> result1 = solution.subjectMarks(subjectmarks1);\n        assert result1.get(0).getKey().equals(\"Social sciences\") && result1.get(0).getValue() == 82;\n        assert result1.get(1).getKey().equals(\"English\") && result1.get(1).getValue() == 88;\n        assert result1.get(2).getKey().equals(\"Science\") && result1.get(2).getValue() == 90;\n        assert result1.get(3).getKey().equals(\"Maths\") && result1.get(3).getValue() == 97;\n\n        List<Pair<String, Integer>> subjectmarks2 = new ArrayList<>();\n        subjectmarks2.add(new Pair<>(\"Telugu\",49));\n        subjectmarks2.add(new Pair<>(\"Hindhi\",54));\n        subjectmarks2.add(new Pair<>(\"Social\",33));\n        List<Pair<String, Integer>> result2 = solution.subjectMarks(subjectmarks2);\n        assert result2.get(0).getKey().equals(\"Social\") && result2.get(0).getValue() == 33;\n        assert result2.get(1).getKey().equals(\"Telugu\") && result2.get(1).getValue() == 49;\n        assert result2.get(2).getKey().equals(\"Hindhi\") && result2.get(2).getValue() == 54;\n\n        List<Pair<String, Integer>> subjectmarks3 = new ArrayList<>();\n        subjectmarks3.add(new Pair<>(\"Physics\",96));\n        subjectmarks3.add(new Pair<>(\"Chemistry\",97));\n        subjectmarks3.add(new Pair<>(\"Biology\",45));\n        List<Pair<String, Integer>> result3 = solution.subjectMarks(subjectmarks3);\n        assert result3.get(0).getKey().equals(\"Biology\") && result3.get(0).getValue() == 45;\n        assert result3.get(1).getKey().equals(\"Physics\") && result3.get(1).getValue() == 96;\n        assert result3.get(2).getKey().equals(\"Chemistry\") && result3.get(2).getValue() == 97;\n    }\n}",
        "prompt": "Write a function to sort a list of tuples using lambda.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\nclass Pair<K, V> {\n    public static List<Pair<String, Integer>> subjectMarks(List<Pair<String, Integer>> subjectmarks) {\n        Collections.sort(subjectmarks, new Comparator<Pair<String, Integer>>() {\n            @Override\n            public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n        return subjectmarks;\n    }\n}\n    private K key;\n    //begin to write code\n",
        "java_prompt": "Write a function to sort a list of tuples using lambda.",
        "code_str_generate": "class Solution {\nclass Pair<K, V> {\n    public static List<Pair<String, Integer>> subjectMarks(List<Pair<String, Integer>> subjectmarks) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of tuples using lambda.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(subjectmarks, new Comparator<Pair<String, Integer>>() {\n            @Override\n            public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {\n                return o1.getValue().compareTo(o2.getValue());\n            }\n        });\n        return subjectmarks;\n    }\n}\n    private K key;\n    //begin to write code\n"
    },
    {
        "task_id": 65,
        "code_str": "class Solution {\n    public static int recursiveListSum(List<Object> dataList) {\n        int total = 0;\n        for (Object element : dataList) {\n            if (element instanceof List) {\n                total += recursiveListSum((List<Object>) element);\n            } else {\n                total += (Integer) element;\n            }\n        }\n        return total;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.recursiveListSum(Arrays.asList(1, 2, Arrays.asList(3,4), Arrays.asList(5,6))) == 21;\n        assert Solution.recursiveListSum(Arrays.asList(7, 10, Arrays.asList(15,14), Arrays.asList(19,41))) == 106;\n        assert Solution.recursiveListSum(Arrays.asList(10, 20, Arrays.asList(30,40), Arrays.asList(50,60))) == 210;\n    }\n}\n",
        "prompt": "Write a function of recursion list sum.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int recursiveListSum(List<Object> dataList) {\n        int total = 0;\n        for (Object element : dataList) {\n            if (element instanceof List) {\n                total += recursiveListSum((List<Object>) element);\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a function of recursion list sum.",
        "code_str_generate": "class Solution {\n    public static int recursiveListSum(List<Object> dataList) {\n\n        /*\n        progame language:java\n        description:Write a function of recursion list sum.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 0;\n        for (Object element : dataList) {\n            if (element instanceof List) {\n                total += recursiveListSum((List<Object>) element);\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 66,
        "code_str": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n            }\n        }\n        return posCount;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.posCount(new int[]{1,-2,3,-4}) == 2;\n        assert Solution.posCount(new int[]{3,4,5,-1}) == 3;\n        assert Solution.posCount(new int[]{1,2,3,4}) == 4;\n    }\n}\n",
        "prompt": "Write a python function to count positive numbers in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int posCount(int[] list) {\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count positive numbers in a list.",
        "code_str_generate": "class Solution {\n    public static int posCount(int[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count positive numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int posCount = 0;\n        for (int num : list) {\n            if (num >= 0) {\n                posCount += 1;\n                //begin to write code\n"
    },
    {
        "task_id": 67,
        "code_str": "class Solution {\n    public static long bell_number(int n) {\n        long[][] bell = new long[n+1][n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n                bell[i][j] = bell[i-1][j-1] + bell[i][j-1];\n            }\n        }\n        return bell[n][0];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.bell_number(2) == 2;\n        assert Solution.bell_number(10) == 115975;\n    }\n}",
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static long bell_number(int n) {\n        long[][] bell = new long[n+1][n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
        "code_str_generate": "class Solution {\n    public static long bell_number(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the number of ways to partition a set of bell numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        long[][] bell = new long[n+1][n+1];\n        bell[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            bell[i][0] = bell[i-1][i-1];\n            for (int j = 1; j <= i; j++) {\n            //begin to write code\n"
    },
    {
        "task_id": 68,
        "code_str": "class Solution {\n    public boolean isMonotonic(int[] A) {\n        return increasing(A) || decreasing(A);\n    }\n\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i] > A[i+1]) return false;\n        return true;\n    }\n\n    public boolean decreasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i] < A[i+1]) return false;\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.isMonotonic(new int[]{6, 5, 4, 4}) == true;\n        assert solution.isMonotonic(new int[]{1, 2, 2, 3}) == true;\n        assert solution.isMonotonic(new int[]{1, 3, 2}) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given array is monotonic or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isMonotonic(int[] A) {\n        return increasing(A) || decreasing(A);\n    }\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i] > A[i+1]) return false;\n        return true;\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given array is monotonic or not.",
        "code_str_generate": "class Solution {\n    public boolean isMonotonic(int[] A) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given array is monotonic or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return increasing(A) || decreasing(A);\n    }\n    public boolean increasing(int[] A) {\n        for (int i = 0; i < A.length - 1; ++i)\n            if (A[i] > A[i+1]) return false;\n        return true;\n        //begin to write code\n"
    },
    {
        "task_id": 69,
        "code_str": "class Solution {\n    public boolean isSublist(int[] l, int[] s) {\n        boolean subSet = false;\n        if (s.length == 0) {\n            subSet = true;\n        } else if (s.length == l.length) {\n            subSet = true;\n        } else if (s.length > l.length) {\n            subSet = false;\n        } else {\n            for (int i = 0; i < l.length; i++) {\n                if (l[i] == s[0]) {\n                    int n = 1;\n                    while ((n < s.length) && (l[i+n] == s[n])) {\n                        n += 1;\n                    }\n                    if (n == s.length) {\n                        subSet = true;\n                    }\n                }\n            }\n        }\n        return subSet;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.isSublist(new int[]{2,4,3,5,7}, new int[]{3,7});\n        assert solution.isSublist(new int[]{2,4,3,5,7}, new int[]{4,3});\n        assert !solution.isSublist(new int[]{2,4,3,5,7}, new int[]{1,6});\n    }\n}\n",
        "prompt": "Write a function to check whether a list contains the given sublist or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isSublist(int[] l, int[] s) {\n        boolean subSet = false;\n        if (s.length == 0) {\n            subSet = true;\n        } else if (s.length == l.length) {\n            subSet = true;\n        } else if (s.length > l.length) {\n            subSet = false;\n        } else {\n            for (int i = 0; i < l.length; i++) {\n                if (l[i] == s[0]) {\n                    int n = 1;\n                    //begin to write code\n",
        "java_prompt": "Write a function to check whether a list contains the given sublist or not.",
        "code_str_generate": "class Solution {\n    public boolean isSublist(int[] l, int[] s) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether a list contains the given sublist or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean subSet = false;\n        if (s.length == 0) {\n            subSet = true;\n        } else if (s.length == l.length) {\n            subSet = true;\n        } else if (s.length > l.length) {\n            subSet = false;\n        } else {\n            for (int i = 0; i < l.length; i++) {\n                if (l[i] == s[0]) {\n                    int n = 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 70,
        "code_str": "class Solution {\n    public static boolean findEqualTuple(int[][] input, int k) {\n        boolean flag = true;\n        for (int[] tuple : input) {\n            if (tuple.length != k) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n    }\n\n    public static String getEqual(int[][] input, int k) {\n        if (findEqualTuple(input, k)) {\n            return \"All tuples have same length\";\n        } else {\n            return \"All tuples do not have same length\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.getEqual(new int[][]{{11, 22, 33}, {44, 55, 66}}, 3).equals(\"All tuples have same length\");\n        assert Solution.getEqual(new int[][]{{1, 2, 3}, {4, 5, 6, 7}}, 3).equals(\"All tuples do not have same length\");\n        assert Solution.getEqual(new int[][]{{1, 2}, {3, 4}}, 2).equals(\"All tuples have same length\");\n    }\n}\n",
        "prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean findEqualTuple(int[][] input, int k) {\n        boolean flag = true;\n        for (int[] tuple : input) {\n            if (tuple.length != k) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n        //begin to write code\n",
        "java_prompt": "Write a function to find whether all the given tuples have equal length or not.",
        "code_str_generate": "class Solution {\n    public static boolean findEqualTuple(int[][] input, int k) {\n        boolean flag = true;\n        for (int[] tuple : input) {\n            if (tuple.length != k) {\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n        //begin to write code\n"
    },
    {
        "task_id": 71,
        "code_str": "class Solution {\n    public static int[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                    int temp = nums[i];\n                    nums[i] = nums[i + gaps];\n                    nums[i + gaps] = temp;\n                    swapped = true;\n                }\n                i += 1;\n            }\n        }\n        return nums;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.combSort(new int[]{5, 15, 37, 25, 79}), new int[]{5, 15, 25, 37, 79});\n        assert Arrays.equals(Solution.combSort(new int[]{41, 32, 15, 19, 22}), new int[]{15, 19, 22, 32, 41});\n        assert Arrays.equals(Solution.combSort(new int[]{99, 15, 13, 47}), new int[]{13, 15, 47, 99});\n    }\n}\n",
        "prompt": "Write a function to sort a list of elements using comb sort.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] combSort(int[] nums) {\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n",
        "java_prompt": "Write a function to sort a list of elements using comb sort.",
        "code_str_generate": "class Solution {\n    public static int[] combSort(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of elements using comb sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double shrinkFact = 1.3;\n        int gaps = nums.length;\n        boolean swapped = true;\n        int i = 0;\n        while (gaps > 1 || swapped) {\n            gaps = (int) (gaps / shrinkFact);\n            swapped = false;\n            i = 0;\n            while (gaps + i < nums.length) {\n                if (nums[i] > nums[i + gaps]) {\n                //begin to write code\n"
    },
    {
        "task_id": 72,
        "code_str": "class Solution {\n    public boolean dif_Square(int n) {\n        if (n % 4 != 2) {\n            return true;\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.dif_Square(5) == true;\n        assert solution.dif_Square(10) == false;\n        assert solution.dif_Square(15) == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean dif_Square(int n) {\n        if (n % 4 != 2) {\n            return true;\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given number can be represented as difference of two squares or not.",
        "code_str_generate": "class Solution {\n    public boolean dif_Square(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented as difference of two squares or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 4 != 2) {\n            return true;\n            //begin to write code\n"
    },
    {
        "task_id": 73,
        "code_str": "class Solution {\n    public List<String> multipleSplit(String text) {\n        List<String> result = new ArrayList<>();\n        \n        // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u62c6\u5206 '; ', ', ', '*' \u548c\u6362\u884c\u7b26 '\\n'\n        Pattern pattern = Pattern.compile(\"; |, |\\\\*|\\\\n\");\n        String[] parts = pattern.split(text);\n        \n        for (String part : parts) {\n            result.add(part);\n        }\n        \n        return result;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        // \u521b\u5efa Solution \u7c7b\u7684\u5b9e\u4f8b\n        Solution solution = new Solution();\n        \n        // \u6d4b\u8bd5\u5b57\u7b26\u4e32\n        String text1 = \"Forces of the \\ndarkness*are coming into the play.\";\n        String text2 = \"Mi Box runs on the \\n Latest android*which has google assistance and chromecast.\";\n        String text3 = \"Certain services\\nare subjected to change*over the seperate subscriptions.\";\n        List<String> Result1 = solution.multipleSplit(text1);\n        List<String> Result2 = solution.multipleSplit(text2);\n        List<String> Result3 = solution.multipleSplit(text3);\n        \n        // \u6253\u5370\u62c6\u5206\u7684\u7ed3\u679c\n        List<String> test1 = new ArrayList<>();\n        List<String> test2 = new ArrayList<>();\n        List<String> test3 = new ArrayList<>();\n        \n        for (String part : Result2) {\n            System.out.println(part);\n        }\n        test1.add(\"Forces of the \"); \n        test1.add(\"darkness\");\n        test1.add(\"are coming into the play.\");\n        \n        test2.add(\"Mi Box runs on the \");\n        test2.add(\" Latest android\");\n        test2.add(\"which has google assistance and chromecast.\");\n        \n        test3.add(\"Certain services\");\n        test3.add(\"are subjected to change\");\n        test3.add(\"over the seperate subscriptions.\");\n        \n        assert test1.equals(Result1);\n        assert test2.equals(Result2);\n        assert test3.equals(Result3);\n    }\n}\n",
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<String> multipleSplit(String text) {\n        List<String> result = new ArrayList<>();\n        // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u62c6\u5206 '; ', ', ', '*' \u548c\u6362\u884c\u7b26 '\\n'\n        Pattern pattern = Pattern.compile(\"; |, |\\\\*|\\\\n\");\n        String[] parts = pattern.split(text);\n        //begin to write code\n",
        "java_prompt": "Write a function to split the given string with multiple delimiters by using regex.",
        "code_str_generate": "class Solution {\n    public List<String> multipleSplit(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to split the given string with multiple delimiters by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        // \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u652f\u6301\u62c6\u5206 '; ', ', ', '*' \u548c\u6362\u884c\u7b26 '\\n'\n        Pattern pattern = Pattern.compile(\"; |, |\\\\*|\\\\n\");\n        String[] parts = pattern.split(text);\n        //begin to write code\n"
    },
    {
        "task_id": 74,
        "code_str": "class Solution {\n    public boolean isSamePatterns(String[] colors, String[] patterns) {\n        if (colors.length != patterns.length) {\n            return false;\n        }\n        HashMap<String, ArrayList<String>> sdict = new HashMap<>();\n        HashSet<String> pset = new HashSet<>();\n        HashSet<String> sset = new HashSet<>();\n        for (int i = 0; i < patterns.length; i++) {\n            pset.add(patterns[i]);\n            sset.add(colors[i]);\n            if (!sdict.containsKey(patterns[i])) {\n                sdict.put(patterns[i], new ArrayList<>());\n            }\n            ArrayList<String> keys = sdict.get(patterns[i]);\n            keys.add(colors[i]);\n            sdict.put(patterns[i], keys);\n        }\n        if (pset.size() != sset.size()) {\n            return false;\n        }\n        for (ArrayList<String> values : sdict.values()) {\n            for (int i = 0; i < values.size() - 1; i++) {\n                if (!values.get(i).equals(values.get(i + 1))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.isSamePatterns(new String[]{\"red\",\"green\",\"green\"}, new String[]{\"a\", \"b\", \"b\"}) == true;\n        assert solution.isSamePatterns(new String[]{\"red\",\"green\",\"greenn\"}, new String[]{\"a\",\"b\",\"b\"}) == false;\n        assert solution.isSamePatterns(new String[]{\"red\",\"green\",\"greenn\"}, new String[]{\"a\",\"b\"}) == false;\n    }\n}\n",
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isSamePatterns(String[] colors, String[] patterns) {\n        if (colors.length != patterns.length) {\n            return false;\n        }\n        HashMap<String, ArrayList<String>> sdict = new HashMap<>();\n        HashSet<String> pset = new HashSet<>();\n        HashSet<String> sset = new HashSet<>();\n        for (int i = 0; i < patterns.length; i++) {\n            pset.add(patterns[i]);\n            sset.add(colors[i]);\n            if (!sdict.containsKey(patterns[i])) {\n                sdict.put(patterns[i], new ArrayList<>());\n            }\n            ArrayList<String> keys = sdict.get(patterns[i]);\n            keys.add(colors[i]);\n            //begin to write code\n",
        "java_prompt": "Write a function to check whether it follows the sequence given in the patterns array.",
        "code_str_generate": "class Solution {\n    public boolean isSamePatterns(String[] colors, String[] patterns) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether it follows the sequence given in the patterns array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (colors.length != patterns.length) {\n            return false;\n        }\n        HashMap<String, ArrayList<String>> sdict = new HashMap<>();\n        HashSet<String> pset = new HashSet<>();\n        HashSet<String> sset = new HashSet<>();\n        for (int i = 0; i < patterns.length; i++) {\n            pset.add(patterns[i]);\n            sset.add(colors[i]);\n            if (!sdict.containsKey(patterns[i])) {\n                sdict.put(patterns[i], new ArrayList<>());\n            }\n            ArrayList<String> keys = sdict.get(patterns[i]);\n            keys.add(colors[i]);\n            //begin to write code\n"
    },
    {
        "task_id": 75,
        "code_str": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                }\n            }\n            if (allDivisible) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(6, 24, 12), Arrays.asList(7, 9, 6), Arrays.asList(12, 18, 21));\n        assert solution.findTuples(testList1, 6).equals(Arrays.asList(Arrays.asList(6, 24, 12)));\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(5, 25, 30), Arrays.asList(4, 2, 3), Arrays.asList(7, 8, 9));\n        assert solution.findTuples(testList2, 5).equals(Arrays.asList(Arrays.asList(5, 25, 30)));\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(7, 9, 16), Arrays.asList(8, 16, 4), Arrays.asList(19, 17, 18));\n        assert solution.findTuples(testList3, 4).equals(Arrays.asList(Arrays.asList(8, 16, 4)));\n    }\n}\n",
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n",
        "java_prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
        "code_str_generate": "class Solution {\n    public static List<List<Integer>> findTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : testList) {\n            boolean allDivisible = true;\n            for (Integer ele : sub) {\n                if (ele % K != 0) {\n                    allDivisible = false;\n                    break;\n                    //begin to write code\n"
    },
    {
        "task_id": 76,
        "code_str": "class Solution {\n    public static double count_Squares(int m, int n) {\n        if(n < m) {\n            int temp = m;\n            m = n;\n            n = temp;\n        }\n        return ((m * (m + 1) * (2 * m + 1) / 6.0 + (n - m) * m * (m + 1) / 2.0));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Squares(4,3) == 20;\n        assert Solution.count_Squares(2,2) == 5;\n        assert Solution.count_Squares(1,1) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double count_Squares(int m, int n) {\n        if(n < m) {\n            int temp = m;\n            m = n;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the number of squares in a rectangle.",
        "code_str_generate": "class Solution {\n    public static double count_Squares(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of squares in a rectangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if(n < m) {\n            int temp = m;\n            m = n;\n            //begin to write code\n"
    },
    {
        "task_id": 77,
        "code_str": "class Solution {\n    public static boolean isDiff(int n) {\n        return (n % 11 == 0);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.isDiff(12345);\n        assert Solution.isDiff(1212112);\n        assert !Solution.isDiff(1212);\n    }\n}\n",
        "prompt": "Write a python function to find the difference between sum of even and odd digits.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isDiff(int n) {\n        return (n % 11 == 0);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the difference between sum of even and odd digits.",
        "code_str_generate": "class Solution {\n    public static boolean isDiff(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the difference between sum of even and odd digits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (n % 11 == 0);\n        //begin to write code\n"
    },
    {
        "task_id": 78,
        "code_str": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        if (count % 2 != 0) {\n            ans += 1;\n        }\n        return ans;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countWithOddSetBits(5) == 3;\n        assert Solution.countWithOddSetBits(10) == 5;\n        assert Solution.countWithOddSetBits(15) == 8;\n    }\n}\n",
        "prompt": "Write a python function to find number of integers with odd number of set bits.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countWithOddSetBits(int n) {\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find number of integers with odd number of set bits.",
        "code_str_generate": "class Solution {\n    public static int countWithOddSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find number of integers with odd number of set bits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 != 0) {\n            return (n + 1) / 2;\n        }\n        int count = Integer.bitCount(n);\n        int ans = n / 2;\n        //begin to write code\n"
    },
    {
        "task_id": 79,
        "code_str": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.wordLen(\"Hadoop\") == false;\n        assert solution.wordLen(\"great\") == true;\n        assert solution.wordLen(\"structure\") == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the length of the word is odd or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean wordLen(String s) {\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the length of the word is odd or not.",
        "code_str_generate": "class Solution {\n    public boolean wordLen(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the length of the word is odd or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] words = s.split(\" \");\n        for (String word : words) {\n            if (word.length() % 2 != 0) {\n                return true;\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 80,
        "code_str": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.tetrahedralNumber(5) == 35.0;\n        assert Solution.tetrahedralNumber(6) == 56.0;\n        assert Solution.tetrahedralNumber(7) == 84.0;\n    }\n}\n",
        "prompt": "Write a function to find the nth tetrahedral number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double tetrahedralNumber(int n) {\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the nth tetrahedral number.",
        "code_str_generate": "class Solution {\n    public static double tetrahedralNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth tetrahedral number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (n * (n + 1) * (n + 2)) / 6.0;\n        //begin to write code\n"
    },
    {
        "task_id": 81,
        "code_str": "class Solution {\n    public static List<Pair<Integer, Integer>> zipTuples(int[] testTup1, int[] testTup2) {\n        List<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.length; i++) {\n            res.add(new Pair<>(testTup1[i], testTup2[i % testTup2.length]));\n        }\n        return res;\n    }\n}\n\nclass Pair<T, U> {\n    public final T first;\n    public final U second;\n\n    public Pair(T first, U second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Pair<?, ?> pair = (Pair<?, ?>) o;\n        return first.equals(pair.first) && second.equals(pair.second);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.zipTuples(new int[]{7, 8, 4, 5, 9, 10}, new int[]{1, 5, 6}).equals(\n                List.of(new Pair<>(7, 1), new Pair<>(8, 5), new Pair<>(4, 6), new Pair<>(5, 1), new Pair<>(9, 5), new Pair<>(10, 6)));\n        assert Solution.zipTuples(new int[]{8, 9, 5, 6, 10, 11}, new int[]{2, 6, 7}).equals(\n                List.of(new Pair<>(8, 2), new Pair<>(9, 6), new Pair<>(5, 7), new Pair<>(6, 2), new Pair<>(10, 6), new Pair<>(11, 7)));\n        assert Solution.zipTuples(new int[]{9, 10, 6, 7, 11, 12}, new int[]{3, 7, 8}).equals(\n                List.of(new Pair<>(9, 3), new Pair<>(10, 7), new Pair<>(6, 8), new Pair<>(7, 3), new Pair<>(11, 7), new Pair<>(12, 8)));\n    }\n}\n",
        "prompt": "Write a function to zip the two given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\nclass Pair<T, U> {\n    public static List<Pair<Integer, Integer>> zipTuples(int[] testTup1, int[] testTup2) {\n        List<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.length; i++) {\n            res.add(new Pair<>(testTup1[i], testTup2[i % testTup2.length]));\n        }\n        return res;\n    }\n}\n    public final T first;\n    public final U second;\n    public Pair(T first, U second) {\n    //begin to write code\n",
        "java_prompt": "Write a function to zip the two given tuples.",
        "code_str_generate": "class Solution {\nclass Pair<T, U> {\n    public static List<Pair<Integer, Integer>> zipTuples(int[] testTup1, int[] testTup2) {\n        List<Pair<Integer, Integer>> res = new ArrayList<>();\n        for (int i = 0; i < testTup1.length; i++) {\n            res.add(new Pair<>(testTup1[i], testTup2[i % testTup2.length]));\n        }\n        return res;\n    }\n}\n    public final T first;\n    public final U second;\n    public Pair(T first, U second) {\n    //begin to write code\n"
    },
    {
        "task_id": 82,
        "code_str": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        return volume;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.volumeSphere(10) - 4188.790204786391) < 0.0001;\n        assert Math.abs(Solution.volumeSphere(25) - 65449.84694978735) < 0.0001;\n        assert Math.abs(Solution.volumeSphere(20) - 33510.32163829113) < 0.0001;\n    }\n}\n",
        "prompt": "Write a function to find the volume of a sphere.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double volumeSphere(int r) {\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the volume of a sphere.",
        "code_str_generate": "class Solution {\n    public static double volumeSphere(int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = (4.0/3.0) * Math.PI * Math.pow(r, 3);\n        //begin to write code\n"
    },
    {
        "task_id": 83,
        "code_str": "class Solution {\n    public static char get_Char(String strr) {\n        int summ = 0;\n        for (int i = 0; i < strr.length(); i++) {\n            summ += (strr.charAt(i) - 'a' + 1);\n        }\n        if (summ % 26 == 0) {\n            return 'z';\n        } else {\n            summ = summ % 26;\n            return (char) ('a' + summ - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.get_Char(\"abc\") == 'f';\n        assert Solution.get_Char(\"gfg\") == 't';\n        assert Solution.get_Char(\"ab\") == 'c';\n    }\n}\n",
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static char get_Char(String strr) {\n        int summ = 0;\n        for (int i = 0; i < strr.length(); i++) {\n            summ += (strr.charAt(i) - 'a' + 1);\n        }\n        if (summ % 26 == 0) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the character made by adding all the characters of the given string.",
        "code_str_generate": "class Solution {\n    public static char get_Char(String strr) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the character made by adding all the characters of the given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int summ = 0;\n        for (int i = 0; i < strr.length(); i++) {\n            summ += (strr.charAt(i) - 'a' + 1);\n        }\n        if (summ % 26 == 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 84,
        "code_str": "class Solution {\n    public int sequence(int n) {\n        if (n == 1 || n == 2) {\n            return 1;\n        } else {\n            return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1));\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.sequence(10) == 6;\n        assert solution.sequence(2) == 1;\n        assert solution.sequence(3) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the n-th number in newman conway sequence.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int sequence(int n) {\n        if (n == 1 || n == 2) {\n            return 1;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the n-th number in newman conway sequence.",
        "code_str_generate": "class Solution {\n    public int sequence(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n-th number in newman conway sequence.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 1 || n == 2) {\n            return 1;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 85,
        "code_str": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        return surfacearea;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.surfaceareaSphere(10) - 1256.6370614359173) < 1e-9;\n        assert Math.abs(Solution.surfaceareaSphere(15) - 2827.4333882308138) < 1e-9;\n        assert Math.abs(Solution.surfaceareaSphere(20) - 5026.548245743669) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to find the surface area of a sphere.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double surfaceareaSphere(double r) {\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the surface area of a sphere.",
        "code_str_generate": "class Solution {\n    public static double surfaceareaSphere(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a sphere.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double surfacearea = 4 * Math.PI * r * r;\n        //begin to write code\n"
    },
    {
        "task_id": 86,
        "code_str": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.centeredHexagonalNumber(10) == 271;\n        assert Solution.centeredHexagonalNumber(2) == 7;\n        assert Solution.centeredHexagonalNumber(9) == 217;\n    }\n}\n",
        "prompt": "Write a function to find nth centered hexagonal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n",
        "java_prompt": "Write a function to find nth centered hexagonal number.",
        "code_str_generate": "class Solution {\n    public static int centeredHexagonalNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find nth centered hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 3 * n * (n - 1) + 1;\n        //begin to write code\n"
    },
    {
        "task_id": 87,
        "code_str": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        mergedDict.putAll(dict1);\n        return mergedDict;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        Map<String, String> dict1 = new HashMap<>();\n        dict1.put(\"R\", \"Red\");\n        dict1.put(\"B\", \"Black\");\n        dict1.put(\"P\", \"Pink\");\n\n        Map<String, String> dict2 = new HashMap<>();\n        dict2.put(\"G\", \"Green\");\n        dict2.put(\"W\", \"White\");\n\n        Map<String, String> dict3 = new HashMap<>();\n        dict3.put(\"O\", \"Orange\");\n        dict3.put(\"W\", \"White\");\n        dict3.put(\"B\", \"Black\");\n\n        Map<String, String> result = solution.mergeDictionariesThree(dict1, dict2, dict3);\n        System.out.println(result.equals(new HashMap<String, String>() {{\n            put(\"B\", \"Black\");\n            put(\"R\", \"Red\");\n            put(\"P\", \"Pink\");\n            put(\"G\", \"Green\");\n            put(\"W\", \"White\");\n            put(\"O\", \"Orange\");\n        }}));\n\n        dict3 = new HashMap<>();\n        dict3.put(\"L\", \"lavender\");\n        dict3.put(\"B\", \"Blue\");\n\n        result = solution.mergeDictionariesThree(dict1, dict2, dict3);\n        System.out.println(result.equals(new HashMap<String, String>() {{\n            put(\"W\", \"White\");\n            put(\"P\", \"Pink\");\n            put(\"B\", \"Black\");\n            put(\"R\", \"Red\");\n            put(\"G\", \"Green\");\n            put(\"L\", \"lavender\");\n        }}));\n\n        dict2 = new HashMap<>();\n        dict2.put(\"L\", \"lavender\");\n        dict2.put(\"B\", \"Blue\");\n\n        dict3 = new HashMap<>();\n        dict3.put(\"G\", \"Green\");\n        dict3.put(\"W\", \"White\");\n\n        result = solution.mergeDictionariesThree(dict1, dict2, dict3);\n        System.out.println(result.equals(new HashMap<String, String>() {{\n            put(\"B\", \"Black\");\n            put(\"P\", \"Pink\");\n            put(\"R\", \"Red\");\n            put(\"G\", \"Green\");\n            put(\"L\", \"lavender\");\n            put(\"W\", \"White\");\n        }}));\n    }\n}\n",
        "prompt": "Write a function to merge three dictionaries into a single expression.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n",
        "java_prompt": "Write a function to merge three dictionaries into a single expression.",
        "code_str_generate": "class Solution {\n    public static Map<String, String> mergeDictionariesThree(Map<String, String> dict1, Map<String, String> dict2, Map<String, String> dict3) {\n\n        /*\n        progame language:java\n        description:Write a function to merge three dictionaries into a single expression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, String> mergedDict = new HashMap<>();\n        mergedDict.putAll(dict3);\n        mergedDict.putAll(dict2);\n        //begin to write code\n"
    },
    {
        "task_id": 88,
        "code_str": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n        }\n        return freqCount;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Map<Integer, Integer> result1 = solution.freqCount(new int[]{10,10,10,10,20,20,20,20,40,40,50,50,30});\n        assert result1.get(10) == 4;\n        assert result1.get(20) == 4;\n        assert result1.get(40) == 2;\n        assert result1.get(50) == 2;\n        assert result1.get(30) == 1;\n\n        Map<Integer, Integer> result2 = solution.freqCount(new int[]{1,2,3,4,3,2,4,1,3,1,4});\n        assert result2.get(1) == 3;\n        assert result2.get(2) == 2;\n        assert result2.get(3) == 3;\n        assert result2.get(4) == 3;\n\n        Map<Integer, Integer> result3 = solution.freqCount(new int[]{5,6,7,4,9,10,4,5,6,7,9,5});\n        assert result3.get(10) == 1;\n        assert result3.get(5) == 3;\n        assert result3.get(6) == 2;\n        assert result3.get(7) == 2;\n        assert result3.get(4) == 2;\n        assert result3.get(9) == 2;\n    }\n}\n",
        "prompt": "Write a function to get the frequency of the elements in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n",
        "java_prompt": "Write a function to get the frequency of the elements in a list.",
        "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> freqCount(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to get the frequency of the elements in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> freqCount = new HashMap<>();\n        for (int i : list1) {\n            freqCount.put(i, freqCount.getOrDefault(i, 0) + 1);\n            //begin to write code\n"
    },
    {
        "task_id": 89,
        "code_str": "class Solution {\n    public static int closestNum(int N) {\n        return (N - 1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.closestNum(11) == 10;\n        assert Solution.closestNum(7) == 6;\n        assert Solution.closestNum(12) == 11;\n    }\n}\n",
        "prompt": "Write a function to find the closest smaller number than n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int closestNum(int N) {\n        return (N - 1);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the closest smaller number than n.",
        "code_str_generate": "class Solution {\n    public static int closestNum(int N) {\n\n        /*\n        progame language:java\n        description:Write a function to find the closest smaller number than n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (N - 1);\n        //begin to write code\n"
    },
    {
        "task_id": 90,
        "code_str": "class Solution {\n    public static int lenLog(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n            }\n        }\n        return max;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.lenLog(new String[]{\"python\",\"PHP\",\"bigdata\"}) == 7;\n        assert Solution.lenLog(new String[]{\"a\",\"ab\",\"abc\"}) == 3;\n        assert Solution.lenLog(new String[]{\"small\",\"big\",\"tall\"}) == 5;\n    }\n}\n",
        "prompt": "Write a python function to find the length of the longest word.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int lenLog(String[] list1) {\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the length of the longest word.",
        "code_str_generate": "class Solution {\n    public static int lenLog(String[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the length of the longest word.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max = list1[0].length();\n        for (String i : list1) {\n            if (i.length() > max) {\n                max = i.length();\n                //begin to write code\n"
    },
    {
        "task_id": 91,
        "code_str": "class Solution {\n    public boolean findSubstring(ArrayList<String> str1, String sub_str) {\n        for (String s : str1) {\n            if (s.contains(sub_str)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        ArrayList<String> list1 = new ArrayList<String>();\n        list1.add(\"red\");\n        list1.add(\"black\");\n        list1.add(\"white\");\n        list1.add(\"green\");\n        list1.add(\"orange\");\n        assert solution.findSubstring(list1, \"ack\") == true;\n        assert solution.findSubstring(list1, \"abc\") == false;\n        assert solution.findSubstring(list1, \"ange\") == true;\n    }\n}\n",
        "prompt": "Write a function to check if a substring is present in a given list of string values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean findSubstring(ArrayList<String> str1, String sub_str) {\n        for (String s : str1) {\n            if (s.contains(sub_str)) {\n                return true;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if a substring is present in a given list of string values.",
        "code_str_generate": "class Solution {\n    public boolean findSubstring(ArrayList<String> str1, String sub_str) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a substring is present in a given list of string values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (String s : str1) {\n            if (s.contains(sub_str)) {\n                return true;\n                //begin to write code\n"
    },
    {
        "task_id": 92,
        "code_str": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (int i = 2; i < n.length(); i++) {\n            if (n.charAt(i - 2) != n.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isUndulating(\"1212121\") == true;\n        assert Solution.isUndulating(\"1991\") == false;\n        assert Solution.isUndulating(\"121\") == true;\n    }\n}\n",
        "prompt": "Write a function to check whether the given number is undulating or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isUndulating(String n) {\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (int i = 2; i < n.length(); i++) {\n            if (n.charAt(i - 2) != n.charAt(i)) {\n            //begin to write code\n",
        "java_prompt": "Write a function to check whether the given number is undulating or not.",
        "code_str_generate": "class Solution {\n    public static boolean isUndulating(String n) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given number is undulating or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n.length() <= 2) {\n            return false;\n        }\n        for (int i = 2; i < n.length(); i++) {\n            if (n.charAt(i - 2) != n.charAt(i)) {\n            //begin to write code\n"
    },
    {
        "task_id": 93,
        "code_str": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n            return a;\n        } else {\n            return a * power(a, b - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.power(3,4) == 81;\n        assert Solution.power(2,3) == 8;\n        assert Solution.power(5,5) == 3125;\n    }\n}\n",
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int power(int a, int b) {\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate the value of 'a' to the power 'b'.",
        "code_str_generate": "class Solution {\n    public static int power(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the value of 'a' to the power 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (b == 0) {\n            return 1;\n        } else if (a == 0) {\n            return 0;\n        } else if (b == 1) {\n        //begin to write code\n"
    },
    {
        "task_id": 94,
        "code_str": "class Solution {\n    public static String index_minimum(List<Pair<String, Integer>> test_list) {\n        Pair<String, Integer> minPair = Collections.min(test_list, Comparator.comparing(Pair::getValue));\n        return minPair.getKey();\n    }\n    \n    public static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Solution.Pair<String, Integer>> test_list1 = new ArrayList<>();\n        test_list1.add(new Solution.Pair<>(\"Rash\", 143));\n        test_list1.add(new Solution.Pair<>(\"Manjeet\", 200));\n        test_list1.add(new Solution.Pair<>(\"Varsha\", 100));\n        assert Solution.index_minimum(test_list1).equals(\"Varsha\");\n\n        List<Solution.Pair<String, Integer>> test_list2 = new ArrayList<>();\n        test_list2.add(new Solution.Pair<>(\"Yash\", 185));\n        test_list2.add(new Solution.Pair<>(\"Dawood\", 125));\n        test_list2.add(new Solution.Pair<>(\"Sanya\", 175));\n        assert Solution.index_minimum(test_list2).equals(\"Dawood\");\n\n        List<Solution.Pair<String, Integer>> test_list3 = new ArrayList<>();\n        test_list3.add(new Solution.Pair<>(\"Sai\", 345));\n        test_list3.add(new Solution.Pair<>(\"Salman\", 145));\n        test_list3.add(new Solution.Pair<>(\"Ayesha\", 96));\n        assert Solution.index_minimum(test_list3).equals(\"Ayesha\");\n    }\n}\n",
        "prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String index_minimum(List<Pair<String, Integer>> test_list) {\n        Pair<String, Integer> minPair = Collections.min(test_list, Comparator.comparing(Pair::getValue));\n        return minPair.getKey();\n    }\n    public static class Pair<K, V> {\n        private K key;\n        private V value;\n        public Pair(K key, V value) {\n            this.key = key;\n            //begin to write code\n",
        "java_prompt": "Write a function to extract the index minimum value record from the given tuples.",
        "code_str_generate": "class Solution {\n    public static String index_minimum(List<Pair<String, Integer>> test_list) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the index minimum value record from the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pair<String, Integer> minPair = Collections.min(test_list, Comparator.comparing(Pair::getValue));\n        return minPair.getKey();\n    }\n    public static class Pair<K, V> {\n        private K key;\n        private V value;\n        public Pair(K key, V value) {\n            this.key = key;\n            //begin to write code\n"
    },
    {
        "task_id": 95,
        "code_str": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n            }\n        }\n        return minLength;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.findMinLength(Arrays.asList(Arrays.asList(1), Arrays.asList(1, 2))) == 1;\n        assert Solution.findMinLength(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(1, 2, 3), Arrays.asList(1, 2, 3, 4))) == 2;\n        assert Solution.findMinLength(Arrays.asList(Arrays.asList(3, 3, 3), Arrays.asList(4, 4, 4, 4))) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the minimum length of sublist.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the minimum length of sublist.",
        "code_str_generate": "class Solution {\n    public static int findMinLength(List<List<Integer>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum length of sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minLength = Integer.MAX_VALUE;\n        for (List<Integer> sublist : lst) {\n            if (sublist.size() < minLength) {\n                minLength = sublist.size();\n                //begin to write code\n"
    },
    {
        "task_id": 96,
        "code_str": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                x++;\n            }\n        }\n        return x;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.divisor(15) == 4;\n        assert Solution.divisor(12) == 6;\n        assert Solution.divisor(9) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the number of divisors of a given integer.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int divisor(int n) {\n        int x = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                x++;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the number of divisors of a given integer.",
        "code_str_generate": "class Solution {\n    public static int divisor(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the number of divisors of a given integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int x = 0;\n        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n                x++;\n                //begin to write code\n"
    },
    {
        "task_id": 97,
        "code_str": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n                dicData.put(num, dicData.get(num) + 1);\n            } else {\n                dicData.put(num, 1);\n            }\n        }\n        return dicData;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> list1 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 8, 9, 5));\n        Map<Integer, Integer> result1 = solution.frequencyLists(list1);\n        assert result1.equals(new HashMap<Integer, Integer>() {{\n            put(1, 1);\n            put(2, 3);\n            put(3, 1);\n            put(4, 1);\n            put(5, 2);\n            put(6, 1);\n            put(7, 1);\n            put(8, 1);\n            put(9, 1);\n        }});\n\n        List<List<Integer>> list2 = Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8), Arrays.asList(9, 10, 11, 12));\n        Map<Integer, Integer> result2 = solution.frequencyLists(list2);\n        assert result2.equals(new HashMap<Integer, Integer>() {{\n            put(1, 1);\n            put(2, 1);\n            put(3, 1);\n            put(4, 1);\n            put(5, 1);\n            put(6, 1);\n            put(7, 1);\n            put(8, 1);\n            put(9, 1);\n            put(10, 1);\n            put(11, 1);\n            put(12, 1);\n        }});\n\n        List<List<Integer>> list3 = Arrays.asList(Arrays.asList(20, 30, 40, 17), Arrays.asList(18, 16, 14, 13), Arrays.asList(10, 20, 30, 40));\n        Map<Integer, Integer> result3 = solution.frequencyLists(list3);\n        assert result3.equals(new HashMap<Integer, Integer>() {{\n            put(20, 2);\n            put(30, 2);\n            put(40, 2);\n            put(17, 1);\n            put(18, 1);\n            put(16, 1);\n            put(14, 1);\n            put(13, 1);\n            put(10, 1);\n        }});\n    }\n}\n",
        "prompt": "Write a function to find frequency count of list of lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find frequency count of list of lists.",
        "code_str_generate": "class Solution {\n    public static Map<Integer, Integer> frequencyLists(List<List<Integer>> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find frequency count of list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> flatList = new ArrayList<>();\n        for (List<Integer> sublist : list1) {\n            flatList.addAll(sublist);\n        }\n        Map<Integer, Integer> dicData = new HashMap<>();\n        for (Integer num : flatList) {\n            if (dicData.containsKey(num)) {\n            //begin to write code\n"
    },
    {
        "task_id": 98,
        "code_str": "class Solution {\n    public static double multiplyNum(int[] numbers) {\n        int total = 1;\n        for (int number : numbers) {\n            total *= number;\n        }\n        return (double) total / numbers.length;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.multiplyNum(new int[]{8, 2, 3, -1, 7}) == -67.2;\n        assert Solution.multiplyNum(new int[]{-10, -20, -30}) == -2000.0;\n        assert Solution.multiplyNum(new int[]{19, 15, 18}) == 1710.0;\n    }\n}\n",
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double multiplyNum(int[] numbers) {\n        int total = 1;\n        for (int number : numbers) {\n            total *= number;\n            //begin to write code\n",
        "java_prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
        "code_str_generate": "class Solution {\n    public static double multiplyNum(int[] numbers) {\n\n        /*\n        progame language:java\n        description:Write a function to multiply all the numbers in a list and divide with the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 1;\n        for (int number : numbers) {\n            total *= number;\n            //begin to write code\n"
    },
    {
        "task_id": 99,
        "code_str": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.decimalToBinary(8).equals(\"1000\");\n        assert Solution.decimalToBinary(18).equals(\"10010\");\n        assert Solution.decimalToBinary(7).equals(\"111\");\n    }\n}\n",
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String decimalToBinary(int n) {\n        return Integer.toBinaryString(n);\n        //begin to write code\n",
        "java_prompt": "Write a function to convert the given decimal number to its binary equivalent.",
        "code_str_generate": "class Solution {\n    public static String decimalToBinary(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given decimal number to its binary equivalent.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Integer.toBinaryString(n);\n        //begin to write code\n"
    },
    {
        "task_id": 100,
        "code_str": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static boolean isPalindrome(long num) {\n        String numStr = Long.toString(num);\n        String reversedStr = new StringBuilder(numStr).reverse().toString();\n        return numStr.equals(reversedStr);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.nextSmallestPalindrome(99) == 101;\n        assert Solution.nextSmallestPalindrome(1221) == 1331;\n        assert Solution.nextSmallestPalindrome(120) == 121;\n    }\n}\n",
        "prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the next smallest palindrome of a specified number.",
        "code_str_generate": "class Solution {\n    public static long nextSmallestPalindrome(long num) {\n\n        /*\n        progame language:java\n        description:Write a function to find the next smallest palindrome of a specified number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (long i = num + 1; i < Long.MAX_VALUE; i++) {\n            if (isPalindrome(i)) {\n                return i;\n            }\n        }\n        return -1;\n        //begin to write code\n"
    },
    {
        "task_id": 101,
        "code_str": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n        return arr[k - 1];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.kth_element(new int[]{12,3,5,7,19}, 5, 2) == 5;\n        assert solution.kth_element(new int[]{17,24,8,23}, 4, 3) == 23;\n        assert solution.kth_element(new int[]{16,21,25,36,4}, 5, 4) == 25;\n    }\n}",
        "prompt": "Write a function to find the kth element in the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    //begin to write code\n",
        "java_prompt": "Write a function to find the kth element in the given array.",
        "code_str_generate": "class Solution {\n    public int kth_element(int[] arr, int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the kth element in the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n - i - 1; j++) {\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    //begin to write code\n"
    },
    {
        "task_id": 102,
        "code_str": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.snakeToCamel(\"python_program\").equals(\"PythonProgram\");\n        assert Solution.snakeToCamel(\"python_language\").equals(\"PythonLanguage\");\n        assert Solution.snakeToCamel(\"programming_language\").equals(\"ProgrammingLanguage\");\n    }\n}\n",
        "prompt": "Write a function to convert snake case string to camel case string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to convert snake case string to camel case string.",
        "code_str_generate": "class Solution {\n    public static String snakeToCamel(String word) {\n\n        /*\n        progame language:java\n        description:Write a function to convert snake case string to camel case string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 103,
        "code_str": "class Solution {\n    public static int eulerian_num(int n, int m) {\n        if (m >= n || n == 0) {\n            return 0;\n        }\n        if (m == 0) {\n            return 1;\n        }\n        return ((n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.eulerian_num(3, 1) == 4;\n        assert Solution.eulerian_num(4, 1) == 11;\n        assert Solution.eulerian_num(5, 3) == 26;\n    }\n}\n",
        "prompt": "Write a function to find eulerian number a(n, m).",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int eulerian_num(int n, int m) {\n        if (m >= n || n == 0) {\n            return 0;\n        }\n        if (m == 0) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find eulerian number a(n, m).",
        "code_str_generate": "class Solution {\n    public static int eulerian_num(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a function to find eulerian number a(n, m).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (m >= n || n == 0) {\n            return 0;\n        }\n        if (m == 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 104,
        "code_str": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            result.add(sublist);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<String>> input1 = Arrays.asList(Arrays.asList(\"green\", \"orange\"), Arrays.asList(\"black\", \"white\"), Arrays.asList(\"white\", \"black\", \"orange\"));\n        List<List<String>> expected1 = Arrays.asList(Arrays.asList(\"green\", \"orange\"), Arrays.asList(\"black\", \"white\"), Arrays.asList(\"black\", \"orange\", \"white\"));\n        assert solution.sortSublists(input1).equals(expected1);\n\n        List<List<String>> input2 = Arrays.asList(Arrays.asList(\" red \",\"green\" ),Arrays.asList(\"blue \",\" black\"),Arrays.asList(\" orange\",\"brown\"));\n        List<List<String>> expected2 = Arrays.asList(Arrays.asList(\" red \", \"green\"), Arrays.asList(\" black\", \"blue \"), Arrays.asList(\" orange\", \"brown\"));\n        assert solution.sortSublists(input2).equals(expected2);\n\n        List<List<String>> input3 = Arrays.asList(Arrays.asList(\"zilver\",\"gold\"), Arrays.asList(\"magnesium\",\"aluminium\"), Arrays.asList(\"steel\", \"bronze\"));\n        List<List<String>> expected3 = Arrays.asList(Arrays.asList(\"gold\", \"zilver\"),Arrays.asList(\"aluminium\", \"magnesium\"), Arrays.asList(\"bronze\", \"steel\"));\n        assert solution.sortSublists(input3).equals(expected3);\n    }\n}\n",
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            //begin to write code\n",
        "java_prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
        "code_str_generate": "class Solution {\n    public List<List<String>> sortSublists(List<List<String>> inputList) {\n\n        /*\n        progame language:java\n        description:Write a function to sort each sublist of strings in a given list of lists using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> sublist : inputList) {\n            Collections.sort(sublist);\n            //begin to write code\n"
    },
    {
        "task_id": 105,
        "code_str": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.count(new boolean[]{true, false, true}) == 2;\n        assert Solution.count(new boolean[]{false, false}) == 0;\n        assert Solution.count(new boolean[]{true, true, true}) == 3;\n    }\n}\n",
        "prompt": "Write a python function to count true booleans in the given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count(boolean[] lst) {\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count true booleans in the given list.",
        "code_str_generate": "class Solution {\n    public static int count(boolean[] lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to count true booleans in the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (boolean b : lst) {\n            if (b) {\n                sum++;\n                //begin to write code\n"
    },
    {
        "task_id": 106,
        "code_str": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Object> testList1 = Arrays.asList(5, 6, 7);\n        List<Object> testTup1 = Arrays.asList(9, 10);\n        assert Solution.addLists(testList1, testTup1).equals(Arrays.asList(9, 10, 5, 6, 7));\n\n        List<Object> testList2 = Arrays.asList(6, 7, 8);\n        List<Object> testTup2 = Arrays.asList(10, 11);\n        assert Solution.addLists(testList2, testTup2).equals(Arrays.asList(10, 11, 6, 7, 8));\n\n        List<Object> testList3 = Arrays.asList(7, 8, 9);\n        List<Object> testTup3 = Arrays.asList(11, 12);\n        assert Solution.addLists(testList3, testTup3).equals(Arrays.asList(11, 12, 7, 8, 9));\n    }\n}\n",
        "prompt": "Write a function to add the given list to the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n",
        "java_prompt": "Write a function to add the given list to the given tuples.",
        "code_str_generate": "class Solution {\n    public static List<Object> addLists(List<Object> testList, List<Object> testTup) {\n\n        /*\n        progame language:java\n        description:Write a function to add the given list to the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> res = new ArrayList<>(testTup);\n        res.addAll(testList);\n        //begin to write code\n"
    },
    {
        "task_id": 107,
        "code_str": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                        count += 1;\n                    }\n                    k = k / 16;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Hexadecimal(10,15) == 6;\n        assert Solution.count_Hexadecimal(2,4) == 0;\n        assert Solution.count_Hexadecimal(15,16) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count hexadecimal numbers for a given range.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n",
        "java_prompt": "Write a java function to count hexadecimal numbers for a given range.",
        "code_str_generate": "class Solution {\n    public static int count_Hexadecimal(int L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to count hexadecimal numbers for a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = L; i <= R; i++) {\n            if (i >= 10 && i <= 15) {\n                count += 1;\n            } else if (i > 15) {\n                int k = i;\n                while (k != 0) {\n                    if (k % 16 >= 10) {\n                    //begin to write code\n"
    },
    {
        "task_id": 108,
        "code_str": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        result.addAll(num2);\n        result.addAll(num3);\n        Collections.sort(result);\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> num1 = Arrays.asList(25, 24, 15, 4, 5, 29, 110);\n        List<Integer> num2 = Arrays.asList(19, 20, 11, 56, 25, 233, 154);\n        List<Integer> num3 = Arrays.asList(24, 26, 54, 48);\n        List<Integer> result = solution.merge_sorted_list(num1, num2, num3);\n        assert result.equals(Arrays.asList(4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233));\n\n        num1 = Arrays.asList(1, 3, 5, 6, 8, 9);\n        num2 = Arrays.asList(2, 5, 7, 11);\n        num3 = Arrays.asList(1, 4, 7, 8, 12);\n        result = solution.merge_sorted_list(num1, num2, num3);\n        assert result.equals(Arrays.asList(1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12));\n\n        num1 = Arrays.asList(18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1);\n        num2 = Arrays.asList(25, 35, 22, 85, 14, 65, 75, 25, 58);\n        num3 = Arrays.asList(12, 74, 9, 50, 61, 41);\n        result = solution.merge_sorted_list(num1, num2, num3);\n        assert result.equals(Arrays.asList(1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85));\n    }\n}\n",
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        //begin to write code\n",
        "java_prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
        "code_str_generate": "class Solution {\n    public List<Integer> merge_sorted_list(List<Integer> num1, List<Integer> num2, List<Integer> num3) {\n\n        /*\n        progame language:java\n        description:Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(num1);\n        Collections.sort(num2);\n        Collections.sort(num3);\n        List<Integer> result = new ArrayList<>();\n        result.addAll(num1);\n        //begin to write code\n"
    },
    {
        "task_id": 109,
        "code_str": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.odd_Equivalent(\"011001\",6) == 3;\n        assert Solution.odd_Equivalent(\"11011\",5) == 4;\n        assert Solution.odd_Equivalent(\"1010\",4) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the count of rotations of a binary string with odd value.",
        "code_str_generate": "class Solution {\n    public static int odd_Equivalent(String s, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the count of rotations of a binary string with odd value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '1') {\n                count = count + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 110,
        "code_str": "class Solution {\n    public List<int[]> extractMissing(int[][] testList, int strtVal, int stopVal) {\n        List<int[]> res = new ArrayList<>();\n        for (int[] sub : testList) {\n            if (sub[0] > strtVal) {\n                res.add(new int[]{strtVal, sub[0]});\n                strtVal = sub[1];\n            }\n            if (strtVal < stopVal) {\n                res.add(new int[]{strtVal, stopVal});\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n        public static boolean areListsEqual(List<int[]> list1, List<int[]> list2) {\n        if (list1.size() != list2.size()) {\n            return false;\n        }\n        \n        for (int i = 0; i < list1.size(); i++) {\n            if (!Arrays.equals(list1.get(i), list2.get(i))) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<int[]> res1 = solution.extractMissing(new int[][]{{6, 9}, {15, 34}, {48, 70}}, 2, 100);\n        List<int[]> res2 = solution.extractMissing(new int[][]{{7, 2}, {15, 19}, {38, 50}}, 5, 60);\n        List<int[]> res3 = solution.extractMissing(new int[][]{{7, 2}, {15, 19}, {38, 50}}, 1, 52);\n        List<int[]> a = List.of(new int[][]{{2, 6}, {9, 100}, {9, 15}, {34, 100}, {34, 48}, {70, 100}});\n        List<int[]> b = List.of(new int[][]{{5, 7}, {2, 60}, {2, 15}, {19, 60}, {19, 38}, {50, 60}});\n        List<int[]> c = List.of(new int[][]{{1, 7}, {2, 52}, {2, 15}, {19, 52}, {19, 38}, {50, 52}});\n        assert areListsEqual(res1, a);  \n        assert areListsEqual(res2, b);\n        assert areListsEqual(res3, c);   \n}\n}",
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<int[]> extractMissing(int[][] testList, int strtVal, int stopVal) {\n        List<int[]> res = new ArrayList<>();\n        for (int[] sub : testList) {\n            if (sub[0] > strtVal) {\n                res.add(new int[]{strtVal, sub[0]});\n                strtVal = sub[1];\n            }\n            //begin to write code\n",
        "java_prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
        "code_str_generate": "class Solution {\n    public List<int[]> extractMissing(int[][] testList, int strtVal, int stopVal) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<int[]> res = new ArrayList<>();\n        for (int[] sub : testList) {\n            if (sub[0] > strtVal) {\n                res.add(new int[]{strtVal, sub[0]});\n                strtVal = sub[1];\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 111,
        "code_str": "class Solution {\n    public List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n        }\n        return new ArrayList<>(resultSet);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(12, 18, 23, 25, 45), Arrays.asList(7, 12, 18, 24, 28), Arrays.asList(1, 5, 8, 12, 15, 16, 18));\n        List<Integer> result1 = solution.commonInNestedLists(test1);\n        assert result1.equals(Arrays.asList(18, 12));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(12, 5, 23, 25, 45), Arrays.asList(7, 11, 5, 23, 28), Arrays.asList(1, 5, 8, 18, 23, 16));\n        List<Integer> result2 = solution.commonInNestedLists(test2);\n        assert result2.equals(Arrays.asList(5,23));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(2, 3,4, 1), Arrays.asList(4, 5), Arrays.asList(6,4, 8),Arrays.asList(4, 5), Arrays.asList(6, 8,4));\n        List<Integer> result3 = solution.commonInNestedLists(test3);\n        assert result3.equals(Arrays.asList(4));\n    }\n}\n",
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            //begin to write code\n",
        "java_prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
        "code_str_generate": "class Solution {\n    public List<Integer> commonInNestedLists(List<List<Integer>> nestedList) {\n\n        /*\n        progame language:java\n        description:Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> resultSet = new HashSet<>(nestedList.get(0));\n        for (List<Integer> list : nestedList) {\n            resultSet.retainAll(new HashSet<>(list));\n            //begin to write code\n"
    },
    {
        "task_id": 112,
        "code_str": "class Solution {\n    public static int perimeter(int diameter, int height) {\n        return 2 * (diameter + height);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.perimeter(2,4) == 12;\n        assert Solution.perimeter(1,2) == 6;\n        assert Solution.perimeter(3,1) == 8;\n    }\n}\n",
        "prompt": "Write a python function to find the perimeter of a cylinder.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int perimeter(int diameter, int height) {\n        return 2 * (diameter + height);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the perimeter of a cylinder.",
        "code_str_generate": "class Solution {\n    public static int perimeter(int diameter, int height) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the perimeter of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 2 * (diameter + height);\n        //begin to write code\n"
    },
    {
        "task_id": 113,
        "code_str": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n            } else if (text.matches(\"[+-][0-9]+\")) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.checkInteger(\"python\");\n        assert Solution.checkInteger(\"1\");\n        assert Solution.checkInteger(\"12345\");\n    }\n}\n",
        "prompt": "Write a function to check if a string represents an integer or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Boolean checkInteger(String text) {\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if a string represents an integer or not.",
        "code_str_generate": "class Solution {\n    public static Boolean checkInteger(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a string represents an integer or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        text = text.trim();\n        if (text.length() < 1) {\n            return null;\n        } else {\n            if (text.matches(\"[0-9]+\")) {\n                return true;\n                //begin to write code\n"
    },
    {
        "task_id": 114,
        "code_str": "class Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n            List<Integer> temp = new ArrayList<>(entry.getKey());\n            temp.add(entry.getValue());\n            res.add(temp);\n        }\n        return res.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(6, 5, 8), Arrays.asList(2, 7), Arrays.asList(6, 5, 8), Arrays.asList(6, 5, 8), Arrays.asList(9), Arrays.asList(2, 7));\n        assert solution.assignFreq(testList1).equals(\"[[2, 7, 2], [6, 5, 8, 3], [9, 1]]\");\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(4, 2, 4), Arrays.asList(7, 1), Arrays.asList(4, 8), Arrays.asList(4, 2, 4), Arrays.asList(9, 2), Arrays.asList(7, 1));\n        assert solution.assignFreq(testList2).equals(\"[[4, 2, 4, 2], [4, 8, 1], [9, 2, 1], [7, 1, 2]]\");\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(11, 13, 10), Arrays.asList(17, 21), Arrays.asList(4, 2, 3), Arrays.asList(17, 21), Arrays.asList(9, 2), Arrays.asList(4, 2, 3));\n        assert solution.assignFreq(testList3).equals(\"[[4, 2, 3, 2], [17, 21, 2], [11, 13, 10, 1], [9, 2, 1]]\");\n    \n    }\n}",
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to assign frequency to each tuple in the given tuple list.",
        "code_str_generate": "class Solution {\n    public static String assignFreq(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to assign frequency to each tuple in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> counter = new HashMap<>();\n        for (List<Integer> key : testList) {\n            counter.put(key, counter.getOrDefault(key, 0) + 1);\n        }\n        List<List<Integer>> res = new ArrayList<>();\n        for (Map.Entry<List<Integer>, Integer> entry : counter.entrySet()) {\n        //begin to write code\n"
    },
    {
        "task_id": 115,
        "code_str": "class Solution {\n    public static boolean emptyDit(List<Map<Object, Object>> list1) {\n        for (Map<Object, Object> d : list1) {\n            if (!d.isEmpty()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Map<Object, Object>> list1 = new ArrayList<>();\n        list1.add(new HashMap<>());\n        list1.add(new HashMap<>());\n        list1.add(new HashMap<>());\n        assert Solution.emptyDit(list1) == true;\n\n        list1.clear();\n        Map<Object, Object> map = new HashMap<>();\n        map.put(1, 2);\n        list1.add(map);\n        list1.add(new HashMap<>());\n        list1.add(new HashMap<>());\n        assert Solution.emptyDit(list1) == false;\n\n        list1.clear();\n        assert Solution.emptyDit(list1) == true;\n    }\n}\n",
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean emptyDit(List<Map<Object, Object>> list1) {\n        for (Map<Object, Object> d : list1) {\n            if (!d.isEmpty()) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check whether all dictionaries in a list are empty or not.",
        "code_str_generate": "class Solution {\n    public static boolean emptyDit(List<Map<Object, Object>> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether all dictionaries in a list are empty or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Map<Object, Object> d : list1) {\n            if (!d.isEmpty()) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 116,
        "code_str": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.tupleToInt(new int[]{1,2,3}) == 123;\n        assert Solution.tupleToInt(new int[]{4,5,6}) == 456;\n        assert Solution.tupleToInt(new int[]{5,6,7}) == 567;\n    }\n}\n",
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int tupleToInt(int[] nums) {\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n",
        "java_prompt": "Write a function to convert a given tuple of positive integers into an integer.",
        "code_str_generate": "class Solution {\n    public static int tupleToInt(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given tuple of positive integers into an integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int num : nums) {\n            sb.append(num);\n            //begin to write code\n"
    },
    {
        "task_id": 117,
        "code_str": "class Solution {\n    public static List<String> listToFloat(List<List<String>> testList) {\n        List<String> res = new ArrayList<>();\n        for (List<String> tup : testList) {\n            List<Float> temp = new ArrayList<>();\n            for (String ele : tup) {\n                if (!Character.isDigit(ele.charAt(0)) && ele.charAt(0) != '.') {\n                    temp.add(Float.parseFloat(ele));\n                } else {\n                    temp.add(Float.parseFloat(ele));\n                }\n            }\n            res.add(\"(\" + temp.get(0) + \", \" + temp.get(1) + \")\");\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<String>> testList1 = new ArrayList<>();\n        testList1.add(Arrays.asList(\"3\", \"4\"));\n        testList1.add(Arrays.asList(\"1\", \"26.45\"));\n        testList1.add(Arrays.asList(\"7.32\", \"8\"));\n        testList1.add(Arrays.asList(\"4\", \"8\"));\n        assert solution.listToFloat(testList1).equals(Arrays.asList(\"(3.0, 4.0)\", \"(1.0, 26.45)\", \"(7.32, 8.0)\", \"(4.0, 8.0)\"));\n\n        List<List<String>> testList2 = new ArrayList<>();\n        testList2.add(Arrays.asList(\"4\", \"4\"));\n        testList2.add(Arrays.asList(\"2\", \"27\"));\n        testList2.add(Arrays.asList(\"4.12\", \"9\"));\n        testList2.add(Arrays.asList(\"7\", \"11\"));\n        assert solution.listToFloat(testList2).equals(Arrays.asList(\"(4.0, 4.0)\", \"(2.0, 27.0)\", \"(4.12, 9.0)\", \"(7.0, 11.0)\"));\n\n        List<List<String>> testList3 = new ArrayList<>();\n        testList3.add(Arrays.asList(\"6\", \"78\"));\n        testList3.add(Arrays.asList(\"5\", \"26.45\"));\n        testList3.add(Arrays.asList(\"1.33\", \"4\"));\n        testList3.add(Arrays.asList(\"82\", \"13\"));\n        assert solution.listToFloat(testList3).equals(Arrays.asList(\"(6.0, 78.0)\", \"(5.0, 26.45)\", \"(1.33, 4.0)\", \"(82.0, 13.0)\"));\n    }\n}\n",
        "prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> listToFloat(List<List<String>> testList) {\n        List<String> res = new ArrayList<>();\n        for (List<String> tup : testList) {\n            List<Float> temp = new ArrayList<>();\n            for (String ele : tup) {\n                if (!Character.isDigit(ele.charAt(0)) && ele.charAt(0) != '.') {\n                    temp.add(Float.parseFloat(ele));\n                } else {\n                //begin to write code\n",
        "java_prompt": "Write a function to convert all possible convertible elements in the list to float.",
        "code_str_generate": "class Solution {\n    public static List<String> listToFloat(List<List<String>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to convert all possible convertible elements in the list to float.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> res = new ArrayList<>();\n        for (List<String> tup : testList) {\n            List<Float> temp = new ArrayList<>();\n            for (String ele : tup) {\n                if (!Character.isDigit(ele.charAt(0)) && ele.charAt(0) != '.') {\n                    temp.add(Float.parseFloat(ele));\n                } else {\n                //begin to write code\n"
    },
    {
        "task_id": 118,
        "code_str": "class Solution {\n    public static List<String> stringToList(String str) {\n        return Arrays.asList(str.split(\" \"));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.stringToList(\"python programming\").equals(Arrays.asList(\"python\", \"programming\"));\n        assert Solution.stringToList(\"lists tuples strings\").equals(Arrays.asList(\"lists\", \"tuples\", \"strings\"));\n        assert Solution.stringToList(\"write a program\").equals(Arrays.asList(\"write\", \"a\", \"program\"));\n    }\n}\n",
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> stringToList(String str) {\n        return Arrays.asList(str.split(\" \"));\n        //begin to write code\n",
        "java_prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
        "code_str_generate": "class Solution {\n    public static List<String> stringToList(String str) {\n\n        /*\n        progame language:java\n        description:[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.asList(str.split(\" \"));\n        //begin to write code\n"
    },
    {
        "task_id": 119,
        "code_str": "class Solution {\n    public int search(int arr[], int n) {\n        int XOR = 0;\n        for (int i = 0; i < n; i++) {\n            XOR = XOR ^ arr[i];\n        }\n        return XOR;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.search(new int[]{1,1,2,2,3},5) == 3;\n        assert solution.search(new int[]{1,1,3,3,4,4,5,5,7,7,8},11) == 8;\n        assert solution.search(new int[]{1,2,2,3,3,4,4},7) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find the element that appears only once in a sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int search(int arr[], int n) {\n        int XOR = 0;\n        for (int i = 0; i < n; i++) {\n            XOR = XOR ^ arr[i];\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the element that appears only once in a sorted array.",
        "code_str_generate": "class Solution {\n    public int search(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the element that appears only once in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int XOR = 0;\n        for (int i = 0; i < n; i++) {\n            XOR = XOR ^ arr[i];\n            //begin to write code\n"
    },
    {
        "task_id": 120,
        "code_str": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n        }\n        return result_max;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxProductTuple(new int[][]{{2, 7}, {2, 6}, {1, 8}, {4, 9}}) == 36;\n        assert solution.maxProductTuple(new int[][]{{10,20}, {15,2}, {5,10}}) == 200;\n        assert solution.maxProductTuple(new int[][]{{11,44}, {10,15}, {20,5}, {12, 9}}) == 484;\n    }\n}\n",
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n",
        "java_prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.",
        "code_str_generate": "class Solution {\n    public static int maxProductTuple(int[][] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result_max = Integer.MIN_VALUE;\n        for (int[] pair : list1) {\n            result_max = Math.max(result_max, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n"
    },
    {
        "task_id": 121,
        "code_str": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n            return false;\n        }\n        return checkTriplet(A, n - 1, sum - A[n - 1], count + 1) ||\n               checkTriplet(A, n - 1, sum, count);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.checkTriplet(new int[]{2, 7, 4, 0, 9, 5, 1, 3}, 8, 6, 0) == true;\n        assert solution.checkTriplet(new int[]{1, 4, 5, 6, 7, 8, 5, 9}, 8, 6, 0) == false;\n        assert solution.checkTriplet(new int[]{10, 4, 2, 3, 5}, 5, 15, 0) == true;\n    }\n}\n",
        "prompt": "Write a function to find the triplet with sum of the given array",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the triplet with sum of the given array",
        "code_str_generate": "class Solution {\n    public boolean checkTriplet(int[] A, int n, int sum, int count) {\n\n        /*\n        progame language:java\n        description:Write a function to find the triplet with sum of the given array\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (count == 3 && sum == 0) {\n            return true;\n        }\n        if (count == 3 || n == 0 || sum < 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 122,
        "code_str": "class Solution {\n    private static final int MAX = 3000;\n\n    public static int smartNumber(int n) {\n        int[] primes = new int[MAX];\n        int[] result = new int[MAX];\n        int count = 0;\n        for (int i = 2; i < MAX; i++) {\n            if (primes[i] == 0) {\n                primes[i] = 1;\n                int j = i * 2;\n                while (j < MAX) {\n                    primes[j] -= 1;\n                    if ((primes[j] + 3) == 0) {\n                        result[count++] = j;\n                    }\n                    j = j + i;\n                }\n            }\n        }\n        Arrays.sort(result, 0, count);\n        return result[n - 1];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.smartNumber(1) == 30;\n        assert Solution.smartNumber(50) == 273;\n        assert Solution.smartNumber(1000) == 2664;\n    }\n}\n",
        "prompt": "Write a function to find n\u2019th smart number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    private static final int MAX = 3000;\n    public static int smartNumber(int n) {\n        int[] primes = new int[MAX];\n        int[] result = new int[MAX];\n        int count = 0;\n        for (int i = 2; i < MAX; i++) {\n            if (primes[i] == 0) {\n                primes[i] = 1;\n                int j = i * 2;\n                while (j < MAX) {\n                    primes[j] -= 1;\n                    //begin to write code\n",
        "java_prompt": "Write a function to find n\u2019th smart number.",
        "code_str_generate": "class Solution {\n    private static final int MAX = 3000;\n    public static int smartNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find n\u2019th smart number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] primes = new int[MAX];\n        int[] result = new int[MAX];\n        int count = 0;\n        for (int i = 2; i < MAX; i++) {\n            if (primes[i] == 0) {\n                primes[i] = 1;\n                int j = i * 2;\n                while (j < MAX) {\n                    primes[j] -= 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 123,
        "code_str": "class Solution {\n    public static int amicableNumbersSum(int limit) {\n        if (limit < 1) {\n            throw new IllegalArgumentException(\"Input must be bigger than 0!\");\n        }\n        Set<Integer> amicables = new HashSet<>();\n        for (int num = 2; num <= limit; num++) {\n            if (amicables.contains(num)) {\n                continue;\n            }\n            int sumFact = sumOfFactors(num);\n            int sumFact2 = sumOfFactors(sumFact);\n            if (num == sumFact2 && num != sumFact) {\n                amicables.add(num);\n                amicables.add(sumFact2);\n            }\n        }\n        int sum = 0;\n        for (int num : amicables) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    private static int sumOfFactors(int num) {\n        int sum = 0;\n        for (int i = 1; i < num; i++) {\n            if (num % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.amicableNumbersSum(999) == 504;\n        assert Solution.amicableNumbersSum(9999) == 31626;\n        assert Solution.amicableNumbersSum(99) == 0;\n    }\n}\n",
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int amicableNumbersSum(int limit) {\n        if (limit < 1) {\n            throw new IllegalArgumentException(\"Input must be bigger than 0!\");\n        }\n        Set<Integer> amicables = new HashSet<>();\n        for (int num = 2; num <= limit; num++) {\n            if (amicables.contains(num)) {\n                continue;\n            }\n            int sumFact = sumOfFactors(num);\n            int sumFact2 = sumOfFactors(sumFact);\n            if (num == sumFact2 && num != sumFact) {\n                amicables.add(num);\n                amicables.add(sumFact2);\n            }\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to sum all amicable numbers from 1 to a specified number.",
        "code_str_generate": "class Solution {\n    public static int amicableNumbersSum(int limit) {\n\n        /*\n        progame language:java\n        description:Write a function to sum all amicable numbers from 1 to a specified number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (limit < 1) {\n            throw new IllegalArgumentException(\"Input must be bigger than 0!\");\n        }\n        Set<Integer> amicables = new HashSet<>();\n        for (int num = 2; num <= limit; num++) {\n            if (amicables.contains(num)) {\n                continue;\n            }\n            int sumFact = sumOfFactors(num);\n            int sumFact2 = sumOfFactors(sumFact);\n            if (num == sumFact2 && num != sumFact) {\n                amicables.add(num);\n                amicables.add(sumFact2);\n            }\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 124,
        "code_str": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.angleComplex(0,1) - 1.5707963267948966) < 1e-9;\n        assert Math.abs(Solution.angleComplex(2,1) - 0.4636476090008061) < 1e-9;\n        assert Math.abs(Solution.angleComplex(0,2) - 1.5707963267948966) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to get the angle of a complex number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double angleComplex(double a, double b) {\n        return Math.atan2(b, a);\n        //begin to write code\n",
        "java_prompt": "Write a function to get the angle of a complex number.",
        "code_str_generate": "class Solution {\n    public static double angleComplex(double a, double b) {\n\n        /*\n        progame language:java\n        description:Write a function to get the angle of a complex number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Math.atan2(b, a);\n        //begin to write code\n"
    },
    {
        "task_id": 125,
        "code_str": "class Solution {\n    public int findLength(String string, int n) {\n        int currentSum = 0;\n        int maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += (string.charAt(i) == '0' ? 1 : -1);\n            if (currentSum < 0) {\n                currentSum = 0;\n            }\n            maxSum = Math.max(currentSum, maxSum);\n        }\n        return maxSum > 0 ? maxSum : 0;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findLength(\"11000010001\", 11) == 6;\n        assert solution.findLength(\"10111\", 5) == 1;\n        assert solution.findLength(\"11011101100101\", 14) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findLength(String string, int n) {\n        int currentSum = 0;\n        int maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += (string.charAt(i) == '0' ? 1 : -1);\n            if (currentSum < 0) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
        "code_str_generate": "class Solution {\n    public int findLength(String string, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int currentSum = 0;\n        int maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            currentSum += (string.charAt(i) == '0' ? 1 : -1);\n            if (currentSum < 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 126,
        "code_str": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sum(10,15) == 6;\n        assert Solution.sum(100,150) == 93;\n        assert Solution.sum(4,6) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sum(int a, int b) {\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of common divisors of two given numbers.",
        "code_str_generate": "class Solution {\n    public static int sum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of common divisors of two given numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i < Math.min(a, b); i++) {\n            if (a % i == 0 && b % i == 0) {\n                sum += i;\n                //begin to write code\n"
    },
    {
        "task_id": 127,
        "code_str": "class Solution {\n    public int multiplyInt(int x, int y) {\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n            return x;\n        } else {\n            return x + multiplyInt(x, y - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.multiplyInt(10,20) == 200;\n        assert solution.multiplyInt(5,10) == 50;\n        assert solution.multiplyInt(4,8) == 32;\n    }\n}\n",
        "prompt": "Write a function to multiply two integers without using the * operator in python.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int multiplyInt(int x, int y) {\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n        //begin to write code\n",
        "java_prompt": "Write a function to multiply two integers without using the * operator in java.",
        "code_str_generate": "class Solution {\n    public int multiplyInt(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a function to multiply two integers without using the * operator in java.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (y < 0) {\n            return -multiplyInt(x, -y);\n        } else if (y == 0) {\n            return 0;\n        } else if (y == 1) {\n        //begin to write code\n"
    },
    {
        "task_id": 128,
        "code_str": "class Solution {\n    public static List<String> longWords(int n, String str) {\n        List<String> wordLen = new ArrayList<>();\n        String[] txt = str.split(\" \");\n        for (String x : txt) {\n            if (x.length() > n) {\n                wordLen.add(x);\n            }\n        }\n        return wordLen;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.longWords(3,\"python is a programming language\").equals(Arrays.asList(\"python\",\"programming\",\"language\"));\n        assert solution.longWords(2,\"writing a program\").equals(Arrays.asList(\"writing\",\"program\"));\n        assert solution.longWords(5,\"sorting list\").equals(Arrays.asList(\"sorting\"));\n    }\n}\n",
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> longWords(int n, String str) {\n        List<String> wordLen = new ArrayList<>();\n        String[] txt = str.split(\" \");\n        for (String x : txt) {\n            if (x.length() > n) {\n            //begin to write code\n",
        "java_prompt": "Write a function to shortlist words that are longer than n from a given list of words.",
        "code_str_generate": "class Solution {\n    public static List<String> longWords(int n, String str) {\n\n        /*\n        progame language:java\n        description:Write a function to shortlist words that are longer than n from a given list of words.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> wordLen = new ArrayList<>();\n        String[] txt = str.split(\" \");\n        for (String x : txt) {\n            if (x.length() > n) {\n            //begin to write code\n"
    },
    {
        "task_id": 129,
        "code_str": "class Solution {\n    public boolean magicSquareTest(int[][] myMatrix) {\n        int iSize = myMatrix[0].length;\n        List<Integer> sumList = new ArrayList<>();\n        for (int[] lines : myMatrix) {\n            sumList.add(Arrays.stream(lines).sum());\n        }\n        for (int col = 0; col < iSize; col++) {\n            int sum = 0;\n            for (int[] row : myMatrix) {\n                sum += row[col];\n            }\n            sumList.add(sum);\n        }\n        int result1 = 0;\n        for (int i = 0; i < iSize; i++) {\n            result1 += myMatrix[i][i];\n        }\n        sumList.add(result1);\n        int result2 = 0;\n        for (int i = iSize - 1; i >= 0; i--) {\n            result2 += myMatrix[i][i];\n        }\n        sumList.add(result2);\n        Set<Integer> uniqueSums = new HashSet<>(sumList);\n        return uniqueSums.size() <= 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.magicSquareTest(new int[][]{{7, 12, 1, 14}, {2, 13, 8, 11}, {16, 3, 10, 5}, {9, 6, 15, 4}});\n        assert solution.magicSquareTest(new int[][]{{2, 7, 6}, {9, 5, 1}, {4, 3, 8}});\n        assert !solution.magicSquareTest(new int[][]{{2, 7, 6}, {9, 5, 1}, {4, 3, 7}});\n    }\n}\n",
        "prompt": "Write a function to calculate magic square.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean magicSquareTest(int[][] myMatrix) {\n        int iSize = myMatrix[0].length;\n        List<Integer> sumList = new ArrayList<>();\n        for (int[] lines : myMatrix) {\n            sumList.add(Arrays.stream(lines).sum());\n        }\n        for (int col = 0; col < iSize; col++) {\n            int sum = 0;\n            for (int[] row : myMatrix) {\n                sum += row[col];\n            }\n            sumList.add(sum);\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate magic square.",
        "code_str_generate": "class Solution {\n    public boolean magicSquareTest(int[][] myMatrix) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate magic square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int iSize = myMatrix[0].length;\n        List<Integer> sumList = new ArrayList<>();\n        for (int[] lines : myMatrix) {\n            sumList.add(Arrays.stream(lines).sum());\n        }\n        for (int col = 0; col < iSize; col++) {\n            int sum = 0;\n            for (int[] row : myMatrix) {\n                sum += row[col];\n            }\n            sumList.add(sum);\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 130,
        "code_str": "class Solution {\n    public int[] maxOccurrences(int[] nums) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        Map.Entry<Integer, Integer> maxEntry = Collections.max(\n            map.entrySet(),\n            Map.Entry.comparingByValue()\n        );\n        return new int[]{maxEntry.getKey(), maxEntry.getValue()};\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] result1 = solution.maxOccurrences(new int[]{2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2});\n        assert result1[0] == 2 && result1[1] == 5;\n        int[] result2 = solution.maxOccurrences(new int[]{2,3,8,4,8,9,8,7,9,15,14,10,12,13,16,16,18});\n        assert result2[0] == 8 && result2[1] == 3;\n        int[] result3 = solution.maxOccurrences(new int[]{10,20,20,30,40,90,80,50,30,20,50,10});\n        assert result3[0] == 20 && result3[1] == 3;\n    }\n}",
        "prompt": "Write a function to find the item with maximum frequency in a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int[] maxOccurrences(int[] nums) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        Map.Entry<Integer, Integer> maxEntry = Collections.max(\n        //begin to write code\n",
        "java_prompt": "Write a function to find the item with maximum frequency in a given list.",
        "code_str_generate": "class Solution {\n    public int[] maxOccurrences(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the item with maximum frequency in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int num : nums) {\n            map.put(num, map.getOrDefault(num, 0) + 1);\n        }\n        Map.Entry<Integer, Integer> maxEntry = Collections.max(\n        //begin to write code\n"
    },
    {
        "task_id": 131,
        "code_str": "class Solution {\n    public String reverseVowels(String str1) {\n        String vowels = \"\";\n        for (char c : str1.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                vowels += c;\n            }\n        }\n        String resultString = \"\";\n        int length = vowels.length();\n        for (char c : str1.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                resultString += vowels.charAt(length - 1);\n                length--;\n            } else {\n                resultString += c;\n            }\n        }\n        return resultString;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.reverseVowels(\"Python\").equals(\"Python\");\n        assert solution.reverseVowels(\"USA\").equals(\"ASU\");\n        assert solution.reverseVowels(\"ab\").equals(\"ab\");\n    }\n}\n",
        "prompt": "Write a python function to reverse only the vowels of a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String reverseVowels(String str1) {\n        String vowels = \"\";\n        for (char c : str1.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                vowels += c;\n            }\n        }\n        String resultString = \"\";\n        int length = vowels.length();\n        for (char c : str1.toCharArray()) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to reverse only the vowels of a given string.",
        "code_str_generate": "class Solution {\n    public String reverseVowels(String str1) {\n\n        /*\n        progame language:java\n        description:Write a java function to reverse only the vowels of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String vowels = \"\";\n        for (char c : str1.toCharArray()) {\n            if (\"aeiouAEIOU\".indexOf(c) != -1) {\n                vowels += c;\n            }\n        }\n        String resultString = \"\";\n        int length = vowels.length();\n        for (char c : str1.toCharArray()) {\n        //begin to write code\n"
    },
    {
        "task_id": 132,
        "code_str": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        return str;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.tupString(new char[]{'e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'}).equals(\"exercises\");\n        assert Solution.tupString(new char[]{'p','y','t','h','o','n'}).equals(\"python\");\n        assert Solution.tupString(new char[]{'p','r','o','g','r','a','m'}).equals(\"program\");\n    }\n}\n",
        "prompt": "Write a function to convert tuple to a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String tupString(char[] tup1) {\n        String str = new String(tup1);\n        //begin to write code\n",
        "java_prompt": "Write a function to convert tuple to a string.",
        "code_str_generate": "class Solution {\n    public static String tupString(char[] tup1) {\n\n        /*\n        progame language:java\n        description:Write a function to convert tuple to a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str = new String(tup1);\n        //begin to write code\n"
    },
    {
        "task_id": 133,
        "code_str": "class Solution {\n    public static int sumNegativeNum(int[] nums) {\n        int sumNegativeNum = 0;\n        for (int num : nums) {\n            if (num < 0) {\n                sumNegativeNum += num;\n            }\n        }\n        return sumNegativeNum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumNegativeNum(new int[]{2, 4, -6, -9, 11, -12, 14, -5, 17}) == -32;\n        assert Solution.sumNegativeNum(new int[]{10,15,-14,13,-18,12,-20}) == -52;\n        assert Solution.sumNegativeNum(new int[]{19, -65, 57, 39, 152,-639, 121, 44, 90, -190}) == -894;\n    }\n}\n",
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumNegativeNum(int[] nums) {\n        int sumNegativeNum = 0;\n        for (int num : nums) {\n            if (num < 0) {\n                sumNegativeNum += num;\n                //begin to write code\n",
        "java_prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
        "code_str_generate": "class Solution {\n    public static int sumNegativeNum(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumNegativeNum = 0;\n        for (int num : nums) {\n            if (num < 0) {\n                sumNegativeNum += num;\n                //begin to write code\n"
    },
    {
        "task_id": 134,
        "code_str": "class Solution {\n    public static String checkLast(int[] arr, int n, int p) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n        if (p == 1) {\n            if (sum % 2 == 0) {\n                return \"ODD\";\n            } else {\n                return \"EVEN\";\n            }\n        }\n        return \"EVEN\";\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkLast(new int[]{5,7,10},3,1).equals(\"ODD\");\n        assert Solution.checkLast(new int[]{2,3},2,3).equals(\"EVEN\");\n        assert Solution.checkLast(new int[]{1,2,3},3,1).equals(\"ODD\");\n    }\n}\n",
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String checkLast(int[] arr, int n, int p) {\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n        if (p == 1) {\n            if (sum % 2 == 0) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the last element of given array is even or odd after performing an operation p times.",
        "code_str_generate": "class Solution {\n    public static String checkLast(int[] arr, int n, int p) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the last element of given array is even or odd after performing an operation p times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += arr[i];\n        }\n        if (p == 1) {\n            if (sum % 2 == 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 135,
        "code_str": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.hexagonalNum(10) == 190;\n        assert Solution.hexagonalNum(5) == 45;\n        assert Solution.hexagonalNum(7) == 91;\n    }\n}\n",
        "prompt": "Write a function to find the nth hexagonal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int hexagonalNum(int n) {\n        return n * (2 * n - 1);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the nth hexagonal number.",
        "code_str_generate": "class Solution {\n    public static int hexagonalNum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth hexagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n * (2 * n - 1);\n        //begin to write code\n"
    },
    {
        "task_id": 136,
        "code_str": "class Solution {\n    public static double calElectBill(int units) {\n        double amount, surcharge;\n        if(units < 50) {\n            amount = units * 2.60;\n            surcharge = 25;\n        } else if(units <= 100) {\n            amount = 130 + ((units - 50) * 3.25);\n            surcharge = 35;\n        } else if(units <= 200) {\n            amount = 130 + 162.50 + ((units - 100) * 5.26);\n            surcharge = 45;\n        } else {\n            amount = 130 + 162.50 + 526 + ((units - 200) * 8.45);\n            surcharge = 75;\n        }\n        double total = amount + surcharge;\n        return total;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.calElectBill(75) == 246.25 : \"Test case 1 failed\";\n        assert Solution.calElectBill(265) == 1442.75 : \"Test case 2 failed\";\n        assert Solution.calElectBill(100) == 327.5 : \"Test case 3 failed\";\n        System.out.println(\"All test cases passed\");\n    }\n}\n",
        "prompt": "Write a function to calculate electricity bill.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double calElectBill(int units) {\n        double amount, surcharge;\n        if(units < 50) {\n            amount = units * 2.60;\n            surcharge = 25;\n        } else if(units <= 100) {\n            amount = 130 + ((units - 50) * 3.25);\n            surcharge = 35;\n        } else if(units <= 200) {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate electricity bill.",
        "code_str_generate": "class Solution {\n    public static double calElectBill(int units) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate electricity bill.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double amount, surcharge;\n        if(units < 50) {\n            amount = units * 2.60;\n            surcharge = 25;\n        } else if(units <= 100) {\n            amount = 130 + ((units - 50) * 3.25);\n            surcharge = 35;\n        } else if(units <= 200) {\n        //begin to write code\n"
    },
    {
        "task_id": 137,
        "code_str": "class Solution {\n    public static double zeroCount(int[] nums) {\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x == 0) {\n                n1 += 1;\n            }\n        }\n        return Math.round((double)n1/n * 100.0) / 100.0;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.zeroCount(new int[]{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) == 0.15;\n        assert Solution.zeroCount(new int[]{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 0.00;\n        assert Solution.zeroCount(new int[]{2, 4, -6, -9, 11, -12, 14, -5, 17}) == 0.00;\n    }\n}\n",
        "prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double zeroCount(int[] nums) {\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x == 0) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the ration of zeroes in an array of integers.",
        "code_str_generate": "class Solution {\n    public static double zeroCount(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ration of zeroes in an array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x == 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 138,
        "code_str": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        if (n % 2 == 1) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isSumOfPowersOfTwo(10) == true;\n        assert Solution.isSumOfPowersOfTwo(7) == false;\n        assert Solution.isSumOfPowersOfTwo(14) == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n        if (n % 2 == 1) {\n            return false;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
        "code_str_generate": "class Solution {\n    public static boolean isSumOfPowersOfTwo(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 == 1) {\n            return false;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 139,
        "code_str": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        return perimeter;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.circleCircumference(10) == 62.830000000000005;\n        assert Solution.circleCircumference(5) == 31.415000000000003;\n        assert Solution.circleCircumference(4) == 25.132;\n    }\n}\n",
        "prompt": "Write a function to find the circumference of a circle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double circleCircumference(double r) {\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the circumference of a circle.",
        "code_str_generate": "class Solution {\n    public static double circleCircumference(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the circumference of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 2 * 3.1415 * r;\n        //begin to write code\n"
    },
    {
        "task_id": 140,
        "code_str": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    res.add(ele);\n                }\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(3, 4, 5), Arrays.asList(4, 5, 7), Arrays.asList(1, 4));\n        assert solution.extractSingly(testList1).equals(Arrays.asList(3, 4, 5, 7, 1));\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 2, 3), Arrays.asList(7, 8));\n        assert solution.extractSingly(testList2).equals(Arrays.asList(1, 2, 3, 4, 7, 8));\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(7, 8, 9), Arrays.asList(10, 11, 12), Arrays.asList(10, 11));\n        assert solution.extractSingly(testList3).equals(Arrays.asList(7, 8, 9, 10, 11, 12));\n    }\n}\n",
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    //begin to write code\n",
        "java_prompt": "Write a function to extract elements that occur singly in the given tuple list.",
        "code_str_generate": "class Solution {\n    public static List<Integer> extractSingly(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to extract elements that occur singly in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        Set<Integer> temp = new HashSet<>();\n        for (List<Integer> inner : testList) {\n            for (Integer ele : inner) {\n                if (!temp.contains(ele)) {\n                    temp.add(ele);\n                    //begin to write code\n"
    },
    {
        "task_id": 141,
        "code_str": "class Solution {\n    public static int[] pancakeSort(int[] nums) {\n        int arr_len = nums.length;\n        while (arr_len > 1) {\n            int mi = maxIndex(nums, arr_len);\n            flip(nums, mi);\n            flip(nums, arr_len - 1);\n            arr_len -= 1;\n        }\n        return nums;\n    }\n\n    private static int maxIndex(int[] nums, int n) {\n        int mi = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] > nums[mi])\n                mi = i;\n        }\n        return mi;\n    }\n\n    private static void flip(int[] nums, int i) {\n        int temp, start = 0;\n        while (start < i) {\n            temp = nums[start];\n            nums[start] = nums[i];\n            nums[i] = temp;\n            start++;\n            i--;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.pancakeSort(new int[]{15, 79, 25, 38, 69}), new int[]{15, 25, 38, 69, 79});\n        assert Arrays.equals(Solution.pancakeSort(new int[]{98, 12, 54, 36, 85}), new int[]{12, 36, 54, 85, 98});\n        assert Arrays.equals(Solution.pancakeSort(new int[]{41, 42, 32, 12, 23}), new int[]{12, 23, 32, 41, 42});\n    }\n}\n",
        "prompt": "Write a function to sort a list of elements using pancake sort.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] pancakeSort(int[] nums) {\n        int arr_len = nums.length;\n        while (arr_len > 1) {\n            int mi = maxIndex(nums, arr_len);\n            flip(nums, mi);\n            flip(nums, arr_len - 1);\n            arr_len -= 1;\n        }\n        return nums;\n    }\n    private static int maxIndex(int[] nums, int n) {\n        int mi = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] > nums[mi])\n            //begin to write code\n",
        "java_prompt": "Write a function to sort a list of elements using pancake sort.",
        "code_str_generate": "class Solution {\n    public static int[] pancakeSort(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of elements using pancake sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int arr_len = nums.length;\n        while (arr_len > 1) {\n            int mi = maxIndex(nums, arr_len);\n            flip(nums, mi);\n            flip(nums, arr_len - 1);\n            arr_len -= 1;\n        }\n        return nums;\n    }\n    private static int maxIndex(int[] nums, int n) {\n        int mi = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] > nums[mi])\n            //begin to write code\n"
    },
    {
        "task_id": 142,
        "code_str": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countSamePair(Arrays.asList(1,2,3,4,5,6,7,8), Arrays.asList(2,2,3,1,2,6,7,9), Arrays.asList(2,1,3,1,2,6,7,9)) == 3;\n        assert Solution.countSamePair(Arrays.asList(1,2,3,4,5,6,7,8), Arrays.asList(2,2,3,1,2,6,7,8), Arrays.asList(2,1,3,1,2,6,7,8)) == 4;\n        assert Solution.countSamePair(Arrays.asList(1,2,3,4,2,6,7,8), Arrays.asList(2,2,3,1,2,6,7,8), Arrays.asList(2,1,3,1,2,6,7,8)) == 5;\n    }\n}\n",
        "prompt": "Write a function to count the same pair in three given lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n",
        "java_prompt": "Write a function to count the same pair in three given lists.",
        "code_str_generate": "class Solution {\n    public static int countSamePair(List<Integer> list1, List<Integer> list2, List<Integer> list3) {\n\n        /*\n        progame language:java\n        description:Write a function to count the same pair in three given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        for (int i = 0; i < list1.size(); i++) {\n            if (list1.get(i).equals(list2.get(i)) && list2.get(i).equals(list3.get(i))) {\n                result++;\n                //begin to write code\n"
    },
    {
        "task_id": 143,
        "code_str": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n            return input.size();\n        }\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        assert solution.findLists(Arrays.asList(Arrays.asList(1, 2, 3, 4), Arrays.asList(5, 6, 7, 8))) == 2;\n        assert solution.findLists(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4), Arrays.asList(5, 6))) == 3;\n        assert solution.findLists(Arrays.asList(Arrays.asList(9, 8, 7, 6, 5, 4, 3, 2, 1))) == 1;\n    }\n}\n",
        "prompt": "Write a function to find number of lists present in the given tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findLists(List<?> input) {\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to find number of lists present in the given tuple.",
        "code_str_generate": "class Solution {\n    public int findLists(List<?> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of lists present in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (!(input instanceof List)) {\n            return 1;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 144,
        "code_str": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumPairs(new int[]{1,8,9,15,16},5) == 74;\n        assert Solution.sumPairs(new int[]{1,2,3,4},4) == 10;\n        assert Solution.sumPairs(new int[]{1,2,3,4,5,7,9,11,14},9) == 188;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of absolute differences in all pairs of the given array.",
        "code_str_generate": "class Solution {\n    public static int sumPairs(int[] arr, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of absolute differences in all pairs of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            sum += i * arr[i] - (n - 1 - i) * arr[i];\n            //begin to write code\n"
    },
    {
        "task_id": 145,
        "code_str": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            maxEle = Math.max(maxEle, arr[i]);\n        }\n        return (maxEle - minEle);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.max_Abs_Diff(new int[]{2,1,5,3},4) == 4;\n        assert solution.max_Abs_Diff(new int[]{9,3,2,5,1},5) == 8;\n        assert solution.max_Abs_Diff(new int[]{3,2,1},3) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum difference between any two elements in a given array.",
        "code_str_generate": "class Solution {\n    public int max_Abs_Diff(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum difference between any two elements in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int minEle = arr[0];\n        int maxEle = arr[0];\n        for (int i = 1; i < n; i++) {\n            minEle = Math.min(minEle, arr[i]);\n            //begin to write code\n"
    },
    {
        "task_id": 146,
        "code_str": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.asciiValueString(\"python\") == 112;\n        assert Solution.asciiValueString(\"Program\") == 80;\n        assert Solution.asciiValueString(\"Language\") == 76;\n    }\n}\n",
        "prompt": "Write a function to find the ascii value of total characters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int asciiValueString(String str1) {\n        return (int) str1.charAt(0);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the ascii value of total characters in a string.",
        "code_str_generate": "class Solution {\n    public static int asciiValueString(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) str1.charAt(0);\n        //begin to write code\n"
    },
    {
        "task_id": 147,
        "code_str": "class Solution {\n    public int maxPathSum(int tri[][], int m, int n) {\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                    tri[i][j] += tri[i + 1][j];\n                } else {\n                    tri[i][j] += tri[i + 1][j + 1];\n                }\n            }\n        }\n        return tri[0][0];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxPathSum(new int[][]{{1, 0, 0}, {4, 8, 0}, {1, 5, 3}}, 2, 2) == 14;\n        assert solution.maxPathSum(new int[][]{{13, 0, 0}, {7, 4, 0}, {2, 4, 6}}, 2, 2) == 24;\n        assert solution.maxPathSum(new int[][]{{2, 0, 0}, {11, 18, 0}, {21, 25, 33}}, 2, 2) == 53;\n    }\n}\n",
        "prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxPathSum(int tri[][], int m, int n) {\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                    tri[i][j] += tri[i + 1][j];\n                } else {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum total path sum in the given triangle.",
        "code_str_generate": "class Solution {\n    public int maxPathSum(int tri[][], int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum total path sum in the given triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = m - 1; i >= 0; i--) {\n            for (int j = 0; j <= i; j++) {\n                if (tri[i + 1][j] > tri[i + 1][j + 1]) {\n                    tri[i][j] += tri[i + 1][j];\n                } else {\n                //begin to write code\n"
    },
    {
        "task_id": 148,
        "code_str": "class Solution {\n    public int sumDigitsSingle(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans += x % 10;\n            x /= 10;\n        }\n        return ans;\n    }\n\n    public int closest(int x) {\n        int ans = 0;\n        while (ans * 10 + 9 <= x) {\n            ans = ans * 10 + 9;\n        }\n        return ans;\n    }\n\n    public int sumDigitsTwoParts(int N) {\n        int A = closest(N);\n        return sumDigitsSingle(A) + sumDigitsSingle(N - A);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.sumDigitsTwoParts(35) == 17;\n        assert solution.sumDigitsTwoParts(7) == 7;\n        assert solution.sumDigitsTwoParts(100) == 19;\n    }\n}\n",
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int sumDigitsSingle(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans += x % 10;\n            x /= 10;\n        }\n        return ans;\n    }\n    public int closest(int x) {\n        int ans = 0;\n        //begin to write code\n",
        "java_prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
        "code_str_generate": "class Solution {\n    public int sumDigitsSingle(int x) {\n        int ans = 0;\n        while (x != 0) {\n            ans += x % 10;\n            x /= 10;\n        }\n        return ans;\n    }\n    public int closest(int x) {\n        int ans = 0;\n        //begin to write code\n"
    },
    {
        "task_id": 149,
        "code_str": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n            }\n        }\n        int result = 1;\n        for (int i = 0; i < n; i++) {\n            if (result < dp[i]) {\n                result = dp[i];\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.longestSubseqWithDiffOne(new int[]{1, 2, 3, 4, 5, 3, 2}, 7) == 6;\n        assert solution.longestSubseqWithDiffOne(new int[]{10, 9, 4, 5, 4, 8, 6}, 7) == 3;\n        assert solution.longestSubseqWithDiffOne(new int[]{1, 2, 3, 2, 3, 7, 2, 1}, 8) == 7;\n    }\n}\n",
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n                //begin to write code\n",
        "java_prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
        "code_str_generate": "class Solution {\n    public int longestSubseqWithDiffOne(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int dp[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            dp[i] = 1;\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) {\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n                }\n                //begin to write code\n"
    },
    {
        "task_id": 150,
        "code_str": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n            return true;\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.doesContainB(1,7,3) == true;\n        assert Solution.doesContainB(1,-3,5) == false;\n        assert Solution.doesContainB(3,2,5) == false;\n    }\n}\n",
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find whether the given number is present in the infinite sequence or not.",
        "code_str_generate": "class Solution {\n    public static boolean doesContainB(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to find whether the given number is present in the infinite sequence or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a == b) {\n            return true;\n        }\n        if ((b - a) * c > 0 && (b - a) % c == 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 151,
        "code_str": "class Solution {\n    public static int gcd(int p, int q) {\n        while (q != 0) {\n            int temp = q;\n            q = p % q;\n            p = temp;\n        }\n        return p;\n    }\n\n    public static boolean isCoprime(int x, int y) {\n        return gcd(x, y) == 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isCoprime(17,13) == true;\n        assert Solution.isCoprime(15,21) == false;\n        assert Solution.isCoprime(25,45) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given number is co-prime or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int gcd(int p, int q) {\n        while (q != 0) {\n            int temp = q;\n            q = p % q;\n            p = temp;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given number is co-prime or not.",
        "code_str_generate": "class Solution {\n    public static int gcd(int p, int q) {\n        while (q != 0) {\n            int temp = q;\n            q = p % q;\n            p = temp;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 152,
        "code_str": "class Solution {\n    public List<Integer> merge(List<Integer> a, List<Integer> b) {\n        List<Integer> c = new ArrayList<>();\n        while (!a.isEmpty() && !b.isEmpty()) {\n            if (a.get(0) < b.get(0)) {\n                c.add(a.get(0));\n                a.remove(0);\n            } else {\n                c.add(b.get(0));\n                b.remove(0);\n            }\n        }\n        if (a.isEmpty()) {\n            c.addAll(b);\n        } else {\n            c.addAll(a);\n        }\n        return c;\n    }\n\n    public List<Integer> mergeSort(List<Integer> x) {\n        if (x.size() == 0 || x.size() == 1) {\n            return x;\n        } else {\n            int middle = x.size() / 2;\n            List<Integer> a = mergeSort(new ArrayList<>(x.subList(0, middle)));\n            List<Integer> b = mergeSort(new ArrayList<>(x.subList(middle, x.size())));\n            return merge(a, b);\n        }\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> list1 = Arrays.asList(3, 4, 2, 6, 5, 7, 1, 9);\n        List<Integer> sortedList1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 9);\n        assert solution.mergeSort(list1).equals(sortedList1);\n\n        List<Integer> list2 = Arrays.asList(7, 25, 45, 78, 11, 33, 19);\n        List<Integer> sortedList2 = Arrays.asList(7, 11, 19, 25, 33, 45, 78);\n        assert solution.mergeSort(list2).equals(sortedList2);\n\n        List<Integer> list3 = Arrays.asList(3, 1, 4, 9, 8);\n        List<Integer> sortedList3 = Arrays.asList(1, 3, 4, 8, 9);\n        assert solution.mergeSort(list3).equals(sortedList3);\n    }\n}\n",
        "prompt": "Write a function to sort the given array by using merge sort.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> merge(List<Integer> a, List<Integer> b) {\n        List<Integer> c = new ArrayList<>();\n        while (!a.isEmpty() && !b.isEmpty()) {\n            if (a.get(0) < b.get(0)) {\n                c.add(a.get(0));\n                a.remove(0);\n            } else {\n                c.add(b.get(0));\n                b.remove(0);\n            }\n        }\n        if (a.isEmpty()) {\n            c.addAll(b);\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to sort the given array by using merge sort.",
        "code_str_generate": "class Solution {\n    public List<Integer> merge(List<Integer> a, List<Integer> b) {\n        List<Integer> c = new ArrayList<>();\n        while (!a.isEmpty() && !b.isEmpty()) {\n            if (a.get(0) < b.get(0)) {\n                c.add(a.get(0));\n                a.remove(0);\n            } else {\n                c.add(b.get(0));\n                b.remove(0);\n            }\n        }\n        if (a.isEmpty()) {\n            c.addAll(b);\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 153,
        "code_str": "class Solution {\n    public static double[] parabola_vertex(double a, double b, double c) {\n        double[] vertex = new double[2];\n        vertex[0] = -b / (2 * a);\n        vertex[1] = (4 * a * c - b * b) / (4 * a);\n        return vertex;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.parabola_vertex(5,3,2), new double[]{-0.3, 1.55});\n        assert Arrays.equals(Solution.parabola_vertex(9,8,4), new double[]{-0.4444444444444444, 2.2222222222222223});\n        assert Arrays.equals(Solution.parabola_vertex(2,4,6), new double[]{-1.0, 4.0});\n    }\n}\n",
        "prompt": "Write a function to find the vertex of a parabola.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double[] parabola_vertex(double a, double b, double c) {\n        double[] vertex = new double[2];\n        vertex[0] = -b / (2 * a);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the vertex of a parabola.",
        "code_str_generate": "class Solution {\n    public static double[] parabola_vertex(double a, double b, double c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the vertex of a parabola.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double[] vertex = new double[2];\n        vertex[0] = -b / (2 * a);\n        //begin to write code\n"
    },
    {
        "task_id": 154,
        "code_str": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        List<Integer> result1 = solution.specifiedElement(test1, 0);\n        assert result1.equals(Arrays.asList(1, 4, 7));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        List<Integer> result2 = solution.specifiedElement(test2, 2);\n        assert result2.equals(Arrays.asList(3, 6, 9));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(1, 2, 3, 2), Arrays.asList(4, 5, 6, 2), Arrays.asList(7, 1, 9, 5));\n        List<Integer> result3 = solution.specifiedElement(test3, 3);\n        assert result3.equals(Arrays.asList(2, 2, 5));\n    }\n}\n",
        "prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n",
        "java_prompt": "Write a function to extract every specified element from a given two dimensional list.",
        "code_str_generate": "class Solution {\n    public List<Integer> specifiedElement(List<List<Integer>> nums, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to extract every specified element from a given two dimensional list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> num : nums) {\n            result.add(num.get(N));\n            //begin to write code\n"
    },
    {
        "task_id": 155,
        "code_str": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n        int res = 0;\n        int count = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res = res | (1 << count);\n            }\n            count = count + 1;\n            temp >>= 1;\n        }\n        return n ^ res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.evenBitToggleNumber(10) == 0;\n        assert Solution.evenBitToggleNumber(20) == 30;\n        assert Solution.evenBitToggleNumber(30) == 20;\n    }\n}\n",
        "prompt": "Write a python function to toggle all even bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n        int res = 0;\n        int count = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res = res | (1 << count);\n                //begin to write code\n",
        "java_prompt": "Write a java function to toggle all even bits of a given number.",
        "code_str_generate": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to toggle all even bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        int count = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res = res | (1 << count);\n                //begin to write code\n"
    },
    {
        "task_id": 156,
        "code_str": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            intPair.add(Integer.parseInt(pair.get(1)));\n            result.add(intPair);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<String>> test1 = Arrays.asList(Arrays.asList(\"333\", \"33\"), Arrays.asList(\"1416\", \"55\"));\n        List<List<Integer>> result1 = solution.tupleIntStr(test1);\n        assert result1.equals(Arrays.asList(Arrays.asList(333, 33), Arrays.asList(1416, 55)));\n\n        List<List<String>> test2 = Arrays.asList(Arrays.asList(\"999\", \"99\"), Arrays.asList(\"1000\", \"500\"));\n        List<List<Integer>> result2 = solution.tupleIntStr(test2);\n        assert result2.equals(Arrays.asList(Arrays.asList(999, 99), Arrays.asList(1000, 500)));\n\n        List<List<String>> test3 = Arrays.asList(Arrays.asList(\"666\", \"66\"), Arrays.asList(\"1500\", \"555\"));\n        List<List<Integer>> result3 = solution.tupleIntStr(test3);\n        assert result3.equals(Arrays.asList(Arrays.asList(666, 66), Arrays.asList(1500, 555)));\n    }\n}\n",
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            //begin to write code\n",
        "java_prompt": "Write a function to convert a tuple of string values to a tuple of integer values.",
        "code_str_generate": "class Solution {\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a tuple of string values to a tuple of integer values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> result = new ArrayList<>();\n        for (List<String> pair : tupleStr) {\n            List<Integer> intPair = new ArrayList<>();\n            intPair.add(Integer.parseInt(pair.get(0)));\n            //begin to write code\n"
    },
    {
        "task_id": 157,
        "code_str": "class Solution {\n    public static List<List<Object>> encodeList(List<Object> list1) {\n        List<List<Object>> result = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) {\n            return result;\n        }\n        Object lastElement = list1.get(0);\n        int count = 1;\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i).equals(lastElement)) {\n                count++;\n            } else {\n                List<Object> group = new ArrayList<>();\n                group.add(count);\n                group.add(lastElement);\n                result.add(group);\n                lastElement = list1.get(i);\n                count = 1;\n            }\n        }\n        List<Object> group = new ArrayList<>();\n        group.add(count);\n        group.add(lastElement);\n        result.add(group);\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> list1 = new ArrayList<>();\n        list1.add(1);\n        list1.add(1);\n        list1.add(2);\n        list1.add(3);\n        list1.add(4);\n        list1.add(4.3);\n        list1.add(5);\n        list1.add(1);\n        assert solution.encodeList(list1).equals(Arrays.asList(Arrays.asList(2, 1), Arrays.asList(1, 2), Arrays.asList(1, 3), Arrays.asList(1, 4), Arrays.asList(1, 4.3), Arrays.asList(1, 5), Arrays.asList(1, 1)));\n\n        List<Object> list2 = new ArrayList<>();\n        for (char c : \"automatically\".toCharArray()) {\n            list2.add(c);\n        }\n        assert solution.encodeList(list2).equals(Arrays.asList(Arrays.asList(1, 'a'), Arrays.asList(1, 'u'), Arrays.asList(1, 't'), Arrays.asList(1, 'o'), Arrays.asList(1, 'm'), Arrays.asList(1, 'a'), Arrays.asList(1, 't'), Arrays.asList(1, 'i'), Arrays.asList(1, 'c'), Arrays.asList(1, 'a'), Arrays.asList(2, 'l'), Arrays.asList(1, 'y')));\n\n        List<Object> list3 = new ArrayList<>();\n        for (char c : \"python\".toCharArray()) {\n            list3.add(c);\n        }\n        assert solution.encodeList(list3).equals(Arrays.asList(Arrays.asList(1, 'p'), Arrays.asList(1, 'y'), Arrays.asList(1, 't'), Arrays.asList(1, 'h'), Arrays.asList(1, 'o'), Arrays.asList(1, 'n')));\n    }\n}\n",
        "prompt": "Write a function to reflect the run-length encoding from a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> encodeList(List<Object> list1) {\n        List<List<Object>> result = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) {\n            return result;\n        }\n        Object lastElement = list1.get(0);\n        int count = 1;\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i).equals(lastElement)) {\n                count++;\n            } else {\n                List<Object> group = new ArrayList<>();\n                group.add(count);\n                //begin to write code\n",
        "java_prompt": "Write a function to reflect the run-length encoding from a list.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> encodeList(List<Object> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to reflect the run-length encoding from a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Object>> result = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) {\n            return result;\n        }\n        Object lastElement = list1.get(0);\n        int count = 1;\n        for (int i = 1; i < list1.size(); i++) {\n            if (list1.get(i).equals(lastElement)) {\n                count++;\n            } else {\n                List<Object> group = new ArrayList<>();\n                group.add(count);\n                //begin to write code\n"
    },
    {
        "task_id": 158,
        "code_str": "class Solution {\n    public static int min_Ops(int[] arr, int n, int k) {\n        int max1 = arr[0];\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > max1) {\n                max1 = arr[i];\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            if ((max1 - arr[i]) % k != 0) {\n                return -1;\n            } else {\n                res += (max1 - arr[i]) / k;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.min_Ops(new int[]{2,2,2,2},4,3) == 0;\n        assert Solution.min_Ops(new int[]{4,2,6,8},4,3) == -1;\n        assert Solution.min_Ops(new int[]{21,33,9,45,63},5,6) == 24;\n    }\n}\n",
        "prompt": "Write a python function to find k number of operations required to make all elements equal.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int min_Ops(int[] arr, int n, int k) {\n        int max1 = arr[0];\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > max1) {\n                max1 = arr[i];\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find k number of operations required to make all elements equal.",
        "code_str_generate": "class Solution {\n    public static int min_Ops(int[] arr, int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find k number of operations required to make all elements equal.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max1 = arr[0];\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > max1) {\n                max1 = arr[i];\n            }\n        }\n        int res = 0;\n        for (int i = 0; i < n; i++) {\n        //begin to write code\n"
    },
    {
        "task_id": 159,
        "code_str": "class Solution {\n    public static String monthSeason(String month, int days) {\n        String season;\n        switch (month) {\n            case \"January\":\n            case \"February\":\n            case \"March\":\n                season = \"winter\";\n                break;\n            case \"April\":\n            case \"May\":\n            case \"June\":\n                season = \"spring\";\n                break;\n            case \"July\":\n            case \"August\":\n            case \"September\":\n                season = \"summer\";\n                break;\n            default:\n                season = \"autumn\";\n                break;\n        }\n        if ((month.equals(\"March\") && days > 19) || (month.equals(\"June\") && days > 20) || (month.equals(\"September\") && days > 21) || (month.equals(\"December\") && days > 20)) {\n            season = \"spring\";\n        } else if ((month.equals(\"October\") && days > 21) || (month.equals(\"November\") && days > 21)) {\n            season = \"autumn\";\n        }\n        return season;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.monthSeason(\"January\", 4).equals(\"winter\");\n        assert Solution.monthSeason(\"October\", 28).equals(\"autumn\");\n        assert Solution.monthSeason(\"June\", 6).equals(\"spring\");\n    }\n}\n",
        "prompt": "Write a function to print the season for the given month and day.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String monthSeason(String month, int days) {\n        String season;\n        switch (month) {\n            case \"January\":\n            case \"February\":\n            case \"March\":\n                season = \"winter\";\n                break;\n            case \"April\":\n            case \"May\":\n            case \"June\":\n                season = \"spring\";\n                break;\n            case \"July\":\n            case \"August\":\n            //begin to write code\n",
        "java_prompt": "Write a function to print the season for the given month and day.",
        "code_str_generate": "class Solution {\n    public static String monthSeason(String month, int days) {\n\n        /*\n        progame language:java\n        description:Write a function to print the season for the given month and day.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String season;\n        switch (month) {\n            case \"January\":\n            case \"February\":\n            case \"March\":\n                season = \"winter\";\n                break;\n            case \"April\":\n            case \"May\":\n            case \"June\":\n                season = \"spring\";\n                break;\n            case \"July\":\n            case \"August\":\n            //begin to write code\n"
    },
    {
        "task_id": 160,
        "code_str": "class Solution {\n    public static String solution(int a, int b, int n) {\n        int i = 0;\n        while (i * a <= n) {\n            if ((n - (i * a)) % b == 0) {\n                return \"x = \" + i + \", y = \" + (n - (i * a)) / b;\n            }\n            i = i + 1;\n        }\n        return \"No solution\";\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.solution(2, 3, 7).equals(\"x = 2, y = 1\");\n        assert Solution.solution(4, 2, 7).equals(\"No solution\");\n        assert Solution.solution(1, 13, 17).equals(\"x = 4, y = 1\");\n    }\n}\n",
        "prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String solution(int a, int b, int n) {\n        int i = 0;\n        while (i * a <= n) {\n            if ((n - (i * a)) % b == 0) {\n                return \"x = \" + i + \", y = \" + (n - (i * a)) / b;\n                //begin to write code\n",
        "java_prompt": "Write a function to find x and y that satisfies ax + by = n.",
        "code_str_generate": "class Solution {\n    public static String solution(int a, int b, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find x and y that satisfies ax + by = n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int i = 0;\n        while (i * a <= n) {\n            if ((n - (i * a)) % b == 0) {\n                return \"x = \" + i + \", y = \" + (n - (i * a)) / b;\n                //begin to write code\n"
    },
    {
        "task_id": 161,
        "code_str": "class Solution {\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.removeElements(Arrays.asList(1,2,3,4,5,6,7,8,9,10), Arrays.asList(2,4,6,8)).equals(Arrays.asList(1, 3, 5, 7, 9, 10));\n        assert solution.removeElements(Arrays.asList(1,2,3,4,5,6,7,8,9,10), Arrays.asList(1,3,5,7)).equals(Arrays.asList(2, 4, 6, 8, 9, 10));\n        assert solution.removeElements(Arrays.asList(1,2,3,4,5,6,7,8,9,10), Arrays.asList(5,7)).equals(Arrays.asList(1, 2, 3, 4, 6, 8, 9, 10));\n    }\n}\n",
        "prompt": "Write a function to remove all elements from a given list present in another list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove all elements from a given list present in another list.",
        "code_str_generate": "class Solution {\n    public static List<Integer> removeElements(List<Integer> list1, List<Integer> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all elements from a given list present in another list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (Integer x : list1) {\n            if (!list2.contains(x)) {\n                result.add(x);\n                //begin to write code\n"
    },
    {
        "task_id": 162,
        "code_str": "class Solution {\n    public static int sum_series(int n) {\n        if (n < 1) {\n            return 0;\n        } else {\n            return n + sum_series(n - 2);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sum_series(6) == 12;\n        assert Solution.sum_series(10) == 30;\n        assert Solution.sum_series(9) == 25;\n    }\n}\n",
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sum_series(int n) {\n        if (n < 1) {\n            return 0;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
        "code_str_generate": "class Solution {\n    public static int sum_series(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n < 1) {\n            return 0;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 163,
        "code_str": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        return area;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.areaPolygon(4,20) - 400.00000000000006) < 1e-6;\n        assert Math.abs(Solution.areaPolygon(10,15) - 1731.1969896610804) < 1e-6;\n        assert Math.abs(Solution.areaPolygon(9,7) - 302.90938549487214) < 1e-6;\n    }\n}\n",
        "prompt": "Write a function to calculate the area of a regular polygon.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double areaPolygon(int s, double l) {\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate the area of a regular polygon.",
        "code_str_generate": "class Solution {\n    public static double areaPolygon(int s, double l) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the area of a regular polygon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double area = s * Math.pow(l, 2) / (4 * Math.tan(Math.PI / s));\n        //begin to write code\n"
    },
    {
        "task_id": 164,
        "code_str": "class Solution {\n    public static int divSum(int n) {\n        int sum = 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                sum = sum + i + (int) Math.floor(n / i);\n            }\n            i += 1;\n        }\n        return sum;\n    }\n\n    public static boolean areEquivalent(int num1, int num2) {\n        return divSum(num1) == divSum(num2);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.areEquivalent(36,57);\n        assert !Solution.areEquivalent(2,4);\n        assert Solution.areEquivalent(23,47);\n    }\n}\n",
        "prompt": "Write a python function to check whether the sum of divisors are same or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int divSum(int n) {\n        int sum = 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                sum = sum + i + (int) Math.floor(n / i);\n            }\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the sum of divisors are same or not.",
        "code_str_generate": "class Solution {\n    public static int divSum(int n) {\n        int sum = 1;\n        int i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n                sum = sum + i + (int) Math.floor(n / i);\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 165,
        "code_str": "class Solution {\n    public int countCharPosition(String str) {\n        int countChars = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if ((i == str.charAt(i) - 'A') || \n                (i == str.charAt(i) - 'a')) {\n                countChars += 1;\n            }\n        }\n        return countChars;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.countCharPosition(\"xbcefg\") == 2;\n        assert solution.countCharPosition(\"ABcED\") == 3;\n        assert solution.countCharPosition(\"AbgdeF\") == 5;\n    }\n}\n",
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int countCharPosition(String str) {\n        int countChars = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if ((i == str.charAt(i) - 'A') || \n                (i == str.charAt(i) - 'a')) {\n                //begin to write code\n",
        "java_prompt": "Write a java function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
        "code_str_generate": "class Solution {\n    public int countCharPosition(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int countChars = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if ((i == str.charAt(i) - 'A') || \n                (i == str.charAt(i) - 'a')) {\n                //begin to write code\n"
    },
    {
        "task_id": 166,
        "code_str": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                }\n            }\n        }\n        return evenPair;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_even_Pair(new int[]{5,4,7,2,1},5) == 4;\n        assert Solution.find_even_Pair(new int[]{7,2,8,1,0,5,11},7) == 9;\n        assert Solution.find_even_Pair(new int[]{1,2,3},3) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count the pairs with xor as an even number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                    //begin to write code\n",
        "java_prompt": "Write a java function to count the pairs with xor as an even number.",
        "code_str_generate": "class Solution {\n    public static int find_even_Pair(int[] A, int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the pairs with xor as an even number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int evenPair = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = i + 1; j < N; j++) {\n                if ((A[i] ^ A[j]) % 2 == 0) {\n                    evenPair++;\n                    //begin to write code\n"
    },
    {
        "task_id": 167,
        "code_str": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        int count = 0;\n        if (n > 0 && (n & (n - 1)) == 0) {\n            return n;\n        }\n        while (n != 0) {\n            n >>= 1;\n            count += 1;\n        }\n        return 1 << count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.next_Power_Of_2(0) == 1;\n        assert Solution.next_Power_Of_2(5) == 8;\n        assert Solution.next_Power_Of_2(17) == 32;\n    }\n}\n",
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int next_Power_Of_2(int n) {\n        int count = 0;\n        if (n > 0 && (n & (n - 1)) == 0) {\n            return n;\n        }\n        while (n != 0) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find smallest power of 2 greater than or equal to n.",
        "code_str_generate": "class Solution {\n    public static int next_Power_Of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find smallest power of 2 greater than or equal to n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        if (n > 0 && (n & (n - 1)) == 0) {\n            return n;\n        }\n        while (n != 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 168,
        "code_str": "class Solution {\n    public static int frequency(int[] a, int x) {\n        int count = 0;\n        for (int i : a) {\n            if (i == x) count += 1;\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.frequency(new int[]{1,2,3},4) == 0;\n        assert Solution.frequency(new int[]{1,2,2,3,3,3,4},3) == 3;\n        assert Solution.frequency(new int[]{0,1,2,3,1,2},1) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the frequency of a number in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int frequency(int[] a, int x) {\n        int count = 0;\n        for (int i : a) {\n            if (i == x) count += 1;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the frequency of a number in a given array.",
        "code_str_generate": "class Solution {\n    public static int frequency(int[] a, int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the frequency of a number in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i : a) {\n            if (i == x) count += 1;\n            //begin to write code\n"
    },
    {
        "task_id": 169,
        "code_str": "class Solution {\n    public int get_pell(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int a = 1;\n        int b = 2;\n        for (int i = 3; i <= n; i++) {\n            int c = 2 * b + a;\n            a = b;\n            b = c;\n        }\n        return b;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.get_pell(4) == 12;\n        assert solution.get_pell(7) == 169;\n        assert solution.get_pell(8) == 408;\n    }\n}\n",
        "prompt": "Write a function to calculate the nth pell number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int get_pell(int n) {\n        if (n <= 2) {\n            return n;\n        }\n        int a = 1;\n        int b = 2;\n        for (int i = 3; i <= n; i++) {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate the nth pell number.",
        "code_str_generate": "class Solution {\n    public int get_pell(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the nth pell number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n <= 2) {\n            return n;\n        }\n        int a = 1;\n        int b = 2;\n        for (int i = 3; i <= n; i++) {\n        //begin to write code\n"
    },
    {
        "task_id": 170,
        "code_str": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n        }\n        return sumRange;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumRangeList(new int[]{2,1,5,6,8,3,4,9,10,11,8,12},8,10)==29;\n        assert Solution.sumRangeList(new int[]{2,1,5,6,8,3,4,9,10,11,8,12},5,7)==16;\n        assert Solution.sumRangeList(new int[]{2,1,5,6,8,3,4,9,10,11,8,12},7,10)==38;\n    }\n}\n",
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
        "code_str_generate": "class Solution {\n    public static int sumRangeList(int[] list1, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find sum of the numbers in a list between the indices of a specified range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumRange = 0;\n        for (int i = m; i <= n; i++) {\n            sumRange += list1[i];\n            //begin to write code\n"
    },
    {
        "task_id": 171,
        "code_str": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        return perimeter;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.perimeterPentagon(5) == 25 : \"Test case 1 failed\";\n        assert Solution.perimeterPentagon(10) == 50 : \"Test case 2 failed\";\n        assert Solution.perimeterPentagon(15) == 75 : \"Test case 3 failed\";\n        System.out.println(\"All test cases passed\");\n    }\n}\n",
        "prompt": "Write a function to find the perimeter of a pentagon.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double perimeterPentagon(double a) {\n        double perimeter = 5 * a;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the perimeter of a pentagon.",
        "code_str_generate": "class Solution {\n    public static double perimeterPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double perimeter = 5 * a;\n        //begin to write code\n"
    },
    {
        "task_id": 172,
        "code_str": "class Solution {\n    public static int countOccurance(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countOccurance(\"letstdlenstdporstd\") == 3;\n        assert Solution.countOccurance(\"truststdsolensporsd\") == 1;\n        assert Solution.countOccurance(\"makestdsostdworthit\") == 2;\n    }\n}\n",
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countOccurance(String s) {\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
        "code_str_generate": "class Solution {\n    public static int countOccurance(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i) == 's' && s.charAt(i + 1) == 't' && s.charAt(i + 2) == 'd') {\n                count++;\n                //begin to write code\n"
    },
    {
        "task_id": 173,
        "code_str": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        return matcher.replaceAll(\"\");\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.remove_splchar(\"python  @#&^%$*program123\").equals(\"pythonprogram123\");\n        assert Solution.remove_splchar(\"python %^$@!^&*()  programming24%$^^()    language\").equals(\"pythonprogramming24language\");\n        assert Solution.remove_splchar(\"python   ^%&^()(+_)(_^&67)                  program\").equals(\"python67program\");\n    }\n}\n",
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String remove_splchar(String text) {\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove everything except alphanumeric characters from a string.",
        "code_str_generate": "class Solution {\n    public static String remove_splchar(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to remove everything except alphanumeric characters from a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[\\\\W_]+\");\n        Matcher matcher = pattern.matcher(text);\n        //begin to write code\n"
    },
    {
        "task_id": 174,
        "code_str": "class Pair<K, V> {\n    private K key;\n    private V value;\n\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n\n    public K getKey() {\n        return key;\n    }\n\n    public V getValue() {\n        return value;\n    }\n}\n\nclass Solution {\n    public static <K, V> Map<K, List<V>> groupKeyValue(List<Pair<K, V>> list) {\n        Map<K, List<V>> result = new HashMap<>();\n        for (Pair<K, V> pair : list) {\n            result.computeIfAbsent(pair.getKey(), k -> new ArrayList<>()).add(pair.getValue());\n        }\n        return result;\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        List<Pair<String, Integer>> list1 = Arrays.asList(\n                new Pair<>(\"yellow\", 1),\n                new Pair<>(\"blue\", 2),\n                new Pair<>(\"yellow\", 3),\n                new Pair<>(\"blue\", 4),\n                new Pair<>(\"red\", 1)\n        );\n        Map<String, List<Integer>> result1 = Solution.groupKeyValue(list1);\n        assert result1.get(\"yellow\").equals(Arrays.asList(1, 3));\n        assert result1.get(\"blue\").equals(Arrays.asList(2, 4));\n        assert result1.get(\"red\").equals(Collections.singletonList(1));\n\n        List<Pair<String, Integer>> list2 = Arrays.asList(\n                new Pair<>(\"python\", 1),\n                new Pair<>(\"python\", 2),\n                new Pair<>(\"python\", 3),\n                new Pair<>(\"python\", 4),\n                new Pair<>(\"python\", 5)\n        );\n        Map<String, List<Integer>> result2 = Solution.groupKeyValue(list2);\n        assert result2.get(\"python\").equals(Arrays.asList(1, 2, 3, 4, 5));\n\n        List<Pair<String, Integer>> list3 = Arrays.asList(\n                new Pair<>(\"yellow\", 100),\n                new Pair<>(\"blue\", 200),\n                new Pair<>(\"yellow\", 300),\n                new Pair<>(\"blue\", 400),\n                new Pair<>(\"red\", 100)\n        );\n        Map<String, List<Integer>> result3 = Solution.groupKeyValue(list3);\n        assert result3.get(\"yellow\").equals(Arrays.asList(100, 300));\n        assert result3.get(\"blue\").equals(Arrays.asList(200, 400));\n        assert result3.get(\"red\").equals(Collections.singletonList(100));\n    }\n}",
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Pair<K, V> {\nclass Solution {\n    private K key;\n    private V value;\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n    public K getKey() {\n        return key;\n    }\n    public V getValue() {\n    //begin to write code\n",
        "java_prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
        "code_str_generate": "class Pair<K, V> {\nclass Solution {\n    private K key;\n    private V value;\n    public Pair(K key, V value) {\n        this.key = key;\n        this.value = value;\n    }\n    public K getKey() {\n        return key;\n    }\n    public V getValue() {\n    //begin to write code\n"
    },
    {
        "task_id": 175,
        "code_str": "class Solution {\n    public boolean isValidParentheses(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n                stack.push(c);\n            } else if (stack.isEmpty() || mappings.get(stack.pop()) != c) {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.isValidParentheses(\"(){}[]\") == true;\n        assert solution.isValidParentheses(\"()[{)}\") == false;\n        assert solution.isValidParentheses(\"()\") == true;\n    }\n}\n",
        "prompt": "Write a function to verify validity of a string of parentheses.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isValidParentheses(String s) {\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n            //begin to write code\n",
        "java_prompt": "Write a function to verify validity of a string of parentheses.",
        "code_str_generate": "class Solution {\n    public boolean isValidParentheses(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to verify validity of a string of parentheses.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Stack<Character> stack = new Stack<>();\n        Map<Character, Character> mappings = new HashMap<>();\n        mappings.put('(', ')');\n        mappings.put('{', '}');\n        mappings.put('[', ']');\n        for (char c : s.toCharArray()) {\n            if (mappings.containsKey(c)) {\n            //begin to write code\n"
    },
    {
        "task_id": 176,
        "code_str": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        return perimeter;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.perimeterTriangle(10, 20, 30) == 60;\n        assert Solution.perimeterTriangle(3, 4, 5) == 12;\n        assert Solution.perimeterTriangle(25, 35, 45) == 105;\n    }\n}\n",
        "prompt": "Write a function to find the perimeter of a triangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n        int perimeter = a + b + c;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the perimeter of a triangle.",
        "code_str_generate": "class Solution {\n    public static int perimeterTriangle(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the perimeter of a triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int perimeter = a + b + c;\n        //begin to write code\n"
    },
    {
        "task_id": 177,
        "code_str": "class Solution {\n    public static int[] answer(int L, int R) {\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n            return false;\n        }\n        for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i] != arr2[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.compareArrays(Solution.answer(3,8), new int[]{3,6});\n        assert Solution.compareArrays(Solution.answer(2,6), new int[]{2,4});\n        assert Solution.compareArrays(Solution.answer(1,3), new int[]{1,2});\n    }\n}",
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] answer(int L, int R) {\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find two distinct numbers such that their lcm lies within the given range.",
        "code_str_generate": "class Solution {\n    public static int[] answer(int L, int R) {\n\n        /*\n        progame language:java\n        description:Write a java function to find two distinct numbers such that their lcm lies within the given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 * L <= R) {\n            return new int[]{L, 2 * L};\n        } else {\n            return new int[]{-1};\n        }\n    }\n    public static boolean compareArrays(int[] arr1, int[] arr2) {\n        if (arr1.length != arr2.length) {\n        //begin to write code\n"
    },
    {
        "task_id": 178,
        "code_str": "class Solution {\n    public static String stringLiterals(List<String> patterns, String text) {\n        for (String pattern : patterns) {\n            if (Pattern.compile(pattern).matcher(text).find()) {\n                return \"Matched!\";\n            } else {\n                return \"Not Matched!\";\n            }\n        }\n        return \"Not Matched!\";\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.stringLiterals(Arrays.asList(\"language\"), \"python language\").equals(\"Matched!\");\n        assert Solution.stringLiterals(Arrays.asList(\"program\"), \"python language\").equals(\"Not Matched!\");\n        assert Solution.stringLiterals(Arrays.asList(\"python\"), \"programming language\").equals(\"Not Matched!\");\n    }\n}\n",
        "prompt": "Write a function to search some literals strings in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String stringLiterals(List<String> patterns, String text) {\n        for (String pattern : patterns) {\n            if (Pattern.compile(pattern).matcher(text).find()) {\n                return \"Matched!\";\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a function to search some literals strings in a string.",
        "code_str_generate": "class Solution {\n    public static String stringLiterals(List<String> patterns, String text) {\n\n        /*\n        progame language:java\n        description:Write a function to search some literals strings in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (String pattern : patterns) {\n            if (Pattern.compile(pattern).matcher(text).find()) {\n                return \"Matched!\";\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 179,
        "code_str": "class Solution {\n    public boolean isNumKeith(int x) {\n        int n = 0;\n        int temp = x;\n        ArrayList<Integer> terms = new ArrayList<>();\n        while (temp > 0) {\n            terms.add(temp % 10);\n            temp = temp / 10;\n            n++;\n        }\n        Collections.reverse(terms);\n        int nextTerm = 0;\n        int i = n;\n        while (nextTerm < x) {\n            nextTerm = 0;\n            for (int j = 1; j <= n; j++) {\n                nextTerm += terms.get(i - j);\n            }\n            terms.add(nextTerm);\n            i++;\n        }\n        return (nextTerm == x);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.isNumKeith(14) == true;\n        assert solution.isNumKeith(12) == false;\n        assert solution.isNumKeith(197) == true;\n    }\n}\n",
        "prompt": "Write a function to find if the given number is a keith number or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isNumKeith(int x) {\n        int n = 0;\n        int temp = x;\n        ArrayList<Integer> terms = new ArrayList<>();\n        while (temp > 0) {\n            terms.add(temp % 10);\n            temp = temp / 10;\n            n++;\n        }\n        Collections.reverse(terms);\n        int nextTerm = 0;\n        //begin to write code\n",
        "java_prompt": "Write a function to find if the given number is a keith number or not.",
        "code_str_generate": "class Solution {\n    public boolean isNumKeith(int x) {\n\n        /*\n        progame language:java\n        description:Write a function to find if the given number is a keith number or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = 0;\n        int temp = x;\n        ArrayList<Integer> terms = new ArrayList<>();\n        while (temp > 0) {\n            terms.add(temp % 10);\n            temp = temp / 10;\n            n++;\n        }\n        Collections.reverse(terms);\n        int nextTerm = 0;\n        //begin to write code\n"
    },
    {
        "task_id": 180,
        "code_str": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        return dist;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.distance_lat_long(23.5,67.5,25.5,69.5) - 12179.372041317429) < 0.0001;\n        assert Math.abs(Solution.distance_lat_long(10.5,20.5,30.5,40.5) - 6069.397933300514) < 0.0001;\n        assert Math.abs(Solution.distance_lat_long(10,20,30,40) - 6783.751974994595) < 0.0001;\n    }\n}\n",
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate distance between two points using latitude and longitude.",
        "code_str_generate": "class Solution {\n    public static double distance_lat_long(double slat, double slon, double elat, double elon) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate distance between two points using latitude and longitude.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double dist = 6371.01 * Math.acos(Math.sin(slat) * Math.sin(elat) + Math.cos(slat) * Math.cos(elat) * Math.cos(slon - elon));\n        //begin to write code\n"
    },
    {
        "task_id": 181,
        "code_str": "class Solution {\n    public static String commonPrefixUtil(String str1, String str2) {\n        String result = \"\";\n        int n1 = str1.length(), n2 = str2.length();\n        int i = 0, j = 0;\n        while(i <= n1 - 1 && j <= n2 - 1) {\n            if (str1.charAt(i) != str2.charAt(j)) {\n                break;\n            }\n            result += str1.charAt(i);\n            i++;\n            j++;\n        }\n        return result;\n    }\n\n    public static String commonPrefix(String arr[], int n) {\n        String prefix = arr[0];\n        for (int i = 1; i < n; i++) {\n            prefix = commonPrefixUtil(prefix, arr[i]);\n        }\n        return prefix;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.commonPrefix(new String[]{\"tablets\", \"tables\", \"taxi\", \"tamarind\"}, 4).equals(\"ta\");\n        assert Solution.commonPrefix(new String[]{\"apples\", \"ape\", \"april\"}, 3).equals(\"ap\");\n        assert Solution.commonPrefix(new String[]{\"teens\", \"teenager\", \"teenmar\"}, 3).equals(\"teen\");\n    }\n}\n",
        "prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String commonPrefixUtil(String str1, String str2) {\n        String result = \"\";\n        int n1 = str1.length(), n2 = str2.length();\n        int i = 0, j = 0;\n        while(i <= n1 - 1 && j <= n2 - 1) {\n            if (str1.charAt(i) != str2.charAt(j)) {\n                break;\n            }\n            result += str1.charAt(i);\n            i++;\n            j++;\n            //begin to write code\n",
        "java_prompt": "Write a function to find the longest common prefix in the given set of strings.",
        "code_str_generate": "class Solution {\n    public static String commonPrefixUtil(String str1, String str2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest common prefix in the given set of strings.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String result = \"\";\n        int n1 = str1.length(), n2 = str2.length();\n        int i = 0, j = 0;\n        while(i <= n1 - 1 && j <= n2 - 1) {\n            if (str1.charAt(i) != str2.charAt(j)) {\n                break;\n            }\n            result += str1.charAt(i);\n            i++;\n            j++;\n            //begin to write code\n"
    },
    {
        "task_id": 182,
        "code_str": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n            } else if (c == ',' || c == '.' || c == '!' || c == '?') {\n                specialCharacters.add(c);\n            }\n        }\n\n        List<List<Character>> result = new ArrayList<>();\n        result.add(uppercaseCharacters);\n        result.add(lowercaseCharacters);\n        result.add(numericalCharacters);\n        result.add(specialCharacters);\n\n        return result;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        List<List<Character>> result1 = Solution.findCharacter(\"ThisIsGeeksforGeeks\");\n        assert result1.get(0).equals(List.of('T', 'I', 'G', 'G'));\n        assert result1.get(1).equals(List.of('h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'));\n        assert result1.get(2).isEmpty();\n        assert result1.get(3).isEmpty();\n\n        List<List<Character>> result2 = Solution.findCharacter(\"Hithere2\");\n        assert result2.get(0).equals(List.of('H'));\n        assert result2.get(1).equals(List.of('i', 't', 'h', 'e', 'r', 'e'));\n        assert result2.get(2).equals(List.of('2'));\n        assert result2.get(3).isEmpty();\n\n        List<List<Character>> result3 = Solution.findCharacter(\"HeyFolks32\");\n        assert result3.get(0).equals(List.of('H', 'F'));\n        assert result3.get(1).equals(List.of('e', 'y', 'o', 'l', 'k', 's'));\n        assert result3.get(2).equals(List.of('3', '2'));\n        assert result3.get(3).isEmpty();\n    }\n}\n",
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n",
        "java_prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
        "code_str_generate": "class Solution {\n    public static List<List<Character>> findCharacter(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to find uppercase, lowercase, special character and numeric values using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Character> uppercaseCharacters = new ArrayList<>();\n        List<Character> lowercaseCharacters = new ArrayList<>();\n        List<Character> numericalCharacters = new ArrayList<>();\n        List<Character> specialCharacters = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n                uppercaseCharacters.add(c);\n            } else if (Character.isLowerCase(c)) {\n                lowercaseCharacters.add(c);\n            } else if (Character.isDigit(c)) {\n                numericalCharacters.add(c);\n                //begin to write code\n"
    },
    {
        "task_id": 183,
        "code_str": "class Solution {\n    public static int countPairs(int arr[], int n, int k) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) {\n                    count += 1;\n                }\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countPairs(new int[]{1, 5, 3, 4, 2}, 5, 3) == 2;\n        assert Solution.countPairs(new int[]{8, 12, 16, 4, 0, 20}, 6, 4) == 5;\n        assert Solution.countPairs(new int[]{2, 4, 1, 3, 4}, 5, 2) == 3;\n    }\n}\n",
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countPairs(int arr[], int n, int k) {\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) {\n                    count += 1;\n                    //begin to write code\n",
        "java_prompt": "Write a function to count all the distinct pairs having a difference of k in any array.",
        "code_str_generate": "class Solution {\n    public static int countPairs(int arr[], int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to count all the distinct pairs having a difference of k in any array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) {\n                    count += 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 184,
        "code_str": "class Solution {\n    public static boolean greaterSpecificNum(int[] list, int num) {\n        for (int x : list) {\n            if (x < num) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.greaterSpecificNum(new int[]{220, 330, 500},200)==true;\n        assert Solution.greaterSpecificNum(new int[]{12, 17, 21},20)==false;\n        assert Solution.greaterSpecificNum(new int[]{1,2,3,4},10)==false;\n    }\n}\n",
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean greaterSpecificNum(int[] list, int num) {\n        for (int x : list) {\n            if (x < num) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a function to find all the values in a list that are greater than a specified number.",
        "code_str_generate": "class Solution {\n    public static boolean greaterSpecificNum(int[] list, int num) {\n\n        /*\n        progame language:java\n        description:Write a function to find all the values in a list that are greater than a specified number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int x : list) {\n            if (x < num) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 185,
        "code_str": "class Solution {\n    public static double[] parabolaFocus(double a, double b, double c) {\n        double[] focus = new double[2];\n        focus[0] = (double)(-b) / (2 * a);\n        focus[1] = (double)(((4 * a * c) - (b * b) + 1) / (4 * a));\n        return focus;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.parabolaFocus(5,3,2), new double[]{-0.3, 1.6});\n        assert Arrays.equals(Solution.parabolaFocus(9,8,4), new double[]{-0.4444444444444444, 2.25});\n        assert Arrays.equals(Solution.parabolaFocus(2,4,6), new double[]{-1.0, 4.125});\n    }\n}\n",
        "prompt": "Write a function to find the focus of a parabola.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double[] parabolaFocus(double a, double b, double c) {\n        double[] focus = new double[2];\n        focus[0] = (double)(-b) / (2 * a);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the focus of a parabola.",
        "code_str_generate": "class Solution {\n    public static double[] parabolaFocus(double a, double b, double c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the focus of a parabola.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double[] focus = new double[2];\n        focus[0] = (double)(-b) / (2 * a);\n        //begin to write code\n"
    },
    {
        "task_id": 186,
        "code_str": "class Solution {\n    public static String checkLiterals(String text, String[] patterns) {\n        for (String pattern : patterns) {\n            Pattern compiledPattern = Pattern.compile(pattern);\n            Matcher matcher = compiledPattern.matcher(text);\n            if (matcher.find()) {\n                return \"Matched!\";\n            }\n        }\n        return \"Not Matched!\";\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkLiterals(\"The quick brown fox jumps over the lazy dog.\", new String[]{\"fox\"}).equals(\"Matched!\");\n        assert Solution.checkLiterals(\"The quick brown fox jumps over the lazy dog.\", new String[]{\"horse\"}).equals(\"Not Matched!\");\n        assert Solution.checkLiterals(\"The quick brown fox jumps over the lazy dog.\", new String[]{\"lazy\"}).equals(\"Matched!\");\n    }\n}\n",
        "prompt": "Write a function to search some literals strings in a string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String checkLiterals(String text, String[] patterns) {\n        for (String pattern : patterns) {\n            Pattern compiledPattern = Pattern.compile(pattern);\n            Matcher matcher = compiledPattern.matcher(text);\n            if (matcher.find()) {\n            //begin to write code\n",
        "java_prompt": "Write a function to search some literals strings in a string by using regex.",
        "code_str_generate": "class Solution {\n    public static String checkLiterals(String text, String[] patterns) {\n\n        /*\n        progame language:java\n        description:Write a function to search some literals strings in a string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (String pattern : patterns) {\n            Pattern compiledPattern = Pattern.compile(pattern);\n            Matcher matcher = compiledPattern.matcher(text);\n            if (matcher.find()) {\n            //begin to write code\n"
    },
    {
        "task_id": 187,
        "code_str": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n        } else {\n            return Math.max(longest_common_subsequence(X, Y, m, n - 1), longest_common_subsequence(X, Y, m - 1, n));\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4;\n        assert solution.longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3;\n        assert solution.longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n            //begin to write code\n",
        "java_prompt": "Write a function to find the longest common subsequence for the given two sequences.",
        "code_str_generate": "class Solution {\n    public int longest_common_subsequence(String X, String Y, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest common subsequence for the given two sequences.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (m == 0 || n == 0) {\n            return 0;\n        } else if (X.charAt(m - 1) == Y.charAt(n - 1)) {\n            return 1 + longest_common_subsequence(X, Y, m - 1, n - 1);\n            //begin to write code\n"
    },
    {
        "task_id": 188,
        "code_str": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.prod_Square(25) == false;\n        assert Solution.prod_Square(30) == false;\n        assert Solution.prod_Square(16) == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean prod_Square(int n) {\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given number can be represented by product of two squares or not.",
        "code_str_generate": "class Solution {\n    public static boolean prod_Square(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given number can be represented by product of two squares or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 2; i <= n; i++) {\n            if (i * i < n + 1) {\n                for (int j = 2; j <= n; j++) {\n                    if (i * i * j * j == n) {\n                        return true;\n                        //begin to write code\n"
    },
    {
        "task_id": 189,
        "code_str": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n                nums[i] = 1;\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            nums[(nums[i] - 1) % n] += n;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= n) {\n                return i + 1;\n            }\n        }\n        return n + 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.firstMissingPositive(new int[]{1,2,3,-1,5}) == 4;\n        assert solution.firstMissingPositive(new int[]{0,-1,-2,1,5,8}) == 2;\n        assert solution.firstMissingPositive(new int[]{0,1,2,5,-8}) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the first missing positive number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first missing positive number.",
        "code_str_generate": "class Solution {\n    public int firstMissingPositive(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first missing positive number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = nums.length;\n        int ptr = 0;\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == 1) {\n                ptr = 1;\n                break;\n            }\n        }\n        if (ptr == 0) {\n            return 1;\n        }\n        for (int i = 0; i < n; i++) {\n            if (nums[i] <= 0 || nums[i] > n) {\n            //begin to write code\n"
    },
    {
        "task_id": 190,
        "code_str": "class Solution {\n    public static int count_Intgral_Points(int x1, int y1, int x2, int y2) {\n        return ((y2 - y1 - 1) * (x2 - x1 - 1));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Intgral_Points(1,1,4,4) == 4;\n        assert Solution.count_Intgral_Points(1,2,1,2) == 1;\n        assert Solution.count_Intgral_Points(4,2,6,4) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Intgral_Points(int x1, int y1, int x2, int y2) {\n        return ((y2 - y1 - 1) * (x2 - x1 - 1));\n        //begin to write code\n",
        "java_prompt": "Write a java function to count the number of integral co-ordinates that lie inside a square.",
        "code_str_generate": "class Solution {\n    public static int count_Intgral_Points(int x1, int y1, int x2, int y2) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of integral co-ordinates that lie inside a square.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return ((y2 - y1 - 1) * (x2 - x1 - 1));\n        //begin to write code\n"
    },
    {
        "task_id": 191,
        "code_str": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.checkMonthNumber(\"February\");\n        assert solution.checkMonthNumber(\"June\");\n        assert solution.checkMonthNumber(\"April\");\n    }\n}\n",
        "prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to check whether the given month name contains 30 days or not.",
        "code_str_generate": "class Solution {\n    public boolean checkMonthNumber(String monthName3) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 30 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthName3.equals(\"April\") || monthName3.equals(\"June\") || monthName3.equals(\"September\") || monthName3.equals(\"November\")) {\n            return true;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 192,
        "code_str": "class Solution {\n    public static boolean checkString(String str) {\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            if (Character.isDigit(c)) {\n                flagN = true;\n            }\n        }\n        return flagL && flagN;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkString(\"thishasboth29\") == true;\n        assert Solution.checkString(\"python\") == false;\n        assert Solution.checkString(\"string\") == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkString(String str) {\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether a string has atleast one letter and one number.",
        "code_str_generate": "class Solution {\n    public static boolean checkString(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether a string has atleast one letter and one number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean flagL = false;\n        boolean flagN = false;\n        for (char c : str.toCharArray()) {\n            if (Character.isLetter(c)) {\n                flagL = true;\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 193,
        "code_str": "class Solution {\n    public static Integer[] removeTuple(Integer[] test_tup) {\n        Set<Integer> set = new LinkedHashSet<>();\n        for (Integer i : test_tup) {\n            set.add(i);\n        }\n        Integer[] res = new Integer[set.size()];\n        return set.toArray(res);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Integer[] test_tup1 = {1, 3, 5, 2, 3, 5, 1, 1, 3};\n        Integer[] res1 = {1, 3, 5, 2};\n        assert Arrays.equals(solution.removeTuple(test_tup1),res1);\n\n        Integer[] test_tup2 = {2, 3, 4, 4, 5, 6, 6, 7, 8, 8};\n        Integer[] res2 = {2, 3, 4, 5, 6, 7, 8};\n        assert Arrays.equals(solution.removeTuple(test_tup2),res2);\n\n        Integer[] test_tup3 = {11, 12, 13, 11, 11, 12, 14, 13};\n        Integer[] res3 = {11, 12, 13, 14};\n        assert Arrays.equals(solution.removeTuple(test_tup3),res3);\n    }\n}",
        "prompt": "Write a function to remove the duplicates from the given tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Integer[] removeTuple(Integer[] test_tup) {\n        Set<Integer> set = new LinkedHashSet<>();\n        for (Integer i : test_tup) {\n            set.add(i);\n            //begin to write code\n",
        "java_prompt": "Write a function to remove the duplicates from the given tuple.",
        "code_str_generate": "class Solution {\n    public static Integer[] removeTuple(Integer[] test_tup) {\n\n        /*\n        progame language:java\n        description:Write a function to remove the duplicates from the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Integer> set = new LinkedHashSet<>();\n        for (Integer i : test_tup) {\n            set.add(i);\n            //begin to write code\n"
    },
    {
        "task_id": 194,
        "code_str": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int last_digit = temp % 10;\n            temp = temp / 10;\n            dec_value += last_digit * base;\n            base = base * 8;\n        }\n        return dec_value;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.octal_To_Decimal(25) == 21;\n        assert Solution.octal_To_Decimal(30) == 24;\n        assert Solution.octal_To_Decimal(40) == 32;\n    }\n}\n",
        "prompt": "Write a python function to convert octal number to decimal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int octal_To_Decimal(int n) {\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int last_digit = temp % 10;\n            //begin to write code\n",
        "java_prompt": "Write a java function to convert octal number to decimal number.",
        "code_str_generate": "class Solution {\n    public static int octal_To_Decimal(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert octal number to decimal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int num = n;\n        int dec_value = 0;\n        int base = 1;\n        int temp = num;\n        while (temp > 0) {\n            int last_digit = temp % 10;\n            //begin to write code\n"
    },
    {
        "task_id": 195,
        "code_str": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n                low = mid + 1;\n            } else {\n                res = mid;\n                high = mid - 1;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.first(new int[]{1,2,3,4,5,6,6},6,6) == 5;\n        assert Solution.first(new int[]{1,2,2,2,3,2,2,4,2},2,9) == 1;\n        assert Solution.first(new int[]{1,2,3},1,3) == 0;\n    }\n}\n",
        "prompt": "Write a python function to find the first position of an element in a sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int first(int arr[], int x, int n) {\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first position of an element in a sorted array.",
        "code_str_generate": "class Solution {\n    public static int first(int arr[], int x, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first position of an element in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int low = 0;\n        int high = n - 1;\n        int res = -1;\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (arr[mid] > x) {\n                high = mid - 1;\n            } else if (arr[mid] < x) {\n            //begin to write code\n"
    },
    {
        "task_id": 196,
        "code_str": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(4, 5), Arrays.asList(4), Arrays.asList(8, 6, 7), Arrays.asList(1), Arrays.asList(3, 4, 6, 7));\n        List<List<Integer>> result1 = Arrays.asList(Arrays.asList(4, 5), Arrays.asList(8, 6, 7), Arrays.asList(3, 4, 6, 7));\n        assert solution.removeTuples(testList1, 1).equals(result1);\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(4, 5), Arrays.asList(4,5), Arrays.asList(6, 7), Arrays.asList(1, 2, 3), Arrays.asList(3, 4, 6, 7));\n        List<List<Integer>> result2 = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(3, 4, 6, 7));\n        assert solution.removeTuples(testList2, 2).equals(result2);\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(1, 4, 4), Arrays.asList(4, 3), Arrays.asList(8, 6, 7), Arrays.asList(1), Arrays.asList(3, 6, 7));\n        List<List<Integer>> result3 = Arrays.asList(Arrays.asList(4, 3), Arrays.asList(1));\n        assert solution.removeTuples(testList3, 3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to remove all the tuples with length k.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove all the tuples with length k.",
        "code_str_generate": "class Solution {\n    public static List<List<Integer>> removeTuples(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all the tuples with length k.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            if (ele.size() != K) {\n                res.add(ele);\n                //begin to write code\n"
    },
    {
        "task_id": 197,
        "code_str": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.findExponentio(new int[]{10, 4, 5, 6}, new int[]{5, 6, 7, 5}), new int[]{100000, 4096, 78125, 7776});\n        assert Arrays.equals(Solution.findExponentio(new int[]{11, 5, 6, 7}, new int[]{6, 7, 8, 6}), new int[]{1771561, 78125, 1679616, 117649});\n        assert Arrays.equals(Solution.findExponentio(new int[]{12, 6, 7, 8}, new int[]{7, 8, 9, 7}), new int[]{35831808, 1679616, 40353607, 2097152});\n    }\n}\n",
        "prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n",
        "java_prompt": "Write a function to perform the exponentiation of the given two tuples.",
        "code_str_generate": "class Solution {\n    public static int[] findExponentio(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the exponentiation of the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = (int) Math.pow(test_tup1[i], test_tup2[i]);\n            //begin to write code\n"
    },
    {
        "task_id": 198,
        "code_str": "class Solution {\n    public double largestTriangle(int a, int b) {\n        if (a < 0 || b < 0) {\n            return -1;\n        }\n        double area = (3 * Math.sqrt(3) * Math.pow(a, 2)) / (4 * b);\n        return area;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.largestTriangle(4,2) == 10.392304845413264;\n        assert solution.largestTriangle(5,7) == 4.639421805988064;\n        assert solution.largestTriangle(9,1) == 105.2220865598093;\n    }\n}\n",
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public double largestTriangle(int a, int b) {\n        if (a < 0 || b < 0) {\n            return -1;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
        "code_str_generate": "class Solution {\n    public double largestTriangle(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to find the largest triangle that can be inscribed in an ellipse.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a < 0 || b < 0) {\n            return -1;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 199,
        "code_str": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.highest_Power_of_2(10) == 8;\n        assert Solution.highest_Power_of_2(19) == 16;\n        assert Solution.highest_Power_of_2(32) == 32;\n    }\n}\n",
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find highest power of 2 less than or equal to given number.",
        "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find highest power of 2 less than or equal to given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n"
    },
    {
        "task_id": 200,
        "code_str": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] == max_val) {\n                max_result.add(i);\n            }\n        }\n        return max_result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result1 = solution.positionMax(new int[]{12,33,23,10,67,89,45,667,23,12,11,10,54});\n        assert result1.equals(Arrays.asList(7));\n        List<Integer> result2 = solution.positionMax(new int[]{1,2,2,2,4,4,4,5,5,5,5});\n        assert result2.equals(Arrays.asList(7,8,9,10));\n        List<Integer> result3 = solution.positionMax(new int[]{2,1,5,6,8,3,4,9,10,11,8,12});\n        assert result3.equals(Arrays.asList(11));\n    }\n}\n",
        "prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n",
        "java_prompt": "Write a function to find all index positions of the maximum values in a given list.",
        "code_str_generate": "class Solution {\n    public List<Integer> positionMax(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find all index positions of the maximum values in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_val = nums[0];\n        for (int num : nums) {\n            if (num > max_val) {\n                max_val = num;\n            }\n        }\n        List<Integer> max_result = new ArrayList<>();\n        //begin to write code\n"
    },
    {
        "task_id": 201,
        "code_str": "class Solution {\n    public static boolean chkList(List<String> lst) {\n        HashSet<String> set = new HashSet<>(lst);\n        return set.size() == 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.chkList(Arrays.asList(\"one\",\"one\",\"one\")) == true;\n        assert Solution.chkList(Arrays.asList(\"one\",\"Two\",\"Three\")) == false;\n        assert Solution.chkList(Arrays.asList(\"bigdata\",\"python\",\"Django\")) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether the elements in a list are same or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean chkList(List<String> lst) {\n        HashSet<String> set = new HashSet<>(lst);\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the elements in a list are same or not.",
        "code_str_generate": "class Solution {\n    public static boolean chkList(List<String> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the elements in a list are same or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<String> set = new HashSet<>(lst);\n        //begin to write code\n"
    },
    {
        "task_id": 202,
        "code_str": "class Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.removeEven(\"python\").equals(\"pto\");\n        assert Solution.removeEven(\"program\").equals(\"porm\");\n        assert Solution.removeEven(\"language\").equals(\"lnug\");\n    }\n}\n",
        "prompt": "Write a function to remove even characters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String removeEven(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove even characters in a string.",
        "code_str_generate": "class Solution {\n    public static String removeEven(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove even characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 != 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n"
    },
    {
        "task_id": 203,
        "code_str": "class Solution {\n    public int hammingDistance(int n1, int n2) {\n        int x = n1 ^ n2;\n        int setBits = 0;\n        while (x > 0) {\n            setBits += x & 1;\n            x >>= 1;\n        }\n        return setBits;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.hammingDistance(4,8) == 2;\n        assert solution.hammingDistance(2,4) == 2;\n        assert solution.hammingDistance(1,2) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the hamming distance between given two integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int hammingDistance(int n1, int n2) {\n        int x = n1 ^ n2;\n        int setBits = 0;\n        while (x > 0) {\n            setBits += x & 1;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the hamming distance between given two integers.",
        "code_str_generate": "class Solution {\n    public int hammingDistance(int n1, int n2) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the hamming distance between given two integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int x = n1 ^ n2;\n        int setBits = 0;\n        while (x > 0) {\n            setBits += x & 1;\n            //begin to write code\n"
    },
    {
        "task_id": 204,
        "code_str": "class Solution {\n    public static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count(\"abcc\", 'c') == 2;\n        assert Solution.count(\"ababca\", 'a') == 3;\n        assert Solution.count(\"mnmm0pm\", 'm') == 4;\n    }\n}\n",
        "prompt": "Write a python function to count the occurrence of a given character in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count(String s, char c) {\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count the occurrence of a given character in a string.",
        "code_str_generate": "class Solution {\n    public static int count(String s, char c) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurrence of a given character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == c) {\n                res = res + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 205,
        "code_str": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.inversion_elements(new int[]{7, 8, 9, 1, 10, 7}), new int[]{-8, -9, -10, -2, -11, -8});\n        assert Arrays.equals(Solution.inversion_elements(new int[]{2, 4, 5, 6, 1, 7}), new int[]{-3, -5, -6, -7, -2, -8});\n        assert Arrays.equals(Solution.inversion_elements(new int[]{8, 9, 11, 14, 12, 13}), new int[]{-9, -10, -12, -15, -13, -14});\n    }\n}\n",
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n",
        "java_prompt": "Write a function to find the inversions of tuple elements in the given tuple list.",
        "code_str_generate": "class Solution {\n    public static int[] inversion_elements(int[] test_arr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the inversions of tuple elements in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.stream(test_arr).map(x -> ~x).toArray();\n        //begin to write code\n"
    },
    {
        "task_id": 206,
        "code_str": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n        ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < test_tup.length - 1; i++) {\n            res.add(test_tup[i] + test_tup[i + 1]);\n        }\n        return res.toArray(new String[0]);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.concatenate_elements(new String[]{\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"}), new String[]{\"DSP IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL UTS\"});\n        assert Arrays.equals(Solution.concatenate_elements(new String[]{\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"}), new String[]{\"RES IS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL QESR\"});\n        assert Arrays.equals(Solution.concatenate_elements(new String[]{\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"}), new String[]{\"MSAMIS \", \"IS BEST \", \"BEST FOR \", \"FOR ALL \", \"ALL SKD\"});\n    }\n}\n",
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n        ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < test_tup.length - 1; i++) {\n            res.add(test_tup[i] + test_tup[i + 1]);\n            //begin to write code\n",
        "java_prompt": "Write a function to perform the adjacent element concatenation in the given tuples.",
        "code_str_generate": "class Solution {\n    public static String[] concatenate_elements(String[] test_tup) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the adjacent element concatenation in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> res = new ArrayList<>();\n        for (int i = 0; i < test_tup.length - 1; i++) {\n            res.add(test_tup[i] + test_tup[i + 1]);\n            //begin to write code\n"
    },
    {
        "task_id": 207,
        "code_str": "class Solution {\n    public int findLongestRepeatingSubseq(String str) {\n        int n = str.length();\n        int[][] dp = new int[n+1][n+1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (str.charAt(i-1) == str.charAt(j-1) && i != j) {\n                    dp[i][j] = 1 + dp[i-1][j-1];\n                } else {\n                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);\n                }\n            }\n        }\n        return dp[n][n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findLongestRepeatingSubseq(\"AABEBCDD\") == 3;\n        assert solution.findLongestRepeatingSubseq(\"aabb\") == 2;\n        assert solution.findLongestRepeatingSubseq(\"aab\") == 1;\n    }\n}\n",
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findLongestRepeatingSubseq(String str) {\n        int n = str.length();\n        int[][] dp = new int[n+1][n+1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (str.charAt(i-1) == str.charAt(j-1) && i != j) {\n                    dp[i][j] = 1 + dp[i-1][j-1];\n                    //begin to write code\n",
        "java_prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
        "code_str_generate": "class Solution {\n    public int findLongestRepeatingSubseq(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = str.length();\n        int[][] dp = new int[n+1][n+1];\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (str.charAt(i-1) == str.charAt(j-1) && i != j) {\n                    dp[i][j] = 1 + dp[i-1][j-1];\n                    //begin to write code\n"
    },
    {
        "task_id": 208,
        "code_str": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        return matcher.find();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isDecimal(\"123.11\") == true;\n        assert Solution.isDecimal(\"0.21\") == true;\n        assert Solution.isDecimal(\"123.1214\") == false;\n    }\n}\n",
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isDecimal(String num) {\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n",
        "java_prompt": "Write a function to check the given decimal with a precision of 2 by using regex.",
        "code_str_generate": "class Solution {\n    public static boolean isDecimal(String num) {\n\n        /*\n        progame language:java\n        description:Write a function to check the given decimal with a precision of 2 by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"^[0-9]+(\\\\.[0-9]{1,2})?$\");\n        Matcher matcher = pattern.matcher(num);\n        //begin to write code\n"
    },
    {
        "task_id": 209,
        "code_str": "class Solution {\n    public static PriorityQueue<Integer> heapReplace(PriorityQueue<Integer> heap, int a) {\n        // \u68c0\u67e5\u5806\u662f\u5426\u4e3a\u7a7a\n        if (heap.isEmpty()) {\n            throw new IllegalArgumentException(\"Heap is empty\");\n        }\n        // \u66ff\u6362\u5806\u9876\u5143\u7d20\n        heap.poll(); // \u79fb\u9664\u5806\u9876\u5143\u7d20\n        heap.add(a); // \u6dfb\u52a0\u65b0\u5143\u7d20\n        return heap;\n    }\n}",
        "test": "\npublic class Main{\n    public static List<Integer> convertHeapToList(PriorityQueue<Integer> heap) {\n        // \u5c06PriorityQueue\u8f6c\u6362\u4e3aArrayList\n        return new ArrayList<>(heap);\n    }\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        PriorityQueue<Integer> heap1 = new PriorityQueue<>();\n        PriorityQueue<Integer> heap2 = new PriorityQueue<>();\n        PriorityQueue<Integer> heap3 = new PriorityQueue<>();\n        int[] ele1 = {21, 25, 23, 44, 39, 68, 89};\n        for (int element : ele1) {\n            heap1.add(element);\n            heap2.add(element);\n            heap3.add(element);\n        }\n        solution.heapReplace(heap1, 21);\n        List<Integer> result1 = convertHeapToList(heap1);\n        assert result1.get(0) == 21;\n        assert result1.get(1) == 25;\n        assert result1.get(2) == 23;\n        assert result1.get(3) == 44;\n        assert result1.get(4) == 39;\n        assert result1.get(5) == 89;\n        assert result1.get(6) == 68;\n\n        solution.heapReplace(heap2, 110);\n        List<Integer> result2 = convertHeapToList(heap2);\n        assert result2.get(0) == 23;\n        assert result2.get(1) == 25;\n        assert result2.get(2) == 68;\n        assert result2.get(3) == 44;\n        assert result2.get(4) == 39;\n        assert result2.get(5) == 89;\n        assert result2.get(6) == 110;\n\n        solution.heapReplace(heap3, 500);\n        List<Integer> result3 = convertHeapToList(heap3);\n        assert result3.get(0) == 23;\n        assert result3.get(1) == 25;\n        assert result3.get(2) == 68;\n        assert result3.get(3) == 44;\n        assert result3.get(4) == 39;\n        assert result3.get(5) == 89;\n        assert result3.get(6) == 500;\n}\n}",
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static PriorityQueue<Integer> heapReplace(PriorityQueue<Integer> heap, int a) {\n        // \u68c0\u67e5\u5806\u662f\u5426\u4e3a\u7a7a\n        if (heap.isEmpty()) {\n            throw new IllegalArgumentException(\"Heap is empty\");\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.",
        "code_str_generate": "class Solution {\n    public static PriorityQueue<Integer> heapReplace(PriorityQueue<Integer> heap, int a) {\n\n        /*\n        progame language:java\n        description:Write a function to delete the smallest element from the given heap and then insert a new item.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        // \u68c0\u67e5\u5806\u662f\u5426\u4e3a\u7a7a\n        if (heap.isEmpty()) {\n            throw new IllegalArgumentException(\"Heap is empty\");\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 210,
        "code_str": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        return !matcher.find();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.isAllowedSpecificChar(\"ABCDEFabcdef123450\") == true;\n        assert solution.isAllowedSpecificChar(\"*&%@#!}{\") == false;\n        assert solution.isAllowedSpecificChar(\"HELLOhowareyou98765\") == true;\n    }\n}\n",
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        //begin to write code\n",
        "java_prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
        "code_str_generate": "class Solution {\n    public boolean isAllowedSpecificChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[^a-zA-Z0-9.]\");\n        Matcher matcher = pattern.matcher(string);\n        //begin to write code\n"
    },
    {
        "task_id": 211,
        "code_str": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        int count = (int) Math.pow(2, n - 2);\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Num(2) == 1;\n        assert Solution.count_Num(3) == 2;\n        assert Solution.count_Num(1) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Num(int n) {\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to count numbers whose oth and nth bits are set.",
        "code_str_generate": "class Solution {\n    public static int count_Num(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count numbers whose oth and nth bits are set.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 1) {\n            return 1;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 212,
        "code_str": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.fourthPowerSum(2) == 17;\n        assert Solution.fourthPowerSum(4) == 354;\n        assert Solution.fourthPowerSum(6) == 2275;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int fourthPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of fourth power of n natural numbers.",
        "code_str_generate": "class Solution {\n    public static int fourthPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fourth power of n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += Math.pow(i, 4);\n            //begin to write code\n"
    },
    {
        "task_id": 213,
        "code_str": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert Arrays.equals(solution.concatenateStrings(new String[]{\"Manjeet\", \"Nikhil\", \"Akshat\"}, new String[]{\" Singh\", \" Meherwal\", \" Garg\"}), new String[]{\"Manjeet Singh\", \"Nikhil Meherwal\", \"Akshat Garg\"});\n        assert Arrays.equals(solution.concatenateStrings(new String[]{\"Shaik\", \"Ayesha\", \"Sanya\"}, new String[]{\" Dawood\", \" Begum\", \" Singh\"}), new String[]{\"Shaik Dawood\", \"Ayesha Begum\", \"Sanya Singh\"});\n        assert Arrays.equals(solution.concatenateStrings(new String[]{\"Harpreet\", \"Priyanka\", \"Muskan\"}, new String[]{\"Kour\", \" Agarwal\", \"Sethi\"}), new String[]{\"HarpreetKour\", \"Priyanka Agarwal\", \"MuskanSethi\"});\n    }\n}\n",
        "prompt": "Write a function to perform the concatenation of two string tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to perform the concatenation of two string tuples.",
        "code_str_generate": "class Solution {\n    public static String[] concatenateStrings(String[] test_tup1, String[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the concatenation of two string tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] res = new String[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] + test_tup2[i];\n            //begin to write code\n"
    },
    {
        "task_id": 214,
        "code_str": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = radian * (180 / Math.PI);\n        return degree;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.degreeRadian(90) - 5156.620156177409) < 0.0001;\n        assert Math.abs(Solution.degreeRadian(60) - 3437.746770784939) < 0.0001;\n        assert Math.abs(Solution.degreeRadian(120) - 6875.493541569878) < 0.0001;\n    }\n}\n",
        "prompt": "Write a function to convert radians to degrees.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double degreeRadian(double radian) {\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n",
        "java_prompt": "Write a function to convert radians to degrees.",
        "code_str_generate": "class Solution {\n    public static double degreeRadian(double radian) {\n\n        /*\n        progame language:java\n        description:Write a function to convert radians to degrees.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double degree = radian * (180 / Math.PI);\n        //begin to write code\n"
    },
    {
        "task_id": 215,
        "code_str": "class Solution {\n    public static List<Object> decodeList(List<Object> alist) {\n        List<Object> result = new ArrayList<>();\n        for (Object g : alist) {\n            if (g instanceof List) {\n                List<Object> subList = (List<Object>) g;\n                for (int i = 0; i < (int) subList.get(0); i++) {\n                    result.add(subList.get(1));\n                }\n            } else {\n                result.add(g);\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> test1 = new ArrayList<>();\n        test1.add(new ArrayList<Object>(){{\nadd(2); add(1);}});\n        test1.add(2);\n        test1.add(3);\n        test1.add(new ArrayList<Object>(){{\nadd(2); add(4);}});\n        test1.add(5);\n        test1.add(1);\n        System.out.println(solution.decodeList(test1).equals(new ArrayList<Object>(){{\nadd(1); add(1); add(2); add(3); add(4); add(4); add(5); add(1);}}));\n\n        List<Object> test2 = new ArrayList<>();\n        test2.add('a');\n        test2.add('u');\n        test2.add('t');\n        test2.add('o');\n        test2.add('m');\n        test2.add('a');\n        test2.add('t');\n        test2.add('i');\n        test2.add('c');\n        test2.add('a');\n        test2.add(new ArrayList<Object>(){{\n add(2); add('l');}});\n        test2.add('y');\n        System.out.println(solution.decodeList(test2).equals(new ArrayList<Object>(){{\nadd('a'); add('u'); add('t'); add('o'); add('m'); add('a'); add('t'); add('i'); add('c'); add('a'); add('l'); add('l'); add('y');}}));\n\n        List<Object> test3 = new ArrayList<>();\n        test3.add('p');\n        test3.add('y');\n        test3.add('t');\n        test3.add('h');\n        test3.add('o');\n        test3.add('n');\n        System.out.println(solution.decodeList(test3).equals(new ArrayList<Object>(){{\nadd('p'); add('y'); add('t'); add('h'); add('o'); add('n');}}));\n    }\n}\n",
        "prompt": "Write a function to decode a run-length encoded given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> decodeList(List<Object> alist) {\n        List<Object> result = new ArrayList<>();\n        for (Object g : alist) {\n            if (g instanceof List) {\n                List<Object> subList = (List<Object>) g;\n                for (int i = 0; i < (int) subList.get(0); i++) {\n                    result.add(subList.get(1));\n                    //begin to write code\n",
        "java_prompt": "Write a function to decode a run-length encoded given list.",
        "code_str_generate": "class Solution {\n    public static List<Object> decodeList(List<Object> alist) {\n\n        /*\n        progame language:java\n        description:Write a function to decode a run-length encoded given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result = new ArrayList<>();\n        for (Object g : alist) {\n            if (g instanceof List) {\n                List<Object> subList = (List<Object>) g;\n                for (int i = 0; i < (int) subList.get(0); i++) {\n                    result.add(subList.get(1));\n                    //begin to write code\n"
    },
    {
        "task_id": 216,
        "code_str": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n            }\n        }\n        return exist;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.checkSubsetList(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), Arrays.asList(12, 18, 23, 25, 45, 7, 11, 19, 24, 28, 1, 5, 8, 18, 15, 16));\n        assert Solution.checkSubsetList(Arrays.asList(2, 3, 1, 4, 5, 6, 8), Arrays.asList(4, 5, 6, 8));\n    }\n}\n",
        "prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if a nested list is a subset of another nested list.",
        "code_str_generate": "class Solution {\n    public static boolean checkSubsetList(List<Integer> list1, List<Integer> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a nested list is a subset of another nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean exist = true;\n        for (int i : list2) {\n            if (!list1.contains(i)) {\n                exist = false;\n                //begin to write code\n"
    },
    {
        "task_id": 217,
        "code_str": "class Solution {\n    public char first_Repeated_Char(String str) {\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n                h.put(ch, 0);\n            }\n        }\n        return '\\0';\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.first_Repeated_Char(\"Google\") == 'o';\n        assert solution.first_Repeated_Char(\"data\") == 'a';\n        assert solution.first_Repeated_Char(\"python\") == '\\0';\n    }\n}\n",
        "prompt": "Write a python function to find the first repeated character in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public char first_Repeated_Char(String str) {\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first repeated character in a given string.",
        "code_str_generate": "class Solution {\n    public char first_Repeated_Char(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first repeated character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Character, Integer> h = new HashMap<Character, Integer>();\n        for (char ch : str.toCharArray()) {\n            if (h.containsKey(ch)) {\n                return ch;\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 218,
        "code_str": "class Solution {\n    public static int min_Operations(int A, int B) {\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n        B = B / gcd(A, B);\n        return B - 1;\n    }\n\n    public static int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        return gcd(b, a % b);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.min_Operations(2,4) == 1;\n        assert Solution.min_Operations(4,10) == 4;\n        assert Solution.min_Operations(1,4) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int min_Operations(int A, int B) {\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n        B = B / gcd(A, B);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the minimum operations required to make two numbers equal.",
        "code_str_generate": "class Solution {\n    public static int min_Operations(int A, int B) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum operations required to make two numbers equal.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (A > B) {\n            int temp = A;\n            A = B;\n            B = temp;\n        }\n        B = B / gcd(A, B);\n        //begin to write code\n"
    },
    {
        "task_id": 219,
        "code_str": "class Solution{\n    public static Integer[] extractMinMax(Integer[] test_tup, int K) {\n        List<Integer> res = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>(Arrays.asList(test_tup));\n        Collections.sort(temp);\n\n        for (int idx = 0; idx < temp.size(); idx++) {\n            if (idx < K || idx >= temp.size() - K) {\n                res.add(temp.get(idx));\n            }\n        }\n\n        return res.toArray(new Integer[0]);\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Integer[] test_tup1 = {5, 20, 3, 7, 6, 8};\n        Integer[] test_tup2 = {4, 5, 6, 1, 2, 7};\n        Integer[] test_tup3 = {2, 3, 4, 8, 9, 11, 7};\n        int k1 = 2;\n        int k2 = 3;\n        int k3 = 4;\n        Integer[] test1 = {3, 5, 8, 20};\n        Integer[] test2 = {1, 2, 4, 5, 6, 7};\n        Integer[] test3 = {2, 3, 4, 7, 8, 9, 11};\n        assert Arrays.equals(solution.extractMinMax(test_tup1, k1),test1);\n        assert Arrays.equals(solution.extractMinMax(test_tup2, k2),test2);\n        assert Arrays.equals(solution.extractMinMax(test_tup3, k3),test3);\n    }\n}",
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution{\n    public static Integer[] extractMinMax(Integer[] test_tup, int K) {\n        List<Integer> res = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>(Arrays.asList(test_tup));\n        Collections.sort(temp);\n        for (int idx = 0; idx < temp.size(); idx++) {\n            if (idx < K || idx >= temp.size() - K) {\n            //begin to write code\n",
        "java_prompt": "Write a function to extract maximum and minimum k elements in the given tuple.",
        "code_str_generate": "class Solution{\n    public static Integer[] extractMinMax(Integer[] test_tup, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to extract maximum and minimum k elements in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        List<Integer> temp = new ArrayList<>(Arrays.asList(test_tup));\n        Collections.sort(temp);\n        for (int idx = 0; idx < temp.size(); idx++) {\n            if (idx < K || idx >= temp.size() - K) {\n            //begin to write code\n"
    },
    {
        "task_id": 220,
        "code_str": "class Solution {\n    public static String replaceMaxSpecialChar(String text, int n) {\n        Pattern pattern = Pattern.compile(\"[ ,.]\");\n        Matcher matcher = pattern.matcher(text);\n        StringBuffer sb = new StringBuffer();\n        int count = 0;\n        while(matcher.find() && count < n) {\n            matcher.appendReplacement(sb, \":\");\n            count++;\n        }\n        matcher.appendTail(sb);\n        return sb.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.replaceMaxSpecialChar(\"Python language, Programming language.\", 2).equals(\"Python:language: Programming language.\");\n        assert Solution.replaceMaxSpecialChar(\"a b c,d e f\", 3).equals(\"a:b:c:d e f\");\n        assert Solution.replaceMaxSpecialChar(\"ram reshma,ram rahim\", 1).equals(\"ram:reshma,ram rahim\");\n    }\n}\n",
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String replaceMaxSpecialChar(String text, int n) {\n        Pattern pattern = Pattern.compile(\"[ ,.]\");\n        Matcher matcher = pattern.matcher(text);\n        StringBuffer sb = new StringBuffer();\n        int count = 0;\n        while(matcher.find() && count < n) {\n        //begin to write code\n",
        "java_prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
        "code_str_generate": "class Solution {\n    public static String replaceMaxSpecialChar(String text, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[ ,.]\");\n        Matcher matcher = pattern.matcher(text);\n        StringBuffer sb = new StringBuffer();\n        int count = 0;\n        while(matcher.find() && count < n) {\n        //begin to write code\n"
    },
    {
        "task_id": 221,
        "code_str": "class Solution {\n    public int firstEven(int[] nums) {\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.firstEven(new int[]{1, 3, 5, 7, 4, 1, 6, 8}) == 4;\n        assert solution.firstEven(new int[]{2, 3, 4}) == 2;\n        assert solution.firstEven(new int[]{5, 6, 7}) == 6;\n    }\n}\n",
        "prompt": "Write a python function to find the first even number in a given list of numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int firstEven(int[] nums) {\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the first even number in a given list of numbers.",
        "code_str_generate": "class Solution {\n    public int firstEven(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first even number in a given list of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int num : nums) {\n            if (num % 2 == 0) {\n                return num;\n                //begin to write code\n"
    },
    {
        "task_id": 222,
        "code_str": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                break;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkType(new Object[]{5, 6, 7, 3, 5, 6}) == true;\n        assert Solution.checkType(new Object[]{1, 2, \"4\"}) == false;\n        assert Solution.checkType(new Object[]{3, 2, 1, 4, 5}) == true;\n    }\n}\n",
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if all the elements in tuple have same data type or not.",
        "code_str_generate": "class Solution {\n    public static boolean checkType(Object[] testArray) {\n\n        /*\n        progame language:java\n        description:Write a function to check if all the elements in tuple have same data type or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        for (Object ele : testArray) {\n            if (!ele.getClass().equals(testArray[0].getClass())) {\n                res = false;\n                //begin to write code\n"
    },
    {
        "task_id": 223,
        "code_str": "class Solution {\n    public static boolean isMajority(int arr[], int n, int x) {\n        int i = binarySearch(arr, 0, n - 1, x);\n        if (i == -1)\n            return false;\n        if ((i + n / 2) <= (n - 1) && arr[i + n / 2] == x)\n            return true;\n        else\n            return false;\n    }\n\n    public static int binarySearch(int arr[], int low, int high, int x) {\n        if (high >= low) {\n            int mid = (low + high) / 2;\n            if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))\n                return mid;\n            else if (x > arr[mid])\n                return binarySearch(arr, (mid + 1), high, x);\n            else\n                return binarySearch(arr, low, (mid - 1), x);\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isMajority(new int[]{1, 2, 3, 3, 3, 3, 10}, 7, 3) == true;\n        assert Solution.isMajority(new int[]{1, 1, 2, 4, 4, 4, 6, 6}, 8, 4) == false;\n        assert Solution.isMajority(new int[]{1, 1, 1, 2, 2}, 5, 1) == true;\n    }\n}\n",
        "prompt": "Write a function to check for majority element in the given sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isMajority(int arr[], int n, int x) {\n        int i = binarySearch(arr, 0, n - 1, x);\n        if (i == -1)\n            return false;\n        if ((i + n / 2) <= (n - 1) && arr[i + n / 2] == x)\n            return true;\n        else\n            return false;\n    }\n    public static int binarySearch(int arr[], int low, int high, int x) {\n        if (high >= low) {\n        //begin to write code\n",
        "java_prompt": "Write a function to check for majority element in the given sorted array.",
        "code_str_generate": "class Solution {\n    public static boolean isMajority(int arr[], int n, int x) {\n\n        /*\n        progame language:java\n        description:Write a function to check for majority element in the given sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int i = binarySearch(arr, 0, n - 1, x);\n        if (i == -1)\n            return false;\n        if ((i + n / 2) <= (n - 1) && arr[i + n / 2] == x)\n            return true;\n        else\n            return false;\n    }\n    public static int binarySearch(int arr[], int low, int high, int x) {\n        if (high >= low) {\n        //begin to write code\n"
    },
    {
        "task_id": 224,
        "code_str": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            n >>= 1;\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countSetBits(2) == 1;\n        assert Solution.countSetBits(4) == 1;\n        assert Solution.countSetBits(6) == 2;\n    }\n}\n",
        "prompt": "Write a python function to count set bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countSetBits(int n) {\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count set bits of a given number.",
        "code_str_generate": "class Solution {\n    public static int countSetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count set bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (n != 0) {\n            count += n & 1;\n            //begin to write code\n"
    },
    {
        "task_id": 225,
        "code_str": "class Solution {\n    public int find_Min(int[] arr, int low, int high) {\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (arr[mid] == arr[high]) {\n                high -= 1;\n            } else if (arr[mid] > arr[high]) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return arr[high];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find_Min(new int[]{1,2,3,4,5},0,4) == 1;\n        assert solution.find_Min(new int[]{4,6,8},0,2) == 4;\n        assert solution.find_Min(new int[]{2,3,5,7,9},0,4) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int find_Min(int[] arr, int low, int high) {\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (arr[mid] == arr[high]) {\n                high -= 1;\n            } else if (arr[mid] > arr[high]) {\n                low = mid + 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the minimum element in a sorted and rotated array.",
        "code_str_generate": "class Solution {\n    public int find_Min(int[] arr, int low, int high) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum element in a sorted and rotated array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        while (low < high) {\n            int mid = low + (high - low) / 2;\n            if (arr[mid] == arr[high]) {\n                high -= 1;\n            } else if (arr[mid] > arr[high]) {\n                low = mid + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 226,
        "code_str": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n            }\n        }\n        return result.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.oddValuesString(\"abcdef\").equals(\"ace\");\n        assert Solution.oddValuesString(\"python\").equals(\"pto\");\n        assert Solution.oddValuesString(\"data\").equals(\"dt\");\n    }\n}\n",
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String oddValuesString(String str) {\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n",
        "java_prompt": "Write a java function to remove the characters which have odd index values of a given string.",
        "code_str_generate": "class Solution {\n    public static String oddValuesString(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove the characters which have odd index values of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < str.length(); i++) {\n            if (i % 2 == 0) {\n                result.append(str.charAt(i));\n                //begin to write code\n"
    },
    {
        "task_id": 227,
        "code_str": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n        } else {\n            smallest = c;\n        }\n        return smallest;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.min_of_three(10,20,0)==0;\n        assert Solution.min_of_three(19,15,18)==15;\n        assert Solution.min_of_three(-10,-20,-30)==-30;\n    }\n}\n",
        "prompt": "Write a function to find minimum of three numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n",
        "java_prompt": "Write a function to find minimum of three numbers.",
        "code_str_generate": "class Solution {\n    public static int min_of_three(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find minimum of three numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int smallest;\n        if (a <= b && a <= c) {\n            smallest = a;\n        } else if (b <= a && b <= c) {\n            smallest = b;\n            //begin to write code\n"
    },
    {
        "task_id": 228,
        "code_str": "class Solution {\n    public static boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n        int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n        int newNum = n & num;\n        return newNum == 0;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.allBitsSetInTheGivenRange(4, 1, 2) == true;\n        assert Solution.allBitsSetInTheGivenRange(17, 2, 4) == true;\n        assert Solution.allBitsSetInTheGivenRange(39, 4, 6) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n        int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n        int newNum = n & num;\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether all the bits are unset in the given range or not.",
        "code_str_generate": "class Solution {\n    public static boolean allBitsSetInTheGivenRange(int n, int l, int r) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether all the bits are unset in the given range or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1));\n        int newNum = n & num;\n        //begin to write code\n"
    },
    {
        "task_id": 229,
        "code_str": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n                j++;\n            }\n        }\n        return arr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.reArrangeArray(new int[]{-1, 2, -3, 4, 5, 6, -7, 8, 9}, 9), new int[]{-1, -3, -7, 4, 5, 6, 2, 8, 9});\n        assert java.util.Arrays.equals(Solution.reArrangeArray(new int[]{12, -14, -26, 13, 15}, 5), new int[]{-14, -26, 12, 13, 15});\n        assert java.util.Arrays.equals(Solution.reArrangeArray(new int[]{10, 24, 36, -42, -39, -78, 85}, 7), new int[]{-42, -39, -78, 10, 24, 36, 85});\n    }\n}\n",
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n",
        "java_prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
        "code_str_generate": "class Solution {\n    public static int[] reArrangeArray(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int j = 0, temp;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] < 0) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                //begin to write code\n"
    },
    {
        "task_id": 230,
        "code_str": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n        String str2 = str1.replace(' ', ch);\n        return str2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.replaceBlank(\"hello people\", '@').equals(\"hello@people\");\n        assert Solution.replaceBlank(\"python program language\", '$').equals(\"python$program$language\");\n        assert Solution.replaceBlank(\"blank space\", '-').equals(\"blank-space\");\n    }\n}\n",
        "prompt": "Write a function to replace blank spaces with any character in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n        String str2 = str1.replace(' ', ch);\n        //begin to write code\n",
        "java_prompt": "Write a function to replace blank spaces with any character in a string.",
        "code_str_generate": "class Solution {\n    public static String replaceBlank(String str1, char ch) {\n\n        /*\n        progame language:java\n        description:Write a function to replace blank spaces with any character in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = str1.replace(' ', ch);\n        //begin to write code\n"
    },
    {
        "task_id": 231,
        "code_str": "class Solution {\n    public int max_sum(int[][] tri, int n) {\n        if (n > 1) {\n            tri[1][1] = tri[1][1] + tri[0][0];\n            tri[1][0] = tri[1][0] + tri[0][0];\n        }\n        for (int i = 2; i < n; i++) {\n            tri[i][0] = tri[i][0] + tri[i - 1][0];\n            tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n            for (int j = 1; j < i; j++) {\n                if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) {\n                    tri[i][j] = tri[i][j] + tri[i - 1][j - 1];\n                } else {\n                    tri[i][j] = tri[i][j] + tri[i - 1][j];\n                }\n            }\n        }\n        int max = tri[n - 1][0];\n        for (int i = 1; i < n; i++) {\n            if (tri[n - 1][i] > max) {\n                max = tri[n - 1][i];\n            }\n        }\n        return max;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.max_sum(new int[][]{{1}, {2,1}, {3,3,2}}, 3) == 6;\n        assert solution.max_sum(new int[][]{{1}, {1, 2}, {4, 1, 12}}, 3) == 15;\n        assert solution.max_sum(new int[][]{{2}, {3,2}, {13,23,12}}, 3) == 28;\n    }\n}\n",
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int max_sum(int[][] tri, int n) {\n        if (n > 1) {\n            tri[1][1] = tri[1][1] + tri[0][0];\n            tri[1][0] = tri[1][0] + tri[0][0];\n        }\n        for (int i = 2; i < n; i++) {\n            tri[i][0] = tri[i][0] + tri[i - 1][0];\n            tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n            for (int j = 1; j < i; j++) {\n                if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) {\n                    tri[i][j] = tri[i][j] + tri[i - 1][j - 1];\n                } else {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum sum in the given right triangle of numbers.",
        "code_str_generate": "class Solution {\n    public int max_sum(int[][] tri, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum in the given right triangle of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n > 1) {\n            tri[1][1] = tri[1][1] + tri[0][0];\n            tri[1][0] = tri[1][0] + tri[0][0];\n        }\n        for (int i = 2; i < n; i++) {\n            tri[i][0] = tri[i][0] + tri[i - 1][0];\n            tri[i][i] = tri[i][i] + tri[i - 1][i - 1];\n            for (int j = 1; j < i; j++) {\n                if (tri[i][j] + tri[i - 1][j - 1] >= tri[i][j] + tri[i - 1][j]) {\n                    tri[i][j] = tri[i][j] + tri[i - 1][j - 1];\n                } else {\n                //begin to write code\n"
    },
    {
        "task_id": 232,
        "code_str": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n            largest.add(pq.poll());\n        }\n        return largest;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> list1 = new ArrayList<>(Arrays.asList(10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100));\n        List<Integer> result1 = new ArrayList<>(Arrays.asList(100, 90));\n        assert solution.larg_nnum(list1, 2).equals(result1);\n        \n        List<Integer> result2 = new ArrayList<>(Arrays.asList(100, 90, 80, 70, 60));\n        assert solution.larg_nnum(list1, 5).equals(result2);\n        \n        List<Integer> result3 = new ArrayList<>(Arrays.asList(100, 90, 80));\n        assert solution.larg_nnum(list1, 3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to get the n largest items from a dataset.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n        //begin to write code\n",
        "java_prompt": "Write a function to get the n largest items from a dataset.",
        "code_str_generate": "class Solution {\n    public List<Integer> larg_nnum(List<Integer> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to get the n largest items from a dataset.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n        pq.addAll(list1);\n        List<Integer> largest = new ArrayList<>();\n        for(int i = 0; i < n; i++){\n        //begin to write code\n"
    },
    {
        "task_id": 233,
        "code_str": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        return lateralsurface;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.lateralsuface_cylinder(10,5) - 314.15000000000003) < 0.0001;\n        assert Math.abs(Solution.lateralsuface_cylinder(4,5) - 125.66000000000001) < 0.0001;\n        assert Math.abs(Solution.lateralsuface_cylinder(4,10) - 251.32000000000002) < 0.0001;\n    }\n}\n",
        "prompt": "Write a function to find the lateral surface area of a cylinder.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n        double lateralsurface = 2 * 3.1415 * r * h;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the lateral surface area of a cylinder.",
        "code_str_generate": "class Solution {\n    public static double lateralsuface_cylinder(int r, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double lateralsurface = 2 * 3.1415 * r * h;\n        //begin to write code\n"
    },
    {
        "task_id": 234,
        "code_str": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        return volume;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.volumeCube(3) == 27;\n        assert Solution.volumeCube(2) == 8;\n        assert Solution.volumeCube(5) == 125;\n    }\n}\n",
        "prompt": "Write a function to find the volume of a cube.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int volumeCube(int l) {\n        int volume = l * l * l;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the volume of a cube.",
        "code_str_generate": "class Solution {\n    public static int volumeCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int volume = l * l * l;\n        //begin to write code\n"
    },
    {
        "task_id": 235,
        "code_str": "class Solution {\n    public static int evenBitSetNumber(int n) {\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res |= (1 << count);\n            }\n            count += 1;\n            temp >>= 1;\n        }\n        return (n | res);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.evenBitSetNumber(10) == 10;\n        assert Solution.evenBitSetNumber(20) == 30;\n        assert Solution.evenBitSetNumber(30) == 30;\n    }\n}\n",
        "prompt": "Write a python function to set all even bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int evenBitSetNumber(int n) {\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res |= (1 << count);\n                //begin to write code\n",
        "java_prompt": "Write a java function to set all even bits of a given number.",
        "code_str_generate": "class Solution {\n    public static int evenBitSetNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to set all even bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        int res = 0;\n        int temp = n;\n        while (temp > 0) {\n            if (count % 2 == 1) {\n                res |= (1 << count);\n                //begin to write code\n"
    },
    {
        "task_id": 236,
        "code_str": "class Solution {\n    public static int No_of_Triangle(int N, int K) {\n        if (N < K) {\n            return -1;\n        } else {\n            int Tri_up = 0;\n            Tri_up = ((N - K + 1) *(N - K + 2)) / 2;\n            int Tri_down = 0;\n            Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) / 2;\n            return Tri_up + Tri_down;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.No_of_Triangle(4,2) == 7;\n        assert Solution.No_of_Triangle(4,3) == 3;\n        assert Solution.No_of_Triangle(1,3) == -1;\n    }\n}\n",
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int No_of_Triangle(int N, int K) {\n        if (N < K) {\n            return -1;\n        } else {\n            int Tri_up = 0;\n            Tri_up = ((N - K + 1) *(N - K + 2)) / 2;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
        "code_str_generate": "class Solution {\n    public static int No_of_Triangle(int N, int K) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (N < K) {\n            return -1;\n        } else {\n            int Tri_up = 0;\n            Tri_up = ((N - K + 1) *(N - K + 2)) / 2;\n            //begin to write code\n"
    },
    {
        "task_id": 237,
        "code_str": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            res.put(sortedEle, res.getOrDefault(sortedEle, 0) + 1);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.check_occurences(new int[][]{{3, 1}, {1, 3}, {2, 5}, {5, 2}, {6, 3}}).equals(new HashMap<List<Integer>, Integer>() {{\n            put(Arrays.asList(1, 3), 2);\n            put(Arrays.asList(2, 5), 2);\n            put(Arrays.asList(3, 6), 1);\n        }});\n        assert solution.check_occurences(new int[][]{{4, 2}, {2, 4}, {3, 6}, {6, 3}, {7, 4}}).equals(new HashMap<List<Integer>, Integer>() {{\n            put(Arrays.asList(2, 4), 2);\n            put(Arrays.asList(3, 6), 2);\n            put(Arrays.asList(4, 7), 1);\n        }});\n        assert solution.check_occurences(new int[][]{{13, 2}, {11, 23}, {12, 25}, {25, 12}, {16, 23}}).equals(new HashMap<List<Integer>, Integer>() {{\n            put(Arrays.asList(2, 13), 1);\n            put(Arrays.asList(11, 23), 1);\n            put(Arrays.asList(12, 25), 2);\n            put(Arrays.asList(16, 23), 1);\n        }});\n    }\n}\n",
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n",
        "java_prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
        "code_str_generate": "class Solution {\n    public static Map<List<Integer>, Integer> check_occurences(int[][] test_list) {\n\n        /*\n        progame language:java\n        description:Write a function to check the occurrences of records which occur similar times in the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<List<Integer>, Integer> res = new HashMap<>();\n        for (int[] ele : test_list) {\n            List<Integer> sortedEle = Arrays.stream(ele).boxed().sorted().collect(Collectors.toList());\n            //begin to write code\n"
    },
    {
        "task_id": 238,
        "code_str": "class Solution {\n    public static int numberOfSubstrings(String str) {\n        int strLen = str.length();\n        return strLen * (strLen + 1) / 2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.numberOfSubstrings(\"abc\") == 6;\n        assert Solution.numberOfSubstrings(\"abcd\") == 10;\n        assert Solution.numberOfSubstrings(\"abcde\") == 15;\n    }\n}\n",
        "prompt": "Write a python function to count number of non-empty substrings of a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int numberOfSubstrings(String str) {\n        int strLen = str.length();\n        //begin to write code\n",
        "java_prompt": "Write a java function to count number of non-empty substrings of a given string.",
        "code_str_generate": "class Solution {\n    public static int numberOfSubstrings(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count number of non-empty substrings of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int strLen = str.length();\n        //begin to write code\n"
    },
    {
        "task_id": 239,
        "code_str": "class Solution {\n    public int get_total_number_of_sequences(int m, int n) {\n        int[][] T = new int[m+1][n+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    T[i][j] = 0;\n                } else if (i < j) {\n                    T[i][j] = 0;\n                } else if (j == 1) {\n                    T[i][j] = i;\n                } else {\n                    T[i][j] = T[i-1][j] + T[i/2][j-1];\n                }\n            }\n        }\n        return T[m][n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.get_total_number_of_sequences(10, 4) == 4;\n        assert solution.get_total_number_of_sequences(5, 2) == 6;\n        assert solution.get_total_number_of_sequences(16, 3) == 84;\n    }\n}\n",
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int get_total_number_of_sequences(int m, int n) {\n        int[][] T = new int[m+1][n+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    T[i][j] = 0;\n                } else if (i < j) {\n                    T[i][j] = 0;\n                } else if (j == 1) {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
        "code_str_generate": "class Solution {\n    public int get_total_number_of_sequences(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] T = new int[m+1][n+1];\n        for (int i = 0; i <= m; i++) {\n            for (int j = 0; j <= n; j++) {\n                if (i == 0 || j == 0) {\n                    T[i][j] = 0;\n                } else if (i < j) {\n                    T[i][j] = 0;\n                } else if (j == 1) {\n                //begin to write code\n"
    },
    {
        "task_id": 240,
        "code_str": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        return list1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Object> list1 = new ArrayList<>();\n        list1.add(1);\n        list1.add(3);\n        list1.add(5);\n        list1.add(7);\n        list1.add(9);\n        list1.add(10);\n        List<Object> list2 = new ArrayList<>();\n        list2.add(2);\n        list2.add(4);\n        list2.add(6);\n        list2.add(8);\n\n        List<Object> list3 = new ArrayList<>();\n        list3.add(1);\n        list3.add(2);\n        list3.add(3);\n        list3.add(4);\n        list3.add(5);\n        List<Object> list4 = new ArrayList<>();\n        list4.add(5);\n        list4.add(6);\n        list4.add(7);\n        list4.add(8);\n\n        List<Object> list5 = new ArrayList<>();\n        list5.add(\"red\");\n        list5.add(\"blue\");\n        list5.add(\"green\");\n        List<Object> list6 = new ArrayList<>();\n        list6.add(\"yellow\");\n\n        assert solution.replaceList(list1, list2).equals(Arrays.asList(1, 3, 5, 7, 9, 2, 4, 6, 8));\n        assert solution.replaceList(list3, list4).equals(Arrays.asList(1,2,3,4,5,6,7,8));\n        assert solution.replaceList(list5, list6).equals(Arrays.asList(\"red\",\"blue\",\"yellow\"));\n    }\n}",
        "prompt": "Write a function to replace the last element of the list with another list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        //begin to write code\n",
        "java_prompt": "Write a function to replace the last element of the list with another list.",
        "code_str_generate": "class Solution {\n    public static List<Object> replaceList(List<Object> list1, List<Object> list2) {\n\n        /*\n        progame language:java\n        description:Write a function to replace the last element of the list with another list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.remove(list1.size() - 1);\n        list1.addAll(list2);\n        //begin to write code\n"
    },
    {
        "task_id": 241,
        "code_str": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                }\n            }\n        }\n        return array_3d;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.deepEquals(Solution.array_3d(6,4,3), new String[][][] {{{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}, {{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}, {{\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\", \"*\"}}});\n        assert java.util.Arrays.deepEquals(Solution.array_3d(5,3,4), new String[][][] {{{\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}}, {{\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}}, {{\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}}, {{\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}, {\"*\", \"*\", \"*\", \"*\", \"*\"}}});\n        assert java.util.Arrays.deepEquals(Solution.array_3d(1,2,3), new String[][][] {{{\"*\"}, {\"*\"}}, {{\"*\"}, {\"*\"}}, {{\"*\"}, {\"*\"}}});\n    }\n}\n",
        "prompt": "Write a function to generate a 3d array having each element as '*'.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                    //begin to write code\n",
        "java_prompt": "Write a function to generate a 3d array having each element as '*'.",
        "code_str_generate": "class Solution {\n    public static String[][][] array_3d(int m, int n, int o) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a 3d array having each element as '*'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[][][] array_3d = new String[o][n][m];\n        for (int i = 0; i < o; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    array_3d[i][j][k] = \"*\";\n                    //begin to write code\n"
    },
    {
        "task_id": 242,
        "code_str": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n        }\n        return total;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countCharac(\"python programming\") == 18;\n        assert Solution.countCharac(\"language\") == 8;\n        assert Solution.countCharac(\"words\") == 5;\n    }\n}\n",
        "prompt": "Write a function to count total characters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countCharac(String str1) {\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n            //begin to write code\n",
        "java_prompt": "Write a function to count total characters in a string.",
        "code_str_generate": "class Solution {\n    public static int countCharac(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to count total characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int total = 0;\n        for (int i = 0; i < str1.length(); i++) {\n            total = total + 1;\n            //begin to write code\n"
    },
    {
        "task_id": 243,
        "code_str": "\nclass Solution {\n    // \u5b9a\u4e49\u6392\u5e8f\u65b9\u6cd5\n    public List<List<Object>> sortOnOccurrence(List<Map.Entry<Object, String>> lst) {\n        // \u4f7f\u7528HashMap\u5b58\u50a8\u952e\u53ca\u5176\u5bf9\u5e94\u7684\u503c\u5217\u8868\n        Map<Object, List<String>> map = new HashMap<>();\n\n        for (Map.Entry<Object, String> entry : lst) {\n            // \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u5217\u8868\uff0c\u5426\u5219\u6dfb\u52a0\u5230\u73b0\u6709\u5217\u8868\u4e2d\n            map.computeIfAbsent(entry.getKey(), k -> new ArrayList<>()).add(entry.getValue());\n        }\n\n        // \u521b\u5efa\u7ed3\u679c\u5217\u8868\n        List<List<Object>> result = new ArrayList<>();\n\n        for (Map.Entry<Object, List<String>> entry : map.entrySet()) {\n            List<Object> tempList = new ArrayList<>();\n            tempList.add(entry.getKey());  // \u6dfb\u52a0\u952e\n            tempList.addAll(new LinkedHashSet<>(entry.getValue()));  // \u53bb\u91cd\u5e76\u4fdd\u6301\u987a\u5e8f\u5730\u6dfb\u52a0\u503c\n            tempList.add(entry.getValue().size());  // \u6dfb\u52a0\u51fa\u73b0\u6b21\u6570\n            result.add(tempList);\n        }\n\n        return result;\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        // \u521b\u5efa\u4e00\u4e2a\u5305\u542b\u591a\u7c7b\u578b\u952e\u7684\u952e\u503c\u5bf9\u7684\u5217\u8868\uff08Object, String\uff09\n        List<Map.Entry<Object, String>> list1 = new ArrayList<>();\n        List<Map.Entry<Object, String>> list2 = new ArrayList<>();\n        List<Map.Entry<Object, String>> list3 = new ArrayList<>();\n        list1.add(new AbstractMap.SimpleEntry<>(1, \"Jake\"));\n        list1.add(new AbstractMap.SimpleEntry<>(2, \"Bob\"));\n        list1.add(new AbstractMap.SimpleEntry<>(1, \"Cara\"));\n\n        list2.add(new AbstractMap.SimpleEntry<>(\"b\", \"ball\"));\n        list2.add(new AbstractMap.SimpleEntry<>(\"a\", \"arm\"));\n        list2.add(new AbstractMap.SimpleEntry<>(\"b\", \"b\"));\n        list2.add(new AbstractMap.SimpleEntry<>(\"a\", \"ant\"));\n\n        list3.add(new AbstractMap.SimpleEntry<>(2, \"Mark\"));\n        list3.add(new AbstractMap.SimpleEntry<>(3, \"Maze\"));\n        list3.add(new AbstractMap.SimpleEntry<>(2, \"Sara\"));\n\n        // \u521b\u5efaSolution\u5bf9\u8c61\u5e76\u8c03\u7528\u6392\u5e8f\u65b9\u6cd5\n        Solution solution = new Solution();\n        List<List<Object>> result1 = solution.sortOnOccurrence(list1);\n        List<List<Object>> result2 = solution.sortOnOccurrence(list2);\n        List<List<Object>> result3 = solution.sortOnOccurrence(list3);\n\n        List<List<Object>> listOfLists1 = new ArrayList<>();\n        List<List<Object>> listOfLists2 = new ArrayList<>();\n        List<List<Object>> listOfLists3 = new ArrayList<>();\n\n        // \u521b\u5efa\u7b2c\u4e00\u4e2a\u5b50\u5217\u8868\u5e76\u6dfb\u52a0\u6570\u636e\n        List<Object> f1 = new ArrayList<>();\n        f1.add(1);\n        f1.add(\"Jake\");\n        f1.add(\"Cara\");\n        f1.add(2);\n\n        // \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5b50\u5217\u8868\u5e76\u6dfb\u52a0\u6570\u636e\n        List<Object> s1 = new ArrayList<>();\n        s1.add(2);\n        s1.add(\"Bob\");\n        s1.add(1);\n        listOfLists1.add(f1);\n        listOfLists1.add(s1);\n\n        List<Object> f2 = new ArrayList<>();\n        f2.add(\"a\");\n        f2.add(\"arm\");\n        f2.add(\"ant\");\n        f2.add(2);\n\n        // \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5b50\u5217\u8868\u5e76\u6dfb\u52a0\u6570\u636e\n        List<Object> s2 = new ArrayList<>();\n        s2.add(\"b\");\n        s2.add(\"ball\");\n        s2.add(\"b\");\n        s2.add(2);\n\n        // \u5c06\u5b50\u5217\u8868\u6dfb\u52a0\u5230\u4e3b\u5217\u8868\u4e2d\n        listOfLists2.add(f2);\n        listOfLists2.add(s2);\n\n        List<Object> f3 = new ArrayList<>();\n        f3.add(2);\n        f3.add(\"Mark\");\n        f3.add(\"Sara\");\n        f3.add(2);\n\n        // \u521b\u5efa\u7b2c\u4e8c\u4e2a\u5b50\u5217\u8868\u5e76\u6dfb\u52a0\u6570\u636e\n        List<Object> s3 = new ArrayList<>();\n        s3.add(3);\n        s3.add(\"Maze\");\n        s3.add(1);\n\n        // \u5c06\u5b50\u5217\u8868\u6dfb\u52a0\u5230\u4e3b\u5217\u8868\u4e2d\n        listOfLists3.add(f3);\n        listOfLists3.add(s3);\n\n        assert  result1.equals(listOfLists1);\n        assert  result2.equals(listOfLists2);\n        assert  result3.equals(listOfLists3);\n        }\n}\n",
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    // \u5b9a\u4e49\u6392\u5e8f\u65b9\u6cd5\n    public List<List<Object>> sortOnOccurrence(List<Map.Entry<Object, String>> lst) {\n        // \u4f7f\u7528HashMap\u5b58\u50a8\u952e\u53ca\u5176\u5bf9\u5e94\u7684\u503c\u5217\u8868\n        Map<Object, List<String>> map = new HashMap<>();\n        for (Map.Entry<Object, String> entry : lst) {\n            // \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u5217\u8868\uff0c\u5426\u5219\u6dfb\u52a0\u5230\u73b0\u6709\u5217\u8868\u4e2d\n            map.computeIfAbsent(entry.getKey(), k -> new ArrayList<>()).add(entry.getValue());\n        }\n        // \u521b\u5efa\u7ed3\u679c\u5217\u8868\n        List<List<Object>> result = new ArrayList<>();\n        //begin to write code\n",
        "java_prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.",
        "code_str_generate": "class Solution {\n    // \u5b9a\u4e49\u6392\u5e8f\u65b9\u6cd5\n    public List<List<Object>> sortOnOccurrence(List<Map.Entry<Object, String>> lst) {\n\n        /*\n        progame language:java\n        description:Write a function to sort the given list based on the occurrence of first element of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        // \u4f7f\u7528HashMap\u5b58\u50a8\u952e\u53ca\u5176\u5bf9\u5e94\u7684\u503c\u5217\u8868\n        Map<Object, List<String>> map = new HashMap<>();\n        for (Map.Entry<Object, String> entry : lst) {\n            // \u5982\u679c\u952e\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u65b0\u5217\u8868\uff0c\u5426\u5219\u6dfb\u52a0\u5230\u73b0\u6709\u5217\u8868\u4e2d\n            map.computeIfAbsent(entry.getKey(), k -> new ArrayList<>()).add(entry.getValue());\n        }\n        // \u521b\u5efa\u7ed3\u679c\u5217\u8868\n        List<List<Object>> result = new ArrayList<>();\n        //begin to write code\n"
    },
    {
        "task_id": 244,
        "code_str": "class Solution {\n    public static int nextPerfectSquare(int N) {\n        int nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n        return nextN * nextN;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.nextPerfectSquare(35) == 36;\n        assert Solution.nextPerfectSquare(6) == 9;\n        assert Solution.nextPerfectSquare(9) == 16;\n    }\n}\n",
        "prompt": "Write a python function to find the next perfect square greater than a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int nextPerfectSquare(int N) {\n        int nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the next perfect square greater than a given number.",
        "code_str_generate": "class Solution {\n    public static int nextPerfectSquare(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the next perfect square greater than a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int nextN = (int) Math.floor(Math.sqrt(N)) + 1;\n        //begin to write code\n"
    },
    {
        "task_id": 245,
        "code_str": "class Solution {\n    public int max_sum(int arr[], int n) {\n        int MSIBS[] = arr.clone();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n        int MSDBS[] = arr.clone();\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < i; j++) {\n                if (arr[n - i] > arr[n - j] && MSDBS[n - i] < MSDBS[n - j] + arr[n - i]) {\n                    MSDBS[n - i] = MSDBS[n - j] + arr[n - i];\n                }\n            }\n        }\n        int max_sum = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            max_sum = Math.max(max_sum, MSIBS[i] + MSDBS[i] - arr[i]);\n        }\n        return max_sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.max_sum(new int[]{1, 15, 51, 45, 33, 100, 12, 18, 9}, 9) == 194;\n        assert solution.max_sum(new int[]{80, 60, 30, 40, 20, 10}, 6) == 210;\n        assert solution.max_sum(new int[]{2, 3 ,14, 16, 21, 23, 29, 30}, 8) == 138;\n    }\n}\n",
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int max_sum(int arr[], int n) {\n        int MSIBS[] = arr.clone();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n        int MSDBS[] = arr.clone();\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < i; j++) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
        "code_str_generate": "class Solution {\n    public int max_sum(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int MSIBS[] = arr.clone();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) {\n                    MSIBS[i] = MSIBS[j] + arr[i];\n                }\n            }\n        }\n        int MSDBS[] = arr.clone();\n        for (int i = 1; i < n + 1; i++) {\n            for (int j = 1; j < i; j++) {\n            //begin to write code\n"
    },
    {
        "task_id": 246,
        "code_str": "class Solution {\n    public static double babylonianSquareroot(double number) {\n        if(number == 0) {\n            return 0;\n        }\n        double g = number / 2.0;\n        double g2 = g + 1;\n        while(g != g2) {\n            double n = number / g;\n            g2 = g;\n            g = (g + n) / 2;\n        }\n        return g;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.babylonianSquareroot(10) - 3.162277660168379) < 0.00001;\n        assert Math.abs(Solution.babylonianSquareroot(2) - 1.414213562373095) < 0.00001;\n        assert Math.abs(Solution.babylonianSquareroot(9) - 3.0) < 0.00001;\n    }\n}\n",
        "prompt": "Write a function for computing square roots using the babylonian method.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double babylonianSquareroot(double number) {\n        if(number == 0) {\n            return 0;\n        }\n        double g = number / 2.0;\n        double g2 = g + 1;\n        while(g != g2) {\n        //begin to write code\n",
        "java_prompt": "Write a function for computing square roots using the babylonian method.",
        "code_str_generate": "class Solution {\n    public static double babylonianSquareroot(double number) {\n\n        /*\n        progame language:java\n        description:Write a function for computing square roots using the babylonian method.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if(number == 0) {\n            return 0;\n        }\n        double g = number / 2.0;\n        double g2 = g + 1;\n        while(g != g2) {\n        //begin to write code\n"
    },
    {
        "task_id": 247,
        "code_str": "class Solution {\n    public int lps(String str) {\n        int n = str.length();\n        int[][] L = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            L[i][i] = 1;\n        }\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str.charAt(i) == str.charAt(j) && cl == 2) {\n                    L[i][j] = 2;\n                } else if (str.charAt(i) == str.charAt(j)) {\n                    L[i][j] = L[i + 1][j - 1] + 2;\n                } else {\n                    L[i][j] = Math.max(L[i][j - 1], L[i + 1][j]);\n                }\n            }\n        }\n        return L[0][n - 1];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.lps(\"TENS FOR TENS\") == 5;\n        assert solution.lps(\"CARDIO FOR CARDS\") == 7;\n        assert solution.lps(\"PART OF THE JOURNEY IS PART\") == 9;\n    }\n}\n",
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int lps(String str) {\n        int n = str.length();\n        int[][] L = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            L[i][i] = 1;\n        }\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str.charAt(i) == str.charAt(j) && cl == 2) {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the longest palindromic subsequence in the given string.",
        "code_str_generate": "class Solution {\n    public int lps(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to find the longest palindromic subsequence in the given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = str.length();\n        int[][] L = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            L[i][i] = 1;\n        }\n        for (int cl = 2; cl <= n; cl++) {\n            for (int i = 0; i < n - cl + 1; i++) {\n                int j = i + cl - 1;\n                if (str.charAt(i) == str.charAt(j) && cl == 2) {\n                //begin to write code\n"
    },
    {
        "task_id": 248,
        "code_str": "class Solution {\n    public static double harmonicSum(int n) {\n        if (n < 2) {\n            return 1;\n        } else {\n            return 1.0 / n + harmonicSum(n - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.harmonicSum(7) - 2.5928571428571425) < 1e-9;\n        assert Math.abs(Solution.harmonicSum(4) - 2.083333333333333) < 1e-9;\n        assert Math.abs(Solution.harmonicSum(19) - 3.547739657143682) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to calculate the harmonic sum of n-1.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double harmonicSum(int n) {\n        if (n < 2) {\n            return 1;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate the harmonic sum of n-1.",
        "code_str_generate": "class Solution {\n    public static double harmonicSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the harmonic sum of n-1.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n < 2) {\n            return 1;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 249,
        "code_str": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        int[] arrayNums1 = {1, 2, 3, 5, 7, 8, 9, 10};\n        int[] arrayNums2 = {1, 2, 4, 8, 9};\n        List<Integer> result = solution.intersectionArray(arrayNums1, arrayNums2);\n        assert result.equals(Arrays.asList(1, 2, 8, 9));\n\n        arrayNums2 = new int[]{3, 5, 7, 9};\n        result = solution.intersectionArray(arrayNums1, arrayNums2);\n        assert result.equals(Arrays.asList(3, 5, 7, 9));\n\n        arrayNums2 = new int[]{10, 20, 30, 40};\n        result = solution.intersectionArray(arrayNums1, arrayNums2);\n        assert result.equals(Collections.singletonList(10));\n    }\n}\n",
        "prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    //begin to write code\n",
        "java_prompt": "Write a function to find the intersection of two arrays using lambda function.",
        "code_str_generate": "class Solution {\n    public List<Integer> intersectionArray(int[] arrayNums1, int[] arrayNums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the intersection of two arrays using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int num : arrayNums2) {\n            for (int value : arrayNums1) {\n                if (num == value) {\n                    result.add(num);\n                    //begin to write code\n"
    },
    {
        "task_id": 250,
        "code_str": "class Solution {\n    public static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_X(new int[]{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 4) == 0;\n        assert Solution.count_X(new int[]{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 10) == 3;\n        assert Solution.count_X(new int[]{10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2}, 8) == 4;\n    }\n}\n",
        "prompt": "Write a python function to count the occcurences of an element in a tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_X(int[] arr, int x) {\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count the occcurences of an element in a tuple.",
        "code_str_generate": "class Solution {\n    public static int count_X(int[] arr, int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occcurences of an element in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (int ele : arr) {\n            if (ele == x) {\n                count++;\n                //begin to write code\n"
    },
    {
        "task_id": 251,
        "code_str": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            result.add(elt);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        ArrayList<String> list1 = new ArrayList<>(Arrays.asList(\"Red\", \"Green\", \"Black\"));\n        ArrayList<String> list2 = new ArrayList<>(Arrays.asList(\"python\", \"java\"));\n        ArrayList<String> list3 = new ArrayList<>(Arrays.asList(\"happy\", \"sad\"));\n\n        ArrayList<String> result1 = Solution.insertElement(list1, \"c\");\n        ArrayList<String> result2 = Solution.insertElement(list2, \"program\");\n        ArrayList<String> result3 = Solution.insertElement(list3, \"laugh\");\n\n        assert result1.equals(new ArrayList<>(Arrays.asList(\"c\", \"Red\", \"c\", \"Green\", \"c\", \"Black\")));\n        assert result2.equals(new ArrayList<>(Arrays.asList(\"program\", \"python\", \"program\", \"java\")));\n        assert result3.equals(new ArrayList<>(Arrays.asList(\"laugh\", \"happy\", \"laugh\", \"sad\")));\n    }\n}\n",
        "prompt": "Write a function to insert an element before each element of a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n",
        "java_prompt": "Write a function to insert an element before each element of a list.",
        "code_str_generate": "class Solution {\n    public static ArrayList<String> insertElement(ArrayList<String> list, String element) {\n\n        /*\n        progame language:java\n        description:Write a function to insert an element before each element of a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> result = new ArrayList<>();\n        for (String elt : list) {\n            result.add(element);\n            //begin to write code\n"
    },
    {
        "task_id": 252,
        "code_str": "class Solution {\n    public static double[] convert(Complex numbers) {\n        double[] num = new double[2];\n        num[0] = Math.sqrt(Math.pow(numbers.real, 2) + Math.pow(numbers.imaginary, 2));\n        num[1] = Math.atan2(numbers.imaginary, numbers.real);\n        return num;\n    }\n    \n    public static class Complex {\n        double real;\n        double imaginary;\n        \n        public Complex(double real, double imaginary) {\n            this.real = real;\n            this.imaginary = imaginary;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution.Complex complex1 = new Solution.Complex(1, 0);\n        double[] result1 = Solution.convert(complex1);\n        assert result1[0] == 1.0 && result1[1] == 0.0 : \"Test case 1 failed\";\n        \n        Solution.Complex complex2 = new Solution.Complex(4, 0);\n        double[] result2 = Solution.convert(complex2);\n        assert result2[0] == 4.0 && result2[1] == 0.0 : \"Test case 2 failed\";\n        \n        Solution.Complex complex3 = new Solution.Complex(5, 0);\n        double[] result3 = Solution.convert(complex3);\n        assert result3[0] == 5.0 && result3[1] == 0.0 : \"Test case 3 failed\";\n        \n        System.out.println(\"All test cases passed\");\n    }\n}\n",
        "prompt": "Write a python function to convert complex numbers to polar coordinates.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double[] convert(Complex numbers) {\n        double[] num = new double[2];\n        num[0] = Math.sqrt(Math.pow(numbers.real, 2) + Math.pow(numbers.imaginary, 2));\n        num[1] = Math.atan2(numbers.imaginary, numbers.real);\n        return num;\n    }\n    public static class Complex {\n    //begin to write code\n",
        "java_prompt": "Write a java function to convert complex numbers to polar coordinates.",
        "code_str_generate": "class Solution {\n    public static double[] convert(Complex numbers) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert complex numbers to polar coordinates.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double[] num = new double[2];\n        num[0] = Math.sqrt(Math.pow(numbers.real, 2) + Math.pow(numbers.imaginary, 2));\n        num[1] = Math.atan2(numbers.imaginary, numbers.real);\n        return num;\n    }\n    public static class Complex {\n    //begin to write code\n"
    },
    {
        "task_id": 253,
        "code_str": "class Solution {\n    public static int countInteger(Object[] list1) {\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n            }\n        }\n        return ctr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countInteger(new Object[]{1,2,\"abc\",1.2}) == 2;\n        assert Solution.countInteger(new Object[]{1,2,3}) == 3;\n        assert Solution.countInteger(new Object[]{1,1.2,4,5.1}) == 2;\n    }\n}\n",
        "prompt": "Write a python function to count integers from a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countInteger(Object[] list1) {\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count integers from a given list.",
        "code_str_generate": "class Solution {\n    public static int countInteger(Object[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to count integers from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (Object i : list1) {\n            if (i instanceof Integer) {\n                ctr = ctr + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 254,
        "code_str": "class Solution {\n    public ArrayList<String> words_ae(String text) {\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            list.add(matcher.group());\n        }\n        return list;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.words_ae(\"python programe\").equals(new ArrayList<>(Arrays.asList(\"ame\")));\n        assert solution.words_ae(\"python programe language\").equals(new ArrayList<>(Arrays.asList(\"ame\", \"anguage\")));\n        assert solution.words_ae(\"assert statement\").equals(new ArrayList<>(Arrays.asList(\"assert\", \"atement\")));\n    }\n}\n",
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public ArrayList<String> words_ae(String text) {\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.",
        "code_str_generate": "class Solution {\n    public ArrayList<String> words_ae(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all words starting with 'a' or 'e' in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<String> list = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"[ae]\\\\w+\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 255,
        "code_str": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            return;\n        }\n        for (int i = start; i < l.size(); i++) {\n            current.add(l.get(i));\n            combinationsColorsHelper(l, n - 1, i, current, result);\n            current.remove(current.size() - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> colors = Arrays.asList(\"Red\", \"Green\", \"Blue\");\n        System.out.println(solution.combinationsColors(colors, 1).equals(Arrays.asList(Arrays.asList(\"Red\"), Arrays.asList(\"Green\"), Arrays.asList(\"Blue\"))));\n        System.out.println(solution.combinationsColors(colors, 2).equals(Arrays.asList(Arrays.asList(\"Red\", \"Red\"), Arrays.asList(\"Red\", \"Green\"), Arrays.asList(\"Red\", \"Blue\"), Arrays.asList(\"Green\", \"Green\"), Arrays.asList(\"Green\", \"Blue\"), Arrays.asList(\"Blue\", \"Blue\"))));\n        System.out.println(solution.combinationsColors(colors, 3).equals(Arrays.asList(Arrays.asList(\"Red\", \"Red\", \"Red\"), Arrays.asList(\"Red\", \"Red\", \"Green\"), Arrays.asList(\"Red\", \"Red\", \"Blue\"), Arrays.asList(\"Red\", \"Green\", \"Green\"), Arrays.asList(\"Red\", \"Green\", \"Blue\"), Arrays.asList(\"Red\", \"Blue\", \"Blue\"), Arrays.asList(\"Green\", \"Green\", \"Green\"), Arrays.asList(\"Green\", \"Green\", \"Blue\"), Arrays.asList(\"Green\", \"Blue\", \"Blue\"), Arrays.asList(\"Blue\", \"Blue\", \"Blue\"))));\n    }\n}\n",
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n",
        "java_prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
        "code_str_generate": "class Solution {\n    public static List<List<String>> combinationsColors(List<String> l, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> result = new ArrayList<>();\n        combinationsColorsHelper(l, n, 0, new ArrayList<>(), result);\n        return result;\n    }\n    private static void combinationsColorsHelper(List<String> l, int n, int start, List<String> current, List<List<String>> result) {\n        if (n == 0) {\n            result.add(new ArrayList<>(current));\n            //begin to write code\n"
    },
    {
        "task_id": 256,
        "code_str": "class Solution {\n    public int countPrimesNums(int n) {\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (num % i == 0) {\n                    break;\n                }\n            }\n            if (i == num) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.countPrimesNums(5) == 2;\n        assert solution.countPrimesNums(10) == 4;\n        assert solution.countPrimesNums(100) == 25;\n    }\n}\n",
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int countPrimesNums(int n) {\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (num % i == 0) {\n                //begin to write code\n",
        "java_prompt": "Write a java function to count the number of prime numbers less than a given non-negative number.",
        "code_str_generate": "class Solution {\n    public int countPrimesNums(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of prime numbers less than a given non-negative number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (int num = 0; num < n; num++) {\n            if (num <= 1) {\n                continue;\n            }\n            int i;\n            for (i = 2; i < num; i++) {\n                if (num % i == 0) {\n                //begin to write code\n"
    },
    {
        "task_id": 257,
        "code_str": "class Solution {\n    public int[] swapNumbers(int a, int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n        return new int[]{a, b};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assertArrayEquals(new int[]{20, 10}, solution.swapNumbers(10, 20));\n        assertArrayEquals(new int[]{17, 15}, solution.swapNumbers(15, 17));\n        assertArrayEquals(new int[]{200, 100}, solution.swapNumbers(100, 200));\n    }\n\n    public static void assertArrayEquals(int[] expected, int[] actual) {\n        if (expected.length != actual.length) {\n            throw new AssertionError(\"Arrays are not the same length\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != actual[i]) {\n                throw new AssertionError(\"Arrays differ at index \" + i);\n            }\n        }\n    }\n}\n",
        "prompt": "Write a function to swap two numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int[] swapNumbers(int a, int b) {\n        int temp = a;\n        a = b;\n        //begin to write code\n",
        "java_prompt": "Write a function to swap two numbers.",
        "code_str_generate": "class Solution {\n    public int[] swapNumbers(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to swap two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int temp = a;\n        a = b;\n        //begin to write code\n"
    },
    {
        "task_id": 258,
        "code_str": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        assert solution.countOdd(new int[]{1, 2, 3, 5, 7, 8, 10}) == 4;\n        assert solution.countOdd(new int[]{10, 15, 14, 13, -18, 12, -20}) == 2;\n        assert solution.countOdd(new int[]{1, 2, 4, 8, 9}) == 2;\n    }\n}\n",
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int countOdd(int[] arrayNums) {\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n",
        "java_prompt": "Write a function to find number of odd elements in the given list using lambda function.",
        "code_str_generate": "class Solution {\n    public int countOdd(int[] arrayNums) {\n\n        /*\n        progame language:java\n        description:Write a function to find number of odd elements in the given list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) Arrays.stream(arrayNums).filter(x -> x % 2 != 0).count();\n        //begin to write code\n"
    },
    {
        "task_id": 259,
        "code_str": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[][] test_tup1 = {{1, 3}, {4, 5}, {2, 9}, {1, 10}};\n        int[][] test_tup2 = {{6, 7}, {3, 9}, {1, 1}, {7, 3}};\n        int[][] res = solution.maximizeElements(test_tup1, test_tup2);\n        System.out.println(Arrays.deepEquals(res, new int[][]{{6, 7}, {4, 9}, {2, 9}, {7, 10}}));\n\n        test_tup1 = new int[][]{{2, 4}, {5, 6}, {3, 10}, {2, 11}};\n        test_tup2 = new int[][]{{7, 8}, {4, 10}, {2, 2}, {8, 4}};\n        res = solution.maximizeElements(test_tup1, test_tup2);\n        System.out.println(Arrays.deepEquals(res, new int[][]{{7, 8}, {5, 10}, {3, 10}, {8, 11}}));\n\n        test_tup1 = new int[][]{{3, 5}, {6, 7}, {4, 11}, {3, 12}};\n        test_tup2 = new int[][]{{8, 9}, {5, 11}, {3, 3}, {9, 5}};\n        res = solution.maximizeElements(test_tup1, test_tup2);\n        System.out.println(Arrays.deepEquals(res, new int[][]{{8, 9}, {6, 11}, {4, 11}, {9, 12}}));\n    }\n}\n",
        "prompt": "Write a function to maximize the given two tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n                //begin to write code\n",
        "java_prompt": "Write a function to maximize the given two tuples.",
        "code_str_generate": "class Solution {\n    public static int[][] maximizeElements(int[][] test_tup1, int[][] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to maximize the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = Math.max(test_tup1[i][j], test_tup2[i][j]);\n                //begin to write code\n"
    },
    {
        "task_id": 260,
        "code_str": "class Solution {\n    public static int newmanPrime(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return 2 * newmanPrime(n - 1) + newmanPrime(n - 2);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.newmanPrime(3) == 7 : \"Test case 1 failed\";\n        assert Solution.newmanPrime(4) == 17 : \"Test case 2 failed\";\n        assert Solution.newmanPrime(5) == 41 : \"Test case 3 failed\";\n    }\n}\n",
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int newmanPrime(int n) {\n        if (n == 0 || n == 1) {\n            return 1;\n            //begin to write code\n",
        "java_prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
        "code_str_generate": "class Solution {\n    public static int newmanPrime(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0 || n == 1) {\n            return 1;\n            //begin to write code\n"
    },
    {
        "task_id": 261,
        "code_str": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.division_elements(new int[]{10, 4, 6, 9}, new int[]{5, 2, 3, 3}), new int[]{2, 2, 2, 3});\n        assert Arrays.equals(Solution.division_elements(new int[]{12, 6, 8, 16}, new int[]{6, 3, 4, 4}), new int[]{2, 2, 2, 4});\n        assert Arrays.equals(Solution.division_elements(new int[]{20, 14, 36, 18}, new int[]{5, 7, 6, 9}), new int[]{4, 2, 6, 2});\n    }\n}\n",
        "prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to perform mathematical division operation across the given tuples.",
        "code_str_generate": "class Solution {\n    public static int[] division_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform mathematical division operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] / test_tup2[i];\n            //begin to write code\n"
    },
    {
        "task_id": 262,
        "code_str": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        return Arrays.asList(firstPart, secondPart);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.splitTwoParts(Arrays.asList(1,1,2,3,4,4,5,1),3).equals(Arrays.asList(Arrays.asList(1, 1, 2), Arrays.asList(3, 4, 4, 5, 1)));\n        assert solution.splitTwoParts(Arrays.asList('a', 'b', 'c', 'd'),2).equals(Arrays.asList(Arrays.asList('a', 'b'), Arrays.asList('c', 'd')));\n        assert solution.splitTwoParts(Arrays.asList('p', 'y', 't', 'h', 'o', 'n'),4).equals(Arrays.asList(Arrays.asList('p', 'y', 't', 'h'), Arrays.asList('o', 'n')));\n    }\n}\n",
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        //begin to write code\n",
        "java_prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> splitTwoParts(List<Object> list1, int L) {\n\n        /*\n        progame language:java\n        description:Write a function to split a given list into two parts where the length of the first part of the list is given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> firstPart = new ArrayList<>(list1.subList(0, L));\n        List<Object> secondPart = new ArrayList<>(list1.subList(L, list1.size()));\n        //begin to write code\n"
    },
    {
        "task_id": 263,
        "code_str": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        return d;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        HashMap<String, Integer> d1 = new HashMap<String, Integer>();\n        d1.put(\"a\", 100);\n        d1.put(\"b\", 200);\n        HashMap<String, Integer> d2 = new HashMap<String, Integer>();\n        d2.put(\"x\", 300);\n        d2.put(\"y\", 200);\n        HashMap<String, Integer> d3 = new HashMap<String, Integer>();\n        HashMap<String, Integer> result = Solution.mergeDict(d1, d2);\n        d3.put(\"a\", 100);\n        d3.put(\"b\", 200);\n        d3.put(\"x\", 300);\n        d3.put(\"y\", 200);\n        boolean n = result.equals(d3);\n        \n        d1.clear();\n        d1.put(\"a\", 900);\n        d1.put(\"b\", 900);\n        d1.put(\"d\", 900);\n        d2.clear();\n        d2.put(\"a\", 900);\n        d2.put(\"b\", 900);\n        d2.put(\"d\", 900);\n        d3.clear();\n        d3.put(\"a\", 900);\n        d3.put(\"b\", 900);\n        d3.put(\"d\", 900);\n        d3.put(\"a\", 900);\n        d3.put(\"b\", 900);\n        d3.put(\"d\", 900);\n        result = Solution.mergeDict(d1, d2);\n        assert result.equals(d3);\n        \n        d1.clear();\n        d1.put(\"a\", 10);\n        d1.put(\"b\", 20);\n        d2.clear();\n        d2.put(\"x\", 30);\n        d2.put(\"y\", 40);\n        d3.clear();\n        d3.put(\"a\", 10);\n        d3.put(\"b\", 20);\n        d3.put(\"x\", 30);\n        d3.put(\"y\", 40);\n        result = Solution.mergeDict(d1, d2);\n        assert result.equals(d3);\n    }\n}",
        "prompt": "Write a function to merge two dictionaries.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        //begin to write code\n",
        "java_prompt": "Write a function to merge two dictionaries.",
        "code_str_generate": "class Solution {\n    public static HashMap<String, Integer> mergeDict(HashMap<String, Integer> d1, HashMap<String, Integer> d2) {\n\n        /*\n        progame language:java\n        description:Write a function to merge two dictionaries.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<String, Integer> d = (HashMap<String, Integer>) d1.clone();\n        d.putAll(d2);\n        //begin to write code\n"
    },
    {
        "task_id": 264,
        "code_str": "class Solution {\n    public static double dogAge(double hAge) {\n        if (hAge < 0) {\n            System.exit(0);\n        }\n        double dAge;\n        if (hAge <= 2) {\n            dAge = hAge * 10.5;\n        } else {\n            dAge = 21 + (hAge - 2) * 4;\n        }\n        return dAge;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.dogAge(12) == 61 : \"Test case 1 failed\";\n        assert Solution.dogAge(15) == 73 : \"Test case 2 failed\";\n        assert Solution.dogAge(24) == 109 : \"Test case 3 failed\";\n    }\n}\n",
        "prompt": "Write a function to calculate a dog's age in dog's years.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double dogAge(double hAge) {\n        if (hAge < 0) {\n            System.exit(0);\n        }\n        double dAge;\n        if (hAge <= 2) {\n        //begin to write code\n",
        "java_prompt": "Write a function to calculate a dog's age in dog's years.",
        "code_str_generate": "class Solution {\n    public static double dogAge(double hAge) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate a dog's age in dog's years.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (hAge < 0) {\n            System.exit(0);\n        }\n        double dAge;\n        if (hAge <= 2) {\n        //begin to write code\n"
    },
    {
        "task_id": 265,
        "code_str": "class Solution {\n    public static List<List<Object>> listSplit(List<Object> S, int step) {\n        List<List<Object>> result = new ArrayList<>();\n        for (int i = 0; i < step; i++) {\n            List<Object> temp = new ArrayList<>();\n            for (int j = i; j < S.size(); j += step) {\n                temp.add(S.get(j));\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> list1 = new ArrayList<>();\n        list1.add('a');\n        list1.add('b');\n        list1.add('c');\n        list1.add('d');\n        list1.add('e');\n        list1.add('f');\n        list1.add('g');\n        list1.add('h');\n        list1.add('i');\n        list1.add('j');\n        list1.add('k');\n        list1.add('l');\n        list1.add('m');\n        list1.add('n');\n        System.out.println(solution.listSplit(list1, 3));\n\n        List<Object> list2 = new ArrayList<>();\n        for (int i = 1; i <= 14; i++) {\n            list2.add(i);\n        }\n        System.out.println(solution.listSplit(list2, 3));\n\n        List<Object> list3 = new ArrayList<>();\n        list3.add(\"python\");\n        list3.add(\"java\");\n        list3.add(\"C\");\n        list3.add(\"C++\");\n        list3.add(\"DBMS\");\n        list3.add(\"SQL\");\n        System.out.println(solution.listSplit(list3, 2));\n    }\n}\n",
        "prompt": "Write a function to split a list for every nth element.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> listSplit(List<Object> S, int step) {\n        List<List<Object>> result = new ArrayList<>();\n        for (int i = 0; i < step; i++) {\n            List<Object> temp = new ArrayList<>();\n            for (int j = i; j < S.size(); j += step) {\n                temp.add(S.get(j));\n                //begin to write code\n",
        "java_prompt": "Write a function to split a list for every nth element.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> listSplit(List<Object> S, int step) {\n\n        /*\n        progame language:java\n        description:Write a function to split a list for every nth element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Object>> result = new ArrayList<>();\n        for (int i = 0; i < step; i++) {\n            List<Object> temp = new ArrayList<>();\n            for (int j = i; j < S.size(); j += step) {\n                temp.add(S.get(j));\n                //begin to write code\n"
    },
    {
        "task_id": 266,
        "code_str": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        int LSA = 4 * (l * l);\n        return LSA;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.lateralsurface_cube(5) == 100;\n        assert Solution.lateralsurface_cube(9) == 324;\n        assert Solution.lateralsurface_cube(10) == 400;\n    }\n}\n",
        "prompt": "Write a function to find the lateral surface area of a cube.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int lateralsurface_cube(int l) {\n        int LSA = 4 * (l * l);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the lateral surface area of a cube.",
        "code_str_generate": "class Solution {\n    public static int lateralsurface_cube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int LSA = 4 * (l * l);\n        //begin to write code\n"
    },
    {
        "task_id": 267,
        "code_str": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.square_Sum(2) == 10;\n        assert Solution.square_Sum(3) == 35;\n        assert Solution.square_Sum(4) == 84;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of squares of first n odd natural numbers.",
        "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n odd natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(n * (4 * n * n - 1) / 3);\n        //begin to write code\n"
    },
    {
        "task_id": 268,
        "code_str": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_star_num(3) == 37;\n        assert Solution.find_star_num(4) == 73;\n        assert Solution.find_star_num(5) == 121;\n    }\n}\n",
        "prompt": "Write a function to find the n'th star number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_star_num(int n) {\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the n'th star number.",
        "code_str_generate": "class Solution {\n    public static int find_star_num(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th star number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (6 * n * (n - 1) + 1);\n        //begin to write code\n"
    },
    {
        "task_id": 269,
        "code_str": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.asciiValue('A') == 65;\n        assert Solution.asciiValue('R') == 82;\n        assert Solution.asciiValue('S') == 83;\n    }\n}\n",
        "prompt": "Write a function to find the ascii value of a character.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int asciiValue(char k) {\n        return (int) k;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the ascii value of a character.",
        "code_str_generate": "class Solution {\n    public static int asciiValue(char k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ascii value of a character.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int) k;\n        //begin to write code\n"
    },
    {
        "task_id": 270,
        "code_str": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.sumEvenAndEvenIndex(new int[]{5, 6, 12, 1, 18, 8}, 6) == 30;\n        assert Solution.sumEvenAndEvenIndex(new int[]{3, 20, 17, 9, 2, 10, 18, 13, 6, 18}, 10) == 26;\n        assert Solution.sumEvenAndEvenIndex(new int[]{5, 6, 12, 1}, 4) == 12;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of even numbers at even positions.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of even numbers at even positions.",
        "code_str_generate": "class Solution {\n    public static int sumEvenAndEvenIndex(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of even numbers at even positions.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 0; i < n; i += 2) {\n            if (arr[i] % 2 == 0) {\n                sum += arr[i];\n                //begin to write code\n"
    },
    {
        "task_id": 271,
        "code_str": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            sum = sum + (j * j * j * j * j);\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.evenPowerSum(2) == 1056;\n        assert Solution.evenPowerSum(3) == 8832;\n        assert Solution.evenPowerSum(1) == 32;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int evenPowerSum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of fifth power of first n even natural numbers.",
        "code_str_generate": "class Solution {\n    public static int evenPowerSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of fifth power of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            int j = 2 * i;\n            //begin to write code\n"
    },
    {
        "task_id": 272,
        "code_str": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Object>> testList1 = Arrays.asList(Arrays.asList(1, \"Rash\", 21), Arrays.asList(2, \"Varsha\", 20), Arrays.asList(3, \"Kil\", 19));\n        assert solution.rearExtract(testList1).equals(Arrays.asList(21, 20, 19));\n\n        List<List<Object>> testList2 = Arrays.asList(Arrays.asList(1, \"Sai\", 36), Arrays.asList(2, \"Ayesha\", 25), Arrays.asList(3, \"Salman\", 45));\n        assert solution.rearExtract(testList2).equals(Arrays.asList(36, 25, 45));\n\n        List<List<Object>> testList3 = Arrays.asList(Arrays.asList(1, \"Sudeep\", 14), Arrays.asList(2, \"Vandana\", 36), Arrays.asList(3, \"Dawood\", 56));\n        assert solution.rearExtract(testList3).equals(Arrays.asList(14, 36, 56));\n    }\n}\n",
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n            //begin to write code\n",
        "java_prompt": "Write a function to perfom the rear element extraction from list of tuples records.",
        "code_str_generate": "class Solution {\n    public static List<Integer> rearExtract(List<List<Object>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to perfom the rear element extraction from list of tuples records.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> res = new ArrayList<>();\n        for (List<Object> lis : testList) {\n            res.add((Integer) lis.get(lis.size() - 1));\n            //begin to write code\n"
    },
    {
        "task_id": 273,
        "code_str": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.substract_elements(new int[]{10, 4, 5}, new int[]{2, 5, 18}), new int[]{8, -1, -13});\n        assert Arrays.equals(Solution.substract_elements(new int[]{11, 2, 3}, new int[]{24, 45 ,16}), new int[]{-13, -43, -13});\n        assert Arrays.equals(Solution.substract_elements(new int[]{7, 18, 9}, new int[]{10, 11, 12}), new int[]{-3, 7, -3});\n    }\n}\n",
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
        "code_str_generate": "class Solution {\n    public static int[] substract_elements(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to substract the contents of one tuple with corresponding index of other tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] - test_tup2[i];\n            //begin to write code\n"
    },
    {
        "task_id": 274,
        "code_str": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n        return (1 << (n - 1));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.evenBinomialCoeffSum(4) == 8;\n        assert Solution.evenBinomialCoeffSum(6) == 32;\n        assert Solution.evenBinomialCoeffSum(2) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find sum of even index binomial coefficients.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n        return (1 << (n - 1));\n        //begin to write code\n",
        "java_prompt": "Write a java function to find sum of even index binomial coefficients.",
        "code_str_generate": "class Solution {\n    public static int evenBinomialCoeffSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find sum of even index binomial coefficients.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (1 << (n - 1));\n        //begin to write code\n"
    },
    {
        "task_id": 275,
        "code_str": "class Solution {\n    public int getPosition(int[] a, int n, int m) {\n        for (int i = 0; i < n; i++) {\n            a[i] = (a[i] / m + (a[i] % m != 0 ? 1 : 0));\n        }\n        int result = -1, maxx = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (maxx < a[i]) {\n                maxx = a[i];\n                result = i;\n            }\n        }\n        return result + 1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.getPosition(new int[]{2,5,4},3,2) == 2;\n        assert solution.getPosition(new int[]{4,3},2,2) == 2;\n        assert solution.getPosition(new int[]{1,2,3,4},4,1) == 4;\n    }\n}\n",
        "prompt": "Write a python function to find the position of the last removed element from the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int getPosition(int[] a, int n, int m) {\n        for (int i = 0; i < n; i++) {\n            a[i] = (a[i] / m + (a[i] % m != 0 ? 1 : 0));\n        }\n        int result = -1, maxx = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (maxx < a[i]) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the position of the last removed element from the given array.",
        "code_str_generate": "class Solution {\n    public int getPosition(int[] a, int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the position of the last removed element from the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < n; i++) {\n            a[i] = (a[i] / m + (a[i] % m != 0 ? 1 : 0));\n        }\n        int result = -1, maxx = -1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (maxx < a[i]) {\n            //begin to write code\n"
    },
    {
        "task_id": 276,
        "code_str": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        return volume;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.volumeCylinder(10,5) - 1570.7500000000002) < 0.0001;\n        assert Math.abs(Solution.volumeCylinder(4,5) - 251.32000000000002) < 0.0001;\n        assert Math.abs(Solution.volumeCylinder(4,10) - 502.64000000000004) < 0.0001;\n    }\n}\n",
        "prompt": "Write a function to find the volume of a cylinder.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the volume of a cylinder.",
        "code_str_generate": "class Solution {\n    public static double volumeCylinder(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cylinder.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = 3.1415 * r * r * h;\n        //begin to write code\n"
    },
    {
        "task_id": 277,
        "code_str": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Map<String, Integer> test1 = new HashMap<>();\n        test1.put(\"Cierra Vega\", 175);\n        test1.put(\"Alden Cantrell\", 180);\n        test1.put(\"Kierra Gentry\", 165);\n        test1.put(\"Pierre Cox\", 190);\n        Map<String, Integer> result1 = new HashMap<>();\n        result1.put(\"Cierra Vega\", 175);\n        result1.put(\"Alden Cantrell\", 180);\n        result1.put(\"Pierre Cox\", 190);\n        assert solution.dictFilter(test1, 170).equals(result1);\n\n        Map<String, Integer> test2 = new HashMap<>();\n        test2.put(\"Cierra Vega\", 175);\n        test2.put(\"Alden Cantrell\", 180);\n        test2.put(\"Kierra Gentry\", 165);\n        test2.put(\"Pierre Cox\", 190);\n        Map<String, Integer> result2 = new HashMap<>();\n        result2.put(\"Alden Cantrell\", 180);\n        result2.put(\"Pierre Cox\", 190);\n        assert solution.dictFilter(test2, 180).equals(result2);\n\n        Map<String, Integer> test3 = new HashMap<>();\n        test3.put(\"Cierra Vega\", 175);\n        test3.put(\"Alden Cantrell\", 180);\n        test3.put(\"Kierra Gentry\", 165);\n        test3.put(\"Pierre Cox\", 190);\n        Map<String, Integer> result3 = new HashMap<>();\n        result3.put(\"Pierre Cox\", 190);\n        assert solution.dictFilter(test3, 190).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to filter a dictionary based on values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n                //begin to write code\n",
        "java_prompt": "Write a function to filter a dictionary based on values.",
        "code_str_generate": "class Solution {\n    public static Map<String, Integer> dictFilter(Map<String, Integer> dict, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to filter a dictionary based on values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> result = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : dict.entrySet()) {\n            if (entry.getValue() >= n) {\n                result.put(entry.getKey(), entry.getValue());\n                //begin to write code\n"
    },
    {
        "task_id": 278,
        "code_str": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n                break;\n            }\n            count++;\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.countFirstElements(new Object[]{1, 5, 7, new Object[]{4, 6}, 10}) == 3;\n        assert solution.countFirstElements(new Object[]{2, 9, new Object[]{5, 7}, 11}) == 2;\n        assert solution.countFirstElements(new Object[]{11, 15, 5, 8, new Object[]{2, 3}, 8}) == 4;\n    }\n}\n",
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n                break;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the element count that occurs before the record in the given tuple.",
        "code_str_generate": "class Solution {\n    public static int countFirstElements(Object[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the element count that occurs before the record in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (Object ele : testArr) {\n            if (ele instanceof Object[]) {\n                break;\n                //begin to write code\n"
    },
    {
        "task_id": 279,
        "code_str": "class Solution {\n    public static int isNumDecagonal(int n) {\n        return 4 * n * n - 3 * n;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isNumDecagonal(3) == 27;\n        assert Solution.isNumDecagonal(7) == 175;\n        assert Solution.isNumDecagonal(10) == 370;\n    }\n}\n",
        "prompt": "Write a function to find the nth decagonal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int isNumDecagonal(int n) {\n        return 4 * n * n - 3 * n;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the nth decagonal number.",
        "code_str_generate": "class Solution {\n    public static int isNumDecagonal(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nth decagonal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return 4 * n * n - 3 * n;\n        //begin to write code\n"
    },
    {
        "task_id": 280,
        "code_str": "class Solution {\n    public static int[] sequentialSearch(int[] dlist, int item) {\n        int pos = 0;\n        boolean found = false;\n        while (pos < dlist.length && !found) {\n            if (dlist[pos] == item) {\n                found = true;\n            } else {\n                pos = pos + 1;\n            }\n        }\n        return new int[]{found ? 1 : 0, pos};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.sequentialSearch(new int[]{11,23,58,31,56,77,43,12,65,19},31), new int[]{1, 3});\n        assert java.util.Arrays.equals(Solution.sequentialSearch(new int[]{12, 32, 45, 62, 35, 47, 44, 61},61), new int[]{1, 7});\n        assert java.util.Arrays.equals(Solution.sequentialSearch(new int[]{9, 10, 17, 19, 22, 39, 48, 56},48), new int[]{1, 6});\n    }\n}\n",
        "prompt": "Write a function to search an element in the given array by using sequential search.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] sequentialSearch(int[] dlist, int item) {\n        int pos = 0;\n        boolean found = false;\n        while (pos < dlist.length && !found) {\n            if (dlist[pos] == item) {\n                found = true;\n                //begin to write code\n",
        "java_prompt": "Write a function to search an element in the given array by using sequential search.",
        "code_str_generate": "class Solution {\n    public static int[] sequentialSearch(int[] dlist, int item) {\n\n        /*\n        progame language:java\n        description:Write a function to search an element in the given array by using sequential search.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int pos = 0;\n        boolean found = false;\n        while (pos < dlist.length && !found) {\n            if (dlist[pos] == item) {\n                found = true;\n                //begin to write code\n"
    },
    {
        "task_id": 281,
        "code_str": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return false;\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.allUnique(Arrays.asList(1,2,3)) == true;\n        assert Solution.allUnique(Arrays.asList(1,2,1,2)) == false;\n        assert Solution.allUnique(Arrays.asList(1,2,3,4,5)) == true;\n    }\n}\n",
        "prompt": "Write a python function to check if the elements of a given list are unique or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return false;\n            //begin to write code\n",
        "java_prompt": "Write a java function to check if the elements of a given list are unique or not.",
        "code_str_generate": "class Solution {\n    public static boolean allUnique(List<Integer> testList) {\n\n        /*\n        progame language:java\n        description:Write a java function to check if the elements of a given list are unique or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashSet<Integer> set = new HashSet<>(testList);\n        if (testList.size() > set.size()) {\n            return false;\n            //begin to write code\n"
    },
    {
        "task_id": 282,
        "code_str": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = new ArrayList<>();\n        List<Integer> nums2 = new ArrayList<>();\n\n        nums1.add(1);\n        nums1.add(2);\n        nums1.add(3);\n        nums2.add(4);\n        nums2.add(5);\n        nums2.add(6);\n        assert solution.subList(nums1, nums2).equals(Arrays.asList(-3, -3, -3));\n\n        nums1.clear();\n        nums2.clear();\n        nums1.add(1);\n        nums1.add(2);\n        nums2.add(3);\n        nums2.add(4);\n        assert solution.subList(nums1, nums2).equals(Arrays.asList(-2, -2));\n\n        nums1.clear();\n        nums2.clear();\n        nums1.add(90);\n        nums1.add(120);\n        nums2.add(50);\n        nums2.add(70);\n        assert solution.subList(nums1, nums2).equals(Arrays.asList(40, 50));\n    }\n}\n",
        "prompt": "Write a function to substaract two lists using map and lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n            //begin to write code\n",
        "java_prompt": "Write a function to substaract two lists using map and lambda function.",
        "code_str_generate": "class Solution {\n    public List<Integer> subList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to substaract two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) - nums2.get(i));\n            //begin to write code\n"
    },
    {
        "task_id": 283,
        "code_str": "class Solution {\n    public static boolean validate(int n) {\n        for (int i = 0; i < 10; i++) {\n            int temp = n;\n            int count = 0;\n            while (temp != 0) {\n                if (temp % 10 == i) {\n                    count++;\n                }\n                if (count > i) {\n                    return false;\n                }\n                temp /= 10;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.validate(1234) == true;\n        assert Solution.validate(51241) == false;\n        assert Solution.validate(321) == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean validate(int n) {\n        for (int i = 0; i < 10; i++) {\n            int temp = n;\n            int count = 0;\n            while (temp != 0) {\n                if (temp % 10 == i) {\n                    count++;\n                }\n                //begin to write code\n",
        "java_prompt": "Write a java function to check whether the frequency of each digit is less than or equal to the digit itself.",
        "code_str_generate": "class Solution {\n    public static boolean validate(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the frequency of each digit is less than or equal to the digit itself.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < 10; i++) {\n            int temp = n;\n            int count = 0;\n            while (temp != 0) {\n                if (temp % 10 == i) {\n                    count++;\n                }\n                //begin to write code\n"
    },
    {
        "task_id": 284,
        "code_str": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.checkElement(new Object[]{\"green\", \"orange\", \"black\", \"white\"}, \"blue\");\n        assert !Solution.checkElement(new Object[]{1, 2, 3, 4}, 7);\n        assert Solution.checkElement(new Object[]{\"green\", \"green\", \"green\", \"green\"}, \"green\");\n    }\n}\n",
        "prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check whether all items of a list are equal to a given string.",
        "code_str_generate": "class Solution {\n    public static boolean checkElement(Object[] list, Object element) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether all items of a list are equal to a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (Object v : list) {\n            if (!v.equals(element)) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 285,
        "code_str": "class Solution {\n    public String text_match_two_three(String text) {\n        String patterns = \"ab{2,3}\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.text_match_two_three(\"ac\").equals(\"Not matched!\");\n        assert solution.text_match_two_three(\"dc\").equals(\"Not matched!\");\n        assert solution.text_match_two_three(\"abbbba\").equals(\"Found a match!\");\n    }\n}\n",
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String text_match_two_three(String text) {\n        String patterns = \"ab{2,3}\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function that matches a string that has an a followed by two to three 'b'.",
        "code_str_generate": "class Solution {\n    public String text_match_two_three(String text) {\n\n        /*\n        progame language:java\n        description:Write a function that matches a string that has an a followed by two to three 'b'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"ab{2,3}\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 286,
        "code_str": "class Solution {\n    public int maxSubArraySumRepeated(int[] a, int n, int k) {\n        int maxSoFar = Integer.MIN_VALUE;\n        int maxEndingHere = 0;\n        for (int i = 0; i < n * k; i++) {\n            maxEndingHere = maxEndingHere + a[i % n];\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n            }\n            if (maxEndingHere < 0) {\n                maxEndingHere = 0;\n            }\n        }\n        return maxSoFar;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxSubArraySumRepeated(new int[]{10, 20, -30, -1}, 4, 3) == 30;\n        assert solution.maxSubArraySumRepeated(new int[]{-1, 10, 20}, 3, 2) == 59;\n        assert solution.maxSubArraySumRepeated(new int[]{-1, -2, -3}, 3, 3) == -1;\n    }\n}\n",
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxSubArraySumRepeated(int[] a, int n, int k) {\n        int maxSoFar = Integer.MIN_VALUE;\n        int maxEndingHere = 0;\n        for (int i = 0; i < n * k; i++) {\n            maxEndingHere = maxEndingHere + a[i % n];\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
        "code_str_generate": "class Solution {\n    public int maxSubArraySumRepeated(int[] a, int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxSoFar = Integer.MIN_VALUE;\n        int maxEndingHere = 0;\n        for (int i = 0; i < n * k; i++) {\n            maxEndingHere = maxEndingHere + a[i % n];\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n                //begin to write code\n"
    },
    {
        "task_id": 287,
        "code_str": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.square_Sum(2) == 20;\n        assert Solution.square_Sum(3) == 56;\n        assert Solution.square_Sum(4) == 120;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int square_Sum(int n) {\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of squares of first n even natural numbers.",
        "code_str_generate": "class Solution {\n    public static int square_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of squares of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)(2 * n * (n + 1) * (2 * n + 1) / 3);\n        //begin to write code\n"
    },
    {
        "task_id": 288,
        "code_str": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n            }\n        }\n        return currentElement;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.modularInverse(new int[]{1, 6, 4, 5}, 4, 7) == 2;\n        assert Solution.modularInverse(new int[]{1, 3, 8, 12, 12}, 5, 13) == 3;\n        assert Solution.modularInverse(new int[]{2, 3, 4, 5}, 4, 6) == 1;\n    }\n}\n",
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n",
        "java_prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
        "code_str_generate": "class Solution {\n    public static int modularInverse(int[] arr, int N, int P) {\n\n        /*\n        progame language:java\n        description:Write a function to count array elements having modular inverse under given prime number p equal to itself.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int currentElement = 0;\n        for (int i = 0; i < N; i++) {\n            if ((arr[i] * arr[i]) % P == 1) {\n                currentElement = currentElement + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 289,
        "code_str": "class Solution {\n    public static int odd_Days(int N) {\n        int hund1 = N / 100;\n        int hund4 = N / 400;\n        int leap = N >> 2;\n        int ordd = N - leap;\n        if (hund1 != 0) {\n            ordd += hund1;\n            leap -= hund1;\n        }\n        if (hund4 != 0) {\n            ordd -= hund4;\n            leap += hund4;\n        }\n        int days = ordd + leap * 2;\n        int odd = days % 7;\n        return odd;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.odd_Days(100) == 5;\n        assert Solution.odd_Days(50) == 6;\n        assert Solution.odd_Days(75) == 2;\n    }\n}\n",
        "prompt": "Write a python function to calculate the number of odd days in a given year.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int odd_Days(int N) {\n        int hund1 = N / 100;\n        int hund4 = N / 400;\n        int leap = N >> 2;\n        int ordd = N - leap;\n        if (hund1 != 0) {\n            ordd += hund1;\n            leap -= hund1;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to calculate the number of odd days in a given year.",
        "code_str_generate": "class Solution {\n    public static int odd_Days(int N) {\n\n        /*\n        progame language:java\n        description:Write a java function to calculate the number of odd days in a given year.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int hund1 = N / 100;\n        int hund4 = N / 400;\n        int leap = N >> 2;\n        int ordd = N - leap;\n        if (hund1 != 0) {\n            ordd += hund1;\n            leap -= hund1;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 290,
        "code_str": "class Solution {\n    public static Object[] max_length(List<List<Integer>> list1) {\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> x : list1) {\n            if (x.size() > max_length) {\n                max_length = x.size();\n                max_list = x;\n            }\n        }\n        return new Object[]{max_length, max_list};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(0), Arrays.asList(1, 3), Arrays.asList(5, 7), Arrays.asList(9, 11), Arrays.asList(13, 15, 17));\n        Object[] result1 = solution.max_length(test1);\n        assert (int)result1[0] == 3 && result1[1].equals(Arrays.asList(13, 15, 17));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1), Arrays.asList(5, 7), Arrays.asList(10, 12, 14, 15));\n        Object[] result2 = solution.max_length(test2);\n        assert (int)result2[0] == 4 && result2[1].equals(Arrays.asList(10, 12, 14, 15));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(5), Arrays.asList(15, 20, 25));\n        Object[] result3 = solution.max_length(test3);\n        assert (int)result3[0] == 3 && result3[1].equals(Arrays.asList(15, 20, 25));\n    }\n}\n",
        "prompt": "Write a function to find the list of lists with maximum length.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Object[] max_length(List<List<Integer>> list1) {\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> x : list1) {\n            if (x.size() > max_length) {\n                max_length = x.size();\n                //begin to write code\n",
        "java_prompt": "Write a function to find the list of lists with maximum length.",
        "code_str_generate": "class Solution {\n    public static Object[] max_length(List<List<Integer>> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the list of lists with maximum length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> x : list1) {\n            if (x.size() > max_length) {\n                max_length = x.size();\n                //begin to write code\n"
    },
    {
        "task_id": 291,
        "code_str": "class Solution {\n    public int count_no_of_ways(int n, int k) {\n        int[] dp = new int[n + 1];\n        int total = k;\n        int mod = 1000000007;\n        dp[1] = k;\n        if(n > 1){\n            dp[2] = k * k;\n        }\n        for (int i = 3; i <= n; i++) {\n            dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod;\n        }\n        return dp[n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.count_no_of_ways(2, 4) == 16;\n        assert solution.count_no_of_ways(3, 2) == 6;\n        assert solution.count_no_of_ways(4, 4) == 228;\n    }\n}\n",
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int count_no_of_ways(int n, int k) {\n        int[] dp = new int[n + 1];\n        int total = k;\n        int mod = 1000000007;\n        dp[1] = k;\n        if(n > 1){\n            dp[2] = k * k;\n            //begin to write code\n",
        "java_prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
        "code_str_generate": "class Solution {\n    public int count_no_of_ways(int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] dp = new int[n + 1];\n        int total = k;\n        int mod = 1000000007;\n        dp[1] = k;\n        if(n > 1){\n            dp[2] = k * k;\n            //begin to write code\n"
    },
    {
        "task_id": 292,
        "code_str": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        return q;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find(10,3) == 3;\n        assert Solution.find(4,2) == 2;\n        assert Solution.find(20,5) == 4;\n    }\n}\n",
        "prompt": "Write a python function to find quotient of two numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find(int n, int m) {\n        int q = n / m;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find quotient of two numbers.",
        "code_str_generate": "class Solution {\n    public static int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find quotient of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int q = n / m;\n        //begin to write code\n"
    },
    {
        "task_id": 293,
        "code_str": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        return s;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.otherside_rightangle(7,8) == 10.63014581273465;\n        assert Solution.otherside_rightangle(3,4) == 5;\n        assert Solution.otherside_rightangle(7,15) == 16.55294535724685;\n    }\n}\n",
        "prompt": "Write a function to find the third side of a right angled triangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n",
        "java_prompt": "Write a function to find the third side of a right angled triangle.",
        "code_str_generate": "class Solution {\n    public static double otherside_rightangle(int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the third side of a right angled triangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double s = Math.sqrt((w * w) + (h * h));\n        //begin to write code\n"
    },
    {
        "task_id": 294,
        "code_str": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n            }\n        }\n        return maxVal;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.maxVal(Arrays.asList(\"Python\", 3, 2, 4, 5, \"version\")) == 5;\n        assert Solution.maxVal(Arrays.asList(\"Python\", 15, 20, 25)) == 25;\n        assert Solution.maxVal(Arrays.asList(\"Python\", 30, 20, 40, 50, \"version\")) == 50;\n    }\n}\n",
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum value in a given heterogeneous list.",
        "code_str_generate": "class Solution {\n    public static int maxVal(List<Object> listVal) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxVal = Integer.MIN_VALUE;\n        for (Object obj : listVal) {\n            if (obj instanceof Integer) {\n                maxVal = Math.max(maxVal, (Integer) obj);\n                //begin to write code\n"
    },
    {
        "task_id": 295,
        "code_str": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n        }\n        int sum = 0;\n        for (int i : divisors) {\n            sum += i;\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumDiv(8) == 7;\n        assert Solution.sumDiv(12) == 16;\n        assert Solution.sumDiv(7) == 1;\n    }\n}\n",
        "prompt": "Write a function to return the sum of all divisors of a number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumDiv(int number) {\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n",
        "java_prompt": "Write a function to return the sum of all divisors of a number.",
        "code_str_generate": "class Solution {\n    public static int sumDiv(int number) {\n\n        /*\n        progame language:java\n        description:Write a function to return the sum of all divisors of a number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Integer> divisors = new ArrayList<Integer>();\n        divisors.add(1);\n        for (int i = 2; i < number; i++) {\n            if (number % i == 0) {\n                divisors.add(i);\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 296,
        "code_str": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                }\n            }\n        }\n        return inv_count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.getInvCount(new int[]{1,20,6,4,5},5) == 5;\n        assert Solution.getInvCount(new int[]{1,2,1},3) == 1;\n        assert Solution.getInvCount(new int[]{1,2,5,6,1},5) == 3;\n    }\n}\n",
        "prompt": "Write a python function to count inversions in an array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n",
        "java_prompt": "Write a java function to count inversions in an array.",
        "code_str_generate": "class Solution {\n    public static int getInvCount(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count inversions in an array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int inv_count = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (arr[i] > arr[j]) {\n                    inv_count += 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 297,
        "code_str": "class Solution {\n    public List<Object> flattenList(List<Object> list1) {\n        List<Object> result_list = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) return result_list;\n        Stack<List<Object>> stack = new Stack<>();\n        stack.push(new ArrayList<>(list1));\n        while (!stack.isEmpty()) {\n            List<Object> c_num = stack.pop();\n            Object next = c_num.remove(c_num.size() - 1);\n            if (!c_num.isEmpty()) stack.push(c_num);\n            if (next instanceof List) {\n                if (!((List) next).isEmpty()) stack.push(new ArrayList<>((List) next));\n            } else {\n                result_list.add(next);\n            }\n        }\n        Collections.reverse(result_list);\n        return result_list;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.flattenList(Arrays.asList(0, 10, Arrays.asList(20, 30), 40, 50, Arrays.asList(60, 70, 80), Arrays.asList(90, 100, 110, 120))).equals(Arrays.asList(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120));\n        assert solution.flattenList(Arrays.asList(Arrays.asList(10, 20), Arrays.asList(40), Arrays.asList(30, 56, 25), Arrays.asList(10, 20), Arrays.asList(33), Arrays.asList(40))).equals(Arrays.asList(10, 20, 40, 30, 56, 25, 10, 20, 33, 40));\n        assert solution.flattenList(Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4,5,6), Arrays.asList(10,11,12), Arrays.asList(7,8,9))).equals(Arrays.asList(1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9));\n    }\n}\n",
        "prompt": "Write a function to flatten a given nested list structure.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Object> flattenList(List<Object> list1) {\n        List<Object> result_list = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) return result_list;\n        Stack<List<Object>> stack = new Stack<>();\n        stack.push(new ArrayList<>(list1));\n        while (!stack.isEmpty()) {\n            List<Object> c_num = stack.pop();\n            Object next = c_num.remove(c_num.size() - 1);\n            if (!c_num.isEmpty()) stack.push(c_num);\n            //begin to write code\n",
        "java_prompt": "Write a function to flatten a given nested list structure.",
        "code_str_generate": "class Solution {\n    public List<Object> flattenList(List<Object> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to flatten a given nested list structure.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result_list = new ArrayList<>();\n        if (list1 == null || list1.isEmpty()) return result_list;\n        Stack<List<Object>> stack = new Stack<>();\n        stack.push(new ArrayList<>(list1));\n        while (!stack.isEmpty()) {\n            List<Object> c_num = stack.pop();\n            Object next = c_num.remove(c_num.size() - 1);\n            if (!c_num.isEmpty()) stack.push(c_num);\n            //begin to write code\n"
    },
    {
        "task_id": 298,
        "code_str": "class Solution {\n    public static List<List<Object>> intersectionNestedLists(List<Object> l1, List<List<Object>> l2) {\n        List<List<Object>> result = new ArrayList<>();\n        for (List<Object> lst : l2) {\n            List<Object> temp = new ArrayList<>();\n            for (Object n : lst) {\n                if (l1.contains(n)) {\n                    temp.add(n);\n                }\n            }\n            result.add(temp);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> l1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n        List<List<Object>> l2 = Arrays.asList(Arrays.asList(12, 18, 23, 25, 45), Arrays.asList(7, 11, 19, 24, 28), Arrays.asList(1, 5, 8, 18, 15, 16));\n        assert solution.intersectionNestedLists(l1, l2).equals(Arrays.asList(Arrays.asList(12), Arrays.asList(7, 11), Arrays.asList(1, 5, 8)));\n\n        l1 = Arrays.asList(2, 3, 1);\n        l2 = Arrays.asList(Arrays.asList(4, 5), Arrays.asList(6, 8));\n        assert solution.intersectionNestedLists(l1, l2).equals(Arrays.asList(new ArrayList<>(), new ArrayList<>()));\n\n        l1 = Arrays.asList(\"john\", \"amal\", \"joel\", \"george\");\n        l2 = Arrays.asList(Arrays.asList(\"john\"), Arrays.asList(\"jack\", \"john\", \"mary\"), Arrays.asList(\"howard\", \"john\"), Arrays.asList(\"jude\"));\n        assert solution.intersectionNestedLists(l1, l2).equals(Arrays.asList(Arrays.asList(\"john\"), Arrays.asList(\"john\"), Arrays.asList(\"john\"), new ArrayList<>()));\n    }\n}\n",
        "prompt": "Write a function to find the nested list elements which are present in another list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> intersectionNestedLists(List<Object> l1, List<List<Object>> l2) {\n        List<List<Object>> result = new ArrayList<>();\n        for (List<Object> lst : l2) {\n            List<Object> temp = new ArrayList<>();\n            for (Object n : lst) {\n                if (l1.contains(n)) {\n                    temp.add(n);\n                    //begin to write code\n",
        "java_prompt": "Write a function to find the nested list elements which are present in another list.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> intersectionNestedLists(List<Object> l1, List<List<Object>> l2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the nested list elements which are present in another list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Object>> result = new ArrayList<>();\n        for (List<Object> lst : l2) {\n            List<Object> temp = new ArrayList<>();\n            for (Object n : lst) {\n                if (l1.contains(n)) {\n                    temp.add(n);\n                    //begin to write code\n"
    },
    {
        "task_id": 299,
        "code_str": "class Solution {\n    public static Map.Entry<String, Integer> maxAggregate(List<Map.Entry<String, Integer>> stdata) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : stdata) {\n            temp.put(entry.getKey(), temp.getOrDefault(entry.getKey(), 0) + entry.getValue());\n        }\n        return Collections.max(temp.entrySet(), Comparator.comparingInt(Map.Entry::getValue));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Map.Entry<String, Integer>> stdata1 = new ArrayList<>();\n        stdata1.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 90));\n        stdata1.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 88));\n        stdata1.add(new AbstractMap.SimpleEntry<>(\"Peter Nichols\", 7));\n        stdata1.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 122));\n        stdata1.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 84));\n        assert Solution.maxAggregate(stdata1).equals(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 212));\n\n        List<Map.Entry<String, Integer>> stdata2 = new ArrayList<>();\n        stdata2.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 50));\n        stdata2.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 48));\n        stdata2.add(new AbstractMap.SimpleEntry<>(\"Peter Nichols\", 37));\n        stdata2.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 22));\n        stdata2.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 14));\n        assert Solution.maxAggregate(stdata2).equals(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 72));\n\n        List<Map.Entry<String, Integer>> stdata3 = new ArrayList<>();\n        stdata3.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 10));\n        stdata3.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 20));\n        stdata3.add(new AbstractMap.SimpleEntry<>(\"Peter Nichols\", 30));\n        stdata3.add(new AbstractMap.SimpleEntry<>(\"Juan Whelan\", 40));\n        stdata3.add(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 50));\n        assert Solution.maxAggregate(stdata3).equals(new AbstractMap.SimpleEntry<>(\"Sabah Colley\", 70));\n    }\n}\n",
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map.Entry<String, Integer> maxAggregate(List<Map.Entry<String, Integer>> stdata) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : stdata) {\n            temp.put(entry.getKey(), temp.getOrDefault(entry.getKey(), 0) + entry.getValue());\n            //begin to write code\n",
        "java_prompt": "Write a function to calculate the maximum aggregate from the list of tuples.",
        "code_str_generate": "class Solution {\n    public static Map.Entry<String, Integer> maxAggregate(List<Map.Entry<String, Integer>> stdata) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the maximum aggregate from the list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> temp = new HashMap<>();\n        for (Map.Entry<String, Integer> entry : stdata) {\n            temp.put(entry.getKey(), temp.getOrDefault(entry.getKey(), 0) + entry.getValue());\n            //begin to write code\n"
    },
    {
        "task_id": 300,
        "code_str": "class Solution {\n    public static double countBinarySeq(int n) {\n        double nCr = 1;\n        double res = 1;\n        for (int r = 1; r <= n; r++) {\n            nCr = (nCr * (n + 1 - r)) / r;\n            res += nCr * nCr;\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countBinarySeq(1) == 2.0;\n        assert Solution.countBinarySeq(2) == 6.0;\n        assert Solution.countBinarySeq(3) == 20.0;\n    }\n}\n",
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double countBinarySeq(int n) {\n        double nCr = 1;\n        double res = 1;\n        for (int r = 1; r <= n; r++) {\n            nCr = (nCr * (n + 1 - r)) / r;\n            //begin to write code\n",
        "java_prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
        "code_str_generate": "class Solution {\n    public static double countBinarySeq(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double nCr = 1;\n        double res = 1;\n        for (int r = 1; r <= n; r++) {\n            nCr = (nCr * (n + 1 - r)) / r;\n            //begin to write code\n"
    },
    {
        "task_id": 301,
        "code_str": "class Solution {\n    public static int dictDepth(Map<Object, Object> map) {\n        if (map instanceof Map) {\n            if (map.isEmpty()) {\n                return 1;\n            } else {\n                int maxDepth = 0;\n                for (Object value : map.values()) {\n                    if (value instanceof Map) {\n                        int depth = dictDepth((Map<Object, Object>) value);\n                        if (depth > maxDepth) {\n                            maxDepth = depth;\n                        }\n                    }\n                }\n                return 1 + maxDepth;\n            }\n        }\n        return 0;\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Map<Object, Object> map1 = new HashMap<>();\n        Map<Object, Object> map2 = new HashMap<>();\n        Map<Object, Object> map3 = new HashMap<>();\n        map1.put(\"a\", 1);\n        map3.put(\"d\", new HashMap<>());\n        map2.put(\"c\", map3);\n        map1.put(\"b\", map2);\n        assert Solution.dictDepth(map1) == 4;\n\n        map1.clear();\n        map2.clear();\n        map3.clear();\n        map2.put(\"c\", \"python\");\n        map1.put(\"a\", 1);\n        map1.put(\"b\",map2);\n        assert Solution.dictDepth(map1) == 2;\n\n        \n        map1.clear();\n        map2.clear();\n        map3.clear();\n        map3.put(4, \"Mon\");\n        map2.put(3, map3);\n        map1.put(1, \"Sun\");\n        map1.put(2, map2);\n        assert Solution.dictDepth(map1) == 3;\n    }\n}",
        "prompt": "Write a function to find the depth of a dictionary.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int dictDepth(Map<Object, Object> map) {\n        if (map instanceof Map) {\n            if (map.isEmpty()) {\n                return 1;\n            } else {\n                int maxDepth = 0;\n                for (Object value : map.values()) {\n                    if (value instanceof Map) {\n                        int depth = dictDepth((Map<Object, Object>) value);\n                        if (depth > maxDepth) {\n                        //begin to write code\n",
        "java_prompt": "Write a function to find the depth of a dictionary.",
        "code_str_generate": "class Solution {\n    public static int dictDepth(Map<Object, Object> map) {\n\n        /*\n        progame language:java\n        description:Write a function to find the depth of a dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (map instanceof Map) {\n            if (map.isEmpty()) {\n                return 1;\n            } else {\n                int maxDepth = 0;\n                for (Object value : map.values()) {\n                    if (value instanceof Map) {\n                        int depth = dictDepth((Map<Object, Object>) value);\n                        if (depth > maxDepth) {\n                        //begin to write code\n"
    },
    {
        "task_id": 302,
        "code_str": "class Solution {\n    public static int set_Bit_Number(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        int msb = 0;\n        n = n / 2;\n        while (n > 0) {\n            n = n / 2;\n            msb += 1;\n        }\n        return (1 << msb);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.set_Bit_Number(6) == 4;\n        assert Solution.set_Bit_Number(10) == 8;\n        assert Solution.set_Bit_Number(18) == 16;\n    }\n}\n",
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int set_Bit_Number(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        int msb = 0;\n        n = n / 2;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the most significant bit number which is also a set bit.",
        "code_str_generate": "class Solution {\n    public static int set_Bit_Number(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the most significant bit number which is also a set bit.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0) {\n            return 0;\n        }\n        int msb = 0;\n        n = n / 2;\n        //begin to write code\n"
    },
    {
        "task_id": 303,
        "code_str": "class Solution {\n    public boolean solve(int[] a, int n) {\n        int mx = Integer.MIN_VALUE;\n        for (int j = 1; j < n; j++) {\n            if (mx > a[j]) {\n                return false;\n            }\n            mx = Math.max(mx, a[j - 1]);\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.solve(new int[]{1,0,2},3) == true;\n        assert solution.solve(new int[]{1,2,0},3) == false;\n        assert solution.solve(new int[]{1,2,1},3) == true;\n    }\n}\n",
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean solve(int[] a, int n) {\n        int mx = Integer.MIN_VALUE;\n        for (int j = 1; j < n; j++) {\n            if (mx > a[j]) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a java function to check whether the count of inversion of two types are same or not.",
        "code_str_generate": "class Solution {\n    public boolean solve(int[] a, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the count of inversion of two types are same or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mx = Integer.MIN_VALUE;\n        for (int j = 1; j < n; j++) {\n            if (mx > a[j]) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 304,
        "code_str": "class Solution {\n    public int findElement(int[] arr, int[][] ranges, int rotations, int index) {\n        for (int i = rotations - 1; i >= 0; i--) {\n            int left = ranges[i][0];\n            int right = ranges[i][1];\n            if (left <= index && right >= index) {\n                if (index == left) {\n                    index = right;\n                } else {\n                    index = index - 1;\n                }\n            }\n        }\n        return arr[index];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findElement(new int[]{1,2,3,4,5}, new int[][]{{0,2},{0,3}}, 2, 1) == 3;\n        assert solution.findElement(new int[]{1,2,3,4}, new int[][]{{0,1},{0,2}}, 1, 2) == 3;\n        assert solution.findElement(new int[]{1,2,3,4,5,6}, new int[][]{{0,1},{0,2}}, 1, 1) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find element at a given index after number of rotations.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findElement(int[] arr, int[][] ranges, int rotations, int index) {\n        for (int i = rotations - 1; i >= 0; i--) {\n            int left = ranges[i][0];\n            int right = ranges[i][1];\n            if (left <= index && right >= index) {\n                if (index == left) {\n                    index = right;\n                    //begin to write code\n",
        "java_prompt": "Write a java function to find element at a given index after number of rotations.",
        "code_str_generate": "class Solution {\n    public int findElement(int[] arr, int[][] ranges, int rotations, int index) {\n\n        /*\n        progame language:java\n        description:Write a java function to find element at a given index after number of rotations.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = rotations - 1; i >= 0; i--) {\n            int left = ranges[i][0];\n            int right = ranges[i][1];\n            if (left <= index && right >= index) {\n                if (index == left) {\n                    index = right;\n                    //begin to write code\n"
    },
    {
        "task_id": 305,
        "code_str": "class Solution {\n    public static String[] startWithp(String[] words) {\n        for (String w : words) {\n            Pattern pattern = Pattern.compile(\"(P\\\\w+)\\\\W(P\\\\w+)\");\n            Matcher matcher = pattern.matcher(w);\n            if (matcher.find()) {\n                return new String[]{matcher.group(1), matcher.group(2)};\n            }\n        }\n        return null;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.startWithp(new String[]{\"Python PHP\", \"Java JavaScript\", \"c c++\"}),(new String[]{\"Python\", \"PHP\"}));\n        assert Arrays.equals(Solution.startWithp(new String[]{\"Python Programming\",\"Java Programming\"}),(new String[]{\"Python\",\"Programming\"}));\n        assert Arrays.equals(Solution.startWithp(new String[]{\"Pqrst Pqr\",\"qrstuv\"}),(new String[]{\"Pqrst\",\"Pqr\"}));\n    }\n}",
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String[] startWithp(String[] words) {\n        for (String w : words) {\n            Pattern pattern = Pattern.compile(\"(P\\\\w+)\\\\W(P\\\\w+)\");\n            Matcher matcher = pattern.matcher(w);\n            if (matcher.find()) {\n            //begin to write code\n",
        "java_prompt": "Write a function to match two words from a list of words starting with letter 'p'.",
        "code_str_generate": "class Solution {\n    public static String[] startWithp(String[] words) {\n\n        /*\n        progame language:java\n        description:Write a function to match two words from a list of words starting with letter 'p'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (String w : words) {\n            Pattern pattern = Pattern.compile(\"(P\\\\w+)\\\\W(P\\\\w+)\");\n            Matcher matcher = pattern.matcher(w);\n            if (matcher.find()) {\n            //begin to write code\n"
    },
    {
        "task_id": 306,
        "code_str": "class Solution {\n    public int max_sum_increasing_subseq(int[] a, int n, int index, int k) {\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            if (a[i] > a[0]) {\n                dp[0][i] = a[i] + a[0];\n            } else {\n                dp[0][i] = a[i];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (a[j] > a[i] && j > i) {\n                    if (dp[i - 1][i] + a[j] > dp[i - 1][j]) {\n                        dp[i][j] = dp[i - 1][i] + a[j];\n                    } else {\n                        dp[i][j] = dp[i - 1][j];\n                    }\n                } else {\n                    dp[i][j] = dp[i - 1][j];\n                }\n            }\n        }\n        return dp[index][k];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.max_sum_increasing_subseq(new int[]{1, 101, 2, 3, 100, 4, 5 }, 7, 4, 6) == 11;\n        assert solution.max_sum_increasing_subseq(new int[]{1, 101, 2, 3, 100, 4, 5 }, 7, 2, 5) == 7;\n        assert solution.max_sum_increasing_subseq(new int[]{11, 15, 19, 21, 26, 28, 31}, 7, 2, 4) == 71;\n    }\n}\n",
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int max_sum_increasing_subseq(int[] a, int n, int index, int k) {\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            if (a[i] > a[0]) {\n                dp[0][i] = a[i] + a[0];\n            } else {\n                dp[0][i] = a[i];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (a[j] > a[i] && j > i) {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
        "code_str_generate": "class Solution {\n    public int max_sum_increasing_subseq(int[] a, int n, int index, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] dp = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            if (a[i] > a[0]) {\n                dp[0][i] = a[i] + a[0];\n            } else {\n                dp[0][i] = a[i];\n            }\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (a[j] > a[i] && j > i) {\n                //begin to write code\n"
    },
    {
        "task_id": 307,
        "code_str": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            newList.add(n);\n            tuplexColon[m] = newList;\n        }\n        return tuplexColon;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Object[] tuplex1 = new Object[]{\"HELLO\", 5, new ArrayList<>(), true};\n        Object[] result1 = solution.colonTuplex(tuplex1, 2, 50);\n        assert Arrays.equals(result1, new Object[]{\"HELLO\", 5, Arrays.asList(50), true});\n\n        Object[] tuplex2 = new Object[]{\"HELLO\", 5, new ArrayList<>(), true};\n        Object[] result2 = solution.colonTuplex(tuplex2, 2, 100);\n        assert Arrays.equals(result2, new Object[]{\"HELLO\", 5, Arrays.asList(100), true});\n\n        Object[] tuplex3 = new Object[]{\"HELLO\", 5, new ArrayList<>(), true};\n        Object[] result3 = solution.colonTuplex(tuplex3, 2, 500);\n        assert Arrays.equals(result3, new Object[]{\"HELLO\", 5, Arrays.asList(500), true});\n    }\n}\n",
        "prompt": "Write a function to get a colon of a tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n",
        "java_prompt": "Write a function to get a colon of a tuple.",
        "code_str_generate": "class Solution {\n    public static Object[] colonTuplex(Object[] tuplex, int m, Object n) {\n\n        /*\n        progame language:java\n        description:Write a function to get a colon of a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Object[] tuplexColon = Arrays.copyOf(tuplex, tuplex.length);\n        if(tuplexColon[m] instanceof List) {\n            ((List)tuplexColon[m]).add(n);\n        } else {\n            List<Object> newList = new ArrayList<>();\n            //begin to write code\n"
    },
    {
        "task_id": 308,
        "code_str": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n            }\n        }\n        Collections.sort(result, Collections.reverseOrder());\n        return result.subList(0, N);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.largeProduct(new int[]{1, 2, 3, 4, 5, 6}, new int[]{3, 6, 8, 9, 10, 6}, 3).equals(Arrays.asList(60, 54, 50));\n        assert solution.largeProduct(new int[]{1, 2, 3, 4, 5, 6}, new int[]{3, 6, 8, 9, 10, 6}, 4).equals(Arrays.asList(60, 54, 50, 48));\n        assert solution.largeProduct(new int[]{1, 2, 3, 4, 5, 6}, new int[]{3, 6, 8, 9, 10, 6}, 5).equals(Arrays.asList(60, 54, 50, 48, 45));\n    }\n}\n",
        "prompt": "Write a function to find the specified number of largest products from two given lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n",
        "java_prompt": "Write a function to find the specified number of largest products from two given lists.",
        "code_str_generate": "class Solution {\n    public List<Integer> largeProduct(int[] nums1, int[] nums2, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to find the specified number of largest products from two given lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int x : nums1) {\n            for (int y : nums2) {\n                result.add(x * y);\n                //begin to write code\n"
    },
    {
        "task_id": 309,
        "code_str": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.maximum(5,10) == 10;\n        assert Solution.maximum(-1,-2) == -1;\n        assert Solution.maximum(9,7) == 9;\n    }\n}\n",
        "prompt": "Write a python function to find the maximum of two numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maximum(int a, int b) {\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum of two numbers.",
        "code_str_generate": "class Solution {\n    public static int maximum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a >= b) {\n            return a;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 310,
        "code_str": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n            }\n        }\n        Character[] result = new Character[list.size()];\n        return list.toArray(result);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.stringToTuple(\"python 3.0\"), new Character[]{'p', 'y', 't', 'h', 'o', 'n', '3', '.', '0'});\n        assert java.util.Arrays.equals(Solution.stringToTuple(\"item1\"), new Character[]{'i', 't', 'e', 'm', '1'});\n        assert java.util.Arrays.equals(Solution.stringToTuple(\"15.10\"), new Character[]{'1', '5', '.', '1', '0'});\n    }\n}\n",
        "prompt": "Write a function to convert a given string to a tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n",
        "java_prompt": "Write a function to convert a given string to a tuple.",
        "code_str_generate": "class Solution {\n    public static Character[] stringToTuple(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a given string to a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Character> list = new ArrayList<>();\n        for (char c : str1.toCharArray()) {\n            if (!Character.isWhitespace(c)) {\n                list.add(c);\n                //begin to write code\n"
    },
    {
        "task_id": 311,
        "code_str": "class Solution {\n    public static int set_left_most_unset_bit(int n) {\n        if ((n & (n + 1)) == 0) {\n            return n;\n        }\n        int pos = 0, temp = n, count = 0;\n        while (temp != 0) {\n            if ((temp & 1) == 0) {\n                pos = count;\n            }\n            count += 1;\n            temp >>= 1;\n        }\n        return (n | (1 << pos));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.set_left_most_unset_bit(10) == 14;\n        assert Solution.set_left_most_unset_bit(12) == 14;\n        assert Solution.set_left_most_unset_bit(15) == 15;\n    }\n}\n",
        "prompt": "Write a python function to set the left most unset bit.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int set_left_most_unset_bit(int n) {\n        if ((n & (n + 1)) == 0) {\n            return n;\n        }\n        int pos = 0, temp = n, count = 0;\n        while (temp != 0) {\n            if ((temp & 1) == 0) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to set the left most unset bit.",
        "code_str_generate": "class Solution {\n    public static int set_left_most_unset_bit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to set the left most unset bit.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if ((n & (n + 1)) == 0) {\n            return n;\n        }\n        int pos = 0, temp = n, count = 0;\n        while (temp != 0) {\n            if ((temp & 1) == 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 312,
        "code_str": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        return volume;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.volumeCone(5,12) - 314.15926535897927) < 1e-9;\n        assert Math.abs(Solution.volumeCone(10,15) - 1570.7963267948965) < 1e-9;\n        assert Math.abs(Solution.volumeCone(19,17) - 6426.651371693521) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to find the volume of a cone.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double volumeCone(double r, double h) {\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the volume of a cone.",
        "code_str_generate": "class Solution {\n    public static double volumeCone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double volume = (1.0/3) * Math.PI * r * r * h;\n        //begin to write code\n"
    },
    {
        "task_id": 313,
        "code_str": "class Solution {\n    public static int pos_nos(int[] list1) {\n        for (int num : list1) {\n            if (num >= 0) {\n                return num;\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.pos_nos(new int[]{-1,-2,1,2}) == 1;\n        assert Solution.pos_nos(new int[]{3,4,-5}) == 3;\n        assert Solution.pos_nos(new int[]{-2,-3,1}) == 1;\n    }\n}\n",
        "prompt": "Write a python function to print positive numbers in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int pos_nos(int[] list1) {\n        for (int num : list1) {\n            if (num >= 0) {\n                return num;\n                //begin to write code\n",
        "java_prompt": "Write a java function to print positive numbers in a list.",
        "code_str_generate": "class Solution {\n    public static int pos_nos(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to print positive numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int num : list1) {\n            if (num >= 0) {\n                return num;\n                //begin to write code\n"
    },
    {
        "task_id": 314,
        "code_str": "class Solution {\n    public static int maxSumRectangularGrid(int[][] grid, int n) {\n        int incl = Math.max(grid[0][0], grid[1][0]);\n        int excl = 0;\n        for (int i = 1; i < n; i++) {\n            int exclNew = Math.max(excl, incl);\n            incl = excl + Math.max(grid[0][i], grid[1][i]);\n            excl = exclNew;\n        }\n        return Math.max(excl, incl);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.maxSumRectangularGrid(new int[][] { {1, 4, 5}, {2, 0, 0 } }, 3) == 7;\n        assert Solution.maxSumRectangularGrid(new int[][] { { 1, 2, 3, 4, 5}, { 6, 7, 8, 9, 10} }, 5) == 24;\n        assert Solution.maxSumRectangularGrid(new int[][] { {7, 9, 11, 15, 19}, {21, 25, 28, 31, 32} }, 5) == 81;\n    }\n}\n",
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxSumRectangularGrid(int[][] grid, int n) {\n        int incl = Math.max(grid[0][0], grid[1][0]);\n        int excl = 0;\n        for (int i = 1; i < n; i++) {\n            int exclNew = Math.max(excl, incl);\n            //begin to write code\n",
        "java_prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
        "code_str_generate": "class Solution {\n    public static int maxSumRectangularGrid(int[][] grid, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int incl = Math.max(grid[0][0], grid[1][0]);\n        int excl = 0;\n        for (int i = 1; i < n; i++) {\n            int exclNew = Math.max(excl, incl);\n            //begin to write code\n"
    },
    {
        "task_id": 315,
        "code_str": "class Solution {\n    public static String find_Max_Len_Even(String str) {\n        int n = str.length();\n        int i = 0;\n        int currlen = 0;\n        int maxlen = 0;\n        int st = -1;\n        while (i < n) {\n            if (str.charAt(i) == ' ') {\n                if (currlen % 2 == 0) {\n                    if (maxlen < currlen) {\n                        maxlen = currlen;\n                        st = i - currlen;\n                    }\n                }\n                currlen = 0;\n            } else {\n                currlen += 1;\n            }\n            i += 1;\n        }\n        if (currlen % 2 == 0) {\n            if (maxlen < currlen) {\n                maxlen = currlen;\n                st = i - currlen;\n            }\n        }\n        if (st == -1) {\n            return \"-1\";\n        }\n        return str.substring(st, st + maxlen);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_Max_Len_Even(\"python language\").equals(\"language\");\n        assert Solution.find_Max_Len_Even(\"maximum even length\").equals(\"length\");\n        assert Solution.find_Max_Len_Even(\"eve\").equals(\"-1\");\n    }\n}\n",
        "prompt": "Write a python function to find the first maximum length of even word.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String find_Max_Len_Even(String str) {\n        int n = str.length();\n        int i = 0;\n        int currlen = 0;\n        int maxlen = 0;\n        int st = -1;\n        while (i < n) {\n            if (str.charAt(i) == ' ') {\n                if (currlen % 2 == 0) {\n                    if (maxlen < currlen) {\n                        maxlen = currlen;\n                        st = i - currlen;\n                    }\n                }\n                currlen = 0;\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first maximum length of even word.",
        "code_str_generate": "class Solution {\n    public static String find_Max_Len_Even(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first maximum length of even word.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = str.length();\n        int i = 0;\n        int currlen = 0;\n        int maxlen = 0;\n        int st = -1;\n        while (i < n) {\n            if (str.charAt(i) == ' ') {\n                if (currlen % 2 == 0) {\n                    if (maxlen < currlen) {\n                        maxlen = currlen;\n                        st = i - currlen;\n                    }\n                }\n                currlen = 0;\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 316,
        "code_str": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n            } else if (x < A[mid]) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findLastOccurrence(new int[]{2, 5, 5, 5, 6, 6, 8, 9, 9, 9}, 5) == 3;\n        assert solution.findLastOccurrence(new int[]{2, 3, 5, 8, 6, 6, 8, 9, 9, 9}, 9) == 9;\n        assert solution.findLastOccurrence(new int[]{2, 2, 1, 5, 6, 6, 6, 9, 9, 9}, 6) == 6;\n    }\n}\n",
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
        "code_str_generate": "class Solution {\n    public int findLastOccurrence(int[] A, int x) {\n\n        /*\n        progame language:java\n        description:Write a function to find the index of the last occurrence of a given number in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int left = 0, right = A.length - 1;\n        int result = -1;\n        while (left <= right) {\n            int mid = (left + right) / 2;\n            if (x == A[mid]) {\n                result = mid;\n                left = mid + 1;\n                //begin to write code\n"
    },
    {
        "task_id": 317,
        "code_str": "class Solution {\n    public static List<Object> modifiedEncode(List<Object> alist) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < alist.size(); i++) {\n            int count = 1;\n            while (i + 1 < alist.size() && alist.get(i).equals(alist.get(i + 1))) {\n                i++;\n                count++;\n            }\n            if (count > 1) {\n                List<Object> temp = new ArrayList<>();\n                temp.add(count);\n                temp.add(alist.get(i));\n                result.add(temp);\n            } else {\n                result.add(alist.get(i));\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> test1 = new ArrayList<>();\n        test1.add(1);\n        test1.add(1);\n        test1.add(2);\n        test1.add(3);\n        test1.add(4);\n        test1.add(4);\n        test1.add(5);\n        test1.add(1);\n        List<Object> result1 = new ArrayList<>();\n        List<Object> temp1 = new ArrayList<>();\n        temp1.add(2);\n        temp1.add(1);\n        result1.add(temp1);\n        result1.add(2);\n        result1.add(3);\n        List<Object> temp2 = new ArrayList<>();\n        temp2.add(2);\n        temp2.add(4);\n        result1.add(temp2);\n        result1.add(5);\n        result1.add(1);\n        assert solution.modifiedEncode(test1).equals(result1);\n\n        \n        List<Object> test2 = new ArrayList<>();\n        for (char c : \"automatically\".toCharArray()) {\n            test2.add(c);\n        }\n        List<Object> result2 = new ArrayList<>();\n        for (char c : \"automatica\".toCharArray()) {\n            result2.add(c);\n        }\n        List<Object> temp3 = new ArrayList<>();\n        temp3.add(2);\n        temp3.add('l');\n        result2.add(temp3);\n        result2.add('y');\n        assert solution.modifiedEncode(test2).equals(result2);\n\n        List<Object> test3 = new ArrayList<>();\n        for (char c : \"python\".toCharArray()) {\n            test3.add(c);\n        }\n        List<Object> result3 = new ArrayList<>();\n        for (char c : \"python\".toCharArray()) {\n            result3.add(c);\n        }\n        assert solution.modifiedEncode(test3).equals(result3);\n    }\n}",
        "prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> modifiedEncode(List<Object> alist) {\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < alist.size(); i++) {\n            int count = 1;\n            while (i + 1 < alist.size() && alist.get(i).equals(alist.get(i + 1))) {\n                i++;\n                count++;\n            }\n            if (count > 1) {\n                List<Object> temp = new ArrayList<>();\n                //begin to write code\n",
        "java_prompt": "Write a function to reflect the modified run-length encoding from a list.",
        "code_str_generate": "class Solution {\n    public static List<Object> modifiedEncode(List<Object> alist) {\n\n        /*\n        progame language:java\n        description:Write a function to reflect the modified run-length encoding from a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result = new ArrayList<>();\n        for (int i = 0; i < alist.size(); i++) {\n            int count = 1;\n            while (i + 1 < alist.size() && alist.get(i).equals(alist.get(i + 1))) {\n                i++;\n                count++;\n            }\n            if (count > 1) {\n                List<Object> temp = new ArrayList<>();\n                //begin to write code\n"
    },
    {
        "task_id": 318,
        "code_str": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                maxvalue = Math.max(maxvalue, i * j * k);\n            }\n        }\n        return maxvalue;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.maxVolume(8) == 18;\n        assert Solution.maxVolume(4) == 2;\n        assert Solution.maxVolume(1) == 0;\n    }\n}\n",
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxVolume(int s) {\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum volume of a cuboid with given sum of sides.",
        "code_str_generate": "class Solution {\n    public static int maxVolume(int s) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum volume of a cuboid with given sum of sides.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxvalue = 0;\n        for (int i = 1; i < s - 1; i++) {\n            for (int j = 1; j < s; j++) {\n                int k = s - i - j;\n                //begin to write code\n"
    },
    {
        "task_id": 319,
        "code_str": "class Solution {\n    public List<String> findLongWord(String text) {\n        List<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\b\\\\w{5}\\\\b\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n            result.add(matcher.group());\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findLongWord(\"Please move back to strem\").equals(new ArrayList<String>(){{\nadd(\"strem\");}});\n        assert solution.findLongWord(\"4K Ultra HD streaming player\").equals(new ArrayList<String>(){{\nadd(\"Ultra\");}});\n        assert solution.findLongWord(\"Streaming Media Player\").equals(new ArrayList<String>(){{\nadd(\"Media\");}});\n    }\n}\n",
        "prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<String> findLongWord(String text) {\n        List<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\b\\\\w{5}\\\\b\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find all five characters long word in the given string by using regex.",
        "code_str_generate": "class Solution {\n    public List<String> findLongWord(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all five characters long word in the given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        Pattern pattern = Pattern.compile(\"\\\\b\\\\w{5}\\\\b\");\n        Matcher matcher = pattern.matcher(text);\n        while (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 320,
        "code_str": "class Solution {\n    public static int sumDifference(int n) {\n        int sumOfSquares = 0;\n        int squareOfSum = 0;\n        for (int num = 1; num <= n; num++) {\n            sumOfSquares += num * num;\n            squareOfSum += num;\n        }\n        squareOfSum = squareOfSum * squareOfSum;\n        return squareOfSum - sumOfSquares;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumDifference(12) == 5434;\n        assert Solution.sumDifference(20) == 41230;\n        assert Solution.sumDifference(54) == 2151270;\n    }\n}\n",
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumDifference(int n) {\n        int sumOfSquares = 0;\n        int squareOfSum = 0;\n        for (int num = 1; num <= n; num++) {\n            sumOfSquares += num * num;\n            //begin to write code\n",
        "java_prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
        "code_str_generate": "class Solution {\n    public static int sumDifference(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sumOfSquares = 0;\n        int squareOfSum = 0;\n        for (int num = 1; num <= n; num++) {\n            sumOfSquares += num * num;\n            //begin to write code\n"
    },
    {
        "task_id": 321,
        "code_str": "class Solution {\n    public String find_demlo(String s) {\n        int l = s.length();\n        StringBuilder res = new StringBuilder();\n        for (int i = 1; i <= l; i++) {\n            res.append(i);\n        }\n        for (int i = l - 1; i > 0; i--) {\n            res.append(i);\n        }\n        return res.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find_demlo(\"111111\").equals(\"12345654321\");\n        assert solution.find_demlo(\"1111\").equals(\"1234321\");\n        assert solution.find_demlo(\"13333122222\").equals(\"123456789101110987654321\");\n    }\n}\n",
        "prompt": "Write a function to find the demlo number for the given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String find_demlo(String s) {\n        int l = s.length();\n        StringBuilder res = new StringBuilder();\n        for (int i = 1; i <= l; i++) {\n            res.append(i);\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to find the demlo number for the given number.",
        "code_str_generate": "class Solution {\n    public String find_demlo(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to find the demlo number for the given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = s.length();\n        StringBuilder res = new StringBuilder();\n        for (int i = 1; i <= l; i++) {\n            res.append(i);\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 322,
        "code_str": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        for (int i = 0; i < list1.length; i++) {\n            if (list1[i] == min_val) {\n                min_result.add(i);\n            }\n        }\n        return min_result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> result1 = solution.position_min(new int[]{12,33,23,10,67,89,45,667,23,12,11,10,54});\n        assert result1.equals(Arrays.asList(3,11));\n        List<Integer> result2 = solution.position_min(new int[]{1,2,2,2,4,4,4,5,5,5,5});\n        assert result2.equals(Arrays.asList(0));\n        List<Integer> result3 = solution.position_min(new int[]{2,1,5,6,8,3,4,9,10,11,8,12});\n        assert result3.equals(Arrays.asList(1));\n    }\n}\n",
        "prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        //begin to write code\n",
        "java_prompt": "Write a function to find all index positions of the minimum values in a given list.",
        "code_str_generate": "class Solution {\n    public List<Integer> position_min(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find all index positions of the minimum values in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = list1[0];\n        for (int i = 1; i < list1.length; i++) {\n            if (list1[i] < min_val) {\n                min_val = list1[i];\n            }\n        }\n        List<Integer> min_result = new ArrayList<>();\n        //begin to write code\n"
    },
    {
        "task_id": 323,
        "code_str": "class Solution {\n    public static void rightRotate(int arr[], int n, int out_of_place, int cur) {\n        int temp = arr[cur];\n        for (int i = cur; i > out_of_place; i--) {\n            arr[i] = arr[i - 1];\n        }\n        arr[out_of_place] = temp;\n    }\n\n    public static int[] reArrange(int arr[], int n) {\n        int out_of_place = -1;\n        for (int index = 0; index < n; index++) {\n            if (out_of_place >= 0) {\n                if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                    rightRotate(arr, n, out_of_place, index);\n                    if (index - out_of_place > 2) {\n                        out_of_place += 2;\n                    } else {\n                        out_of_place = -1;\n                    }\n                }\n            }\n            if (out_of_place == -1) {\n                if ((arr[index] >= 0 && index % 2 == 0) || (arr[index] < 0 && index % 2 == 1)) {\n                    out_of_place = index;\n                }\n            }\n        }\n        return arr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] arr1 = {-5, -2, 5, 2, 4, 7, 1, 8, 0, -8};\n        int[] arr2 = {1, 2, 3, -4, -1, 4};\n        int[] arr3 = {4, 7, 9, 77, -4, 5, -3, -9};\n        int[] result1 = {-5, 5, -2, 2, -8, 4, 7, 1, 8, 0};\n        int[] result2 = {-4, 1, -1, 2, 3, 4};\n        int[] result3 = {-4, 4, -3, 7, -9, 9, 77, 5};\n        assert Arrays.equals(solution.reArrange(arr1, 10), result1);\n        assert Arrays.equals(solution.reArrange(arr2, 6), result2);\n        assert Arrays.equals(solution.reArrange(arr3, 8), result3);\n    }\n}\n",
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static void rightRotate(int arr[], int n, int out_of_place, int cur) {\n        int temp = arr[cur];\n        for (int i = cur; i > out_of_place; i--) {\n            arr[i] = arr[i - 1];\n        }\n        arr[out_of_place] = temp;\n    }\n    public static int[] reArrange(int arr[], int n) {\n        int out_of_place = -1;\n        for (int index = 0; index < n; index++) {\n            if (out_of_place >= 0) {\n                if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                    rightRotate(arr, n, out_of_place, index);\n                    if (index - out_of_place > 2) {\n                    //begin to write code\n",
        "java_prompt": "Write a function to re-arrange the given array in alternating positive and negative items.",
        "code_str_generate": "class Solution {\n    public static void rightRotate(int arr[], int n, int out_of_place, int cur) {\n        int temp = arr[cur];\n        for (int i = cur; i > out_of_place; i--) {\n            arr[i] = arr[i - 1];\n        }\n        arr[out_of_place] = temp;\n    }\n    public static int[] reArrange(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to re-arrange the given array in alternating positive and negative items.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int out_of_place = -1;\n        for (int index = 0; index < n; index++) {\n            if (out_of_place >= 0) {\n                if ((arr[index] >= 0 && arr[out_of_place] < 0) || (arr[index] < 0 && arr[out_of_place] >= 0)) {\n                    rightRotate(arr, n, out_of_place, index);\n                    if (index - out_of_place > 2) {\n                    //begin to write code\n"
    },
    {
        "task_id": 324,
        "code_str": "class Solution {\n    public static int[] sumOfAlternates(int[] testArray) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n            } else {\n                sum2 += testArray[idx];\n            }\n        }\n        return new int[]{sum1, sum2};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.sumOfAlternates(new int[]{5, 6, 3, 6, 10, 34}), new int[]{18, 46});\n        assert java.util.Arrays.equals(Solution.sumOfAlternates(new int[]{1, 2, 3, 4, 5}), new int[]{9, 6});\n        assert java.util.Arrays.equals(Solution.sumOfAlternates(new int[]{6, 7, 8, 9, 4, 5}), new int[]{18, 21});\n    }\n}\n",
        "prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] sumOfAlternates(int[] testArray) {\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n                //begin to write code\n",
        "java_prompt": "Write a function to extract the sum of alternate chains of tuples.",
        "code_str_generate": "class Solution {\n    public static int[] sumOfAlternates(int[] testArray) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the sum of alternate chains of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum1 = 0;\n        int sum2 = 0;\n        for (int idx = 0; idx < testArray.length; idx++) {\n            if (idx % 2 == 0) {\n                sum1 += testArray[idx];\n                //begin to write code\n"
    },
    {
        "task_id": 325,
        "code_str": "class Solution {\n    public int getMinSquares(int n) {\n        if (n <= 3) {\n            return n;\n        }\n        int res = n;\n        for (int x = 1; x <= n; x++) {\n            int temp = x * x;\n            if (temp > n) {\n                break;\n            } else {\n                res = Math.min(res, 1 + getMinSquares(n - temp));\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.getMinSquares(6) == 3;\n        assert solution.getMinSquares(2) == 2;\n        assert solution.getMinSquares(4) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int getMinSquares(int n) {\n        if (n <= 3) {\n            return n;\n        }\n        int res = n;\n        for (int x = 1; x <= n; x++) {\n            int temp = x * x;\n            if (temp > n) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the minimum number of squares whose sum is equal to a given number.",
        "code_str_generate": "class Solution {\n    public int getMinSquares(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum number of squares whose sum is equal to a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n <= 3) {\n            return n;\n        }\n        int res = n;\n        for (int x = 1; x <= n; x++) {\n            int temp = x * x;\n            if (temp > n) {\n            //begin to write code\n"
    },
    {
        "task_id": 326,
        "code_str": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n            }\n        }\n        return Collections.max(temp.entrySet(), Map.Entry.comparingByValue()).getKey();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.mostOccurrences(new String[]{\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"}).equals(\"UTS\");\n        assert Solution.mostOccurrences(new String[]{\"Its been a great year\", \"this year is so worse\", \"this year is okay\"}).equals(\"year\");\n        assert Solution.mostOccurrences(new String[]{\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"}).equals(\"can\");\n    }\n}\n",
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n                //begin to write code\n",
        "java_prompt": "Write a function to get the word with most number of occurrences in the given strings list.",
        "code_str_generate": "class Solution {\n    public static String mostOccurrences(String[] testList) {\n\n        /*\n        progame language:java\n        description:Write a function to get the word with most number of occurrences in the given strings list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, Integer> temp = new HashMap<>();\n        for (String sub : testList) {\n            for (String wrd : sub.split(\" \")) {\n                temp.put(wrd, temp.getOrDefault(wrd, 0) + 1);\n                //begin to write code\n"
    },
    {
        "task_id": 327,
        "code_str": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.checkIsosceles(6,8,12);\n        assert Solution.checkIsosceles(6,6,12);\n        assert !Solution.checkIsosceles(6,16,20);\n    }\n}\n",
        "prompt": "Write a function to print check if the triangle is isosceles or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to print check if the triangle is isosceles or not.",
        "code_str_generate": "class Solution {\n    public static boolean checkIsosceles(int x, int y, int z) {\n\n        /*\n        progame language:java\n        description:Write a function to print check if the triangle is isosceles or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y || y == z || z == x) {\n            return true;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 328,
        "code_str": "class Solution {\n    public static List<Integer> rotateLeft(List<Integer> list1, int m, int n) {\n        List<Integer> result = new ArrayList<>();\n        result.addAll(list1.subList(m, list1.size()));\n        result.addAll(list1.subList(0, n));\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Integer> list1 = new ArrayList<>();\n        for (int i = 1; i <= 10; i++) {\n            list1.add(i);\n        }\n        List<Integer> list2 = new ArrayList<>();\n        for (int i = 4; i <= 10; i++) {\n            list2.add(i);\n        }\n        for (int i = 1; i <= 4; i++) {\n            list2.add(i);\n        }\n        assert Solution.rotateLeft(list1,3,4).equals(list2);\n\n        list2.clear();\n        for (int i = 3; i <= 10; i++) {\n            list2.add(i);\n        }\n        for (int i = 1; i <= 2; i++) {\n            list2.add(i);\n        }\n        assert Solution.rotateLeft(list1,2,2).equals(list2);\n\n        list2.clear();\n        for (int i = 6; i <= 10; i++) {\n            list2.add(i);\n        }\n        for (int i = 1; i <= 2; i++) {\n            list2.add(i);\n        }\n        assert Solution.rotateLeft(list1,5,2).equals(list2);\n    }\n}\n",
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> rotateLeft(List<Integer> list1, int m, int n) {\n        List<Integer> result = new ArrayList<>();\n        result.addAll(list1.subList(m, list1.size()));\n        //begin to write code\n",
        "java_prompt": "Write a function to rotate a given list by specified number of items to the left direction.",
        "code_str_generate": "class Solution {\n    public static List<Integer> rotateLeft(List<Integer> list1, int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to rotate a given list by specified number of items to the left direction.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        result.addAll(list1.subList(m, list1.size()));\n        //begin to write code\n"
    },
    {
        "task_id": 329,
        "code_str": "class Solution {\n    public static int negCount(int[] list) {\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n            }\n        }\n        return negCount;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.negCount(new int[]{-1,-2,3,-4,-5}) == 4;\n        assert Solution.negCount(new int[]{1,2,3}) == 0;\n        assert Solution.negCount(new int[]{1,2,-3,-10,20}) == 2;\n    }\n}\n",
        "prompt": "Write a python function to count negative numbers in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int negCount(int[] list) {\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count negative numbers in a list.",
        "code_str_generate": "class Solution {\n    public static int negCount(int[] list) {\n\n        /*\n        progame language:java\n        description:Write a java function to count negative numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int negCount = 0;\n        for (int num : list) {\n            if (num <= 0) {\n                negCount += 1;\n                //begin to write code\n"
    },
    {
        "task_id": 330,
        "code_str": "class Solution {\n    public static List<String> find_char(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n            matches.add(m.group());\n        }\n        return matches;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_char(\"For the four consumer complaints contact manager AKR reddy\").equals(new ArrayList<String>() {{\n            add(\"For\");\n            add(\"the\");\n            add(\"four\");\n            add(\"AKR\");\n            add(\"reddy\");\n        }});\n        assert Solution.find_char(\"Certain service are subject to change MSR\").equals(new ArrayList<String>() {{\n            add(\"are\");\n            add(\"MSR\");\n        }});\n        assert Solution.find_char(\"Third party legal desclaimers\").equals(new ArrayList<String>() {{\n            add(\"Third\");\n            add(\"party\");\n            add(\"legal\");\n        }});\n    }\n}\n",
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> find_char(String text) {\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.",
        "code_str_generate": "class Solution {\n    public static List<String> find_char(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all three, four, five characters long words in the given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> matches = new ArrayList<>();\n        Matcher m = Pattern.compile(\"\\\\b\\\\w{3,5}\\\\b\").matcher(text);\n        while (m.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 331,
        "code_str": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n            }\n            x = x << 1;\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countUnsetBits(2) == 1;\n        assert Solution.countUnsetBits(4) == 2;\n        assert Solution.countUnsetBits(6) == 1;\n    }\n}\n",
        "prompt": "Write a python function to count unset bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countUnsetBits(int n) {\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count unset bits of a given number.",
        "code_str_generate": "class Solution {\n    public static int countUnsetBits(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count unset bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        int x = 1;\n        while (x < n + 1) {\n            if ((x & n) == 0) {\n                count += 1;\n                //begin to write code\n"
    },
    {
        "task_id": 332,
        "code_str": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n        }\n        return charCountMap;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.charFrequency(\"python\").equals(Map.of('p', 1, 'y', 1, 't', 1, 'h', 1, 'o', 1, 'n', 1));\n        assert Solution.charFrequency(\"program\").equals(Map.of('p', 1, 'r', 2, 'o', 1, 'g', 1, 'a', 1, 'm', 1));\n        assert Solution.charFrequency(\"language\").equals(Map.of('l', 1, 'a', 2, 'n', 1, 'g', 2, 'u', 1, 'e', 1));\n    }\n}\n",
        "prompt": "Write a function to count character frequency of a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n            //begin to write code\n",
        "java_prompt": "Write a function to count character frequency of a given string.",
        "code_str_generate": "class Solution {\n    public static Map<Character, Integer> charFrequency(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to count character frequency of a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> charCountMap = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charCountMap.put(c, charCountMap.getOrDefault(c, 0) + 1);\n            //begin to write code\n"
    },
    {
        "task_id": 333,
        "code_str": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n            }\n        });\n        return sub_li;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<Object>> list1 = new ArrayList<>();\n        list1.add(Arrays.asList(\"a\", 10));\n        list1.add(Arrays.asList(\"b\", 5));\n        list1.add(Arrays.asList(\"c\", 20));\n        list1.add(Arrays.asList(\"d\", 15));\n        assert Solution.Sort(list1).equals(Arrays.asList(Arrays.asList(\"b\", 5), Arrays.asList(\"a\", 10), Arrays.asList(\"d\", 15), Arrays.asList(\"c\", 20)));\n\n        List<List<Object>> list2 = new ArrayList<>();\n        list2.add(Arrays.asList(\"452\", 10));\n        list2.add(Arrays.asList(\"256\", 5));\n        list2.add(Arrays.asList(\"100\", 20));\n        list2.add(Arrays.asList(\"135\", 15));\n        assert Solution.Sort(list2).equals(Arrays.asList(Arrays.asList(\"256\", 5), Arrays.asList(\"452\", 10), Arrays.asList(\"135\", 15), Arrays.asList(\"100\", 20)));\n\n        List<List<Object>> list3 = new ArrayList<>();\n        list3.add(Arrays.asList(\"rishi\", 10));\n        list3.add(Arrays.asList(\"akhil\", 5));\n        list3.add(Arrays.asList(\"ramya\", 20));\n        list3.add(Arrays.asList(\"gaur\", 15));\n        assert Solution.Sort(list3).equals(Arrays.asList(Arrays.asList(\"akhil\", 5), Arrays.asList(\"rishi\", 10), Arrays.asList(\"gaur\", 15), Arrays.asList(\"ramya\", 20)));\n    }\n}\n",
        "prompt": "Write a python function to sort a list according to the second element in sublist.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n                //begin to write code\n",
        "java_prompt": "Write a java function to sort a list according to the second element in sublist.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> Sort(List<List<Object>> sub_li) {\n\n        /*\n        progame language:java\n        description:Write a java function to sort a list according to the second element in sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(sub_li, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return Integer.compare((Integer) o1.get(1), (Integer) o2.get(1));\n                //begin to write code\n"
    },
    {
        "task_id": 334,
        "code_str": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.checkValidity(1,2,3);\n        assert !Solution.checkValidity(2,3,5);\n        assert Solution.checkValidity(7,10,5);\n    }\n}\n",
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the triangle is valid or not if sides are given.",
        "code_str_generate": "class Solution {\n    public static boolean checkValidity(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the triangle is valid or not if sides are given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if ((a + b <= c) || (a + c <= b) || (b + c <= a)) {\n            return false;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 335,
        "code_str": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        return total;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.apSum(1,5,2) == 25.0;\n        assert Solution.apSum(2,6,4) == 72.0;\n        assert Solution.apSum(1,4,5) == 34.0;\n    }\n}\n",
        "prompt": "Write a function to find the sum of arithmetic progression.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double apSum(int a, int n, int d) {\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the sum of arithmetic progression.",
        "code_str_generate": "class Solution {\n    public static double apSum(int a, int n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of arithmetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double total = (n * (2.0 * a + (n - 1) * d)) / 2.0;\n        //begin to write code\n"
    },
    {
        "task_id": 336,
        "code_str": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.checkMonthnum(\"February\") == true;\n        assert solution.checkMonthnum(\"January\") == false;\n        assert solution.checkMonthnum(\"March\") == false;\n    }\n}\n",
        "prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to check whether the given month name contains 28 days or not.",
        "code_str_generate": "class Solution {\n    public boolean checkMonthnum(String monthname1) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month name contains 28 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (monthname1.equals(\"February\")) {\n            return true;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 337,
        "code_str": "class Solution {\n    public String textMatchWord(String text) {\n        String patterns = \"\\\\w+\\\\S*$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.textMatchWord(\"python.\").equals(\"Found a match!\");\n        assert solution.textMatchWord(\"python.\").equals(\"Found a match!\");\n        assert solution.textMatchWord(\"  lang  .\").equals(\"Not matched!\");\n    }\n}\n",
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String textMatchWord(String text) {\n        String patterns = \"\\\\w+\\\\S*$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function that matches a word at the end of a string, with optional punctuation.",
        "code_str_generate": "class Solution {\n    public String textMatchWord(String text) {\n\n        /*\n        progame language:java\n        description:Write a function that matches a word at the end of a string, with optional punctuation.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"\\\\w+\\\\S*$\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 338,
        "code_str": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n                if (checkEquality(s.substring(i, i + j))) {\n                    result++;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countSubstringWithEqualEnds(\"aba\") == 4;\n        assert Solution.countSubstringWithEqualEnds(\"abcab\") == 7;\n        assert Solution.countSubstringWithEqualEnds(\"abc\") == 3;\n    }\n}\n",
        "prompt": "Write a python function to count the number of substrings with same first and last characters.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the number of substrings with same first and last characters.",
        "code_str_generate": "class Solution {\n    public static boolean checkEquality(String s) {\n        return (s.charAt(0) == s.charAt(s.length() - 1));\n    }\n    public static int countSubstringWithEqualEnds(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of substrings with same first and last characters.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = 0;\n        int n = s.length();\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; j <= n - i; j++) {\n            //begin to write code\n"
    },
    {
        "task_id": 339,
        "code_str": "class Solution {\n    public int find_Divisor(int x, int y) {\n        if (x == y) {\n            return y;\n        }\n        return 2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find_Divisor(2,2) == 2;\n        assert solution.find_Divisor(2,5) == 2;\n        assert solution.find_Divisor(5,10) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int find_Divisor(int x, int y) {\n        if (x == y) {\n            return y;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum occuring divisor in an interval.",
        "code_str_generate": "class Solution {\n    public int find_Divisor(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum occuring divisor in an interval.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (x == y) {\n            return y;\n            //begin to write code\n"
    },
    {
        "task_id": 340,
        "code_str": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                if (count == 3) {\n                    break;\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumThreeSmallestNums(new int[]{10,20,30,40,50,60,7}) == 37;\n        assert Solution.sumThreeSmallestNums(new int[]{1,2,3,4,5}) == 6;\n        assert Solution.sumThreeSmallestNums(new int[]{0,1,2,3,4,5}) == 6;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of the three lowest positive numbers from a given list of numbers.",
        "code_str_generate": "class Solution {\n    public static int sumThreeSmallestNums(int[] lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the three lowest positive numbers from a given list of numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(lst);\n        int sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.length; i++) {\n            if (lst[i] > 0) {\n                sum += lst[i];\n                count++;\n                //begin to write code\n"
    },
    {
        "task_id": 341,
        "code_str": "class Solution {\n    public static Integer[] setToTuple(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        Arrays.sort(t);\n        return t;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert Arrays.equals(solution.setToTuple(new TreeSet<>(Arrays.asList(1, 2, 3, 4, 5))), new Integer[]{1, 2, 3, 4, 5});\n        assert Arrays.equals(solution.setToTuple(new TreeSet<>(Arrays.asList(6, 7, 8, 9, 10, 11))), new Integer[]{6, 7, 8, 9, 10, 11});\n        assert Arrays.equals(solution.setToTuple(new TreeSet<>(Arrays.asList(12, 13, 14, 15, 16))), new Integer[]{12, 13, 14, 15, 16});\n    }\n}\n",
        "prompt": "Write a function to convert the given set into ordered tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Integer[] setToTuple(Set<Integer> s) {\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        //begin to write code\n",
        "java_prompt": "Write a function to convert the given set into ordered tuples.",
        "code_str_generate": "class Solution {\n    public static Integer[] setToTuple(Set<Integer> s) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given set into ordered tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Integer[] t = new Integer[s.size()];\n        s.toArray(t);\n        //begin to write code\n"
    },
    {
        "task_id": 342,
        "code_str": "class Node implements Comparable<Node> {\n    int value;\n    int listNum;\n    int index;\n\n    public Node(int value, int listNum, int index) {\n        this.value = value;\n        this.listNum = listNum;\n        this.index = index;\n    }\n\n    @Override\n    public int compareTo(Node other) {\n        return Integer.compare(this.value, other.value);\n    }\n}\n\nclass Solution {\n    public static int[] findMinimumRange(int[][] list) {\n        int high = Integer.MIN_VALUE;\n        int[] p = new int[]{0, Integer.MAX_VALUE};\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        for (int i = 0; i < list.length; i++) {\n            pq.offer(new Node(list[i][0], i, 0));\n            high = Math.max(high, list[i][0]);\n        }\n        while (true) {\n            Node top = pq.poll();\n            int low = top.value;\n            int i = top.listNum;\n            int j = top.index;\n            if (high - low < p[1] - p[0]) {\n                p = new int[]{low, high};\n            }\n            if (j == list[i].length - 1) {\n                return p;\n            }\n            pq.offer(new Node(list[i][j + 1], i, j + 1));\n            high = Math.max(high, list[i][j + 1]);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assertArrayEquals(new int[]{4, 6}, Solution.findMinimumRange(new int[][]{{3, 6, 8, 10, 15}, {1, 5, 12}, {4, 8, 15, 16}, {2, 6}}));\n        assertArrayEquals(new int[]{4, 7}, Solution.findMinimumRange(new int[][]{{2, 3, 4, 8, 10, 15}, {1, 5, 12}, {7, 8, 15, 16}, {3, 6}}));\n        assertArrayEquals(new int[]{5, 7}, Solution.findMinimumRange(new int[][]{{4, 7, 9, 11, 16}, {2, 6, 13}, {5, 9, 16, 17}, {3, 7}}));\n    }\n\n    private static void assertArrayEquals(int[] expected, int[] actual) {\n        if (expected.length != actual.length) {\n            throw new AssertionError(\"Arrays are not the same length\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != actual[i]) {\n                throw new AssertionError(\"Arrays differ at index \" + i);\n            }\n        }\n    }\n}\n",
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "is_deleted": 1,
        "code_str_deleted": "class Node implements Comparable<Node> {\nclass Solution {\n    int value;\n    int listNum;\n    int index;\n    public Node(int value, int listNum, int index) {\n        this.value = value;\n        this.listNum = listNum;\n        this.index = index;\n    }\n    @Override\n    public int compareTo(Node other) {\n        return Integer.compare(this.value, other.value);\n    }\n}\n    public static int[] findMinimumRange(int[][] list) {\n        int high = Integer.MIN_VALUE;\n        int[] p = new int[]{0, Integer.MAX_VALUE};\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        for (int i = 0; i < list.length; i++) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
        "code_str_generate": "class Node implements Comparable<Node> {\nclass Solution {\n    int value;\n    int listNum;\n    int index;\n    public Node(int value, int listNum, int index) {\n        this.value = value;\n        this.listNum = listNum;\n        this.index = index;\n    }\n    @Override\n    public int compareTo(Node other) {\n        return Integer.compare(this.value, other.value);\n    }\n}\n    public static int[] findMinimumRange(int[][] list) {\n\n        /*\n        progame language:java\n        description:Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int high = Integer.MIN_VALUE;\n        int[] p = new int[]{0, Integer.MAX_VALUE};\n        PriorityQueue<Node> pq = new PriorityQueue<>();\n        for (int i = 0; i < list.length; i++) {\n        //begin to write code\n"
    },
    {
        "task_id": 343,
        "code_str": "class Solution {\n    public static int[] digLet(String s) {\n        int d = 0, l = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                d++;\n            } else if (Character.isLetter(c)) {\n                l++;\n            }\n        }\n        return new int[]{l, d};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.digLet(\"python\"), new int[]{6,0});\n        assert java.util.Arrays.equals(Solution.digLet(\"program\"), new int[]{7,0});\n        assert java.util.Arrays.equals(Solution.digLet(\"python3.0\"), new int[]{6,2});\n    }\n}\n",
        "prompt": "Write a function to calculate the number of digits and letters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] digLet(String s) {\n        int d = 0, l = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                d++;\n            } else if (Character.isLetter(c)) {\n            //begin to write code\n",
        "java_prompt": "Write a function to calculate the number of digits and letters in a string.",
        "code_str_generate": "class Solution {\n    public static int[] digLet(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the number of digits and letters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int d = 0, l = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n                d++;\n            } else if (Character.isLetter(c)) {\n            //begin to write code\n"
    },
    {
        "task_id": 344,
        "code_str": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Odd_Squares(5,100) == 8;\n        assert Solution.count_Odd_Squares(8,65) == 6;\n        assert Solution.count_Odd_Squares(2,5) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find number of elements with odd factors in a given range.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find number of elements with odd factors in a given range.",
        "code_str_generate": "class Solution {\n    public static int count_Odd_Squares(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find number of elements with odd factors in a given range.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return (int)Math.sqrt(m) - (int)Math.sqrt(n-1);\n        //begin to write code\n"
    },
    {
        "task_id": 345,
        "code_str": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = new ArrayList<>(Arrays.asList(1, 1, 3, 4, 4, 5, 6, 7));\n        List<Integer> result1 = new ArrayList<>(Arrays.asList(0, 2, 1, 0, 1, 1, 1));\n        assert solution.diffConsecutiveNums(test1).equals(result1);\n\n        List<Integer> test2 = new ArrayList<>(Arrays.asList(4, 5, 8, 9, 6, 10));\n        List<Integer> result2 = new ArrayList<>(Arrays.asList(1, 3, 1, -3, 4));\n        assert solution.diffConsecutiveNums(test2).equals(result2);\n\n        List<Integer> test3 = new ArrayList<>(Arrays.asList(0, 1, 2, 3, 4, 4, 4, 4, 5, 7));\n        List<Integer> result3 = new ArrayList<>(Arrays.asList(1, 1, 1, 1, 0, 0, 0, 1, 2));\n        assert solution.diffConsecutiveNums(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n",
        "java_prompt": "Write a function to find the difference between two consecutive numbers in a given list.",
        "code_str_generate": "class Solution {\n    public List<Integer> diffConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the difference between two consecutive numbers in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 1; i < nums.size(); i++) {\n            result.add(nums.get(i) - nums.get(i - 1));\n            //begin to write code\n"
    },
    {
        "task_id": 346,
        "code_str": "class Solution {\n    public int zigzag(int n, int k) {\n        if (n == 0 && k == 0) {\n            return 1;\n        }\n        if (k == 0) {\n            return 0;\n        }\n        return zigzag(n, k - 1) + zigzag(n - 1, n - k);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.zigzag(4, 3) == 5;\n        assert solution.zigzag(4, 2) == 4;\n        assert solution.zigzag(3, 1) == 1;\n    }\n}\n",
        "prompt": "Write a function to find entringer number e(n, k).",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int zigzag(int n, int k) {\n        if (n == 0 && k == 0) {\n            return 1;\n        }\n        if (k == 0) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find entringer number e(n, k).",
        "code_str_generate": "class Solution {\n    public int zigzag(int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find entringer number e(n, k).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0 && k == 0) {\n            return 1;\n        }\n        if (k == 0) {\n        //begin to write code\n"
    },
    {
        "task_id": 347,
        "code_str": "class Solution {\n    public static int count_Squares(int m, int n) {\n        if (n < m) {\n            int temp = m;\n            m = n;\n            n = temp;\n        }\n        return n * (n + 1) * (3 * m - n + 1) / 6;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Squares(4,3) == 20;\n        assert Solution.count_Squares(1,2) == 2;\n        assert Solution.count_Squares(2,2) == 5;\n    }\n}\n",
        "prompt": "Write a python function to count the number of squares in a rectangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Squares(int m, int n) {\n        if (n < m) {\n            int temp = m;\n            m = n;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the number of squares in a rectangle.",
        "code_str_generate": "class Solution {\n    public static int count_Squares(int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of squares in a rectangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n < m) {\n            int temp = m;\n            m = n;\n            //begin to write code\n"
    },
    {
        "task_id": 348,
        "code_str": "class Solution {\n    public static long binCoff(int n, int r) {\n        long val = 1;\n        if (r > (n - r)) {\n            r = n - r;\n        }\n        for (int i = 0; i < r; i++) {\n            val *= (n - i);\n            val /= (i + 1);\n        }\n        return val;\n    }\n\n    public static long findWays(int M) {\n        int n = M / 2;\n        long a = binCoff(2 * n, n);\n        long b = a / (n + 1);\n        return b;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.findWays(4) == 2;\n        assert Solution.findWays(6) == 5;\n        assert Solution.findWays(8) == 14;\n    }\n}\n",
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static long binCoff(int n, int r) {\n        long val = 1;\n        if (r > (n - r)) {\n            r = n - r;\n        }\n        for (int i = 0; i < r; i++) {\n            val *= (n - i);\n            val /= (i + 1);\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
        "code_str_generate": "class Solution {\n    public static long binCoff(int n, int r) {\n        long val = 1;\n        if (r > (n - r)) {\n            r = n - r;\n        }\n        for (int i = 0; i < r; i++) {\n            val *= (n - i);\n            val /= (i + 1);\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 349,
        "code_str": "class Solution {\n    public static String check(String string) {\n        Set<Character> p = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            p.add(c);\n        }\n        Set<Character> s = new HashSet<>();\n        s.add('0');\n        s.add('1');\n        if (s.equals(p) || p.equals(new HashSet<Character>() {{ \nadd('0'); }}) || p.equals(new HashSet<Character>() {{ \nadd('1'); }})) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.check(\"01010101010\").equals(\"Yes\");\n        assert Solution.check(\"name0\").equals(\"No\");\n        assert Solution.check(\"101\").equals(\"Yes\");\n    }\n}\n",
        "prompt": "Write a python function to check whether the given string is a binary string or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String check(String string) {\n        Set<Character> p = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            p.add(c);\n        }\n        Set<Character> s = new HashSet<>();\n        s.add('0');\n        s.add('1');\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given string is a binary string or not.",
        "code_str_generate": "class Solution {\n    public static String check(String string) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given string is a binary string or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Character> p = new HashSet<>();\n        for (char c : string.toCharArray()) {\n            p.add(c);\n        }\n        Set<Character> s = new HashSet<>();\n        s.add('0');\n        s.add('1');\n        //begin to write code\n"
    },
    {
        "task_id": 350,
        "code_str": "class Solution {\n    public int minimumLength(String s) {\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        for (int i = 0; i < 26; i++) {\n            if (arr[i] > maxOcc) {\n                maxOcc = arr[i];\n            }\n        }\n        return n - maxOcc;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.minimumLength(\"mnm\") == 1;\n        assert solution.minimumLength(\"abcda\") == 3;\n        assert solution.minimumLength(\"abcb\") == 2;\n    }\n}\n",
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int minimumLength(String s) {\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to minimize the length of the string by removing occurrence of only one character.",
        "code_str_generate": "class Solution {\n    public int minimumLength(String s) {\n\n        /*\n        progame language:java\n        description:Write a java function to minimize the length of the string by removing occurrence of only one character.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxOcc = 0;\n        int n = s.length();\n        int[] arr = new int[26];\n        for (int i = 0; i < n; i++) {\n            arr[s.charAt(i) - 'a'] += 1;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 351,
        "code_str": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (count_map.get(arr[i]) == k) {\n                return arr[i];\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.first_Element(new int[]{0,1,2,3,4,5},6,1) == 0;\n        assert solution.first_Element(new int[]{1,2,1,3,4},5,2) == 1;\n        assert solution.first_Element(new int[]{2,3,4,3,5,7,1,2,3,5},10,2) == 2;\n    }\n}\n",
        "prompt": "Write a python function to find the first element occurring k times in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first element occurring k times in a given array.",
        "code_str_generate": "class Solution {\n    public int first_Element(int arr[], int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first element occurring k times in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        HashMap<Integer, Integer> count_map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < n; i++) {\n            if (count_map.containsKey(arr[i])) {\n                count_map.put(arr[i], count_map.get(arr[i]) + 1);\n            } else {\n                count_map.put(arr[i], 1);\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 352,
        "code_str": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert !Solution.uniqueCharacters(\"aba\");\n        assert Solution.uniqueCharacters(\"abc\");\n        assert !Solution.uniqueCharacters(\"abab\");\n    }\n}\n",
        "prompt": "Write a python function to check whether all the characters in a given string are unique.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                    //begin to write code\n",
        "java_prompt": "Write a java function to check whether all the characters in a given string are unique.",
        "code_str_generate": "class Solution {\n    public static boolean uniqueCharacters(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether all the characters in a given string are unique.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int i = 0; i < str.length(); i++) {\n            for (int j = i + 1; j < str.length(); j++) {\n                if (str.charAt(i) == str.charAt(j)) {\n                    return false;\n                    //begin to write code\n"
    },
    {
        "task_id": 353,
        "code_str": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n        }\n        return list1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        ArrayList<ArrayList<Integer>> list1 = new ArrayList<ArrayList<Integer>>();\n        list1.add(new ArrayList<Integer>(Arrays.asList(1, 2, 3)));\n        list1.add(new ArrayList<Integer>(Arrays.asList(2, 4, 5)));\n        list1.add(new ArrayList<Integer>(Arrays.asList(1, 1, 1)));\n        assert Solution.removeColumn(list1, 0).equals(Arrays.asList(Arrays.asList(2, 3), Arrays.asList(4, 5), Arrays.asList(1, 1)));\n\n        ArrayList<ArrayList<Integer>> list2 = new ArrayList<ArrayList<Integer>>();\n        list2.add(new ArrayList<Integer>(Arrays.asList(1, 2, 3)));\n        list2.add(new ArrayList<Integer>(Arrays.asList(-2, 4, -5)));\n        list2.add(new ArrayList<Integer>(Arrays.asList(1, -1, 1)));\n        assert Solution.removeColumn(list2, 2).equals(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(-2, 4), Arrays.asList(1, -1)));\n\n        ArrayList<ArrayList<Integer>> list3 = new ArrayList<ArrayList<Integer>>();\n        list3.add(new ArrayList<Integer>(Arrays.asList(1, 3)));\n        list3.add(new ArrayList<Integer>(Arrays.asList(5, 7)));\n        list3.add(new ArrayList<Integer>(Arrays.asList(1, 3)));\n        list3.add(new ArrayList<Integer>(Arrays.asList(13, 15, 17)));\n        list3.add(new ArrayList<Integer>(Arrays.asList(5, 7)));\n        list3.add(new ArrayList<Integer>(Arrays.asList(9, 11)));\n        assert Solution.removeColumn(list3, 0).equals(Arrays.asList(Arrays.asList(3), Arrays.asList(7), Arrays.asList(3), Arrays.asList(15, 17), Arrays.asList(7), Arrays.asList(11)));\n    }\n}\n",
        "prompt": "Write a function to remove a specified column from a given nested list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n",
        "java_prompt": "Write a function to remove a specified column from a given nested list.",
        "code_str_generate": "class Solution {\n    public static ArrayList<ArrayList<Integer>> removeColumn(ArrayList<ArrayList<Integer>> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to remove a specified column from a given nested list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (ArrayList<Integer> i : list1) {\n            i.remove(n);\n            //begin to write code\n"
    },
    {
        "task_id": 354,
        "code_str": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        return tn;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.tn_ap(1,5,2)==9;\n        assert Solution.tn_ap(2,6,4)==22;\n        assert Solution.tn_ap(1,4,5)==16;\n    }\n}\n",
        "prompt": "Write a function to find t-nth term of arithemetic progression.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n        int tn = a + (n - 1) * d;\n        //begin to write code\n",
        "java_prompt": "Write a function to find t-nth term of arithemetic progression.",
        "code_str_generate": "class Solution {\n    public static int tn_ap(int a, int n, int d) {\n\n        /*\n        progame language:java\n        description:Write a function to find t-nth term of arithemetic progression.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int tn = a + (n - 1) * d;\n        //begin to write code\n"
    },
    {
        "task_id": 355,
        "code_str": "class Solution {\n    public static int count_Rectangles(int radius) {\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                if (diagnalLengthSquare <= diameterSquare) {\n                    rectangles += 1;\n                }\n            }\n        }\n        return rectangles;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Rectangles(2) == 8;\n        assert Solution.count_Rectangles(1) == 1;\n        assert Solution.count_Rectangles(0) == 0;\n    }\n}\n",
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Rectangles(int radius) {\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                //begin to write code\n",
        "java_prompt": "Write a java function to count the number of rectangles in a circle of radius r.",
        "code_str_generate": "class Solution {\n    public static int count_Rectangles(int radius) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of rectangles in a circle of radius r.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int rectangles = 0;\n        int diameter = 2 * radius;\n        int diameterSquare = diameter * diameter;\n        for (int a = 1; a < 2 * radius; a++) {\n            for (int b = 1; b < 2 * radius; b++) {\n                int diagnalLengthSquare = (a * a + b * b);\n                //begin to write code\n"
    },
    {
        "task_id": 356,
        "code_str": "class Solution {\n    public static int find_angle(int a, int b) {\n        int c = 180 - (a + b);\n        return c;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_angle(47,89)==44;\n        assert Solution.find_angle(45,95)==40;\n        assert Solution.find_angle(50,40)==90;\n    }\n}\n",
        "prompt": "Write a function to find the third angle of a triangle using two angles.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_angle(int a, int b) {\n        int c = 180 - (a + b);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the third angle of a triangle using two angles.",
        "code_str_generate": "class Solution {\n    public static int find_angle(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to find the third angle of a triangle using two angles.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int c = 180 - (a + b);\n        //begin to write code\n"
    },
    {
        "task_id": 357,
        "code_str": "class Solution {\n    public static int findMax(List<List<Integer>> testList) {\n        int res = Integer.MIN_VALUE;\n        for (List<Integer> i : testList) {\n            for (Integer j : i) {\n                if (j > res) {\n                    res = j;\n                }\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> testList1 = new ArrayList<>();\n        testList1.add(new ArrayList<Integer>(){{\nadd(2); add(4);}});\n        testList1.add(new ArrayList<Integer>(){{\nadd(6); add(7);}});\n        testList1.add(new ArrayList<Integer>(){{\nadd(5); add(1);}});\n        testList1.add(new ArrayList<Integer>(){{\nadd(6); add(10);}});\n        testList1.add(new ArrayList<Integer>(){{\nadd(8); add(7);}});\n        assert solution.findMax(testList1) == 10;\n\n        List<List<Integer>> testList2 = new ArrayList<>();\n        testList2.add(new ArrayList<Integer>(){{\nadd(3); add(5);}});\n        testList2.add(new ArrayList<Integer>(){{\nadd(7); add(8);}});\n        testList2.add(new ArrayList<Integer>(){{\nadd(6); add(2);}});\n        testList2.add(new ArrayList<Integer>(){{\nadd(7); add(11);}});\n        testList2.add(new ArrayList<Integer>(){{\nadd(9); add(8);}});\n        assert solution.findMax(testList2) == 11;\n\n        List<List<Integer>> testList3 = new ArrayList<>();\n        testList3.add(new ArrayList<Integer>(){{\nadd(4); add(6);}});\n        testList3.add(new ArrayList<Integer>(){{\nadd(8); add(9);}});\n        testList3.add(new ArrayList<Integer>(){{\nadd(7); add(3);}});\n        testList3.add(new ArrayList<Integer>(){{\nadd(8); add(12);}});\n        testList3.add(new ArrayList<Integer>(){{\nadd(10); add(9);}});\n        assert solution.findMax(testList3) == 12;\n    }\n}\n",
        "prompt": "Write a function to find the maximum element of all the given tuple records.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int findMax(List<List<Integer>> testList) {\n        int res = Integer.MIN_VALUE;\n        for (List<Integer> i : testList) {\n            for (Integer j : i) {\n                if (j > res) {\n                    res = j;\n                    //begin to write code\n",
        "java_prompt": "Write a function to find the maximum element of all the given tuple records.",
        "code_str_generate": "class Solution {\n    public static int findMax(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum element of all the given tuple records.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = Integer.MIN_VALUE;\n        for (List<Integer> i : testList) {\n            for (Integer j : i) {\n                if (j > res) {\n                    res = j;\n                    //begin to write code\n"
    },
    {
        "task_id": 358,
        "code_str": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> nums1 = new ArrayList<>();\n        List<Integer> nums2 = new ArrayList<>();\n\n        nums1.add(4);\n        nums1.add(5);\n        nums1.add(6);\n        nums2.add(1);\n        nums2.add(2);\n        nums2.add(3);\n        assert solution.moddivList(nums1, nums2).equals(Arrays.asList(0, 1, 0));\n\n        nums1.clear();\n        nums2.clear();\n        nums1.add(3);\n        nums1.add(2);\n        nums2.add(1);\n        nums2.add(4);\n        assert solution.moddivList(nums1, nums2).equals(Arrays.asList(0, 2));\n\n        nums1.clear();\n        nums2.clear();\n        nums1.add(90);\n        nums1.add(120);\n        nums2.add(50);\n        nums2.add(70);\n        assert solution.moddivList(nums1, nums2).equals(Arrays.asList(40, 50));\n    }\n}\n",
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n",
        "java_prompt": "Write a function to find modulo division of two lists using map and lambda function.",
        "code_str_generate": "class Solution {\n    public List<Integer> moddivList(List<Integer> nums1, List<Integer> nums2) {\n\n        /*\n        progame language:java\n        description:Write a function to find modulo division of two lists using map and lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums1.size(); i++) {\n            result.add(nums1.get(i) % nums2.get(i));\n            //begin to write code\n"
    },
    {
        "task_id": 359,
        "code_str": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n            return (\"No\");\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.Check_Solution(1,3,2).equals(\"Yes\");\n        assert Solution.Check_Solution(1,2,3).equals(\"No\");\n        assert Solution.Check_Solution(1,-5,6).equals(\"No\");\n    }\n}\n",
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether one root of the quadratic equation is twice of the other or not.",
        "code_str_generate": "class Solution {\n    public static String Check_Solution(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether one root of the quadratic equation is twice of the other or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (2 * b * b == 9 * a * c) {\n            return (\"Yes\");\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 360,
        "code_str": "class Solution {\n    public static int getCarol(int n) {\n        int result = (int)Math.pow(2, n) - 1;\n        return result * result - 2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.getCarol(2) == 7;\n        assert Solution.getCarol(4) == 223;\n        assert Solution.getCarol(5) == 959;\n    }\n}\n",
        "prompt": "Write a function to find the n\u2019th carol number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int getCarol(int n) {\n        int result = (int)Math.pow(2, n) - 1;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the n\u2019th carol number.",
        "code_str_generate": "class Solution {\n    public static int getCarol(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n\u2019th carol number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result = (int)Math.pow(2, n) - 1;\n        //begin to write code\n"
    },
    {
        "task_id": 361,
        "code_str": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n            }\n        }\n        return removeEmpty;\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Object> list1 = new ArrayList<>();\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(\"Red\");\n        list1.add(\"Green\");\n        List<Integer> sublist = new ArrayList<>();\n        sublist.add(1);\n        sublist.add(2);\n        list1.add(sublist);\n        list1.add(\"Blue\");\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        assert solution.removeEmpty(list1).equals(List.of(\"Red\", \"Green\", sublist, \"Blue\"));\n\n        list1.clear();\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(\"Green\");\n        sublist = new ArrayList<>();\n        sublist.add(1);\n        sublist.add(2);\n        list1.add(sublist);\n        list1.add(\"Blue\");\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        assert solution.removeEmpty(list1).equals(List.of(\"Green\", sublist, \"Blue\"));\n\n        list1.clear();\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(\"Python\");\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(\"programming\");\n        list1.add(\"language\");\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        list1.add(new ArrayList<>());\n        assert solution.removeEmpty(list1).equals(List.of(\"Python\", \"programming\", \"language\"));\n    }\n}\n",
        "prompt": "Write a function to remove empty lists from a given list of lists.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove empty lists from a given list of lists.",
        "code_str_generate": "class Solution {\n    public static List<Object> removeEmpty(List<Object> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove empty lists from a given list of lists.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> removeEmpty = new ArrayList<>();\n        for (Object obj : list1) {\n            if (!(obj instanceof List && ((List<?>) obj).isEmpty())) {\n                removeEmpty.add(obj);\n                //begin to write code\n"
    },
    {
        "task_id": 362,
        "code_str": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n            if (entry.getValue() > maxVal) {\n                maxVal = entry.getValue();\n                result = entry.getKey();\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxOccurrences(new int[]{1,2,3,1,2,3,12,4,2}) == 2;\n        assert solution.maxOccurrences(new int[]{1,2,6,7,0,1,0,1,0}) == 0;\n        assert solution.maxOccurrences(new int[]{1,2,3,1,2,4,1}) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxOccurrences(int[] nums) {\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the item with maximum occurrences in a given list.",
        "code_str_generate": "class Solution {\n    public int maxOccurrences(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the item with maximum occurrences in a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Integer, Integer> countMap = new HashMap<>();\n        for (int num : nums) {\n            countMap.put(num, countMap.getOrDefault(num, 0) + 1);\n        }\n        int maxVal = 0;\n        int result = nums[0];\n        for (Map.Entry<Integer, Integer> entry : countMap.entrySet()) {\n        //begin to write code\n"
    },
    {
        "task_id": 363,
        "code_str": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n            }\n            res.add(temp);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<Integer>> test_list1 = Arrays.asList(Arrays.asList(1, 3, 4), Arrays.asList(2, 4, 6), Arrays.asList(3, 8, 1));\n        List<List<Integer>> expected1 = Arrays.asList(Arrays.asList(5, 7, 8), Arrays.asList(6, 8, 10), Arrays.asList(7, 12, 5));\n        assert solution.add_K_element(test_list1, 4).equals(expected1);\n\n        List<List<Integer>> test_list2 = Arrays.asList(Arrays.asList(1, 2, 3), Arrays.asList(4, 5, 6), Arrays.asList(7, 8, 9));\n        List<List<Integer>> expected2 = Arrays.asList(Arrays.asList(9, 10, 11), Arrays.asList(12, 13, 14), Arrays.asList(15, 16, 17));\n        assert solution.add_K_element(test_list2, 8).equals(expected2);\n\n        List<List<Integer>> test_list3 = Arrays.asList(Arrays.asList(11, 12, 13), Arrays.asList(14, 15, 16), Arrays.asList(17, 18, 19));\n        List<List<Integer>> expected3 = Arrays.asList(Arrays.asList(20, 21, 22), Arrays.asList(23, 24, 25), Arrays.asList(26, 27, 28));\n        assert solution.add_K_element(test_list3, 9).equals(expected3);\n    }\n}\n",
        "prompt": "Write a function to add the k elements to each element in the tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n                //begin to write code\n",
        "java_prompt": "Write a function to add the k elements to each element in the tuple.",
        "code_str_generate": "class Solution {\n    public List<List<Integer>> add_K_element(List<List<Integer>> test_list, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to add the k elements to each element in the tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> sub : test_list) {\n            List<Integer> temp = new ArrayList<>();\n            for (Integer j : sub) {\n                temp.add(j + K);\n                //begin to write code\n"
    },
    {
        "task_id": 364,
        "code_str": "class Solution {\n    public static char makeFlip(char ch) {\n        return (ch == '0') ? '1' : '0';\n    }\n\n    public static int getFlipWithStartingCharacter(String str, char expected) {\n        int flipCount = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != expected) {\n                flipCount++;\n            }\n            expected = makeFlip(expected);\n        }\n        return flipCount;\n    }\n\n    public static int minFlipToMakeStringAlternate(String str) {\n        return Math.min(getFlipWithStartingCharacter(str, '0'), getFlipWithStartingCharacter(str, '1'));\n    }\n}\n",
        "test": "\npublic class Main {\n   public static void main(String[] args) {\n        assert Solution.minFlipToMakeStringAlternate(\"0001010111\") == 2;\n        assert Solution.minFlipToMakeStringAlternate(\"001\") == 1;\n        assert Solution.minFlipToMakeStringAlternate(\"010111011\") == 2;\n    }\n}\n",
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static char makeFlip(char ch) {\n        return (ch == '0') ? '1' : '0';\n    }\n    public static int getFlipWithStartingCharacter(String str, char expected) {\n        int flipCount = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != expected) {\n                flipCount++;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
        "code_str_generate": "class Solution {\n    public static char makeFlip(char ch) {\n        return (ch == '0') ? '1' : '0';\n    }\n    public static int getFlipWithStartingCharacter(String str, char expected) {\n        int flipCount = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) != expected) {\n                flipCount++;\n                //begin to write code\n"
    },
    {
        "task_id": 365,
        "code_str": "class Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            count++;\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.count_Digit(12345) == 5;\n        assert Solution.count_Digit(11223305) == 8;\n        assert Solution.count_Digit(4123459) == 7;\n    }\n}\n",
        "prompt": "Write a python function to count the number of digits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int count_Digit(int n) {\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the number of digits of a given number.",
        "code_str_generate": "class Solution {\n    public static int count_Digit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the number of digits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        while (n != 0) {\n            n /= 10;\n            //begin to write code\n"
    },
    {
        "task_id": 366,
        "code_str": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n        }\n        return maxProduct;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.adjacentNumProduct(new int[]{1,2,3,4,5,6}) == 30;\n        assert solution.adjacentNumProduct(new int[]{1,2,3,4,5}) == 20;\n        assert solution.adjacentNumProduct(new int[]{2,3}) == 6;\n    }\n}\n",
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the largest product of the pair of adjacent elements from a given list of integers.",
        "code_str_generate": "class Solution {\n    public int adjacentNumProduct(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest product of the pair of adjacent elements from a given list of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int maxProduct = nums[0] * nums[1];\n        for (int i = 1; i < nums.length - 1; i++) {\n            maxProduct = Math.max(maxProduct, nums[i] * nums[i + 1]);\n            //begin to write code\n"
    },
    {
        "task_id": 367,
        "code_str": "class Node {\n    int data;\n    Node left, right;\n\n    Node(int item) {\n        data = item;\n        left = right = null;\n    }\n}\n\nclass Solution {\n    Node root;\n\n    int height(Node node) {\n        if (node == null)\n            return 0;\n        return 1 + Math.max(height(node.left), height(node.right));\n    }\n\n    boolean isTreeBalanced(Node node) {\n        if (node == null)\n            return true;\n        int lh = height(node.left);\n        int rh = height(node.right);\n        if (Math.abs(lh - rh) <= 1 && isTreeBalanced(node.left) && isTreeBalanced(node.right))\n            return true;\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution tree = new Solution();\n        tree.root = new Node(1);\n        tree.root.left = new Node(2);\n        tree.root.right = new Node(3);\n        tree.root.left.left = new Node(4);\n        tree.root.left.right = new Node(5);\n        tree.root.right.left = new Node(6);\n        tree.root.right.right = new Node(7);\n        assert tree.isTreeBalanced(tree.root) == true;\n\n        Solution tree1 = new Solution();\n        tree1.root = new Node(1);\n        tree1.root.left = new Node(2);\n        tree1.root.right = new Node(3);\n        tree1.root.left.left = new Node(4);\n        tree1.root.left.right = new Node(5);\n        assert tree1.isTreeBalanced(tree1.root) == true;\n\n        Solution tree2 = new Solution();\n        tree2.root = new Node(1);\n        tree2.root.left = new Node(2);\n        tree2.root.left.left = new Node(3);\n        assert tree2.isTreeBalanced(tree2.root) == false;\n    }\n}\n",
        "prompt": "Write a function to check if a binary tree is balanced or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Node {\nclass Solution {\n    int data;\n    Node left, right;\n    Node(int item) {\n        data = item;\n        left = right = null;\n    }\n}\n    Node root;\n    int height(Node node) {\n        if (node == null)\n            return 0;\n            //begin to write code\n",
        "java_prompt": "Write a function to check if a binary tree is balanced or not.",
        "code_str_generate": "class Node {\nclass Solution {\n    int data;\n    Node left, right;\n    Node(int item) {\n        data = item;\n        left = right = null;\n    }\n}\n    Node root;\n    int height(Node node) {\n        if (node == null)\n            return 0;\n            //begin to write code\n"
    },
    {
        "task_id": 368,
        "code_str": "class Solution {\n    public static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Object[] test_tup1 = {1, 3};\n        Object[] test_tup2 = {1, 2};\n        Object[] test_tup3 = {3, 4};\n        assert Arrays.deepEquals(solution.repeat_tuples(test_tup1, 4), new Object[]{test_tup1, test_tup1, test_tup1, test_tup1});\n        assert Arrays.deepEquals(solution.repeat_tuples(test_tup2, 3), new Object[]{test_tup2, test_tup2, test_tup2});\n        assert Arrays.deepEquals(solution.repeat_tuples(test_tup3, 5), new Object[]{test_tup3, test_tup3, test_tup3, test_tup3, test_tup3});\n    }\n}\n",
        "prompt": "Write a function to repeat the given tuple n times.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Object[] repeat_tuples(Object[] test_tup, int N) {\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n            //begin to write code\n",
        "java_prompt": "Write a function to repeat the given tuple n times.",
        "code_str_generate": "class Solution {\n    public static Object[] repeat_tuples(Object[] test_tup, int N) {\n\n        /*\n        progame language:java\n        description:Write a function to repeat the given tuple n times.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Object[] res = new Object[N];\n        for (int i = 0; i < N; i++) {\n            res[i] = test_tup;\n            //begin to write code\n"
    },
    {
        "task_id": 369,
        "code_str": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        return LSA;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.lateralsurface_cuboid(8,5,6)==156;\n        assert Solution.lateralsurface_cuboid(7,9,10)==320;\n        assert Solution.lateralsurface_cuboid(10,20,30)==1800;\n    }\n}\n",
        "prompt": "Write a function to find the lateral surface area of cuboid",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n        int LSA = 2 * h * (l + w);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the lateral surface area of cuboid",
        "code_str_generate": "class Solution {\n    public static int lateralsurface_cuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the lateral surface area of cuboid\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int LSA = 2 * h * (l + w);\n        //begin to write code\n"
    },
    {
        "task_id": 370,
        "code_str": "\nclass Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n            }\n        });\n        return price;\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        List<String[]> price1 = new ArrayList<>();\n        List<String[]> price2 = new ArrayList<>();\n        List<String[]> price3 = new ArrayList<>();\n        // add some data to price for testing\n        price1.add(new String[]{\"item1\", \"12.20\"});\n        price1.add(new String[]{\"item2\", \"15.10\"});\n        price1.add(new String[]{\"item3\", \"24.5\"});\n        \n        price2.add(new String[]{\"item1\", \"15\"});\n        price2.add(new String[]{\"item2\", \"10\"});\n        price2.add(new String[]{\"item3\", \"20\"});\n        price3.add(new String[]{\"item1\", \"5\"});\n        price3.add(new String[]{\"item2\", \"10\"});\n        price3.add(new String[]{\"item3\", \"14\"});\n\n        List<String[]> k1 = Solution.sortPriceList(price1);\n        List<String[]> k2 = Solution.sortPriceList(price2);\n        List<String[]> k3 = Solution.sortPriceList(price3);\n        List<String[]> test1 = new ArrayList<>();\n        List<String[]> test2 = new ArrayList<>();\n        List<String[]> test3 = new ArrayList<>();\n        test1.add(new String[]{\"item3\", \"24.5\"});\n        test1.add(new String[]{\"item2\", \"15.10\"});\n        test1.add(new String[]{\"item1\", \"12.20\"});\n        \n        test2.add(new String[]{\"item3\", \"20\"});\n        test2.add(new String[]{\"item1\", \"15\"});\n        test2.add(new String[]{\"item2\", \"10\"});\n        \n        test3.add(new String[]{\"item3\", \"14\"});\n        test3.add(new String[]{\"item2\", \"10\"});\n        test3.add(new String[]{\"item1\", \"5\"});\n        \n        assert deepEquals(test1, k1);\n        assert deepEquals(test2, k2);\n        assert deepEquals(test3, k3);\n\n    }\n    public static boolean deepEquals(List<String[]> list1, List<String[]> list2) {\n        if (list1.size() != list2.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < list1.size(); i++) {\n            if (!Arrays.deepEquals(list1.get(i), list2.get(i))) {\n                return false;\n            }\n        }\n\n        return true;\n}\n}",
        "prompt": "Write a function to sort a tuple by its float element.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n",
        "java_prompt": "Write a function to sort a tuple by its float element.",
        "code_str_generate": "class Solution {\n    public static List<String[]> sortPriceList(List<String[]> price) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a tuple by its float element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(price, new Comparator<String[]>() {\n            public int compare(String[] a, String[] b) {\n                return Double.compare(Double.parseDouble(b[1]), Double.parseDouble(a[1]));\n                //begin to write code\n"
    },
    {
        "task_id": 371,
        "code_str": "class Solution {\n    public int smallestMissing(int[] A, int left_element, int right_element) {\n        if (left_element > right_element) {\n            return left_element;\n        }\n        int mid = left_element + (right_element - left_element) / 2;\n        if (A[mid] == mid) {\n            return smallestMissing(A, mid + 1, right_element);\n        } else {\n            return smallestMissing(A, left_element, mid - 1);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.smallestMissing(new int[]{0, 1, 2, 3, 4, 5, 6}, 0, 6) == 7;\n        assert solution.smallestMissing(new int[]{0, 1, 2, 6, 9, 11, 15}, 0, 6) == 3;\n        assert solution.smallestMissing(new int[]{1, 2, 3, 4, 6, 9, 11, 15}, 0, 7) == 0;\n    }\n}\n",
        "prompt": "Write a function to find the smallest missing element in a sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int smallestMissing(int[] A, int left_element, int right_element) {\n        if (left_element > right_element) {\n            return left_element;\n        }\n        int mid = left_element + (right_element - left_element) / 2;\n        if (A[mid] == mid) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the smallest missing element in a sorted array.",
        "code_str_generate": "class Solution {\n    public int smallestMissing(int[] A, int left_element, int right_element) {\n\n        /*\n        progame language:java\n        description:Write a function to find the smallest missing element in a sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (left_element > right_element) {\n            return left_element;\n        }\n        int mid = left_element + (right_element - left_element) / 2;\n        if (A[mid] == mid) {\n        //begin to write code\n"
    },
    {
        "task_id": 372,
        "code_str": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            sResult[i] = pq.poll();\n        }\n        return sResult;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assertArrayEquals(new int[]{1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18}, Solution.heapAssending(new int[]{18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1}));\n        assertArrayEquals(new int[]{14, 22, 25, 25, 35, 58, 65, 75, 85}, Solution.heapAssending(new int[]{25, 35, 22, 85, 14, 65, 75, 25, 58}));\n        assertArrayEquals(new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, Solution.heapAssending(new int[]{1, 3, 5, 7, 9, 2, 4, 6, 8, 0}));\n    }\n\n    private static void assertArrayEquals(int[] expected, int[] actual) {\n        if (expected.length != actual.length) {\n            throw new AssertionError(\"Arrays are not the same length\");\n        }\n        for (int i = 0; i < expected.length; i++) {\n            if (expected[i] != actual[i]) {\n                throw new AssertionError(\"Arrays differ at index \" + i);\n            }\n        }\n    }\n}\n",
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        //begin to write code\n",
        "java_prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
        "code_str_generate": "class Solution {\n    public static int[] heapAssending(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] sResult = new int[nums.length];\n        //begin to write code\n"
    },
    {
        "task_id": 373,
        "code_str": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        return volume;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.volumeCuboid(1,2,3) == 6;\n        assert Solution.volumeCuboid(5,7,9) == 315;\n        assert Solution.volumeCuboid(10,15,21) == 3150;\n    }\n}\n",
        "prompt": "Write a function to find the volume of a cuboid.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n        int volume = l * w * h;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the volume of a cuboid.",
        "code_str_generate": "class Solution {\n    public static int volumeCuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the volume of a cuboid.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int volume = l * w * h;\n        //begin to write code\n"
    },
    {
        "task_id": 374,
        "code_str": "class Solution {\n    public List<String> permuteString(String str) {\n        if (str.length() == 0) {\n            List<String> baseCase = new ArrayList<>();\n            baseCase.add(\"\");\n            return baseCase;\n        }\n        List<String> prevList = permuteString(str.substring(1));\n        List<String> nextList = new ArrayList<>();\n        for (int i = 0; i < prevList.size(); i++) {\n            for (int j = 0; j <= str.length() - 1; j++) {\n                String newStr = prevList.get(i).substring(0, j) + str.charAt(0) + prevList.get(i).substring(j);\n                if (!nextList.contains(newStr)) {\n                    nextList.add(newStr);\n                }\n            }\n        }\n        return nextList;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> result1 = solution.permuteString(\"ab\");\n        assert result1.equals(Arrays.asList(\"ab\", \"ba\"));\n        List<String> result2 = solution.permuteString(\"abc\");\n        assert result2.equals(Arrays.asList(\"abc\", \"bac\", \"bca\", \"acb\", \"cab\", \"cba\"));\n        List<String> result3 = solution.permuteString(\"abcd\");\n        assert result3.equals(Arrays.asList(\"abcd\", \"bacd\", \"bcad\", \"bcda\", \"acbd\", \"cabd\", \"cbad\", \"cbda\", \"acdb\", \"cadb\", \"cdab\", \"cdba\", \"abdc\", \"badc\", \"bdac\", \"bdca\", \"adbc\", \"dabc\", \"dbac\", \"dbca\", \"adcb\", \"dacb\", \"dcab\", \"dcba\"));\n    }\n}\n",
        "prompt": "Write a function to print all permutations of a given string including duplicates.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<String> permuteString(String str) {\n        if (str.length() == 0) {\n            List<String> baseCase = new ArrayList<>();\n            baseCase.add(\"\");\n            return baseCase;\n        }\n        List<String> prevList = permuteString(str.substring(1));\n        List<String> nextList = new ArrayList<>();\n        for (int i = 0; i < prevList.size(); i++) {\n        //begin to write code\n",
        "java_prompt": "Write a function to print all permutations of a given string including duplicates.",
        "code_str_generate": "class Solution {\n    public List<String> permuteString(String str) {\n\n        /*\n        progame language:java\n        description:Write a function to print all permutations of a given string including duplicates.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (str.length() == 0) {\n            List<String> baseCase = new ArrayList<>();\n            baseCase.add(\"\");\n            return baseCase;\n        }\n        List<String> prevList = permuteString(str.substring(1));\n        List<String> nextList = new ArrayList<>();\n        for (int i = 0; i < prevList.size(); i++) {\n        //begin to write code\n"
    },
    {
        "task_id": 375,
        "code_str": "class Solution {\n    public static int roundNum(int n, int m) {\n        int a = (n / m) * m;\n        int b = a + m;\n        return (n - a > b - n) ? b : a;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.roundNum(4722,10)==4720;\n        assert Solution.roundNum(1111,5)==1110;\n        assert Solution.roundNum(219,2)==218;\n    }\n}\n",
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int roundNum(int n, int m) {\n        int a = (n / m) * m;\n        int b = a + m;\n        //begin to write code\n",
        "java_prompt": "Write a function to round the given number to the nearest multiple of a specific number.",
        "code_str_generate": "class Solution {\n    public static int roundNum(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a function to round the given number to the nearest multiple of a specific number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int a = (n / m) * m;\n        int b = a + m;\n        //begin to write code\n"
    },
    {
        "task_id": 376,
        "code_str": "class Solution {\n    public Object[] removeReplica(Object[] testArr) {\n        Set<Object> temp = new HashSet<>();\n        for (int i = 0; i < testArr.length; i++) {\n            if (!temp.add(testArr[i])) {\n                testArr[i] = \"MSP\";\n            }\n        }\n        return testArr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert Arrays.equals(solution.removeReplica(new Object[]{1, 1, 4, 4, 4, 5, 5, 6, 7, 7}), new Object[]{1, \"MSP\", 4, \"MSP\", \"MSP\", 5, \"MSP\", 6, 7, \"MSP\"});\n        assert Arrays.equals(solution.removeReplica(new Object[]{2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9}), new Object[]{2, 3, 4, \"MSP\", 5, 6, \"MSP\", 7, 8, 9, \"MSP\"});\n        assert Arrays.equals(solution.removeReplica(new Object[]{2, 2, 5, 4, 5, 7, 5, 6, 7, 7}), new Object[]{2, \"MSP\", 5, 4, \"MSP\", 7, \"MSP\", 6, \"MSP\", \"MSP\"});\n    }\n}\n",
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public Object[] removeReplica(Object[] testArr) {\n        Set<Object> temp = new HashSet<>();\n        for (int i = 0; i < testArr.length; i++) {\n            if (!temp.add(testArr[i])) {\n                testArr[i] = \"MSP\";\n                //begin to write code\n",
        "java_prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
        "code_str_generate": "class Solution {\n    public Object[] removeReplica(Object[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Object> temp = new HashSet<>();\n        for (int i = 0; i < testArr.length; i++) {\n            if (!temp.add(testArr[i])) {\n                testArr[i] = \"MSP\";\n                //begin to write code\n"
    },
    {
        "task_id": 377,
        "code_str": "class Solution {\n    public String remove_Char(String s, char c) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) != c) {\n                sb.append(s.charAt(i));\n            }\n        }\n        return sb.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove_Char(\"aba\",'a').equals(\"b\");\n        assert solution.remove_Char(\"toggle\",'g').equals(\"tole\");\n        assert solution.remove_Char(\"aabbc\",'b').equals(\"aac\");\n    }\n}\n",
        "prompt": "Write a python function to remove all occurrences of a character in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String remove_Char(String s, char c) {\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) != c) {\n                sb.append(s.charAt(i));\n                //begin to write code\n",
        "java_prompt": "Write a java function to remove all occurrences of a character in a given string.",
        "code_str_generate": "class Solution {\n    public String remove_Char(String s, char c) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove all occurrences of a character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) != c) {\n                sb.append(s.charAt(i));\n                //begin to write code\n"
    },
    {
        "task_id": 378,
        "code_str": "class Solution {\n    public static int[] move_first(int[] test_list) {\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        System.arraycopy(test_list, 0, new_list, 1, test_list.length - 1);\n        return new_list;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.move_first(new int[]{1,2,3,4}), new int[]{4,1,2,3});\n        assert Arrays.equals(Solution.move_first(new int[]{0,1,2,3}), new int[]{3,0,1,2});\n        assert Arrays.equals(Solution.move_first(new int[]{9,8,7,1}), new int[]{1,9,8,7});\n    }\n}\n",
        "prompt": "Write a python function to shift last element to first position in the given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] move_first(int[] test_list) {\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        //begin to write code\n",
        "java_prompt": "Write a java function to shift last element to first position in the given list.",
        "code_str_generate": "class Solution {\n    public static int[] move_first(int[] test_list) {\n\n        /*\n        progame language:java\n        description:Write a java function to shift last element to first position in the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] new_list = new int[test_list.length];\n        new_list[0] = test_list[test_list.length - 1];\n        //begin to write code\n"
    },
    {
        "task_id": 379,
        "code_str": "class Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        return SA;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.surfacearea_cuboid(1,2,3) == 22;\n        assert Solution.surfacearea_cuboid(5,7,9) == 286;\n        assert Solution.surfacearea_cuboid(10,15,21) == 1350;\n    }\n}\n",
        "prompt": "Write a function to find the surface area of a cuboid.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n        int SA = 2 * (l * w + l * h + w * h);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the surface area of a cuboid.",
        "code_str_generate": "class Solution {\n    public static int surfacearea_cuboid(int l, int w, int h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cuboid.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int SA = 2 * (l * w + l * h + w * h);\n        //begin to write code\n"
    },
    {
        "task_id": 380,
        "code_str": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n            }\n        }\n        return multiList;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        int[][] result1 = Solution.multiList(3, 4);\n        int[][] expected1 = {{0, 0, 0, 0}, {0, 1, 2, 3}, {0, 2, 4, 6}};\n        assert Arrays.deepEquals(result1, expected1);\n\n        int[][] result2 = Solution.multiList(5, 7);\n        int[][] expected2 = {{0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6}, {0, 2, 4, 6, 8, 10, 12}, {0, 3, 6, 9, 12, 15, 18}, {0, 4, 8, 12, 16, 20, 24}};\n        assert Arrays.deepEquals(result2, expected2);\n\n        int[][] result3 = Solution.multiList(10, 15);\n        int[][] expected3 = {{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14}, {0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28}, {0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42}, {0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56}, {0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70}, {0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84}, {0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98}, {0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112}, {0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126}};\n        assert Arrays.deepEquals(result3, expected3);\n    }\n}\n",
        "prompt": "Write a function to generate a two-dimensional array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n",
        "java_prompt": "Write a function to generate a two-dimensional array.",
        "code_str_generate": "class Solution {\n    public static int[][] multiList(int rownum, int colnum) {\n\n        /*\n        progame language:java\n        description:Write a function to generate a two-dimensional array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] multiList = new int[rownum][colnum];\n        for (int row = 0; row < rownum; row++) {\n            for (int col = 0; col < colnum; col++) {\n                multiList[row][col] = row * col;\n                //begin to write code\n"
    },
    {
        "task_id": 381,
        "code_str": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n            }\n        });\n        return list_data;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Object>> list_data = new ArrayList<>();\n        list_data.add(Arrays.asList(\"Greyson Fulton\", 98, 99));\n        list_data.add(Arrays.asList(\"Brady Kent\", 97, 96));\n        list_data.add(Arrays.asList(\"Wyatt Knott\", 91, 94));\n        list_data.add(Arrays.asList(\"Beau Turnbull\", 94, 98));\n        \n        List<List<Object>> result = solution.index_on_inner_list(list_data, 0);\n        assert result.equals(Arrays.asList(Arrays.asList(\"Beau Turnbull\", 94, 98), Arrays.asList(\"Brady Kent\", 97, 96), Arrays.asList(\"Greyson Fulton\", 98, 99), Arrays.asList(\"Wyatt Knott\", 91, 94)));\n        \n        result = solution.index_on_inner_list(list_data, 1);\n        assert result.equals(Arrays.asList(Arrays.asList(\"Wyatt Knott\", 91, 94), Arrays.asList(\"Beau Turnbull\", 94, 98), Arrays.asList(\"Brady Kent\", 97, 96), Arrays.asList(\"Greyson Fulton\", 98, 99)));\n        \n        result = solution.index_on_inner_list(list_data, 2);\n        assert result.equals(Arrays.asList(Arrays.asList(\"Wyatt Knott\", 91, 94), Arrays.asList(\"Brady Kent\", 97, 96), Arrays.asList(\"Beau Turnbull\", 94, 98), Arrays.asList(\"Greyson Fulton\", 98, 99)));\n    }\n}\n",
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, int index_no) {\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n",
        "java_prompt": "Write a function to sort a list of lists by a given index of the inner list.",
        "code_str_generate": "class Solution {\n    public static List<List<Object>> index_on_inner_list(List<List<Object>> list_data, int index_no) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of lists by a given index of the inner list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Collections.sort(list_data, new Comparator<List<Object>>() {\n            @Override\n            public int compare(List<Object> o1, List<Object> o2) {\n                return ((Comparable) o1.get(index_no)).compareTo(o2.get(index_no));\n                //begin to write code\n"
    },
    {
        "task_id": 382,
        "code_str": "class Solution {\n    public int findRotationCount(int[] A) {\n        int left = 0, right = A.length - 1;\n        while (left <= right) {\n            if (A[left] <= A[right]) {\n                return left;\n            }\n            int mid = (left + right) / 2;\n            int next = (mid + 1) % A.length;\n            int prev = (mid - 1 + A.length) % A.length;\n            if (A[mid] <= A[next] && A[mid] <= A[prev]) {\n                return mid;\n            } else if (A[mid] <= A[right]) {\n                right = mid - 1;\n            } else if (A[mid] >= A[left]) {\n                left = mid + 1;\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findRotationCount(new int[]{8, 9, 10, 1, 2, 3, 4, 5, 6, 7}) == 3;\n        assert solution.findRotationCount(new int[]{8, 9, 10, 2, 5, 6}) == 3;\n        assert solution.findRotationCount(new int[]{2, 5, 6, 8, 9, 10}) == 0;\n    }\n}\n",
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findRotationCount(int[] A) {\n        int left = 0, right = A.length - 1;\n        while (left <= right) {\n            if (A[left] <= A[right]) {\n                return left;\n            }\n            int mid = (left + right) / 2;\n            int next = (mid + 1) % A.length;\n            int prev = (mid - 1 + A.length) % A.length;\n            if (A[mid] <= A[next] && A[mid] <= A[prev]) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the number of rotations in a circularly sorted array.",
        "code_str_generate": "class Solution {\n    public int findRotationCount(int[] A) {\n\n        /*\n        progame language:java\n        description:Write a function to find the number of rotations in a circularly sorted array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int left = 0, right = A.length - 1;\n        while (left <= right) {\n            if (A[left] <= A[right]) {\n                return left;\n            }\n            int mid = (left + right) / 2;\n            int next = (mid + 1) % A.length;\n            int prev = (mid - 1 + A.length) % A.length;\n            if (A[mid] <= A[next] && A[mid] <= A[prev]) {\n            //begin to write code\n"
    },
    {
        "task_id": 383,
        "code_str": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n        int res = 0, count = 0, temp = n;\n        while(temp > 0) {\n            if (count % 2 == 0) {\n                res = res | (1 << count);\n            }\n            count = count + 1;\n            temp >>= 1;\n        }\n        return n ^ res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.evenBitToggleNumber(10) == 15;\n        assert Solution.evenBitToggleNumber(20) == 1;\n        assert Solution.evenBitToggleNumber(30) == 11;\n    }\n}\n",
        "prompt": "Write a python function to toggle all odd bits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n        int res = 0, count = 0, temp = n;\n        while(temp > 0) {\n            if (count % 2 == 0) {\n                res = res | (1 << count);\n            }\n            //begin to write code\n",
        "java_prompt": "Write a java function to toggle all odd bits of a given number.",
        "code_str_generate": "class Solution {\n    public static int evenBitToggleNumber(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to toggle all odd bits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0, count = 0, temp = n;\n        while(temp > 0) {\n            if (count % 2 == 0) {\n                res = res | (1 << count);\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 384,
        "code_str": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n            } else if (arr[i] == mn) {\n                freq++;\n            }\n        }\n        return freq;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.frequency_Of_Smallest(5, new int[]{1,2,3,4,3}) == 1;\n        assert solution.frequency_Of_Smallest(7, new int[]{3,1,2,5,6,2,3}) == 1;\n        assert solution.frequency_Of_Smallest(7, new int[]{3,3,6,3,7,4,9}) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the frequency of the smallest value in a given array.",
        "code_str_generate": "class Solution {\n    public int frequency_Of_Smallest(int n, int[] arr) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the frequency of the smallest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] < mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n"
    },
    {
        "task_id": 385,
        "code_str": "class Solution {\n    public static int get_perrin(int n) {\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        return get_perrin(n - 2) + get_perrin(n - 3);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.get_perrin(9) == 12;\n        assert Solution.get_perrin(4) == 2;\n        assert Solution.get_perrin(6) == 5;\n    }\n}\n",
        "prompt": "Write a function to find the n'th perrin number using recursion.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int get_perrin(int n) {\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 0;\n            //begin to write code\n",
        "java_prompt": "Write a function to find the n'th perrin number using recursion.",
        "code_str_generate": "class Solution {\n    public static int get_perrin(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th perrin number using recursion.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 0;\n            //begin to write code\n"
    },
    {
        "task_id": 386,
        "code_str": "class Solution {\n    public int swapCount(String s) {\n        char[] chars = s.toCharArray();\n        int count_left = 0;\n        int count_right = 0;\n        int swap = 0;\n        int imbalance = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '[') {\n                count_left++;\n                if (imbalance > 0) {\n                    swap += imbalance;\n                    imbalance--;\n                }\n            } else if (chars[i] == ']') {\n                count_right++;\n                imbalance = count_right - count_left;\n            }\n        }\n        return swap;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.swapCount(\"[]][][\") == 2;\n        assert solution.swapCount(\"[[][]]\") == 0;\n        assert solution.swapCount(\"[[][]]][\") == 1;\n    }\n}\n",
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int swapCount(String s) {\n        char[] chars = s.toCharArray();\n        int count_left = 0;\n        int count_right = 0;\n        int swap = 0;\n        int imbalance = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '[') {\n                count_left++;\n                if (imbalance > 0) {\n                //begin to write code\n",
        "java_prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
        "code_str_generate": "class Solution {\n    public int swapCount(String s) {\n\n        /*\n        progame language:java\n        description:Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        char[] chars = s.toCharArray();\n        int count_left = 0;\n        int count_right = 0;\n        int swap = 0;\n        int imbalance = 0;\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == '[') {\n                count_left++;\n                if (imbalance > 0) {\n                //begin to write code\n"
    },
    {
        "task_id": 387,
        "code_str": "class Solution {\n    public static String even_or_odd(String N) {\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n        } else {\n            return \"Odd\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.even_or_odd(\"AB3454D\").equals(\"Odd\");\n        assert Solution.even_or_odd(\"ABC\").equals(\"Even\");\n        assert Solution.even_or_odd(\"AAD\").equals(\"Odd\");\n    }\n}\n",
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String even_or_odd(String N) {\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the hexadecimal number is even or odd.",
        "code_str_generate": "class Solution {\n    public static String even_or_odd(String N) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the hexadecimal number is even or odd.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int l = N.length();\n        char lastChar = N.charAt(l-1);\n        if (lastChar == '0' || lastChar == '2' || lastChar == '4' || lastChar == '6' || lastChar == '8' || lastChar == 'A' || lastChar == 'C' || lastChar == 'E') {\n            return \"Even\";\n            //begin to write code\n"
    },
    {
        "task_id": 388,
        "code_str": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                break;\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.highest_Power_of_2(10) == 8;\n        assert Solution.highest_Power_of_2(19) == 16;\n        assert Solution.highest_Power_of_2(32) == 32;\n    }\n}\n",
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int highest_Power_of_2(int n) {\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the highest power of 2 that is less than or equal to n.",
        "code_str_generate": "class Solution {\n    public static int highest_Power_of_2(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the highest power of 2 that is less than or equal to n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int i = n; i > 0; i--) {\n            if ((i & (i - 1)) == 0) {\n                res = i;\n                //begin to write code\n"
    },
    {
        "task_id": 389,
        "code_str": "class Solution {\n    public int findLucas(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n            return 1;\n        }\n        return findLucas(n - 1) + findLucas(n - 2);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.findLucas(9) == 76;\n        assert solution.findLucas(4) == 7;\n        assert solution.findLucas(3) == 4;\n    }\n}\n",
        "prompt": "Write a function to find the n'th lucas number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int findLucas(int n) {\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the n'th lucas number.",
        "code_str_generate": "class Solution {\n    public int findLucas(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the n'th lucas number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n == 0) {\n            return 2;\n        }\n        if (n == 1) {\n        //begin to write code\n"
    },
    {
        "task_id": 390,
        "code_str": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n        }\n        return addString;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<Object> list1 = Arrays.asList(1, 2, 3, 4);\n        List<String> result1 = Solution.addString(list1, \"temp{0}\");\n        assert result1.equals(Arrays.asList(\"temp1\", \"temp2\", \"temp3\", \"temp4\"));\n\n        List<Object> list2 = Arrays.asList(\"a\", \"b\", \"c\", \"d\");\n        List<String> result2 = Solution.addString(list2, \"python{0}\");\n        assert result2.equals(Arrays.asList(\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"));\n\n        List<Object> list3 = Arrays.asList(5, 6, 7, 8);\n        List<String> result3 = Solution.addString(list3, \"string{0}\");\n        assert result3.equals(Arrays.asList(\"string5\", \"string6\", \"string7\", \"string8\"));\n    }\n}\n",
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n            //begin to write code\n",
        "java_prompt": "Write a function to insert a given string at the beginning of all items in a list.",
        "code_str_generate": "class Solution {\n    public static List<String> addString(List<Object> list, String string) {\n\n        /*\n        progame language:java\n        description:Write a function to insert a given string at the beginning of all items in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> addString = new ArrayList<>();\n        for (Object i : list) {\n            addString.add(string.replace(\"{0}\", i.toString()));\n            //begin to write code\n"
    },
    {
        "task_id": 391,
        "code_str": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            Map<String, Map<String, Integer>> outerMap = new HashMap<>();\n            outerMap.put(l1.get(i), innerMap);\n            result.add(outerMap);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> l1 = Arrays.asList(\"S001\", \"S002\", \"S003\", \"S004\");\n        List<String> l2 = Arrays.asList(\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\");\n        List<Integer> l3 = Arrays.asList(85, 98, 89, 92);\n        List<Map<String, Map<String, Integer>>> result = solution.convertListDictionary(l1, l2, l3);\n        System.out.println(result);\n\n        l1 = Arrays.asList(\"abc\",\"def\",\"ghi\",\"jkl\");\n        l2 = Arrays.asList(\"python\",\"program\",\"language\",\"programs\");\n        l3 = Arrays.asList(100,200,300,400);\n        result = solution.convertListDictionary(l1, l2, l3);\n        System.out.println(result);\n\n        l1 = Arrays.asList(\"A1\",\"A2\",\"A3\",\"A4\");\n        l2 = Arrays.asList(\"java\",\"C\",\"C++\",\"DBMS\");\n        l3 = Arrays.asList(10,20,30,40);\n        result = solution.convertListDictionary(l1, l2, l3);\n        System.out.println(result);\n    }\n}\n",
        "prompt": "Write a function to convert more than one list to nested dictionary.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            Map<String, Map<String, Integer>> outerMap = new HashMap<>();\n            //begin to write code\n",
        "java_prompt": "Write a function to convert more than one list to nested dictionary.",
        "code_str_generate": "class Solution {\n    public static List<Map<String, Map<String, Integer>>> convertListDictionary(List<String> l1, List<String> l2, List<Integer> l3) {\n\n        /*\n        progame language:java\n        description:Write a function to convert more than one list to nested dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Map<String, Map<String, Integer>>> result = new ArrayList<>();\n        for (int i = 0; i < l1.size(); i++) {\n            Map<String, Integer> innerMap = new HashMap<>();\n            innerMap.put(l2.get(i), l3.get(i));\n            Map<String, Map<String, Integer>> outerMap = new HashMap<>();\n            //begin to write code\n"
    },
    {
        "task_id": 392,
        "code_str": "class Solution {\n    public int get_max_sum(int n) {\n        int[] res = new int[n + 1];\n        res[0] = 0;\n        res[1] = 1;\n        int i = 2;\n        while (i < n + 1) {\n            res[i] = Math.max(i, (res[i / 2] + res[i / 3] + res[i / 4] + res[i / 5]));\n            i = i + 1;\n        }\n        return res[n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.get_max_sum(60) == 106;\n        assert solution.get_max_sum(10) == 12;\n        assert solution.get_max_sum(2) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int get_max_sum(int n) {\n        int[] res = new int[n + 1];\n        res[0] = 0;\n        res[1] = 1;\n        int i = 2;\n        while (i < n + 1) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
        "code_str_generate": "class Solution {\n    public int get_max_sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[n + 1];\n        res[0] = 0;\n        res[1] = 1;\n        int i = 2;\n        while (i < n + 1) {\n        //begin to write code\n"
    },
    {
        "task_id": 393,
        "code_str": "class Solution {\n    public static Object[] max_length_list(List<List<Integer>> input_list) {\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> list : input_list) {\n            if (list.size() > max_length) {\n                max_length = list.size();\n                max_list = list;\n            }\n        }\n        return new Object[]{max_length, max_list};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> test1 = Arrays.asList(Arrays.asList(0), Arrays.asList(1, 3), Arrays.asList(5, 7), Arrays.asList(9, 11), Arrays.asList(13, 15, 17));\n        Object[] result1 = solution.max_length_list(test1);\n        assert (int)result1[0] == 3 && result1[1].equals(Arrays.asList(13, 15, 17));\n\n        List<List<Integer>> test2 = Arrays.asList(Arrays.asList(1,2,3,4,5), Arrays.asList(1,2,3,4), Arrays.asList(1,2,3), Arrays.asList(1,2), Arrays.asList(1));\n        Object[] result2 = solution.max_length_list(test2);\n        assert (int)result2[0] == 5 && result2[1].equals(Arrays.asList(1,2,3,4,5));\n\n        List<List<Integer>> test3 = Arrays.asList(Arrays.asList(3,4,5), Arrays.asList(6,7,8,9), Arrays.asList(10,11,12));\n        Object[] result3 = solution.max_length_list(test3);\n        assert (int)result3[0] == 4 && result3[1].equals(Arrays.asList(6,7,8,9));\n    }\n}\n",
        "prompt": "Write a function to find the list with maximum length using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Object[] max_length_list(List<List<Integer>> input_list) {\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> list : input_list) {\n            if (list.size() > max_length) {\n                max_length = list.size();\n                //begin to write code\n",
        "java_prompt": "Write a function to find the list with maximum length using lambda function.",
        "code_str_generate": "class Solution {\n    public static Object[] max_length_list(List<List<Integer>> input_list) {\n\n        /*\n        progame language:java\n        description:Write a function to find the list with maximum length using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max_length = 0;\n        List<Integer> max_list = new ArrayList<>();\n        for (List<Integer> list : input_list) {\n            if (list.size() > max_length) {\n                max_length = list.size();\n                //begin to write code\n"
    },
    {
        "task_id": 394,
        "code_str": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                break;\n            }\n            temp.add(ele);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkDistinct(new int[]{1, 4, 5, 6, 1, 4}) == false;\n        assert Solution.checkDistinct(new int[]{1, 4, 5, 6}) == true;\n        assert Solution.checkDistinct(new int[]{2, 3, 4, 5, 6}) == true;\n    }\n}\n",
        "prompt": "Write a function to check if given tuple is distinct or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if given tuple is distinct or not.",
        "code_str_generate": "class Solution {\n    public static boolean checkDistinct(int[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to check if given tuple is distinct or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean res = true;\n        HashSet<Integer> temp = new HashSet<Integer>();\n        for (int ele : testArr) {\n            if (temp.contains(ele)) {\n                res = false;\n                //begin to write code\n"
    },
    {
        "task_id": 395,
        "code_str": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n            if (entry.getValue() == 1) {\n                return entry.getKey();\n            }\n        }\n        return null;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.firstNonRepeatingCharacter(\"abcabc\") == null;\n        assert Solution.firstNonRepeatingCharacter(\"abc\") == 'a';\n        assert Solution.firstNonRepeatingCharacter(\"ababc\") == 'c';\n    }\n}\n",
        "prompt": "Write a python function to find the first non-repeated character in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the first non-repeated character in a given string.",
        "code_str_generate": "class Solution {\n    public static Character firstNonRepeatingCharacter(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first non-repeated character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<Character, Integer> counts = new LinkedHashMap<>(str.length());\n        for (char c : str.toCharArray()) {\n            counts.put(c, counts.containsKey(c) ? counts.get(c) + 1 : 1);\n        }\n        for (Map.Entry<Character, Integer> entry : counts.entrySet()) {\n        //begin to write code\n"
    },
    {
        "task_id": 396,
        "code_str": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n        } else {\n            return \"Invalid\";\n        }\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert \"Valid\".equals(Solution.checkChar(\"abba\"));\n        assert \"Valid\".equals(Solution.checkChar(\"a\"));\n        assert \"Invalid\".equals(Solution.checkChar(\"abcd\"));\n    }\n}\n",
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String checkChar(String string) {\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n            //begin to write code\n",
        "java_prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
        "code_str_generate": "class Solution {\n    private static final Pattern pattern = Pattern.compile(\"^[a-z]$|^([a-z]).*\\\\1$\");\n    public static String checkChar(String string) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given string starts and ends with the same character or not using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Matcher matcher = pattern.matcher(string);\n        if (matcher.find()) {\n            return \"Valid\";\n            //begin to write code\n"
    },
    {
        "task_id": 397,
        "code_str": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n            if (a > c) {\n                median = a;\n            } else if (b < c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        }\n        return median;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.median_numbers(25,55,65)==55.0;\n        assert Solution.median_numbers(20,10,30)==20.0;\n        assert Solution.median_numbers(15,45,75)==45.0;\n    }\n}\n",
        "prompt": "Write a function to find the median of three specific numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the median of three specific numbers.",
        "code_str_generate": "class Solution {\n    public static double median_numbers(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of three specific numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int median;\n        if (a > b) {\n            if (a < c) {\n                median = a;\n            } else if (b > c) {\n                median = b;\n            } else {\n                median = c;\n            }\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 398,
        "code_str": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n                    if (Character.isDigit(c)) {\n                        sum += Character.getNumericValue(c);\n                    }\n                }\n            }\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumOfDigits(Arrays.asList(10,2,56)) == 14;\n        assert Solution.sumOfDigits(Arrays.asList(10,20,4,5,'b',70,'a')) == 19;\n        assert Solution.sumOfDigits(Arrays.asList(10,20,-4,5,-70)) == 19;\n    }\n}\n",
        "prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n                    if (Character.isDigit(c)) {\n                    //begin to write code\n",
        "java_prompt": "Write a function to compute the sum of digits of each number of a given list.",
        "code_str_generate": "class Solution {\n    public static int sumOfDigits(List<Object> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to compute the sum of digits of each number of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (Object num : nums) {\n            if (num instanceof Integer) {\n                String strNum = Integer.toString((Integer) num);\n                for (char c : strNum.toCharArray()) {\n                    if (Character.isDigit(c)) {\n                    //begin to write code\n"
    },
    {
        "task_id": 399,
        "code_str": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.bitwise_xor(new int[]{10, 4, 6, 9}, new int[]{5, 2, 3, 3}), new int[]{15, 6, 5, 10});\n        assert Arrays.equals(Solution.bitwise_xor(new int[]{11, 5, 7, 10}, new int[]{6, 3, 4, 4}), new int[]{13, 6, 3, 14});\n        assert Arrays.equals(Solution.bitwise_xor(new int[]{12, 6, 8, 11}, new int[]{7, 4, 5, 6}), new int[]{11, 2, 13, 13});\n    }\n}\n",
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
        "code_str_generate": "class Solution {\n    public static int[] bitwise_xor(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform the mathematical bitwise xor operation across the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] ^ test_tup2[i];\n            //begin to write code\n"
    },
    {
        "task_id": 400,
        "code_str": "class Solution {\n    public int extractFreq(int[][] testList) {\n        Set<List<Integer>> set = new HashSet<>();\n        for (int[] sub : testList) {\n            List<Integer> list = new ArrayList<>();\n            for (int num : sub) {\n                list.add(num);\n            }\n            Collections.sort(list);\n            set.add(list);\n        }\n        return set.size();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.extractFreq(new int[][]{{3, 4}, {1, 2}, {4, 3}, {5, 6}}) == 3;\n        assert solution.extractFreq(new int[][]{{4, 15}, {2, 3}, {5, 4}, {6, 7}}) == 4;\n        assert solution.extractFreq(new int[][]{{5, 16}, {2, 3}, {6, 5}, {6, 9}}) == 4;\n    }\n}\n",
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int extractFreq(int[][] testList) {\n        Set<List<Integer>> set = new HashSet<>();\n        for (int[] sub : testList) {\n            List<Integer> list = new ArrayList<>();\n            for (int num : sub) {\n                list.add(num);\n                //begin to write code\n",
        "java_prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
        "code_str_generate": "class Solution {\n    public int extractFreq(int[][] testList) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the frequency of unique tuples in the given list order irrespective.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<List<Integer>> set = new HashSet<>();\n        for (int[] sub : testList) {\n            List<Integer> list = new ArrayList<>();\n            for (int num : sub) {\n                list.add(num);\n                //begin to write code\n"
    },
    {
        "task_id": 401,
        "code_str": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        int[][] test_tup1 = {{1, 3}, {4, 5}, {2, 9}, {1, 10}};\n        int[][] test_tup2 = {{6, 7}, {3, 9}, {1, 1}, {7, 3}};\n        int[][] expected = {{7, 10}, {7, 14}, {3, 10}, {8, 13}};\n        assert Arrays.deepEquals(Solution.addNestedTuples(test_tup1, test_tup2), expected);\n\n        test_tup1 = new int[][]{{2, 4}, {5, 6}, {3, 10}, {2, 11}};\n        test_tup2 = new int[][]{{7, 8}, {4, 10}, {2, 2}, {8, 4}};\n        expected = new int[][]{{9, 12}, {9, 16}, {5, 12}, {10, 15}};\n        assert Arrays.deepEquals(Solution.addNestedTuples(test_tup1, test_tup2), expected);\n\n        test_tup1 = new int[][]{{3, 5}, {6, 7}, {4, 11}, {3, 12}};\n        test_tup2 = new int[][]{{8, 9}, {5, 11}, {3, 3}, {9, 5}};\n        expected = new int[][]{{11, 14}, {11, 18}, {7, 14}, {12, 17}};\n        assert Arrays.deepEquals(Solution.addNestedTuples(test_tup1, test_tup2), expected);\n    }\n}\n",
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n",
        "java_prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
        "code_str_generate": "class Solution {\n    public static int[][] addNestedTuples(int[][] test_tup1, int[][] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] + test_tup2[i][j];\n                //begin to write code\n"
    },
    {
        "task_id": 402,
        "code_str": "class Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n                C[j] = (C[j] + C[j-1]) % p;\n            }\n        }\n        return C[r];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.ncr_modp(10,2,13)==6;\n        assert Solution.ncr_modp(15,12,43)==25;\n        assert Solution.ncr_modp(17,9,18)==10;\n    }\n}\n",
        "prompt": "Write a function to compute the value of ncr%p.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    static int ncr_modp(int n, int r, int p) {\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n            //begin to write code\n",
        "java_prompt": "Write a function to compute the value of ncr%p.",
        "code_str_generate": "class Solution {\n    static int ncr_modp(int n, int r, int p) {\n\n        /*\n        progame language:java\n        description:Write a function to compute the value of ncr%p.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] C = new int[r+1];\n        C[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = Math.min(i, r); j > 0; j--) {\n            //begin to write code\n"
    },
    {
        "task_id": 403,
        "code_str": "class Solution {\n    public static boolean isValidURL(String url) {\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        if (url == null) {\n            return false;\n        }\n        Matcher m = p.matcher(url);\n        return m.matches();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isValidURL(\"https://www.google.com\") == true;\n        assert Solution.isValidURL(\"https:/www.gmail.com\") == false;\n        assert Solution.isValidURL(\"https:// www.redit.com\") == false;\n    }\n}\n",
        "prompt": "Write a function to check if a url is valid or not using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isValidURL(String url) {\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        //begin to write code\n",
        "java_prompt": "Write a function to check if a url is valid or not using regex.",
        "code_str_generate": "class Solution {\n    public static boolean isValidURL(String url) {\n\n        /*\n        progame language:java\n        description:Write a function to check if a url is valid or not using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String regex = \"((http|https)://)(www.)?\" +\n                \"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\n                \"{2,256}\\\\.[a-z]\" +\n                \"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\n                \"._\\\\+~#?&//=]*)\";\n        Pattern p = Pattern.compile(regex);\n        //begin to write code\n"
    },
    {
        "task_id": 404,
        "code_str": "class Solution {\n    public static int minimum(int a, int b) {\n        if (a <= b) {\n            return a;\n        } else {\n            return b;\n        }\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.minimum(1, 2) == 1;\n        assert Solution.minimum(-5, -4) == -5;\n        assert Solution.minimum(0, 0) == 0;\n    }\n}\n",
        "prompt": "Write a python function to find the minimum of two numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int minimum(int a, int b) {\n        if (a <= b) {\n            return a;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the minimum of two numbers.",
        "code_str_generate": "class Solution {\n    public static int minimum(int a, int b) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the minimum of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (a <= b) {\n            return a;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 405,
        "code_str": "class Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkTuplex(new Object[]{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"}, \"r\") == true;\n        assert Solution.checkTuplex(new Object[]{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"}, \"5\") == false;\n        assert Solution.checkTuplex(new Object[]{\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"}, 3) == true;\n    }\n}\n",
        "prompt": "Write a function to check whether an element exists within a tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n        return Arrays.asList(tuplex).contains(tuple1);\n        //begin to write code\n",
        "java_prompt": "Write a function to check whether an element exists within a tuple.",
        "code_str_generate": "class Solution {\n    public static boolean checkTuplex(Object[] tuplex, Object tuple1) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether an element exists within a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Arrays.asList(tuplex).contains(tuple1);\n        //begin to write code\n"
    },
    {
        "task_id": 406,
        "code_str": "class Solution {\n    public static String find_Parity(int x) {\n        int y = x ^ (x >> 1);\n        y = y ^ (y >> 2);\n        y = y ^ (y >> 4);\n        y = y ^ (y >> 8);\n        y = y ^ (y >> 16);\n        if ((y & 1) == 1) {\n            return (\"Odd Parity\");\n        }\n        return (\"Even Parity\");\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_Parity(12).equals(\"Even Parity\");\n        assert Solution.find_Parity(7).equals(\"Odd Parity\");\n        assert Solution.find_Parity(10).equals(\"Even Parity\");\n    }\n}\n",
        "prompt": "Write a python function to find the parity of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String find_Parity(int x) {\n        int y = x ^ (x >> 1);\n        y = y ^ (y >> 2);\n        y = y ^ (y >> 4);\n        y = y ^ (y >> 8);\n        y = y ^ (y >> 16);\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the parity of a given number.",
        "code_str_generate": "class Solution {\n    public static String find_Parity(int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the parity of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int y = x ^ (x >> 1);\n        y = y ^ (y >> 2);\n        y = y ^ (y >> 4);\n        y = y ^ (y >> 8);\n        y = y ^ (y >> 16);\n        //begin to write code\n"
    },
    {
        "task_id": 407,
        "code_str": "class Solution {\n    public static int rearrangeBigger(int n) {\n        char[] nums = Integer.toString(n).toCharArray();\n        for (int i = nums.length - 2; i >= 0; i--) {\n            if (nums[i] < nums[i + 1]) {\n                char[] z = Arrays.copyOfRange(nums, i, nums.length);\n                char y = findMinBigger(z);\n                z = removeElement(z, y);\n                Arrays.sort(z);\n                System.arraycopy(z, 0, nums, i + 1, z.length);\n                nums[i] = y;\n                return Integer.parseInt(new String(nums));\n            }\n        }\n        return -1;\n    }\n\n    private static char findMinBigger(char[] arr) {\n        char min = Character.MAX_VALUE;\n        for (char c : arr) {\n            if (c > arr[0] && c < min) {\n                min = c;\n            }\n        }\n        return min;\n    }\n\n    private static char[] removeElement(char[] arr, char elem) {\n        char[] newArr = new char[arr.length - 1];\n        int index = 0;\n        boolean found = false;\n        for (char c : arr) {\n            if (c == elem && !found) {\n                found = true;\n            } else {\n                newArr[index++] = c;\n            }\n        }\n        return newArr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.rearrangeBigger(12) == 21;\n        assert Solution.rearrangeBigger(10) == -1;\n        assert Solution.rearrangeBigger(102) == 120;\n    }\n}\n",
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int rearrangeBigger(int n) {\n        char[] nums = Integer.toString(n).toCharArray();\n        for (int i = nums.length - 2; i >= 0; i--) {\n            if (nums[i] < nums[i + 1]) {\n                char[] z = Arrays.copyOfRange(nums, i, nums.length);\n                char y = findMinBigger(z);\n                z = removeElement(z, y);\n                Arrays.sort(z);\n                System.arraycopy(z, 0, nums, i + 1, z.length);\n                nums[i] = y;\n                return Integer.parseInt(new String(nums));\n            }\n        }\n        return -1;\n    }\n    private static char findMinBigger(char[] arr) {\n        char min = Character.MAX_VALUE;\n        for (char c : arr) {\n            if (c > arr[0] && c < min) {\n            //begin to write code\n",
        "java_prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.",
        "code_str_generate": "class Solution {\n    public static int rearrangeBigger(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to create the next bigger number by rearranging the digits of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        char[] nums = Integer.toString(n).toCharArray();\n        for (int i = nums.length - 2; i >= 0; i--) {\n            if (nums[i] < nums[i + 1]) {\n                char[] z = Arrays.copyOfRange(nums, i, nums.length);\n                char y = findMinBigger(z);\n                z = removeElement(z, y);\n                Arrays.sort(z);\n                System.arraycopy(z, 0, nums, i + 1, z.length);\n                nums[i] = y;\n                return Integer.parseInt(new String(nums));\n            }\n        }\n        return -1;\n    }\n    private static char findMinBigger(char[] arr) {\n        char min = Character.MAX_VALUE;\n        for (char c : arr) {\n            if (c > arr[0] && c < min) {\n            //begin to write code\n"
    },
    {
        "task_id": 408,
        "code_str": "\nclass Solution{\n    public static List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        PriorityQueue<int[]> queue = new PriorityQueue<>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n\n        List<int[]> pairs = new ArrayList<>();\n\n        // Helper function to push elements into the priority queue\n        push(queue, nums1, nums2, 0, 0);\n\n        while (!queue.isEmpty() && pairs.size() < k) {\n            int[] element = queue.poll();\n            int sum = element[0];\n            int i = element[1];\n            int j = element[2];\n            pairs.add(new int[]{nums1[i], nums2[j]});\n            \n            push(queue, nums1, nums2, i, j + 1);\n            if (j == 0) {\n                push(queue, nums1, nums2, i + 1, 0);\n            }\n        }\n\n        return pairs;\n    }\n\n    private static void push(PriorityQueue<int[]> queue, int[] nums1, int[] nums2, int i, int j) {\n        if (i < nums1.length && j < nums2.length) {\n            queue.offer(new int[]{nums1[i] + nums2[j], i, j});\n        }\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        int[] nums1 = {1, 3, 7};\n        int[] nums2 = {2, 4, 6};\n        // \u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b\u5e76\u8c03\u7528\u65b9\u6cd5\n        List<int[]> result1 = Solution.kSmallestPairs(nums1, nums2, 2);\n        List<int[]> result2 = Solution.kSmallestPairs(nums1, nums2, 1);\n        List<int[]> result3 = Solution.kSmallestPairs(nums1, nums2, 7);\n\n        List<int[]>test1 = new ArrayList<>();\n        List<int[]>test2 = new ArrayList<>();\n        List<int[]>test3 = new ArrayList<>();\n        \n        test1.add(new int[]{1, 2});\n        test1.add(new int[]{1, 4});\n        \n        test2.add(new int[]{1, 2});\n        \n        test3.add(new int[]{1, 2});\n        test3.add(new int[]{1, 4});\n        test3.add(new int[]{3, 2});\n        test3.add(new int[]{1, 6});\n        test3.add(new int[]{3, 4});\n        test3.add(new int[]{7, 2});\n        test3.add(new int[]{3, 6});\n        \n        // \u6253\u5370\u7ed3\u679c\n\n        assert deepEquals(test1,result1);\n        assert deepEquals(test2,result2);\n        assert deepEquals(test3,result3);\n    }\n    public static boolean deepEquals(List<int[]> list1, List<int[]> list2) {\n        if (list1.size() != list2.size()) {\n            return false;\n        }\n\n        for (int i = 0; i < list1.size(); i++) {\n            int[] array1 = list1.get(i);\n            int[] array2 = list2.get(i);\n\n            if (!Arrays.equals(array1, array2)) {\n                return false;\n            }\n        }\n\n        return true;\n}\n}",
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution{\n    public static List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        PriorityQueue<int[]> queue = new PriorityQueue<>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n        List<int[]> pairs = new ArrayList<>();\n        // Helper function to push elements into the priority queue\n        push(queue, nums1, nums2, 0, 0);\n        while (!queue.isEmpty() && pairs.size() < k) {\n            int[] element = queue.poll();\n            int sum = element[0];\n            int i = element[1];\n            int j = element[2];\n            //begin to write code\n",
        "java_prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
        "code_str_generate": "class Solution{\n    public static List<int[]> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<int[]> queue = new PriorityQueue<>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return a[0] - b[0];\n            }\n        });\n        List<int[]> pairs = new ArrayList<>();\n        // Helper function to push elements into the priority queue\n        push(queue, nums1, nums2, 0, 0);\n        while (!queue.isEmpty() && pairs.size() < k) {\n            int[] element = queue.poll();\n            int sum = element[0];\n            int i = element[1];\n            int j = element[2];\n            //begin to write code\n"
    },
    {
        "task_id": 409,
        "code_str": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n        }\n        return result_min;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.minProductTuple(Arrays.asList(new int[]{2, 7}, new int[]{2, 6}, new int[]{1, 8}, new int[]{4, 9})) == 8;\n        assert Solution.minProductTuple(Arrays.asList(new int[]{10,20}, new int[]{15,2}, new int[]{5,10})) == 30;\n        assert Solution.minProductTuple(Arrays.asList(new int[]{11,44}, new int[]{10,15}, new int[]{20,5}, new int[]{12, 9})) == 100;\n    }\n}\n",
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n",
        "java_prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.",
        "code_str_generate": "class Solution {\n    public static int minProductTuple(List<int[]> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum product from the pairs of tuples within a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int result_min = Integer.MAX_VALUE;\n        for (int[] pair : list1) {\n            result_min = Math.min(result_min, Math.abs(pair[0] * pair[1]));\n            //begin to write code\n"
    },
    {
        "task_id": 410,
        "code_str": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n            }\n        }\n        return min_val;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.min_val(Arrays.asList(\"Python\", 3, 2, 4, 5, \"version\")) == 2;\n        assert Solution.min_val(Arrays.asList(\"Python\", 15, 20, 25)) == 15;\n        assert Solution.min_val(Arrays.asList(\"Python\", 30, 20, 40, 50, \"version\")) == 20;\n    }\n}\n",
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int min_val(List<Object> listval) {\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n",
        "java_prompt": "Write a function to find the minimum value in a given heterogeneous list.",
        "code_str_generate": "class Solution {\n    public static int min_val(List<Object> listval) {\n\n        /*\n        progame language:java\n        description:Write a function to find the minimum value in a given heterogeneous list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int min_val = Integer.MAX_VALUE;\n        for (Object i : listval) {\n            if (i instanceof Integer) {\n                min_val = Math.min(min_val, (Integer) i);\n                //begin to write code\n"
    },
    {
        "task_id": 411,
        "code_str": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        return camelCaseString.toString();\n    }\n\n    private static String toProperCase(String s) {\n        return s.substring(0, 1).toUpperCase() +\n                s.substring(1).toLowerCase();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.snakeToCamel(\"android_tv\").equals(\"AndroidTv\");\n        assert Solution.snakeToCamel(\"google_pixel\").equals(\"GooglePixel\");\n        assert Solution.snakeToCamel(\"apple_watch\").equals(\"AppleWatch\");\n    }\n}\n",
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String snakeToCamel(String word) {\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n",
        "java_prompt": "Write a function to convert the given snake case string to camel case string by using regex.",
        "code_str_generate": "class Solution {\n    public static String snakeToCamel(String word) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given snake case string to camel case string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String[] parts = word.split(\"_\");\n        StringBuilder camelCaseString = new StringBuilder();\n        for (String part : parts){\n            camelCaseString.append(toProperCase(part));\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 412,
        "code_str": "class Solution {\n    public static ArrayList<Integer> remove_odd(ArrayList<Integer> l) {\n        Iterator<Integer> itr = l.iterator();\n        while (itr.hasNext()) {\n            Integer number = itr.next();\n            if (number % 2 != 0) {\n                itr.remove();\n            }\n        }\n        return l;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        ArrayList<Integer> list1 = new ArrayList<>();\n        list1.add(1);\n        list1.add(2);\n        list1.add(3);\n        ArrayList<Integer> result1 = solution.remove_odd(list1);\n        assert result1.equals(new ArrayList<Integer>(){{\nadd(2);}});\n\n        ArrayList<Integer> list2 = new ArrayList<>();\n        list2.add(2);\n        list2.add(4);\n        list2.add(6);\n        ArrayList<Integer> result2 = solution.remove_odd(list2);\n        assert result2.equals(new ArrayList<Integer>(){{\nadd(2); add(4); add(6);}});\n\n        ArrayList<Integer> list3 = new ArrayList<>();\n        list3.add(10);\n        list3.add(20);\n        list3.add(3);\n        ArrayList<Integer> result3 = solution.remove_odd(list3);\n        assert result3.equals(new ArrayList<Integer>(){{\nadd(10); add(20);}});\n    }\n}\n",
        "prompt": "Write a python function to remove odd numbers from a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static ArrayList<Integer> remove_odd(ArrayList<Integer> l) {\n        Iterator<Integer> itr = l.iterator();\n        while (itr.hasNext()) {\n            Integer number = itr.next();\n            if (number % 2 != 0) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to remove odd numbers from a given list.",
        "code_str_generate": "class Solution {\n    public static ArrayList<Integer> remove_odd(ArrayList<Integer> l) {\n\n        /*\n        progame language:java\n        description:Write a java function to remove odd numbers from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Iterator<Integer> itr = l.iterator();\n        while (itr.hasNext()) {\n            Integer number = itr.next();\n            if (number % 2 != 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 413,
        "code_str": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<Object>> list1 = Arrays.asList(\n            Arrays.asList(\"Greyson Fulton\", 98, 99),\n            Arrays.asList(\"Brady Kent\", 97, 96),\n            Arrays.asList(\"Wyatt Knott\", 91, 94),\n            Arrays.asList(\"Beau Turnbull\", 94, 98)\n        );\n\n        assert Solution.extractNthElement(list1, 0).equals(Arrays.asList(\"Greyson Fulton\", \"Brady Kent\", \"Wyatt Knott\", \"Beau Turnbull\"));\n        assert Solution.extractNthElement(list1, 2).equals(Arrays.asList(99, 96, 94, 98));\n        assert Solution.extractNthElement(list1, 1).equals(Arrays.asList(98, 97, 91, 94));\n    }\n}\n",
        "prompt": "Write a function to extract the nth element from a given list of tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n            //begin to write code\n",
        "java_prompt": "Write a function to extract the nth element from a given list of tuples.",
        "code_str_generate": "class Solution {\n    public static List<Object> extractNthElement(List<List<Object>> list1, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the nth element from a given list of tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Object> result = new ArrayList<>();\n        for (List<Object> sublist : list1) {\n            result.add(sublist.get(n));\n            //begin to write code\n"
    },
    {
        "task_id": 414,
        "code_str": "class Solution {\n    public boolean overlapping(int[] list1, int[] list2) {\n        int c = 0;\n        int d = 0;\n        for (int i : list1) {\n            c++;\n        }\n        for (int i : list2) {\n            d++;\n        }\n        for (int i = 0; i < c; i++) {\n            for (int j = 0; j < d; j++) {\n                if (list1[i] == list2[j]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.overlapping(new int[]{1,2,3,4,5}, new int[]{6,7,8,9});\n        assert !solution.overlapping(new int[]{1,2,3}, new int[]{4,5,6});\n        assert solution.overlapping(new int[]{1,4,5}, new int[]{1,4,5});\n    }\n}\n",
        "prompt": "Write a python function to check whether the value exists in a sequence or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean overlapping(int[] list1, int[] list2) {\n        int c = 0;\n        int d = 0;\n        for (int i : list1) {\n            c++;\n        }\n        for (int i : list2) {\n            d++;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to check whether the value exists in a sequence or not.",
        "code_str_generate": "class Solution {\n    public boolean overlapping(int[] list1, int[] list2) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the value exists in a sequence or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int c = 0;\n        int d = 0;\n        for (int i : list1) {\n            c++;\n        }\n        for (int i : list2) {\n            d++;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 415,
        "code_str": "class Solution {\n    public static int[] maxProduct(int[] arr) {\n        int arrLen = arr.length;\n        if (arrLen < 2) {\n            throw new IllegalArgumentException(\"No pairs exists\");\n        }\n        int x = arr[0];\n        int y = arr[1];\n        for (int i = 0; i < arrLen; i++) {\n            for (int j = i + 1; j < arrLen; j++) {\n                if (arr[i] * arr[j] > x * y) {\n                    x = arr[i];\n                    y = arr[j];\n                }\n            }\n        }\n        return new int[]{x, y};\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.maxProduct(new int[]{1,2,3,4,7,0,8,4}), new int[]{7,8});\n        assert java.util.Arrays.equals(Solution.maxProduct(new int[]{0,-1,-2,-4,5,0,-6}), new int[]{-4,-6});\n        assert java.util.Arrays.equals(Solution.maxProduct(new int[]{1,2,3}), new int[]{2,3});\n    }\n}\n",
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] maxProduct(int[] arr) {\n        int arrLen = arr.length;\n        if (arrLen < 2) {\n            throw new IllegalArgumentException(\"No pairs exists\");\n        }\n        int x = arr[0];\n        int y = arr[1];\n        for (int i = 0; i < arrLen; i++) {\n            for (int j = i + 1; j < arrLen; j++) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find a pair with highest product from a given array of integers.",
        "code_str_generate": "class Solution {\n    public static int[] maxProduct(int[] arr) {\n\n        /*\n        progame language:java\n        description:Write a java function to find a pair with highest product from a given array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int arrLen = arr.length;\n        if (arrLen < 2) {\n            throw new IllegalArgumentException(\"No pairs exists\");\n        }\n        int x = arr[0];\n        int y = arr[1];\n        for (int i = 0; i < arrLen; i++) {\n            for (int j = i + 1; j < arrLen; j++) {\n            //begin to write code\n"
    },
    {
        "task_id": 416,
        "code_str": "class Solution {\n    private static final int MAX = 1000000;\n    public int breakSum(int n) {\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4], i);\n        }\n        return dp[n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.breakSum(12) == 13;\n        assert solution.breakSum(24) == 27;\n        assert solution.breakSum(23) == 23;\n    }\n}\n",
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    private static final int MAX = 1000000;\n    public int breakSum(int n) {\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
        "code_str_generate": "class Solution {\n    private static final int MAX = 1000000;\n    public int breakSum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 1;\n        //begin to write code\n"
    },
    {
        "task_id": 417,
        "code_str": "class Solution {\n    public List<List<String>> groupTuples(List<List<String>> input) {\n        Map<String, List<String>> map = new HashMap<>();\n        for (List<String> tuple : input) {\n            if (map.containsKey(tuple.get(0))) {\n                map.get(tuple.get(0)).addAll(tuple.subList(1, tuple.size()));\n            } else {\n                map.put(tuple.get(0), new ArrayList<>(tuple));\n            }\n        }\n        return new ArrayList<>(map.values());\n    }\n}",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<List<String>> input1 = Arrays.asList(Arrays.asList(\"x\", \"y\"), Arrays.asList(\"x\", \"z\"), Arrays.asList(\"w\", \"t\"));\n        List<List<String>> expected1 = Arrays.asList(Arrays.asList(\"w\", \"t\"), Arrays.asList(\"x\", \"y\", \"z\"));\n        assert solution.groupTuples(input1).equals(expected1);\n        \n        List<List<String>> input2 = Arrays.asList(Arrays.asList(\"a\", \"b\"), Arrays.asList(\"a\", \"c\"), Arrays.asList(\"d\", \"e\"));\n        List<List<String>> expected2 = Arrays.asList(Arrays.asList(\"a\", \"b\", \"c\"), Arrays.asList(\"d\", \"e\"));\n        assert solution.groupTuples(input2).equals(expected2);\n        \n        List<List<String>> input3 = Arrays.asList(Arrays.asList(\"f\", \"g\"), Arrays.asList(\"f\", \"g\"), Arrays.asList(\"h\", \"i\"));\n        List<List<String>> expected3 = Arrays.asList(Arrays.asList(\"f\", \"g\", \"g\"), Arrays.asList(\"h\", \"i\"));\n    \n        assert solution.groupTuples(input3).equals(expected3);\n    }\n}",
        "prompt": "Write a function to find common first element in given list of tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<List<String>> groupTuples(List<List<String>> input) {\n        Map<String, List<String>> map = new HashMap<>();\n        for (List<String> tuple : input) {\n            if (map.containsKey(tuple.get(0))) {\n                map.get(tuple.get(0)).addAll(tuple.subList(1, tuple.size()));\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a function to find common first element in given list of tuple.",
        "code_str_generate": "class Solution {\n    public List<List<String>> groupTuples(List<List<String>> input) {\n\n        /*\n        progame language:java\n        description:Write a function to find common first element in given list of tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Map<String, List<String>> map = new HashMap<>();\n        for (List<String> tuple : input) {\n            if (map.containsKey(tuple.get(0))) {\n                map.get(tuple.get(0)).addAll(tuple.subList(1, tuple.size()));\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 418,
        "code_str": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<Object>> test1 = Arrays.asList(Arrays.asList('A'), Arrays.asList('A', 'B'), Arrays.asList('A', 'B', 'C'));\n        List<List<Object>> test2 = Arrays.asList(Arrays.asList(1), Arrays.asList(1, 2), Arrays.asList(1, 2, 3));\n        List<List<Object>> test3 = Arrays.asList(Arrays.asList(1, 1), Arrays.asList(1, 2, 3), Arrays.asList(1, 5, 6, 1));\n\n        assert Solution.Find_Max(test1).equals(Arrays.asList('A', 'B', 'C'));\n        assert Solution.Find_Max(test2).equals(Arrays.asList(1, 2, 3));\n        assert Solution.Find_Max(test3).equals(Arrays.asList(1, 5, 6, 1));\n    }\n}\n",
        "prompt": "Write a python function to find the sublist having maximum length.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the sublist having maximum length.",
        "code_str_generate": "class Solution {\n    public static List<Object> Find_Max(List<List<Object>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sublist having maximum length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Collections.max(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n"
    },
    {
        "task_id": 419,
        "code_str": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n        }\n        roundAndSum *= length;\n        return roundAndSum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.roundAndSum(Arrays.asList(22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50)) == 243;\n        assert Solution.roundAndSum(Arrays.asList(5.0,2.0,9.0,24.3,29.0)) == 345;\n        assert Solution.roundAndSum(Arrays.asList(25.0,56.7,89.2)) == 513;\n    }\n}\n",
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n",
        "java_prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
        "code_str_generate": "class Solution {\n    public static int roundAndSum(List<Double> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int length = list1.size();\n        int roundAndSum = 0;\n        for (Double num : list1) {\n            roundAndSum += Math.round(num);\n            //begin to write code\n"
    },
    {
        "task_id": 420,
        "code_str": "class Solution {\n    public static int cube_Sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.cube_Sum(2) == 72;\n        assert Solution.cube_Sum(3) == 288;\n        assert Solution.cube_Sum(4) == 800;\n    }\n}\n",
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int cube_Sum(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the cube sum of first n even natural numbers.",
        "code_str_generate": "class Solution {\n    public static int cube_Sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the cube sum of first n even natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += (2 * i) * (2 * i) * (2 * i);\n            //begin to write code\n"
    },
    {
        "task_id": 421,
        "code_str": "class Solution {\n    public static String concatenateTuple(Object[] testTup) {\n        String delim = \"-\";\n        StringBuilder res = new StringBuilder();\n        for (Object ele : testTup) {\n            res.append(ele.toString());\n            res.append(delim);\n        }\n        res.delete(res.length() - delim.length(), res.length());\n        return res.toString();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.concatenateTuple(new Object[]{\"ID\", \"is\", 4, \"UTS\"}).equals(\"ID-is-4-UTS\");\n        assert Solution.concatenateTuple(new Object[]{\"QWE\", \"is\", 4, \"RTY\"}).equals(\"QWE-is-4-RTY\");\n        assert Solution.concatenateTuple(new Object[]{\"ZEN\", \"is\", 4, \"OP\"}).equals(\"ZEN-is-4-OP\");\n    }\n}\n",
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String concatenateTuple(Object[] testTup) {\n        String delim = \"-\";\n        StringBuilder res = new StringBuilder();\n        for (Object ele : testTup) {\n            res.append(ele.toString());\n            //begin to write code\n",
        "java_prompt": "Write a function to concatenate each element of tuple by the delimiter.",
        "code_str_generate": "class Solution {\n    public static String concatenateTuple(Object[] testTup) {\n\n        /*\n        progame language:java\n        description:Write a function to concatenate each element of tuple by the delimiter.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String delim = \"-\";\n        StringBuilder res = new StringBuilder();\n        for (Object ele : testTup) {\n            res.append(ele.toString());\n            //begin to write code\n"
    },
    {
        "task_id": 422,
        "code_str": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return Math.round(sum / n * 1000000.0) / 1000000.0;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.findAverageOfCube(2) == 4.5;\n        assert Solution.findAverageOfCube(3) == 12.0;\n        assert Solution.findAverageOfCube(1) == 1.0;\n    }\n}\n",
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double findAverageOfCube(int n) {\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the average of cubes of first n natural numbers.",
        "code_str_generate": "class Solution {\n    public static double findAverageOfCube(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the average of cubes of first n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n"
    },
    {
        "task_id": 423,
        "code_str": "class Solution {\n    public int get_maxgold(int gold[][], int m, int n) {\n        int goldTable[][] = new int[m][n];\n        for(int col=n-1; col>=0; col--) {\n            for(int row=0; row<m; row++) {\n                int right = (col == n-1) ? 0 : goldTable[row][col+1];\n                int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n                int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n                goldTable[row][col] = gold[row][col] + Math.max(right, Math.max(right_up, right_down));\n            }\n        }\n        int res = goldTable[0][0];\n        for(int i=1; i<m; i++) {\n            res = Math.max(res, goldTable[i][0]);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.get_maxgold(new int[][]{{1, 3, 1, 5},{2, 2, 4, 1},{5, 0, 2, 3},{0, 6, 1, 2}},4,4)==16;\n        assert solution.get_maxgold(new int[][]{{10,20},{30,40}},2,2)==70;\n        assert solution.get_maxgold(new int[][]{{4,9},{3,7}},2,2)==13;\n    }\n}\n",
        "prompt": "Write a function to solve gold mine problem.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int get_maxgold(int gold[][], int m, int n) {\n        int goldTable[][] = new int[m][n];\n        for(int col=n-1; col>=0; col--) {\n            for(int row=0; row<m; row++) {\n                int right = (col == n-1) ? 0 : goldTable[row][col+1];\n                int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n                int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n                goldTable[row][col] = gold[row][col] + Math.max(right, Math.max(right_up, right_down));\n                //begin to write code\n",
        "java_prompt": "Write a function to solve gold mine problem.",
        "code_str_generate": "class Solution {\n    public int get_maxgold(int gold[][], int m, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to solve gold mine problem.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int goldTable[][] = new int[m][n];\n        for(int col=n-1; col>=0; col--) {\n            for(int row=0; row<m; row++) {\n                int right = (col == n-1) ? 0 : goldTable[row][col+1];\n                int right_up = (row == 0 || col == n-1) ? 0 : goldTable[row-1][col+1];\n                int right_down = (row == m-1 || col == n-1) ? 0 : goldTable[row+1][col+1];\n                goldTable[row][col] = gold[row][col] + Math.max(right, Math.max(right_up, right_down));\n                //begin to write code\n"
    },
    {
        "task_id": 424,
        "code_str": "class Solution {\n    public static List<Character> extractRear(String[] testTuple) {\n        List<Character> res = new ArrayList<>();\n        for (String sub : testTuple) {\n            res.add(sub.charAt(sub.length() - 1));\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.extractRear(new String[]{\"Mers\", \"for\", \"Vers\"}).equals(new ArrayList<Character>() {{\n            add('s');\n            add('r');\n            add('s');\n        }});\n        assert solution.extractRear(new String[]{\"Avenge\", \"for\", \"People\"}).equals(new ArrayList<Character>() {{\n            add('e');\n            add('r');\n            add('e');\n        }});\n        assert solution.extractRear(new String[]{\"Gotta\", \"get\", \"go\"}).equals(new ArrayList<Character>() {{\n            add('a');\n            add('t');\n            add('o');\n        }});\n    }\n}\n",
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Character> extractRear(String[] testTuple) {\n        List<Character> res = new ArrayList<>();\n        for (String sub : testTuple) {\n            res.add(sub.charAt(sub.length() - 1));\n            //begin to write code\n",
        "java_prompt": "Write a function to extract only the rear index element of each string in the given tuple.",
        "code_str_generate": "class Solution {\n    public static List<Character> extractRear(String[] testTuple) {\n        List<Character> res = new ArrayList<>();\n        for (String sub : testTuple) {\n            res.add(sub.charAt(sub.length() - 1));\n\n        /*\n        progame language:java\n        description:Write a function to extract only the rear index element of each string in the given tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n            //begin to write code\n"
    },
    {
        "task_id": 425,
        "code_str": "class Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr++;\n            }\n        }\n        return ctr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.countElementInList(Arrays.asList(Arrays.asList(1, 3), Arrays.asList(5, 7), Arrays.asList(1, 11), Arrays.asList(1, 15, 7)),1)==3;\n        assert Solution.countElementInList(Arrays.asList(Arrays.asList('A', 'B'), Arrays.asList('A', 'C'), Arrays.asList('A', 'D', 'E'), Arrays.asList('B', 'C', 'D')),'A')==3;\n        assert Solution.countElementInList(Arrays.asList(Arrays.asList('A', 'B'), Arrays.asList('A', 'C'), Arrays.asList('A', 'D', 'E'), Arrays.asList('B', 'C', 'D')),'E')==1;\n    }\n}",
        "prompt": "Write a function to count the number of sublists containing a particular element.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr++;\n                //begin to write code\n",
        "java_prompt": "Write a function to count the number of sublists containing a particular element.",
        "code_str_generate": "class Solution {\n    public static int countElementInList(List<List<Object>> list1, Object x) {\n\n        /*\n        progame language:java\n        description:Write a function to count the number of sublists containing a particular element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr = 0;\n        for (List<Object> sublist : list1) {\n            if (sublist.contains(x)) {\n                ctr++;\n                //begin to write code\n"
    },
    {
        "task_id": 426,
        "code_str": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n            }\n        }\n        return oddNums;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> result1 = Arrays.asList(1, 3, 5, 7, 9);\n        assert solution.filterOddNumbers(test1).equals(result1);\n\n        List<Integer> test2 = Arrays.asList(10, 20, 45, 67, 84, 93);\n        List<Integer> result2 = Arrays.asList(45, 67, 93);\n        assert solution.filterOddNumbers(test2).equals(result2);\n\n        List<Integer> test3 = Arrays.asList(5, 7, 9, 8, 6, 4, 3);\n        List<Integer> result3 = Arrays.asList(5, 7, 9, 3);\n        assert solution.filterOddNumbers(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to filter odd numbers using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n",
        "java_prompt": "Write a function to filter odd numbers using lambda function.",
        "code_str_generate": "class Solution {\n    public static List<Integer> filterOddNumbers(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to filter odd numbers using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> oddNums = new ArrayList<>();\n        for (Integer num : nums) {\n            if (num % 2 != 0) {\n                oddNums.add(num);\n                //begin to write code\n"
    },
    {
        "task_id": 427,
        "code_str": "class Solution {\n    public static String changeDateFormat(String dt) {\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n            return matcher.group(3) + \"-\" + matcher.group(2) + \"-\" + matcher.group(1);\n        }\n        return dt;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.changeDateFormat(\"2026-01-02\").equals(\"02-01-2026\");\n        assert Solution.changeDateFormat(\"2020-11-13\").equals(\"13-11-2020\");\n        assert Solution.changeDateFormat(\"2021-04-26\").equals(\"26-04-2021\");\n    }\n}\n",
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String changeDateFormat(String dt) {\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
        "code_str_generate": "class Solution {\n    public static String changeDateFormat(String dt) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"(\\\\d{4})-(\\\\d{1,2})-(\\\\d{1,2})\");\n        Matcher matcher = pattern.matcher(dt);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 428,
        "code_str": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                for (j = i; j >= gap && array[j - gap] > temp; j -= gap)\n                    array[j] = array[j - gap];\n                array[j] = temp;\n            }\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] array1 = {12, 23, 4, 5, 3, 2, 12, 81, 56, 95};\n        solution.shellSort(array1);\n        assert Arrays.equals(array1, new int[]{2, 3, 4, 5, 12, 12, 23, 56, 81, 95});\n\n        int[] array2 = {24, 22, 39, 34, 87, 73, 68};\n        solution.shellSort(array2);\n        assert Arrays.equals(array2, new int[]{22, 24, 34, 39, 68, 73, 87});\n\n        int[] array3 = {32, 30, 16, 96, 82, 83, 74};\n        solution.shellSort(array3);\n        assert Arrays.equals(array3, new int[]{16, 30, 32, 74, 82, 83, 96});\n    }\n}\n",
        "prompt": "Write a function to sort the given array by using shell sort.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static void shellSort(int[] array) {\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                //begin to write code\n",
        "java_prompt": "Write a function to sort the given array by using shell sort.",
        "code_str_generate": "class Solution {\n    public static void shellSort(int[] array) {\n\n        /*\n        progame language:java\n        description:Write a function to sort the given array by using shell sort.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = array.length;\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; i += 1) {\n                int temp = array[i];\n                int j;\n                //begin to write code\n"
    },
    {
        "task_id": 429,
        "code_str": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert Arrays.equals(solution.and_tuples(new int[]{10, 4, 6, 9}, new int[]{5, 2, 3, 3}), new int[]{0, 0, 2, 1});\n        assert Arrays.equals(solution.and_tuples(new int[]{1, 2, 3, 4}, new int[]{5, 6, 7, 8}), new int[]{1, 2, 3, 0});\n        assert Arrays.equals(solution.and_tuples(new int[]{8, 9, 11, 12}, new int[]{7, 13, 14, 17}), new int[]{0, 9, 10, 0});\n    }\n}\n",
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n            //begin to write code\n",
        "java_prompt": "Write a function to extract the elementwise and tuples from the given two tuples.",
        "code_str_generate": "class Solution {\n    public static int[] and_tuples(int[] test_tup1, int[] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to extract the elementwise and tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[test_tup1.length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            res[i] = test_tup1[i] & test_tup2[i];\n            //begin to write code\n"
    },
    {
        "task_id": 430,
        "code_str": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        return directrix;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.parabolaDirectrix(5,3,2) == -198;\n        assert Solution.parabolaDirectrix(9,8,4) == -2336;\n        assert Solution.parabolaDirectrix(2,4,6) == -130;\n    }\n}\n",
        "prompt": "Write a function to find the directrix of a parabola.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the directrix of a parabola.",
        "code_str_generate": "class Solution {\n    public static int parabolaDirectrix(int a, int b, int c) {\n\n        /*\n        progame language:java\n        description:Write a function to find the directrix of a parabola.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int directrix = (int)(c - ((b * b) + 1) * 4 * a);\n        //begin to write code\n"
    },
    {
        "task_id": 431,
        "code_str": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    return result;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.commonElement(new int[]{1,2,3,4,5}, new int[]{5,6,7,8,9})==true;\n        assert Solution.commonElement(new int[]{1,2,3,4,5}, new int[]{6,7,8,9})==false;\n    }\n}\n",
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    //begin to write code\n",
        "java_prompt": "Write a function that takes two lists and returns true if they have at least one common element.",
        "code_str_generate": "class Solution {\n    public static boolean commonElement(int[] list1, int[] list2) {\n\n        /*\n        progame language:java\n        description:Write a function that takes two lists and returns true if they have at least one common element.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        boolean result = false;\n        for (int x : list1) {\n            for (int y : list2) {\n                if (x == y) {\n                    result = true;\n                    //begin to write code\n"
    },
    {
        "task_id": 432,
        "code_str": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n        double median = 0.5 * (base1 + base2);\n        return median;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.medianTrapezium(15,25,35) == 20;\n        assert Solution.medianTrapezium(10,20,30) == 15;\n        assert Solution.medianTrapezium(6,9,4) == 7.5;\n    }\n}\n",
        "prompt": "Write a function to find the median of a trapezium.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n        double median = 0.5 * (base1 + base2);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the median of a trapezium.",
        "code_str_generate": "class Solution {\n    public static double medianTrapezium(double base1, double base2, double height) {\n\n        /*\n        progame language:java\n        description:Write a function to find the median of a trapezium.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double median = 0.5 * (base1 + base2);\n        //begin to write code\n"
    },
    {
        "task_id": 433,
        "code_str": "class Solution {\n    public static String checkGreater(int[] arr, int number) {\n        Arrays.sort(arr);\n        if (number > arr[arr.length - 1]) {\n            return (\"Yes, the entered number is greater than those in the array\");\n        } else {\n            return (\"No, entered number is less than those in the array\");\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkGreater(new int[]{1, 2, 3, 4, 5}, 4).equals(\"No, entered number is less than those in the array\");\n        assert Solution.checkGreater(new int[]{2, 3, 4, 5, 6}, 8).equals(\"Yes, the entered number is greater than those in the array\");\n        assert Solution.checkGreater(new int[]{9, 7, 4, 8, 6, 1}, 11).equals(\"Yes, the entered number is greater than those in the array\");\n    }\n}\n",
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String checkGreater(int[] arr, int number) {\n        Arrays.sort(arr);\n        if (number > arr[arr.length - 1]) {\n            return (\"Yes, the entered number is greater than those in the array\");\n            //begin to write code\n",
        "java_prompt": "Write a function to check whether the entered number is greater than the elements of the given array.",
        "code_str_generate": "class Solution {\n    public static String checkGreater(int[] arr, int number) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the entered number is greater than the elements of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(arr);\n        if (number > arr[arr.length - 1]) {\n            return (\"Yes, the entered number is greater than those in the array\");\n            //begin to write code\n"
    },
    {
        "task_id": 434,
        "code_str": "class Solution {\n    public String text_match_one(String text) {\n        String patterns = \"ab+?\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert \"Not matched!\".equals(solution.text_match_one(\"ac\"));\n        assert \"Not matched!\".equals(solution.text_match_one(\"dc\"));\n        assert \"Found a match!\".equals(solution.text_match_one(\"abba\"));\n    }\n}\n",
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String text_match_one(String text) {\n        String patterns = \"ab+?\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function that matches a string that has an a followed by one or more b's.",
        "code_str_generate": "class Solution {\n    public String text_match_one(String text) {\n\n        /*\n        progame language:java\n        description:Write a function that matches a string that has an a followed by one or more b's.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"ab+?\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 435,
        "code_str": "class Solution {\n    public static int lastDigit(int n) {\n        return n % 10;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.lastDigit(123) == 3;\n        assert Solution.lastDigit(25) == 5;\n        assert Solution.lastDigit(30) == 0;\n    }\n}\n",
        "prompt": "Write a python function to find the last digit of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int lastDigit(int n) {\n        return n % 10;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the last digit of a given number.",
        "code_str_generate": "class Solution {\n    public static int lastDigit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the last digit of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return n % 10;\n        //begin to write code\n"
    },
    {
        "task_id": 436,
        "code_str": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] test1 = {-1,4,5,-6};\n        int[] test2 = {-1,-2,3,4};\n        int[] test3 = {-7,-6,8,9};\n        ArrayList<Integer> result1 = solution.neg_nos(test1);\n        ArrayList<Integer> result2 = solution.neg_nos(test2);\n        ArrayList<Integer> result3 = solution.neg_nos(test3);\n        assert result1.equals(new ArrayList<>(Arrays.asList(-1, -6)));\n        assert result2.equals(new ArrayList<>(Arrays.asList(-1, -2)));\n        assert result3.equals(new ArrayList<>(Arrays.asList(-7, -6)));\n    }\n}\n",
        "prompt": "Write a python function to print negative numbers in a list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n",
        "java_prompt": "Write a java function to print negative numbers in a list.",
        "code_str_generate": "class Solution {\n    public ArrayList<Integer> neg_nos(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to print negative numbers in a list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        ArrayList<Integer> result = new ArrayList<>();\n        for (int num : list1) {\n            if (num < 0) {\n                result.add(num);\n                //begin to write code\n"
    },
    {
        "task_id": 437,
        "code_str": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + str1.charAt(i - 1);\n            }\n        }\n        return str2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.remove_odd(\"python\").equals(\"yhn\");\n        assert Solution.remove_odd(\"program\").equals(\"rga\");\n        assert Solution.remove_odd(\"language\").equals(\"agae\");\n    }\n}\n",
        "prompt": "Write a function to remove odd characters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String remove_odd(String str1) {\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove odd characters in a string.",
        "code_str_generate": "class Solution {\n    public static String remove_odd(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove odd characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = \"\";\n        for (int i = 1; i <= str1.length(); i++) {\n            if (i % 2 == 0) {\n                str2 = str2 + str1.charAt(i - 1);\n                //begin to write code\n"
    },
    {
        "task_id": 438,
        "code_str": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                }\n            }\n        }\n        return String.valueOf(res);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(5, 6), Arrays.asList(1, 2), Arrays.asList(6, 5), Arrays.asList(9, 1), Arrays.asList(6, 5), Arrays.asList(2, 1));\n        assert solution.countBidirectional(testList1).equals(\"3\");\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(5, 6), Arrays.asList(1, 3), Arrays.asList(6, 5), Arrays.asList(9, 1), Arrays.asList(6, 5), Arrays.asList(2, 1));\n        assert solution.countBidirectional(testList2).equals(\"2\");\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(5, 6), Arrays.asList(1, 2), Arrays.asList(6, 5), Arrays.asList(9, 2), Arrays.asList(6, 5), Arrays.asList(2, 1));\n        assert solution.countBidirectional(testList3).equals(\"4\");\n    }\n}\n",
        "prompt": "Write a function to count bidirectional tuple pairs.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                    //begin to write code\n",
        "java_prompt": "Write a function to count bidirectional tuple pairs.",
        "code_str_generate": "class Solution {\n    public String countBidirectional(List<List<Integer>> testList) {\n\n        /*\n        progame language:java\n        description:Write a function to count bidirectional tuple pairs.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int res = 0;\n        for (int idx = 0; idx < testList.size(); idx++) {\n            for (int iidx = idx + 1; iidx < testList.size(); iidx++) {\n                if (Objects.equals(testList.get(iidx).get(0), testList.get(idx).get(1)) && Objects.equals(testList.get(idx).get(1), testList.get(iidx).get(0))) {\n                    res += 1;\n                    //begin to write code\n"
    },
    {
        "task_id": 439,
        "code_str": "class Solution {\n    public static int multipleToSingle(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n        }\n        return Integer.parseInt(sb.toString());\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.multipleToSingle(new int[]{11, 33, 50}) == 113350;\n        assert Solution.multipleToSingle(new int[]{-1, 2, 3, 4, 5, 6}) == -123456;\n        assert Solution.multipleToSingle(new int[]{10, 15, 20, 25}) == 10152025;\n    }\n}\n",
        "prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int multipleToSingle(int[] L) {\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n",
        "java_prompt": "Write a function to convert a list of multiple integers into a single integer.",
        "code_str_generate": "class Solution {\n    public static int multipleToSingle(int[] L) {\n\n        /*\n        progame language:java\n        description:Write a function to convert a list of multiple integers into a single integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder sb = new StringBuilder();\n        for (int i : L) {\n            sb.append(i);\n            //begin to write code\n"
    },
    {
        "task_id": 440,
        "code_str": "\nclass Solution{\npublic static String[] findAdverbPosition(String text) {\n        Pattern pattern = Pattern.compile(\"\\\\w+ly\");\n        Matcher matcher = pattern.matcher(text);\n\n        if (matcher.find()) {\n            String start = String.valueOf(matcher.start());\n            String end = String.valueOf(matcher.end());\n            String word = matcher.group();\n            return new String[]{start, end, word};\n        }\n\n        return null; // \u82e5\u672a\u627e\u5230\u5339\u914d\uff0c\u8fd4\u56denull\n    }\n}",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        String text1 = \"clearly!! we can see the sky\";\n        String text2 = \"seriously!! there are many roses\";\n        String text3 = \"unfortunately!! sita is going to home\";\n        \n        String[] result1 = {\"0\", \"7\", \"clearly\"};\n        String[] result2 = {\"0\", \"9\", \"seriously\"};\n        String[] result3 = {\"0\", \"13\", \"unfortunately\"};\n        assert Arrays.equals(Solution.findAdverbPosition(text1), result1);\n        assert Arrays.equals(Solution.findAdverbPosition(text2), result2);\n        assert Arrays.equals(Solution.findAdverbPosition(text3), result3);\n    }\n}",
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution{\npublic static String[] findAdverbPosition(String text) {\n        Pattern pattern = Pattern.compile(\"\\\\w+ly\");\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            String start = String.valueOf(matcher.start());\n            String end = String.valueOf(matcher.end());\n            //begin to write code\n",
        "java_prompt": "Write a function to find all adverbs and their positions in a given sentence.",
        "code_str_generate": "class Solution{\npublic static String[] findAdverbPosition(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find all adverbs and their positions in a given sentence.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"\\\\w+ly\");\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            String start = String.valueOf(matcher.start());\n            String end = String.valueOf(matcher.end());\n            //begin to write code\n"
    },
    {
        "task_id": 441,
        "code_str": "class Solution {\n    public static int surfaceareaCube(int l) {\n        int surfacearea = 6 * l * l;\n        return surfacearea;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.surfaceareaCube(5) == 150;\n        assert Solution.surfaceareaCube(3) == 54;\n        assert Solution.surfaceareaCube(10) == 600;\n    }\n}\n",
        "prompt": "Write a function to find the surface area of a cube.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int surfaceareaCube(int l) {\n        int surfacearea = 6 * l * l;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the surface area of a cube.",
        "code_str_generate": "class Solution {\n    public static int surfaceareaCube(int l) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cube.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int surfacearea = 6 * l * l;\n        //begin to write code\n"
    },
    {
        "task_id": 442,
        "code_str": "class Solution {\n    public static double positiveCount(int[] nums) {\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x > 0) {\n                n1 += 1;\n            }\n        }\n        return Math.round((double)n1/n * 100.0) / 100.0;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.positiveCount(new int[]{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}) == 0.54;\n        assert Solution.positiveCount(new int[]{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}) == 0.69;\n        assert Solution.positiveCount(new int[]{2, 4, -6, -9, 11, -12, 14, -5, 17}) == 0.56;\n    }\n}\n",
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double positiveCount(int[] nums) {\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x > 0) {\n            //begin to write code\n",
        "java_prompt": "Write a function to find the ration of positive numbers in an array of integers.",
        "code_str_generate": "class Solution {\n    public static double positiveCount(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find the ration of positive numbers in an array of integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = nums.length;\n        int n1 = 0;\n        for (int x : nums) {\n            if (x > 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 443,
        "code_str": "class Solution {\n    public static int largestNeg(int[] list1) {\n        int max = list1[0];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n            }\n        }\n        return max;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.largestNeg(new int[]{1,2,3,-4,-6}) == -6;\n        assert Solution.largestNeg(new int[]{1,2,3,-8,-9}) == -9;\n        assert Solution.largestNeg(new int[]{1,2,3,4,-1}) == -1;\n    }\n}\n",
        "prompt": "Write a python function to find the largest negative number from the given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int largestNeg(int[] list1) {\n        int max = list1[0];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the largest negative number from the given list.",
        "code_str_generate": "class Solution {\n    public static int largestNeg(int[] list1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the largest negative number from the given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max = list1[0];\n        for (int x : list1) {\n            if (x < max) {\n                max = x;\n                //begin to write code\n"
    },
    {
        "task_id": 444,
        "code_str": "class Solution {\n    public static List<List<Integer>> trimTuple(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            int N = ele.size();\n            res.add(new ArrayList<>(ele.subList(K, N - K)));\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<Integer>> testList1 = Arrays.asList(Arrays.asList(5, 3, 2, 1, 4), Arrays.asList(3, 4, 9, 2, 1), Arrays.asList(9, 1, 2, 3, 5), Arrays.asList(4, 8, 2, 1, 7));\n        assert solution.trimTuple(testList1, 2).equals(Arrays.asList(Arrays.asList(2), Arrays.asList(9), Arrays.asList(2), Arrays.asList(2)));\n\n        List<List<Integer>> testList2 = Arrays.asList(Arrays.asList(5, 3, 2, 1, 4), Arrays.asList(3, 4, 9, 2, 1), Arrays.asList(9, 1, 2, 3, 5), Arrays.asList(4, 8, 2, 1, 7));\n        assert solution.trimTuple(testList2, 1).equals(Arrays.asList(Arrays.asList(3, 2, 1), Arrays.asList(4, 9, 2), Arrays.asList(1, 2, 3), Arrays.asList(8, 2, 1)));\n\n        List<List<Integer>> testList3 = Arrays.asList(Arrays.asList(7, 8, 4, 9), Arrays.asList(11, 8, 12, 4), Arrays.asList(4, 1, 7, 8), Arrays.asList(3, 6, 9, 7));\n        assert solution.trimTuple(testList3, 1).equals(Arrays.asList(Arrays.asList(8, 4), Arrays.asList(8, 12), Arrays.asList(1, 7), Arrays.asList(6, 9)));\n    }\n}\n",
        "prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<Integer>> trimTuple(List<List<Integer>> testList, int K) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            int N = ele.size();\n            //begin to write code\n",
        "java_prompt": "Write a function to trim each tuple by k in the given tuple list.",
        "code_str_generate": "class Solution {\n    public static List<List<Integer>> trimTuple(List<List<Integer>> testList, int K) {\n\n        /*\n        progame language:java\n        description:Write a function to trim each tuple by k in the given tuple list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<Integer>> res = new ArrayList<>();\n        for (List<Integer> ele : testList) {\n            int N = ele.size();\n            //begin to write code\n"
    },
    {
        "task_id": 445,
        "code_str": "class Solution {\n    public static int[][] indexMultiplication(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] * test_tup2[i][j];\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Arrays.deepEquals(Solution.indexMultiplication(new int[][]{{1, 3}, {4, 5}, {2, 9}, {1, 10}}, new int[][]{{6, 7}, {3, 9}, {1, 1}, {7, 3}}), new int[][]{{6, 21}, {12, 45}, {2, 9}, {7, 30}});\n        assert Arrays.deepEquals(Solution.indexMultiplication(new int[][]{{2, 4}, {5, 6}, {3, 10}, {2, 11}}, new int[][]{{7, 8}, {4, 10}, {2, 2}, {8, 4}}), new int[][]{{14, 32}, {20, 60}, {6, 20}, {16, 44}});\n        assert Arrays.deepEquals(Solution.indexMultiplication(new int[][]{{3, 5}, {6, 7}, {4, 11}, {3, 12}}, new int[][]{{8, 9}, {5, 11}, {3, 3}, {9, 5}}), new int[][]{{24, 45}, {30, 77}, {12, 33}, {27, 60}});\n    }\n}\n",
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[][] indexMultiplication(int[][] test_tup1, int[][] test_tup2) {\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] * test_tup2[i][j];\n                //begin to write code\n",
        "java_prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
        "code_str_generate": "class Solution {\n    public static int[][] indexMultiplication(int[][] test_tup1, int[][] test_tup2) {\n\n        /*\n        progame language:java\n        description:Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] res = new int[test_tup1.length][test_tup1[0].length];\n        for (int i = 0; i < test_tup1.length; i++) {\n            for (int j = 0; j < test_tup1[i].length; j++) {\n                res[i][j] = test_tup1[i][j] * test_tup2[i][j];\n                //begin to write code\n"
    },
    {
        "task_id": 446,
        "code_str": "class Solution {\n    public static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n            }\n        }\n        return count;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.countOccurrence(Arrays.asList('a', 'a', 'c', 'b', 'd'), Arrays.asList('a', 'b')) == 3;\n        assert Solution.countOccurrence(Arrays.asList(1, 2, 3, 1, 4, 6, 7, 1, 4), Arrays.asList(1, 4, 7)) == 6;\n        assert Solution.countOccurrence(Arrays.asList(1, 2, 3, 4, 5, 6), Arrays.asList(1, 2)) == 2;\n    }\n}\n",
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int countOccurrence(List<Object> tup, List<Object> lst) {\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n                //begin to write code\n",
        "java_prompt": "Write a java function to count the occurence of all elements of list in a tuple.",
        "code_str_generate": "class Solution {\n    public static int countOccurrence(List<Object> tup, List<Object> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the occurence of all elements of list in a tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int count = 0;\n        for (Object item : tup) {\n            if (lst.contains(item)) {\n                count++;\n                //begin to write code\n"
    },
    {
        "task_id": 447,
        "code_str": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> result1 = Arrays.asList(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000);\n        assert solution.cubeNums(test1).equals(result1);\n\n        List<Integer> test2 = Arrays.asList(10, 20, 30);\n        List<Integer> result2 = Arrays.asList(1000, 8000, 27000);\n        assert solution.cubeNums(test2).equals(result2);\n\n        List<Integer> test3 = Arrays.asList(12, 15);\n        List<Integer> result3 = Arrays.asList(1728, 3375);\n        assert solution.cubeNums(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n        //begin to write code\n",
        "java_prompt": "Write a function to find cubes of individual elements in a list using lambda function.",
        "code_str_generate": "class Solution {\n    public List<Integer> cubeNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to find cubes of individual elements in a list using lambda function.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return nums.stream().map(n -> n * n * n).collect(Collectors.toList());\n        //begin to write code\n"
    },
    {
        "task_id": 448,
        "code_str": "class Solution {\n    public int cal_sum(int n) {\n        int a = 3;\n        int b = 0;\n        int c = 2;\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 3;\n        }\n        if (n == 2) {\n            return 5;\n        }\n        int sum = 5;\n        while (n > 2) {\n            int d = a + b;\n            sum = sum + d;\n            a = b;\n            b = c;\n            c = d;\n            n = n - 1;\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.cal_sum(9) == 49;\n        assert solution.cal_sum(10) == 66;\n        assert solution.cal_sum(11) == 88;\n    }\n}\n",
        "prompt": "Write a function to calculate the sum of perrin numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int cal_sum(int n) {\n        int a = 3;\n        int b = 0;\n        int c = 2;\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 3;\n        }\n        if (n == 2) {\n            return 5;\n            //begin to write code\n",
        "java_prompt": "Write a function to calculate the sum of perrin numbers.",
        "code_str_generate": "class Solution {\n    public int cal_sum(int n) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the sum of perrin numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int a = 3;\n        int b = 0;\n        int c = 2;\n        if (n == 0) {\n            return 3;\n        }\n        if (n == 1) {\n            return 3;\n        }\n        if (n == 2) {\n            return 5;\n            //begin to write code\n"
    },
    {
        "task_id": 449,
        "code_str": "class Solution {\n    public static String checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n        int a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n        if (a == 0) {\n            return \"No\";\n        } else {\n            return \"Yes\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkTriangle(1,5,2,5,4,6).equals(\"Yes\");\n        assert Solution.checkTriangle(1,1,1,4,1,5).equals(\"No\");\n        assert Solution.checkTriangle(1,1,1,1,1,1).equals(\"No\");\n    }\n}\n",
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n        int a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n        if (a == 0) {\n            return \"No\";\n            //begin to write code\n",
        "java_prompt": "Write a java function to check whether the triangle is valid or not if 3 points are given.",
        "code_str_generate": "class Solution {\n    public static String checkTriangle(int x1, int y1, int x2, int y2, int x3, int y3) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the triangle is valid or not if 3 points are given.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2));\n        if (a == 0) {\n            return \"No\";\n            //begin to write code\n"
    },
    {
        "task_id": 450,
        "code_str": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<String> list1 = Arrays.asList(\"Python\", \"list\", \"exercises\", \"practice\", \"solution\");\n        assert Solution.extractString(list1, 8).equals(Arrays.asList(\"practice\", \"solution\"));\n        assert Solution.extractString(list1, 6).equals(Arrays.asList(\"Python\"));\n        assert Solution.extractString(list1, 9).equals(Arrays.asList(\"exercises\"));\n    }\n}\n",
        "prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n                //begin to write code\n",
        "java_prompt": "Write a function to extract specified size of strings from a give list of string values.",
        "code_str_generate": "class Solution {\n    public static List<String> extractString(List<String> list, int l) {\n\n        /*\n        progame language:java\n        description:Write a function to extract specified size of strings from a give list of string values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String str : list) {\n            if (str.length() == l) {\n                result.add(str);\n                //begin to write code\n"
    },
    {
        "task_id": 451,
        "code_str": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        return matcher.replaceAll(\"\");\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.removeWhitespaces(\" Google    Flutter \").equals(\"GoogleFlutter\");\n        assert Solution.removeWhitespaces(\" Google    Dart \").equals(\"GoogleDart\");\n        assert Solution.removeWhitespaces(\" iOS    Swift \").equals(\"iOSSwift\");\n    }\n}\n",
        "prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String removeWhitespaces(String text1) {\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove all whitespaces from the given string using regex.",
        "code_str_generate": "class Solution {\n    public static String removeWhitespaces(String text1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove all whitespaces from the given string using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"\\\\s+\");\n        Matcher matcher = pattern.matcher(text1);\n        //begin to write code\n"
    },
    {
        "task_id": 452,
        "code_str": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n        } else {\n            return null;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.lossAmount(1500,1200) == null;\n        assert Solution.lossAmount(100,200) == 100;\n        assert Solution.lossAmount(2000,5000) == 3000;\n    }\n}\n",
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n            //begin to write code\n",
        "java_prompt": "Write a function that gives loss amount if the given amount has loss else return none.",
        "code_str_generate": "class Solution {\n    public static Integer lossAmount(int actualCost, int saleAmount) {\n\n        /*\n        progame language:java\n        description:Write a function that gives loss amount if the given amount has loss else return none.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (saleAmount > actualCost) {\n            int amount = saleAmount - actualCost;\n            return amount;\n            //begin to write code\n"
    },
    {
        "task_id": 453,
        "code_str": "class Solution {\n    public static int sumofFactors(int n) {\n        if (n % 2 != 0) {\n            return 0;\n        }\n        int res = 1;\n        for (int i = 2; i <= (int)(Math.sqrt(n)) + 1; i++) {\n            int count = 0;\n            int curr_sum = 1;\n            int curr_term = 1;\n            while (n % i == 0) {\n                count = count + 1;\n                n = n / i;\n                if (i == 2 && count == 1) {\n                    curr_sum = 0;\n                }\n                curr_term = curr_term * i;\n                curr_sum = curr_sum + curr_term;\n            }\n            res = res * curr_sum;\n        }\n        if (n >= 2) {\n            res = res * (1 + n);\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sumofFactors(18) == 26;\n        assert Solution.sumofFactors(30) == 48;\n        assert Solution.sumofFactors(6) == 8;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of even factors of a number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sumofFactors(int n) {\n        if (n % 2 != 0) {\n            return 0;\n        }\n        int res = 1;\n        for (int i = 2; i <= (int)(Math.sqrt(n)) + 1; i++) {\n            int count = 0;\n            int curr_sum = 1;\n            int curr_term = 1;\n            while (n % i == 0) {\n                count = count + 1;\n                n = n / i;\n                if (i == 2 && count == 1) {\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of even factors of a number.",
        "code_str_generate": "class Solution {\n    public static int sumofFactors(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of even factors of a number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 != 0) {\n            return 0;\n        }\n        int res = 1;\n        for (int i = 2; i <= (int)(Math.sqrt(n)) + 1; i++) {\n            int count = 0;\n            int curr_sum = 1;\n            int curr_term = 1;\n            while (n % i == 0) {\n                count = count + 1;\n                n = n / i;\n                if (i == 2 && count == 1) {\n                //begin to write code\n"
    },
    {
        "task_id": 454,
        "code_str": "class Solution {\n    public String textMatchWordz(String text) {\n        String patterns = \"\\\\w*z.\\\\w*\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n            return \"Found a match!\";\n        } else {\n            return \"Not matched!\";\n        }\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.textMatchWordz(\"pythonz.\").equals(\"Found a match!\");\n        assert solution.textMatchWordz(\"xyz.\").equals(\"Found a match!\");\n        assert solution.textMatchWordz(\"  lang  .\").equals(\"Not matched!\");\n    }\n}\n",
        "prompt": "Write a function that matches a word containing 'z'.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String textMatchWordz(String text) {\n        String patterns = \"\\\\w*z.\\\\w*\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function that matches a word containing 'z'.",
        "code_str_generate": "class Solution {\n    public String textMatchWordz(String text) {\n\n        /*\n        progame language:java\n        description:Write a function that matches a word containing 'z'.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String patterns = \"\\\\w*z.\\\\w*\";\n        Pattern pattern = Pattern.compile(patterns);\n        Matcher matcher = pattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 455,
        "code_str": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n        if(monthnum2==1 || monthnum2==3 || monthnum2==5 || monthnum2==7 || monthnum2==8 || monthnum2==10 || monthnum2==12){\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkMonthnumbNumber(5) == true;\n        assert Solution.checkMonthnumbNumber(2) == false;\n        assert Solution.checkMonthnumbNumber(6) == false;\n    }\n}\n",
        "prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n        if(monthnum2==1 || monthnum2==3 || monthnum2==5 || monthnum2==7 || monthnum2==8 || monthnum2==10 || monthnum2==12){\n            return true;\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to check whether the given month number contains 31 days or not.",
        "code_str_generate": "class Solution {\n    public static boolean checkMonthnumbNumber(int monthnum2) {\n\n        /*\n        progame language:java\n        description:Write a function to check whether the given month number contains 31 days or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if(monthnum2==1 || monthnum2==3 || monthnum2==5 || monthnum2==7 || monthnum2==8 || monthnum2==10 || monthnum2==12){\n            return true;\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 456,
        "code_str": "class Solution {\n    public List<String> reverseStringList(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        assert solution.reverseStringList(Arrays.asList(\"Red\", \"Green\", \"Blue\", \"White\", \"Black\")).equals(Arrays.asList(\"deR\", \"neerG\", \"eulB\", \"etihW\", \"kcalB\"));\n        assert solution.reverseStringList(Arrays.asList(\"john\",\"amal\",\"joel\",\"george\")).equals(Arrays.asList(\"nhoj\",\"lama\",\"leoj\",\"egroeg\"));\n        assert solution.reverseStringList(Arrays.asList(\"jack\",\"john\",\"mary\")).equals(Arrays.asList(\"kcaj\",\"nhoj\",\"yram\"));\n    }\n}\n",
        "prompt": "Write a function to reverse strings in a given list of string values.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<String> reverseStringList(List<String> stringList) {\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n            //begin to write code\n",
        "java_prompt": "Write a function to reverse strings in a given list of string values.",
        "code_str_generate": "class Solution {\n    public List<String> reverseStringList(List<String> stringList) {\n\n        /*\n        progame language:java\n        description:Write a function to reverse strings in a given list of string values.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<String> result = new ArrayList<>();\n        for (String s : stringList) {\n            result.add(new StringBuilder(s).reverse().toString());\n            //begin to write code\n"
    },
    {
        "task_id": 457,
        "code_str": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<Object>> test1 = Arrays.asList(Arrays.asList(1), Arrays.asList(1, 2), Arrays.asList(1, 2, 3));\n        assert Solution.Find_Min(test1).equals(Arrays.asList(1));\n\n        List<List<Object>> test2 = Arrays.asList(Arrays.asList(1, 1), Arrays.asList(1, 1, 1), Arrays.asList(1, 2, 7, 8));\n        assert Solution.Find_Min(test2).equals(Arrays.asList(1, 1));\n\n        List<List<Object>> test3 = Arrays.asList(Arrays.asList(\"x\"), Arrays.asList(\"x\", \"y\"), Arrays.asList(\"x\", \"y\", \"z\"));\n        assert Solution.Find_Min(test3).equals(Arrays.asList(\"x\"));\n    }\n}\n",
        "prompt": "Write a python function to find the sublist having minimum length.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the sublist having minimum length.",
        "code_str_generate": "class Solution {\n    public static List<Object> Find_Min(List<List<Object>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sublist having minimum length.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return Collections.min(lst, Comparator.comparingInt(List::size));\n        //begin to write code\n"
    },
    {
        "task_id": 458,
        "code_str": "class Solution {\n    public static int rectangleArea(int l, int b) {\n        int area = l * b;\n        return area;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.rectangleArea(10,20) == 200;\n        assert Solution.rectangleArea(10,5) == 50;\n        assert Solution.rectangleArea(4,2) == 8;\n    }\n}\n",
        "prompt": "Write a function to find the area of a rectangle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int rectangleArea(int l, int b) {\n        int area = l * b;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the area of a rectangle.",
        "code_str_generate": "class Solution {\n    public static int rectangleArea(int l, int b) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a rectangle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int area = l * b;\n        //begin to write code\n"
    },
    {
        "task_id": 459,
        "code_str": "class Solution {\n    public String remove_uppercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[A-Z]\");\n        Matcher matcher = pattern.matcher(str1);\n        String result = matcher.replaceAll(\"\");\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove_uppercase(\"cAstyoUrFavoRitETVshoWs\").equals(\"cstyoravoitshos\");\n        assert solution.remove_uppercase(\"wAtchTheinTernEtrAdIo\").equals(\"wtchheinerntrdo\");\n        assert solution.remove_uppercase(\"VoicESeaRchAndreComMendaTionS\").equals(\"oiceachndreomendaion\");\n    }\n}\n",
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String remove_uppercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[A-Z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove uppercase substrings from a given string by using regex.",
        "code_str_generate": "class Solution {\n    public String remove_uppercase(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove uppercase substrings from a given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[A-Z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n"
    },
    {
        "task_id": 460,
        "code_str": "class Solution {\n    public static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            result.add(item.get(0));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.Extract(Arrays.asList(Arrays.asList(1, 2), Arrays.asList(3, 4, 5), Arrays.asList(6, 7, 8, 9))).equals(Arrays.asList(1, 3, 6));\n        assert solution.Extract(Arrays.asList(Arrays.asList(1,2,3), Arrays.asList(4, 5))).equals(Arrays.asList(1,4));\n        assert solution.Extract(Arrays.asList(Arrays.asList(9,8,1), Arrays.asList(1,2))).equals(Arrays.asList(9,1));\n    }\n}\n",
        "prompt": "Write a python function to get the first element of each sublist.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Integer> Extract(List<List<Integer>> lst) {\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            result.add(item.get(0));\n            //begin to write code\n",
        "java_prompt": "Write a java function to get the first element of each sublist.",
        "code_str_generate": "class Solution {\n    public static List<Integer> Extract(List<List<Integer>> lst) {\n\n        /*\n        progame language:java\n        description:Write a java function to get the first element of each sublist.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (List<Integer> item : lst) {\n            result.add(item.get(0));\n            //begin to write code\n"
    },
    {
        "task_id": 461,
        "code_str": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n        }\n        return upperCtr;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.upperCtr(\"PYthon\") == 2;\n        assert Solution.upperCtr(\"BigData\") == 2;\n        assert Solution.upperCtr(\"program\") == 0;\n    }\n}",
        "prompt": "Write a python function to count the upper case characters in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int upperCtr(String str) {\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n",
        "java_prompt": "Write a java function to count the upper case characters in a given string.",
        "code_str_generate": "class Solution {\n    public static int upperCtr(String str) {\n\n        /*\n        progame language:java\n        description:Write a java function to count the upper case characters in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int upperCtr = 0;\n        for (int i = 0; i < str.length(); i++) {\n            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') upperCtr += 1;\n            //begin to write code\n"
    },
    {
        "task_id": 462,
        "code_str": "class Solution {\n    public List<List<String>> combinationsList(List<String> list1) {\n        if (list1.size() == 0) {\n            List<List<String>> result = new ArrayList<>();\n            result.add(new ArrayList<>());\n            return result;\n        }\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> el : combinationsList(list1.subList(1, list1.size()))) {\n            List<String> subList1 = new ArrayList<>(el);\n            List<String> subList2 = new ArrayList<>(el);\n            subList2.add(list1.get(0));\n            result.add(subList1);\n            result.add(subList2);\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<String> list1 = new ArrayList<>(Arrays.asList(\"orange\", \"red\", \"green\", \"blue\"));\n        List<List<String>> expected = new ArrayList<>(Arrays.asList(Arrays.asList(), Arrays.asList(\"orange\"), Arrays.asList(\"red\"), Arrays.asList(\"red\", \"orange\"), Arrays.asList(\"green\"), Arrays.asList(\"green\", \"orange\"), Arrays.asList(\"green\", \"red\"), Arrays.asList(\"green\", \"red\", \"orange\"), Arrays.asList(\"blue\"), Arrays.asList(\"blue\", \"orange\"), Arrays.asList(\"blue\", \"red\"), Arrays.asList(\"blue\", \"red\", \"orange\"), Arrays.asList(\"blue\", \"green\"), Arrays.asList(\"blue\", \"green\", \"orange\"), Arrays.asList(\"blue\", \"green\", \"red\"), Arrays.asList(\"blue\", \"green\", \"red\", \"orange\")));\n        assert solution.combinationsList(list1).equals(expected) : \"Test case 1 failed\";\n\n        list1 = new ArrayList<>(Arrays.asList(\"red\", \"green\", \"black\", \"orange\"));\n        expected = new ArrayList<>(Arrays.asList(Arrays.asList(), Arrays.asList(\"red\"), Arrays.asList(\"green\"), Arrays.asList(\"green\", \"red\"), Arrays.asList(\"black\"), Arrays.asList(\"black\", \"red\"), Arrays.asList(\"black\", \"green\"), Arrays.asList(\"black\", \"green\", \"red\"), Arrays.asList(\"orange\"), Arrays.asList(\"orange\", \"red\"), Arrays.asList(\"orange\", \"green\"), Arrays.asList(\"orange\", \"green\", \"red\"), Arrays.asList(\"orange\", \"black\"), Arrays.asList(\"orange\", \"black\", \"red\"), Arrays.asList(\"orange\", \"black\", \"green\"), Arrays.asList(\"orange\", \"black\", \"green\", \"red\")));\n        assert solution.combinationsList(list1).equals(expected) : \"Test case 2 failed\";\n    }\n}\n",
        "prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<List<String>> combinationsList(List<String> list1) {\n        if (list1.size() == 0) {\n            List<List<String>> result = new ArrayList<>();\n            result.add(new ArrayList<>());\n            return result;\n        }\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> el : combinationsList(list1.subList(1, list1.size()))) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find all possible combinations of the elements of a given list.",
        "code_str_generate": "class Solution {\n    public List<List<String>> combinationsList(List<String> list1) {\n\n        /*\n        progame language:java\n        description:Write a function to find all possible combinations of the elements of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (list1.size() == 0) {\n            List<List<String>> result = new ArrayList<>();\n            result.add(new ArrayList<>());\n            return result;\n        }\n        List<List<String>> result = new ArrayList<>();\n        for (List<String> el : combinationsList(list1.subList(1, list1.size()))) {\n        //begin to write code\n"
    },
    {
        "task_id": 463,
        "code_str": "class Solution {\n    public int maxSubarrayProduct(int arr[]) {\n        int n = arr.length;\n        int maxEndingHere = 1;\n        int minEndingHere = 1;\n        int maxSoFar = 0;\n        int flag = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.min(minEndingHere * arr[i], 1);\n                flag = 1;\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n            } else {\n                int temp = maxEndingHere;\n                maxEndingHere = Math.max(minEndingHere * arr[i], 1);\n                minEndingHere = temp * arr[i];\n            }\n            if (maxSoFar < maxEndingHere) {\n                maxSoFar = maxEndingHere;\n            }\n        }\n        if (flag == 0 && maxSoFar == 0) {\n            return 0;\n        }\n        return maxSoFar;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxSubarrayProduct(new int[]{1, -2, -3, 0, 7, -8, -2}) == 112;\n        assert solution.maxSubarrayProduct(new int[]{6, -3, -10, 0, 2}) == 180;\n        assert solution.maxSubarrayProduct(new int[]{-2, -40, 0, -2, -3}) == 80;\n    }\n}\n",
        "prompt": "Write a function to find the maximum product subarray of the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxSubarrayProduct(int arr[]) {\n        int n = arr.length;\n        int maxEndingHere = 1;\n        int minEndingHere = 1;\n        int maxSoFar = 0;\n        int flag = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.min(minEndingHere * arr[i], 1);\n                flag = 1;\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum product subarray of the given array.",
        "code_str_generate": "class Solution {\n    public int maxSubarrayProduct(int arr[]) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum product subarray of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = arr.length;\n        int maxEndingHere = 1;\n        int minEndingHere = 1;\n        int maxSoFar = 0;\n        int flag = 0;\n        for (int i = 0; i < n; i++) {\n            if (arr[i] > 0) {\n                maxEndingHere = maxEndingHere * arr[i];\n                minEndingHere = Math.min(minEndingHere * arr[i], 1);\n                flag = 1;\n            } else if (arr[i] == 0) {\n                maxEndingHere = 1;\n                minEndingHere = 1;\n                //begin to write code\n"
    },
    {
        "task_id": 464,
        "code_str": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n        for (int value : map.values()) {\n            if (value != n) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"Cierra Vega\", 12);\n        map1.put(\"Alden Cantrell\", 12);\n        map1.put(\"Kierra Gentry\", 12);\n        map1.put(\"Pierre Cox\", 12);\n        assert !Solution.checkValue(map1, 10);\n\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"Cierra Vega\", 12);\n        map2.put(\"Alden Cantrell\", 12);\n        map2.put(\"Kierra Gentry\", 12);\n        map2.put(\"Pierre Cox\", 12);\n        assert Solution.checkValue(map2, 12);\n\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"Cierra Vega\", 12);\n        map3.put(\"Alden Cantrell\", 12);\n        map3.put(\"Kierra Gentry\", 12);\n        map3.put(\"Pierre Cox\", 12);\n        assert !Solution.checkValue(map3, 5);\n    }\n}\n",
        "prompt": "Write a function to check if all values are same in a dictionary.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n        for (int value : map.values()) {\n            if (value != n) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a function to check if all values are same in a dictionary.",
        "code_str_generate": "class Solution {\n    public static boolean checkValue(Map<String, Integer> map, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to check if all values are same in a dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        for (int value : map.values()) {\n            if (value != n) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 465,
        "code_str": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        return dict1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Map<String, String> test1 = new HashMap<>();\n        test1.put(\"c1\", \"Red\");\n        test1.put(\"c2\", \"Green\");\n        test1.put(\"c3\", null);\n        assert Solution.dropEmpty(test1).equals(Map.of(\"c1\", \"Red\", \"c2\", \"Green\"));\n\n        Map<String, String> test2 = new HashMap<>();\n        test2.put(\"c1\", \"Red\");\n        test2.put(\"c2\", null);\n        test2.put(\"c3\", null);\n        assert Solution.dropEmpty(test2).equals(Map.of(\"c1\", \"Red\"));\n\n        Map<String, String> test3 = new HashMap<>();\n        test3.put(\"c1\", null);\n        test3.put(\"c2\", \"Green\");\n        test3.put(\"c3\", null);\n        assert Solution.dropEmpty(test3).equals(Map.of(\"c2\", \"Green\"));\n    }\n}\n",
        "prompt": "Write a function to drop empty items from a given dictionary.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n",
        "java_prompt": "Write a function to drop empty items from a given dictionary.",
        "code_str_generate": "class Solution {\n    public static Map<String, String> dropEmpty(Map<String, String> dict1) {\n\n        /*\n        progame language:java\n        description:Write a function to drop empty items from a given dictionary.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        dict1.values().removeIf(Objects::isNull);\n        //begin to write code\n"
    },
    {
        "task_id": 466,
        "code_str": "class Solution {\n    static int findPeakUtil(int arr[], int low, int high, int n) {\n        int mid = low + (high - low) / 2;\n        if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n            return mid;\n        } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n            return findPeakUtil(arr, low, (mid - 1), n);\n        } else {\n            return findPeakUtil(arr, (mid + 1), high, n);\n        }\n    }\n\n    static int findPeak(int arr[], int n) {\n        return findPeakUtil(arr, 0, n - 1, n);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.findPeak(new int[]{1, 3, 20, 4, 1, 0}, 6) == 2;\n        assert Solution.findPeak(new int[]{2, 3, 4, 5, 6}, 5) == 4;\n        assert Solution.findPeak(new int[]{8, 9, 11, 12, 14, 15}, 6) == 5;\n    }\n}\n",
        "prompt": "Write a function to find the peak element in the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    static int findPeakUtil(int arr[], int low, int high, int n) {\n        int mid = low + (high - low) / 2;\n        if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n            return mid;\n        } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n            return findPeakUtil(arr, low, (mid - 1), n);\n        } else {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the peak element in the given array.",
        "code_str_generate": "class Solution {\n    static int findPeakUtil(int arr[], int low, int high, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the peak element in the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mid = low + (high - low) / 2;\n        if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == n - 1 || arr[mid + 1] <= arr[mid])) {\n            return mid;\n        } else if (mid > 0 && arr[mid - 1] > arr[mid]) {\n            return findPeakUtil(arr, low, (mid - 1), n);\n        } else {\n        //begin to write code\n"
    },
    {
        "task_id": 467,
        "code_str": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n        int octalNum = 0;\n        int countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            octalNum += remainder * countval;\n            countval = countval * 10;\n            deciNum /= 8;\n        }\n        return octalNum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.decimal_to_Octal(10) == 12;\n        assert Solution.decimal_to_Octal(2) == 2;\n        assert Solution.decimal_to_Octal(33) == 41;\n    }\n}\n",
        "prompt": "Write a python function to convert decimal number to octal number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n        int octalNum = 0;\n        int countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            //begin to write code\n",
        "java_prompt": "Write a java function to convert decimal number to octal number.",
        "code_str_generate": "class Solution {\n    public static int decimal_to_Octal(int deciNum) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert decimal number to octal number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int octalNum = 0;\n        int countval = 1;\n        int dNo = deciNum;\n        while (deciNum != 0) {\n            int remainder = deciNum % 8;\n            //begin to write code\n"
    },
    {
        "task_id": 468,
        "code_str": "class Solution {\n    public static int maxProduct(int arr[], int n) {\n        int mpis[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            mpis[i] = arr[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {\n                    mpis[i] = mpis[j] * arr[i];\n                }\n            }\n        }\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++) {\n            if (max < mpis[i]) {\n                max = mpis[i];\n            }\n        }\n        return max;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxProduct(new int[]{3, 100, 4, 5, 150, 6}, 6) == 45000;\n        assert solution.maxProduct(new int[]{4, 42, 55, 68, 80}, 5) == 50265600;\n        assert solution.maxProduct(new int[]{10, 22, 9, 33, 21, 50, 41, 60}, 8) == 21780000;\n    }\n}\n",
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int maxProduct(int arr[], int n) {\n        int mpis[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            mpis[i] = arr[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {\n                    mpis[i] = mpis[j] * arr[i];\n                }\n                //begin to write code\n",
        "java_prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
        "code_str_generate": "class Solution {\n    public static int maxProduct(int arr[], int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mpis[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            mpis[i] = arr[i];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i])) {\n                    mpis[i] = mpis[j] * arr[i];\n                }\n                //begin to write code\n"
    },
    {
        "task_id": 469,
        "code_str": "class Solution {\n    public int maxProfit(int[] price, int k) {\n        int n = price.length;\n        int[][] finalProfit = new int[k + 1][n];\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    finalProfit[i][j] = 0;\n                } else {\n                    int maxSoFar = 0;\n                    for (int x = 0; x < j; x++) {\n                        int currPrice = price[j] - price[x] + finalProfit[i - 1][x];\n                        if (maxSoFar < currPrice) {\n                            maxSoFar = currPrice;\n                        }\n                    }\n                    finalProfit[i][j] = Math.max(finalProfit[i][j - 1], maxSoFar);\n                }\n            }\n        }\n        return finalProfit[k][n - 1];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.maxProfit(new int[]{1, 5, 2, 3, 7, 6, 4, 5}, 3) == 10;\n        assert solution.maxProfit(new int[]{2, 4, 7, 5, 4, 3, 5}, 2) == 7;\n        assert solution.maxProfit(new int[]{10, 6, 8, 4, 2}, 2) == 2;\n    }\n}\n",
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int maxProfit(int[] price, int k) {\n        int n = price.length;\n        int[][] finalProfit = new int[k + 1][n];\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    finalProfit[i][j] = 0;\n                } else {\n                    int maxSoFar = 0;\n                    for (int x = 0; x < j; x++) {\n                        int currPrice = price[j] - price[x] + finalProfit[i - 1][x];\n                        //begin to write code\n",
        "java_prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
        "code_str_generate": "class Solution {\n    public int maxProfit(int[] price, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the maximum profit earned from a maximum of k stock transactions\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = price.length;\n        int[][] finalProfit = new int[k + 1][n];\n        for (int i = 0; i <= k; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == 0 || j == 0) {\n                    finalProfit[i][j] = 0;\n                } else {\n                    int maxSoFar = 0;\n                    for (int x = 0; x < j; x++) {\n                        int currPrice = price[j] - price[x] + finalProfit[i - 1][x];\n                        //begin to write code\n"
    },
    {
        "task_id": 470,
        "code_str": "class Solution {\n    public static int[] addPairwise(int[] testArr) {\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i++) {\n            res[i] = testArr[i] + testArr[i + 1];\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Arrays.equals(Solution.addPairwise(new int[]{1, 5, 7, 8, 10}), new int[]{6, 12, 15, 18});\n        assert Arrays.equals(Solution.addPairwise(new int[]{2, 6, 8, 9, 11}), new int[]{8, 14, 17, 20});\n        assert Arrays.equals(Solution.addPairwise(new int[]{3, 7, 9, 10, 12}), new int[]{10, 16, 19, 22});\n    }\n}\n",
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] addPairwise(int[] testArr) {\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i++) {\n            res[i] = testArr[i] + testArr[i + 1];\n            //begin to write code\n",
        "java_prompt": "Write a function to find the pairwise addition of the elements of the given tuples.",
        "code_str_generate": "class Solution {\n    public static int[] addPairwise(int[] testArr) {\n\n        /*\n        progame language:java\n        description:Write a function to find the pairwise addition of the elements of the given tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[] res = new int[testArr.length - 1];\n        for (int i = 0; i < testArr.length - 1; i++) {\n            res[i] = testArr[i] + testArr[i + 1];\n            //begin to write code\n"
    },
    {
        "task_id": 471,
        "code_str": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n        }\n        return mul % n;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.find_remainder(new int[]{100, 10, 5, 25, 35, 14}, 6, 11) == 9;\n        assert Solution.find_remainder(new int[]{1,1,1}, 3, 1) == 0;\n        assert Solution.find_remainder(new int[]{1,2,1}, 3, 2) == 0;\n    }\n}\n",
        "prompt": "Write a python function to find remainder of array multiplication divided by n.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find remainder of array multiplication divided by n.",
        "code_str_generate": "class Solution {\n    public static int find_remainder(int[] arr, int lens, int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of array multiplication divided by n.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mul = 1;\n        for (int i = 0; i < lens; i++) {\n            mul = (mul * (arr[i] % n)) % n;\n            //begin to write code\n"
    },
    {
        "task_id": 472,
        "code_str": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.checkConsecutive(new int[]{1,2,3,4,5}) == true;\n        assert Solution.checkConsecutive(new int[]{1,2,3,5,6}) == false;\n        assert Solution.checkConsecutive(new int[]{1,2,1}) == false;\n    }\n}\n",
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n                //begin to write code\n",
        "java_prompt": "Write a java function to check whether the given list contains consecutive numbers or not.",
        "code_str_generate": "class Solution {\n    public static boolean checkConsecutive(int[] l) {\n\n        /*\n        progame language:java\n        description:Write a java function to check whether the given list contains consecutive numbers or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(l);\n        for (int i = 0; i < l.length - 1; i++) {\n            if (l[i] + 1 != l[i + 1]) {\n                return false;\n                //begin to write code\n"
    },
    {
        "task_id": 473,
        "code_str": "class Solution {\n    public Set<Tuple> tupleIntersection(List<Tuple> testList1, List<Tuple> testList2) {\n        Set<Tuple> set1 = new HashSet<>();\n        for (Tuple tuple : testList1) {\n            set1.add(tuple.sort());\n        }\n\n        Set<Tuple> set2 = new HashSet<>();\n        for (Tuple tuple : testList2) {\n            set2.add(tuple.sort());\n        }\n\n        set1.retainAll(set2);\n        return set1;\n    }\n\n    class Tuple {\n        int x;\n        int y;\n\n        public Tuple(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        public Tuple sort() {\n            if (x > y) {\n                int temp = x;\n                x = y;\n                y = temp;\n            }\n            return this;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Tuple tuple = (Tuple) o;\n            return x == tuple.x && y == tuple.y;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(x, y);\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Solution.Tuple> testList1 = Arrays.asList(solution.new Tuple(3, 4), solution.new Tuple(5, 6), solution.new Tuple(9, 10), solution.new Tuple(4, 5));\n        List<Solution.Tuple> testList2 = Arrays.asList(solution.new Tuple(5, 4), solution.new Tuple(3, 4), solution.new Tuple(6, 5), solution.new Tuple(9, 11));\n        Set<Solution.Tuple> result = solution.tupleIntersection(testList1, testList2);\n        assert result.equals(new HashSet<>(Arrays.asList(solution.new Tuple(4, 5), solution.new Tuple(3, 4), solution.new Tuple(5, 6))));\n\n        testList1 = Arrays.asList(solution.new Tuple(4, 1), solution.new Tuple(7, 4), solution.new Tuple(11, 13), solution.new Tuple(17, 14));\n        testList2 = Arrays.asList(solution.new Tuple(1, 4), solution.new Tuple(7, 4), solution.new Tuple(16, 12), solution.new Tuple(10, 13));\n        result = solution.tupleIntersection(testList1, testList2);\n        assert result.equals(new HashSet<>(Arrays.asList(solution.new Tuple(4, 7), solution.new Tuple(1, 4))));\n\n        testList1 = Arrays.asList(solution.new Tuple(2, 1), solution.new Tuple(3, 2), solution.new Tuple(1, 3), solution.new Tuple(1, 4));\n        testList2 = Arrays.asList(solution.new Tuple(11, 2), solution.new Tuple(2, 3), solution.new Tuple(6, 2), solution.new Tuple(1, 3));\n        result = solution.tupleIntersection(testList1, testList2);\n        assert result.equals(new HashSet<>(Arrays.asList(solution.new Tuple(1, 3), solution.new Tuple(2, 3))));\n    }\n}\n",
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public Set<Tuple> tupleIntersection(List<Tuple> testList1, List<Tuple> testList2) {\n        Set<Tuple> set1 = new HashSet<>();\n        for (Tuple tuple : testList1) {\n            set1.add(tuple.sort());\n        }\n        Set<Tuple> set2 = new HashSet<>();\n        for (Tuple tuple : testList2) {\n            set2.add(tuple.sort());\n        }\n        set1.retainAll(set2);\n        return set1;\n    }\n    class Tuple {\n        int x;\n        int y;\n        public Tuple(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        public Tuple sort() {\n        //begin to write code\n",
        "java_prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
        "code_str_generate": "class Solution {\n    public Set<Tuple> tupleIntersection(List<Tuple> testList1, List<Tuple> testList2) {\n\n        /*\n        progame language:java\n        description:Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<Tuple> set1 = new HashSet<>();\n        for (Tuple tuple : testList1) {\n            set1.add(tuple.sort());\n        }\n        Set<Tuple> set2 = new HashSet<>();\n        for (Tuple tuple : testList2) {\n            set2.add(tuple.sort());\n        }\n        set1.retainAll(set2);\n        return set1;\n    }\n    class Tuple {\n        int x;\n        int y;\n        public Tuple(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n        public Tuple sort() {\n        //begin to write code\n"
    },
    {
        "task_id": 474,
        "code_str": "class Solution {\n    public String replaceChar(String str1, char ch, char newch) {\n        String str2 = str1.replace(ch, newch);\n        return str2;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.replaceChar(\"polygon\", 'y', 'l').equals(\"pollgon\");\n        assert solution.replaceChar(\"character\", 'c', 'a').equals(\"aharaater\");\n        assert solution.replaceChar(\"python\", 'l', 'a').equals(\"python\");\n    }\n}\n",
        "prompt": "Write a function to replace characters in a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String replaceChar(String str1, char ch, char newch) {\n        String str2 = str1.replace(ch, newch);\n        //begin to write code\n",
        "java_prompt": "Write a function to replace characters in a string.",
        "code_str_generate": "class Solution {\n    public String replaceChar(String str1, char ch, char newch) {\n\n        /*\n        progame language:java\n        description:Write a function to replace characters in a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String str2 = str1.replace(ch, newch);\n        //begin to write code\n"
    },
    {
        "task_id": 475,
        "code_str": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        return list;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Map<String, Integer> map1 = new HashMap<>();\n        map1.put(\"Math\", 81);\n        map1.put(\"Physics\", 83);\n        map1.put(\"Chemistry\", 87);\n        assert solution.sortCounter(map1).equals(Arrays.asList(new AbstractMap.SimpleEntry<>(\"Chemistry\", 87), new AbstractMap.SimpleEntry<>(\"Physics\", 83), new AbstractMap.SimpleEntry<>(\"Math\", 81)));\n\n        Map<String, Integer> map2 = new HashMap<>();\n        map2.put(\"Math\", 400);\n        map2.put(\"Physics\", 300);\n        map2.put(\"Chemistry\", 250);\n        assert solution.sortCounter(map2).equals(Arrays.asList(new AbstractMap.SimpleEntry<>(\"Math\", 400), new AbstractMap.SimpleEntry<>(\"Physics\", 300), new AbstractMap.SimpleEntry<>(\"Chemistry\", 250)));\n\n        Map<String, Integer> map3 = new HashMap<>();\n        map3.put(\"Math\", 900);\n        map3.put(\"Physics\", 1000);\n        map3.put(\"Chemistry\", 1250);\n        assert solution.sortCounter(map3).equals(Arrays.asList(new AbstractMap.SimpleEntry<>(\"Chemistry\", 1250), new AbstractMap.SimpleEntry<>(\"Physics\", 1000), new AbstractMap.SimpleEntry<>(\"Math\", 900)));\n    }\n}\n",
        "prompt": "Write a function to sort counter by value.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        //begin to write code\n",
        "java_prompt": "Write a function to sort counter by value.",
        "code_str_generate": "class Solution {\n    public static List<Map.Entry<String, Integer>> sortCounter(Map<String, Integer> map) {\n\n        /*\n        progame language:java\n        description:Write a function to sort counter by value.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());\n        list.sort(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n        //begin to write code\n"
    },
    {
        "task_id": 476,
        "code_str": "class Solution {\n    public int bigSum(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            if(num < min) {\n                min = num;\n            }\n        }\n        return max + min;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.bigSum(new int[]{1,2,3}) == 4;\n        assert solution.bigSum(new int[]{-1,2,3,4}) == 3;\n        assert solution.bigSum(new int[]{2,3,6}) == 8;\n    }\n}\n",
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int bigSum(int[] nums) {\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the sum of the largest and smallest value in a given array.",
        "code_str_generate": "class Solution {\n    public int bigSum(int[] nums) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the sum of the largest and smallest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int max = nums[0];\n        int min = nums[0];\n        for(int num : nums) {\n            if(num > max) {\n                max = num;\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 477,
        "code_str": "class Solution {\n    public static String isLower(String string) {\n        return string.toLowerCase();\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isLower(\"InValid\").equals(\"invalid\");\n        assert Solution.isLower(\"TruE\").equals(\"true\");\n        assert Solution.isLower(\"SenTenCE\").equals(\"sentence\");\n    }\n}\n",
        "prompt": "Write a python function to convert the given string to lower case.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String isLower(String string) {\n        return string.toLowerCase();\n        //begin to write code\n",
        "java_prompt": "Write a java function to convert the given string to lower case.",
        "code_str_generate": "class Solution {\n    public static String isLower(String string) {\n\n        /*\n        progame language:java\n        description:Write a java function to convert the given string to lower case.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        return string.toLowerCase();\n        //begin to write code\n"
    },
    {
        "task_id": 478,
        "code_str": "class Solution {\n    public String remove_lowercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        String result = matcher.replaceAll(\"\");\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove_lowercase(\"PYTHon\").equals(\"PYTH\");\n        assert solution.remove_lowercase(\"FInD\").equals(\"FID\");\n        assert solution.remove_lowercase(\"STRinG\").equals(\"STRG\");\n    }\n}\n",
        "prompt": "Write a function to remove lowercase substrings from a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String remove_lowercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove lowercase substrings from a given string.",
        "code_str_generate": "class Solution {\n    public String remove_lowercase(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove lowercase substrings from a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n"
    },
    {
        "task_id": 479,
        "code_str": "class Solution {\n    public static int firstDigit(int n) {\n        while (n >= 10) {\n            n = n / 10;\n        }\n        return n;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.firstDigit(123) == 1;\n        assert Solution.firstDigit(456) == 4;\n        assert Solution.firstDigit(12) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find the first digit of a given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int firstDigit(int n) {\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first digit of a given number.",
        "code_str_generate": "class Solution {\n    public static int firstDigit(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first digit of a given number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        while (n >= 10) {\n            n = n / 10;\n            //begin to write code\n"
    },
    {
        "task_id": 480,
        "code_str": "class Solution {\n    static final int ASCII_SIZE = 256;\n    public char getMaxOccuringChar(String str1) {\n        int ctr[] = new int[ASCII_SIZE];\n        int max = -1;\n        char ch = ' ';\n        for (int i = 0; i < str1.length(); i++) {\n            ctr[str1.charAt(i)]++;\n        }\n        for (int i = 0; i < str1.length(); i++) {\n            if (max < ctr[str1.charAt(i)]) {\n                max = ctr[str1.charAt(i)];\n                ch = str1.charAt(i);\n            }\n        }\n        return ch;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.getMaxOccuringChar(\"data\") == 'a';\n        assert solution.getMaxOccuringChar(\"create\") == 'e';\n        assert solution.getMaxOccuringChar(\"brilliant girl\") == 'i';\n    }\n}\n",
        "prompt": "Write a python function to find the maximum occurring character in a given string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    static final int ASCII_SIZE = 256;\n    public char getMaxOccuringChar(String str1) {\n        int ctr[] = new int[ASCII_SIZE];\n        int max = -1;\n        char ch = ' ';\n        for (int i = 0; i < str1.length(); i++) {\n            ctr[str1.charAt(i)]++;\n        }\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the maximum occurring character in a given string.",
        "code_str_generate": "class Solution {\n    static final int ASCII_SIZE = 256;\n    public char getMaxOccuringChar(String str1) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the maximum occurring character in a given string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int ctr[] = new int[ASCII_SIZE];\n        int max = -1;\n        char ch = ' ';\n        for (int i = 0; i < str1.length(); i++) {\n            ctr[str1.charAt(i)]++;\n        }\n        //begin to write code\n"
    },
    {
        "task_id": 481,
        "code_str": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n        if (sum == 0) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n        }\n        if (set[n - 1] > sum) {\n            return isSubsetSum(set, n - 1, sum);\n        }\n        return isSubsetSum(set, n - 1, sum) || isSubsetSum(set, n - 1, sum - set[n - 1]);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.isSubsetSum(new int[]{3, 34, 4, 12, 5, 2}, 6, 9) == true;\n        assert Solution.isSubsetSum(new int[]{3, 34, 4, 12, 5, 2}, 6, 30) == false;\n        assert Solution.isSubsetSum(new int[]{3, 34, 4, 12, 5, 2}, 6, 15) == true;\n    }\n}\n",
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n        if (sum == 0) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n            //begin to write code\n",
        "java_prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
        "code_str_generate": "class Solution {\n    public static boolean isSubsetSum(int set[], int n, int sum) {\n\n        /*\n        progame language:java\n        description:Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (sum == 0) {\n            return true;\n        }\n        if (n == 0) {\n            return false;\n            //begin to write code\n"
    },
    {
        "task_id": 482,
        "code_str": "class Solution {\n    public String match(String text) {\n        String pattern = \"[A-Z]+[a-z]+$\";\n        Pattern compiledPattern = Pattern.compile(pattern);\n        Matcher matcher = compiledPattern.matcher(text);\n        if (matcher.find()) {\n            return \"Yes\";\n        } else {\n            return \"No\";\n        }\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.match(\"Geeks\").equals(\"Yes\");\n        assert solution.match(\"geeksforGeeks\").equals(\"Yes\");\n        assert solution.match(\"geeks\").equals(\"No\");\n    }\n}\n",
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String match(String text) {\n        String pattern = \"[A-Z]+[a-z]+$\";\n        Pattern compiledPattern = Pattern.compile(pattern);\n        Matcher matcher = compiledPattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n",
        "java_prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
        "code_str_generate": "class Solution {\n    public String match(String text) {\n\n        /*\n        progame language:java\n        description:Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String pattern = \"[A-Z]+[a-z]+$\";\n        Pattern compiledPattern = Pattern.compile(pattern);\n        Matcher matcher = compiledPattern.matcher(text);\n        if (matcher.find()) {\n        //begin to write code\n"
    },
    {
        "task_id": 483,
        "code_str": "class Solution {\n    public static int first_Factorial_Divisible_Number(int x) {\n        int i = 1;\n        int fact = 1;\n        for (i = 1; i < x; i++) {\n            fact = fact * i;\n            if (fact % x == 0) {\n                break;\n            }\n        }\n        return i;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.first_Factorial_Divisible_Number(10) == 5;\n        assert Solution.first_Factorial_Divisible_Number(15) == 5;\n        assert Solution.first_Factorial_Divisible_Number(5) == 5;\n    }\n}\n",
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int first_Factorial_Divisible_Number(int x) {\n        int i = 1;\n        int fact = 1;\n        for (i = 1; i < x; i++) {\n            fact = fact * i;\n            if (fact % x == 0) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the first natural number whose factorial is divisible by x.",
        "code_str_generate": "class Solution {\n    public static int first_Factorial_Divisible_Number(int x) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the first natural number whose factorial is divisible by x.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int i = 1;\n        int fact = 1;\n        for (i = 1; i < x; i++) {\n            fact = fact * i;\n            if (fact % x == 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 484,
        "code_str": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n            }\n        }\n        return res;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        List<List<String>> testList1 = new ArrayList<>(Arrays.asList(Arrays.asList(\"Hello\", \"dude\"), Arrays.asList(\"How\", \"are\"), Arrays.asList(\"you\", \"?\")));\n        List<List<String>> testList2 = new ArrayList<>(Arrays.asList(Arrays.asList(\"Hello\", \"dude\"), Arrays.asList(\"How\", \"are\")));\n        assert solution.removeMatchingTuple(testList1, testList2).equals(Arrays.asList(Arrays.asList(\"you\", \"?\")));\n\n        testList1 = new ArrayList<>(Arrays.asList(Arrays.asList(\"Part\", \"of\"), Arrays.asList(\"the\", \"journey\"), Arrays.asList(\"is \", \"end\")));\n        testList2 = new ArrayList<>(Arrays.asList(Arrays.asList(\"Journey\", \"the\"), Arrays.asList(\"is\", \"end\")));\n        assert solution.removeMatchingTuple(testList1, testList2).equals(Arrays.asList(Arrays.asList(\"Part\", \"of\"), Arrays.asList(\"the\", \"journey\"), Arrays.asList(\"is \", \"end\")));\n\n        testList1 = new ArrayList<>(Arrays.asList(Arrays.asList(\"Its\", \"been\"), Arrays.asList(\"a\", \"long\"), Arrays.asList(\"day\", \"without\")));\n        testList2 = new ArrayList<>(Arrays.asList(Arrays.asList(\"a\", \"long\"), Arrays.asList(\"my\", \"friend\")));\n        assert solution.removeMatchingTuple(testList1, testList2).equals(Arrays.asList(Arrays.asList(\"Its\", \"been\"), Arrays.asList(\"day\", \"without\")));\n    }\n}\n",
        "prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n",
        "java_prompt": "Write a function to remove the matching tuples from the given two tuples.",
        "code_str_generate": "class Solution {\n    public static List<List<String>> removeMatchingTuple(List<List<String>> testList1, List<List<String>> testList2) {\n\n        /*\n        progame language:java\n        description:Write a function to remove the matching tuples from the given two tuples.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<List<String>> res = new ArrayList<>();\n        for (List<String> sub : testList1) {\n            if (!testList2.contains(sub)) {\n                res.add(sub);\n                //begin to write code\n"
    },
    {
        "task_id": 485,
        "code_str": "class Solution {\n    public static boolean is_palindrome(int n) {\n        int divisor = 1;\n        while (n / divisor >= 10) {\n            divisor *= 10;\n        }\n        while (n != 0) {\n            int leading = n / divisor;\n            int trailing = n % 10;\n            if (leading != trailing) {\n                return false;\n            }\n            n = (n % divisor) / 10;\n            divisor = divisor / 100;\n        }\n        return true;\n    }\n\n    public static int largest_palindrome(Integer[] A, int n) {\n        Arrays.sort(A, Collections.reverseOrder());\n        for (int i = 0; i < n; i++) {\n            if (is_palindrome(A[i])) {\n                return A[i];\n            }\n        }\n        return -1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.largest_palindrome(new Integer[]{1, 232, 54545, 999991}, 4) == 54545;\n        assert Solution.largest_palindrome(new Integer[]{1, 2, 3, 4, 5, 50}, 6) == 5;\n        assert Solution.largest_palindrome(new Integer[]{1, 3, 7, 9, 45}, 5)  == 9;\n    }\n}\n",
        "prompt": "Write a function to find the largest palindromic number in the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean is_palindrome(int n) {\n        int divisor = 1;\n        while (n / divisor >= 10) {\n            divisor *= 10;\n        }\n        while (n != 0) {\n            int leading = n / divisor;\n            int trailing = n % 10;\n            if (leading != trailing) {\n                return false;\n            }\n            n = (n % divisor) / 10;\n            divisor = divisor / 100;\n            //begin to write code\n",
        "java_prompt": "Write a function to find the largest palindromic number in the given array.",
        "code_str_generate": "class Solution {\n    public static boolean is_palindrome(int n) {\n        int divisor = 1;\n        while (n / divisor >= 10) {\n            divisor *= 10;\n        }\n        while (n != 0) {\n            int leading = n / divisor;\n            int trailing = n % 10;\n            if (leading != trailing) {\n                return false;\n            }\n            n = (n % divisor) / 10;\n            divisor = divisor / 100;\n            //begin to write code\n"
    },
    {
        "task_id": 486,
        "code_str": "class Solution {\n    public static double nCr(int n, int r) {\n        if (r > n / 2) {\n            r = n - r;\n        }\n        double answer = 1;\n        for (int i = 1; i <= r; i++) {\n            answer *= (n - r + i);\n            answer /= i;\n        }\n        return answer;\n    }\n\n    public static double binomial_probability(int n, int k, double p) {\n        return (nCr(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k));\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.binomial_probability(10, 5, 1.0/3) - 0.13656454808718185) < 1e-9;\n        assert Math.abs(Solution.binomial_probability(11, 6, 2.0/4) - 0.2255859375) < 1e-9;\n        assert Math.abs(Solution.binomial_probability(12, 7, 3.0/5) - 0.227030335488) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to compute binomial probability for the given number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double nCr(int n, int r) {\n        if (r > n / 2) {\n            r = n - r;\n        }\n        double answer = 1;\n        for (int i = 1; i <= r; i++) {\n            answer *= (n - r + i);\n            //begin to write code\n",
        "java_prompt": "Write a function to compute binomial probability for the given number.",
        "code_str_generate": "class Solution {\n    public static double nCr(int n, int r) {\n        if (r > n / 2) {\n            r = n - r;\n        }\n        double answer = 1;\n        for (int i = 1; i <= r; i++) {\n            answer *= (n - r + i);\n            //begin to write code\n"
    },
    {
        "task_id": 487,
        "code_str": "class Solution {\n    public static Tuple[] sortTuple(Tuple[] tup) {\n        Arrays.sort(tup, new Comparator<Tuple>() {\n            @Override\n            public int compare(Tuple o1, Tuple o2) {\n                return o1.y - o2.y;\n            }\n        });\n        return tup;\n    }\n}\n\nclass Tuple {\n    int x;\n    int y;\n\n    public Tuple(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        Tuple[] tuples1 = {new Tuple(1, 3), new Tuple(3, 2), new Tuple(2, 1)};\n        Tuple[] sortedTuples1 = solution.sortTuple(tuples1);\n        assert sortedTuples1[0].x == 2 && sortedTuples1[0].y == 1;\n        assert sortedTuples1[1].x == 3 && sortedTuples1[1].y == 2;\n        assert sortedTuples1[2].x == 1 && sortedTuples1[2].y == 3;\n\n        Tuple[] tuples2 = {new Tuple(2, 4), new Tuple(3, 3), new Tuple(1, 1)};\n        Tuple[] sortedTuples2 = solution.sortTuple(tuples2);\n        assert sortedTuples2[0].x == 1 && sortedTuples2[0].y == 1;\n        assert sortedTuples2[1].x == 3 && sortedTuples2[1].y == 3;\n        assert sortedTuples2[2].x == 2 && sortedTuples2[2].y == 4;\n\n        Tuple[] tuples3 = {new Tuple(3, 9), new Tuple(6, 7), new Tuple(4, 3)};\n        Tuple[] sortedTuples3 = solution.sortTuple(tuples3);\n        assert sortedTuples3[0].x == 4 && sortedTuples3[0].y == 3;\n        assert sortedTuples3[1].x == 6 && sortedTuples3[1].y == 7;\n        assert sortedTuples3[2].x == 3 && sortedTuples3[2].y == 9;\n    }\n}\n",
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\nclass Tuple {\n    public static Tuple[] sortTuple(Tuple[] tup) {\n        Arrays.sort(tup, new Comparator<Tuple>() {\n            @Override\n            public int compare(Tuple o1, Tuple o2) {\n                return o1.y - o2.y;\n            }\n        });\n        return tup;\n        //begin to write code\n",
        "java_prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
        "code_str_generate": "class Solution {\nclass Tuple {\n    public static Tuple[] sortTuple(Tuple[] tup) {\n\n        /*\n        progame language:java\n        description:Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Arrays.sort(tup, new Comparator<Tuple>() {\n            @Override\n            public int compare(Tuple o1, Tuple o2) {\n                return o1.y - o2.y;\n            }\n        });\n        return tup;\n        //begin to write code\n"
    },
    {
        "task_id": 488,
        "code_str": "class Solution {\n    public static double areaPentagon(double a) {\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        return area;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.areaPentagon(5) - 43.01193501472417) < 1e-9;\n        assert Math.abs(Solution.areaPentagon(10) - 172.0477400588967) < 1e-9;\n        assert Math.abs(Solution.areaPentagon(15) - 387.10741513251753) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to find the area of a pentagon.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double areaPentagon(double a) {\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the area of a pentagon.",
        "code_str_generate": "class Solution {\n    public static double areaPentagon(double a) {\n\n        /*\n        progame language:java\n        description:Write a function to find the area of a pentagon.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double area = (Math.sqrt(5 * (5 + 2 * Math.sqrt(5))) * Math.pow(a, 2)) / 4.0;\n        //begin to write code\n"
    },
    {
        "task_id": 489,
        "code_str": "class Solution {\n    public static int frequency_Of_Largest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n                freq = 1;\n            } else if (arr[i] == mn) {\n                freq += 1;\n            }\n        }\n        return freq;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.frequency_Of_Largest(5, new int[]{1,2,3,4,4}) == 2;\n        assert Solution.frequency_Of_Largest(3, new int[]{5,6,5}) == 1;\n        assert Solution.frequency_Of_Largest(4, new int[]{2,7,7,7}) == 3;\n    }\n}\n",
        "prompt": "Write a python function to find the frequency of the largest value in a given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int frequency_Of_Largest(int n, int[] arr) {\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n",
        "java_prompt": "Write a java function to find the frequency of the largest value in a given array.",
        "code_str_generate": "class Solution {\n    public static int frequency_Of_Largest(int n, int[] arr) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the frequency of the largest value in a given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int mn = arr[0];\n        int freq = 1;\n        for (int i = 1; i < n; i++) {\n            if (arr[i] > mn) {\n                mn = arr[i];\n                freq = 1;\n                //begin to write code\n"
    },
    {
        "task_id": 490,
        "code_str": "class Pair {\n    int first;\n    int second;\n\n    public Pair(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Pair pair = (Pair) o;\n        return first == pair.first && second == pair.second;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(first, second);\n    }\n}\n\nclass Solution {\n    public static Set<Pair> extractSymmetric(List<Pair> testList) {\n        Set<Pair> temp = new HashSet<>(testList);\n        temp.retainAll(swapPairs(testList));\n        Set<Pair> res = new HashSet<>();\n        for (Pair pair : temp) {\n            if (pair.first < pair.second) {\n                res.add(pair);\n            }\n        }\n        return res;\n    }\n\n    private static Set<Pair> swapPairs(List<Pair> pairs) {\n        Set<Pair> swapped = new HashSet<>();\n        for (Pair pair : pairs) {\n            swapped.add(new Pair(pair.second, pair.first));\n        }\n        return swapped;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        List<Pair> testList1 = Arrays.asList(new Pair(6, 7), new Pair(2, 3), new Pair(7, 6), new Pair(9, 8), new Pair(10, 2), new Pair(8, 9));\n        Set<Pair> result1 = new HashSet<>(Arrays.asList(new Pair(6, 7), new Pair(8, 9)));\n        assert Solution.extractSymmetric(testList1).equals(result1);\n\n        List<Pair> testList2 = Arrays.asList(new Pair(7, 8), new Pair(3, 4), new Pair(8, 7), new Pair(10, 9), new Pair(11, 3), new Pair(9, 10));\n        Set<Pair> result2 = new HashSet<>(Arrays.asList(new Pair(7, 8), new Pair(9, 10)));\n        assert Solution.extractSymmetric(testList2).equals(result2);\n\n        List<Pair> testList3 = Arrays.asList(new Pair(8, 9), new Pair(4, 5), new Pair(9, 8), new Pair(11, 10), new Pair(12, 4), new Pair(10, 11));\n        Set<Pair> result3 = new HashSet<>(Arrays.asList(new Pair(8, 9), new Pair(10, 11)));\n        assert Solution.extractSymmetric(testList3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "is_deleted": 1,
        "code_str_deleted": "class Pair {\nclass Solution {\n    int first;\n    int second;\n    public Pair(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Pair pair = (Pair) o;\n        return first == pair.first && second == pair.second;\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(first, second);\n    }\n}\n//begin to write code\n",
        "java_prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
        "code_str_generate": "class Pair {\nclass Solution {\n    int first;\n    int second;\n    public Pair(int first, int second) {\n        this.first = first;\n        this.second = second;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Pair pair = (Pair) o;\n        return first == pair.first && second == pair.second;\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(first, second);\n    }\n}\n//begin to write code\n"
    },
    {
        "task_id": 491,
        "code_str": "class Solution {\n    public static double sum_gp(int a, int n, int r) {\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        return total;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sum_gp(1,5,2) == 31;\n        assert Solution.sum_gp(1,5,4) == 341;\n        assert Solution.sum_gp(2,6,3) == 728;\n    }\n}\n",
        "prompt": "Write a function to find the sum of geometric progression series.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double sum_gp(int a, int n, int r) {\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the sum of geometric progression series.",
        "code_str_generate": "class Solution {\n    public static double sum_gp(int a, int n, int r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the sum of geometric progression series.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double total = (a * (1 - Math.pow(r, n))) / (1 - r);\n        //begin to write code\n"
    },
    {
        "task_id": 492,
        "code_str": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n                if (item < itemList[mid]) {\n                    last = mid - 1;\n                } else {\n                    first = mid + 1;\n                }\n            }\n        }\n        return found;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert !solution.binarySearch(new int[]{1,2,3,5,8}, 6);\n        assert solution.binarySearch(new int[]{7, 8, 9, 10, 13}, 10);\n        assert !solution.binarySearch(new int[]{11, 13, 14, 19, 22, 36}, 23);\n    }\n}\n",
        "prompt": "Write a function to search an element in the given array by using binary search.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n",
        "java_prompt": "Write a function to search an element in the given array by using binary search.",
        "code_str_generate": "class Solution {\n    public boolean binarySearch(int[] itemList, int item) {\n\n        /*\n        progame language:java\n        description:Write a function to search an element in the given array by using binary search.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int first = 0;\n        int last = itemList.length - 1;\n        boolean found = false;\n        while (first <= last && !found) {\n            int mid = (first + last) / 2;\n            if (itemList[mid] == item) {\n                found = true;\n            } else {\n            //begin to write code\n"
    },
    {
        "task_id": 493,
        "code_str": "class Solution {\n    public static List<List<double[]>> calculatePolygons(double startx, double starty, double endx, double endy, double radius) {\n        double sl = (2 * radius) * Math.tan(Math.PI / 6);\n        double p = sl * 0.5;\n        double b = sl * Math.cos(Math.toRadians(30));\n        double w = b * 2;\n        double h = 2 * sl;\n        startx = startx - w;\n        starty = starty - h;\n        endx = endx + w;\n        endy = endy + h;\n        double origx = startx;\n        double origy = starty;\n        double xoffset = b;\n        double yoffset = 3 * p;\n        List<List<double[]>> polygons = new ArrayList<>();\n        int row = 1;\n        int counter = 0;\n        while (starty < endy) {\n            if (row % 2 == 0) {\n                startx = origx + xoffset;\n            } else {\n                startx = origx;\n            }\n            while (startx < endx) {\n                double p1x = startx;\n                double p1y = starty + p;\n                double p2x = startx;\n                double p2y = starty + (3 * p);\n                double p3x = startx + b;\n                double p3y = starty + h;\n                double p4x = startx + w;\n                double p4y = starty + (3 * p);\n                double p5x = startx + w;\n                double p5y = starty + p;\n                double p6x = startx + b;\n                double p6y = starty;\n                List<double[]> poly = new ArrayList<>();\n                poly.add(new double[]{p1x, p1y});\n                poly.add(new double[]{p2x, p2y});\n                poly.add(new double[]{p3x, p3y});\n                poly.add(new double[]{p4x, p4y});\n                poly.add(new double[]{p5x, p5y});\n                poly.add(new double[]{p6x, p6y});\n                poly.add(new double[]{p1x, p1y});\n                polygons.add(poly);\n                counter += 1;\n                startx += w;\n            }\n            starty += yoffset;\n            row += 1;\n        }\n        return polygons;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<List<double[]>> result1 = Solution.calculatePolygons(1,1, 4, 4, 3);\n        for (List<double[]> polygon : result1) {\n            for (double[] point : polygon) {\n                System.out.println(\"(\" + point[0] + \", \" + point[1] + \")\");\n            }\n            System.out.println();\n        }\n\n        List<List<double[]>> result2 = Solution.calculatePolygons(5,4,7,9,8);\n        for (List<double[]> polygon : result2) {\n            for (double[] point : polygon) {\n                System.out.println(\"(\" + point[0] + \", \" + point[1] + \")\");\n            }\n            System.out.println();\n        }\n\n        List<List<double[]>> result3 = Solution.calculatePolygons(9,6,4,3,2);\n        for (List<double[]> polygon : result3) {\n            for (double[] point : polygon) {\n                System.out.println(\"(\" + point[0] + \", \" + point[1] + \")\");\n            }\n            System.out.println();\n        }\n    }\n}\n",
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static List<List<double[]>> calculatePolygons(double startx, double starty, double endx, double endy, double radius) {\n        double sl = (2 * radius) * Math.tan(Math.PI / 6);\n        double p = sl * 0.5;\n        double b = sl * Math.cos(Math.toRadians(30));\n        double w = b * 2;\n        double h = 2 * sl;\n        startx = startx - w;\n        starty = starty - h;\n        endx = endx + w;\n        endy = endy + h;\n        double origx = startx;\n        double origy = starty;\n        double xoffset = b;\n        double yoffset = 3 * p;\n        List<List<double[]>> polygons = new ArrayList<>();\n        int row = 1;\n        int counter = 0;\n        while (starty < endy) {\n            if (row % 2 == 0) {\n                startx = origx + xoffset;\n            } else {\n                startx = origx;\n            }\n            while (startx < endx) {\n                double p1x = startx;\n                double p1y = starty + p;\n                double p2x = startx;\n                //begin to write code\n",
        "java_prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
        "code_str_generate": "class Solution {\n    public static List<List<double[]>> calculatePolygons(double startx, double starty, double endx, double endy, double radius) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double sl = (2 * radius) * Math.tan(Math.PI / 6);\n        double p = sl * 0.5;\n        double b = sl * Math.cos(Math.toRadians(30));\n        double w = b * 2;\n        double h = 2 * sl;\n        startx = startx - w;\n        starty = starty - h;\n        endx = endx + w;\n        endy = endy + h;\n        double origx = startx;\n        double origy = starty;\n        double xoffset = b;\n        double yoffset = 3 * p;\n        List<List<double[]>> polygons = new ArrayList<>();\n        int row = 1;\n        int counter = 0;\n        while (starty < endy) {\n            if (row % 2 == 0) {\n                startx = origx + xoffset;\n            } else {\n                startx = origx;\n            }\n            while (startx < endx) {\n                double p1x = startx;\n                double p1y = starty + p;\n                double p2x = startx;\n                //begin to write code\n"
    },
    {
        "task_id": 494,
        "code_str": "class Solution {\n    public static String binaryToInteger(int[] testTup) {\n        StringBuilder binary = new StringBuilder();\n        for (int i : testTup) {\n            binary.append(i);\n        }\n        int decimal=Integer.parseInt(binary.toString(),2);\n        return String.valueOf(decimal);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.binaryToInteger(new int[]{1, 1, 0, 1, 0, 0, 1}).equals(\"105\");\n        assert Solution.binaryToInteger(new int[]{0, 1, 1, 0, 0, 1, 0, 1}).equals(\"101\");\n        assert Solution.binaryToInteger(new int[]{1, 1, 0, 1, 0, 1}).equals(\"53\");\n    }\n}\n",
        "prompt": "Write a function to convert the given binary tuple to integer.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String binaryToInteger(int[] testTup) {\n        StringBuilder binary = new StringBuilder();\n        for (int i : testTup) {\n            binary.append(i);\n            //begin to write code\n",
        "java_prompt": "Write a function to convert the given binary tuple to integer.",
        "code_str_generate": "class Solution {\n    public static String binaryToInteger(int[] testTup) {\n\n        /*\n        progame language:java\n        description:Write a function to convert the given binary tuple to integer.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        StringBuilder binary = new StringBuilder();\n        for (int i : testTup) {\n            binary.append(i);\n            //begin to write code\n"
    },
    {
        "task_id": 495,
        "code_str": "class Solution {\n    public String remove_lowercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        String result = matcher.replaceAll(\"\");\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.remove_lowercase(\"KDeoALOklOOHserfLoAJSIskdsf\").equals(\"KDALOOOHLAJSI\");\n        assert solution.remove_lowercase(\"ProducTnamEstreAmIngMediAplAYer\").equals(\"PTEAIMAAY\");\n        assert solution.remove_lowercase(\"maNufacTuredbYSheZenTechNolOGIes\").equals(\"NTYSZTNOGI\");\n    }\n}\n",
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public String remove_lowercase(String str1) {\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove lowercase substrings from a given string by using regex.",
        "code_str_generate": "class Solution {\n    public String remove_lowercase(String str1) {\n\n        /*\n        progame language:java\n        description:Write a function to remove lowercase substrings from a given string by using regex.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Pattern pattern = Pattern.compile(\"[a-z]\");\n        Matcher matcher = pattern.matcher(str1);\n        //begin to write code\n"
    },
    {
        "task_id": 496,
        "code_str": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        for (int i = 0; i < n; i++) {\n            smallestNums[i] = pq.poll();\n        }\n        return smallestNums;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] nums1 = {25, 35, 22, 85, 14, 65, 75, 25, 58};\n        int[] result1 = solution.heapQueueSmallest(nums1, 3);\n        assert result1[0] == 14;\n        assert result1[1] == 22;\n        assert result1[2] == 25;\n\n        int[] nums2 = {25, 35, 22, 85, 14, 65, 75, 25, 58};\n        int[] result2 = solution.heapQueueSmallest(nums2, 2);\n        assert result2[0] == 14;\n        assert result2[1] == 22;\n\n        int[] nums3 = {25, 35, 22, 85, 14, 65, 75, 22, 58};\n        int[] result3 = solution.heapQueueSmallest(nums3, 5);\n        assert result3[0] == 14;\n        assert result3[1] == 22;\n        assert result3[2] == 22;\n        assert result3[3] == 25;\n        assert result3[4] == 35;\n    }\n}\n",
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        //begin to write code\n",
        "java_prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
        "code_str_generate": "class Solution {\n    public int[] heapQueueSmallest(int[] nums, int n) {\n\n        /*\n        progame language:java\n        description:Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int num : nums) {\n            pq.offer(num);\n        }\n        int[] smallestNums = new int[n];\n        //begin to write code\n"
    },
    {
        "task_id": 497,
        "code_str": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        return SA;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Math.abs(Solution.surfacearea_cone(5,12) - 282.7433388230814) < 1e-9;\n        assert Math.abs(Solution.surfacearea_cone(10,15) - 880.5179353159282) < 1e-9;\n        assert Math.abs(Solution.surfacearea_cone(19,17) - 2655.923961165254) < 1e-9;\n    }\n}\n",
        "prompt": "Write a function to find the surface area of a cone.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n",
        "java_prompt": "Write a function to find the surface area of a cone.",
        "code_str_generate": "class Solution {\n    public static double surfacearea_cone(double r, double h) {\n\n        /*\n        progame language:java\n        description:Write a function to find the surface area of a cone.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double l = Math.sqrt(r * r + h * h);\n        double SA = Math.PI * r * (r + l);\n        //begin to write code\n"
    },
    {
        "task_id": 498,
        "code_str": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n                gcd = k;\n                break;\n            }\n        }\n        return gcd;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.gcd(12, 17) == 1;\n        assert solution.gcd(4,6) == 2;\n        assert solution.gcd(2,9) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find gcd of two positive integers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int gcd(int x, int y) {\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n",
        "java_prompt": "Write a java function to find gcd of two positive integers.",
        "code_str_generate": "class Solution {\n    public int gcd(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find gcd of two positive integers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int gcd = 1;\n        if (x % y == 0) {\n            return y;\n        }\n        for (int k = y / 2; k > 0; k--) {\n            if (x % k == 0 && y % k == 0) {\n            //begin to write code\n"
    },
    {
        "task_id": 499,
        "code_str": "class Solution {\n    public static double diameterCircle(double r) {\n        double diameter = 2 * r;\n        return diameter;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.diameterCircle(10) == 20;\n        assert Solution.diameterCircle(40) == 80;\n        assert Solution.diameterCircle(15) == 30;\n    }\n}\n",
        "prompt": "Write a function to find the diameter of a circle.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static double diameterCircle(double r) {\n        double diameter = 2 * r;\n        //begin to write code\n",
        "java_prompt": "Write a function to find the diameter of a circle.",
        "code_str_generate": "class Solution {\n    public static double diameterCircle(double r) {\n\n        /*\n        progame language:java\n        description:Write a function to find the diameter of a circle.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        double diameter = 2 * r;\n        //begin to write code\n"
    },
    {
        "task_id": 500,
        "code_str": "class Solution {\n    public static String concatenateElements(String[] list) {\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n        }\n        return ans;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.concatenateElements(new String[]{\"hello\",\"there\",\"have\",\"a\",\"rocky\",\"day\"}).equals(\"  hello there have a rocky day\");\n        assert Solution.concatenateElements(new String[]{\"Hi\", \"there\", \"How\",\"are\", \"you\"}).equals(\"  Hi there How are you\");\n        assert Solution.concatenateElements(new String[]{\"Part\", \"of\", \"the\",\"journey\", \"is\", \"end\"}).equals(\"  Part of the journey is end\");\n    }\n}\n",
        "prompt": "Write a function to concatenate all elements of the given list into a string.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static String concatenateElements(String[] list) {\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n            //begin to write code\n",
        "java_prompt": "Write a function to concatenate all elements of the given list into a string.",
        "code_str_generate": "class Solution {\n    public static String concatenateElements(String[] list) {\n\n        /*\n        progame language:java\n        description:Write a function to concatenate all elements of the given list into a string.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        String ans = \" \";\n        for (String i : list) {\n            ans = ans + \" \" + i;\n            //begin to write code\n"
    },
    {
        "task_id": 501,
        "code_str": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n\n    public static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        int result = 0;\n        int z = (int) Math.sqrt(n);\n        for (int i = 1; i <= z; i++) {\n            if (n % i == 0) {\n                result += 2;\n                if (i == n / i) {\n                    result -= 1;\n                }\n            }\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main {\n    public static void main(String[] args) {\n        assert Solution.num_comm_div(2, 4) == 2;\n        assert Solution.num_comm_div(2, 8) == 2;\n        assert Solution.num_comm_div(12, 24) == 6;\n    }\n}\n",
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public static int num_comm_div(int x, int y) {\n        int n = ngcd(x, y);\n        int result = 0;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find common divisor between two numbers in a given pair.",
        "code_str_generate": "class Solution {\n    public static int ngcd(int x, int y) {\n        int gcd = 1;\n        for (int i = 1; i <= x && i <= y; i++) {\n            if (x % i == 0 && y % i == 0) {\n                gcd = i;\n            }\n        }\n        return gcd;\n    }\n    public static int num_comm_div(int x, int y) {\n\n        /*\n        progame language:java\n        description:Write a java function to find common divisor between two numbers in a given pair.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = ngcd(x, y);\n        int result = 0;\n        //begin to write code\n"
    },
    {
        "task_id": 502,
        "code_str": "class Solution {\n    public int find(int n, int m) {\n        int r = n % m;\n        return r;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.find(3,3) == 0;\n        assert solution.find(10,3) == 1;\n        assert solution.find(16,5) == 1;\n    }\n}\n",
        "prompt": "Write a python function to find remainder of two numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int find(int n, int m) {\n        int r = n % m;\n        //begin to write code\n",
        "java_prompt": "Write a java function to find remainder of two numbers.",
        "code_str_generate": "class Solution {\n    public int find(int n, int m) {\n\n        /*\n        progame language:java\n        description:Write a java function to find remainder of two numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int r = n % m;\n        //begin to write code\n"
    },
    {
        "task_id": 503,
        "code_str": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n        }\n        return result;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n\n        List<Integer> test1 = Arrays.asList(1, 1, 3, 4, 4, 5, 6, 7);\n        List<Integer> result1 = Arrays.asList(2, 4, 7, 8, 9, 11, 13);\n        assert solution.addConsecutiveNums(test1).equals(result1);\n\n        List<Integer> test2 = Arrays.asList(4, 5, 8, 9, 6, 10);\n        List<Integer> result2 = Arrays.asList(9, 13, 17, 15, 16);\n        assert solution.addConsecutiveNums(test2).equals(result2);\n\n        List<Integer> test3 = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List<Integer> result3 = Arrays.asList(3, 5, 7, 9, 11, 13, 15, 17, 19);\n        assert solution.addConsecutiveNums(test3).equals(result3);\n    }\n}\n",
        "prompt": "Write a function to add consecutive numbers of a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n            //begin to write code\n",
        "java_prompt": "Write a function to add consecutive numbers of a given list.",
        "code_str_generate": "class Solution {\n    public List<Integer> addConsecutiveNums(List<Integer> nums) {\n\n        /*\n        progame language:java\n        description:Write a function to add consecutive numbers of a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i < nums.size() - 1; i++) {\n            result.add(nums.get(i) + nums.get(i + 1));\n            //begin to write code\n"
    },
    {
        "task_id": 504,
        "code_str": "class Solution {\n    public static int sum_Of_Series(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n        }\n        return sum;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.sum_Of_Series(5) == 225;\n        assert Solution.sum_Of_Series(2) == 9;\n        assert Solution.sum_Of_Series(3) == 36;\n    }\n}\n",
        "prompt": "Write a python function to find the cube sum of first n natural numbers.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int sum_Of_Series(int n) {\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n",
        "java_prompt": "Write a java function to find the cube sum of first n natural numbers.",
        "code_str_generate": "class Solution {\n    public static int sum_Of_Series(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the cube sum of first n natural numbers.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int sum = 0;\n        for (int i = 1; i <= n; i++) {\n            sum += i * i * i;\n            //begin to write code\n"
    },
    {
        "task_id": 505,
        "code_str": "class Solution {\n    public static int[] reOrder(int[] A) {\n        int k = 0;\n        for (int i : A) {\n            if (i != 0) {\n                A[k] = i;\n                k++;\n            }\n        }\n        for (int i = k; i < A.length; i++) {\n            A[i] = 0;\n        }\n        return A;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert java.util.Arrays.equals(Solution.reOrder(new int[]{6, 0, 8, 2, 3, 0, 4, 0, 1}), new int[]{6, 8, 2, 3, 4, 1, 0, 0, 0});\n        assert java.util.Arrays.equals(Solution.reOrder(new int[]{4, 0, 2, 7, 0, 9, 0, 12, 0}), new int[]{4, 2, 7, 9, 12, 0, 0, 0, 0});\n        assert java.util.Arrays.equals(Solution.reOrder(new int[]{3, 11, 0, 74, 14, 0, 1, 0, 2}), new int[]{3, 11, 74, 14, 1, 2, 0, 0, 0});\n    }\n}\n",
        "prompt": "Write a function to move all zeroes to the end of the given array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int[] reOrder(int[] A) {\n        int k = 0;\n        for (int i : A) {\n            if (i != 0) {\n                A[k] = i;\n                k++;\n            }\n            //begin to write code\n",
        "java_prompt": "Write a function to move all zeroes to the end of the given array.",
        "code_str_generate": "class Solution {\n    public static int[] reOrder(int[] A) {\n\n        /*\n        progame language:java\n        description:Write a function to move all zeroes to the end of the given array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int k = 0;\n        for (int i : A) {\n            if (i != 0) {\n                A[k] = i;\n                k++;\n            }\n            //begin to write code\n"
    },
    {
        "task_id": 506,
        "code_str": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                }\n                if (j < k) {\n                    P[i][j + 1] = 0;\n                }\n            }\n        }\n        return P[n][k];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.permutationCoefficient(10, 2) == 90;\n        assert solution.permutationCoefficient(10, 3) == 720;\n        assert solution.permutationCoefficient(10, 1) == 10;\n    }\n}\n",
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                    //begin to write code\n",
        "java_prompt": "Write a function to calculate the permutation coefficient of given p(n, k).",
        "code_str_generate": "class Solution {\n    public int permutationCoefficient(int n, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to calculate the permutation coefficient of given p(n, k).\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int[][] P = new int[n + 1][k + 1];\n        for (int i = 0; i <= n; i++) {\n            for (int j = 0; j <= Math.min(i, k); j++) {\n                if (j == 0) {\n                    P[i][j] = 1;\n                } else {\n                    P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]);\n                    //begin to write code\n"
    },
    {
        "task_id": 507,
        "code_str": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        return list1;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        ArrayList<String> list1 = new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"));\n        ArrayList<String> removewords = new ArrayList<String>(Arrays.asList(\"white\", \"orange\"));\n        ArrayList<String> result = Solution.removeWords(list1, removewords);\n        assert result.equals(new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"blue\", \"black\")));\n\n        list1 = new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"));\n        removewords = new ArrayList<String>(Arrays.asList(\"black\", \"orange\"));\n        result = Solution.removeWords(list1, removewords);\n        assert result.equals(new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"blue\", \"white\")));\n\n        list1 = new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"blue\", \"white\", \"black\", \"orange\"));\n        removewords = new ArrayList<String>(Arrays.asList(\"blue\", \"white\"));\n        result = Solution.removeWords(list1, removewords);\n        assert result.equals(new ArrayList<String>(Arrays.asList(\"red\", \"green\", \"black\", \"orange\")));\n    }\n}\n",
        "prompt": "Write a function to remove specific words from a given list.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n        list1.removeAll(removewords);\n        //begin to write code\n",
        "java_prompt": "Write a function to remove specific words from a given list.",
        "code_str_generate": "class Solution {\n    public static ArrayList<String> removeWords(ArrayList<String> list1, ArrayList<String> removewords) {\n\n        /*\n        progame language:java\n        description:Write a function to remove specific words from a given list.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        list1.removeAll(removewords);\n        //begin to write code\n"
    },
    {
        "task_id": 508,
        "code_str": "class Solution {\n    public static boolean sameOrder(List<String> l1, List<String> l2) {\n        Set<String> commonElements = new HashSet<>(l1);\n        commonElements.retainAll(new HashSet<>(l2));\n        l1.retainAll(commonElements);\n        l2.retainAll(commonElements);\n        return l1.equals(l2);\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<>(Arrays.asList(\"red\",\"green\",\"black\",\"orange\"));\n        List<String> list2 = new ArrayList<>(Arrays.asList(\"red\",\"pink\",\"green\",\"white\",\"black\"));\n        assert Solution.sameOrder(list1, list2) == true;\n\n        list1 = new ArrayList<>(Arrays.asList(\"red\",\"pink\",\"green\",\"white\",\"black\"));\n        list2 = new ArrayList<>(Arrays.asList(\"white\",\"orange\",\"pink\",\"black\"));\n        assert Solution.sameOrder(list1, list2) == false;\n\n        list1 = new ArrayList<>(Arrays.asList(\"red\",\"green\",\"black\",\"orange\"));\n        list2 = new ArrayList<>(Arrays.asList(\"red\",\"pink\",\"green\",\"white\",\"black\"));\n        assert Solution.sameOrder(list1, list2) == true;\n    }\n}\n",
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static boolean sameOrder(List<String> l1, List<String> l2) {\n        Set<String> commonElements = new HashSet<>(l1);\n        commonElements.retainAll(new HashSet<>(l2));\n        l1.retainAll(commonElements);\n        //begin to write code\n",
        "java_prompt": "Write a function to check if the common elements between two given lists are in the same order or not.",
        "code_str_generate": "class Solution {\n    public static boolean sameOrder(List<String> l1, List<String> l2) {\n\n        /*\n        progame language:java\n        description:Write a function to check if the common elements between two given lists are in the same order or not.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        Set<String> commonElements = new HashSet<>(l1);\n        commonElements.retainAll(new HashSet<>(l2));\n        l1.retainAll(commonElements);\n        //begin to write code\n"
    },
    {
        "task_id": 509,
        "code_str": "class Solution {\n    public static int average_Odd(int n) {\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n            count = count + 1;\n            sm = sm + n;\n            n = n - 2;\n        }\n        return sm / count;\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        assert Solution.average_Odd(9) == 5;\n        assert Solution.average_Odd(5) == 3;\n        assert Solution.average_Odd(11) == 6;\n    }\n}\n",
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public static int average_Odd(int n) {\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n        //begin to write code\n",
        "java_prompt": "Write a java function to find the average of odd numbers till a given odd number.",
        "code_str_generate": "class Solution {\n    public static int average_Odd(int n) {\n\n        /*\n        progame language:java\n        description:Write a java function to find the average of odd numbers till a given odd number.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        if (n % 2 == 0) {\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n        int sm = 0;\n        int count = 0;\n        while (n >= 1) {\n        //begin to write code\n"
    },
    {
        "task_id": 510,
        "code_str": "class Solution {\n    public int no_of_subsequences(int[] arr, int k) {\n        int n = arr.length;\n        int[][] dp = new int[k + 1][n + 1];\n        for (int i = 1; i <= k; i++) {\n            for (int j = 1; j <= n; j++) {\n                dp[i][j] = dp[i][j - 1];\n                if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                    dp[i][j] += dp[i / arr[j - 1]][j - 1] + 1;\n                }\n            }\n        }\n        return dp[k][n];\n    }\n}\n",
        "test": "\npublic class Main{\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        assert solution.no_of_subsequences(new int[]{1,2,3,4}, 10) == 11;\n        assert solution.no_of_subsequences(new int[]{4,8,7,2}, 50) == 9;\n        assert solution.no_of_subsequences(new int[]{5,6,7,8}, 15) == 4;\n    }\n}\n",
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "is_deleted": 1,
        "code_str_deleted": "class Solution {\n    public int no_of_subsequences(int[] arr, int k) {\n        int n = arr.length;\n        int[][] dp = new int[k + 1][n + 1];\n        for (int i = 1; i <= k; i++) {\n            for (int j = 1; j <= n; j++) {\n                dp[i][j] = dp[i][j - 1];\n                if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                //begin to write code\n",
        "java_prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
        "code_str_generate": "class Solution {\n    public int no_of_subsequences(int[] arr, int k) {\n\n        /*\n        progame language:java\n        description:Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n        you must follow:\n        1. Provide the complete code without any textual explanations and do not generate test scripts.\n        2. Please strictly follow the specified format provided below for the code.\n        3. Do not change the function names.\n        4. The original code content must be fully included in the generated complete code, including all package import sections.\n        5. For C++ language, do not generate the main function; I have my own main function available.\n        6. Do not generate test cases.\n        */\n\n        int n = arr.length;\n        int[][] dp = new int[k + 1][n + 1];\n        for (int i = 1; i <= k; i++) {\n            for (int j = 1; j <= n; j++) {\n                dp[i][j] = dp[i][j - 1];\n                if (arr[j - 1] <= i && arr[j - 1] > 0) {\n                //begin to write code\n"
    }
]